{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/0.jpg","path":"images/0.jpg","modified":1,"renderable":0},{"_id":"source/images/12.jpeg","path":"images/12.jpeg","modified":1,"renderable":0},{"_id":"source/images/13.jpeg","path":"images/13.jpeg","modified":1,"renderable":0},{"_id":"source/images/15.jpeg","path":"images/15.jpeg","modified":1,"renderable":0},{"_id":"source/images/22.jpeg","path":"images/22.jpeg","modified":1,"renderable":0},{"_id":"source/images/21.jpeg","path":"images/21.jpeg","modified":1,"renderable":0},{"_id":"source/images/2.jpeg","path":"images/2.jpeg","modified":1,"renderable":0},{"_id":"source/images/4.jpeg","path":"images/4.jpeg","modified":1,"renderable":0},{"_id":"source/images/5.jpeg","path":"images/5.jpeg","modified":1,"renderable":0},{"_id":"source/images/6.jpeg","path":"images/6.jpeg","modified":1,"renderable":0},{"_id":"source/images/bk.jpg","path":"images/bk.jpg","modified":1,"renderable":0},{"_id":"source/images/9.gif","path":"images/9.gif","modified":1,"renderable":0},{"_id":"source/images/favicon.ico","path":"images/favicon.ico","modified":1,"renderable":0},{"_id":"source/images/user.jpg","path":"images/user.jpg","modified":1,"renderable":0},{"_id":"source/images/user1.jpg","path":"images/user1.jpg","modified":1,"renderable":0},{"_id":"source/images/14.jpeg","path":"images/14.jpeg","modified":1,"renderable":0},{"_id":"source/images/7.jpeg","path":"images/7.jpeg","modified":1,"renderable":0},{"_id":"source/images/7.jpg","path":"images/7.jpg","modified":1,"renderable":0},{"_id":"themes/next/source/js/photo.js","path":"js/photo.js","modified":1,"renderable":1},{"_id":"source/images/10.jpeg","path":"images/10.jpeg","modified":1,"renderable":0},{"_id":"source/images/upload/10.jpg","path":"images/upload/10.jpg","modified":1,"renderable":0},{"_id":"source/images/upload/1.jpg","path":"images/upload/1.jpg","modified":1,"renderable":0},{"_id":"source/images/upload/11.jpg","path":"images/upload/11.jpg","modified":1,"renderable":0},{"_id":"source/images/upload/3.jpg","path":"images/upload/3.jpg","modified":1,"renderable":0},{"_id":"source/images/upload/5.jpg","path":"images/upload/5.jpg","modified":1,"renderable":0},{"_id":"source/images/upload/2.jpg","path":"images/upload/2.jpg","modified":1,"renderable":0},{"_id":"source/images/upload/4.jpg","path":"images/upload/4.jpg","modified":1,"renderable":0},{"_id":"source/images/upload/7.jpg","path":"images/upload/7.jpg","modified":1,"renderable":0},{"_id":"source/images/upload/9.jpg","path":"images/upload/9.jpg","modified":1,"renderable":0},{"_id":"source/images/upload/8.jpg","path":"images/upload/8.jpg","modified":1,"renderable":0},{"_id":"source/images/upload/6.jpg","path":"images/upload/6.jpg","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"source/images/1.jpeg","path":"images/1.jpeg","modified":1,"renderable":0},{"_id":"source/images/3.jpeg","path":"images/3.jpeg","modified":1,"renderable":0},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"source/images/8.jpeg","path":"images/8.jpeg","modified":1,"renderable":0},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"source/images/11.gif","path":"images/11.gif","modified":1,"renderable":0},{"_id":"source/images/upload/0.gif","path":"images/upload/0.gif","modified":1,"renderable":0}],"Cache":[{"_id":"source/.DS_Store","hash":"2809a8d5a18a02437262243b2937e7defaaf4dfa","modified":1492221516000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1489114116000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1489114116000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1489114116000},{"_id":"themes/next/.gitignore","hash":"5f09fca02e030b7676c1d312cd88ce8fbccf381c","modified":1489114116000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1489114116000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1489114116000},{"_id":"themes/next/.javascript_ignore","hash":"f9ea3c5395f8feb225a24e2c32baa79afda30c16","modified":1489114116000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1489114116000},{"_id":"themes/next/.travis.yml","hash":"c42d9608c8c7fe90de7b1581a8dc3886e90c179e","modified":1489114116000},{"_id":"themes/next/README.en.md","hash":"4ece25ee5f64447cd522e54cb0fffd9a375f0bd4","modified":1489114116000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1489114116000},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1489114116000},{"_id":"themes/next/bower.json","hash":"5abc236d9cc2512f5457ed57c1fba76669eb7399","modified":1489114116000},{"_id":"themes/next/_config.yml","hash":"6574435219752e64a43d934cf3f3c8cc5579e31a","modified":1492436592000},{"_id":"themes/next/gulpfile.coffee","hash":"933e6d29eb82522cff0df209d52b935e91b1111c","modified":1489114116000},{"_id":"themes/next/package.json","hash":"7e87b2621104b39a30488654c2a8a0c6a563574b","modified":1489114116000},{"_id":"source/_posts/CI常用函数.md","hash":"92e22919e20cd8b267e8bb3e1fe51f3ddd387efa","modified":1491554333000},{"_id":"source/_posts/Mac命令大全.md","hash":"74902c5fac5ea245fe66cd229f80e75fa67f75b3","modified":1492226703000},{"_id":"source/_posts/HTTP、HTTP2-0、SPDY、HTTPS.md","hash":"352d66a48b24fef8c2723e31700e471fc371883e","modified":1497149091000},{"_id":"source/_posts/canvas代码块.md","hash":"a66d3c674db03670bfd804275374f027ffffb561","modified":1498458938000},{"_id":"source/_posts/gulp构建.md","hash":"5c6fec0927d3103086260c98f86324ea4f511bde","modified":1501121425000},{"_id":"source/_posts/hello-world.md","hash":"b88acfa02343bc0eec53e11e59e657377e05e2c0","modified":1492226836000},{"_id":"source/_posts/gogs-自动化部署.md","hash":"10adc0a2592eaa3eeb5045e9a78dec378c1b846d","modified":1501121410000},{"_id":"source/_posts/react知识点.md","hash":"cd4f8b0d7848a1b303d4bba2e8f9e0d3601494f0","modified":1492190869000},{"_id":"source/_posts/shell-命令大全.md","hash":"66a5b70e8816fc63a64f67b45be1d7ff13ff42c1","modified":1492226717000},{"_id":"source/_posts/koa2搭建接口服务器实践.md","hash":"34f36f88450d51bb0cfcacac14bcec076d3ad22e","modified":1501121434000},{"_id":"source/_posts/nodejs模版引擎.md","hash":"8a098479cfd15e2753682109204dd41131ec4e11","modified":1501121439000},{"_id":"source/_posts/vue知识点.md","hash":"f333dc2d7d8b3e5b738ea2481b7030c7ff57c366","modified":1493294195000},{"_id":"source/_posts/前端功能代码块.md","hash":"0f8bf9642368f90016cc4774e41c5b2a8c04dec0","modified":1501121622000},{"_id":"source/_posts/前端mvc框架backbone-js.md","hash":"5cd0c8234d0393a682a286e400c88b6a9ac73cc7","modified":1492393954000},{"_id":"source/_posts/借助nodejs探究websocket.md","hash":"15ef743c140ccc84294712801eb0dd8d4a1db75d","modified":1491874481000},{"_id":"source/_posts/前端文件断点续传.md","hash":"ed666918fbf717699d51e5e4cc1deec2163c9d16","modified":1492396703000},{"_id":"source/_posts/webpack热加载.md","hash":"f8fc390a1403080c43a318ba3337efad9b095794","modified":1501121472000},{"_id":"source/_posts/前端性能优化.md","hash":"f1872ae0f2a3ee99cf04c4dc0567436d943de90d","modified":1495424081000},{"_id":"source/_posts/前端样式代码块.md","hash":"083e9258c6a22ae1fda48be0f113d5739b4a5c05","modified":1501119987000},{"_id":"source/_posts/前端疑难杂症.md","hash":"828a945aeb298e6f9d58b5994a404f0e62a8af62","modified":1501121386000},{"_id":"source/_posts/前端知识点1.md","hash":"a4415966217b1190df7a5f8398338b28a9bafec8","modified":1491820190000},{"_id":"source/_posts/前端知识点2.md","hash":"0c32abefabd5ebe904a4ac334bb8b00c9576e631","modified":1491820195000},{"_id":"source/_posts/手写webpack的plugin.md","hash":"cff0c523bf42b187ca23c5725534dbc68c69325a","modified":1494209671000},{"_id":"source/_posts/常用设计素材网站.md","hash":"8873efe2df2155d1d10316e51e9099cf82bad7b9","modified":1501121374000},{"_id":"source/_posts/标签列表.md","hash":"6c1636a825f85ed5d48092c49cb173e67edb915c","modified":1491820197000},{"_id":"source/_posts/正则.md","hash":"30ff01e0e491871ee703eef4671242b2dfa54bb8","modified":1492421450000},{"_id":"source/_posts/浅析前端渲染机制.md","hash":"7be3c211c6a051042ac08553e4034418b4af48d7","modified":1492226948000},{"_id":"source/_posts/浅谈csrf攻击方式.md","hash":"f5e4d2960bed80fb0374ab61e952c925de24c630","modified":1496299320000},{"_id":"source/_posts/用户体验设计.md","hash":"3a53ab0b0261ced3f68cf15a4e17a74eda4b7632","modified":1501121401000},{"_id":"source/_posts/排序算法整理.md","hash":"c5bd463a7f4019512d7fcf7bcbd6fce89dd10a04","modified":1492226593000},{"_id":"source/_posts/跨域.md","hash":"84ac24c1e56e8d83ecb8bc76b2092ae9659abd22","modified":1492226613000},{"_id":"source/categories/index.md","hash":"9c00bedfc4f6a733896fdfa990c2fea02709c418","modified":1491818153000},{"_id":"source/guestbook/index.md","hash":"ad9bc473103575cd0a81639d3cfc851ee5ec65ce","modified":1492188717000},{"_id":"source/_posts/移动端资源整理.md","hash":"b70abb1639c0539b45afd1948a040699a55c96e4","modified":1492226882000},{"_id":"source/_posts/浏览器缓存机制.md","hash":"10516fcda508102d8a40064f1e2549356ed3c725","modified":1499150035000},{"_id":"source/images/.DS_Store","hash":"58c61012321c33f61228df984cf742397fd6da40","modified":1492401040000},{"_id":"source/images/0.jpg","hash":"3bc2c7d512d18b63dbcc288bcb68e5774879b46b","modified":1491640668000},{"_id":"source/images/12.jpeg","hash":"f23fd56603e6cd72b074657c880b4b3c49deab99","modified":1491720891000},{"_id":"source/images/13.jpeg","hash":"7812864dc6ee30578b8c3fd799189bd48c3c5715","modified":1491721331000},{"_id":"source/images/15.jpeg","hash":"8986a8a7b8b35abbf97e36524df978f2d18fd253","modified":1491721419000},{"_id":"source/images/22.jpeg","hash":"616cd544c4f3f78dbcda00f848aa8fb55996bf98","modified":1497151035000},{"_id":"source/images/21.jpeg","hash":"54ea146c95fed12ee4907508e43ba5592d20734d","modified":1497151047000},{"_id":"source/images/2.jpeg","hash":"a3724fb441381f7433a149ebc1295ec6f0c5db80","modified":1491643355000},{"_id":"source/images/4.jpeg","hash":"983a04147bfd52d3ec9ec0c1c6773576838028ea","modified":1491644015000},{"_id":"source/images/5.jpeg","hash":"54a21077a212ecaf3cf5971b21bad3852d7955f7","modified":1491644503000},{"_id":"source/images/6.jpeg","hash":"dc21985e4c5ad443a85d660cacadfc8b8fd75322","modified":1491662449000},{"_id":"source/images/bk.jpg","hash":"57fc025c4bc6f931300320e5c391528486672de9","modified":1491641843000},{"_id":"source/images/9.gif","hash":"88694a222cde46ee0a75ebab5fff622b61112246","modified":1491644783000},{"_id":"source/images/favicon.ico","hash":"18f36aed7d90a4f93b985dd43c2a76de339a3374","modified":1481461190000},{"_id":"source/images/user.jpg","hash":"0d2f97d19f9eb0aa2acefb4785d9a4bd36f1c1b3","modified":1491724224000},{"_id":"source/images/user1.jpg","hash":"2bcbaff5ac8871834cd595333bbe5f541e30b971","modified":1481552684000},{"_id":"source/photos/tool.js","hash":"b483577ebc535debeb5e9730448fdfa7103cc7d3","modified":1489164136000},{"_id":"source/photos/index.md","hash":"8f0859d2fa1ded437914ec3d10e3977c8eba3656","modified":1489165525000},{"_id":"source/tags/index.md","hash":"190f066963ccc457df8efd5a3125ae8103807ef9","modified":1489163360000},{"_id":"themes/next/.git/FETCH_HEAD","hash":"d28778720941b341413254cd0e40522f4497bdbc","modified":1498034950000},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1489114115000},{"_id":"themes/next/.git/config","hash":"bf7d1df65cf34d0f25a7184a58c37a09f72e4be7","modified":1489114115000},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1489113902000},{"_id":"themes/next/.git/index","hash":"c9d9dee926fa917141b6aac44778e71ed70d556f","modified":1492141014000},{"_id":"themes/next/.git/sourcetreeconfig","hash":"f68edb61b0d443d77cea6bb4bcf53c8f832968f5","modified":1498034951000},{"_id":"themes/next/.git/packed-refs","hash":"547f7c5e2791e36cc09c2444d3a4a65fe5468d12","modified":1489114115000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ab257af816986cd0e53f9527a92d5934ac70ae9","modified":1489114116000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"c2024ded82143807c28a299c5fe6b927ef3525ff","modified":1489114116000},{"_id":"themes/next/languages/de.yml","hash":"1fdea1f84b7f691f5b4dd4d2b43eeb27b10fa0c8","modified":1489114116000},{"_id":"themes/next/languages/default.yml","hash":"95ec5cdfb563854f231b76162a3494f6ecc5bf61","modified":1489114116000},{"_id":"themes/next/languages/en.yml","hash":"95ec5cdfb563854f231b76162a3494f6ecc5bf61","modified":1489114116000},{"_id":"themes/next/languages/ko.yml","hash":"b6bc5d6b0c000deb44099b42d3aebb8c49dbfca9","modified":1489114116000},{"_id":"themes/next/languages/ja.yml","hash":"49f12149edcc1892b26a6207328cda64da20116d","modified":1489114116000},{"_id":"themes/next/languages/fr-FR.yml","hash":"e98f1558347752a20019b71f0b1f9c8be1b34f42","modified":1489114116000},{"_id":"themes/next/languages/id.yml","hash":"34396bef27c4ab9e9a3c5d3e3aa94b0e3b3a7b0d","modified":1489114116000},{"_id":"themes/next/languages/pt-BR.yml","hash":"7742ba4c0d682cbe1d38305332ebc928abd754b5","modified":1489114116000},{"_id":"themes/next/languages/pt.yml","hash":"6b660b117314cad93f08757601df3adb04c68beb","modified":1489114116000},{"_id":"themes/next/languages/ru.yml","hash":"5022885d8955e1b91d8841048db272bf99c59a76","modified":1489114116000},{"_id":"themes/next/languages/zh-hk.yml","hash":"19c23d21f262e24c06ee6ddfd51d2a6585304f88","modified":1489114116000},{"_id":"themes/next/languages/zh-tw.yml","hash":"68407799271c78ecc07f03d238257dd8c65ad42d","modified":1489114116000},{"_id":"themes/next/layout/_layout.swig","hash":"93bfdf98cc7c8f79964eedf699c6bf37b7d13128","modified":1497148972000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"2a0a3d81f5ddc47503c21de5cd47075101cb2fc4","modified":1492188790000},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1489114116000},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1489114116000},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1491876800000},{"_id":"themes/next/layout/page.swig","hash":"c0ed181a35d5183808e3d7e73931098a3ac11260","modified":1492159138000},{"_id":"themes/next/scripts/merge-configs.js","hash":"13c8b3a2d9fce06c2488820d9248d190c8100e0a","modified":1489114116000},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1489114116000},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1489114116000},{"_id":"themes/next/layout/schedule.swig","hash":"1f1cdc268f4ef773fd3ae693bbdf7d0b2f45c3a3","modified":1489114116000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1489114116000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1489114116000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1489114116000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1489114116000},{"_id":"source/_posts/前端知识图谱.md","hash":"0bc15ec10e6160741b22085ee670379173162d9d","modified":1495434482000},{"_id":"source/images/14.jpeg","hash":"8a423ee8c611f0b4da613cf4549c45c5f18d49f3","modified":1491721390000},{"_id":"source/images/7.jpeg","hash":"00ce546769aaf19455ef58c3cd0ea892ad842ce5","modified":1491661851000},{"_id":"source/images/7.jpg","hash":"d2c6e4f7236f1893d0e46be31c6cfe238a77c97e","modified":1491664871000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1489114116000},{"_id":"themes/next/source/js/photo.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1489164360000},{"_id":"source/images/10.jpeg","hash":"fd3cb5a600b21b84b5f04255f53768514ddca440","modified":1491643893000},{"_id":"source/images/upload/10.jpg","hash":"cf3e87b782044aad7530c855706aa16678788023","modified":1492151612000},{"_id":"source/images/upload/1.jpg","hash":"c274855d87aa4dbdb0e24d6c0fa993df2aa03546","modified":1492151440000},{"_id":"source/images/upload/11.jpg","hash":"898bcad2f470010d49fd5fa697c3b90b805e2c5c","modified":1492151624000},{"_id":"source/images/upload/3.jpg","hash":"15d19ad66d9aa3a711617a394bd03cc088300972","modified":1492151502000},{"_id":"source/images/upload/5.jpg","hash":"4bb37bc03c0ad365a6002d1da680fc7ab374e981","modified":1492151529000},{"_id":"source/images/upload/2.jpg","hash":"9176fc1291b695c67f59ac940950cf2ef51fbd50","modified":1492151477000},{"_id":"source/images/upload/4.jpg","hash":"7eb858ab45d1822e774580f68d3066df54f49ecd","modified":1492151517000},{"_id":"source/images/upload/7.jpg","hash":"1068ab409d376942272e09b1d9cdf37fb1d35e2a","modified":1492151554000},{"_id":"source/images/upload/9.jpg","hash":"334f95b5118b4cd427a1bd4ce0c6d9582879ab28","modified":1492151596000},{"_id":"source/images/upload/8.jpg","hash":"02c2ad4922a5073fb122c51c0bc658bee4dc33e5","modified":1492151568000},{"_id":"source/images/upload/6.jpg","hash":"b38f7f8f13f40411555fc669e767e36b1eec566e","modified":1492151541000},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1489113902000},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1489113902000},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1489113902000},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1489113902000},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1489113902000},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1489113902000},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1489113902000},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1489113902000},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1489113902000},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1489113902000},{"_id":"themes/next/.git/logs/HEAD","hash":"68d991d9e307eb00dfbf6922a51e679118a1c054","modified":1489114115000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1489114116000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1489114116000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"5864f5567ba5efeabcf6ea355013c0b603ee07f2","modified":1489114116000},{"_id":"themes/next/layout/_macro/post.swig","hash":"ac34bc21ecd714677d99af4c6e3d83a0ba60e9c1","modified":1501121308000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1489114116000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1489114116000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"911b99ba0445b2c07373128d87a4ef2eb7de341a","modified":1489114116000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"970aa668680896262b1056bb5787fc9ec8754495","modified":1489114116000},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1489114116000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"9d7c0a873b332b090343dd25009a6e1e519e2b46","modified":1501118759000},{"_id":"themes/next/layout/_partials/head.swig","hash":"a0eafe24d1dae30c790ae35612154b3ffbbd5cce","modified":1489114116000},{"_id":"themes/next/layout/_partials/header.swig","hash":"a1ffbb691dfad3eaf2832a11766e58a179003b8b","modified":1489114116000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1489114116000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1489114116000},{"_id":"themes/next/layout/_partials/search.swig","hash":"7b61e96508df70152b809ea5354236ab7f0d54f4","modified":1489114116000},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1489114116000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1489114116000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1489114116000},{"_id":"themes/next/layout/_scripts/lean-analytics.swig","hash":"be34dbbd299d9613fc116a9ff0bb8fcda5059d10","modified":1491546661000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"4512867d80d9eddfc3a0f5fea3c456f33aa9d522","modified":1489114116000},{"_id":"themes/next/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1489114116000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1489114116000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"79378f3a1cd90518b07808ed09156a3ab55ffa31","modified":1489114116000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1489114116000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1489114116000},{"_id":"themes/next/scripts/tags/note.js","hash":"6752925eedbdb939d8ec4d11bdfb75199f18dd70","modified":1489114116000},{"_id":"themes/next/source/css/main.styl","hash":"8ed868a08b9386fc0486cdbd28dcd6b80b9e8ff7","modified":1491722728000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1489114116000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1489114116000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1489114116000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1489114116000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1489114116000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1489114116000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1489114116000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1489114116000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1489114116000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1489114116000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1489114116000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1489114116000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1489114116000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1489114116000},{"_id":"source/_posts/前端知识点3.md","hash":"eaef4d22e9fd7a22d65729e9009e12547384deec","modified":1497149094000},{"_id":"source/images/1.jpeg","hash":"82a1350288ce6efa783246b698b20887ad4b482a","modified":1491643346000},{"_id":"source/images/3.jpeg","hash":"e08275584f00cf94b9dad272102aae4bdac4e7af","modified":1491643365000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1489114116000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1489114116000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1489114116000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1489114116000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1489114116000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1489114116000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1489114116000},{"_id":"themes/next/.git/objects/01/1e06c7aa90464f2b1d40aae05cf9d69e7667f1","hash":"e9888d4243b096c91da6cd30a348734b88c652e4","modified":1492581979000},{"_id":"themes/next/.git/objects/01/86d167d4dbdafb3ff417e03072845e9aafedaa","hash":"be46f6607f12164a3189e064f59a97e67f77ab69","modified":1492839917000},{"_id":"themes/next/.git/objects/02/bd529311d4c97e576f6ba632fe1f3087ee76c9","hash":"531e28914a02eb60445060dc0733f49714975e87","modified":1494816317000},{"_id":"themes/next/.git/objects/02/586070048cbc67bf9c287cdeb3ae79f3375d76","hash":"9f9e93845990fd0003a98d6097698ba75ac7e556","modified":1493171178000},{"_id":"themes/next/.git/objects/04/39899013b683c9ca08f04e18928727301cc508","hash":"1230e4e72f61207c887258533487fc5e4ef1b7a3","modified":1493171178000},{"_id":"themes/next/.git/objects/05/315ffb1c57c813f1cb9cd430846bc879bc04c9","hash":"d2235a21c4c0c92a21f3fc3c1070766812fc3622","modified":1493476607000},{"_id":"themes/next/.git/objects/05/342b5e0683afc3ceb26e0a12a4cce2abd38c9d","hash":"d33c2a33d73a3a50a801cb304b134614ef956526","modified":1493003449000},{"_id":"themes/next/.git/objects/03/fbdcf5d96f4e3ec323d96b1e6c9b3025a071c4","hash":"2f431a5f2afb37d78dfcdeb7d3aab8eba15c8056","modified":1494816317000},{"_id":"themes/next/.git/objects/06/d05701079765e6e926b6ca7af18675bc468b35","hash":"2b7a87e0f1befc466956d74575eb90c78944915b","modified":1492738495000},{"_id":"themes/next/.git/objects/05/b17a34b446375e450b7469bb6013af62c6e54e","hash":"7d2f2803cbbba869a4de794ba4f30cee36b44d41","modified":1493003449000},{"_id":"themes/next/.git/objects/06/91b686a849a0a06db1195d7e1e300ab70c974f","hash":"56011edfc3fd80512a54dd77d8bcb5648c685ebf","modified":1495173444000},{"_id":"themes/next/.git/objects/07/2c0d82e6952926fa250da440e74e0fc9bbcc33","hash":"06480f4b1098a54d76b078ec0414534e8c9623e0","modified":1492581979000},{"_id":"themes/next/.git/objects/09/1f3264f9174a4a466156f9951270851f1669bb","hash":"4241b67783dedad2c513d9739fabeef9eba24861","modified":1492839917000},{"_id":"themes/next/.git/objects/09/ed35e9851fecb6bc0bb59ccc0619cb91f19405","hash":"88db4b14ccdce80a1d327daa18a2e786319e71a8","modified":1493476607000},{"_id":"themes/next/.git/objects/0a/553d882dd046c59c24f7ab4cddc2ea391cad69","hash":"ccb977a7203588651c68b2d7107c6d07694164ad","modified":1493476607000},{"_id":"themes/next/.git/objects/0b/5b8339727566077a1a790fb7c9de63207417b3","hash":"7e6b76e070a9f2310ab64593f286bc5f384ea9c2","modified":1492581979000},{"_id":"themes/next/.git/objects/0c/96cc7ad406094cccd8c2bd6e327e2ec646ae0a","hash":"85f7cd25c04140e829423f17f5c4a2d88fbfbe85","modified":1493171178000},{"_id":"themes/next/.git/objects/0d/53fd31e92298dbecb270430e8e03137cc98fae","hash":"c407c7376e0226eeb5e038660678c700e08c3592","modified":1493876124000},{"_id":"themes/next/.git/objects/0d/b01f80685621888670191e0a40ce754038ee9b","hash":"fd690a67a4238748498df12a1146146788e65eef","modified":1493694878000},{"_id":"themes/next/.git/objects/0d/bde4796a70ca0435b5dc82595d6968b9823437","hash":"608fc26af4198fe77b3739fb904ae04ff01d8a50","modified":1492581979000},{"_id":"themes/next/.git/objects/0d/ee33ec81ffa4b2b471f817f49e157fa1929e9e","hash":"4ea47ee9473a9932e09a333e3725d414d830e917","modified":1493694878000},{"_id":"themes/next/.git/objects/0f/81022920189f7731cdb638f6948d689ecbd18f","hash":"5d1c5f7466c6cd32d5c5f1f14c0e4a79fc9963c0","modified":1493876124000},{"_id":"themes/next/.git/objects/0f/a5682e491779720ebb8ea29c1e31cc4d082d43","hash":"ea988b50be015e72afd998e76bc99d877f29779b","modified":1493476607000},{"_id":"themes/next/.git/objects/0f/f9efef7283a1e619df152923fca9d1c0515254","hash":"820f5595d1ae762bf773d6ae55b16b5df21bd60d","modified":1494816317000},{"_id":"themes/next/.git/objects/10/d0b478d140567fb788a3738ce2d4852de2af2d","hash":"68a1f56a9be3510f50a2ec0b22403c7d17b943fb","modified":1493476607000},{"_id":"themes/next/.git/objects/13/cbdd7e904899600cea8d9d0fec761c1eb485dc","hash":"cdd20e47d592373f3c22ec45b9e3bef81ae85089","modified":1492581979000},{"_id":"themes/next/.git/objects/14/e3690b626a2cccd84dc94d31003d4a690b59cd","hash":"8d253fccaeb26b4cc8f816cc3c8fe19489420f87","modified":1492581979000},{"_id":"themes/next/.git/objects/15/814091717c269317b8d2c3bcbaf9a4c0f7370f","hash":"caeabeda4045ecdce3742db034c782d5e7bf1e67","modified":1492164242000},{"_id":"themes/next/.git/objects/16/8732e4dffa651dbac17dbe413bf944050fbbf5","hash":"1392c8caae0ea742bfb010da7d154d501a02eb8c","modified":1493876124000},{"_id":"themes/next/.git/objects/16/b9be9fe576f8402117eaf80de542ff97bc5121","hash":"77221432ff7228c566100cbb37393c564c39cec0","modified":1492839917000},{"_id":"themes/next/.git/objects/17/10801d9cc301da6dbda30ce18a39a7d70ccb5e","hash":"1e746593bb300d598bb5d561ddfdc479a1056928","modified":1492738495000},{"_id":"themes/next/.git/objects/18/500fbc610d55b755085b73ebad98515955b162","hash":"c2ffcaf728e13e9b70ba7464967488f0b23342c5","modified":1492581979000},{"_id":"themes/next/.git/objects/18/94d2466d5c26ea004c5527c664426295ced116","hash":"4954294f84e525a0c7cbb731ac500e68eba85179","modified":1493876124000},{"_id":"themes/next/.git/objects/1a/65cb05a473d9103838b0cb1e3cfeb662ec298a","hash":"8dc31a0ab532a72a5922cd72a3db15e475c6a2b3","modified":1493876124000},{"_id":"themes/next/.git/objects/1a/e518a36c80ed503904e987875709d3b5469063","hash":"ede0e1c5833c8ce0fd11e57538349eae3259a094","modified":1492839917000},{"_id":"themes/next/.git/objects/1b/30b5858762c8739a075daa848126f9266ec190","hash":"fe2b6e5657a2f1fc920f77e968d2feeb68334cd2","modified":1493003449000},{"_id":"themes/next/.git/objects/1b/82c584c4161bb941550e0057ccc0a9bf5d2c56","hash":"b5ce2f43825c5e93e07023ddcdd9afdd72c82e1e","modified":1492581979000},{"_id":"themes/next/.git/objects/1b/c09e88ac9af1f5e25f82949a71790373a744dd","hash":"ada6b378b2bcf5e6800c0cbdde8dfe09219534fc","modified":1493003449000},{"_id":"themes/next/.git/objects/1c/d2d44c8a1f5f9df99042ff496e1639e7909b4f","hash":"9bb5330b54433c65664b35ef8bcb7c454586aa61","modified":1493476607000},{"_id":"themes/next/.git/objects/1c/fc0d18906406ff5184fbbb7eabe806181e835e","hash":"9d843d72ba9e02182a3a3d7299e3e061b86a4450","modified":1492738495000},{"_id":"themes/next/.git/objects/1d/2458c911c2c55ec45c00528cafa6e256ebd1dd","hash":"6c3057700ab2535e454a242259acd34f9e1be6af","modified":1492581979000},{"_id":"themes/next/.git/objects/1d/320ffaf892ed0c2ec9751370d5f96cfab9d9c9","hash":"db39cdfb572931558a4bd6e04bb30b0bc462d46b","modified":1492581979000},{"_id":"themes/next/.git/objects/1d/4f06d3bc5947d97a1e3eeec7c7bed164b6cf54","hash":"ed4d2a560f4efd84b363810102d4aa35bec563ca","modified":1493003449000},{"_id":"themes/next/.git/objects/1f/4715646ec3eaedc515b9c99694e50474e703b1","hash":"355d8dd5b47a3b1417a98d0bad10aaad94540815","modified":1492581979000},{"_id":"themes/next/.git/objects/20/31dfca5542ecb8ae795f9aa4bf77a4a1e9c2e3","hash":"cc25f430ce6cb4059f5e3362e0ca948d7ad28913","modified":1492738495000},{"_id":"themes/next/.git/objects/21/1ccafe45d355d08f7b48c7e22e77cb10b6b2b8","hash":"8e5b9a46b04664550bef4168de87ba81e669eff6","modified":1493476607000},{"_id":"themes/next/.git/objects/21/e029c7cd09bab7eb090904d4dede097d17a28a","hash":"c9c27d0dafb8415b65f1426dce56049ebfd258af","modified":1493876124000},{"_id":"themes/next/.git/objects/23/00df09d75786276e5dc1039a3dcd4c301680c9","hash":"4c0e8aaeb6317eeaf582ac7ee51dffc7b43e1cfd","modified":1493876124000},{"_id":"themes/next/.git/objects/23/215ecfdb9f36c261236093db38b6d17f9d5ff5","hash":"2238caef48100c2db0c04bc0abf13bc8c4014ef5","modified":1492581979000},{"_id":"themes/next/.git/objects/23/57a10218203aa99f8b309e2674e2cea1cdf99b","hash":"4fb922eb1df76a41048171592042ecd6a1a268bc","modified":1492738495000},{"_id":"themes/next/.git/objects/23/b6b1dea0934c67292223d1501fbc55641e00ba","hash":"e78a60e695aa23034989085ef9f36fc00f10cf62","modified":1492164242000},{"_id":"themes/next/.git/objects/23/f3388e2d267c1c048b9b40544f6a59b57e7c49","hash":"d325013695006729aa38cb2c906a75157cabeea7","modified":1493171178000},{"_id":"themes/next/.git/objects/24/281e0d7e48c98000b7692dd2b5652bc1e598a5","hash":"043f4f08bf3cd1d1ab246f1e761921d50846bebb","modified":1492738495000},{"_id":"themes/next/.git/objects/26/52bb67b2e0cdc52135fc05c95f56596cf4fbe2","hash":"800193bbb54722c8384a019c033088f1b8430b91","modified":1492581979000},{"_id":"themes/next/.git/objects/26/d0f03a25ea44415b014b6c045091b5a6ecf459","hash":"c3dad5b63f3c175bd6597e9567c8a69f3f993917","modified":1493876124000},{"_id":"themes/next/.git/objects/27/a7ea101cb0b731778c2d2320ab70b241c34ab8","hash":"bb0dcba02107b81c80c307387fc74193a4c5400d","modified":1492738495000},{"_id":"themes/next/.git/objects/27/b5d4775a9bafe236199b582aafa6775f4be0d7","hash":"496ec1bb9c869aa60238e7f145291288fe172c92","modified":1493876124000},{"_id":"themes/next/.git/objects/28/57286ea68efdfa416bb72cf59c1788dbd89aee","hash":"d77ca0e1db4280914adf8c89403da221a2ee2c44","modified":1493876124000},{"_id":"themes/next/.git/objects/28/6447571114ed1100b606fb22abd0e4972be8e5","hash":"cfb21cc7f19583f81a14d5a93f941dd67a28a137","modified":1493171179000},{"_id":"themes/next/.git/objects/28/eb7823a6da5da0dd8b16b2a079f0c807f358c0","hash":"18d544b6ad1f62787fe212c0b2fbae19d871f13c","modified":1492839917000},{"_id":"themes/next/.git/objects/29/01823cf3564fc7bdabefe632129e54420eda39","hash":"7995924804bbaa8c8901a0facecf552f2a805355","modified":1493003449000},{"_id":"themes/next/.git/objects/29/e93824edb362ea8cc407afa955a9d5eb5aac69","hash":"e1badc6dc90cc52c2e58d379265383f766ce61c1","modified":1493171179000},{"_id":"themes/next/.git/objects/2c/2790c07596a05ebaed2fa0cad125e9bdbb46d2","hash":"e846bd87b6ec0cf4cce13e8413748c7dd4118334","modified":1493876124000},{"_id":"themes/next/.git/objects/2c/399c0aad488642ab1ae228da66daf302fccf82","hash":"3d2790098ff998b5f9e1e6207790faf851f74566","modified":1493876124000},{"_id":"themes/next/.git/objects/2c/dea4562bb0d67a7fff15d0cbafbd6b14ae534a","hash":"0afe944811d772b2c36ac6bf3a870a99bc979641","modified":1492738495000},{"_id":"themes/next/.git/objects/2c/e2f46ca183a46f1b06517b1a2a8f96bcaab1b8","hash":"e9a8ddf8b0af2f52063c05075df107b7aacc0d91","modified":1492581979000},{"_id":"themes/next/.git/objects/2d/b6771bfe4c8cee7991e5cbd53898786c1e79a8","hash":"8453210a0ba21fb44f9bcd8073c445b9f3939c83","modified":1492581979000},{"_id":"themes/next/.git/objects/2d/e443de40cd1edd7fcf3101d937d56bf5fb3346","hash":"09f05a87268eb4cb5283f0f51e1f5e09401baa4b","modified":1492738495000},{"_id":"themes/next/.git/objects/2e/678f9350700e2f344c834c775aeea292c7f7df","hash":"e264543a863a6ed660bfcc6172074f9a8639a379","modified":1493003449000},{"_id":"themes/next/.git/objects/2e/a59f1304e4ae0d70c9e1734b1a27e164f73700","hash":"8115bd28e982865636748bec2d3e1740dca81051","modified":1493476607000},{"_id":"themes/next/.git/objects/2f/8cb47d256727e23270f0da1d9cf91192d6ee1e","hash":"16afba77fd3ba434418a163e736ed5f0fd62f620","modified":1493476607000},{"_id":"themes/next/.git/objects/30/48acde58c475cde496948ef1985a6e778a7f5f","hash":"36c169a6b7e3c5303f094c1191bebd3de93f76e0","modified":1493876124000},{"_id":"themes/next/.git/objects/30/cd77b330b8be01781e26eea96819cf995d9322","hash":"0d32b2cdf26cfccf2b086ef88488f0dff5b88b64","modified":1492581979000},{"_id":"themes/next/.git/objects/33/5a7dcfd6a48421e70452fbb79d4897ee7ab5b4","hash":"f9e258786649ff6f643df7c65b761ae8fe50e5fe","modified":1493476607000},{"_id":"themes/next/.git/objects/31/87a079162a49117cf200f8f68e7c7bf867802c","hash":"52153035ae8d858e12304351e585ffb21f9feea7","modified":1493003449000},{"_id":"themes/next/.git/objects/33/76a59a67773c82df060c0ee4ed7f31b61ab0ff","hash":"d435d4df00ddf5d2fa25b4d40c10e75305f9fdb2","modified":1492839917000},{"_id":"themes/next/.git/objects/34/0c98433afddb94febb5509040a798c7fd20122","hash":"cb9d2b08d2ecbb7e0612cc373457772a104d4943","modified":1493003449000},{"_id":"themes/next/.git/objects/33/c3e6e6af34d4820b18d99bf465851d8ede01dc","hash":"1b9c799737d1418e2b773cc9da567a1fc77f5016","modified":1493171179000},{"_id":"themes/next/.git/objects/34/8804dff739b0c97f16a57ec54b3f8f0a7ea9fe","hash":"45918bff5ee2fcdd4dea22658f024bc9540a5b62","modified":1493003449000},{"_id":"themes/next/.git/objects/34/33a923731ed3b2f9c182f6d338755eb6aefe7a","hash":"9358f1094a973df1b1312b86190661321372921e","modified":1493476607000},{"_id":"themes/next/.git/objects/35/cf667fb23ad0c3705ce5428ac9baf3ff2c698c","hash":"cc3186a149ed154c38f15b4e8e3e6515ea28a458","modified":1492164242000},{"_id":"themes/next/.git/objects/36/872db217e510057d732da9ed1d7372c800ee86","hash":"4f93e277156cc36ddc4414b664d95d2348eb9868","modified":1492581979000},{"_id":"themes/next/.git/objects/34/4843218e5c3e3878aa506903b3bf87d7a9ca68","hash":"34a8f0010d35eb18df992d1ffcfefc8cd4b9fbe7","modified":1493694878000},{"_id":"themes/next/.git/objects/36/cd6a53afc4419ad53a97feb062f8da371880e2","hash":"3c929efe35b73cf50b8cba7d55e89e2e64c7f6a2","modified":1492581979000},{"_id":"themes/next/.git/objects/38/0955e12ff48d4b47f57dadcb75dcd844b38704","hash":"e8f2bc8ad854dba055576ada6d7e1ca071d81342","modified":1492581979000},{"_id":"themes/next/.git/objects/35/351a32d8ad6c38cc1c00b7db2a6bd8094bdcfe","hash":"5ba97381267660af263d5b400bbd59df5da676aa","modified":1493876124000},{"_id":"themes/next/.git/objects/37/0aa64a8e8b2d2eadefcf9de218cb734f284b44","hash":"76abd2b5ee635de35e3d3898c18f0747538e4e78","modified":1492738495000},{"_id":"themes/next/.git/objects/38/0ac02fd1c9236668d22b51ddc86d069f11d315","hash":"000434c6c112884000894339b319c37ab341c051","modified":1492839917000},{"_id":"themes/next/.git/objects/38/dab71eceec3efc1d6ef2d90b7e954bc894b35c","hash":"be8b1401878aa768f82355b5080da747a52d50c9","modified":1492147046000},{"_id":"themes/next/.git/objects/39/ab9c724964d15b5c06b667b5794b500ad79e03","hash":"1575a0e8e072146043ec88865c153fb7218ba78c","modified":1493003449000},{"_id":"themes/next/.git/objects/38/e8fe00f21cbbebfe952dfda2109f500adb930f","hash":"7ab72d4da45f69b645ad48784c04855eee57fd02","modified":1493003449000},{"_id":"themes/next/.git/objects/39/ce28779963561f33d02c0cccead43874a70be9","hash":"7b9b3ec98d6b89b9867024bdfa83769e670294bd","modified":1492581979000},{"_id":"themes/next/.git/objects/3a/390ee7c6dfee0d9b5c749d0fbc4edba901bdc5","hash":"fd38ca2c8a304d2f305b3f56089694cadf05ced5","modified":1492581979000},{"_id":"themes/next/.git/objects/39/e1518704b17c2adccd26c41c560f764b30b009","hash":"dc737d43381d7141bee0085b61467e5c4bf7b5c0","modified":1493003449000},{"_id":"themes/next/.git/objects/3b/64c7146ad1e0cd8b4a45140b42f7a0404b28d6","hash":"25fd3b218208c50eabb1f9da01490936f113b8b7","modified":1492839917000},{"_id":"themes/next/.git/objects/3b/fb633119bb7f7d8020b6060eafb2fb5a15db26","hash":"b92674a40969c9d1250ef9f18b24a919232f825b","modified":1493003449000},{"_id":"themes/next/.git/objects/3c/6abf88826aa8fdbb69d3955969e50df3fd6493","hash":"07eff98f157a35964ca2549c54cc4e082d364a2a","modified":1493003449000},{"_id":"themes/next/.git/objects/3c/6fef4314903036253335d4550346f6b927c721","hash":"1ee4e7d110363dc5e2676b675c7f7030731cf3a5","modified":1492581979000},{"_id":"themes/next/.git/objects/3d/33c9a69791117e8c1cf3c92253a5031189e6b5","hash":"893748c4b0494b842941bdc399d4192a3d192221","modified":1493171178000},{"_id":"themes/next/.git/objects/3e/03d49c27c6bcbe12b5be08a897dbda9e6bf033","hash":"4a87469c9848d90aec560a7580ef6d332c04a828","modified":1492738495000},{"_id":"themes/next/.git/objects/3d/6639bda4bd074868579a257389e9a61f9aab8d","hash":"bbd6e8fc1b337d6da4c8c0903e393936982c964b","modified":1493476607000},{"_id":"themes/next/.git/objects/3e/429af3e52dbbf84991704ce8683299768a94ca","hash":"677088b18d09505d0fe6ebbc2b4a74c529463e3e","modified":1493476607000},{"_id":"themes/next/.git/objects/3f/819c3bfeb606e82483bfa54381a6f26dcf494b","hash":"1ab877a4258265f6f1ee93b3b5885be9683bb608","modified":1492581979000},{"_id":"themes/next/.git/objects/3f/126a31d6d96121a95e1a6bf8c9c43a2f11f4bf","hash":"959f64d88fa1617e0f928482e132938df02ddb4b","modified":1493003449000},{"_id":"themes/next/.git/objects/41/53c86bca221cd9bb1cc49ffbb74b93824cded0","hash":"d77e36abda00e538e1a385da01f86038f7e46a37","modified":1493476607000},{"_id":"themes/next/.git/objects/42/f0525e87737a79809e2e291f052cb928b962e6","hash":"20de3a47d899f9ed4e886497cd344aeaf54cdcaa","modified":1492839917000},{"_id":"themes/next/.git/objects/3f/bc4a28410a97e5ac0ba387fc7609e275a7efe2","hash":"5b94b139d08e6391949b54c412e6c23ce0879956","modified":1493694878000},{"_id":"themes/next/.git/objects/43/8b4cc71421d75d6858b7e9e7c8703f8d3976f4","hash":"4c107ec110552e45f1439978e08055a1e0627531","modified":1492147046000},{"_id":"themes/next/.git/objects/43/d37ff9edf9a18cc994de7548d3d3e41a36c7f5","hash":"651162608dcbb84914778d7754e54d2646826b36","modified":1493777793000},{"_id":"themes/next/.git/objects/45/2b9c51d37efd097d4fcd4f27e6f1f035238469","hash":"f9fe812f9942cc87597fc5fd77cf046d8387a97a","modified":1493876124000},{"_id":"themes/next/.git/objects/46/374292ceed86f916953c62202e14c2aecfea0f","hash":"4576b155998c8ae9ab7f192d3a0ecf466800feb2","modified":1493694878000},{"_id":"themes/next/.git/objects/48/237fcd331cdaf61f1688f927ec59bff125b1b8","hash":"72ecd45f6c656de64847d0e8f5ead055dd288d19","modified":1492581979000},{"_id":"themes/next/.git/objects/48/3c357c24029eaafe12e6033c7db5e338dfe125","hash":"01a06dbe24ce45aaa4232ec016fa2b82d05e58c0","modified":1493003449000},{"_id":"themes/next/.git/objects/46/b3c3cf29bd06049d2bccc3b76be4a3fa1ec321","hash":"ebdfb53fed36fb0fb26070bf85c57925d073846c","modified":1492581979000},{"_id":"themes/next/.git/objects/47/0242341d65c3217ba5989f87ca8161cd048c6a","hash":"48e87276771f9de95d9ec1f846a7cac06be1e3e9","modified":1495173444000},{"_id":"themes/next/.git/objects/4c/74c180c54d30959a34e72c873944fbec07cee2","hash":"9f574490485b74c66eb7de2c765d86d55d9117fe","modified":1492581979000},{"_id":"themes/next/.git/objects/4d/7e782a6bfaec404efda320b5199d37005ab30e","hash":"85634864d6fc81ae6bddd85df4e9e13ed2f41d6d","modified":1493003449000},{"_id":"themes/next/.git/objects/4e/a04143bdafafe6b112f543df34ce13e0bd8d9b","hash":"d95adabfcd5e8c66b9b2af908308e8fccdd15cb3","modified":1492581979000},{"_id":"themes/next/.git/objects/4f/f232959dff21c5da0b20b1a946296a32a5695d","hash":"ccc0140b64a5bd7eeba6d22ce1bcefa40a36267f","modified":1493171178000},{"_id":"themes/next/.git/objects/50/ed4a09d4844f90fd8fcc571751aa1eb95246bb","hash":"44bf057d470887ec57f135daf41ef94f1de44dce","modified":1493476607000},{"_id":"themes/next/.git/objects/51/a061444f26b25b54ca6cc0dc32592bacf153f9","hash":"7d6334fb309ef60145ed98c6434057fb6594bb9f","modified":1493003449000},{"_id":"themes/next/.git/objects/51/b708ab35e6411ff8ba8588801d9a7c877bcd8f","hash":"3b680c079565cdfb3ab0441d79387e357528ba0a","modified":1493694878000},{"_id":"themes/next/.git/objects/52/2c03f15b0f077d2bcb655872b79c93d316465f","hash":"b3e5de3daa182b51859f9e6232e5dca998ab8523","modified":1492738495000},{"_id":"themes/next/.git/objects/53/f35b06d1488dbd9a99516bf10f28f51252ded2","hash":"4dfa677f43b4a38ffa386a24aac43082caa577d0","modified":1492164242000},{"_id":"themes/next/.git/objects/54/9771b77e48ff02a86974003f09adc020dd922b","hash":"92b8f0cb72d2c5290fe7f66a8385b48d95fae813","modified":1493777793000},{"_id":"themes/next/.git/objects/56/0a58d27d50b8a0ee82cbc38addce27d9b530d2","hash":"a0c71c40daed8ec1a1c3065e7d38d3aad94dfe1f","modified":1493476607000},{"_id":"themes/next/.git/objects/56/33ca7e42edef94ee2a36236f4413da7fe7cce5","hash":"67c5d0b396ad63c86907a54418ab9ded0b541353","modified":1493777793000},{"_id":"themes/next/.git/objects/56/6fac7f3aef8cfdfe07c0d167a5d0ab5e66fedb","hash":"741d8313e3722cf8b46f639609e45786fc7ce18d","modified":1493003449000},{"_id":"themes/next/.git/objects/48/8efe9120cd17b2a925cb4d2129d1217d8d9d8f","hash":"f5df12cf2fe83f1e5cdf417b4129bb94724cd50d","modified":1493003449000},{"_id":"themes/next/.git/objects/56/a22e4ef987f3b259ff66ecb46bc5d5655beab6","hash":"fb6de6d1132cea29b70d896215bdea137d7f0c80","modified":1492839917000},{"_id":"themes/next/.git/objects/4a/f78e46c803e165df61aee743c9611c74190a09","hash":"ac8d61ea1214794b391ffd67a4685a976d1996a0","modified":1493003449000},{"_id":"themes/next/.git/objects/57/f976a10d119ff6bf84432e7f02b5b6c043eaf2","hash":"8cbca878fef8e5fd8e607416aa30a38a79ac0be6","modified":1493476607000},{"_id":"themes/next/.git/objects/5a/d1ec0c7c934dae5f95aa82e391a3b59de07c8d","hash":"3c900c0b2f2c19bb2fe7485b25e15aaf71fa0984","modified":1492581979000},{"_id":"themes/next/.git/objects/58/3d50a8bac0151aeffb420ae8713acafd8d356e","hash":"ef27d43cafd7ea75620e4d544b5205e0087aaffb","modified":1493476607000},{"_id":"themes/next/.git/objects/58/cf0af4a5e8388436fe85035c301f47093333a4","hash":"ecf9b630006236e4f979e4605c5cdacd4109b169","modified":1493003449000},{"_id":"themes/next/.git/objects/5c/e5129084517ae0dd846c9ebf3532edee74b7da","hash":"1708675e985eb9f005a399a77d6e6dcbd2795004","modified":1492581979000},{"_id":"themes/next/.git/objects/5b/89f7655138405166f084a25ef2ebb7d5b141d4","hash":"cedd880861f1595e11f873ee4d0ba5dd7c50363e","modified":1492581979000},{"_id":"themes/next/.git/objects/5a/e97d64a420694c411e973f4308b9ea1f7ffee1","hash":"2a112b107db40ed2c6f6fd34d73b832d2232b3a9","modified":1493876124000},{"_id":"themes/next/.git/objects/5d/a804b17939d6fae63568d5f93003f7f851c809","hash":"a4a347ba5e682683ab48eb8c4215e31a0b5b1292","modified":1492581979000},{"_id":"themes/next/.git/objects/5d/de7f60d1f785dbc0253f783a1696d76c2819a0","hash":"76f3e3b1879c5b257a39cdabf6ef326c5d399a66","modified":1493876124000},{"_id":"themes/next/.git/objects/5e/6ec3b6cde3d0c4fbe5b212f04aec43539856a2","hash":"c55fb63705a57a992f4d9336bd2d64bc84f871ea","modified":1493476607000},{"_id":"themes/next/.git/objects/5e/aea50412464364cf52db2677a157b75886f6ae","hash":"32e5f48f13f0a61e4b0d2b0125671d6ec1ea3c5a","modified":1493003449000},{"_id":"themes/next/.git/objects/5f/b128d7dae59adaaeea7e80e9b5659dfd615d12","hash":"96ab57a0410c9395ecc4f2fc2a48a3d0cacd1606","modified":1493003449000},{"_id":"themes/next/.git/objects/5f/fca3612c2e990687bd0c3a918d34ddd605319f","hash":"fa28df41ddb9a7b7861a32c1dfd665a331a90363","modified":1492581979000},{"_id":"themes/next/.git/objects/60/e0c645c5e77a5e6f365b00f8e682b0f0be63fb","hash":"381a7da8e69689a6cc2b9e7c1a15b909b133f498","modified":1493876124000},{"_id":"themes/next/.git/objects/61/e1fd314678b2d7888e054538e53d6ff56f51f2","hash":"3fa005c5793fe0bcea1e05c6d72242bd6ba67a69","modified":1493777793000},{"_id":"themes/next/.git/objects/62/09feadbde2ce3825636e125d6f2e48bd166fd1","hash":"c76483d5acdd066509e75cc1f412f4d75645e771","modified":1493171178000},{"_id":"themes/next/.git/objects/62/f7228c565bd59895f520bd764511e379ab1f46","hash":"5c654b6c49c0b22cc5240b1fc39ca4726cd496eb","modified":1492581979000},{"_id":"themes/next/.git/objects/63/5ce92649dfef3c1493b29b68972b9b2800abd2","hash":"a1a02a595af6f68a66daf93d838343fb4ec975f2","modified":1493876124000},{"_id":"themes/next/.git/objects/63/80e7564ed659d1548c4ab4a1c3c74dd00e2c16","hash":"3ef5dfcc7177113041fb18eed525ceaf5b4d337b","modified":1493003449000},{"_id":"themes/next/.git/objects/63/c9a335e2641054fd7c0f953e0ac7dcc454800e","hash":"bea9590aa7c4dd3d36f7f94e54e2ddccf7a6a152","modified":1492839917000},{"_id":"themes/next/.git/objects/63/cb11439cf94c2bae2acb458a556024954d9285","hash":"6c1bc15cf279e78d78119ced665745af342b31a7","modified":1493171178000},{"_id":"themes/next/.git/objects/64/615638e61435bbc5d418c1a7dae65a93a826bd","hash":"b83b77d05ace9f5bb0fbce71d6de59d150c42b4f","modified":1493171178000},{"_id":"themes/next/.git/objects/64/7b9a729d9e11b14522e097455f1d8043e7daca","hash":"d50cc6a67d382fcd6cd06c76368e084e3bcd206b","modified":1492738495000},{"_id":"themes/next/.git/objects/66/6d61001f1f3d01c519993b535763b04a2e1baf","hash":"9100ae56af8fd840b6a7e5ce25e7469c5bc20fb7","modified":1493171178000},{"_id":"themes/next/.git/objects/67/6b9f6189356d0201fd72dd6f98db19628a2ff5","hash":"250795ea0af79524945e66b28f233eb8bd9ee7dd","modified":1492581979000},{"_id":"themes/next/.git/objects/69/11fdfcf9566a6be552206560fa938ab20d9930","hash":"b98f1b9677b4c9ce340b1f74c32917d9de74723a","modified":1492738495000},{"_id":"themes/next/.git/objects/69/aabb8e2c6e5e0a0942c9f197580642dfab4c08","hash":"b704ac03240e14f9e28591f6e917dda7a71bb1de","modified":1494816317000},{"_id":"themes/next/.git/objects/6a/7ae430c59c8d5f5c8bf919ace6d6f7f3e7bc5f","hash":"3ac3fbd5a648c316134269fb055ebfa8062da414","modified":1492581979000},{"_id":"themes/next/.git/objects/6a/93e065edba9118eaa8ad481e69629395656005","hash":"b70edd3030c134c2d732fb7d07bc70fb0a4bfc9f","modified":1492581979000},{"_id":"themes/next/.git/objects/6b/6419e1eef5198d3a7a76f562ffed63ac4b380e","hash":"9b2a4f944b9bedbe8620789487f61e46e159d09d","modified":1492581979000},{"_id":"themes/next/.git/objects/6c/cc84f8ea3543926a1a1e78b5c50a56c0dc8025","hash":"8b4b97a1e3e0089940bc797e8ee3d6eca9d09d28","modified":1492581979000},{"_id":"themes/next/.git/objects/6f/479942b8e3abfd368de323f05971b58ca1e635","hash":"3f621d6e785d31dca324f2d00d16b84699051c50","modified":1493171178000},{"_id":"themes/next/.git/objects/6f/481857f34f406f8eceb332f6cf9c8d0cff1450","hash":"0198141d31bb61cca820738a5b5a893288787a47","modified":1492581979000},{"_id":"themes/next/.git/objects/70/a1ee70e3e212f4899cfc20a1141db51710856e","hash":"f542733ff2fec4b8664e75b4189b898d2d6e8d47","modified":1493694878000},{"_id":"themes/next/.git/objects/71/36a212ff78d84d3d4b92bddab30f96b8b953cb","hash":"eeb640ae4da6124886c1610d167c6d990cb92c13","modified":1492839917000},{"_id":"themes/next/.git/objects/71/9bea6a2aa54a911586aab3548a8d555cd7c9c3","hash":"2a247d72aceca7bee574a3ff0fc9cff765262de2","modified":1493476607000},{"_id":"themes/next/.git/objects/72/c78d334e578ed94ec5f7c1e54f434755346e60","hash":"0aa4a01f3d7327dc86196132efe93cbbab585e7b","modified":1492581979000},{"_id":"themes/next/.git/objects/73/d689e643f1843a9c42338c7c8b1bfa45bee848","hash":"e3d5b87034feedaa63238b4b6c1c6886a6d9526b","modified":1492147046000},{"_id":"themes/next/.git/objects/74/de6f1fa44519a72191ba801c51c2fa5f55fd45","hash":"ebf457650af0e99753f46366003a1e301d22cddd","modified":1493876124000},{"_id":"themes/next/.git/objects/72/e4053f52662f64277a65a4ad7c3a65ee5d1efc","hash":"8bb792da4d459a14ae082748e98df36c4a5952c3","modified":1492581979000},{"_id":"themes/next/.git/objects/75/40815bd124889ee63740e884765bc9f5a9599d","hash":"50a69c07e18a6d1c561066cb4b7b191b84f660a3","modified":1493876124000},{"_id":"themes/next/.git/objects/75/6c49cc05680ba512060c4d3046e1a3cf218377","hash":"ab39cc764e4e13c33be6ffe10a213805de58c017","modified":1492738495000},{"_id":"themes/next/.git/objects/75/976c6dc20178b5d24b07ba76700a73205a9b52","hash":"532198fa938fafd2b53dd45193e65a7c8c0f8c84","modified":1492581979000},{"_id":"themes/next/.git/objects/76/3c37faaaeb4704f2b54341d54bfbfa7a2f5877","hash":"e0903451ed603945427dadd39bab7bcfe9c2337a","modified":1492581979000},{"_id":"themes/next/.git/objects/76/5a31be21be9d12d72112b34094b28d03fcf68c","hash":"bcfa5eab359df00c61d3f8302dc210bb4267465c","modified":1493876124000},{"_id":"themes/next/.git/objects/77/088cb0f7346ca4b6b822ba6ca18a3d9f263f2f","hash":"e7f75e01b07c68672846bb273621c458344edd20","modified":1493003449000},{"_id":"themes/next/.git/objects/77/5177fb39e818dd74846928957fdc5112772d39","hash":"6cf1f0586ee944cc7a9013b8febcd5e392535c72","modified":1493003449000},{"_id":"themes/next/.git/objects/77/baef5482c820bd8d306f02389b3e4998f79111","hash":"4342732250617c7d8380206fe25647b5803ede4f","modified":1492164242000},{"_id":"themes/next/.git/objects/78/e5c339bc4a0882a912e6f4163a343547da298d","hash":"05c09f135e87ae9a0cf488a4f8c9ad467bbc8a1e","modified":1493003449000},{"_id":"themes/next/.git/objects/7b/468689ca0dcb9e56908ad22b2baa8995942ee2","hash":"bd0bfc612749f27e37ca45133f4d61e9184fa63d","modified":1493003449000},{"_id":"themes/next/.git/objects/7c/2939f6cf209b75cd4a710131641129a457e043","hash":"7a4b20e32820526cbfb6e03a318ba6cd1fa12c9b","modified":1493876124000},{"_id":"themes/next/.git/objects/7c/7f8621248f61ef21923933d8da13903c1baf4c","hash":"0320432a0c1fd311575b1f5f9a11a74c6118e01d","modified":1492738495000},{"_id":"themes/next/.git/objects/7c/913dcce78bb62e95a2e5e253fbe9a878de75be","hash":"381e1f737a53863d9cb551bfcf89751bf44b437b","modified":1492738495000},{"_id":"themes/next/.git/objects/7d/25892f0753e26396cfb5819433217f198491cb","hash":"705ba3b8475253fb41ee07de7b283446d70ade19","modified":1492581979000},{"_id":"themes/next/.git/objects/7d/b20ad40c482f28c58d33ad2927e1e6e68f7fd7","hash":"fa98588555691fa963d071d99ffc46cd944b9a54","modified":1494816317000},{"_id":"themes/next/.git/objects/7e/8c5c77f6bafcfa68978b1fb1dae365936c7499","hash":"1f2cec44f6796e4a12efea7ad365c7dbb8cbbe1b","modified":1493476607000},{"_id":"themes/next/.git/objects/7f/f9b75a9fcd28df16592249cfa8b5482952ca21","hash":"5e3dce44413d4133ab4f80e0e700a73a5fa9f6ae","modified":1493876124000},{"_id":"themes/next/.git/objects/80/bfde3838adcce8e8b94b0bb025fd667086f22f","hash":"56befc5d74853c5e343af11460aaa857d67b18a9","modified":1493003449000},{"_id":"themes/next/.git/objects/81/2dfd34642c42a3e91833f87abdcad7e0a30762","hash":"4c44583b55939e3a0c25c6624a6f4d2e42a11d9e","modified":1492581979000},{"_id":"themes/next/.git/objects/81/9508e8a452f06292f4bca5e5744843a331d21d","hash":"3447fa20cd2dc88381fc8f76d1af07a44addbf0f","modified":1493003449000},{"_id":"themes/next/.git/objects/81/cffcdecf42d4c8def4c8119a55cf33beeef3fd","hash":"eda9c10f3a45a4fd50a02a48187419f2f67d68bd","modified":1493003449000},{"_id":"themes/next/.git/objects/82/69b6fd29a514f9bd746497b298176228bd4061","hash":"cf527c08b5d88d72939a61446d128eba2fb94be2","modified":1492164242000},{"_id":"themes/next/.git/objects/83/58a979d9296fc21df8e4358779390bfa419920","hash":"790f5cf4c32f7f48fa96f8c9725fe638acc2e4ae","modified":1492581979000},{"_id":"themes/next/.git/objects/83/6a4bfb5d74884a84640f9479939e6b238fc38a","hash":"adf889de46dd5a7f19502e0495f4856b9bfa8699","modified":1492839917000},{"_id":"themes/next/.git/objects/84/5b1bc2898c9924eff3e1b0bd92b6178b4908db","hash":"7c8453a9632d2e4b2720c4a7d50b289936699d1c","modified":1492581979000},{"_id":"themes/next/.git/objects/84/f07fab905075be28f6c95312475324e690ba8d","hash":"730dc56f3c13ed9fde0fff7c6aae6f439b4dc5cf","modified":1493003449000},{"_id":"themes/next/.git/objects/85/f43cf9a6e1fdee63618683f157cb6237c0de43","hash":"f894c7df2c6a8062f5721d5fddbbdc06b5d110ba","modified":1493003449000},{"_id":"themes/next/.git/objects/86/4e3914be27340c51a308608ecbc73e265f3c60","hash":"a05d0eaed4b60c914bed03811cb03bda52518951","modified":1493694878000},{"_id":"themes/next/.git/objects/86/68d1cb4b9034f2db28037b57e1201246b45931","hash":"f09ec0979b2721cf3dd37cd5d4e8c35795e189e4","modified":1493476607000},{"_id":"themes/next/.git/objects/88/413772c48d5971a5c451624178497b3af8e713","hash":"3f01d801f6c5eed9f4d679a7592d2f414a572e27","modified":1492581979000},{"_id":"themes/next/.git/objects/88/73cc38ea381b7b454cfbc540c979e2515de172","hash":"b1322fcc02bedf70325760a3ee8a6e9c6cd0074e","modified":1492738495000},{"_id":"themes/next/.git/objects/89/dae1e06acf9a713109df15903fabf2548af71e","hash":"20497a13f3e8516ddb418568b16a38e9cfe16569","modified":1493003449000},{"_id":"themes/next/.git/objects/8a/5bcdf12e0126e116fbecaafe6069ad87dd3d94","hash":"c7c9e64aeb1b867bd50e91035dd37c33b4d686e3","modified":1493003449000},{"_id":"themes/next/.git/objects/8a/65349910ec04a9de4b7ce443fa900d498dc563","hash":"ba127353751759dffa714e68900bbaf7790e1a93","modified":1492147046000},{"_id":"themes/next/.git/objects/8a/72b9a7626547833fc0abd57f6be919d8d80cd7","hash":"1cc442c1c517da978f7bce56bca781b80225d717","modified":1494816317000},{"_id":"themes/next/.git/objects/8b/a5febc7b771ed53a28e36ca3672bebd7aae77a","hash":"d53eb468964c8a97c390e18c01dcd18d764dbdd6","modified":1492581979000},{"_id":"themes/next/.git/objects/8b/f517b1c3e14305f829921cc6f976bce35f7452","hash":"3d0655d65f95d65e30902c42cbe10e3efbb624c6","modified":1493171178000},{"_id":"themes/next/.git/objects/8c/a67f7f572fa66239929800dfaeb6cf3c447c02","hash":"5d2b1a6f28a92cebc5373dc7582c28229e95af1b","modified":1492581979000},{"_id":"themes/next/.git/objects/8c/baaf267f3a0875a04a084257afed26ffa0ef26","hash":"9f0a0b0ebe70e968b23318d3e97e6bf6f01d08c1","modified":1492581979000},{"_id":"themes/next/.git/objects/8d/60f2eec03ff735536e96c9dc758fe5c6fa0513","hash":"c841d318445045275da1c1ca2dfff7228f9de71c","modified":1492738495000},{"_id":"themes/next/.git/objects/8f/4c7c8699aff6305d28ecf7617465858b869567","hash":"0f89e4345fe4d64877f5b60e796ed248d162a0f8","modified":1492581979000},{"_id":"themes/next/.git/objects/8f/51ab5842ddbe44d67cab369eaac66712a3ae71","hash":"9e52f703a38e22afd1f5bc8630baeaed64b86468","modified":1493777793000},{"_id":"themes/next/.git/objects/8f/d97dcadad2870bc900ae7bc9deb6c27fefa2de","hash":"131d9e11aa9c5b69e661a1d63dd41b88cfbd9b18","modified":1493476607000},{"_id":"themes/next/.git/objects/93/434d4c82fd8bd91cad81099d0802a11f152096","hash":"9b4703bdb15fbdf1eb6dadcbbffd5ec5d5f551a1","modified":1493876124000},{"_id":"themes/next/.git/objects/92/56f4d4890892ace0005c68fa1a60b0a61ec264","hash":"4ca634287b3c3c8b0618131ffbf9a8a6d2a45416","modified":1493694878000},{"_id":"themes/next/.git/objects/93/4f71ce55672bc72c9772f49a5948e52ef934a4","hash":"468ba5a0266b2cacfa5d4b10500d833a63ac57b2","modified":1493476607000},{"_id":"themes/next/.git/objects/93/791717a77ebd455cfb67839296ccbed12d0c57","hash":"239f7653dc77e722cae9e0a4825b6575158af166","modified":1493476607000},{"_id":"themes/next/.git/objects/93/7919916fd0d54480b25f6a9bf9a9f1a194c89d","hash":"3423ba023527948fee011690df9a60a540273563","modified":1492839917000},{"_id":"themes/next/.git/objects/95/57f49fc6735db60f9723dadd4eb83ce5785f6d","hash":"292a8e015cede8100014aec05249417680169eb2","modified":1492581979000},{"_id":"themes/next/.git/objects/95/f7696026500a571e95b210fb5d0eaec8b013e8","hash":"0256c97f0ba357ff6df955a3136fccabe0026b4b","modified":1493476607000},{"_id":"themes/next/.git/objects/96/ce9db8e676b91b5b5c20fc1411d8f79d25ff93","hash":"888d0a08461b5fd9cf0d06023bb56bd1a96d9592","modified":1492738495000},{"_id":"themes/next/.git/objects/97/f49f5cfe1a6618c935aafa00575f52d85a759b","hash":"71f0b329e1ba3ccd186f2df1d97ec973c7de76a7","modified":1492738495000},{"_id":"themes/next/.git/objects/98/7153acfa42a0e0ba806a98f550fd8f71b92c71","hash":"69d8081d6e4b87d1c65cca5ba17a48206be668e1","modified":1492839917000},{"_id":"themes/next/.git/objects/98/7fd4cb44d9e6ba6d3947725e45192884ca5ae0","hash":"0b62aa2776dcdc615b15926bbe68f3a3e631091e","modified":1492839917000},{"_id":"themes/next/.git/objects/9c/76c768246906e2ee571bc667455e4591c103e6","hash":"f0e0f6dcd0c6adbd44569a66e53441089734e26f","modified":1492738495000},{"_id":"themes/next/.git/objects/9d/0ed2748750a4e73b3147a050140584d70d8e9b","hash":"f929565e64913393deb89928f61f80b763e3bbef","modified":1492839917000},{"_id":"themes/next/.git/objects/9d/d7c746a44c6cfe56070dab9f559c3d5dd37136","hash":"7a2f021cae38bef80430a64b1546563996b66f68","modified":1492738495000},{"_id":"themes/next/.git/objects/9e/e5fb56a54a8562a66595a2a6e1225c5473bf2e","hash":"af1c73d03a936a380dda087bae1da01fb518be69","modified":1492581979000},{"_id":"themes/next/.git/objects/9f/6817201df991914ed3462674ed4a719a4f6b58","hash":"6dc6295c6e03ccecb7cdc84b54428cdc9ea4c7ff","modified":1492839917000},{"_id":"themes/next/.git/objects/9f/e2637cb1fbb31213af3de25097a9d5a6f9b915","hash":"aa6141ad219fc1ebbc4c4fb9254da548ab5f01d3","modified":1493777793000},{"_id":"themes/next/.git/objects/a0/23c3038abdd1355cbe2b5b8e32ae5e5a831d17","hash":"64ccb4c6109fbd03fcc76d56695e05978027c818","modified":1493003449000},{"_id":"themes/next/.git/objects/a2/71c1b18c9a2268d3172e3782c374a6bac6de55","hash":"1a01948c1990bb76dddc021ab2c78289003eca7f","modified":1493171178000},{"_id":"themes/next/.git/objects/a4/b6badfb8f23fa39c9d0c8e03b3d01cb2779869","hash":"1eb861393dd8bb39a3ec3709049a473c1f66108a","modified":1493171178000},{"_id":"themes/next/.git/objects/a3/4331fc9b5a7801ecd9645a66578263c8676e55","hash":"7697b87f49826d13f3b5cebc0b55e10a3faeccf5","modified":1493003449000},{"_id":"themes/next/.git/objects/a5/d60beaf1b73a27db8b2238cce42a3a43dc23c3","hash":"4e34345b309d0bfa52887d6a1b8b332ab55468e4","modified":1493876124000},{"_id":"themes/next/.git/objects/a5/57ad3eeef222d2387e98f4418b0438655a2765","hash":"cdaa150ec84c29d84750ef44aa586a600f901d63","modified":1492581979000},{"_id":"themes/next/.git/objects/a9/b090db81bbe8cc0260912560acbf7bc507956c","hash":"e0884517e58f21a54dfd5c0840bbe9c8ff68c6d7","modified":1493003449000},{"_id":"themes/next/.git/objects/a9/f4062ed4fb50a478bd6c079a8d91ae121075b1","hash":"1c684432735540d14455183f5afa627cda3a5eda","modified":1493476607000},{"_id":"themes/next/.git/objects/aa/1e786ef809ccf92257e101602cfe2bbc8ccb55","hash":"63e89f294a992b9cc8409435059aea63e38367c0","modified":1493476607000},{"_id":"themes/next/.git/objects/aa/270c51815951031bf0908c44c6d86fc8057a24","hash":"2992b27eff306552bbc0c112ee3aa8a6795b87cf","modified":1493171179000},{"_id":"themes/next/.git/objects/ac/5bc0bfac066b83458d8ee3856f000167d7aaa3","hash":"6ab60ade41091b75cc0cd894f1b01d28a3fc0bc1","modified":1493003449000},{"_id":"themes/next/.git/objects/ad/15305b1952572b836f16dde7c60b92746de6c0","hash":"2e5647248bc282d4f2b4a72b805fbd0a7d2ce409","modified":1492839917000},{"_id":"themes/next/.git/objects/ad/ab62afc7d205acdd4f6ab35eebc95dc007a796","hash":"385e5882135d0d0beee2b23c41119426b3cd39eb","modified":1493003449000},{"_id":"themes/next/.git/objects/af/02532db95205569fec4b8d5db451bf90e5db09","hash":"96f44c1fb7c34a06e689dca572a00d56b0d72540","modified":1492581979000},{"_id":"themes/next/.git/objects/af/364d01a13ad0d6be23d90a521d63e9b38fdf12","hash":"6990d72952f64dee298e6f4e8ebdaa10ffd95cf4","modified":1492738495000},{"_id":"themes/next/.git/objects/af/c96a15835dcbab8119717258886b9f5e0539d5","hash":"01134479426ae8886e809d70f7573c2a6b6182fa","modified":1492581979000},{"_id":"themes/next/.git/objects/af/ecb01ef525d1947a076553da0630596614f22d","hash":"bccccf34b8653fa417a90d815d677d1a3fb39ff0","modified":1492581979000},{"_id":"themes/next/.git/objects/b0/0cfdb2e8b84ce62c985b08448341f3b7567916","hash":"c37b80fda0982bba0e6c4736b2abb525eaa7b083","modified":1492839917000},{"_id":"themes/next/.git/objects/b0/9e5907b3364f6d7e19ec6da7413be27e42bb39","hash":"89650ca363557258d2e65eeb344c4b80617c5c31","modified":1493003449000},{"_id":"themes/next/.git/objects/b0/a53e9f17cc4fda2bf0952538615629e236b0f1","hash":"208288c043565ddd6a5818e94ace5d7f4107171f","modified":1493003449000},{"_id":"themes/next/.git/objects/b0/ddf534acb4ca77947d35edbeb88b5d208ce482","hash":"db2111ca09a491262235af31714c932c971dc8df","modified":1492839917000},{"_id":"themes/next/.git/objects/b1/933437447c76aa33c43a27bfdea00cf09fd2aa","hash":"0c3cdf54db324d0539c2cce977a5d0784e2e87d2","modified":1493694878000},{"_id":"themes/next/.git/objects/b2/608ff5e9e27c79a3e97defe06dd18c1b1a8c45","hash":"dc2bf6b4001a68f6275d1861ffc5e21a7df173ec","modified":1492839917000},{"_id":"themes/next/.git/objects/b2/84609490eebed57bf3de9c2d19e66935e52386","hash":"e46e2bf78dc45f3dbcfe3cd1e73973e29c348457","modified":1492738495000},{"_id":"themes/next/.git/objects/b5/405c1dffb621064aa1b688189546269deb95c6","hash":"cc4309943e511bb0cbe616f29a2708ba3a6a45c3","modified":1493171178000},{"_id":"themes/next/.git/objects/b5/4ff38a02b401cc254eeafad751e0f183ee9141","hash":"2be575368f4c1de5ab7833433fc6dff982f58dcc","modified":1493003449000},{"_id":"themes/next/.git/objects/b7/4ddd879e6ec1319e5810bb5f70c034964ce642","hash":"ab95344a117320afa3711dc457c9a0c63ea0e705","modified":1493003449000},{"_id":"themes/next/.git/objects/b7/73c2e802d850d41603977e200248264b5d7c2a","hash":"2315297d8251f2d7f1102518d31130b43fc1097f","modified":1492581979000},{"_id":"themes/next/.git/objects/b7/fa30eea9d5a6eae29d9a974fcea62a1964fe8a","hash":"23a76e6606c7e2092af0b08068b056a3202d5195","modified":1493003449000},{"_id":"themes/next/.git/objects/b8/083848fd9e902727e6df78487aa670450ea698","hash":"70fccff15373fa168470603600b0a50f791803eb","modified":1493003449000},{"_id":"themes/next/.git/objects/b7/cff880314b90ac9c2694409944d867d47c8866","hash":"dd8dcd4d35fbc533a7ff40c4fca8c51670c10b2f","modified":1493003449000},{"_id":"themes/next/.git/objects/b9/2a07b09ae68ae997f772f405bd17f84ad47137","hash":"bc8d171227bbfecf8fd520848ea0ba4a05adfd8c","modified":1493171178000},{"_id":"themes/next/.git/objects/b9/ee4b34d27046e28f1ac52e5fc8ff3f0a50e94e","hash":"0078a268e2f72feb283a8a88c4f302d719d6acf2","modified":1493777793000},{"_id":"themes/next/.git/objects/ba/a1604195e2eac267e1f8fe38125b4c8e95c25c","hash":"d293d6bbf56fdd5bf4edc8776bb81e53fb6be585","modified":1493476607000},{"_id":"themes/next/.git/objects/bb/1c6a60f2f2051d4dac329a9cbdbc3025940707","hash":"0b72df22d7661a68f578fc00c6e2dc137213b551","modified":1493694878000},{"_id":"themes/next/.git/objects/bb/57241e1ac9bf8b062d10ea34de7a70b083864f","hash":"e010a1fe26c79a38b12466b66af96621199dd03e","modified":1493171178000},{"_id":"themes/next/.git/objects/bb/6659621d524494d3234e6b0773e43b3fdbef93","hash":"4b1dbf383512abf6e156ca1ee73d3f90620f4cf2","modified":1492581979000},{"_id":"themes/next/.git/objects/bb/9072930871210ff1e8baf55ae96a78f6f4f3ae","hash":"e83caabcc1f9b5dae8ecc481ca2d530582aaa655","modified":1492581979000},{"_id":"themes/next/.git/objects/bb/99b7d97768e6ac46d76cad815a3f50d966d072","hash":"cc4c76a65b38744938d79823ddd47affc0e2c851","modified":1492581979000},{"_id":"themes/next/.git/objects/bc/42ee20cb5b80eef3961be9f41cfba8adcb8291","hash":"5fdde4326ca40de972fdf9306cb38834d94dbea4","modified":1493171178000},{"_id":"themes/next/.git/objects/bc/ea6d4898c6fe91622e0647282e00630fe850f1","hash":"809ea6075dd85a265749fd0810c10b2a6d9a6357","modified":1493003449000},{"_id":"themes/next/.git/objects/bd/aa45775d8e1b969bd5cd759ba8f52e2d286de7","hash":"fbe730c976b03579ec01ac9b307b3c6544c6bcb2","modified":1492839917000},{"_id":"themes/next/.git/objects/be/cbd50286204c9c43796cf6f7159aa4ad69b085","hash":"0692c216474f04d4ae6809b18f8210a877cc599e","modified":1493476607000},{"_id":"themes/next/.git/objects/be/de6d00706a7720ab149229505736bbe4f9b43c","hash":"f0d2b985b8f802664c0f9cd3a2d3d702d9026781","modified":1492581979000},{"_id":"themes/next/.git/objects/be/f5cbf834dc3b1b528968c90830c6f64f64a080","hash":"94e9a17226a077dfc15883a3e91d3f2c1dbac923","modified":1493777793000},{"_id":"themes/next/.git/objects/bf/9c4e6bd7f2b473596a25693a69de1410685b7e","hash":"5c6d826ebce40bb8da0929710f870e8e573db2aa","modified":1493876124000},{"_id":"themes/next/.git/objects/c0/943227c90b138cee6489904c88182830eb2650","hash":"7aeff16c8121d8a2bff5d8d9615d57b9e8544271","modified":1493876124000},{"_id":"themes/next/.git/objects/c0/a49ddd31feaf71f4718bb1e4345b3fcb931af5","hash":"6c2a758f113ab958b300e29318435b806b96f50d","modified":1492738495000},{"_id":"themes/next/.git/objects/c0/f7618ffe3a6ad51580d74dcb2f8925f4f0e646","hash":"db3abcd1cc2a75b44861c838c3b64c0df54c13d6","modified":1495173444000},{"_id":"themes/next/.git/objects/c0/f92be5d51fcce99c22aaaaee6d827d7296ab49","hash":"c784ba531ea49d4cb5aaa19cbe2efc8c81278f13","modified":1492581979000},{"_id":"themes/next/.git/objects/c1/9bf631de94bcc856e9fc2a66729ad1361ee937","hash":"474ce829a5d7f1fc40e68c1f2d8802cec9616538","modified":1492581979000},{"_id":"themes/next/.git/objects/c3/0cd5bce5ddce6dc192ac667b127939d05538bc","hash":"94d6aa575371b54c876aa65d11007625aaa380af","modified":1493694878000},{"_id":"themes/next/.git/objects/c4/be66c11929ce17b36cbaa4f42ebe68f0b0ded7","hash":"368ec57155316e0adb9f70f7774dbae77df0ce93","modified":1493876124000},{"_id":"themes/next/.git/objects/c5/3e30ba33db848b3953837071076819b5eca162","hash":"d3a631966042a211347c17b98575a61fa92b60ac","modified":1493171178000},{"_id":"themes/next/.git/objects/c5/92016439a387ae3feb45c3d2fefaec35f89de0","hash":"bd5dd8e518f3f27da0e0218f02da111d1ab94dc2","modified":1493171178000},{"_id":"themes/next/.git/objects/ca/6d5c097342ad9bfacfb4fe53bb66d85c5e6caf","hash":"75865949c37d0f1b5b146ed57ff4d0aa4ad79df2","modified":1493876124000},{"_id":"themes/next/.git/objects/cb/202c04d5ec5dc8bcffa4a91190cc5e4925cde9","hash":"2e97718c4b94265c768188ce9e0c6e7fd24524a7","modified":1493476607000},{"_id":"themes/next/.git/objects/cb/2dca195b7fdadb990d34e95485ecb6afd9a3a0","hash":"61927265966c218eef0ab627d35fca7c69da5d9f","modified":1493876124000},{"_id":"themes/next/.git/objects/cb/b11bd059ea7e899a55c7f6d52f414e96d8649a","hash":"3d9809ffc05889030e1f5c9970c00668f10a68f1","modified":1493476607000},{"_id":"themes/next/.git/objects/cb/d765fb1a168b1255d23d2ef288c1f6307c0be5","hash":"d0866fcfba2cf616bea0e9c9fd15a1d51b077e23","modified":1492581979000},{"_id":"themes/next/.git/objects/cb/e60b284b79b311232dd255d19aad7788fa8452","hash":"fe194a2267f6632c772881723181c3a13ff49b49","modified":1492839917000},{"_id":"themes/next/.git/objects/cc/5d477522ca89f0bedfc3db6489d44882df9395","hash":"df957737cd0e84c9f83bb4aeb1c6efd83fd16f78","modified":1493003449000},{"_id":"themes/next/.git/objects/cc/973a7f8386ccf47d83f33e89b0f51c91d1b248","hash":"587db61bbd37243ea0960103c6ccd69f35d0cc28","modified":1493876124000},{"_id":"themes/next/.git/objects/cb/bfcab449cf1ab884cfbc0a96b58b009417f469","hash":"e9be80113bb2b96233bbd482f5cba3849dfafdde","modified":1493876124000},{"_id":"themes/next/.git/objects/cd/92c47431dc6d4031b25555eece3be3a24975bc","hash":"1c1266646403a06f6a1879a14fc29227b59f073c","modified":1492738495000},{"_id":"themes/next/.git/objects/cd/a7e2f63f49d6e588b2b04f8a7a5568621d9752","hash":"ececd094cabd5a97378259f3425337125dfb199b","modified":1492581979000},{"_id":"themes/next/.git/objects/ce/1a88403c836d16252304a62d4c06e0dbbcad98","hash":"ebac9221210451e3a32a7c208710e10455620490","modified":1492738495000},{"_id":"themes/next/.git/objects/ce/6af1da51526a9eb6118174307c1086d1b2f9b2","hash":"99b8f8d4d6ee0f716a94f6d73c90a3f60b9cce6d","modified":1493876124000},{"_id":"themes/next/.git/objects/cf/6bddcd25796f677f55d96c4336d45d1b3f7430","hash":"725925782af05d96afa0bc5a47a9d8152f0ed6c5","modified":1492581979000},{"_id":"themes/next/.git/objects/d0/2c9697bc2cc8070615b6682c49bb9133537b71","hash":"9e4996d92b34bfa3bac608605e1f5e3adce1df32","modified":1492581979000},{"_id":"themes/next/.git/objects/d0/7c68b7f508e80669e9a359fa6893027635e85c","hash":"80c819d155b1cf348cde201548e882586e8a6a2c","modified":1492839917000},{"_id":"themes/next/.git/objects/d0/73154cee01b9ef867286aff91e11c333ca7fd2","hash":"40862a2743765c89604ec1d12fb501070860e51a","modified":1493171179000},{"_id":"themes/next/.git/objects/d2/2796eac03bf2eb58ca214d09c632df8cc708f0","hash":"8e975c3e8552fa0a3a6877877a42148e67056905","modified":1493003449000},{"_id":"themes/next/.git/objects/d2/a65f67c02f02fa6b7185c98070e5777de86986","hash":"14b8babdec45dcffd4a7b4acb09ea54032ce2b26","modified":1492738495000},{"_id":"themes/next/.git/objects/d3/ff88c54e015a169e6b376f6e3c79f48a8afbe6","hash":"e546a255e86344760789552b5bdaf55107ab11cb","modified":1492581979000},{"_id":"themes/next/.git/objects/d4/1d1304895ee2f6eb5cdb1abc24bcf71a1769c4","hash":"aa0e26bfdfa117a5cb0019adfb3e899a9370bc6e","modified":1493003449000},{"_id":"themes/next/.git/objects/d4/cbf5b19fec4b21a459db65b87d265338bf0f54","hash":"c4cb8c6e7c9cb6083647e19cf4662b142c692362","modified":1493171179000},{"_id":"themes/next/.git/objects/d4/f2348d3bfcf5c5acab33be0f60e586cfd99bc6","hash":"df1e0cbc42e73419d3ebae4fcce3a13beef524b6","modified":1493777793000},{"_id":"themes/next/.git/objects/d5/9da72ad978a395dd0a800902714f1315f149bd","hash":"a901c8947e3b45a8ffcf342d0a88f26d7e6e88d1","modified":1492581979000},{"_id":"themes/next/.git/objects/d5/f20698b7c7665f6efa1d01c79d1648b392ea05","hash":"0798009aff5d911ec12bc7d026f841db37fe40e9","modified":1493003449000},{"_id":"themes/next/.git/objects/d7/f43ac5dd08646d3e544607268c7f082c65eaa7","hash":"fb993b611b33989051b0331632d8a29887c05473","modified":1493777793000},{"_id":"themes/next/.git/objects/d8/948153e42e9a1cae285790f9eb0a97fcedc7fa","hash":"e2231d043ae213a39f2516fd91f5e2b443c5e8b8","modified":1493876124000},{"_id":"themes/next/.git/objects/da/b4c576c7999433bcf43154a24df5156cf35624","hash":"5d70cb1820699e15d49a6a00a4884551a738cb0d","modified":1492581979000},{"_id":"themes/next/.git/objects/db/b3b89a0f9fb468e22593a1f5bbea0f08b66d15","hash":"cc4bea6389cc96feefeb97863d973fe5aacc3ded","modified":1493476607000},{"_id":"themes/next/.git/objects/db/ba68f0ccdaa29f6d445d2dc3f6271a069019d3","hash":"0036a177fe50e6e3f8f8234bad9cf05562c26370","modified":1492839917000},{"_id":"themes/next/.git/objects/dc/0424616ee8fa65935225f3a3ba0021fb786297","hash":"d8b2d9442aedd5f2069677f3d0c0a081246caccc","modified":1493171178000},{"_id":"themes/next/.git/objects/dc/fb9d405c8337000c5e5608b8fd87d5f24089ac","hash":"22dd69a2e08a7f490c91129830617348059afaee","modified":1493003449000},{"_id":"themes/next/.git/objects/dd/b9665cb5573b4bff6d171d1038bfd2f499b461","hash":"b8befb2cc9a36f97252e5082c4ca62dd4288c398","modified":1492581979000},{"_id":"themes/next/.git/objects/df/6444531f54d14fb7fa38f59f1e9308545412d5","hash":"72b567d7740c6f04a40db682305395fad7e9c5d4","modified":1492839917000},{"_id":"themes/next/.git/objects/dd/bdec00937a5c89b0d47815f7ba1b203d1b0be7","hash":"da6a42fedc67a46c9dadf71ac03984aa60266144","modified":1492581979000},{"_id":"themes/next/.git/objects/df/dbe2d00a5e4b6258926adeb79807868b397df3","hash":"82edd6e336c0a7073a45c09971cd5f898b40ffe0","modified":1495173444000},{"_id":"themes/next/.git/objects/e1/a08d415cf1d78673e8c48ada0292d3af11645b","hash":"e2046bec83614c6fa4c85936316c7ff91ce5c8cd","modified":1492839917000},{"_id":"themes/next/.git/objects/e2/c0e5f11f9a532cdaa8c72889050529f742a450","hash":"b671734be2a73e94d27e38da4669915d3835bd32","modified":1492164242000},{"_id":"themes/next/.git/objects/e3/26306e62212d6feedcf8312372e67fd0ae977c","hash":"94c5fbbfd07460f22818cf90e9d7b403ba83ef95","modified":1492738495000},{"_id":"themes/next/.git/objects/e3/30640eb9a4fb0d744da9d625a4ad1513cba43c","hash":"1b8acb73bc3e184cbb92f81fc31ef8f199b0cd6c","modified":1493003449000},{"_id":"themes/next/.git/objects/e4/457ab4e95e8600080e1bcc0ee977e72e78d7d5","hash":"62f6bbdeb5eccf766a1376f0e92517137ebe0d07","modified":1492147046000},{"_id":"themes/next/.git/objects/e4/88ef719adbf6ba1edbffef6e8adad3c0e72b60","hash":"2da6d2fb8c4fa86112b23ff3953d131bc79fe27a","modified":1493476607000},{"_id":"themes/next/.git/objects/e4/abe29a16cc3c8431ba45a539de581e3964db5f","hash":"ae6f727a07cb7d195358857ba290ba938a3aa8ed","modified":1495173444000},{"_id":"themes/next/.git/objects/e5/00356f8257a819150db0ef33428dd64d77bd6a","hash":"0d3f32a54faff5210e621ad3e849d220c347bc92","modified":1493171178000},{"_id":"themes/next/.git/objects/e5/27347dd0b7a89eff660c21823650b39c6da695","hash":"88e30221d273039c7b82108196f934c8b97bf92d","modified":1492581979000},{"_id":"themes/next/.git/objects/e6/992899eb202bcba6924272c3132ffc70e658a8","hash":"39a50996b16c004463ec9f435856bf1cb751497f","modified":1493003449000},{"_id":"themes/next/.git/objects/e5/eb7e83778a5563e327034f3d0e5706e91dd1f4","hash":"f3582bc34f1d609bd7942345c8e3763ead064154","modified":1492581979000},{"_id":"themes/next/.git/objects/e7/7af2b7cd9cdd6a4357ed02f1143ce966e51e59","hash":"3e1e216e2517421239eec952ed52f7485fb66a51","modified":1493171178000},{"_id":"themes/next/.git/objects/ec/1852286d903ffab6a4c71d8d83ad8f66075add","hash":"0b595d2c238046bff6e16c82f62ecac4bdffeb67","modified":1492581979000},{"_id":"themes/next/.git/objects/f1/06aa06a2357775a633452c6d228929e0144c84","hash":"de17c9d9453c504682cd1cea91719931f85dd4e2","modified":1493777793000},{"_id":"themes/next/.git/objects/ec/edffce5395e0a54e3a07cf3aa35ba6a2db617f","hash":"ec1176b614800179161f2a4d9ce4b0332039901a","modified":1492738495000},{"_id":"themes/next/.git/objects/f1/1051b9f797c369832469773bedddbf1d059e29","hash":"8469ce3497ce3d396da913592ef73fd573ad440b","modified":1493003449000},{"_id":"themes/next/.git/objects/f1/4204fb363754c04a0b55400e02aa73e21af26d","hash":"c60670af4897c865e5d8a4b7b0f3de9ab6a06d31","modified":1493003449000},{"_id":"themes/next/.git/objects/f1/491a32b261a1aaea404e659b3a4bf11dc6e0d6","hash":"e9e9ec20d5c1ca7d63dc75223a04028288f76811","modified":1492147046000},{"_id":"themes/next/.git/objects/f2/0a96fc7cff60c1feb6176b77cf5a25cd5479bc","hash":"4f61139b9764e98edcc745d052aa1b9f5ce2322b","modified":1493171178000},{"_id":"themes/next/.git/objects/f3/f10d5196b26786d45494d36429d0e3f0f0c014","hash":"e2f62a05f80b626a3322ccc189000be0068aaf26","modified":1492581979000},{"_id":"themes/next/.git/objects/f2/555ee31c3d814526ccb5277e6ac7f95e25edca","hash":"0fa348fb4b17ddee4cb9ea1375b70aa31b8dded2","modified":1492839917000},{"_id":"themes/next/.git/objects/f4/b64701571e48f0512e586ccbe6cab866c387ad","hash":"8d66b6726642397da20c0b357a0754e92d6e7527","modified":1494816317000},{"_id":"themes/next/.git/objects/f5/3f9af48aeb9bfe393b7a553d63a19a0bd3acc9","hash":"6b6a337e4cd484a57a8f113283a4d70948477e9b","modified":1492738495000},{"_id":"themes/next/.git/objects/f6/d24ae0a561df2e675fd15e8afea1e834eb3838","hash":"44d935d525b9018f9a522d3ac85d269246739822","modified":1492581979000},{"_id":"themes/next/.git/objects/f4/fb6ead2e2b0dc98c13db018c4aef4619f357dc","hash":"566f8cb54a687b27203fbd013ca0a53a865c8690","modified":1493694878000},{"_id":"themes/next/.git/objects/f7/09cb239d40a002987ed5f2af63295cd93e12d1","hash":"7368864e2a19d6fe2ebd5a5bc8441f90a451d801","modified":1492738495000},{"_id":"themes/next/.git/objects/f7/3bb38950559ca42176fd1ab5741d4050e830c4","hash":"8e5fcb2a6195c9e91448fa0f16c26627feb32198","modified":1492738495000},{"_id":"themes/next/.git/objects/f8/38e1befa1b748509d65d93c6d848346c393962","hash":"c427863109c7de49c8a436fbf63de5342e494638","modified":1492581979000},{"_id":"themes/next/.git/objects/f8/c4c6007e9428e4e025ff49dd913b07ab05be53","hash":"e738a8266f864ef8a139691f980954e03a033d58","modified":1492581979000},{"_id":"themes/next/.git/objects/f9/7056c7954581e72eae7fd0f93d924d7743e1ff","hash":"1a0c4af0d396400fa9e4977e9410551d8aad2153","modified":1493003449000},{"_id":"themes/next/.git/objects/fa/059dc2c5c13242f1674569fa8c7b10dcd54111","hash":"abf3ea8a8761f37a879d88a57735c39868e42c22","modified":1493777793000},{"_id":"themes/next/.git/objects/fa/e6ca43acd89bc3c7c73e2f657d569ee8e33e85","hash":"d6b482e10c7c0eb2f5ace27fe1a905c30e86b289","modified":1493694878000},{"_id":"themes/next/.git/objects/fd/7559d7c0bfb8e34dba3df942473d36f0a44947","hash":"04b3f31088924dc774598d5a5f0851419469e228","modified":1492839917000},{"_id":"themes/next/.git/objects/fe/9a9903c71761b6bd24381d2928f219faa14f45","hash":"ac2dfbc9c2533986cb7906d0b117b4bc4402d2ae","modified":1495173444000},{"_id":"themes/next/.git/objects/pack/pack-226c9d118912974aeb6d79910aecf3e910641dcc.idx","hash":"0482080265058f25883ae1f8b1f2d82a08a39c12","modified":1497922443000},{"_id":"themes/next/.git/objects/pack/pack-983dba6c745532107c29d6a63c5856a077332007.idx","hash":"a6eb431a7c08852f1d47ddc67cf15fed5c6f393f","modified":1491788025000},{"_id":"themes/next/.git/refs/heads/master","hash":"8e263f0e3c466c2948b5c2b1e849c404b26898af","modified":1489114115000},{"_id":"themes/next/.git/refs/tags/v5.1.1","hash":"3caf2cc30e2bc17ce7c8decb48064104d4845453","modified":1491788026000},{"_id":"themes/next/layout/_components/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1489114116000},{"_id":"themes/next/layout/_components/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1489114116000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1489114116000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1489114116000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1489114116000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"2d1075f4cabcb3956b7b84a8e210f5a66f0a5562","modified":1489114116000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1489114116000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1489114116000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1489114116000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1489114116000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1489114116000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1489114116000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1489114116000},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"e46900412e28f529c26e25e6bada342006435a32","modified":1489114116000},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"76de414947f07acf5e3eae714a5c34c2a2635473","modified":1491730671000},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1491730673000},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1489114116000},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"f4dbd4c896e6510ded8ebe05394c28f8a86e71bf","modified":1489114116000},{"_id":"themes/next/layout/_scripts/third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1489114116000},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1489114116000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"e820c6c81c611dcfc438b15f047cd93820ce2745","modified":1491639702000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1489114116000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1489114116000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1489114116000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"06f432f328a5b8a9ef0dbd5301b002aba600b4ce","modified":1489114116000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"e7c76d93605e2b685274400afe51c55cc651486e","modified":1489114116000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1489114116000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1489114116000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"c264fc8a9dee1196caa3ca166eb4e0f7d29dbe7f","modified":1491731537000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1489114116000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1489114116000},{"_id":"themes/next/source/js/src/motion.js","hash":"eda77323edd74362ace6b849a846af663441d37c","modified":1491732081000},{"_id":"themes/next/source/js/src/post-details.js","hash":"3b2d64c2e6ae072ba2a9ebf7f09908a1543abd58","modified":1489114116000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1489114116000},{"_id":"themes/next/source/js/src/utils.js","hash":"e13c9ccf70d593bdf3b8cc1d768f595abd610e6e","modified":1489114116000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1489114116000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1489114116000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1489114116000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1489114116000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1489114116000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1489114116000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1489114116000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1489114116000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1489114116000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1489114116000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1489114116000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1489114116000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1489114116000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1489114116000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1489114116000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1489114116000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1489114116000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1489114116000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1489114116000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1489114116000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1489114116000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1489114116000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1489114116000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1489114116000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1489114116000},{"_id":"themes/next/.git/objects/pack/pack-226c9d118912974aeb6d79910aecf3e910641dcc.pack","hash":"96545d334612847447a45bcd26d76fa053d19fe6","modified":1497922443000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1489114116000},{"_id":"source/images/8.jpeg","hash":"427f437b196c3491d5e93f9389c7241703b38611","modified":1491661862000},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"68d991d9e307eb00dfbf6922a51e679118a1c054","modified":1489114115000},{"_id":"themes/next/.git/refs/remotes/origin/servant","hash":"ee903ee2112907f4498fdb13674a640c685e95fb","modified":1491788026000},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1489114115000},{"_id":"themes/next/.git/refs/remotes/origin/dev","hash":"9d2c0a9ea0a9e1d5378f6aff74f50a11fe3bd73e","modified":1495173444000},{"_id":"themes/next/.git/refs/remotes/origin/master","hash":"7d2136f47f80267f1c567a539e95e624b68646bb","modified":1497922443000},{"_id":"themes/next/.git/refs/remotes/origin/testing","hash":"15660a56eaab85fc3fd3324de8d61dbc2b09b42a","modified":1491788026000},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1489114116000},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1489114116000},{"_id":"themes/next/layout/_scripts/third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1489114116000},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1489114116000},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1489114116000},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1489114116000},{"_id":"themes/next/layout/_scripts/third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1489114116000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-mta.swig","hash":"a652f202bd5b30c648c228ab8f0e997eb4928e44","modified":1489114116000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1489114116000},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"fb1d04ede838b52ca7541973f86c3810f1ad396e","modified":1489114116000},{"_id":"themes/next/layout/_scripts/third-party/comments/livere.swig","hash":"7240f2e5ec7115f8abbbc4c9ef73d4bed180fdc7","modified":1489114116000},{"_id":"themes/next/layout/_scripts/third-party/comments/gentie.swig","hash":"f129ec702ec954eebfc52316737cf65fbc04c624","modified":1492160546000},{"_id":"themes/next/layout/_scripts/third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1489114116000},{"_id":"themes/next/layout/_scripts/third-party/comments/youyan.swig","hash":"af9dd8a4aed7d06cf47b363eebff48850888566c","modified":1489114116000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"24b9e4eb3ce3960f4ce09b395eb05e775d399a06","modified":1491722972000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"1f6988d5cc0db70ff9ef265e8d4cd8dada85c156","modified":1497254769000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1489114116000},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1489114116000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1489114116000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1489114116000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1489114116000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1489114116000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"73659fa12b9c5c199071ef17e77e4873afdd2784","modified":1497254916000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"7804e31c44717c9a9ddf0f8482b9b9c1a0f74538","modified":1489114116000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1489114116000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1489114116000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1489114116000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1489114116000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"696dff1c5ea96369731716578f6b20f10643ac40","modified":1497255053000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"536ea7db79232b968027720f04c9989954d9a52f","modified":1491663624000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1489114116000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"3c90165d3ecd1d9ceec53d2948520250009828b2","modified":1491723575000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1489114116000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"26a767bec5a709bdb973962c6fb5f73592dae054","modified":1497154645000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1489114116000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1489114116000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1489114116000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1489114116000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1489114116000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"f15537cee1a9ef4fa1e72a1670ebce4097db8115","modified":1489114116000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1489114116000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1489114116000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"e3e23751d4ad24e8714b425d768cf68e37de7ded","modified":1489114116000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1489114116000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1489114116000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1489114116000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1489114116000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1489114116000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1489114116000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1489114116000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1489114116000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1489114116000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1489114116000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1489114116000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1489114116000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1489114116000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1489114116000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1489114116000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1489114116000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1489114116000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1489114116000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1489114116000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1489114116000},{"_id":"themes/next/.git/objects/pack/pack-a95573b69ce446566225c894464cba61f7e57293.idx","hash":"3903b3385c6affbb99188c8f10c2f0794fcd7a05","modified":1489114115000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1489114116000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1489114116000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1489114116000},{"_id":"themes/next/.git/logs/refs/remotes/origin/dev","hash":"93d3de6606c38cfb0792b537e2b2936158b163e0","modified":1495173444000},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"68d991d9e307eb00dfbf6922a51e679118a1c054","modified":1489114115000},{"_id":"themes/next/.git/objects/pack/pack-983dba6c745532107c29d6a63c5856a077332007.pack","hash":"229efee3c2155cfdd9ff73808c1b16115d50c168","modified":1491788025000},{"_id":"themes/next/.git/logs/refs/remotes/origin/servant","hash":"d6e1c1977b860804ae31a527324ba3b87fedb10a","modified":1491788026000},{"_id":"themes/next/.git/logs/refs/remotes/origin/master","hash":"5ba7a70729d5d84ad869451d7e6e06e7f99b3396","modified":1497922443000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"21a2978d3cc1574d36a482d58b366a4b3ea18bc4","modified":1491727192000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1489114116000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1489114116000},{"_id":"themes/next/.git/logs/refs/remotes/origin/testing","hash":"7b71ad550a4b93f0b9e7d6a4d843cdfdee4cd808","modified":1491788026000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1489114116000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1489114116000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1489114116000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1489114116000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1489114116000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1489114116000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"755b04edbbfbdd981a783edb09c9cc34cb79cea7","modified":1489114116000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1489114116000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2c4f215ca10e7b44f1203e85450fe135d93e3ee0","modified":1492216660000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1489114116000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1491723323000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1489114116000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1489114116000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"b9a2e76f019a5941191f1263b54aef7b69c48789","modified":1489114116000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1489114116000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1489114116000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"edc0d85535784100bb1c41105f176dbe2f4eac78","modified":1497255276000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"ef1fdfaf8acaf1015cf0bff0c9f467b5ca0ad8d9","modified":1497256337000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1489114116000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1489114116000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"bfd806d0a9f21446a22df82ac02e37d0075cc3b5","modified":1489114116000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1491723016000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"5f6ea57aabfa30a437059bf8352f1ad829dbd4ff","modified":1489114116000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"ab31a589b11d7df7590b65c4a0609370ff5e9596","modified":1497255129000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1489114116000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1489114116000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"e5b99c0a40865e9ef4ac548f29a47966b7f91510","modified":1492191279000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1489114116000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1489114116000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"662c7be18932caa1fae8af4cea4b7b5b2e742177","modified":1491917243000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1489114116000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1489114116000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"d243da4b38a74e612ef6d38a6ceccbe06435e9ab","modified":1497254714000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1489114116000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1489114116000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"74d0ba86f698165d13402670382a822c8736a556","modified":1489114116000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1489114116000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1489114116000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"8fe1e55bc290e6aaf07cc644fe27b62107a272a8","modified":1489114116000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"e3700b826dfe564414e5d07b0d31aa91b48d23a8","modified":1497255320000},{"_id":"themes/next/source/css/_common/components/third-party/gentie.styl","hash":"586a3ec0f1015e7207cd6a2474362e068c341744","modified":1489114116000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1489114116000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1489114116000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"ab6133fc652b2689a215205532addf41ded5f9eb","modified":1492682026000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"42348219db93a85d2ee23cb06cebd4d8ab121726","modified":1489114116000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1489114116000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1489114116000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1489114116000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1489114116000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1489114116000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1489114116000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1489114116000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1489114116000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1489114116000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1489114116000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1489114116000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1489114116000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1489114116000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1489114116000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1489114116000},{"_id":"source/images/11.gif","hash":"9422e087f2d00e45c88aa262845eaf29df2a06f5","modified":1491664200000},{"_id":"source/images/upload/0.gif","hash":"bf3dbe3b801f8539dedece2cf98be2da593aa431","modified":1492151362000},{"_id":"themes/next/.git/objects/pack/pack-a95573b69ce446566225c894464cba61f7e57293.pack","hash":"3e3ac201472e4a0454af57a6dddf7ee59436b224","modified":1489114115000}],"Category":[{"name":"PHP","_id":"cj5naxw3h0004fcxenshmxu5g"},{"name":"服务器","_id":"cj5naxw3z000bfcxebyi3ifph"},{"name":"前端","_id":"cj5naxw47000hfcxegvlbshc8"},{"name":"部署","_id":"cj5naxw4k000wfcxe1prh8x97"},{"name":"mac命令","parent":"cj5naxw3z000bfcxebyi3ifph","_id":"cj5naxw4q0010fcxeohtgecvg"},{"name":"框架","parent":"cj5naxw47000hfcxegvlbshc8","_id":"cj5naxw4z001dfcxec1zzjl8i"},{"name":"知识点","parent":"cj5naxw47000hfcxegvlbshc8","_id":"cj5naxw54001ifcxedp0ywh5q"},{"name":"shell","parent":"cj5naxw3z000bfcxebyi3ifph","_id":"cj5naxw59001nfcxeefi0j8o2"},{"name":"node","_id":"cj5naxw5c001tfcxe49b0dqld"},{"name":"构建打包","parent":"cj5naxw47000hfcxegvlbshc8","_id":"cj5naxw5s002ffcxe8aezqr3s"},{"name":"代码块","parent":"cj5naxw47000hfcxegvlbshc8","_id":"cj5naxw5u002lfcxebua0jkbq"},{"name":"博客系统搭建","parent":"cj5naxw4k000wfcxe1prh8x97","_id":"cj5naxw5y002zfcxebv2tl2xx"},{"name":"性能优化","parent":"cj5naxw47000hfcxegvlbshc8","_id":"cj5naxw61003efcxedyncpk74"},{"name":"gogs自动化部署","parent":"cj5naxw4k000wfcxe1prh8x97","_id":"cj5naxw65003mfcxe3azk5cit"},{"name":"react","parent":"cj5naxw4z001dfcxec1zzjl8i","_id":"cj5naxw6f0041fcxepcevafpl"},{"name":"设计","_id":"cj5naxw6l004ffcxeny9n74po"},{"name":"html5","parent":"cj5naxw47000hfcxegvlbshc8","_id":"cj5naxw6p004kfcxeqb53s7cz"},{"name":"正则","parent":"cj5naxw47000hfcxegvlbshc8","_id":"cj5naxw6q004nfcxe4pq4a4wt"},{"name":"koa2","parent":"cj5naxw5c001tfcxe49b0dqld","_id":"cj5naxw6r004rfcxev0r516n0"},{"name":"node模版引擎","parent":"cj5naxw5c001tfcxe49b0dqld","_id":"cj5naxw6u0050fcxeswkpg40p"},{"name":"gulp","parent":"cj5naxw5s002ffcxe8aezqr3s","_id":"cj5naxw6v0052fcxegytqnbcv"},{"name":"backbone","parent":"cj5naxw4z001dfcxec1zzjl8i","_id":"cj5naxw6y0054fcxe8zkoctfu"},{"name":"websocket","parent":"cj5naxw5c001tfcxe49b0dqld","_id":"cj5naxw6y0057fcxed1sgsoiz"},{"name":"webpack","parent":"cj5naxw5s002ffcxe8aezqr3s","_id":"cj5naxw6z005afcxet9hesrzp"},{"name":"素材网","parent":"cj5naxw6l004ffcxeny9n74po","_id":"cj5naxw71005gfcxew0evhhcy"},{"name":"用户体验设计","parent":"cj5naxw6l004ffcxeny9n74po","_id":"cj5naxw72005kfcxeyijdl0r2"}],"Data":[],"Page":[{"date":"2017-03-10T05:49:40.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ndate: 2017-03-10 13:49:40\ntype: \"categories\"\ncomments: false\n---\n","updated":"2017-04-10T09:55:53.000Z","path":"categories/index.html","title":"","layout":"page","_id":"cj5naxw3c0001fcxehehacd98","content":"","excerpt":"","more":""},{"date":"2017-03-10T15:24:23.000Z","type":"guestbook","_content":"","source":"guestbook/index.md","raw":"---\ndate: 2017-03-10 23:24:23\ntype: \"guestbook\"\n---\n","updated":"2017-04-14T16:51:57.000Z","path":"guestbook/index.html","title":"","comments":1,"layout":"page","_id":"cj5naxw3g0003fcxe8b2ikhat","content":"","excerpt":"","more":""},{"_content":"\"use strict\";\n    const fs = require(\"fs\");\n    const path = \"../../photos\";\n\n    fs.readdir(path, function (err, files) {\n        if (err) {\n            return;\n        }\n        let arr = [];\n        (function iterator(index) {\n            if (index == files.length) {\n                fs.writeFile(\"output.json\", JSON.stringify(arr, null, \"\\t\"));\n                return;\n            }\n\n            fs.stat(path + \"/\" + files[index], function (err, stats) {\n                if (err) {\n                    return;\n                }\n                if (stats.isFile()) {\n                    arr.push(files[index]);\n                }\n                iterator(index + 1);\n            })\n        }(0));\n    });\n","source":"photos/tool.js","raw":"\"use strict\";\n    const fs = require(\"fs\");\n    const path = \"../../photos\";\n\n    fs.readdir(path, function (err, files) {\n        if (err) {\n            return;\n        }\n        let arr = [];\n        (function iterator(index) {\n            if (index == files.length) {\n                fs.writeFile(\"output.json\", JSON.stringify(arr, null, \"\\t\"));\n                return;\n            }\n\n            fs.stat(path + \"/\" + files[index], function (err, stats) {\n                if (err) {\n                    return;\n                }\n                if (stats.isFile()) {\n                    arr.push(files[index]);\n                }\n                iterator(index + 1);\n            })\n        }(0));\n    });\n","date":"2017-07-28T03:21:28.000Z","updated":"2017-03-10T16:42:16.000Z","path":"photos/tool.js","layout":"false","title":"","comments":1,"_id":"cj5naxw3n0007fcxe30av0euh","content":"\"use strict\";\n    const fs = require(\"fs\");\n    const path = \"../../photos\";\n\n    fs.readdir(path, function (err, files) {\n        if (err) {\n            return;\n        }\n        let arr = [];\n        (function iterator(index) {\n            if (index == files.length) {\n                fs.writeFile(\"output.json\", JSON.stringify(arr, null, \"\\t\"));\n                return;\n            }\n\n            fs.stat(path + \"/\" + files[index], function (err, stats) {\n                if (err) {\n                    return;\n                }\n                if (stats.isFile()) {\n                    arr.push(files[index]);\n                }\n                iterator(index + 1);\n            })\n        }(0));\n    });\n","excerpt":"","more":"\"use strict\";\n    const fs = require(\"fs\");\n    const path = \"../../photos\";\n\n    fs.readdir(path, function (err, files) {\n        if (err) {\n            return;\n        }\n        let arr = [];\n        (function iterator(index) {\n            if (index == files.length) {\n                fs.writeFile(\"output.json\", JSON.stringify(arr, null, \"\\t\"));\n                return;\n            }\n\n            fs.stat(path + \"/\" + files[index], function (err, stats) {\n                if (err) {\n                    return;\n                }\n                if (stats.isFile()) {\n                    arr.push(files[index]);\n                }\n                iterator(index + 1);\n            })\n        }(0));\n    });\n"},{"noDate":"true","type":"photos","comments":0,"_content":"<link type=\"text/css\" href=\"/fancybox/jquery.fancybox.css\" rel=\"stylesheet\">\n<div class=\"instagram\"><section class=\"archives album\"><ul class=\"img-box-ul\"></ul></section></div>\n<script src=\"/js/photo.js\"></script>\n","source":"photos/index.md","raw":"---\nnoDate: 'true'\ntype: \"photos\"\ncomments: false\n---\n<link type=\"text/css\" href=\"/fancybox/jquery.fancybox.css\" rel=\"stylesheet\">\n<div class=\"instagram\"><section class=\"archives album\"><ul class=\"img-box-ul\"></ul></section></div>\n<script src=\"/js/photo.js\"></script>\n","date":"2017-07-28T03:21:28.000Z","updated":"2017-03-10T17:05:25.000Z","path":"photos/index.html","title":"","layout":"page","_id":"cj5naxw3w0009fcxe2kaqnr18","content":"<p><link type=\"text/css\" href=\"/fancybox/jquery.fancybox.css\" rel=\"stylesheet\"></p>\n<p><div class=\"instagram\"><section class=\"archives album\"><ul class=\"img-box-ul\"></ul></section></div></p>\n<script src=\"/js/photo.js\"></script>\n","excerpt":"","more":"<p><link type=\"text/css\" href=\"/fancybox/jquery.fancybox.css\" rel=\"stylesheet\"></p>\n<p><div class=\"instagram\"><section class=\"archives album\"><ul class=\"img-box-ul\"></ul></section></div></p>\n<script src=\"/js/photo.js\"></script>\n"},{"date":"2017-03-10T05:45:29.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ndate: 2017-03-10 13:45:29\ntype: \"tags\"\ncomments: false\n---\n","updated":"2017-03-10T16:29:20.000Z","path":"tags/index.html","title":"","layout":"page","_id":"cj5naxwcp005tfcxegai8ldyx","content":"","excerpt":"","more":""}],"Post":[{"title":"CI常用函数","date":"2017-04-07T08:33:59.000Z","_content":"#### ` 选择数据`\n\n$this->db->select();\n允许你在SQL查询中写 SELECT 部分。\n$this->db->where();\n$this->db->or_where();\n$this->db->where_in();\n<!--more-->\n允许你在SQL查询中写 WHERE部分，其余各种where语句请看手册。\n$this->db->get();\n运行选择查询语句并且返回结果集。可以获取一个表的全部数据。\n$this->db->like();\n$this->db->or_like();\n$this->db->not_like();\n本函数允许你生成 LIKE 子句，在做查询时非常有用，其余语法请看手册。\n$this->db->order_by();\n帮助你设置一个 ORDER BY 子句。\n$this->db->group_by();\n允许你编写查询语句中的 GROUP BY 部分:\n$this->db->distinct();\n为查询语句添加 \"DISTINCT\" 关键字:\n$this->db->having();\n允许你为你的查询语句编写 HAVING 部分。\n$this->db->limit();\n限制查询所返回的结果数量:\n$this->db->select_max();\n为你的查询编写一个 \"SELECT MAX(field)\"。\n$this->db->select_min();\n为你的查询编写一个 \"SELECT MIN(field)\" 。\n$this->db->select_avg();\n为你的查询编写一个 \"SELECT AVG(field)\" 。\n$this->db->select_sum();\n为你的查询编写一个 \"SELECT SUM(field)\" 。\n$this->db->join();\n允许你编写查询中的JOIN部分。\n$this->db->count_all_results();\n允许你获得某个特定的Active Record查询所返回的结果数量。可以使用Active Record限制函数，例如 where(), or_where(), like(), or_like() 等等。\n\n#### `插入数据`\n\n$this->db->insert();\n生成一条基于你所提供的数据的SQL插入字符串并执行查询。你可以向函数传递 数组 或一个 对象。\n$this->db->insert_batch();\n一次插入多条数据，生成一条基于你所提供的数据的SQL插入字符串并执行查询。你可以向函数传递 数组 或一个 对象。\n$this->db->set();\n本函数使您能够设置inserts(插入)或updates(更新)值。它可以用来代替那种直接传递数组给插入和更新函数的方式。\n\n#### `更新数据`\n\n$this->db->update();\n根据你提供的数据生成并执行一条update(更新)语句。你可以将一个数组或者对象传递给本函数。\n$this->db->update_batch();\nGenerates an update string based on the data you supply, and runs the query. You can either pass an array or an object to the function. Here is an example using an array:\n\n#### `删除数据`\n\n$this->db->delete();\n生成并执行一条DELETE(删除)语句。\n$this->db->empty_table();\n生成并执行一条DELETE(删除)语句。\n$this->db->truncate();\n生成并执行一条TRUNCATE(截断)语句。\n\n`链式方法`\n\n链式方法允许你以连接多个函数的方式简化你的语法。考虑一下这个范例:\n$this->db->select('title')->from('mytable')->where('id', $id)->limit(10, 20);\n$query = $this->db->get();\n说明: 链式方法只能在PHP 5下面运行。\n\n`查询`\n\n$this->db->query();\n要提交一个查询，用以下函数：\n$this->db->query('YOUR QUERY HERE');\nquery() 函数以object(对象)的形式返回一个数据库结果集。 当使用 \"read\" 模式来运行查询时, 你可以使用“显示你的结果集”来显示查询结果; 当使用 \"write\" 模式来运行查询时, 将会仅根据执行的成功或失败来返回 TRUE 或 FALSE.\n\n#### `转义查询`\n\n$this->db->escape()这个函数将会确定数据类型，以便仅对字符串类型数据进行转义。并且，它也会自动把数据用单引号括起来，所以你不必手动添加单引号，用法如下：  $sql = \"INSERT INTO table (title) VALUES(\".$this->db->escape($title).\")\";\n\n#### `查询辅助函数`\n\n$this->db->insert_id()   \n这个ID号是执行数据插入时的ID。  \n$this->db->affected_rows()\n当执行写入操作（insert,update等）的查询后，显示被影响的行数。\n$this->db->count_all();\n计算出指定表的总行数并返回。在第一个参数中写入被提交的表名。\n\n#### `生成查询记录集`\n\nresult()\n该方法执行成功返回一个object 数组，失败则返回一个空数组。\nresult_array()\n该方法执行成功时将记录集作为关联数组返回。失败时返回空数组。\nrow()\n该函数将当前请求的第一行数据作为 object 返回。\n\n你可以传递参数(参数是行的索引)以便获得某一行的数据。比如我们要获得第 5 行的数据： $row = $query->row(4);\n\nrow_array()\n功能与 row() 一样, 区别在于该函数返回的是一个数组。\n除此以外, 我们还可以使用下面的方法通过游标的方式获取记录：\n$row = $query->first_row()\n$row = $query->last_row()\n$row = $query->next_row()\n$row = $query->previous_row()\n默认情况下他们将返回一个 object，同时你也可以传递参数 \"array\" 以便使用 array 的方式获取数据 $row = $query->first_row('array')\n$row = $query->last_row('array')\n$row = $query->next_row('array')\n$row = $query->previous_row('array')\n\n#### `结果集辅助函数`\n\n$query->num_rows()\n该函数将会返回当前请求的行数。\n$query->num_fields()\n该函数返回当前请求的字段数（列数）：\n$query->free_result()\n该函数将会释放当前查询所占用的内存并删除其关联的资源标识。\n\n`自动连接`\n\n“自动连接” 功能将在每个一页面加载时被自动实例化数据库类。要启用“自动连接”，可在application/config/autoload.php中的 library 数组里添加 database：\n$autoload['libraries'] = array('database');\n\n`手动连接`\n\n如果仅仅是一部分页面要求数据库连接，你可以在你有需要的函数里手工添加如下代码或者在你的类里手工添加以供该类使用。\n$this->load->database();\n\n`连接多数据库`\n\n如果你需要同时连接多于一个的数据库，你可以用以下方式来实现：\n$DB1 = $this->load->database('group_one', TRUE);\n$DB2 = $this->load->database('group_two', TRUE);\n\n`表数据`\n\n$this->db->list_tables();\n返回一个包含当前连接数据库中所有表名称的数组。\n$this->db->table_exists();\n有时，在对某个表执行操作之前，使用该函数判断指定表是否存在很有用。返回一个布尔值。\n\n`数据库工具类`\n\n重要提示：  初始化数据库工具类之前，你的数据库驱动必须已经运行,因为工具类依赖于此。\n加载工具类： $this->load->dbutil()\n一旦初始化完毕，你可以通过 $this->dbutil 对象来访问成员函数：\n$this->dbutil->list_databases()\n$this->dbutil->database_exists();\n$this->dbutil->xml_from_result($db_result)\n$this->dbutil->backup()\n\n`数据库缓存类`\n\n激活缓存需要三步：\n1、在服务器上创建一个可写的目录以便保存缓存文件。\n2、在文件 application/config/database.php 中$db['xxxx']['cachedir']设置其目录。\n3、激活缓存特性，可以在文件 application/config/database.php 中设置全局选项$db['xxxx']['cache_on']='TRUE'，也可以用以本页下面的方法手动设置。\n一旦被激活，每一次含有数据库查询的页面被加载时缓存就会自动发生。\n\n当有数据库更新，我们需要删除缓存文件\n$this->db->cache_delete()\n删除缓存文件与特定网页。如果你需要清除缓存后，更新您的数据库\n$this->db->cache_delete('/blog', 'comments');\n注意，手册上写的是 $this->db->cache_delete('blog', 'comments');但根据实际测试应该在控制器名字前加斜杠'/'才能正确执行。\n$this->db->cache_delete_all()\n清除所有所有的缓存文件。\n\n`数据库维护类`\n\n注意:  欲初始化数据库维护类，请确保你的数据库驱动已经运行，因为该类依赖于数据库驱动。\n使用如下方法载入数据库维护类:\n$this->load->dbforge()\n一旦初始化，就可以使用$this->dbforge 对象访问类中函数:\n$this->dbforge->create_database('db_name')\n允许你创建由第一个参数指定的数据库。\n$this->dbforge->drop_database('db_name')\n允许你删除由第一个参数指定的数据库。\n$this->dbforge->create_table('table_name');\n声明了字段和键之后，你就可以创建一个表。  \n","source":"_posts/CI常用函数.md","raw":"---\ntitle: CI常用函数\ndate: 2017-04-07 16:33:59\ntags: \"PHP\"\ncategories: \"PHP\"\n---\n#### ` 选择数据`\n\n$this->db->select();\n允许你在SQL查询中写 SELECT 部分。\n$this->db->where();\n$this->db->or_where();\n$this->db->where_in();\n<!--more-->\n允许你在SQL查询中写 WHERE部分，其余各种where语句请看手册。\n$this->db->get();\n运行选择查询语句并且返回结果集。可以获取一个表的全部数据。\n$this->db->like();\n$this->db->or_like();\n$this->db->not_like();\n本函数允许你生成 LIKE 子句，在做查询时非常有用，其余语法请看手册。\n$this->db->order_by();\n帮助你设置一个 ORDER BY 子句。\n$this->db->group_by();\n允许你编写查询语句中的 GROUP BY 部分:\n$this->db->distinct();\n为查询语句添加 \"DISTINCT\" 关键字:\n$this->db->having();\n允许你为你的查询语句编写 HAVING 部分。\n$this->db->limit();\n限制查询所返回的结果数量:\n$this->db->select_max();\n为你的查询编写一个 \"SELECT MAX(field)\"。\n$this->db->select_min();\n为你的查询编写一个 \"SELECT MIN(field)\" 。\n$this->db->select_avg();\n为你的查询编写一个 \"SELECT AVG(field)\" 。\n$this->db->select_sum();\n为你的查询编写一个 \"SELECT SUM(field)\" 。\n$this->db->join();\n允许你编写查询中的JOIN部分。\n$this->db->count_all_results();\n允许你获得某个特定的Active Record查询所返回的结果数量。可以使用Active Record限制函数，例如 where(), or_where(), like(), or_like() 等等。\n\n#### `插入数据`\n\n$this->db->insert();\n生成一条基于你所提供的数据的SQL插入字符串并执行查询。你可以向函数传递 数组 或一个 对象。\n$this->db->insert_batch();\n一次插入多条数据，生成一条基于你所提供的数据的SQL插入字符串并执行查询。你可以向函数传递 数组 或一个 对象。\n$this->db->set();\n本函数使您能够设置inserts(插入)或updates(更新)值。它可以用来代替那种直接传递数组给插入和更新函数的方式。\n\n#### `更新数据`\n\n$this->db->update();\n根据你提供的数据生成并执行一条update(更新)语句。你可以将一个数组或者对象传递给本函数。\n$this->db->update_batch();\nGenerates an update string based on the data you supply, and runs the query. You can either pass an array or an object to the function. Here is an example using an array:\n\n#### `删除数据`\n\n$this->db->delete();\n生成并执行一条DELETE(删除)语句。\n$this->db->empty_table();\n生成并执行一条DELETE(删除)语句。\n$this->db->truncate();\n生成并执行一条TRUNCATE(截断)语句。\n\n`链式方法`\n\n链式方法允许你以连接多个函数的方式简化你的语法。考虑一下这个范例:\n$this->db->select('title')->from('mytable')->where('id', $id)->limit(10, 20);\n$query = $this->db->get();\n说明: 链式方法只能在PHP 5下面运行。\n\n`查询`\n\n$this->db->query();\n要提交一个查询，用以下函数：\n$this->db->query('YOUR QUERY HERE');\nquery() 函数以object(对象)的形式返回一个数据库结果集。 当使用 \"read\" 模式来运行查询时, 你可以使用“显示你的结果集”来显示查询结果; 当使用 \"write\" 模式来运行查询时, 将会仅根据执行的成功或失败来返回 TRUE 或 FALSE.\n\n#### `转义查询`\n\n$this->db->escape()这个函数将会确定数据类型，以便仅对字符串类型数据进行转义。并且，它也会自动把数据用单引号括起来，所以你不必手动添加单引号，用法如下：  $sql = \"INSERT INTO table (title) VALUES(\".$this->db->escape($title).\")\";\n\n#### `查询辅助函数`\n\n$this->db->insert_id()   \n这个ID号是执行数据插入时的ID。  \n$this->db->affected_rows()\n当执行写入操作（insert,update等）的查询后，显示被影响的行数。\n$this->db->count_all();\n计算出指定表的总行数并返回。在第一个参数中写入被提交的表名。\n\n#### `生成查询记录集`\n\nresult()\n该方法执行成功返回一个object 数组，失败则返回一个空数组。\nresult_array()\n该方法执行成功时将记录集作为关联数组返回。失败时返回空数组。\nrow()\n该函数将当前请求的第一行数据作为 object 返回。\n\n你可以传递参数(参数是行的索引)以便获得某一行的数据。比如我们要获得第 5 行的数据： $row = $query->row(4);\n\nrow_array()\n功能与 row() 一样, 区别在于该函数返回的是一个数组。\n除此以外, 我们还可以使用下面的方法通过游标的方式获取记录：\n$row = $query->first_row()\n$row = $query->last_row()\n$row = $query->next_row()\n$row = $query->previous_row()\n默认情况下他们将返回一个 object，同时你也可以传递参数 \"array\" 以便使用 array 的方式获取数据 $row = $query->first_row('array')\n$row = $query->last_row('array')\n$row = $query->next_row('array')\n$row = $query->previous_row('array')\n\n#### `结果集辅助函数`\n\n$query->num_rows()\n该函数将会返回当前请求的行数。\n$query->num_fields()\n该函数返回当前请求的字段数（列数）：\n$query->free_result()\n该函数将会释放当前查询所占用的内存并删除其关联的资源标识。\n\n`自动连接`\n\n“自动连接” 功能将在每个一页面加载时被自动实例化数据库类。要启用“自动连接”，可在application/config/autoload.php中的 library 数组里添加 database：\n$autoload['libraries'] = array('database');\n\n`手动连接`\n\n如果仅仅是一部分页面要求数据库连接，你可以在你有需要的函数里手工添加如下代码或者在你的类里手工添加以供该类使用。\n$this->load->database();\n\n`连接多数据库`\n\n如果你需要同时连接多于一个的数据库，你可以用以下方式来实现：\n$DB1 = $this->load->database('group_one', TRUE);\n$DB2 = $this->load->database('group_two', TRUE);\n\n`表数据`\n\n$this->db->list_tables();\n返回一个包含当前连接数据库中所有表名称的数组。\n$this->db->table_exists();\n有时，在对某个表执行操作之前，使用该函数判断指定表是否存在很有用。返回一个布尔值。\n\n`数据库工具类`\n\n重要提示：  初始化数据库工具类之前，你的数据库驱动必须已经运行,因为工具类依赖于此。\n加载工具类： $this->load->dbutil()\n一旦初始化完毕，你可以通过 $this->dbutil 对象来访问成员函数：\n$this->dbutil->list_databases()\n$this->dbutil->database_exists();\n$this->dbutil->xml_from_result($db_result)\n$this->dbutil->backup()\n\n`数据库缓存类`\n\n激活缓存需要三步：\n1、在服务器上创建一个可写的目录以便保存缓存文件。\n2、在文件 application/config/database.php 中$db['xxxx']['cachedir']设置其目录。\n3、激活缓存特性，可以在文件 application/config/database.php 中设置全局选项$db['xxxx']['cache_on']='TRUE'，也可以用以本页下面的方法手动设置。\n一旦被激活，每一次含有数据库查询的页面被加载时缓存就会自动发生。\n\n当有数据库更新，我们需要删除缓存文件\n$this->db->cache_delete()\n删除缓存文件与特定网页。如果你需要清除缓存后，更新您的数据库\n$this->db->cache_delete('/blog', 'comments');\n注意，手册上写的是 $this->db->cache_delete('blog', 'comments');但根据实际测试应该在控制器名字前加斜杠'/'才能正确执行。\n$this->db->cache_delete_all()\n清除所有所有的缓存文件。\n\n`数据库维护类`\n\n注意:  欲初始化数据库维护类，请确保你的数据库驱动已经运行，因为该类依赖于数据库驱动。\n使用如下方法载入数据库维护类:\n$this->load->dbforge()\n一旦初始化，就可以使用$this->dbforge 对象访问类中函数:\n$this->dbforge->create_database('db_name')\n允许你创建由第一个参数指定的数据库。\n$this->dbforge->drop_database('db_name')\n允许你删除由第一个参数指定的数据库。\n$this->dbforge->create_table('table_name');\n声明了字段和键之后，你就可以创建一个表。  \n","slug":"CI常用函数","published":1,"updated":"2017-04-07T08:38:53.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5naxw380000fcxed4ug6fji","content":"<h4 id=\"选择数据\"><a href=\"#选择数据\" class=\"headerlink\" title=\"选择数据\"></a><code>选择数据</code></h4><p>$this-&gt;db-&gt;select();<br>允许你在SQL查询中写 SELECT 部分。<br>$this-&gt;db-&gt;where();<br>$this-&gt;db-&gt;or_where();<br>$this-&gt;db-&gt;where_in();<br><a id=\"more\"></a><br>允许你在SQL查询中写 WHERE部分，其余各种where语句请看手册。<br>$this-&gt;db-&gt;get();<br>运行选择查询语句并且返回结果集。可以获取一个表的全部数据。<br>$this-&gt;db-&gt;like();<br>$this-&gt;db-&gt;or_like();<br>$this-&gt;db-&gt;not_like();<br>本函数允许你生成 LIKE 子句，在做查询时非常有用，其余语法请看手册。<br>$this-&gt;db-&gt;order_by();<br>帮助你设置一个 ORDER BY 子句。<br>$this-&gt;db-&gt;group_by();<br>允许你编写查询语句中的 GROUP BY 部分:<br>$this-&gt;db-&gt;distinct();<br>为查询语句添加 “DISTINCT” 关键字:<br>$this-&gt;db-&gt;having();<br>允许你为你的查询语句编写 HAVING 部分。<br>$this-&gt;db-&gt;limit();<br>限制查询所返回的结果数量:<br>$this-&gt;db-&gt;select_max();<br>为你的查询编写一个 “SELECT MAX(field)”。<br>$this-&gt;db-&gt;select_min();<br>为你的查询编写一个 “SELECT MIN(field)” 。<br>$this-&gt;db-&gt;select_avg();<br>为你的查询编写一个 “SELECT AVG(field)” 。<br>$this-&gt;db-&gt;select_sum();<br>为你的查询编写一个 “SELECT SUM(field)” 。<br>$this-&gt;db-&gt;join();<br>允许你编写查询中的JOIN部分。<br>$this-&gt;db-&gt;count_all_results();<br>允许你获得某个特定的Active Record查询所返回的结果数量。可以使用Active Record限制函数，例如 where(), or_where(), like(), or_like() 等等。</p>\n<h4 id=\"插入数据\"><a href=\"#插入数据\" class=\"headerlink\" title=\"插入数据\"></a><code>插入数据</code></h4><p>$this-&gt;db-&gt;insert();<br>生成一条基于你所提供的数据的SQL插入字符串并执行查询。你可以向函数传递 数组 或一个 对象。<br>$this-&gt;db-&gt;insert_batch();<br>一次插入多条数据，生成一条基于你所提供的数据的SQL插入字符串并执行查询。你可以向函数传递 数组 或一个 对象。<br>$this-&gt;db-&gt;set();<br>本函数使您能够设置inserts(插入)或updates(更新)值。它可以用来代替那种直接传递数组给插入和更新函数的方式。</p>\n<h4 id=\"更新数据\"><a href=\"#更新数据\" class=\"headerlink\" title=\"更新数据\"></a><code>更新数据</code></h4><p>$this-&gt;db-&gt;update();<br>根据你提供的数据生成并执行一条update(更新)语句。你可以将一个数组或者对象传递给本函数。<br>$this-&gt;db-&gt;update_batch();<br>Generates an update string based on the data you supply, and runs the query. You can either pass an array or an object to the function. Here is an example using an array:</p>\n<h4 id=\"删除数据\"><a href=\"#删除数据\" class=\"headerlink\" title=\"删除数据\"></a><code>删除数据</code></h4><p>$this-&gt;db-&gt;delete();<br>生成并执行一条DELETE(删除)语句。<br>$this-&gt;db-&gt;empty_table();<br>生成并执行一条DELETE(删除)语句。<br>$this-&gt;db-&gt;truncate();<br>生成并执行一条TRUNCATE(截断)语句。</p>\n<p><code>链式方法</code></p>\n<p>链式方法允许你以连接多个函数的方式简化你的语法。考虑一下这个范例:<br>$this-&gt;db-&gt;select(‘title’)-&gt;from(‘mytable’)-&gt;where(‘id’, $id)-&gt;limit(10, 20);<br>$query = $this-&gt;db-&gt;get();<br>说明: 链式方法只能在PHP 5下面运行。</p>\n<p><code>查询</code></p>\n<p>$this-&gt;db-&gt;query();<br>要提交一个查询，用以下函数：<br>$this-&gt;db-&gt;query(‘YOUR QUERY HERE’);<br>query() 函数以object(对象)的形式返回一个数据库结果集。 当使用 “read” 模式来运行查询时, 你可以使用“显示你的结果集”来显示查询结果; 当使用 “write” 模式来运行查询时, 将会仅根据执行的成功或失败来返回 TRUE 或 FALSE.</p>\n<h4 id=\"转义查询\"><a href=\"#转义查询\" class=\"headerlink\" title=\"转义查询\"></a><code>转义查询</code></h4><p>$this-&gt;db-&gt;escape()这个函数将会确定数据类型，以便仅对字符串类型数据进行转义。并且，它也会自动把数据用单引号括起来，所以你不必手动添加单引号，用法如下：  $sql = “INSERT INTO table (title) VALUES(“.$this-&gt;db-&gt;escape($title).”)”;</p>\n<h4 id=\"查询辅助函数\"><a href=\"#查询辅助函数\" class=\"headerlink\" title=\"查询辅助函数\"></a><code>查询辅助函数</code></h4><p>$this-&gt;db-&gt;insert_id()<br>这个ID号是执行数据插入时的ID。<br>$this-&gt;db-&gt;affected_rows()<br>当执行写入操作（insert,update等）的查询后，显示被影响的行数。<br>$this-&gt;db-&gt;count_all();<br>计算出指定表的总行数并返回。在第一个参数中写入被提交的表名。</p>\n<h4 id=\"生成查询记录集\"><a href=\"#生成查询记录集\" class=\"headerlink\" title=\"生成查询记录集\"></a><code>生成查询记录集</code></h4><p>result()<br>该方法执行成功返回一个object 数组，失败则返回一个空数组。<br>result_array()<br>该方法执行成功时将记录集作为关联数组返回。失败时返回空数组。<br>row()<br>该函数将当前请求的第一行数据作为 object 返回。</p>\n<p>你可以传递参数(参数是行的索引)以便获得某一行的数据。比如我们要获得第 5 行的数据： $row = $query-&gt;row(4);</p>\n<p>row_array()<br>功能与 row() 一样, 区别在于该函数返回的是一个数组。<br>除此以外, 我们还可以使用下面的方法通过游标的方式获取记录：<br>$row = $query-&gt;first_row()<br>$row = $query-&gt;last_row()<br>$row = $query-&gt;next_row()<br>$row = $query-&gt;previous_row()<br>默认情况下他们将返回一个 object，同时你也可以传递参数 “array” 以便使用 array 的方式获取数据 $row = $query-&gt;first_row(‘array’)<br>$row = $query-&gt;last_row(‘array’)<br>$row = $query-&gt;next_row(‘array’)<br>$row = $query-&gt;previous_row(‘array’)</p>\n<h4 id=\"结果集辅助函数\"><a href=\"#结果集辅助函数\" class=\"headerlink\" title=\"结果集辅助函数\"></a><code>结果集辅助函数</code></h4><p>$query-&gt;num_rows()<br>该函数将会返回当前请求的行数。<br>$query-&gt;num_fields()<br>该函数返回当前请求的字段数（列数）：<br>$query-&gt;free_result()<br>该函数将会释放当前查询所占用的内存并删除其关联的资源标识。</p>\n<p><code>自动连接</code></p>\n<p>“自动连接” 功能将在每个一页面加载时被自动实例化数据库类。要启用“自动连接”，可在application/config/autoload.php中的 library 数组里添加 database：<br>$autoload[‘libraries’] = array(‘database’);</p>\n<p><code>手动连接</code></p>\n<p>如果仅仅是一部分页面要求数据库连接，你可以在你有需要的函数里手工添加如下代码或者在你的类里手工添加以供该类使用。<br>$this-&gt;load-&gt;database();</p>\n<p><code>连接多数据库</code></p>\n<p>如果你需要同时连接多于一个的数据库，你可以用以下方式来实现：<br>$DB1 = $this-&gt;load-&gt;database(‘group_one’, TRUE);<br>$DB2 = $this-&gt;load-&gt;database(‘group_two’, TRUE);</p>\n<p><code>表数据</code></p>\n<p>$this-&gt;db-&gt;list_tables();<br>返回一个包含当前连接数据库中所有表名称的数组。<br>$this-&gt;db-&gt;table_exists();<br>有时，在对某个表执行操作之前，使用该函数判断指定表是否存在很有用。返回一个布尔值。</p>\n<p><code>数据库工具类</code></p>\n<p>重要提示：  初始化数据库工具类之前，你的数据库驱动必须已经运行,因为工具类依赖于此。<br>加载工具类： $this-&gt;load-&gt;dbutil()<br>一旦初始化完毕，你可以通过 $this-&gt;dbutil 对象来访问成员函数：<br>$this-&gt;dbutil-&gt;list_databases()<br>$this-&gt;dbutil-&gt;database_exists();<br>$this-&gt;dbutil-&gt;xml_from_result($db_result)<br>$this-&gt;dbutil-&gt;backup()</p>\n<p><code>数据库缓存类</code></p>\n<p>激活缓存需要三步：<br>1、在服务器上创建一个可写的目录以便保存缓存文件。<br>2、在文件 application/config/database.php 中$db[‘xxxx’][‘cachedir’]设置其目录。<br>3、激活缓存特性，可以在文件 application/config/database.php 中设置全局选项$db[‘xxxx’][‘cache_on’]=’TRUE’，也可以用以本页下面的方法手动设置。<br>一旦被激活，每一次含有数据库查询的页面被加载时缓存就会自动发生。</p>\n<p>当有数据库更新，我们需要删除缓存文件<br>$this-&gt;db-&gt;cache_delete()<br>删除缓存文件与特定网页。如果你需要清除缓存后，更新您的数据库<br>$this-&gt;db-&gt;cache_delete(‘/blog’, ‘comments’);<br>注意，手册上写的是 $this-&gt;db-&gt;cache_delete(‘blog’, ‘comments’);但根据实际测试应该在控制器名字前加斜杠’/‘才能正确执行。<br>$this-&gt;db-&gt;cache_delete_all()<br>清除所有所有的缓存文件。</p>\n<p><code>数据库维护类</code></p>\n<p>注意:  欲初始化数据库维护类，请确保你的数据库驱动已经运行，因为该类依赖于数据库驱动。<br>使用如下方法载入数据库维护类:<br>$this-&gt;load-&gt;dbforge()<br>一旦初始化，就可以使用$this-&gt;dbforge 对象访问类中函数:<br>$this-&gt;dbforge-&gt;create_database(‘db_name’)<br>允许你创建由第一个参数指定的数据库。<br>$this-&gt;dbforge-&gt;drop_database(‘db_name’)<br>允许你删除由第一个参数指定的数据库。<br>$this-&gt;dbforge-&gt;create_table(‘table_name’);<br>声明了字段和键之后，你就可以创建一个表。  </p>\n","excerpt":"<h4 id=\"选择数据\"><a href=\"#选择数据\" class=\"headerlink\" title=\"选择数据\"></a><code>选择数据</code></h4><p>$this-&gt;db-&gt;select();<br>允许你在SQL查询中写 SELECT 部分。<br>$this-&gt;db-&gt;where();<br>$this-&gt;db-&gt;or_where();<br>$this-&gt;db-&gt;where_in();<br>","more":"<br>允许你在SQL查询中写 WHERE部分，其余各种where语句请看手册。<br>$this-&gt;db-&gt;get();<br>运行选择查询语句并且返回结果集。可以获取一个表的全部数据。<br>$this-&gt;db-&gt;like();<br>$this-&gt;db-&gt;or_like();<br>$this-&gt;db-&gt;not_like();<br>本函数允许你生成 LIKE 子句，在做查询时非常有用，其余语法请看手册。<br>$this-&gt;db-&gt;order_by();<br>帮助你设置一个 ORDER BY 子句。<br>$this-&gt;db-&gt;group_by();<br>允许你编写查询语句中的 GROUP BY 部分:<br>$this-&gt;db-&gt;distinct();<br>为查询语句添加 “DISTINCT” 关键字:<br>$this-&gt;db-&gt;having();<br>允许你为你的查询语句编写 HAVING 部分。<br>$this-&gt;db-&gt;limit();<br>限制查询所返回的结果数量:<br>$this-&gt;db-&gt;select_max();<br>为你的查询编写一个 “SELECT MAX(field)”。<br>$this-&gt;db-&gt;select_min();<br>为你的查询编写一个 “SELECT MIN(field)” 。<br>$this-&gt;db-&gt;select_avg();<br>为你的查询编写一个 “SELECT AVG(field)” 。<br>$this-&gt;db-&gt;select_sum();<br>为你的查询编写一个 “SELECT SUM(field)” 。<br>$this-&gt;db-&gt;join();<br>允许你编写查询中的JOIN部分。<br>$this-&gt;db-&gt;count_all_results();<br>允许你获得某个特定的Active Record查询所返回的结果数量。可以使用Active Record限制函数，例如 where(), or_where(), like(), or_like() 等等。</p>\n<h4 id=\"插入数据\"><a href=\"#插入数据\" class=\"headerlink\" title=\"插入数据\"></a><code>插入数据</code></h4><p>$this-&gt;db-&gt;insert();<br>生成一条基于你所提供的数据的SQL插入字符串并执行查询。你可以向函数传递 数组 或一个 对象。<br>$this-&gt;db-&gt;insert_batch();<br>一次插入多条数据，生成一条基于你所提供的数据的SQL插入字符串并执行查询。你可以向函数传递 数组 或一个 对象。<br>$this-&gt;db-&gt;set();<br>本函数使您能够设置inserts(插入)或updates(更新)值。它可以用来代替那种直接传递数组给插入和更新函数的方式。</p>\n<h4 id=\"更新数据\"><a href=\"#更新数据\" class=\"headerlink\" title=\"更新数据\"></a><code>更新数据</code></h4><p>$this-&gt;db-&gt;update();<br>根据你提供的数据生成并执行一条update(更新)语句。你可以将一个数组或者对象传递给本函数。<br>$this-&gt;db-&gt;update_batch();<br>Generates an update string based on the data you supply, and runs the query. You can either pass an array or an object to the function. Here is an example using an array:</p>\n<h4 id=\"删除数据\"><a href=\"#删除数据\" class=\"headerlink\" title=\"删除数据\"></a><code>删除数据</code></h4><p>$this-&gt;db-&gt;delete();<br>生成并执行一条DELETE(删除)语句。<br>$this-&gt;db-&gt;empty_table();<br>生成并执行一条DELETE(删除)语句。<br>$this-&gt;db-&gt;truncate();<br>生成并执行一条TRUNCATE(截断)语句。</p>\n<p><code>链式方法</code></p>\n<p>链式方法允许你以连接多个函数的方式简化你的语法。考虑一下这个范例:<br>$this-&gt;db-&gt;select(‘title’)-&gt;from(‘mytable’)-&gt;where(‘id’, $id)-&gt;limit(10, 20);<br>$query = $this-&gt;db-&gt;get();<br>说明: 链式方法只能在PHP 5下面运行。</p>\n<p><code>查询</code></p>\n<p>$this-&gt;db-&gt;query();<br>要提交一个查询，用以下函数：<br>$this-&gt;db-&gt;query(‘YOUR QUERY HERE’);<br>query() 函数以object(对象)的形式返回一个数据库结果集。 当使用 “read” 模式来运行查询时, 你可以使用“显示你的结果集”来显示查询结果; 当使用 “write” 模式来运行查询时, 将会仅根据执行的成功或失败来返回 TRUE 或 FALSE.</p>\n<h4 id=\"转义查询\"><a href=\"#转义查询\" class=\"headerlink\" title=\"转义查询\"></a><code>转义查询</code></h4><p>$this-&gt;db-&gt;escape()这个函数将会确定数据类型，以便仅对字符串类型数据进行转义。并且，它也会自动把数据用单引号括起来，所以你不必手动添加单引号，用法如下：  $sql = “INSERT INTO table (title) VALUES(“.$this-&gt;db-&gt;escape($title).”)”;</p>\n<h4 id=\"查询辅助函数\"><a href=\"#查询辅助函数\" class=\"headerlink\" title=\"查询辅助函数\"></a><code>查询辅助函数</code></h4><p>$this-&gt;db-&gt;insert_id()<br>这个ID号是执行数据插入时的ID。<br>$this-&gt;db-&gt;affected_rows()<br>当执行写入操作（insert,update等）的查询后，显示被影响的行数。<br>$this-&gt;db-&gt;count_all();<br>计算出指定表的总行数并返回。在第一个参数中写入被提交的表名。</p>\n<h4 id=\"生成查询记录集\"><a href=\"#生成查询记录集\" class=\"headerlink\" title=\"生成查询记录集\"></a><code>生成查询记录集</code></h4><p>result()<br>该方法执行成功返回一个object 数组，失败则返回一个空数组。<br>result_array()<br>该方法执行成功时将记录集作为关联数组返回。失败时返回空数组。<br>row()<br>该函数将当前请求的第一行数据作为 object 返回。</p>\n<p>你可以传递参数(参数是行的索引)以便获得某一行的数据。比如我们要获得第 5 行的数据： $row = $query-&gt;row(4);</p>\n<p>row_array()<br>功能与 row() 一样, 区别在于该函数返回的是一个数组。<br>除此以外, 我们还可以使用下面的方法通过游标的方式获取记录：<br>$row = $query-&gt;first_row()<br>$row = $query-&gt;last_row()<br>$row = $query-&gt;next_row()<br>$row = $query-&gt;previous_row()<br>默认情况下他们将返回一个 object，同时你也可以传递参数 “array” 以便使用 array 的方式获取数据 $row = $query-&gt;first_row(‘array’)<br>$row = $query-&gt;last_row(‘array’)<br>$row = $query-&gt;next_row(‘array’)<br>$row = $query-&gt;previous_row(‘array’)</p>\n<h4 id=\"结果集辅助函数\"><a href=\"#结果集辅助函数\" class=\"headerlink\" title=\"结果集辅助函数\"></a><code>结果集辅助函数</code></h4><p>$query-&gt;num_rows()<br>该函数将会返回当前请求的行数。<br>$query-&gt;num_fields()<br>该函数返回当前请求的字段数（列数）：<br>$query-&gt;free_result()<br>该函数将会释放当前查询所占用的内存并删除其关联的资源标识。</p>\n<p><code>自动连接</code></p>\n<p>“自动连接” 功能将在每个一页面加载时被自动实例化数据库类。要启用“自动连接”，可在application/config/autoload.php中的 library 数组里添加 database：<br>$autoload[‘libraries’] = array(‘database’);</p>\n<p><code>手动连接</code></p>\n<p>如果仅仅是一部分页面要求数据库连接，你可以在你有需要的函数里手工添加如下代码或者在你的类里手工添加以供该类使用。<br>$this-&gt;load-&gt;database();</p>\n<p><code>连接多数据库</code></p>\n<p>如果你需要同时连接多于一个的数据库，你可以用以下方式来实现：<br>$DB1 = $this-&gt;load-&gt;database(‘group_one’, TRUE);<br>$DB2 = $this-&gt;load-&gt;database(‘group_two’, TRUE);</p>\n<p><code>表数据</code></p>\n<p>$this-&gt;db-&gt;list_tables();<br>返回一个包含当前连接数据库中所有表名称的数组。<br>$this-&gt;db-&gt;table_exists();<br>有时，在对某个表执行操作之前，使用该函数判断指定表是否存在很有用。返回一个布尔值。</p>\n<p><code>数据库工具类</code></p>\n<p>重要提示：  初始化数据库工具类之前，你的数据库驱动必须已经运行,因为工具类依赖于此。<br>加载工具类： $this-&gt;load-&gt;dbutil()<br>一旦初始化完毕，你可以通过 $this-&gt;dbutil 对象来访问成员函数：<br>$this-&gt;dbutil-&gt;list_databases()<br>$this-&gt;dbutil-&gt;database_exists();<br>$this-&gt;dbutil-&gt;xml_from_result($db_result)<br>$this-&gt;dbutil-&gt;backup()</p>\n<p><code>数据库缓存类</code></p>\n<p>激活缓存需要三步：<br>1、在服务器上创建一个可写的目录以便保存缓存文件。<br>2、在文件 application/config/database.php 中$db[‘xxxx’][‘cachedir’]设置其目录。<br>3、激活缓存特性，可以在文件 application/config/database.php 中设置全局选项$db[‘xxxx’][‘cache_on’]=’TRUE’，也可以用以本页下面的方法手动设置。<br>一旦被激活，每一次含有数据库查询的页面被加载时缓存就会自动发生。</p>\n<p>当有数据库更新，我们需要删除缓存文件<br>$this-&gt;db-&gt;cache_delete()<br>删除缓存文件与特定网页。如果你需要清除缓存后，更新您的数据库<br>$this-&gt;db-&gt;cache_delete(‘/blog’, ‘comments’);<br>注意，手册上写的是 $this-&gt;db-&gt;cache_delete(‘blog’, ‘comments’);但根据实际测试应该在控制器名字前加斜杠’/‘才能正确执行。<br>$this-&gt;db-&gt;cache_delete_all()<br>清除所有所有的缓存文件。</p>\n<p><code>数据库维护类</code></p>\n<p>注意:  欲初始化数据库维护类，请确保你的数据库驱动已经运行，因为该类依赖于数据库驱动。<br>使用如下方法载入数据库维护类:<br>$this-&gt;load-&gt;dbforge()<br>一旦初始化，就可以使用$this-&gt;dbforge 对象访问类中函数:<br>$this-&gt;dbforge-&gt;create_database(‘db_name’)<br>允许你创建由第一个参数指定的数据库。<br>$this-&gt;dbforge-&gt;drop_database(‘db_name’)<br>允许你删除由第一个参数指定的数据库。<br>$this-&gt;dbforge-&gt;create_table(‘table_name’);<br>声明了字段和键之后，你就可以创建一个表。  </p>"},{"title":"Mac命令大全","date":"2017-04-07T09:54:35.000Z","_content":"#### 1.目录操作\n\n| 命令名      |     功能描述 |   使用举例   |\n| :-------- | --------:| :------: |\n| mkdir    |   创建一个目录 |  mkdir dirname  |\n|rmdir|\t删除一个目录|\trmdir dirname\n|mvdir\t|移动或重命名一个目录|\tmvdir dir1 dir2\n|cd|\t改变当前目录\t|cd dirname\n|pwd\t|显示当前目录的路径名\t|pwd\n|ls\t|显示当前目录的内容\t|ls -la\n|dircmp\t|比较两个目录的内容|\tdircmp dir1 dir2\n<!--more-->\n#### 2.文件操作\n| 命令名      |     功能描述 |   使用举例   |\n| :-------- | --------:| :------: |\n|cat\t|显示或连接文件\t|cat filename|\n|pg\t|分页格式化显示文件内容\t|pg filename\n|more\t|分屏显示文件内容\t|more filename\n|od\t|显示非文本文件的内容|\tod -c filename\n|cp\t|复制文件或目录\t|cp file1 file2\n|rm\t|删除文件或目录|\trm filename\n|mv\t|改变文件名或所在目录|\tmv file1 file2\n|ln|\t联接文件\t|ln -s file1 file2\n|find|\t使用匹配表达式查找文件|\tfind . -name \"*.c\" -print\n|file\t|显示文件类型|\tfile filename\n|open\t|使用默认的程序打开文件|\topen filename\n#### 3.选择操作\n\n| 命令名      |     功能描述 |   使用举例   |\n| :-------- | --------:| :------: |\n|tail|\t显示文件的最后几行|\ttail -15 filename|\n|cut\t|显示文件每行中的某些域\t|cut -f1,7 -d: /etc/passwd\n|colrm\t|从标准输入中删除若干列|\tcolrm 8 20 file2\n|paste\t|横向连接文件|\tpaste file1 file2\n|diff\t|比较并显示两个文件的差异|\tdiff file1 file2\n|sed\t|非交互方式流编辑器|\tsed \"s/red/green/g\" filename\n|grep\t|在文件中按模式查找|\tgrep \"^[a-zA-Z]\" filename\n|awk\t|在文件中查找并处理模式\t|awk '{print $1 $1}' filename\n|sort\t|排序或归并文件\t|sort -d -f -u file1\n|uniq\t|去掉文件中的重复行|\tuniq file1 file2\n|comm\t|显示两有序文件的公共和非公共行|\tcomm file1 file2\n|wc\t|统计文件的字符数、词数和行数|\twc filename\n|nl\t|给文件加上行号|\tnl file1 >file2\n#### 4.安全操作\n\n\n| 命令名      |     功能描述 |   使用举例   |\n| :-------- | --------:| :------: |\n|passwd\t|修改用户密码|\tpasswd\n|chmod\t|改变文件或目录的权限\t|chmod ug+x filename\n|umask\t|定义创建文件的权限掩码|\tumask 027\n|chown\t|改变文件或目录的属主\t|chown newowner filename\n|chgrp\t|改变文件或目录的所属组\t|chgrp staff filename\n|xlock\t|给终端上锁|\txlock -remote\n#### 5.编程操作\n\n| 命令名      |     功能描述 |   使用举例   |\n| :-------- | --------:| :------: |\n|make\t|维护可执行程序的最新版本\t|make\n|touch\t|更新文件的访问和修改时间|\ttouch -m 05202400 filename\n|dbx\t|命令行界面调试工具\t|dbx a.out\n|xde|\t图形用户界面调试工具|\txde a.out\n#### 6.进程操作\n\n| 命令名      |     功能描述 |   使用举例   |\n| :-------- | --------:| :------: |\n|ps\t|显示进程当前状态|\tps u\n|kill|\t终止进程|\tkill -9 30142\n|nice\t|改变待执行命令的优先级|\tnice cc -c *.c\n|renice|\t改变已运行进程的优先级\t|renice +20 32768\n#### 7.时间操作\n\n| 命令名      |     功能描述 |   使用举例   |\n| :-------- | --------:| :------: |\n|date\t|显示系统的当前日期和时间|\tdate\n|cal|\t显示日历|\tcal 8 1996\n|time\t|统计程序的执行时间|\ttime a.out\n#### 8.网络与通信操作\n\n| 命令名      |     功能描述 |   使用举例   |\n| :-------- | --------:| :------: |\n|telnet\t|远程登录|\ttelnet hpc.sp.net.edu.cn\n|rlogin\t|远程登录|\trlogin hostname -l username\n|rsh\t|在远程主机执行指定命令|\trsh f01n03 date\n|ftp|\t在本地主机与远程主机之间传输文件\t|ftp ftp.sp.net.edu.cn\n|rcp\t|在本地主机与远程主机 之间复制文件\t|rcp file1 host1:file2\n|ping\t|给一个网络主机发送 回应请求\t|ping hpc.sp.net.edu.cn\n|mail|\t阅读和发送电子邮件|\tmail\n|write\t|给另一用户发送报文\t|write username pts/1\n|mesg\t|允许或拒绝接收报文|\tmesg n\n#### 9.Korn Shell 命令\n\n| 命令名      |     功能描述 |   使用举例   |\n| :-------- | --------:| :------: |\n|history\t|列出最近执行过的 几条命令及编号\t|history\n|r\t|重复执行最近执行过的 某条命令\t|r -2\n|alias\t|给某个命令定义别名|\talias del=rm -i\n|unalias\t|取消对某个别名的定义|\tunalias del\n#### 10.其它命令\n\n| 命令名      |     功能描述 |   使用举例   |\n| :-------- | --------:| :------: |\n|uname\t|显示操作系统的有关信息|\tuname -a\n|clear|\t清除屏幕或窗口内容\t|clear\n|env|\t显示当前所有设置过的环境变量\t|env\n|who\t|列出当前登录的所有用户|\twho\n|whoami\t|显示当前正进行操作的用户名|\twhoami\n|tty|\t显示终端或伪终端的名称|\ttty\n|stty|\t显示或重置控制键定义\t|stty -a\n|du|\t查询磁盘使用情况|\tdu -k subdir\n|df\t|显示文件系统的总空间和可用空间|\tdf /tmp\n|w|\t显示当前系统活动的总信息|\tw\n","source":"_posts/Mac命令大全.md","raw":"---\ntitle: Mac命令大全\ndate: 2017-04-07 17:54:35\ntags: \"命令大全\"\ncategories:\n    - '服务器'\n    - 'mac命令'\n---\n#### 1.目录操作\n\n| 命令名      |     功能描述 |   使用举例   |\n| :-------- | --------:| :------: |\n| mkdir    |   创建一个目录 |  mkdir dirname  |\n|rmdir|\t删除一个目录|\trmdir dirname\n|mvdir\t|移动或重命名一个目录|\tmvdir dir1 dir2\n|cd|\t改变当前目录\t|cd dirname\n|pwd\t|显示当前目录的路径名\t|pwd\n|ls\t|显示当前目录的内容\t|ls -la\n|dircmp\t|比较两个目录的内容|\tdircmp dir1 dir2\n<!--more-->\n#### 2.文件操作\n| 命令名      |     功能描述 |   使用举例   |\n| :-------- | --------:| :------: |\n|cat\t|显示或连接文件\t|cat filename|\n|pg\t|分页格式化显示文件内容\t|pg filename\n|more\t|分屏显示文件内容\t|more filename\n|od\t|显示非文本文件的内容|\tod -c filename\n|cp\t|复制文件或目录\t|cp file1 file2\n|rm\t|删除文件或目录|\trm filename\n|mv\t|改变文件名或所在目录|\tmv file1 file2\n|ln|\t联接文件\t|ln -s file1 file2\n|find|\t使用匹配表达式查找文件|\tfind . -name \"*.c\" -print\n|file\t|显示文件类型|\tfile filename\n|open\t|使用默认的程序打开文件|\topen filename\n#### 3.选择操作\n\n| 命令名      |     功能描述 |   使用举例   |\n| :-------- | --------:| :------: |\n|tail|\t显示文件的最后几行|\ttail -15 filename|\n|cut\t|显示文件每行中的某些域\t|cut -f1,7 -d: /etc/passwd\n|colrm\t|从标准输入中删除若干列|\tcolrm 8 20 file2\n|paste\t|横向连接文件|\tpaste file1 file2\n|diff\t|比较并显示两个文件的差异|\tdiff file1 file2\n|sed\t|非交互方式流编辑器|\tsed \"s/red/green/g\" filename\n|grep\t|在文件中按模式查找|\tgrep \"^[a-zA-Z]\" filename\n|awk\t|在文件中查找并处理模式\t|awk '{print $1 $1}' filename\n|sort\t|排序或归并文件\t|sort -d -f -u file1\n|uniq\t|去掉文件中的重复行|\tuniq file1 file2\n|comm\t|显示两有序文件的公共和非公共行|\tcomm file1 file2\n|wc\t|统计文件的字符数、词数和行数|\twc filename\n|nl\t|给文件加上行号|\tnl file1 >file2\n#### 4.安全操作\n\n\n| 命令名      |     功能描述 |   使用举例   |\n| :-------- | --------:| :------: |\n|passwd\t|修改用户密码|\tpasswd\n|chmod\t|改变文件或目录的权限\t|chmod ug+x filename\n|umask\t|定义创建文件的权限掩码|\tumask 027\n|chown\t|改变文件或目录的属主\t|chown newowner filename\n|chgrp\t|改变文件或目录的所属组\t|chgrp staff filename\n|xlock\t|给终端上锁|\txlock -remote\n#### 5.编程操作\n\n| 命令名      |     功能描述 |   使用举例   |\n| :-------- | --------:| :------: |\n|make\t|维护可执行程序的最新版本\t|make\n|touch\t|更新文件的访问和修改时间|\ttouch -m 05202400 filename\n|dbx\t|命令行界面调试工具\t|dbx a.out\n|xde|\t图形用户界面调试工具|\txde a.out\n#### 6.进程操作\n\n| 命令名      |     功能描述 |   使用举例   |\n| :-------- | --------:| :------: |\n|ps\t|显示进程当前状态|\tps u\n|kill|\t终止进程|\tkill -9 30142\n|nice\t|改变待执行命令的优先级|\tnice cc -c *.c\n|renice|\t改变已运行进程的优先级\t|renice +20 32768\n#### 7.时间操作\n\n| 命令名      |     功能描述 |   使用举例   |\n| :-------- | --------:| :------: |\n|date\t|显示系统的当前日期和时间|\tdate\n|cal|\t显示日历|\tcal 8 1996\n|time\t|统计程序的执行时间|\ttime a.out\n#### 8.网络与通信操作\n\n| 命令名      |     功能描述 |   使用举例   |\n| :-------- | --------:| :------: |\n|telnet\t|远程登录|\ttelnet hpc.sp.net.edu.cn\n|rlogin\t|远程登录|\trlogin hostname -l username\n|rsh\t|在远程主机执行指定命令|\trsh f01n03 date\n|ftp|\t在本地主机与远程主机之间传输文件\t|ftp ftp.sp.net.edu.cn\n|rcp\t|在本地主机与远程主机 之间复制文件\t|rcp file1 host1:file2\n|ping\t|给一个网络主机发送 回应请求\t|ping hpc.sp.net.edu.cn\n|mail|\t阅读和发送电子邮件|\tmail\n|write\t|给另一用户发送报文\t|write username pts/1\n|mesg\t|允许或拒绝接收报文|\tmesg n\n#### 9.Korn Shell 命令\n\n| 命令名      |     功能描述 |   使用举例   |\n| :-------- | --------:| :------: |\n|history\t|列出最近执行过的 几条命令及编号\t|history\n|r\t|重复执行最近执行过的 某条命令\t|r -2\n|alias\t|给某个命令定义别名|\talias del=rm -i\n|unalias\t|取消对某个别名的定义|\tunalias del\n#### 10.其它命令\n\n| 命令名      |     功能描述 |   使用举例   |\n| :-------- | --------:| :------: |\n|uname\t|显示操作系统的有关信息|\tuname -a\n|clear|\t清除屏幕或窗口内容\t|clear\n|env|\t显示当前所有设置过的环境变量\t|env\n|who\t|列出当前登录的所有用户|\twho\n|whoami\t|显示当前正进行操作的用户名|\twhoami\n|tty|\t显示终端或伪终端的名称|\ttty\n|stty|\t显示或重置控制键定义\t|stty -a\n|du|\t查询磁盘使用情况|\tdu -k subdir\n|df\t|显示文件系统的总空间和可用空间|\tdf /tmp\n|w|\t显示当前系统活动的总信息|\tw\n","slug":"Mac命令大全","published":1,"updated":"2017-04-15T03:25:03.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5naxw3e0002fcxest0c979w","content":"<h4 id=\"1-目录操作\"><a href=\"#1-目录操作\" class=\"headerlink\" title=\"1.目录操作\"></a>1.目录操作</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">命令名</th>\n<th style=\"text-align:right\">功能描述</th>\n<th style=\"text-align:center\">使用举例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">mkdir</td>\n<td style=\"text-align:right\">创建一个目录</td>\n<td style=\"text-align:center\">mkdir dirname</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">rmdir</td>\n<td style=\"text-align:right\">删除一个目录</td>\n<td style=\"text-align:center\">rmdir dirname</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">mvdir</td>\n<td style=\"text-align:right\">移动或重命名一个目录</td>\n<td style=\"text-align:center\">mvdir dir1 dir2</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">cd</td>\n<td style=\"text-align:right\">改变当前目录</td>\n<td style=\"text-align:center\">cd dirname</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">pwd</td>\n<td style=\"text-align:right\">显示当前目录的路径名</td>\n<td style=\"text-align:center\">pwd</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ls</td>\n<td style=\"text-align:right\">显示当前目录的内容</td>\n<td style=\"text-align:center\">ls -la</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">dircmp</td>\n<td style=\"text-align:right\">比较两个目录的内容</td>\n<td style=\"text-align:center\">dircmp dir1 dir2</td>\n</tr>\n</tbody>\n</table>\n<a id=\"more\"></a>\n<h4 id=\"2-文件操作\"><a href=\"#2-文件操作\" class=\"headerlink\" title=\"2.文件操作\"></a>2.文件操作</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">命令名</th>\n<th style=\"text-align:right\">功能描述</th>\n<th style=\"text-align:center\">使用举例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">cat</td>\n<td style=\"text-align:right\">显示或连接文件</td>\n<td style=\"text-align:center\">cat filename</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">pg</td>\n<td style=\"text-align:right\">分页格式化显示文件内容</td>\n<td style=\"text-align:center\">pg filename</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">more</td>\n<td style=\"text-align:right\">分屏显示文件内容</td>\n<td style=\"text-align:center\">more filename</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">od</td>\n<td style=\"text-align:right\">显示非文本文件的内容</td>\n<td style=\"text-align:center\">od -c filename</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">cp</td>\n<td style=\"text-align:right\">复制文件或目录</td>\n<td style=\"text-align:center\">cp file1 file2</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">rm</td>\n<td style=\"text-align:right\">删除文件或目录</td>\n<td style=\"text-align:center\">rm filename</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">mv</td>\n<td style=\"text-align:right\">改变文件名或所在目录</td>\n<td style=\"text-align:center\">mv file1 file2</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ln</td>\n<td style=\"text-align:right\">联接文件</td>\n<td style=\"text-align:center\">ln -s file1 file2</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">find</td>\n<td style=\"text-align:right\">使用匹配表达式查找文件</td>\n<td style=\"text-align:center\">find . -name “*.c” -print</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">file</td>\n<td style=\"text-align:right\">显示文件类型</td>\n<td style=\"text-align:center\">file filename</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">open</td>\n<td style=\"text-align:right\">使用默认的程序打开文件</td>\n<td style=\"text-align:center\">open filename</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"3-选择操作\"><a href=\"#3-选择操作\" class=\"headerlink\" title=\"3.选择操作\"></a>3.选择操作</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">命令名</th>\n<th style=\"text-align:right\">功能描述</th>\n<th style=\"text-align:center\">使用举例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">tail</td>\n<td style=\"text-align:right\">显示文件的最后几行</td>\n<td style=\"text-align:center\">tail -15 filename</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">cut</td>\n<td style=\"text-align:right\">显示文件每行中的某些域</td>\n<td style=\"text-align:center\">cut -f1,7 -d: /etc/passwd</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">colrm</td>\n<td style=\"text-align:right\">从标准输入中删除若干列</td>\n<td style=\"text-align:center\">colrm 8 20 file2</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">paste</td>\n<td style=\"text-align:right\">横向连接文件</td>\n<td style=\"text-align:center\">paste file1 file2</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">diff</td>\n<td style=\"text-align:right\">比较并显示两个文件的差异</td>\n<td style=\"text-align:center\">diff file1 file2</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">sed</td>\n<td style=\"text-align:right\">非交互方式流编辑器</td>\n<td style=\"text-align:center\">sed “s/red/green/g” filename</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">grep</td>\n<td style=\"text-align:right\">在文件中按模式查找</td>\n<td style=\"text-align:center\">grep “^[a-zA-Z]” filename</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">awk</td>\n<td style=\"text-align:right\">在文件中查找并处理模式</td>\n<td style=\"text-align:center\">awk ‘{print $1 $1}’ filename</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">sort</td>\n<td style=\"text-align:right\">排序或归并文件</td>\n<td style=\"text-align:center\">sort -d -f -u file1</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">uniq</td>\n<td style=\"text-align:right\">去掉文件中的重复行</td>\n<td style=\"text-align:center\">uniq file1 file2</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">comm</td>\n<td style=\"text-align:right\">显示两有序文件的公共和非公共行</td>\n<td style=\"text-align:center\">comm file1 file2</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">wc</td>\n<td style=\"text-align:right\">统计文件的字符数、词数和行数</td>\n<td style=\"text-align:center\">wc filename</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">nl</td>\n<td style=\"text-align:right\">给文件加上行号</td>\n<td style=\"text-align:center\">nl file1 &gt;file2</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"4-安全操作\"><a href=\"#4-安全操作\" class=\"headerlink\" title=\"4.安全操作\"></a>4.安全操作</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">命令名</th>\n<th style=\"text-align:right\">功能描述</th>\n<th style=\"text-align:center\">使用举例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">passwd</td>\n<td style=\"text-align:right\">修改用户密码</td>\n<td style=\"text-align:center\">passwd</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">chmod</td>\n<td style=\"text-align:right\">改变文件或目录的权限</td>\n<td style=\"text-align:center\">chmod ug+x filename</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">umask</td>\n<td style=\"text-align:right\">定义创建文件的权限掩码</td>\n<td style=\"text-align:center\">umask 027</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">chown</td>\n<td style=\"text-align:right\">改变文件或目录的属主</td>\n<td style=\"text-align:center\">chown newowner filename</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">chgrp</td>\n<td style=\"text-align:right\">改变文件或目录的所属组</td>\n<td style=\"text-align:center\">chgrp staff filename</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">xlock</td>\n<td style=\"text-align:right\">给终端上锁</td>\n<td style=\"text-align:center\">xlock -remote</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"5-编程操作\"><a href=\"#5-编程操作\" class=\"headerlink\" title=\"5.编程操作\"></a>5.编程操作</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">命令名</th>\n<th style=\"text-align:right\">功能描述</th>\n<th style=\"text-align:center\">使用举例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">make</td>\n<td style=\"text-align:right\">维护可执行程序的最新版本</td>\n<td style=\"text-align:center\">make</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">touch</td>\n<td style=\"text-align:right\">更新文件的访问和修改时间</td>\n<td style=\"text-align:center\">touch -m 05202400 filename</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">dbx</td>\n<td style=\"text-align:right\">命令行界面调试工具</td>\n<td style=\"text-align:center\">dbx a.out</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">xde</td>\n<td style=\"text-align:right\">图形用户界面调试工具</td>\n<td style=\"text-align:center\">xde a.out</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"6-进程操作\"><a href=\"#6-进程操作\" class=\"headerlink\" title=\"6.进程操作\"></a>6.进程操作</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">命令名</th>\n<th style=\"text-align:right\">功能描述</th>\n<th style=\"text-align:center\">使用举例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">ps</td>\n<td style=\"text-align:right\">显示进程当前状态</td>\n<td style=\"text-align:center\">ps u</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">kill</td>\n<td style=\"text-align:right\">终止进程</td>\n<td style=\"text-align:center\">kill -9 30142</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">nice</td>\n<td style=\"text-align:right\">改变待执行命令的优先级</td>\n<td style=\"text-align:center\">nice cc -c *.c</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">renice</td>\n<td style=\"text-align:right\">改变已运行进程的优先级</td>\n<td style=\"text-align:center\">renice +20 32768</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"7-时间操作\"><a href=\"#7-时间操作\" class=\"headerlink\" title=\"7.时间操作\"></a>7.时间操作</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">命令名</th>\n<th style=\"text-align:right\">功能描述</th>\n<th style=\"text-align:center\">使用举例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">date</td>\n<td style=\"text-align:right\">显示系统的当前日期和时间</td>\n<td style=\"text-align:center\">date</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">cal</td>\n<td style=\"text-align:right\">显示日历</td>\n<td style=\"text-align:center\">cal 8 1996</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">time</td>\n<td style=\"text-align:right\">统计程序的执行时间</td>\n<td style=\"text-align:center\">time a.out</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"8-网络与通信操作\"><a href=\"#8-网络与通信操作\" class=\"headerlink\" title=\"8.网络与通信操作\"></a>8.网络与通信操作</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">命令名</th>\n<th style=\"text-align:right\">功能描述</th>\n<th style=\"text-align:center\">使用举例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">telnet</td>\n<td style=\"text-align:right\">远程登录</td>\n<td style=\"text-align:center\">telnet hpc.sp.net.edu.cn</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">rlogin</td>\n<td style=\"text-align:right\">远程登录</td>\n<td style=\"text-align:center\">rlogin hostname -l username</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">rsh</td>\n<td style=\"text-align:right\">在远程主机执行指定命令</td>\n<td style=\"text-align:center\">rsh f01n03 date</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ftp</td>\n<td style=\"text-align:right\">在本地主机与远程主机之间传输文件</td>\n<td style=\"text-align:center\">ftp ftp.sp.net.edu.cn</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">rcp</td>\n<td style=\"text-align:right\">在本地主机与远程主机 之间复制文件</td>\n<td style=\"text-align:center\">rcp file1 host1:file2</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ping</td>\n<td style=\"text-align:right\">给一个网络主机发送 回应请求</td>\n<td style=\"text-align:center\">ping hpc.sp.net.edu.cn</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">mail</td>\n<td style=\"text-align:right\">阅读和发送电子邮件</td>\n<td style=\"text-align:center\">mail</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">write</td>\n<td style=\"text-align:right\">给另一用户发送报文</td>\n<td style=\"text-align:center\">write username pts/1</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">mesg</td>\n<td style=\"text-align:right\">允许或拒绝接收报文</td>\n<td style=\"text-align:center\">mesg n</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"9-Korn-Shell-命令\"><a href=\"#9-Korn-Shell-命令\" class=\"headerlink\" title=\"9.Korn Shell 命令\"></a>9.Korn Shell 命令</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">命令名</th>\n<th style=\"text-align:right\">功能描述</th>\n<th style=\"text-align:center\">使用举例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">history</td>\n<td style=\"text-align:right\">列出最近执行过的 几条命令及编号</td>\n<td style=\"text-align:center\">history</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">r</td>\n<td style=\"text-align:right\">重复执行最近执行过的 某条命令</td>\n<td style=\"text-align:center\">r -2</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">alias</td>\n<td style=\"text-align:right\">给某个命令定义别名</td>\n<td style=\"text-align:center\">alias del=rm -i</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">unalias</td>\n<td style=\"text-align:right\">取消对某个别名的定义</td>\n<td style=\"text-align:center\">unalias del</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"10-其它命令\"><a href=\"#10-其它命令\" class=\"headerlink\" title=\"10.其它命令\"></a>10.其它命令</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">命令名</th>\n<th style=\"text-align:right\">功能描述</th>\n<th style=\"text-align:center\">使用举例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">uname</td>\n<td style=\"text-align:right\">显示操作系统的有关信息</td>\n<td style=\"text-align:center\">uname -a</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">clear</td>\n<td style=\"text-align:right\">清除屏幕或窗口内容</td>\n<td style=\"text-align:center\">clear</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">env</td>\n<td style=\"text-align:right\">显示当前所有设置过的环境变量</td>\n<td style=\"text-align:center\">env</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">who</td>\n<td style=\"text-align:right\">列出当前登录的所有用户</td>\n<td style=\"text-align:center\">who</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">whoami</td>\n<td style=\"text-align:right\">显示当前正进行操作的用户名</td>\n<td style=\"text-align:center\">whoami</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">tty</td>\n<td style=\"text-align:right\">显示终端或伪终端的名称</td>\n<td style=\"text-align:center\">tty</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">stty</td>\n<td style=\"text-align:right\">显示或重置控制键定义</td>\n<td style=\"text-align:center\">stty -a</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">du</td>\n<td style=\"text-align:right\">查询磁盘使用情况</td>\n<td style=\"text-align:center\">du -k subdir</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">df</td>\n<td style=\"text-align:right\">显示文件系统的总空间和可用空间</td>\n<td style=\"text-align:center\">df /tmp</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">w</td>\n<td style=\"text-align:right\">显示当前系统活动的总信息</td>\n<td style=\"text-align:center\">w</td>\n</tr>\n</tbody>\n</table>\n","excerpt":"<h4 id=\"1-目录操作\"><a href=\"#1-目录操作\" class=\"headerlink\" title=\"1.目录操作\"></a>1.目录操作</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">命令名</th>\n<th style=\"text-align:right\">功能描述</th>\n<th style=\"text-align:center\">使用举例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">mkdir</td>\n<td style=\"text-align:right\">创建一个目录</td>\n<td style=\"text-align:center\">mkdir dirname</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">rmdir</td>\n<td style=\"text-align:right\">删除一个目录</td>\n<td style=\"text-align:center\">rmdir dirname</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">mvdir</td>\n<td style=\"text-align:right\">移动或重命名一个目录</td>\n<td style=\"text-align:center\">mvdir dir1 dir2</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">cd</td>\n<td style=\"text-align:right\">改变当前目录</td>\n<td style=\"text-align:center\">cd dirname</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">pwd</td>\n<td style=\"text-align:right\">显示当前目录的路径名</td>\n<td style=\"text-align:center\">pwd</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ls</td>\n<td style=\"text-align:right\">显示当前目录的内容</td>\n<td style=\"text-align:center\">ls -la</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">dircmp</td>\n<td style=\"text-align:right\">比较两个目录的内容</td>\n<td style=\"text-align:center\">dircmp dir1 dir2</td>\n</tr>\n</tbody>\n</table>","more":"<h4 id=\"2-文件操作\"><a href=\"#2-文件操作\" class=\"headerlink\" title=\"2.文件操作\"></a>2.文件操作</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">命令名</th>\n<th style=\"text-align:right\">功能描述</th>\n<th style=\"text-align:center\">使用举例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">cat</td>\n<td style=\"text-align:right\">显示或连接文件</td>\n<td style=\"text-align:center\">cat filename</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">pg</td>\n<td style=\"text-align:right\">分页格式化显示文件内容</td>\n<td style=\"text-align:center\">pg filename</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">more</td>\n<td style=\"text-align:right\">分屏显示文件内容</td>\n<td style=\"text-align:center\">more filename</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">od</td>\n<td style=\"text-align:right\">显示非文本文件的内容</td>\n<td style=\"text-align:center\">od -c filename</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">cp</td>\n<td style=\"text-align:right\">复制文件或目录</td>\n<td style=\"text-align:center\">cp file1 file2</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">rm</td>\n<td style=\"text-align:right\">删除文件或目录</td>\n<td style=\"text-align:center\">rm filename</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">mv</td>\n<td style=\"text-align:right\">改变文件名或所在目录</td>\n<td style=\"text-align:center\">mv file1 file2</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ln</td>\n<td style=\"text-align:right\">联接文件</td>\n<td style=\"text-align:center\">ln -s file1 file2</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">find</td>\n<td style=\"text-align:right\">使用匹配表达式查找文件</td>\n<td style=\"text-align:center\">find . -name “*.c” -print</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">file</td>\n<td style=\"text-align:right\">显示文件类型</td>\n<td style=\"text-align:center\">file filename</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">open</td>\n<td style=\"text-align:right\">使用默认的程序打开文件</td>\n<td style=\"text-align:center\">open filename</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"3-选择操作\"><a href=\"#3-选择操作\" class=\"headerlink\" title=\"3.选择操作\"></a>3.选择操作</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">命令名</th>\n<th style=\"text-align:right\">功能描述</th>\n<th style=\"text-align:center\">使用举例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">tail</td>\n<td style=\"text-align:right\">显示文件的最后几行</td>\n<td style=\"text-align:center\">tail -15 filename</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">cut</td>\n<td style=\"text-align:right\">显示文件每行中的某些域</td>\n<td style=\"text-align:center\">cut -f1,7 -d: /etc/passwd</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">colrm</td>\n<td style=\"text-align:right\">从标准输入中删除若干列</td>\n<td style=\"text-align:center\">colrm 8 20 file2</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">paste</td>\n<td style=\"text-align:right\">横向连接文件</td>\n<td style=\"text-align:center\">paste file1 file2</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">diff</td>\n<td style=\"text-align:right\">比较并显示两个文件的差异</td>\n<td style=\"text-align:center\">diff file1 file2</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">sed</td>\n<td style=\"text-align:right\">非交互方式流编辑器</td>\n<td style=\"text-align:center\">sed “s/red/green/g” filename</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">grep</td>\n<td style=\"text-align:right\">在文件中按模式查找</td>\n<td style=\"text-align:center\">grep “^[a-zA-Z]” filename</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">awk</td>\n<td style=\"text-align:right\">在文件中查找并处理模式</td>\n<td style=\"text-align:center\">awk ‘{print $1 $1}’ filename</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">sort</td>\n<td style=\"text-align:right\">排序或归并文件</td>\n<td style=\"text-align:center\">sort -d -f -u file1</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">uniq</td>\n<td style=\"text-align:right\">去掉文件中的重复行</td>\n<td style=\"text-align:center\">uniq file1 file2</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">comm</td>\n<td style=\"text-align:right\">显示两有序文件的公共和非公共行</td>\n<td style=\"text-align:center\">comm file1 file2</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">wc</td>\n<td style=\"text-align:right\">统计文件的字符数、词数和行数</td>\n<td style=\"text-align:center\">wc filename</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">nl</td>\n<td style=\"text-align:right\">给文件加上行号</td>\n<td style=\"text-align:center\">nl file1 &gt;file2</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"4-安全操作\"><a href=\"#4-安全操作\" class=\"headerlink\" title=\"4.安全操作\"></a>4.安全操作</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">命令名</th>\n<th style=\"text-align:right\">功能描述</th>\n<th style=\"text-align:center\">使用举例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">passwd</td>\n<td style=\"text-align:right\">修改用户密码</td>\n<td style=\"text-align:center\">passwd</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">chmod</td>\n<td style=\"text-align:right\">改变文件或目录的权限</td>\n<td style=\"text-align:center\">chmod ug+x filename</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">umask</td>\n<td style=\"text-align:right\">定义创建文件的权限掩码</td>\n<td style=\"text-align:center\">umask 027</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">chown</td>\n<td style=\"text-align:right\">改变文件或目录的属主</td>\n<td style=\"text-align:center\">chown newowner filename</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">chgrp</td>\n<td style=\"text-align:right\">改变文件或目录的所属组</td>\n<td style=\"text-align:center\">chgrp staff filename</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">xlock</td>\n<td style=\"text-align:right\">给终端上锁</td>\n<td style=\"text-align:center\">xlock -remote</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"5-编程操作\"><a href=\"#5-编程操作\" class=\"headerlink\" title=\"5.编程操作\"></a>5.编程操作</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">命令名</th>\n<th style=\"text-align:right\">功能描述</th>\n<th style=\"text-align:center\">使用举例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">make</td>\n<td style=\"text-align:right\">维护可执行程序的最新版本</td>\n<td style=\"text-align:center\">make</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">touch</td>\n<td style=\"text-align:right\">更新文件的访问和修改时间</td>\n<td style=\"text-align:center\">touch -m 05202400 filename</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">dbx</td>\n<td style=\"text-align:right\">命令行界面调试工具</td>\n<td style=\"text-align:center\">dbx a.out</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">xde</td>\n<td style=\"text-align:right\">图形用户界面调试工具</td>\n<td style=\"text-align:center\">xde a.out</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"6-进程操作\"><a href=\"#6-进程操作\" class=\"headerlink\" title=\"6.进程操作\"></a>6.进程操作</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">命令名</th>\n<th style=\"text-align:right\">功能描述</th>\n<th style=\"text-align:center\">使用举例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">ps</td>\n<td style=\"text-align:right\">显示进程当前状态</td>\n<td style=\"text-align:center\">ps u</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">kill</td>\n<td style=\"text-align:right\">终止进程</td>\n<td style=\"text-align:center\">kill -9 30142</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">nice</td>\n<td style=\"text-align:right\">改变待执行命令的优先级</td>\n<td style=\"text-align:center\">nice cc -c *.c</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">renice</td>\n<td style=\"text-align:right\">改变已运行进程的优先级</td>\n<td style=\"text-align:center\">renice +20 32768</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"7-时间操作\"><a href=\"#7-时间操作\" class=\"headerlink\" title=\"7.时间操作\"></a>7.时间操作</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">命令名</th>\n<th style=\"text-align:right\">功能描述</th>\n<th style=\"text-align:center\">使用举例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">date</td>\n<td style=\"text-align:right\">显示系统的当前日期和时间</td>\n<td style=\"text-align:center\">date</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">cal</td>\n<td style=\"text-align:right\">显示日历</td>\n<td style=\"text-align:center\">cal 8 1996</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">time</td>\n<td style=\"text-align:right\">统计程序的执行时间</td>\n<td style=\"text-align:center\">time a.out</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"8-网络与通信操作\"><a href=\"#8-网络与通信操作\" class=\"headerlink\" title=\"8.网络与通信操作\"></a>8.网络与通信操作</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">命令名</th>\n<th style=\"text-align:right\">功能描述</th>\n<th style=\"text-align:center\">使用举例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">telnet</td>\n<td style=\"text-align:right\">远程登录</td>\n<td style=\"text-align:center\">telnet hpc.sp.net.edu.cn</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">rlogin</td>\n<td style=\"text-align:right\">远程登录</td>\n<td style=\"text-align:center\">rlogin hostname -l username</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">rsh</td>\n<td style=\"text-align:right\">在远程主机执行指定命令</td>\n<td style=\"text-align:center\">rsh f01n03 date</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ftp</td>\n<td style=\"text-align:right\">在本地主机与远程主机之间传输文件</td>\n<td style=\"text-align:center\">ftp ftp.sp.net.edu.cn</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">rcp</td>\n<td style=\"text-align:right\">在本地主机与远程主机 之间复制文件</td>\n<td style=\"text-align:center\">rcp file1 host1:file2</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ping</td>\n<td style=\"text-align:right\">给一个网络主机发送 回应请求</td>\n<td style=\"text-align:center\">ping hpc.sp.net.edu.cn</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">mail</td>\n<td style=\"text-align:right\">阅读和发送电子邮件</td>\n<td style=\"text-align:center\">mail</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">write</td>\n<td style=\"text-align:right\">给另一用户发送报文</td>\n<td style=\"text-align:center\">write username pts/1</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">mesg</td>\n<td style=\"text-align:right\">允许或拒绝接收报文</td>\n<td style=\"text-align:center\">mesg n</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"9-Korn-Shell-命令\"><a href=\"#9-Korn-Shell-命令\" class=\"headerlink\" title=\"9.Korn Shell 命令\"></a>9.Korn Shell 命令</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">命令名</th>\n<th style=\"text-align:right\">功能描述</th>\n<th style=\"text-align:center\">使用举例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">history</td>\n<td style=\"text-align:right\">列出最近执行过的 几条命令及编号</td>\n<td style=\"text-align:center\">history</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">r</td>\n<td style=\"text-align:right\">重复执行最近执行过的 某条命令</td>\n<td style=\"text-align:center\">r -2</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">alias</td>\n<td style=\"text-align:right\">给某个命令定义别名</td>\n<td style=\"text-align:center\">alias del=rm -i</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">unalias</td>\n<td style=\"text-align:right\">取消对某个别名的定义</td>\n<td style=\"text-align:center\">unalias del</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"10-其它命令\"><a href=\"#10-其它命令\" class=\"headerlink\" title=\"10.其它命令\"></a>10.其它命令</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">命令名</th>\n<th style=\"text-align:right\">功能描述</th>\n<th style=\"text-align:center\">使用举例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">uname</td>\n<td style=\"text-align:right\">显示操作系统的有关信息</td>\n<td style=\"text-align:center\">uname -a</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">clear</td>\n<td style=\"text-align:right\">清除屏幕或窗口内容</td>\n<td style=\"text-align:center\">clear</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">env</td>\n<td style=\"text-align:right\">显示当前所有设置过的环境变量</td>\n<td style=\"text-align:center\">env</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">who</td>\n<td style=\"text-align:right\">列出当前登录的所有用户</td>\n<td style=\"text-align:center\">who</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">whoami</td>\n<td style=\"text-align:right\">显示当前正进行操作的用户名</td>\n<td style=\"text-align:center\">whoami</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">tty</td>\n<td style=\"text-align:right\">显示终端或伪终端的名称</td>\n<td style=\"text-align:center\">tty</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">stty</td>\n<td style=\"text-align:right\">显示或重置控制键定义</td>\n<td style=\"text-align:center\">stty -a</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">du</td>\n<td style=\"text-align:right\">查询磁盘使用情况</td>\n<td style=\"text-align:center\">du -k subdir</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">df</td>\n<td style=\"text-align:right\">显示文件系统的总空间和可用空间</td>\n<td style=\"text-align:center\">df /tmp</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">w</td>\n<td style=\"text-align:right\">显示当前系统活动的总信息</td>\n<td style=\"text-align:center\">w</td>\n</tr>\n</tbody>\n</table>"},{"title":"HTTP、HTTP2.0、SPDY、HTTPS","date":"2017-06-05T09:36:15.000Z","_content":"\n作为一个经常和web打交道的程序员，了解这些协议是必须的，本文就向大家介绍一下这些协议的区别和基本概念，文中可能不局限于前端知识，还包括一些运维，协议方面的知识\n#### 1. web始祖HTTP\n　　全称：超文本传输协议(HyperText Transfer Protocol)\n　　伴随着计算机网络和浏览器的诞生，HTTP1.0也随之而来，处于计算机网络中的应用层。\n　　HTTP是建立在TCP协议之上，所以HTTP协议的瓶颈及其优化技巧都是基于TCP协议本身的特性，例如tcp建立连接的3次握手和断开连接的4次挥手以及每次建立连接带来的RTT延迟时间。\n#### 2. HTTP与现代化浏览器\n　　早在HTTP建立之初，主要就是为了将超文本标记语言(HTML)文档从Web服务器传送到客户端的浏览器。也是说对于前端来说，我们所写的HTML页面将要放在我们的web服务器上，用户端通过浏览器访问url地址来获取网页的显示内容。\n　　但是到了WEB2.0以来，我们的页面变得复杂，不仅仅单纯的是一些简单的文字和图片，同时我们的HTML页面有了CSS，Java，来丰富我们的页面展示。\n　　当ajax的出现，我们又多了一种向服务器端获取数据的方法，这些其实都是基于HTTP协议的。\n　　同样到了移动互联网时代，我们页面可以跑在手机端浏览器里面，但是和PC相比，手机端的网络情况更加复杂，这使得我们开始了不得不对HTTP进行深入理解并不断优化过程中。\n![](http://n1.itc.cn/img8/wb/recom/2016/08/24/147198399719339368.PNG)\n<!--more-->\n　　\n#### 3. HTTP的基本优化\n　　影响一个HTTP网络请求的因素主要有两个：带宽和延迟。\n　　带宽：如果说我们还停留在拨号上网的阶段，带宽可能会成为一个比较严重影响请求的问题，但是现在网络基础建设已经使得带宽得到极大的提升，我们不再会担心由带宽而影响网速，那么就只剩下延迟了。\n　　延迟：\n　　浏览器阻塞（HOL blocking）：浏览器会因为一些原因阻塞请求。浏览器对于同一个域名，同时只能有 4 个连接（这个根据浏览器内核不同可能会有所差异），超过浏览器最大连接数限制，后续请求就会被阻塞。\n　　DNS 查询（DNS Lookup）：浏览器需要知道目标服务器的 IP 才能建立连接。将域名解析为 IP 的这个系统就是 DNS。这个通常可以利用DNS缓存结果来达到减少这个时间的目的。\n　　建立连接（Initial connection）：HTTP 是基于 TCP 协议的，浏览器最快也要在第三次握手时才能捎带 HTTP 请求报文，达到真正的建立连接，但是这些连接无法复用会导致每次请求都经历三次握手和慢启动。三次握手在高延迟的场景下影响较明显，慢启动则对文件类大请求影响较大。\n　　![](http://n1.itc.cn/img8/wb/recom/2016/08/24/147198399760686112.JPEG)\n#### 4. HTTP1.0和HTTP1.1的一些区别\n　　HTTP1.0最早在网页中使用是在1996年，那个时候只是使用一些较为简单的网页上和网络请求上，而HTTP1.1则在1999年才开始广泛应用于现在的各大浏览器网络请求中，同时HTTP1.1也是当前使用最为广泛的HTTP协议。\n　　主要区别主要体现在：\n　　缓存处理，在HTTP1.0中主要使用header里的If-Modified-Since,Expires来做为缓存判断的标准，HTTP1.1则引入了更多的缓存控制策略例如Entity tag，If-Unmodified-Since, If-Match, If-None-Match等更多可供选择的缓存头来控制缓存策略。\n　　带宽优化及网络连接的使用，HTTP1.0中，存在一些浪费带宽的现象，例如客户端只是需要某个对象的一部分，而服务器却将整个对象送过来了，并且不支持断点续传功能，HTTP1.1则在请求头引入了range头域，它允许只请求资源的某个部分，即返回码是206（Partial Content），这样就方便了开发者自由的选择以便于充分利用带宽和连接。\n　　错误通知的管理，在HTTP1.1中新增了24个错误状态响应码，如409（Conflict）表示请求的资源与资源的当前状态发生冲突；410（Gone）表示服务器上的某个资源被永久性的删除。\n　　Host头处理，在HTTP1.0中认为每台服务器都绑定一个唯一的IP地址，因此，请求消息中的URL并没有传递主机名（hostname）。但随着虚拟主机技术的发展，在一台物理服务器上可以存在多个虚拟主机（Multi-homed Web Servers），并且它们共享一个IP地址。HTTP1.1的请求消息和响应消息都应支持Host头域，且请求消息中如果没有Host头域会报告一个错误（400 Bad Request）。\n　　长连接，HTTP 1.1支持长连接（PersistentConnection）和请求的流水线（Pipelining）处理，在一个TCP连接上可以传送多个HTTP请求和响应，减少了建立和关闭连接的消耗和延迟，在HTTP1.1中默认开启Connection： keep-alive，一定程度上弥补了HTTP1.0每次请求都要创建连接的缺点。以下是常见的HTTP1.0：\n　　![](http://n1.itc.cn/img8/wb/recom/2016/08/24/147198399802075762.PNG)\n    ![](http://n1.itc.cn/img8/wb/recom/2016/08/24/147198399842828512.JPEG)\n\n　　区别用一张图来体现：\n![](http://n1.itc.cn/img8/wb/recom/2016/08/24/147198399883354941.PNG)\n　　\n#### 5. HTTP1.0和1.1现存的一些问题\n　　上面提到过的，HTTP1.x在传输数据时，每次都需要重新建立连接，无疑增加了大量的延迟时间，特别是在移动端更为突出。\n　　HTTP1.x在传输数据时，所有传输的内容都是明文，客户端和服务器端都无法验证对方的身份，这在一定程度上无法保证数据的安全性。\n　　HTTP1.x在使用时，header里携带的内容过大，在一定程度上增加了传输的成本，并且每次请求header基本不怎么变化，尤其在移动端增加用户流量。\n　　虽然HTTP1.x支持了keep-alive，来弥补多次创建连接产生的延迟，但是keep-alive使用多了同样会给服务端带来大量的性能压力，并且对于单个文件被不断请求的服务(例如图片存放网站)，keep-alive可能会极大的影响性能，因为它在文件被请求之后还保持了不必要的连接很长时间。\n#### 6. HTTPS应声而出\n　　为了解决以上问题，网景在1994年创建了HTTPS，并应用在网景导航者浏览器中。\n　　最初，HTTPS是与SSL一起使用的；在SSL逐渐演变到TLS时（其实两个是一个东西，只是名字不同而已），最新的HTTPS也由在2000年五月公布的RFC 2818正式确定下来。\n　　简单来说，HTTPS就是安全版的HTTP，并且由于当今时代对安全性要求更高，chrome和firefox都大力支持网站使用HTTPS，苹果也在iOS 10系统中强制app使用HTTPS来传输数据，由此可见HTTPS势在必行。\n#### 7. HTTPS与HTTP的一些区别\n　　HTTPS协议需要到CA申请证书，一般免费证书很少，需要交费。\n　　HTTP协议运行在TCP之上，所有传输的内容都是明文，HTTPS运行在SSL/TLS之上，SSL/TLS运行在TCP之上，所有传输的内容都经过加密的。\n　　HTTP和HTTPS使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。\n　　HTTPS可以有效的防止运营商劫持，解决了防劫持的一个大问题。\n　　![](http://n1.itc.cn/img8/wb/recom/2016/08/24/147198399905751035.PNG)\n#### 8. HTTPS改造\n　　如果一个网站要全站由HTTP替换成HTTPS，可能需要关注以下几点：\n　　安装CA证书，一般的证书都是需要收费的，这边推荐一个比较好的购买证书网站：1）Let's Encrypt，免费，快捷，支持多域名（不是通配符），三条命令即时签署+导出证书。缺点是暂时只有三个月有效期，到期需续签。2Comodo PositiveSSL，收费，但是比较稳定。\n　　在购买证书之后，在证书提供的网站上配置自己的域名，将证书下载下来之后，配置自己的web服务器，同时进行代码改造。\n　　HTTPS 降低用户访问速度。SSL握手，HTTPS 对速度会有一定程度的降低，但是只要经过合理优化和部署，HTTPS 对速度的影响完全可以接受。在很多场景下，HTTPS 速度完全不逊于 HTTP，如果使用 SPDY，HTTPS 的速度甚至还要比 HTTP 快。\n　　相对于HTTPS降低访问速度，其实更需要关心的是服务器端的CPU压力，HTTPS中大量的密钥算法计算，会消耗大量的CPU资源，只有足够的优化，HTTPS 的机器成本才不会明显增加。\n　　推荐一则淘宝网改造HTTPS（http://velocity.oreilly.com.cn/2015/ppts/lizhenyu.pdf）的文章。\n#### 9. 使用SPDY加快你的网站速度\n　　2012年google如一声惊雷提出了SPDY的方案，大家才开始从正面看待和解决老版本HTTP协议本身的问题，SPDY可以说是综合了HTTPS和HTTP两者有点于一体的传输协议， 主要解决：\n　　降低延迟，针对HTTP高延迟的问题，SPDY优雅的采取了多路复用（multiplexing）。多路复用通过多个请求stream共享一个tcp连接的方式，解决了HOL blocking的问题，降低了延迟同时提高了带宽的利用率。\n　　请求优先级（request prioritization）。多路复用带来一个新的问题是，在连接共享的基础之上有可能会导致关键请求被阻塞。SPDY允许给每个request设置优先级，这样重要的请求就会优先得到响应。比如浏览器加载首页，首页的html内容应该优先展示，之后才是各种静态资源文件，脚本文件等加载，这样可以保证用户能第一时间看到网页内容。\n　　header压缩。前面提到HTTP1.x的header很多时候都是重复多余的。选择合适的压缩算法可以减小包的大小和数量。\n　　基于HTTPS的加密协议传输，大大提高了传输数据的可靠性。\n　　服务端推送（server push），采用了SPDY的网页，例如我的网页有一个sytle.css的请求，在客户端收到sytle.css数据的同时，服务端会将sytle.js的文件推送给客户端，当客户端再次尝试获取sytle.js时就可以直接从缓存中获取到，不用再发请求了。SPDY构成图：\n　　![](http://n1.itc.cn/img8/wb/recom/2016/08/24/147198399925596893.PNG)\n　　SPDY位于HTTP之下，TCP和SSL之上，这样可以轻松兼容老版本的HTTP协议(将HTTP1.x的内容封装成一种新的frame格式)，同时可以使用已有的SSL功能。\n　　兼容性：\n　　![](http://n1.itc.cn/img8/wb/recom/2016/08/24/147198399943879010.JPEG)\n#### 10. HTTP2.0的前世今生\n　　顾名思义有了HTTP1.x，那么HTTP2.0也就顺理成章的出现了。\n　　HTTP2.0可以说是SPDY的升级版（其实原本也是基于SPDY设计的），但是，HTTP2.0 跟 SPDY 仍有不同的地方，主要是以下两点：\n　　HTTP2.0 支持明文 HTTP 传输，而 SPDY 强制使用 HTTPS\n　　HTTP2.0 消息头的压缩算法采用 HPACK，而非 SPDY 采用的 DEFLATE\n#### 11. HTTP2.0的新特性\n　　新的二进制格式（Binary Format），HTTP1.x的解析是基于文本。基于文本协议的格式解析存在天然缺陷，文本的表现形式有多样性，要做到健壮性考虑的场景必然很多，二进制则不同，只认0和1的组合。基于这种考虑HTTP2.0的协议解析决定采用二进制格式，实现方便且健壮。\n　　多路复用（MultiPlexing），即连接共享，即每一个request都是是用作连接共享机制的。一个request对应一个id，这样一个连接上可以有多个request，每个连接的request可以随机的混杂在一起，接收方可以根据request的 id将request再归属到各自不同的服务端请求里面。多路复用原理图：\n　　![](http://n1.itc.cn/img8/wb/recom/2016/08/24/147198399964083298.JPEG)\n　　header压缩，如上文中所言，对前面提到过HTTP1.x的header带有大量信息，而且每次都要重复发送，HTTP2.0使用encoder来减少需要传输的header大小，通讯双方各自cache一份header fields表，既避免了重复header的传输，又减小了需要传输的大小。\n　　服务端推送（server push），同SPDY一样，HTTP2.0也具有server push功能。目前，有大多数网站已经启用HTTP2.0，例如YouTuBe，淘宝网等网站，利用chrome控制台可以查看是否启用H2：\n　　![](http://n1.itc.cn/img8/wb/recom/2016/08/24/147198399979177828.JPEG)\n　　更多关于HTTP2的问题可以参考：HTTP2奇妙日常（http://www.alloyteam.com/2015/03/http2-0-di-qi-miao-ri-chang/），以及HTTP2.0的官方网站。\n　　关于HTTP2和HTTP1.x的区别大致可以看下图：\n　　![](http://n1.itc.cn/img8/wb/recom/2016/08/24/147198399994994553.PNG)\n#### 12. HTTP2.0的升级改造\n　　对比HTTPS的升级改造，HTTP2.0或许会稍微简单一些，你可能需要关注以下问题：\n　　前文说了HTTP2.0其实可以支持非HTTPS的，但是现在主流的浏览器像chrome，firefox表示还是只支持基于 TLS 部署的HTTP2.0协议，所以要想升级成HTTP2.0还是先升级HTTPS为好。\n　　当你的网站已经升级HTTPS之后，那么升级HTTP2.0就简单很多，如果你使用NGINX，只要在配置文件中启动相应的协议就可以了，可以参考NGINX白皮书，NGINX配置HTTP2.0官方指南。\n　　使用了HTTP2.0那么，原本的HTTP1.x怎么办，这个问题其实不用担心，HTTP2.0完全兼容HTTP1.x的语义，对于不支持HTTP2.0的浏览器，NGINX会自动向下兼容的。\n　　后记\n　　以上就是关于HTTP,HTTP2.0,SPDY,HTTPS的一些基本理论，有些内容没有深入讲解，大家可以跟进参考连接具体查看。\n　　关于HTTP1.x的一些优化方式，例如文件合并压缩，资源cdn，js，css优化等等同样使用与HTTP2.0和HTTPS，所以web前端的优化，还是要继续进行。\n　　其实WEB发展如此迅速的今天，有些技术是真的要与时俱进的，就像苹果宣布ios 10必须使用HTTPS开始，关于web协议革新就已经开始了，为了更好的性能，更优越的方式，现在就开始升级改造吧\n　　参考资料：\n　　http://www.nihaoshijie.com.cn/index.PHP/archives/630\n　　https://www.nginx.com/blog/7-tips-for-faster-http2-performance/\n　　https://www.gitbook.com/book/ye11ow/http2-explained/details\n　　http://op.baidu.com/2015/04/https-s01a01/\n","source":"_posts/HTTP、HTTP2-0、SPDY、HTTPS.md","raw":"---\ntitle: HTTP、HTTP2.0、SPDY、HTTPS\ntags:\n  - '前端'\ncategories:\n  - '前端'\n  - '知识点'\ndate: 2017-06-05 17:36:15\n---\n\n作为一个经常和web打交道的程序员，了解这些协议是必须的，本文就向大家介绍一下这些协议的区别和基本概念，文中可能不局限于前端知识，还包括一些运维，协议方面的知识\n#### 1. web始祖HTTP\n　　全称：超文本传输协议(HyperText Transfer Protocol)\n　　伴随着计算机网络和浏览器的诞生，HTTP1.0也随之而来，处于计算机网络中的应用层。\n　　HTTP是建立在TCP协议之上，所以HTTP协议的瓶颈及其优化技巧都是基于TCP协议本身的特性，例如tcp建立连接的3次握手和断开连接的4次挥手以及每次建立连接带来的RTT延迟时间。\n#### 2. HTTP与现代化浏览器\n　　早在HTTP建立之初，主要就是为了将超文本标记语言(HTML)文档从Web服务器传送到客户端的浏览器。也是说对于前端来说，我们所写的HTML页面将要放在我们的web服务器上，用户端通过浏览器访问url地址来获取网页的显示内容。\n　　但是到了WEB2.0以来，我们的页面变得复杂，不仅仅单纯的是一些简单的文字和图片，同时我们的HTML页面有了CSS，Java，来丰富我们的页面展示。\n　　当ajax的出现，我们又多了一种向服务器端获取数据的方法，这些其实都是基于HTTP协议的。\n　　同样到了移动互联网时代，我们页面可以跑在手机端浏览器里面，但是和PC相比，手机端的网络情况更加复杂，这使得我们开始了不得不对HTTP进行深入理解并不断优化过程中。\n![](http://n1.itc.cn/img8/wb/recom/2016/08/24/147198399719339368.PNG)\n<!--more-->\n　　\n#### 3. HTTP的基本优化\n　　影响一个HTTP网络请求的因素主要有两个：带宽和延迟。\n　　带宽：如果说我们还停留在拨号上网的阶段，带宽可能会成为一个比较严重影响请求的问题，但是现在网络基础建设已经使得带宽得到极大的提升，我们不再会担心由带宽而影响网速，那么就只剩下延迟了。\n　　延迟：\n　　浏览器阻塞（HOL blocking）：浏览器会因为一些原因阻塞请求。浏览器对于同一个域名，同时只能有 4 个连接（这个根据浏览器内核不同可能会有所差异），超过浏览器最大连接数限制，后续请求就会被阻塞。\n　　DNS 查询（DNS Lookup）：浏览器需要知道目标服务器的 IP 才能建立连接。将域名解析为 IP 的这个系统就是 DNS。这个通常可以利用DNS缓存结果来达到减少这个时间的目的。\n　　建立连接（Initial connection）：HTTP 是基于 TCP 协议的，浏览器最快也要在第三次握手时才能捎带 HTTP 请求报文，达到真正的建立连接，但是这些连接无法复用会导致每次请求都经历三次握手和慢启动。三次握手在高延迟的场景下影响较明显，慢启动则对文件类大请求影响较大。\n　　![](http://n1.itc.cn/img8/wb/recom/2016/08/24/147198399760686112.JPEG)\n#### 4. HTTP1.0和HTTP1.1的一些区别\n　　HTTP1.0最早在网页中使用是在1996年，那个时候只是使用一些较为简单的网页上和网络请求上，而HTTP1.1则在1999年才开始广泛应用于现在的各大浏览器网络请求中，同时HTTP1.1也是当前使用最为广泛的HTTP协议。\n　　主要区别主要体现在：\n　　缓存处理，在HTTP1.0中主要使用header里的If-Modified-Since,Expires来做为缓存判断的标准，HTTP1.1则引入了更多的缓存控制策略例如Entity tag，If-Unmodified-Since, If-Match, If-None-Match等更多可供选择的缓存头来控制缓存策略。\n　　带宽优化及网络连接的使用，HTTP1.0中，存在一些浪费带宽的现象，例如客户端只是需要某个对象的一部分，而服务器却将整个对象送过来了，并且不支持断点续传功能，HTTP1.1则在请求头引入了range头域，它允许只请求资源的某个部分，即返回码是206（Partial Content），这样就方便了开发者自由的选择以便于充分利用带宽和连接。\n　　错误通知的管理，在HTTP1.1中新增了24个错误状态响应码，如409（Conflict）表示请求的资源与资源的当前状态发生冲突；410（Gone）表示服务器上的某个资源被永久性的删除。\n　　Host头处理，在HTTP1.0中认为每台服务器都绑定一个唯一的IP地址，因此，请求消息中的URL并没有传递主机名（hostname）。但随着虚拟主机技术的发展，在一台物理服务器上可以存在多个虚拟主机（Multi-homed Web Servers），并且它们共享一个IP地址。HTTP1.1的请求消息和响应消息都应支持Host头域，且请求消息中如果没有Host头域会报告一个错误（400 Bad Request）。\n　　长连接，HTTP 1.1支持长连接（PersistentConnection）和请求的流水线（Pipelining）处理，在一个TCP连接上可以传送多个HTTP请求和响应，减少了建立和关闭连接的消耗和延迟，在HTTP1.1中默认开启Connection： keep-alive，一定程度上弥补了HTTP1.0每次请求都要创建连接的缺点。以下是常见的HTTP1.0：\n　　![](http://n1.itc.cn/img8/wb/recom/2016/08/24/147198399802075762.PNG)\n    ![](http://n1.itc.cn/img8/wb/recom/2016/08/24/147198399842828512.JPEG)\n\n　　区别用一张图来体现：\n![](http://n1.itc.cn/img8/wb/recom/2016/08/24/147198399883354941.PNG)\n　　\n#### 5. HTTP1.0和1.1现存的一些问题\n　　上面提到过的，HTTP1.x在传输数据时，每次都需要重新建立连接，无疑增加了大量的延迟时间，特别是在移动端更为突出。\n　　HTTP1.x在传输数据时，所有传输的内容都是明文，客户端和服务器端都无法验证对方的身份，这在一定程度上无法保证数据的安全性。\n　　HTTP1.x在使用时，header里携带的内容过大，在一定程度上增加了传输的成本，并且每次请求header基本不怎么变化，尤其在移动端增加用户流量。\n　　虽然HTTP1.x支持了keep-alive，来弥补多次创建连接产生的延迟，但是keep-alive使用多了同样会给服务端带来大量的性能压力，并且对于单个文件被不断请求的服务(例如图片存放网站)，keep-alive可能会极大的影响性能，因为它在文件被请求之后还保持了不必要的连接很长时间。\n#### 6. HTTPS应声而出\n　　为了解决以上问题，网景在1994年创建了HTTPS，并应用在网景导航者浏览器中。\n　　最初，HTTPS是与SSL一起使用的；在SSL逐渐演变到TLS时（其实两个是一个东西，只是名字不同而已），最新的HTTPS也由在2000年五月公布的RFC 2818正式确定下来。\n　　简单来说，HTTPS就是安全版的HTTP，并且由于当今时代对安全性要求更高，chrome和firefox都大力支持网站使用HTTPS，苹果也在iOS 10系统中强制app使用HTTPS来传输数据，由此可见HTTPS势在必行。\n#### 7. HTTPS与HTTP的一些区别\n　　HTTPS协议需要到CA申请证书，一般免费证书很少，需要交费。\n　　HTTP协议运行在TCP之上，所有传输的内容都是明文，HTTPS运行在SSL/TLS之上，SSL/TLS运行在TCP之上，所有传输的内容都经过加密的。\n　　HTTP和HTTPS使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。\n　　HTTPS可以有效的防止运营商劫持，解决了防劫持的一个大问题。\n　　![](http://n1.itc.cn/img8/wb/recom/2016/08/24/147198399905751035.PNG)\n#### 8. HTTPS改造\n　　如果一个网站要全站由HTTP替换成HTTPS，可能需要关注以下几点：\n　　安装CA证书，一般的证书都是需要收费的，这边推荐一个比较好的购买证书网站：1）Let's Encrypt，免费，快捷，支持多域名（不是通配符），三条命令即时签署+导出证书。缺点是暂时只有三个月有效期，到期需续签。2Comodo PositiveSSL，收费，但是比较稳定。\n　　在购买证书之后，在证书提供的网站上配置自己的域名，将证书下载下来之后，配置自己的web服务器，同时进行代码改造。\n　　HTTPS 降低用户访问速度。SSL握手，HTTPS 对速度会有一定程度的降低，但是只要经过合理优化和部署，HTTPS 对速度的影响完全可以接受。在很多场景下，HTTPS 速度完全不逊于 HTTP，如果使用 SPDY，HTTPS 的速度甚至还要比 HTTP 快。\n　　相对于HTTPS降低访问速度，其实更需要关心的是服务器端的CPU压力，HTTPS中大量的密钥算法计算，会消耗大量的CPU资源，只有足够的优化，HTTPS 的机器成本才不会明显增加。\n　　推荐一则淘宝网改造HTTPS（http://velocity.oreilly.com.cn/2015/ppts/lizhenyu.pdf）的文章。\n#### 9. 使用SPDY加快你的网站速度\n　　2012年google如一声惊雷提出了SPDY的方案，大家才开始从正面看待和解决老版本HTTP协议本身的问题，SPDY可以说是综合了HTTPS和HTTP两者有点于一体的传输协议， 主要解决：\n　　降低延迟，针对HTTP高延迟的问题，SPDY优雅的采取了多路复用（multiplexing）。多路复用通过多个请求stream共享一个tcp连接的方式，解决了HOL blocking的问题，降低了延迟同时提高了带宽的利用率。\n　　请求优先级（request prioritization）。多路复用带来一个新的问题是，在连接共享的基础之上有可能会导致关键请求被阻塞。SPDY允许给每个request设置优先级，这样重要的请求就会优先得到响应。比如浏览器加载首页，首页的html内容应该优先展示，之后才是各种静态资源文件，脚本文件等加载，这样可以保证用户能第一时间看到网页内容。\n　　header压缩。前面提到HTTP1.x的header很多时候都是重复多余的。选择合适的压缩算法可以减小包的大小和数量。\n　　基于HTTPS的加密协议传输，大大提高了传输数据的可靠性。\n　　服务端推送（server push），采用了SPDY的网页，例如我的网页有一个sytle.css的请求，在客户端收到sytle.css数据的同时，服务端会将sytle.js的文件推送给客户端，当客户端再次尝试获取sytle.js时就可以直接从缓存中获取到，不用再发请求了。SPDY构成图：\n　　![](http://n1.itc.cn/img8/wb/recom/2016/08/24/147198399925596893.PNG)\n　　SPDY位于HTTP之下，TCP和SSL之上，这样可以轻松兼容老版本的HTTP协议(将HTTP1.x的内容封装成一种新的frame格式)，同时可以使用已有的SSL功能。\n　　兼容性：\n　　![](http://n1.itc.cn/img8/wb/recom/2016/08/24/147198399943879010.JPEG)\n#### 10. HTTP2.0的前世今生\n　　顾名思义有了HTTP1.x，那么HTTP2.0也就顺理成章的出现了。\n　　HTTP2.0可以说是SPDY的升级版（其实原本也是基于SPDY设计的），但是，HTTP2.0 跟 SPDY 仍有不同的地方，主要是以下两点：\n　　HTTP2.0 支持明文 HTTP 传输，而 SPDY 强制使用 HTTPS\n　　HTTP2.0 消息头的压缩算法采用 HPACK，而非 SPDY 采用的 DEFLATE\n#### 11. HTTP2.0的新特性\n　　新的二进制格式（Binary Format），HTTP1.x的解析是基于文本。基于文本协议的格式解析存在天然缺陷，文本的表现形式有多样性，要做到健壮性考虑的场景必然很多，二进制则不同，只认0和1的组合。基于这种考虑HTTP2.0的协议解析决定采用二进制格式，实现方便且健壮。\n　　多路复用（MultiPlexing），即连接共享，即每一个request都是是用作连接共享机制的。一个request对应一个id，这样一个连接上可以有多个request，每个连接的request可以随机的混杂在一起，接收方可以根据request的 id将request再归属到各自不同的服务端请求里面。多路复用原理图：\n　　![](http://n1.itc.cn/img8/wb/recom/2016/08/24/147198399964083298.JPEG)\n　　header压缩，如上文中所言，对前面提到过HTTP1.x的header带有大量信息，而且每次都要重复发送，HTTP2.0使用encoder来减少需要传输的header大小，通讯双方各自cache一份header fields表，既避免了重复header的传输，又减小了需要传输的大小。\n　　服务端推送（server push），同SPDY一样，HTTP2.0也具有server push功能。目前，有大多数网站已经启用HTTP2.0，例如YouTuBe，淘宝网等网站，利用chrome控制台可以查看是否启用H2：\n　　![](http://n1.itc.cn/img8/wb/recom/2016/08/24/147198399979177828.JPEG)\n　　更多关于HTTP2的问题可以参考：HTTP2奇妙日常（http://www.alloyteam.com/2015/03/http2-0-di-qi-miao-ri-chang/），以及HTTP2.0的官方网站。\n　　关于HTTP2和HTTP1.x的区别大致可以看下图：\n　　![](http://n1.itc.cn/img8/wb/recom/2016/08/24/147198399994994553.PNG)\n#### 12. HTTP2.0的升级改造\n　　对比HTTPS的升级改造，HTTP2.0或许会稍微简单一些，你可能需要关注以下问题：\n　　前文说了HTTP2.0其实可以支持非HTTPS的，但是现在主流的浏览器像chrome，firefox表示还是只支持基于 TLS 部署的HTTP2.0协议，所以要想升级成HTTP2.0还是先升级HTTPS为好。\n　　当你的网站已经升级HTTPS之后，那么升级HTTP2.0就简单很多，如果你使用NGINX，只要在配置文件中启动相应的协议就可以了，可以参考NGINX白皮书，NGINX配置HTTP2.0官方指南。\n　　使用了HTTP2.0那么，原本的HTTP1.x怎么办，这个问题其实不用担心，HTTP2.0完全兼容HTTP1.x的语义，对于不支持HTTP2.0的浏览器，NGINX会自动向下兼容的。\n　　后记\n　　以上就是关于HTTP,HTTP2.0,SPDY,HTTPS的一些基本理论，有些内容没有深入讲解，大家可以跟进参考连接具体查看。\n　　关于HTTP1.x的一些优化方式，例如文件合并压缩，资源cdn，js，css优化等等同样使用与HTTP2.0和HTTPS，所以web前端的优化，还是要继续进行。\n　　其实WEB发展如此迅速的今天，有些技术是真的要与时俱进的，就像苹果宣布ios 10必须使用HTTPS开始，关于web协议革新就已经开始了，为了更好的性能，更优越的方式，现在就开始升级改造吧\n　　参考资料：\n　　http://www.nihaoshijie.com.cn/index.PHP/archives/630\n　　https://www.nginx.com/blog/7-tips-for-faster-http2-performance/\n　　https://www.gitbook.com/book/ye11ow/http2-explained/details\n　　http://op.baidu.com/2015/04/https-s01a01/\n","slug":"HTTP、HTTP2-0、SPDY、HTTPS","published":1,"updated":"2017-06-11T02:44:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5naxw3l0006fcxeopfo7vuy","content":"<p>作为一个经常和web打交道的程序员，了解这些协议是必须的，本文就向大家介绍一下这些协议的区别和基本概念，文中可能不局限于前端知识，还包括一些运维，协议方面的知识</p>\n<h4 id=\"1-web始祖HTTP\"><a href=\"#1-web始祖HTTP\" class=\"headerlink\" title=\"1. web始祖HTTP\"></a>1. web始祖HTTP</h4><p>　　全称：超文本传输协议(HyperText Transfer Protocol)<br>　　伴随着计算机网络和浏览器的诞生，HTTP1.0也随之而来，处于计算机网络中的应用层。<br>　　HTTP是建立在TCP协议之上，所以HTTP协议的瓶颈及其优化技巧都是基于TCP协议本身的特性，例如tcp建立连接的3次握手和断开连接的4次挥手以及每次建立连接带来的RTT延迟时间。</p>\n<h4 id=\"2-HTTP与现代化浏览器\"><a href=\"#2-HTTP与现代化浏览器\" class=\"headerlink\" title=\"2. HTTP与现代化浏览器\"></a>2. HTTP与现代化浏览器</h4><p>　　早在HTTP建立之初，主要就是为了将超文本标记语言(HTML)文档从Web服务器传送到客户端的浏览器。也是说对于前端来说，我们所写的HTML页面将要放在我们的web服务器上，用户端通过浏览器访问url地址来获取网页的显示内容。<br>　　但是到了WEB2.0以来，我们的页面变得复杂，不仅仅单纯的是一些简单的文字和图片，同时我们的HTML页面有了CSS，Java，来丰富我们的页面展示。<br>　　当ajax的出现，我们又多了一种向服务器端获取数据的方法，这些其实都是基于HTTP协议的。<br>　　同样到了移动互联网时代，我们页面可以跑在手机端浏览器里面，但是和PC相比，手机端的网络情况更加复杂，这使得我们开始了不得不对HTTP进行深入理解并不断优化过程中。<br><img src=\"http://n1.itc.cn/img8/wb/recom/2016/08/24/147198399719339368.PNG\" alt=\"\"><br><a id=\"more\"></a>\n　　</p>\n<h4 id=\"3-HTTP的基本优化\"><a href=\"#3-HTTP的基本优化\" class=\"headerlink\" title=\"3. HTTP的基本优化\"></a>3. HTTP的基本优化</h4><p>　　影响一个HTTP网络请求的因素主要有两个：带宽和延迟。<br>　　带宽：如果说我们还停留在拨号上网的阶段，带宽可能会成为一个比较严重影响请求的问题，但是现在网络基础建设已经使得带宽得到极大的提升，我们不再会担心由带宽而影响网速，那么就只剩下延迟了。<br>　　延迟：<br>　　浏览器阻塞（HOL blocking）：浏览器会因为一些原因阻塞请求。浏览器对于同一个域名，同时只能有 4 个连接（这个根据浏览器内核不同可能会有所差异），超过浏览器最大连接数限制，后续请求就会被阻塞。<br>　　DNS 查询（DNS Lookup）：浏览器需要知道目标服务器的 IP 才能建立连接。将域名解析为 IP 的这个系统就是 DNS。这个通常可以利用DNS缓存结果来达到减少这个时间的目的。<br>　　建立连接（Initial connection）：HTTP 是基于 TCP 协议的，浏览器最快也要在第三次握手时才能捎带 HTTP 请求报文，达到真正的建立连接，但是这些连接无法复用会导致每次请求都经历三次握手和慢启动。三次握手在高延迟的场景下影响较明显，慢启动则对文件类大请求影响较大。<br>　　<img src=\"http://n1.itc.cn/img8/wb/recom/2016/08/24/147198399760686112.JPEG\" alt=\"\"></p>\n<h4 id=\"4-HTTP1-0和HTTP1-1的一些区别\"><a href=\"#4-HTTP1-0和HTTP1-1的一些区别\" class=\"headerlink\" title=\"4. HTTP1.0和HTTP1.1的一些区别\"></a>4. HTTP1.0和HTTP1.1的一些区别</h4><p>　　HTTP1.0最早在网页中使用是在1996年，那个时候只是使用一些较为简单的网页上和网络请求上，而HTTP1.1则在1999年才开始广泛应用于现在的各大浏览器网络请求中，同时HTTP1.1也是当前使用最为广泛的HTTP协议。<br>　　主要区别主要体现在：<br>　　缓存处理，在HTTP1.0中主要使用header里的If-Modified-Since,Expires来做为缓存判断的标准，HTTP1.1则引入了更多的缓存控制策略例如Entity tag，If-Unmodified-Since, If-Match, If-None-Match等更多可供选择的缓存头来控制缓存策略。<br>　　带宽优化及网络连接的使用，HTTP1.0中，存在一些浪费带宽的现象，例如客户端只是需要某个对象的一部分，而服务器却将整个对象送过来了，并且不支持断点续传功能，HTTP1.1则在请求头引入了range头域，它允许只请求资源的某个部分，即返回码是206（Partial Content），这样就方便了开发者自由的选择以便于充分利用带宽和连接。<br>　　错误通知的管理，在HTTP1.1中新增了24个错误状态响应码，如409（Conflict）表示请求的资源与资源的当前状态发生冲突；410（Gone）表示服务器上的某个资源被永久性的删除。<br>　　Host头处理，在HTTP1.0中认为每台服务器都绑定一个唯一的IP地址，因此，请求消息中的URL并没有传递主机名（hostname）。但随着虚拟主机技术的发展，在一台物理服务器上可以存在多个虚拟主机（Multi-homed Web Servers），并且它们共享一个IP地址。HTTP1.1的请求消息和响应消息都应支持Host头域，且请求消息中如果没有Host头域会报告一个错误（400 Bad Request）。<br>　　长连接，HTTP 1.1支持长连接（PersistentConnection）和请求的流水线（Pipelining）处理，在一个TCP连接上可以传送多个HTTP请求和响应，减少了建立和关闭连接的消耗和延迟，在HTTP1.1中默认开启Connection： keep-alive，一定程度上弥补了HTTP1.0每次请求都要创建连接的缺点。以下是常见的HTTP1.0：<br>　　<img src=\"http://n1.itc.cn/img8/wb/recom/2016/08/24/147198399802075762.PNG\" alt=\"\"><br>    <img src=\"http://n1.itc.cn/img8/wb/recom/2016/08/24/147198399842828512.JPEG\" alt=\"\"></p>\n<p>　　区别用一张图来体现：<br><img src=\"http://n1.itc.cn/img8/wb/recom/2016/08/24/147198399883354941.PNG\" alt=\"\">\n　　</p>\n<h4 id=\"5-HTTP1-0和1-1现存的一些问题\"><a href=\"#5-HTTP1-0和1-1现存的一些问题\" class=\"headerlink\" title=\"5. HTTP1.0和1.1现存的一些问题\"></a>5. HTTP1.0和1.1现存的一些问题</h4><p>　　上面提到过的，HTTP1.x在传输数据时，每次都需要重新建立连接，无疑增加了大量的延迟时间，特别是在移动端更为突出。<br>　　HTTP1.x在传输数据时，所有传输的内容都是明文，客户端和服务器端都无法验证对方的身份，这在一定程度上无法保证数据的安全性。<br>　　HTTP1.x在使用时，header里携带的内容过大，在一定程度上增加了传输的成本，并且每次请求header基本不怎么变化，尤其在移动端增加用户流量。<br>　　虽然HTTP1.x支持了keep-alive，来弥补多次创建连接产生的延迟，但是keep-alive使用多了同样会给服务端带来大量的性能压力，并且对于单个文件被不断请求的服务(例如图片存放网站)，keep-alive可能会极大的影响性能，因为它在文件被请求之后还保持了不必要的连接很长时间。</p>\n<h4 id=\"6-HTTPS应声而出\"><a href=\"#6-HTTPS应声而出\" class=\"headerlink\" title=\"6. HTTPS应声而出\"></a>6. HTTPS应声而出</h4><p>　　为了解决以上问题，网景在1994年创建了HTTPS，并应用在网景导航者浏览器中。<br>　　最初，HTTPS是与SSL一起使用的；在SSL逐渐演变到TLS时（其实两个是一个东西，只是名字不同而已），最新的HTTPS也由在2000年五月公布的RFC 2818正式确定下来。<br>　　简单来说，HTTPS就是安全版的HTTP，并且由于当今时代对安全性要求更高，chrome和firefox都大力支持网站使用HTTPS，苹果也在iOS 10系统中强制app使用HTTPS来传输数据，由此可见HTTPS势在必行。</p>\n<h4 id=\"7-HTTPS与HTTP的一些区别\"><a href=\"#7-HTTPS与HTTP的一些区别\" class=\"headerlink\" title=\"7. HTTPS与HTTP的一些区别\"></a>7. HTTPS与HTTP的一些区别</h4><p>　　HTTPS协议需要到CA申请证书，一般免费证书很少，需要交费。<br>　　HTTP协议运行在TCP之上，所有传输的内容都是明文，HTTPS运行在SSL/TLS之上，SSL/TLS运行在TCP之上，所有传输的内容都经过加密的。<br>　　HTTP和HTTPS使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。<br>　　HTTPS可以有效的防止运营商劫持，解决了防劫持的一个大问题。<br>　　<img src=\"http://n1.itc.cn/img8/wb/recom/2016/08/24/147198399905751035.PNG\" alt=\"\"></p>\n<h4 id=\"8-HTTPS改造\"><a href=\"#8-HTTPS改造\" class=\"headerlink\" title=\"8. HTTPS改造\"></a>8. HTTPS改造</h4><p>　　如果一个网站要全站由HTTP替换成HTTPS，可能需要关注以下几点：<br>　　安装CA证书，一般的证书都是需要收费的，这边推荐一个比较好的购买证书网站：1）Let’s Encrypt，免费，快捷，支持多域名（不是通配符），三条命令即时签署+导出证书。缺点是暂时只有三个月有效期，到期需续签。2Comodo PositiveSSL，收费，但是比较稳定。<br>　　在购买证书之后，在证书提供的网站上配置自己的域名，将证书下载下来之后，配置自己的web服务器，同时进行代码改造。<br>　　HTTPS 降低用户访问速度。SSL握手，HTTPS 对速度会有一定程度的降低，但是只要经过合理优化和部署，HTTPS 对速度的影响完全可以接受。在很多场景下，HTTPS 速度完全不逊于 HTTP，如果使用 SPDY，HTTPS 的速度甚至还要比 HTTP 快。<br>　　相对于HTTPS降低访问速度，其实更需要关心的是服务器端的CPU压力，HTTPS中大量的密钥算法计算，会消耗大量的CPU资源，只有足够的优化，HTTPS 的机器成本才不会明显增加。<br>　　推荐一则淘宝网改造HTTPS（<a href=\"http://velocity.oreilly.com.cn/2015/ppts/lizhenyu.pdf）的文章。\" target=\"_blank\" rel=\"external\">http://velocity.oreilly.com.cn/2015/ppts/lizhenyu.pdf）的文章。</a></p>\n<h4 id=\"9-使用SPDY加快你的网站速度\"><a href=\"#9-使用SPDY加快你的网站速度\" class=\"headerlink\" title=\"9. 使用SPDY加快你的网站速度\"></a>9. 使用SPDY加快你的网站速度</h4><p>　　2012年google如一声惊雷提出了SPDY的方案，大家才开始从正面看待和解决老版本HTTP协议本身的问题，SPDY可以说是综合了HTTPS和HTTP两者有点于一体的传输协议， 主要解决：<br>　　降低延迟，针对HTTP高延迟的问题，SPDY优雅的采取了多路复用（multiplexing）。多路复用通过多个请求stream共享一个tcp连接的方式，解决了HOL blocking的问题，降低了延迟同时提高了带宽的利用率。<br>　　请求优先级（request prioritization）。多路复用带来一个新的问题是，在连接共享的基础之上有可能会导致关键请求被阻塞。SPDY允许给每个request设置优先级，这样重要的请求就会优先得到响应。比如浏览器加载首页，首页的html内容应该优先展示，之后才是各种静态资源文件，脚本文件等加载，这样可以保证用户能第一时间看到网页内容。<br>　　header压缩。前面提到HTTP1.x的header很多时候都是重复多余的。选择合适的压缩算法可以减小包的大小和数量。<br>　　基于HTTPS的加密协议传输，大大提高了传输数据的可靠性。<br>　　服务端推送（server push），采用了SPDY的网页，例如我的网页有一个sytle.css的请求，在客户端收到sytle.css数据的同时，服务端会将sytle.js的文件推送给客户端，当客户端再次尝试获取sytle.js时就可以直接从缓存中获取到，不用再发请求了。SPDY构成图：<br>　　<img src=\"http://n1.itc.cn/img8/wb/recom/2016/08/24/147198399925596893.PNG\" alt=\"\"><br>　　SPDY位于HTTP之下，TCP和SSL之上，这样可以轻松兼容老版本的HTTP协议(将HTTP1.x的内容封装成一种新的frame格式)，同时可以使用已有的SSL功能。<br>　　兼容性：<br>　　<img src=\"http://n1.itc.cn/img8/wb/recom/2016/08/24/147198399943879010.JPEG\" alt=\"\"></p>\n<h4 id=\"10-HTTP2-0的前世今生\"><a href=\"#10-HTTP2-0的前世今生\" class=\"headerlink\" title=\"10. HTTP2.0的前世今生\"></a>10. HTTP2.0的前世今生</h4><p>　　顾名思义有了HTTP1.x，那么HTTP2.0也就顺理成章的出现了。<br>　　HTTP2.0可以说是SPDY的升级版（其实原本也是基于SPDY设计的），但是，HTTP2.0 跟 SPDY 仍有不同的地方，主要是以下两点：<br>　　HTTP2.0 支持明文 HTTP 传输，而 SPDY 强制使用 HTTPS<br>　　HTTP2.0 消息头的压缩算法采用 HPACK，而非 SPDY 采用的 DEFLATE</p>\n<h4 id=\"11-HTTP2-0的新特性\"><a href=\"#11-HTTP2-0的新特性\" class=\"headerlink\" title=\"11. HTTP2.0的新特性\"></a>11. HTTP2.0的新特性</h4><p>　　新的二进制格式（Binary Format），HTTP1.x的解析是基于文本。基于文本协议的格式解析存在天然缺陷，文本的表现形式有多样性，要做到健壮性考虑的场景必然很多，二进制则不同，只认0和1的组合。基于这种考虑HTTP2.0的协议解析决定采用二进制格式，实现方便且健壮。<br>　　多路复用（MultiPlexing），即连接共享，即每一个request都是是用作连接共享机制的。一个request对应一个id，这样一个连接上可以有多个request，每个连接的request可以随机的混杂在一起，接收方可以根据request的 id将request再归属到各自不同的服务端请求里面。多路复用原理图：<br>　　<img src=\"http://n1.itc.cn/img8/wb/recom/2016/08/24/147198399964083298.JPEG\" alt=\"\"><br>　　header压缩，如上文中所言，对前面提到过HTTP1.x的header带有大量信息，而且每次都要重复发送，HTTP2.0使用encoder来减少需要传输的header大小，通讯双方各自cache一份header fields表，既避免了重复header的传输，又减小了需要传输的大小。<br>　　服务端推送（server push），同SPDY一样，HTTP2.0也具有server push功能。目前，有大多数网站已经启用HTTP2.0，例如YouTuBe，淘宝网等网站，利用chrome控制台可以查看是否启用H2：<br>　　<img src=\"http://n1.itc.cn/img8/wb/recom/2016/08/24/147198399979177828.JPEG\" alt=\"\"><br>　　更多关于HTTP2的问题可以参考：HTTP2奇妙日常（<a href=\"http://www.alloyteam.com/2015/03/http2-0-di-qi-miao-ri-chang/），以及HTTP2.0的官方网站。\" target=\"_blank\" rel=\"external\">http://www.alloyteam.com/2015/03/http2-0-di-qi-miao-ri-chang/），以及HTTP2.0的官方网站。</a><br>　　关于HTTP2和HTTP1.x的区别大致可以看下图：<br>　　<img src=\"http://n1.itc.cn/img8/wb/recom/2016/08/24/147198399994994553.PNG\" alt=\"\"></p>\n<h4 id=\"12-HTTP2-0的升级改造\"><a href=\"#12-HTTP2-0的升级改造\" class=\"headerlink\" title=\"12. HTTP2.0的升级改造\"></a>12. HTTP2.0的升级改造</h4><p>　　对比HTTPS的升级改造，HTTP2.0或许会稍微简单一些，你可能需要关注以下问题：<br>　　前文说了HTTP2.0其实可以支持非HTTPS的，但是现在主流的浏览器像chrome，firefox表示还是只支持基于 TLS 部署的HTTP2.0协议，所以要想升级成HTTP2.0还是先升级HTTPS为好。<br>　　当你的网站已经升级HTTPS之后，那么升级HTTP2.0就简单很多，如果你使用NGINX，只要在配置文件中启动相应的协议就可以了，可以参考NGINX白皮书，NGINX配置HTTP2.0官方指南。<br>　　使用了HTTP2.0那么，原本的HTTP1.x怎么办，这个问题其实不用担心，HTTP2.0完全兼容HTTP1.x的语义，对于不支持HTTP2.0的浏览器，NGINX会自动向下兼容的。<br>　　后记<br>　　以上就是关于HTTP,HTTP2.0,SPDY,HTTPS的一些基本理论，有些内容没有深入讲解，大家可以跟进参考连接具体查看。<br>　　关于HTTP1.x的一些优化方式，例如文件合并压缩，资源cdn，js，css优化等等同样使用与HTTP2.0和HTTPS，所以web前端的优化，还是要继续进行。<br>　　其实WEB发展如此迅速的今天，有些技术是真的要与时俱进的，就像苹果宣布ios 10必须使用HTTPS开始，关于web协议革新就已经开始了，为了更好的性能，更优越的方式，现在就开始升级改造吧<br>　　参考资料：<br>　　<a href=\"http://www.nihaoshijie.com.cn/index.PHP/archives/630\" target=\"_blank\" rel=\"external\">http://www.nihaoshijie.com.cn/index.PHP/archives/630</a><br>　　<a href=\"https://www.nginx.com/blog/7-tips-for-faster-http2-performance/\" target=\"_blank\" rel=\"external\">https://www.nginx.com/blog/7-tips-for-faster-http2-performance/</a><br>　　<a href=\"https://www.gitbook.com/book/ye11ow/http2-explained/details\" target=\"_blank\" rel=\"external\">https://www.gitbook.com/book/ye11ow/http2-explained/details</a><br>　　<a href=\"http://op.baidu.com/2015/04/https-s01a01/\" target=\"_blank\" rel=\"external\">http://op.baidu.com/2015/04/https-s01a01/</a></p>\n","excerpt":"<p>作为一个经常和web打交道的程序员，了解这些协议是必须的，本文就向大家介绍一下这些协议的区别和基本概念，文中可能不局限于前端知识，还包括一些运维，协议方面的知识</p>\n<h4 id=\"1-web始祖HTTP\"><a href=\"#1-web始祖HTTP\" class=\"headerlink\" title=\"1. web始祖HTTP\"></a>1. web始祖HTTP</h4><p>　　全称：超文本传输协议(HyperText Transfer Protocol)<br>　　伴随着计算机网络和浏览器的诞生，HTTP1.0也随之而来，处于计算机网络中的应用层。<br>　　HTTP是建立在TCP协议之上，所以HTTP协议的瓶颈及其优化技巧都是基于TCP协议本身的特性，例如tcp建立连接的3次握手和断开连接的4次挥手以及每次建立连接带来的RTT延迟时间。</p>\n<h4 id=\"2-HTTP与现代化浏览器\"><a href=\"#2-HTTP与现代化浏览器\" class=\"headerlink\" title=\"2. HTTP与现代化浏览器\"></a>2. HTTP与现代化浏览器</h4><p>　　早在HTTP建立之初，主要就是为了将超文本标记语言(HTML)文档从Web服务器传送到客户端的浏览器。也是说对于前端来说，我们所写的HTML页面将要放在我们的web服务器上，用户端通过浏览器访问url地址来获取网页的显示内容。<br>　　但是到了WEB2.0以来，我们的页面变得复杂，不仅仅单纯的是一些简单的文字和图片，同时我们的HTML页面有了CSS，Java，来丰富我们的页面展示。<br>　　当ajax的出现，我们又多了一种向服务器端获取数据的方法，这些其实都是基于HTTP协议的。<br>　　同样到了移动互联网时代，我们页面可以跑在手机端浏览器里面，但是和PC相比，手机端的网络情况更加复杂，这使得我们开始了不得不对HTTP进行深入理解并不断优化过程中。<br><img src=\"http://n1.itc.cn/img8/wb/recom/2016/08/24/147198399719339368.PNG\" alt=\"\"><br>","more":"</p>\n<h4 id=\"3-HTTP的基本优化\"><a href=\"#3-HTTP的基本优化\" class=\"headerlink\" title=\"3. HTTP的基本优化\"></a>3. HTTP的基本优化</h4><p>　　影响一个HTTP网络请求的因素主要有两个：带宽和延迟。<br>　　带宽：如果说我们还停留在拨号上网的阶段，带宽可能会成为一个比较严重影响请求的问题，但是现在网络基础建设已经使得带宽得到极大的提升，我们不再会担心由带宽而影响网速，那么就只剩下延迟了。<br>　　延迟：<br>　　浏览器阻塞（HOL blocking）：浏览器会因为一些原因阻塞请求。浏览器对于同一个域名，同时只能有 4 个连接（这个根据浏览器内核不同可能会有所差异），超过浏览器最大连接数限制，后续请求就会被阻塞。<br>　　DNS 查询（DNS Lookup）：浏览器需要知道目标服务器的 IP 才能建立连接。将域名解析为 IP 的这个系统就是 DNS。这个通常可以利用DNS缓存结果来达到减少这个时间的目的。<br>　　建立连接（Initial connection）：HTTP 是基于 TCP 协议的，浏览器最快也要在第三次握手时才能捎带 HTTP 请求报文，达到真正的建立连接，但是这些连接无法复用会导致每次请求都经历三次握手和慢启动。三次握手在高延迟的场景下影响较明显，慢启动则对文件类大请求影响较大。<br>　　<img src=\"http://n1.itc.cn/img8/wb/recom/2016/08/24/147198399760686112.JPEG\" alt=\"\"></p>\n<h4 id=\"4-HTTP1-0和HTTP1-1的一些区别\"><a href=\"#4-HTTP1-0和HTTP1-1的一些区别\" class=\"headerlink\" title=\"4. HTTP1.0和HTTP1.1的一些区别\"></a>4. HTTP1.0和HTTP1.1的一些区别</h4><p>　　HTTP1.0最早在网页中使用是在1996年，那个时候只是使用一些较为简单的网页上和网络请求上，而HTTP1.1则在1999年才开始广泛应用于现在的各大浏览器网络请求中，同时HTTP1.1也是当前使用最为广泛的HTTP协议。<br>　　主要区别主要体现在：<br>　　缓存处理，在HTTP1.0中主要使用header里的If-Modified-Since,Expires来做为缓存判断的标准，HTTP1.1则引入了更多的缓存控制策略例如Entity tag，If-Unmodified-Since, If-Match, If-None-Match等更多可供选择的缓存头来控制缓存策略。<br>　　带宽优化及网络连接的使用，HTTP1.0中，存在一些浪费带宽的现象，例如客户端只是需要某个对象的一部分，而服务器却将整个对象送过来了，并且不支持断点续传功能，HTTP1.1则在请求头引入了range头域，它允许只请求资源的某个部分，即返回码是206（Partial Content），这样就方便了开发者自由的选择以便于充分利用带宽和连接。<br>　　错误通知的管理，在HTTP1.1中新增了24个错误状态响应码，如409（Conflict）表示请求的资源与资源的当前状态发生冲突；410（Gone）表示服务器上的某个资源被永久性的删除。<br>　　Host头处理，在HTTP1.0中认为每台服务器都绑定一个唯一的IP地址，因此，请求消息中的URL并没有传递主机名（hostname）。但随着虚拟主机技术的发展，在一台物理服务器上可以存在多个虚拟主机（Multi-homed Web Servers），并且它们共享一个IP地址。HTTP1.1的请求消息和响应消息都应支持Host头域，且请求消息中如果没有Host头域会报告一个错误（400 Bad Request）。<br>　　长连接，HTTP 1.1支持长连接（PersistentConnection）和请求的流水线（Pipelining）处理，在一个TCP连接上可以传送多个HTTP请求和响应，减少了建立和关闭连接的消耗和延迟，在HTTP1.1中默认开启Connection： keep-alive，一定程度上弥补了HTTP1.0每次请求都要创建连接的缺点。以下是常见的HTTP1.0：<br>　　<img src=\"http://n1.itc.cn/img8/wb/recom/2016/08/24/147198399802075762.PNG\" alt=\"\"><br>    <img src=\"http://n1.itc.cn/img8/wb/recom/2016/08/24/147198399842828512.JPEG\" alt=\"\"></p>\n<p>　　区别用一张图来体现：<br><img src=\"http://n1.itc.cn/img8/wb/recom/2016/08/24/147198399883354941.PNG\" alt=\"\">\n　　</p>\n<h4 id=\"5-HTTP1-0和1-1现存的一些问题\"><a href=\"#5-HTTP1-0和1-1现存的一些问题\" class=\"headerlink\" title=\"5. HTTP1.0和1.1现存的一些问题\"></a>5. HTTP1.0和1.1现存的一些问题</h4><p>　　上面提到过的，HTTP1.x在传输数据时，每次都需要重新建立连接，无疑增加了大量的延迟时间，特别是在移动端更为突出。<br>　　HTTP1.x在传输数据时，所有传输的内容都是明文，客户端和服务器端都无法验证对方的身份，这在一定程度上无法保证数据的安全性。<br>　　HTTP1.x在使用时，header里携带的内容过大，在一定程度上增加了传输的成本，并且每次请求header基本不怎么变化，尤其在移动端增加用户流量。<br>　　虽然HTTP1.x支持了keep-alive，来弥补多次创建连接产生的延迟，但是keep-alive使用多了同样会给服务端带来大量的性能压力，并且对于单个文件被不断请求的服务(例如图片存放网站)，keep-alive可能会极大的影响性能，因为它在文件被请求之后还保持了不必要的连接很长时间。</p>\n<h4 id=\"6-HTTPS应声而出\"><a href=\"#6-HTTPS应声而出\" class=\"headerlink\" title=\"6. HTTPS应声而出\"></a>6. HTTPS应声而出</h4><p>　　为了解决以上问题，网景在1994年创建了HTTPS，并应用在网景导航者浏览器中。<br>　　最初，HTTPS是与SSL一起使用的；在SSL逐渐演变到TLS时（其实两个是一个东西，只是名字不同而已），最新的HTTPS也由在2000年五月公布的RFC 2818正式确定下来。<br>　　简单来说，HTTPS就是安全版的HTTP，并且由于当今时代对安全性要求更高，chrome和firefox都大力支持网站使用HTTPS，苹果也在iOS 10系统中强制app使用HTTPS来传输数据，由此可见HTTPS势在必行。</p>\n<h4 id=\"7-HTTPS与HTTP的一些区别\"><a href=\"#7-HTTPS与HTTP的一些区别\" class=\"headerlink\" title=\"7. HTTPS与HTTP的一些区别\"></a>7. HTTPS与HTTP的一些区别</h4><p>　　HTTPS协议需要到CA申请证书，一般免费证书很少，需要交费。<br>　　HTTP协议运行在TCP之上，所有传输的内容都是明文，HTTPS运行在SSL/TLS之上，SSL/TLS运行在TCP之上，所有传输的内容都经过加密的。<br>　　HTTP和HTTPS使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。<br>　　HTTPS可以有效的防止运营商劫持，解决了防劫持的一个大问题。<br>　　<img src=\"http://n1.itc.cn/img8/wb/recom/2016/08/24/147198399905751035.PNG\" alt=\"\"></p>\n<h4 id=\"8-HTTPS改造\"><a href=\"#8-HTTPS改造\" class=\"headerlink\" title=\"8. HTTPS改造\"></a>8. HTTPS改造</h4><p>　　如果一个网站要全站由HTTP替换成HTTPS，可能需要关注以下几点：<br>　　安装CA证书，一般的证书都是需要收费的，这边推荐一个比较好的购买证书网站：1）Let’s Encrypt，免费，快捷，支持多域名（不是通配符），三条命令即时签署+导出证书。缺点是暂时只有三个月有效期，到期需续签。2Comodo PositiveSSL，收费，但是比较稳定。<br>　　在购买证书之后，在证书提供的网站上配置自己的域名，将证书下载下来之后，配置自己的web服务器，同时进行代码改造。<br>　　HTTPS 降低用户访问速度。SSL握手，HTTPS 对速度会有一定程度的降低，但是只要经过合理优化和部署，HTTPS 对速度的影响完全可以接受。在很多场景下，HTTPS 速度完全不逊于 HTTP，如果使用 SPDY，HTTPS 的速度甚至还要比 HTTP 快。<br>　　相对于HTTPS降低访问速度，其实更需要关心的是服务器端的CPU压力，HTTPS中大量的密钥算法计算，会消耗大量的CPU资源，只有足够的优化，HTTPS 的机器成本才不会明显增加。<br>　　推荐一则淘宝网改造HTTPS（<a href=\"http://velocity.oreilly.com.cn/2015/ppts/lizhenyu.pdf）的文章。\">http://velocity.oreilly.com.cn/2015/ppts/lizhenyu.pdf）的文章。</a></p>\n<h4 id=\"9-使用SPDY加快你的网站速度\"><a href=\"#9-使用SPDY加快你的网站速度\" class=\"headerlink\" title=\"9. 使用SPDY加快你的网站速度\"></a>9. 使用SPDY加快你的网站速度</h4><p>　　2012年google如一声惊雷提出了SPDY的方案，大家才开始从正面看待和解决老版本HTTP协议本身的问题，SPDY可以说是综合了HTTPS和HTTP两者有点于一体的传输协议， 主要解决：<br>　　降低延迟，针对HTTP高延迟的问题，SPDY优雅的采取了多路复用（multiplexing）。多路复用通过多个请求stream共享一个tcp连接的方式，解决了HOL blocking的问题，降低了延迟同时提高了带宽的利用率。<br>　　请求优先级（request prioritization）。多路复用带来一个新的问题是，在连接共享的基础之上有可能会导致关键请求被阻塞。SPDY允许给每个request设置优先级，这样重要的请求就会优先得到响应。比如浏览器加载首页，首页的html内容应该优先展示，之后才是各种静态资源文件，脚本文件等加载，这样可以保证用户能第一时间看到网页内容。<br>　　header压缩。前面提到HTTP1.x的header很多时候都是重复多余的。选择合适的压缩算法可以减小包的大小和数量。<br>　　基于HTTPS的加密协议传输，大大提高了传输数据的可靠性。<br>　　服务端推送（server push），采用了SPDY的网页，例如我的网页有一个sytle.css的请求，在客户端收到sytle.css数据的同时，服务端会将sytle.js的文件推送给客户端，当客户端再次尝试获取sytle.js时就可以直接从缓存中获取到，不用再发请求了。SPDY构成图：<br>　　<img src=\"http://n1.itc.cn/img8/wb/recom/2016/08/24/147198399925596893.PNG\" alt=\"\"><br>　　SPDY位于HTTP之下，TCP和SSL之上，这样可以轻松兼容老版本的HTTP协议(将HTTP1.x的内容封装成一种新的frame格式)，同时可以使用已有的SSL功能。<br>　　兼容性：<br>　　<img src=\"http://n1.itc.cn/img8/wb/recom/2016/08/24/147198399943879010.JPEG\" alt=\"\"></p>\n<h4 id=\"10-HTTP2-0的前世今生\"><a href=\"#10-HTTP2-0的前世今生\" class=\"headerlink\" title=\"10. HTTP2.0的前世今生\"></a>10. HTTP2.0的前世今生</h4><p>　　顾名思义有了HTTP1.x，那么HTTP2.0也就顺理成章的出现了。<br>　　HTTP2.0可以说是SPDY的升级版（其实原本也是基于SPDY设计的），但是，HTTP2.0 跟 SPDY 仍有不同的地方，主要是以下两点：<br>　　HTTP2.0 支持明文 HTTP 传输，而 SPDY 强制使用 HTTPS<br>　　HTTP2.0 消息头的压缩算法采用 HPACK，而非 SPDY 采用的 DEFLATE</p>\n<h4 id=\"11-HTTP2-0的新特性\"><a href=\"#11-HTTP2-0的新特性\" class=\"headerlink\" title=\"11. HTTP2.0的新特性\"></a>11. HTTP2.0的新特性</h4><p>　　新的二进制格式（Binary Format），HTTP1.x的解析是基于文本。基于文本协议的格式解析存在天然缺陷，文本的表现形式有多样性，要做到健壮性考虑的场景必然很多，二进制则不同，只认0和1的组合。基于这种考虑HTTP2.0的协议解析决定采用二进制格式，实现方便且健壮。<br>　　多路复用（MultiPlexing），即连接共享，即每一个request都是是用作连接共享机制的。一个request对应一个id，这样一个连接上可以有多个request，每个连接的request可以随机的混杂在一起，接收方可以根据request的 id将request再归属到各自不同的服务端请求里面。多路复用原理图：<br>　　<img src=\"http://n1.itc.cn/img8/wb/recom/2016/08/24/147198399964083298.JPEG\" alt=\"\"><br>　　header压缩，如上文中所言，对前面提到过HTTP1.x的header带有大量信息，而且每次都要重复发送，HTTP2.0使用encoder来减少需要传输的header大小，通讯双方各自cache一份header fields表，既避免了重复header的传输，又减小了需要传输的大小。<br>　　服务端推送（server push），同SPDY一样，HTTP2.0也具有server push功能。目前，有大多数网站已经启用HTTP2.0，例如YouTuBe，淘宝网等网站，利用chrome控制台可以查看是否启用H2：<br>　　<img src=\"http://n1.itc.cn/img8/wb/recom/2016/08/24/147198399979177828.JPEG\" alt=\"\"><br>　　更多关于HTTP2的问题可以参考：HTTP2奇妙日常（<a href=\"http://www.alloyteam.com/2015/03/http2-0-di-qi-miao-ri-chang/），以及HTTP2.0的官方网站。\">http://www.alloyteam.com/2015/03/http2-0-di-qi-miao-ri-chang/），以及HTTP2.0的官方网站。</a><br>　　关于HTTP2和HTTP1.x的区别大致可以看下图：<br>　　<img src=\"http://n1.itc.cn/img8/wb/recom/2016/08/24/147198399994994553.PNG\" alt=\"\"></p>\n<h4 id=\"12-HTTP2-0的升级改造\"><a href=\"#12-HTTP2-0的升级改造\" class=\"headerlink\" title=\"12. HTTP2.0的升级改造\"></a>12. HTTP2.0的升级改造</h4><p>　　对比HTTPS的升级改造，HTTP2.0或许会稍微简单一些，你可能需要关注以下问题：<br>　　前文说了HTTP2.0其实可以支持非HTTPS的，但是现在主流的浏览器像chrome，firefox表示还是只支持基于 TLS 部署的HTTP2.0协议，所以要想升级成HTTP2.0还是先升级HTTPS为好。<br>　　当你的网站已经升级HTTPS之后，那么升级HTTP2.0就简单很多，如果你使用NGINX，只要在配置文件中启动相应的协议就可以了，可以参考NGINX白皮书，NGINX配置HTTP2.0官方指南。<br>　　使用了HTTP2.0那么，原本的HTTP1.x怎么办，这个问题其实不用担心，HTTP2.0完全兼容HTTP1.x的语义，对于不支持HTTP2.0的浏览器，NGINX会自动向下兼容的。<br>　　后记<br>　　以上就是关于HTTP,HTTP2.0,SPDY,HTTPS的一些基本理论，有些内容没有深入讲解，大家可以跟进参考连接具体查看。<br>　　关于HTTP1.x的一些优化方式，例如文件合并压缩，资源cdn，js，css优化等等同样使用与HTTP2.0和HTTPS，所以web前端的优化，还是要继续进行。<br>　　其实WEB发展如此迅速的今天，有些技术是真的要与时俱进的，就像苹果宣布ios 10必须使用HTTPS开始，关于web协议革新就已经开始了，为了更好的性能，更优越的方式，现在就开始升级改造吧<br>　　参考资料：<br>　　<a href=\"http://www.nihaoshijie.com.cn/index.PHP/archives/630\">http://www.nihaoshijie.com.cn/index.PHP/archives/630</a><br>　　<a href=\"https://www.nginx.com/blog/7-tips-for-faster-http2-performance/\">https://www.nginx.com/blog/7-tips-for-faster-http2-performance/</a><br>　　<a href=\"https://www.gitbook.com/book/ye11ow/http2-explained/details\">https://www.gitbook.com/book/ye11ow/http2-explained/details</a><br>　　<a href=\"http://op.baidu.com/2015/04/https-s01a01/\">http://op.baidu.com/2015/04/https-s01a01/</a></p>"},{"title":"canvas代码块","date":"2017-06-26T06:32:53.000Z","_content":"\n### 在画布中获取特定颜色的像素数量\n下面的函数将返回画布上颜色（RGB格式）为r、g、b的像素数量。如果用户希望像这篇博客文章中在另一个区域绘画，那么这将非常有用。\n```\nfunction getpixelamount(canvas, r, g, b) {\n  var cx = canvas.getContext('2d');\n  var pixels = cx.getImageData(0, 0, canvas.width, canvas.height);\n  var all = pixels.data.length;\n  var amount = 0;\n  for (i = 0; i < all; i += 4) {\n    if (pixels.data[i] === r &&\n        pixels.data[i + 1] === g &&\n        pixels.data[i + 2] === b) {\n      amount++;\n    }\n  }\n  return amount;\n};\n```\n\n<!--more-->\n### 在画布中获取某一个像素的颜色\n下面的代码片段返回一个对象，该对象在画布的x和y的位置上具有RGBA值。这可以用来确定鼠标光标是否在一个特定的形状中。\n```\nfunction getpixelcolour(canvas, x, y) {\n  var cx = canvas.getContext('2d');\n  var pixel = cx.getImageData(x, y, 1, 1);\n  return {\n    r: pixel.data[0],\n    g: pixel.data[1],\n    b: pixel.data[2],\n    a: pixel.data[3]\n  };\n}\n```\n### 链接方法\n这个类提供的jQuery风格的链接访问2D背景的方法和属性。\n```\nfunction Canvas2DContext(canvas) {\n  if (typeof canvas === 'string') {\n    canvas = document.getElementById(canvas);\n  }\n  if (!(this instanceof Canvas2DContext)) {\n    return new Canvas2DContext(canvas);\n  }\n  this.context = this.ctx = canvas.getContext('2d');\n  if (!Canvas2DContext.prototype.arc) {\n    Canvas2DContext.setup.call(this, this.ctx);\n  }\n}\nCanvas2DContext.setup = function() {\n  var methods = ['arc', 'arcTo', 'beginPath', 'bezierCurveTo', 'clearRect', 'clip',\n    'closePath', 'drawImage', 'fill', 'fillRect', 'fillText', 'lineTo', 'moveTo',\n    'quadraticCurveTo', 'rect', 'restore', 'rotate', 'save', 'scale', 'setTransform',\n    'stroke', 'strokeRect', 'strokeText', 'transform', 'translate'];\n\n  var getterMethods = ['createPattern', 'drawFocusRing', 'isPointInPath', 'measureText', // drawFocusRing not currently supported\n    // The following might instead be wrapped to be able to chain their child objects\n    'createImageData', 'createLinearGradient',\n    'createRadialGradient', 'getImageData', 'putImageData'\n  ];\n\n  var props = ['canvas', 'fillStyle', 'font', 'globalAlpha', 'globalCompositeOperation',\n    'lineCap', 'lineJoin', 'lineWidth', 'miterLimit', 'shadowOffsetX', 'shadowOffsetY',\n    'shadowBlur', 'shadowColor', 'strokeStyle', 'textAlign', 'textBaseline'];\n\n  for (let m of methods) {\n    let method = m;\n    Canvas2DContext.prototype[method] = function() {\n      this.ctx[method].apply(this.ctx, arguments);\n      return this;\n    };\n  }\n\n  for (let m of getterMethods) {\n    let method = m;\n    Canvas2DContext.prototype[method] = function() {\n      return this.ctx[method].apply(this.ctx, arguments);\n    };\n  }\n\n  for (let p of props) {\n    let prop = p;\n    Canvas2DContext.prototype[prop] = function(value) {\n      if (value === undefined)\n        return this.ctx[prop];\n      this.ctx[prop] = value;\n      return this;\n    };\n  }\n};\n\nvar canvas = document.getElementById('canvas');\n\n// Use context to get access to underlying context\nvar ctx = Canvas2DContext(canvas)\n  .strokeStyle('rgb(30, 110, 210)')\n  .transform(10, 3, 4, 5, 1, 0)\n  .strokeRect(2, 10, 15, 20)\n  .context;\n\n// Use property name as a function (but without arguments) to get the value\nvar strokeStyle = Canvas2DContext(canvas)\n  .strokeStyle('rgb(50, 110, 210)')\n  .strokeStyle();\n```\n代码只有特权代码的可使用\n这些片段是从特权代码仅是有用的，例如扩展或特权的应用程序。\n\n### 保存画布图像文件\n下面的函数接受一个画布对象和目标文件路径串。画布被转换成PNG文件并保存到指定的位置。该函数返回时，该文件已被完全保存它解决的承诺。\n```\nfunction saveCanvas(canvas, path, type, options) {\n    return Task.spawn(function *() {\n        var reader = new FileReader;\n        var blob = yield new Promise(accept => canvas.toBlob(accept, type, options));\n        reader.readAsArrayBuffer(blob);\n\n        yield new Promise(accept => { reader.onloadend = accept });\n\n        return yield OS.File.writeAtomic(path, new Uint8Array(reader.result),\n                                         { tmpPath: path + '.tmp' });\n    });\n}\n```\n### 将一个远程页面加载到画布元素上\n下面的类首先创建隐藏的iframe元件并附加一个监听到所述框架的加载事件。一旦远程页面加载时，remotePageLoaded方法火灾。这种方法获取到iframe的窗口的引用，并提请该窗口的画布对象。\n\n需要注意的是，如果你正在运行的Chrome页面这仅适用。如果您尝试运行代码作为普通的网页，你会得到一个“安全错误‘代码’1000' 的错误。\n```\nRemoteCanvas = function() {\n    this.url = 'http://developer.mozilla.org';\n};\n\nRemoteCanvas.CANVAS_WIDTH = 300;\nRemoteCanvas.CANVAS_HEIGHT = 300;\n\nRemoteCanvas.prototype.load = function() {\n    var windowWidth = window.innerWidth - 25;\n    var iframe;\n    iframe = document.createElement('iframe');\n    iframe.id = 'test-iframe';\n    iframe.height = '10px';\n    iframe.width = windowWidth + 'px';\n    iframe.style.visibility = 'hidden';\n    iframe.src = this.url;\n    // Here is where the magic happens... add a listener to the\n    // frame's onload event\n    iframe.addEventListener('load', this.remotePageLoaded, true);\n    //append to the end of the page\n    window.document.body.appendChild(iframe);\n    return;    \n};\n\nRemoteCanvas.prototype.remotePageLoaded = function() {\n    // Look back up the iframe by id\n    var ldrFrame = document.getElementById('test-iframe');\n    // Get a reference to the window object you need for the canvas\n    // drawWindow method\n    var remoteWindow = ldrFrame.contentWindow;\n\n    //Draw canvas\n    var canvas = document.createElement('canvas');\n    canvas.style.width = RemoteCanvas.CANVAS_WIDTH + 'px';\n    canvas.style.height = RemoteCanvas.CANVAS_HEIGHT + 'px';\n    canvas.width = RemoteCanvas.CANVAS_WIDTH;\n    canvas.height = RemoteCanvas.CANVAS_HEIGHT;\n    var windowWidth = window.innerWidth - 25;\n    var windowHeight = window.innerHeight;\n\n    var ctx = canvas.getContext('2d');\n    ctx.clearRect(0, 0,\n                  RemoteCanvas.CANVAS_WIDTH,\n                  RemoteCanvas.CANVAS_HEIGHT);\n    ctx.save();\n    ctx.scale(RemoteCanvas.CANVAS_WIDTH / windowWidth,\n              RemoteCanvas.CANVAS_HEIGHT / windowHeight);\n    ctx.drawWindow(remoteWindow,\n                   0, 0,\n                   windowWidth, windowHeight,\n                   'rgb(255, 255, 255)');\n    ctx.restore();\n};\n```\n用法：\n```\nvar remoteCanvas = new RemoteCanvas();\nremoteCanvas.load();\n```\n### 将图像文件转换为base64字符串\n下面的代码获取远程图像，并转换其内容Data URI scheme。\n```\nvar canvas = document.createElement('canvas');\nvar ctxt = canvas.getContext('2d');\nfunction loadImageFile(url, callback) {\n  var image = new Image();\n  image.src = url;\n  return new Promise((accept, reject) => {\n    image.onload = accept;\n    image.onerror = reject;\n  }).then(accept => {\n    canvas.width = this.width;\n    canvas.height = this.height;\n    ctxt.clearRect(0, 0, this.width, this.height);\n    ctxt.drawImage(this, 0, 0);\n    accept(canvas.toDataURL());\n  });\n}\n```\n用法：\n```\nloadImageFile('myimage.jpg').then(string64 => { alert(string64); });\n```\n","source":"_posts/canvas代码块.md","raw":"---\ntitle: canvas代码块\ntags:\n  - '前端'\ncategories:\n  - '前端'\n  - '知识点'\ndate: 2017-06-26 14:32:53\n---\n\n### 在画布中获取特定颜色的像素数量\n下面的函数将返回画布上颜色（RGB格式）为r、g、b的像素数量。如果用户希望像这篇博客文章中在另一个区域绘画，那么这将非常有用。\n```\nfunction getpixelamount(canvas, r, g, b) {\n  var cx = canvas.getContext('2d');\n  var pixels = cx.getImageData(0, 0, canvas.width, canvas.height);\n  var all = pixels.data.length;\n  var amount = 0;\n  for (i = 0; i < all; i += 4) {\n    if (pixels.data[i] === r &&\n        pixels.data[i + 1] === g &&\n        pixels.data[i + 2] === b) {\n      amount++;\n    }\n  }\n  return amount;\n};\n```\n\n<!--more-->\n### 在画布中获取某一个像素的颜色\n下面的代码片段返回一个对象，该对象在画布的x和y的位置上具有RGBA值。这可以用来确定鼠标光标是否在一个特定的形状中。\n```\nfunction getpixelcolour(canvas, x, y) {\n  var cx = canvas.getContext('2d');\n  var pixel = cx.getImageData(x, y, 1, 1);\n  return {\n    r: pixel.data[0],\n    g: pixel.data[1],\n    b: pixel.data[2],\n    a: pixel.data[3]\n  };\n}\n```\n### 链接方法\n这个类提供的jQuery风格的链接访问2D背景的方法和属性。\n```\nfunction Canvas2DContext(canvas) {\n  if (typeof canvas === 'string') {\n    canvas = document.getElementById(canvas);\n  }\n  if (!(this instanceof Canvas2DContext)) {\n    return new Canvas2DContext(canvas);\n  }\n  this.context = this.ctx = canvas.getContext('2d');\n  if (!Canvas2DContext.prototype.arc) {\n    Canvas2DContext.setup.call(this, this.ctx);\n  }\n}\nCanvas2DContext.setup = function() {\n  var methods = ['arc', 'arcTo', 'beginPath', 'bezierCurveTo', 'clearRect', 'clip',\n    'closePath', 'drawImage', 'fill', 'fillRect', 'fillText', 'lineTo', 'moveTo',\n    'quadraticCurveTo', 'rect', 'restore', 'rotate', 'save', 'scale', 'setTransform',\n    'stroke', 'strokeRect', 'strokeText', 'transform', 'translate'];\n\n  var getterMethods = ['createPattern', 'drawFocusRing', 'isPointInPath', 'measureText', // drawFocusRing not currently supported\n    // The following might instead be wrapped to be able to chain their child objects\n    'createImageData', 'createLinearGradient',\n    'createRadialGradient', 'getImageData', 'putImageData'\n  ];\n\n  var props = ['canvas', 'fillStyle', 'font', 'globalAlpha', 'globalCompositeOperation',\n    'lineCap', 'lineJoin', 'lineWidth', 'miterLimit', 'shadowOffsetX', 'shadowOffsetY',\n    'shadowBlur', 'shadowColor', 'strokeStyle', 'textAlign', 'textBaseline'];\n\n  for (let m of methods) {\n    let method = m;\n    Canvas2DContext.prototype[method] = function() {\n      this.ctx[method].apply(this.ctx, arguments);\n      return this;\n    };\n  }\n\n  for (let m of getterMethods) {\n    let method = m;\n    Canvas2DContext.prototype[method] = function() {\n      return this.ctx[method].apply(this.ctx, arguments);\n    };\n  }\n\n  for (let p of props) {\n    let prop = p;\n    Canvas2DContext.prototype[prop] = function(value) {\n      if (value === undefined)\n        return this.ctx[prop];\n      this.ctx[prop] = value;\n      return this;\n    };\n  }\n};\n\nvar canvas = document.getElementById('canvas');\n\n// Use context to get access to underlying context\nvar ctx = Canvas2DContext(canvas)\n  .strokeStyle('rgb(30, 110, 210)')\n  .transform(10, 3, 4, 5, 1, 0)\n  .strokeRect(2, 10, 15, 20)\n  .context;\n\n// Use property name as a function (but without arguments) to get the value\nvar strokeStyle = Canvas2DContext(canvas)\n  .strokeStyle('rgb(50, 110, 210)')\n  .strokeStyle();\n```\n代码只有特权代码的可使用\n这些片段是从特权代码仅是有用的，例如扩展或特权的应用程序。\n\n### 保存画布图像文件\n下面的函数接受一个画布对象和目标文件路径串。画布被转换成PNG文件并保存到指定的位置。该函数返回时，该文件已被完全保存它解决的承诺。\n```\nfunction saveCanvas(canvas, path, type, options) {\n    return Task.spawn(function *() {\n        var reader = new FileReader;\n        var blob = yield new Promise(accept => canvas.toBlob(accept, type, options));\n        reader.readAsArrayBuffer(blob);\n\n        yield new Promise(accept => { reader.onloadend = accept });\n\n        return yield OS.File.writeAtomic(path, new Uint8Array(reader.result),\n                                         { tmpPath: path + '.tmp' });\n    });\n}\n```\n### 将一个远程页面加载到画布元素上\n下面的类首先创建隐藏的iframe元件并附加一个监听到所述框架的加载事件。一旦远程页面加载时，remotePageLoaded方法火灾。这种方法获取到iframe的窗口的引用，并提请该窗口的画布对象。\n\n需要注意的是，如果你正在运行的Chrome页面这仅适用。如果您尝试运行代码作为普通的网页，你会得到一个“安全错误‘代码’1000' 的错误。\n```\nRemoteCanvas = function() {\n    this.url = 'http://developer.mozilla.org';\n};\n\nRemoteCanvas.CANVAS_WIDTH = 300;\nRemoteCanvas.CANVAS_HEIGHT = 300;\n\nRemoteCanvas.prototype.load = function() {\n    var windowWidth = window.innerWidth - 25;\n    var iframe;\n    iframe = document.createElement('iframe');\n    iframe.id = 'test-iframe';\n    iframe.height = '10px';\n    iframe.width = windowWidth + 'px';\n    iframe.style.visibility = 'hidden';\n    iframe.src = this.url;\n    // Here is where the magic happens... add a listener to the\n    // frame's onload event\n    iframe.addEventListener('load', this.remotePageLoaded, true);\n    //append to the end of the page\n    window.document.body.appendChild(iframe);\n    return;    \n};\n\nRemoteCanvas.prototype.remotePageLoaded = function() {\n    // Look back up the iframe by id\n    var ldrFrame = document.getElementById('test-iframe');\n    // Get a reference to the window object you need for the canvas\n    // drawWindow method\n    var remoteWindow = ldrFrame.contentWindow;\n\n    //Draw canvas\n    var canvas = document.createElement('canvas');\n    canvas.style.width = RemoteCanvas.CANVAS_WIDTH + 'px';\n    canvas.style.height = RemoteCanvas.CANVAS_HEIGHT + 'px';\n    canvas.width = RemoteCanvas.CANVAS_WIDTH;\n    canvas.height = RemoteCanvas.CANVAS_HEIGHT;\n    var windowWidth = window.innerWidth - 25;\n    var windowHeight = window.innerHeight;\n\n    var ctx = canvas.getContext('2d');\n    ctx.clearRect(0, 0,\n                  RemoteCanvas.CANVAS_WIDTH,\n                  RemoteCanvas.CANVAS_HEIGHT);\n    ctx.save();\n    ctx.scale(RemoteCanvas.CANVAS_WIDTH / windowWidth,\n              RemoteCanvas.CANVAS_HEIGHT / windowHeight);\n    ctx.drawWindow(remoteWindow,\n                   0, 0,\n                   windowWidth, windowHeight,\n                   'rgb(255, 255, 255)');\n    ctx.restore();\n};\n```\n用法：\n```\nvar remoteCanvas = new RemoteCanvas();\nremoteCanvas.load();\n```\n### 将图像文件转换为base64字符串\n下面的代码获取远程图像，并转换其内容Data URI scheme。\n```\nvar canvas = document.createElement('canvas');\nvar ctxt = canvas.getContext('2d');\nfunction loadImageFile(url, callback) {\n  var image = new Image();\n  image.src = url;\n  return new Promise((accept, reject) => {\n    image.onload = accept;\n    image.onerror = reject;\n  }).then(accept => {\n    canvas.width = this.width;\n    canvas.height = this.height;\n    ctxt.clearRect(0, 0, this.width, this.height);\n    ctxt.drawImage(this, 0, 0);\n    accept(canvas.toDataURL());\n  });\n}\n```\n用法：\n```\nloadImageFile('myimage.jpg').then(string64 => { alert(string64); });\n```\n","slug":"canvas代码块","published":1,"updated":"2017-06-26T06:35:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5naxw3p0008fcxes6fbc75r","content":"<h3 id=\"在画布中获取特定颜色的像素数量\"><a href=\"#在画布中获取特定颜色的像素数量\" class=\"headerlink\" title=\"在画布中获取特定颜色的像素数量\"></a>在画布中获取特定颜色的像素数量</h3><p>下面的函数将返回画布上颜色（RGB格式）为r、g、b的像素数量。如果用户希望像这篇博客文章中在另一个区域绘画，那么这将非常有用。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">function getpixelamount(canvas, r, g, b) &#123;</div><div class=\"line\">  var cx = canvas.getContext(&apos;2d&apos;);</div><div class=\"line\">  var pixels = cx.getImageData(0, 0, canvas.width, canvas.height);</div><div class=\"line\">  var all = pixels.data.length;</div><div class=\"line\">  var amount = 0;</div><div class=\"line\">  for (i = 0; i &lt; all; i += 4) &#123;</div><div class=\"line\">    if (pixels.data[i] === r &amp;&amp;</div><div class=\"line\">        pixels.data[i + 1] === g &amp;&amp;</div><div class=\"line\">        pixels.data[i + 2] === b) &#123;</div><div class=\"line\">      amount++;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  return amount;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<h3 id=\"在画布中获取某一个像素的颜色\"><a href=\"#在画布中获取某一个像素的颜色\" class=\"headerlink\" title=\"在画布中获取某一个像素的颜色\"></a>在画布中获取某一个像素的颜色</h3><p>下面的代码片段返回一个对象，该对象在画布的x和y的位置上具有RGBA值。这可以用来确定鼠标光标是否在一个特定的形状中。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">function getpixelcolour(canvas, x, y) &#123;</div><div class=\"line\">  var cx = canvas.getContext(&apos;2d&apos;);</div><div class=\"line\">  var pixel = cx.getImageData(x, y, 1, 1);</div><div class=\"line\">  return &#123;</div><div class=\"line\">    r: pixel.data[0],</div><div class=\"line\">    g: pixel.data[1],</div><div class=\"line\">    b: pixel.data[2],</div><div class=\"line\">    a: pixel.data[3]</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"链接方法\"><a href=\"#链接方法\" class=\"headerlink\" title=\"链接方法\"></a>链接方法</h3><p>这个类提供的jQuery风格的链接访问2D背景的方法和属性。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Canvas2DContext(canvas) &#123;</div><div class=\"line\">  if (typeof canvas === &apos;string&apos;) &#123;</div><div class=\"line\">    canvas = document.getElementById(canvas);</div><div class=\"line\">  &#125;</div><div class=\"line\">  if (!(this instanceof Canvas2DContext)) &#123;</div><div class=\"line\">    return new Canvas2DContext(canvas);</div><div class=\"line\">  &#125;</div><div class=\"line\">  this.context = this.ctx = canvas.getContext(&apos;2d&apos;);</div><div class=\"line\">  if (!Canvas2DContext.prototype.arc) &#123;</div><div class=\"line\">    Canvas2DContext.setup.call(this, this.ctx);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">Canvas2DContext.setup = function() &#123;</div><div class=\"line\">  var methods = [&apos;arc&apos;, &apos;arcTo&apos;, &apos;beginPath&apos;, &apos;bezierCurveTo&apos;, &apos;clearRect&apos;, &apos;clip&apos;,</div><div class=\"line\">    &apos;closePath&apos;, &apos;drawImage&apos;, &apos;fill&apos;, &apos;fillRect&apos;, &apos;fillText&apos;, &apos;lineTo&apos;, &apos;moveTo&apos;,</div><div class=\"line\">    &apos;quadraticCurveTo&apos;, &apos;rect&apos;, &apos;restore&apos;, &apos;rotate&apos;, &apos;save&apos;, &apos;scale&apos;, &apos;setTransform&apos;,</div><div class=\"line\">    &apos;stroke&apos;, &apos;strokeRect&apos;, &apos;strokeText&apos;, &apos;transform&apos;, &apos;translate&apos;];</div><div class=\"line\"></div><div class=\"line\">  var getterMethods = [&apos;createPattern&apos;, &apos;drawFocusRing&apos;, &apos;isPointInPath&apos;, &apos;measureText&apos;, // drawFocusRing not currently supported</div><div class=\"line\">    // The following might instead be wrapped to be able to chain their child objects</div><div class=\"line\">    &apos;createImageData&apos;, &apos;createLinearGradient&apos;,</div><div class=\"line\">    &apos;createRadialGradient&apos;, &apos;getImageData&apos;, &apos;putImageData&apos;</div><div class=\"line\">  ];</div><div class=\"line\"></div><div class=\"line\">  var props = [&apos;canvas&apos;, &apos;fillStyle&apos;, &apos;font&apos;, &apos;globalAlpha&apos;, &apos;globalCompositeOperation&apos;,</div><div class=\"line\">    &apos;lineCap&apos;, &apos;lineJoin&apos;, &apos;lineWidth&apos;, &apos;miterLimit&apos;, &apos;shadowOffsetX&apos;, &apos;shadowOffsetY&apos;,</div><div class=\"line\">    &apos;shadowBlur&apos;, &apos;shadowColor&apos;, &apos;strokeStyle&apos;, &apos;textAlign&apos;, &apos;textBaseline&apos;];</div><div class=\"line\"></div><div class=\"line\">  for (let m of methods) &#123;</div><div class=\"line\">    let method = m;</div><div class=\"line\">    Canvas2DContext.prototype[method] = function() &#123;</div><div class=\"line\">      this.ctx[method].apply(this.ctx, arguments);</div><div class=\"line\">      return this;</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  for (let m of getterMethods) &#123;</div><div class=\"line\">    let method = m;</div><div class=\"line\">    Canvas2DContext.prototype[method] = function() &#123;</div><div class=\"line\">      return this.ctx[method].apply(this.ctx, arguments);</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  for (let p of props) &#123;</div><div class=\"line\">    let prop = p;</div><div class=\"line\">    Canvas2DContext.prototype[prop] = function(value) &#123;</div><div class=\"line\">      if (value === undefined)</div><div class=\"line\">        return this.ctx[prop];</div><div class=\"line\">      this.ctx[prop] = value;</div><div class=\"line\">      return this;</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">var canvas = document.getElementById(&apos;canvas&apos;);</div><div class=\"line\"></div><div class=\"line\">// Use context to get access to underlying context</div><div class=\"line\">var ctx = Canvas2DContext(canvas)</div><div class=\"line\">  .strokeStyle(&apos;rgb(30, 110, 210)&apos;)</div><div class=\"line\">  .transform(10, 3, 4, 5, 1, 0)</div><div class=\"line\">  .strokeRect(2, 10, 15, 20)</div><div class=\"line\">  .context;</div><div class=\"line\"></div><div class=\"line\">// Use property name as a function (but without arguments) to get the value</div><div class=\"line\">var strokeStyle = Canvas2DContext(canvas)</div><div class=\"line\">  .strokeStyle(&apos;rgb(50, 110, 210)&apos;)</div><div class=\"line\">  .strokeStyle();</div></pre></td></tr></table></figure></p>\n<p>代码只有特权代码的可使用<br>这些片段是从特权代码仅是有用的，例如扩展或特权的应用程序。</p>\n<h3 id=\"保存画布图像文件\"><a href=\"#保存画布图像文件\" class=\"headerlink\" title=\"保存画布图像文件\"></a>保存画布图像文件</h3><p>下面的函数接受一个画布对象和目标文件路径串。画布被转换成PNG文件并保存到指定的位置。该函数返回时，该文件已被完全保存它解决的承诺。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">function saveCanvas(canvas, path, type, options) &#123;</div><div class=\"line\">    return Task.spawn(function *() &#123;</div><div class=\"line\">        var reader = new FileReader;</div><div class=\"line\">        var blob = yield new Promise(accept =&gt; canvas.toBlob(accept, type, options));</div><div class=\"line\">        reader.readAsArrayBuffer(blob);</div><div class=\"line\"></div><div class=\"line\">        yield new Promise(accept =&gt; &#123; reader.onloadend = accept &#125;);</div><div class=\"line\"></div><div class=\"line\">        return yield OS.File.writeAtomic(path, new Uint8Array(reader.result),</div><div class=\"line\">                                         &#123; tmpPath: path + &apos;.tmp&apos; &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"将一个远程页面加载到画布元素上\"><a href=\"#将一个远程页面加载到画布元素上\" class=\"headerlink\" title=\"将一个远程页面加载到画布元素上\"></a>将一个远程页面加载到画布元素上</h3><p>下面的类首先创建隐藏的iframe元件并附加一个监听到所述框架的加载事件。一旦远程页面加载时，remotePageLoaded方法火灾。这种方法获取到iframe的窗口的引用，并提请该窗口的画布对象。</p>\n<p>需要注意的是，如果你正在运行的Chrome页面这仅适用。如果您尝试运行代码作为普通的网页，你会得到一个“安全错误‘代码’1000’ 的错误。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\">RemoteCanvas = function() &#123;</div><div class=\"line\">    this.url = &apos;http://developer.mozilla.org&apos;;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">RemoteCanvas.CANVAS_WIDTH = 300;</div><div class=\"line\">RemoteCanvas.CANVAS_HEIGHT = 300;</div><div class=\"line\"></div><div class=\"line\">RemoteCanvas.prototype.load = function() &#123;</div><div class=\"line\">    var windowWidth = window.innerWidth - 25;</div><div class=\"line\">    var iframe;</div><div class=\"line\">    iframe = document.createElement(&apos;iframe&apos;);</div><div class=\"line\">    iframe.id = &apos;test-iframe&apos;;</div><div class=\"line\">    iframe.height = &apos;10px&apos;;</div><div class=\"line\">    iframe.width = windowWidth + &apos;px&apos;;</div><div class=\"line\">    iframe.style.visibility = &apos;hidden&apos;;</div><div class=\"line\">    iframe.src = this.url;</div><div class=\"line\">    // Here is where the magic happens... add a listener to the</div><div class=\"line\">    // frame&apos;s onload event</div><div class=\"line\">    iframe.addEventListener(&apos;load&apos;, this.remotePageLoaded, true);</div><div class=\"line\">    //append to the end of the page</div><div class=\"line\">    window.document.body.appendChild(iframe);</div><div class=\"line\">    return;    </div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">RemoteCanvas.prototype.remotePageLoaded = function() &#123;</div><div class=\"line\">    // Look back up the iframe by id</div><div class=\"line\">    var ldrFrame = document.getElementById(&apos;test-iframe&apos;);</div><div class=\"line\">    // Get a reference to the window object you need for the canvas</div><div class=\"line\">    // drawWindow method</div><div class=\"line\">    var remoteWindow = ldrFrame.contentWindow;</div><div class=\"line\"></div><div class=\"line\">    //Draw canvas</div><div class=\"line\">    var canvas = document.createElement(&apos;canvas&apos;);</div><div class=\"line\">    canvas.style.width = RemoteCanvas.CANVAS_WIDTH + &apos;px&apos;;</div><div class=\"line\">    canvas.style.height = RemoteCanvas.CANVAS_HEIGHT + &apos;px&apos;;</div><div class=\"line\">    canvas.width = RemoteCanvas.CANVAS_WIDTH;</div><div class=\"line\">    canvas.height = RemoteCanvas.CANVAS_HEIGHT;</div><div class=\"line\">    var windowWidth = window.innerWidth - 25;</div><div class=\"line\">    var windowHeight = window.innerHeight;</div><div class=\"line\"></div><div class=\"line\">    var ctx = canvas.getContext(&apos;2d&apos;);</div><div class=\"line\">    ctx.clearRect(0, 0,</div><div class=\"line\">                  RemoteCanvas.CANVAS_WIDTH,</div><div class=\"line\">                  RemoteCanvas.CANVAS_HEIGHT);</div><div class=\"line\">    ctx.save();</div><div class=\"line\">    ctx.scale(RemoteCanvas.CANVAS_WIDTH / windowWidth,</div><div class=\"line\">              RemoteCanvas.CANVAS_HEIGHT / windowHeight);</div><div class=\"line\">    ctx.drawWindow(remoteWindow,</div><div class=\"line\">                   0, 0,</div><div class=\"line\">                   windowWidth, windowHeight,</div><div class=\"line\">                   &apos;rgb(255, 255, 255)&apos;);</div><div class=\"line\">    ctx.restore();</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>用法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">var remoteCanvas = new RemoteCanvas();</div><div class=\"line\">remoteCanvas.load();</div></pre></td></tr></table></figure></p>\n<h3 id=\"将图像文件转换为base64字符串\"><a href=\"#将图像文件转换为base64字符串\" class=\"headerlink\" title=\"将图像文件转换为base64字符串\"></a>将图像文件转换为base64字符串</h3><p>下面的代码获取远程图像，并转换其内容Data URI scheme。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">var canvas = document.createElement(&apos;canvas&apos;);</div><div class=\"line\">var ctxt = canvas.getContext(&apos;2d&apos;);</div><div class=\"line\">function loadImageFile(url, callback) &#123;</div><div class=\"line\">  var image = new Image();</div><div class=\"line\">  image.src = url;</div><div class=\"line\">  return new Promise((accept, reject) =&gt; &#123;</div><div class=\"line\">    image.onload = accept;</div><div class=\"line\">    image.onerror = reject;</div><div class=\"line\">  &#125;).then(accept =&gt; &#123;</div><div class=\"line\">    canvas.width = this.width;</div><div class=\"line\">    canvas.height = this.height;</div><div class=\"line\">    ctxt.clearRect(0, 0, this.width, this.height);</div><div class=\"line\">    ctxt.drawImage(this, 0, 0);</div><div class=\"line\">    accept(canvas.toDataURL());</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>用法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">loadImageFile(&apos;myimage.jpg&apos;).then(string64 =&gt; &#123; alert(string64); &#125;);</div></pre></td></tr></table></figure></p>\n","excerpt":"<h3 id=\"在画布中获取特定颜色的像素数量\"><a href=\"#在画布中获取特定颜色的像素数量\" class=\"headerlink\" title=\"在画布中获取特定颜色的像素数量\"></a>在画布中获取特定颜色的像素数量</h3><p>下面的函数将返回画布上颜色（RGB格式）为r、g、b的像素数量。如果用户希望像这篇博客文章中在另一个区域绘画，那么这将非常有用。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">function getpixelamount(canvas, r, g, b) &#123;</div><div class=\"line\">  var cx = canvas.getContext(&apos;2d&apos;);</div><div class=\"line\">  var pixels = cx.getImageData(0, 0, canvas.width, canvas.height);</div><div class=\"line\">  var all = pixels.data.length;</div><div class=\"line\">  var amount = 0;</div><div class=\"line\">  for (i = 0; i &lt; all; i += 4) &#123;</div><div class=\"line\">    if (pixels.data[i] === r &amp;&amp;</div><div class=\"line\">        pixels.data[i + 1] === g &amp;&amp;</div><div class=\"line\">        pixels.data[i + 2] === b) &#123;</div><div class=\"line\">      amount++;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  return amount;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>","more":"<h3 id=\"在画布中获取某一个像素的颜色\"><a href=\"#在画布中获取某一个像素的颜色\" class=\"headerlink\" title=\"在画布中获取某一个像素的颜色\"></a>在画布中获取某一个像素的颜色</h3><p>下面的代码片段返回一个对象，该对象在画布的x和y的位置上具有RGBA值。这可以用来确定鼠标光标是否在一个特定的形状中。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">function getpixelcolour(canvas, x, y) &#123;</div><div class=\"line\">  var cx = canvas.getContext(&apos;2d&apos;);</div><div class=\"line\">  var pixel = cx.getImageData(x, y, 1, 1);</div><div class=\"line\">  return &#123;</div><div class=\"line\">    r: pixel.data[0],</div><div class=\"line\">    g: pixel.data[1],</div><div class=\"line\">    b: pixel.data[2],</div><div class=\"line\">    a: pixel.data[3]</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"链接方法\"><a href=\"#链接方法\" class=\"headerlink\" title=\"链接方法\"></a>链接方法</h3><p>这个类提供的jQuery风格的链接访问2D背景的方法和属性。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Canvas2DContext(canvas) &#123;</div><div class=\"line\">  if (typeof canvas === &apos;string&apos;) &#123;</div><div class=\"line\">    canvas = document.getElementById(canvas);</div><div class=\"line\">  &#125;</div><div class=\"line\">  if (!(this instanceof Canvas2DContext)) &#123;</div><div class=\"line\">    return new Canvas2DContext(canvas);</div><div class=\"line\">  &#125;</div><div class=\"line\">  this.context = this.ctx = canvas.getContext(&apos;2d&apos;);</div><div class=\"line\">  if (!Canvas2DContext.prototype.arc) &#123;</div><div class=\"line\">    Canvas2DContext.setup.call(this, this.ctx);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">Canvas2DContext.setup = function() &#123;</div><div class=\"line\">  var methods = [&apos;arc&apos;, &apos;arcTo&apos;, &apos;beginPath&apos;, &apos;bezierCurveTo&apos;, &apos;clearRect&apos;, &apos;clip&apos;,</div><div class=\"line\">    &apos;closePath&apos;, &apos;drawImage&apos;, &apos;fill&apos;, &apos;fillRect&apos;, &apos;fillText&apos;, &apos;lineTo&apos;, &apos;moveTo&apos;,</div><div class=\"line\">    &apos;quadraticCurveTo&apos;, &apos;rect&apos;, &apos;restore&apos;, &apos;rotate&apos;, &apos;save&apos;, &apos;scale&apos;, &apos;setTransform&apos;,</div><div class=\"line\">    &apos;stroke&apos;, &apos;strokeRect&apos;, &apos;strokeText&apos;, &apos;transform&apos;, &apos;translate&apos;];</div><div class=\"line\"></div><div class=\"line\">  var getterMethods = [&apos;createPattern&apos;, &apos;drawFocusRing&apos;, &apos;isPointInPath&apos;, &apos;measureText&apos;, // drawFocusRing not currently supported</div><div class=\"line\">    // The following might instead be wrapped to be able to chain their child objects</div><div class=\"line\">    &apos;createImageData&apos;, &apos;createLinearGradient&apos;,</div><div class=\"line\">    &apos;createRadialGradient&apos;, &apos;getImageData&apos;, &apos;putImageData&apos;</div><div class=\"line\">  ];</div><div class=\"line\"></div><div class=\"line\">  var props = [&apos;canvas&apos;, &apos;fillStyle&apos;, &apos;font&apos;, &apos;globalAlpha&apos;, &apos;globalCompositeOperation&apos;,</div><div class=\"line\">    &apos;lineCap&apos;, &apos;lineJoin&apos;, &apos;lineWidth&apos;, &apos;miterLimit&apos;, &apos;shadowOffsetX&apos;, &apos;shadowOffsetY&apos;,</div><div class=\"line\">    &apos;shadowBlur&apos;, &apos;shadowColor&apos;, &apos;strokeStyle&apos;, &apos;textAlign&apos;, &apos;textBaseline&apos;];</div><div class=\"line\"></div><div class=\"line\">  for (let m of methods) &#123;</div><div class=\"line\">    let method = m;</div><div class=\"line\">    Canvas2DContext.prototype[method] = function() &#123;</div><div class=\"line\">      this.ctx[method].apply(this.ctx, arguments);</div><div class=\"line\">      return this;</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  for (let m of getterMethods) &#123;</div><div class=\"line\">    let method = m;</div><div class=\"line\">    Canvas2DContext.prototype[method] = function() &#123;</div><div class=\"line\">      return this.ctx[method].apply(this.ctx, arguments);</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  for (let p of props) &#123;</div><div class=\"line\">    let prop = p;</div><div class=\"line\">    Canvas2DContext.prototype[prop] = function(value) &#123;</div><div class=\"line\">      if (value === undefined)</div><div class=\"line\">        return this.ctx[prop];</div><div class=\"line\">      this.ctx[prop] = value;</div><div class=\"line\">      return this;</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">var canvas = document.getElementById(&apos;canvas&apos;);</div><div class=\"line\"></div><div class=\"line\">// Use context to get access to underlying context</div><div class=\"line\">var ctx = Canvas2DContext(canvas)</div><div class=\"line\">  .strokeStyle(&apos;rgb(30, 110, 210)&apos;)</div><div class=\"line\">  .transform(10, 3, 4, 5, 1, 0)</div><div class=\"line\">  .strokeRect(2, 10, 15, 20)</div><div class=\"line\">  .context;</div><div class=\"line\"></div><div class=\"line\">// Use property name as a function (but without arguments) to get the value</div><div class=\"line\">var strokeStyle = Canvas2DContext(canvas)</div><div class=\"line\">  .strokeStyle(&apos;rgb(50, 110, 210)&apos;)</div><div class=\"line\">  .strokeStyle();</div></pre></td></tr></table></figure></p>\n<p>代码只有特权代码的可使用<br>这些片段是从特权代码仅是有用的，例如扩展或特权的应用程序。</p>\n<h3 id=\"保存画布图像文件\"><a href=\"#保存画布图像文件\" class=\"headerlink\" title=\"保存画布图像文件\"></a>保存画布图像文件</h3><p>下面的函数接受一个画布对象和目标文件路径串。画布被转换成PNG文件并保存到指定的位置。该函数返回时，该文件已被完全保存它解决的承诺。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">function saveCanvas(canvas, path, type, options) &#123;</div><div class=\"line\">    return Task.spawn(function *() &#123;</div><div class=\"line\">        var reader = new FileReader;</div><div class=\"line\">        var blob = yield new Promise(accept =&gt; canvas.toBlob(accept, type, options));</div><div class=\"line\">        reader.readAsArrayBuffer(blob);</div><div class=\"line\"></div><div class=\"line\">        yield new Promise(accept =&gt; &#123; reader.onloadend = accept &#125;);</div><div class=\"line\"></div><div class=\"line\">        return yield OS.File.writeAtomic(path, new Uint8Array(reader.result),</div><div class=\"line\">                                         &#123; tmpPath: path + &apos;.tmp&apos; &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"将一个远程页面加载到画布元素上\"><a href=\"#将一个远程页面加载到画布元素上\" class=\"headerlink\" title=\"将一个远程页面加载到画布元素上\"></a>将一个远程页面加载到画布元素上</h3><p>下面的类首先创建隐藏的iframe元件并附加一个监听到所述框架的加载事件。一旦远程页面加载时，remotePageLoaded方法火灾。这种方法获取到iframe的窗口的引用，并提请该窗口的画布对象。</p>\n<p>需要注意的是，如果你正在运行的Chrome页面这仅适用。如果您尝试运行代码作为普通的网页，你会得到一个“安全错误‘代码’1000’ 的错误。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\">RemoteCanvas = function() &#123;</div><div class=\"line\">    this.url = &apos;http://developer.mozilla.org&apos;;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">RemoteCanvas.CANVAS_WIDTH = 300;</div><div class=\"line\">RemoteCanvas.CANVAS_HEIGHT = 300;</div><div class=\"line\"></div><div class=\"line\">RemoteCanvas.prototype.load = function() &#123;</div><div class=\"line\">    var windowWidth = window.innerWidth - 25;</div><div class=\"line\">    var iframe;</div><div class=\"line\">    iframe = document.createElement(&apos;iframe&apos;);</div><div class=\"line\">    iframe.id = &apos;test-iframe&apos;;</div><div class=\"line\">    iframe.height = &apos;10px&apos;;</div><div class=\"line\">    iframe.width = windowWidth + &apos;px&apos;;</div><div class=\"line\">    iframe.style.visibility = &apos;hidden&apos;;</div><div class=\"line\">    iframe.src = this.url;</div><div class=\"line\">    // Here is where the magic happens... add a listener to the</div><div class=\"line\">    // frame&apos;s onload event</div><div class=\"line\">    iframe.addEventListener(&apos;load&apos;, this.remotePageLoaded, true);</div><div class=\"line\">    //append to the end of the page</div><div class=\"line\">    window.document.body.appendChild(iframe);</div><div class=\"line\">    return;    </div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">RemoteCanvas.prototype.remotePageLoaded = function() &#123;</div><div class=\"line\">    // Look back up the iframe by id</div><div class=\"line\">    var ldrFrame = document.getElementById(&apos;test-iframe&apos;);</div><div class=\"line\">    // Get a reference to the window object you need for the canvas</div><div class=\"line\">    // drawWindow method</div><div class=\"line\">    var remoteWindow = ldrFrame.contentWindow;</div><div class=\"line\"></div><div class=\"line\">    //Draw canvas</div><div class=\"line\">    var canvas = document.createElement(&apos;canvas&apos;);</div><div class=\"line\">    canvas.style.width = RemoteCanvas.CANVAS_WIDTH + &apos;px&apos;;</div><div class=\"line\">    canvas.style.height = RemoteCanvas.CANVAS_HEIGHT + &apos;px&apos;;</div><div class=\"line\">    canvas.width = RemoteCanvas.CANVAS_WIDTH;</div><div class=\"line\">    canvas.height = RemoteCanvas.CANVAS_HEIGHT;</div><div class=\"line\">    var windowWidth = window.innerWidth - 25;</div><div class=\"line\">    var windowHeight = window.innerHeight;</div><div class=\"line\"></div><div class=\"line\">    var ctx = canvas.getContext(&apos;2d&apos;);</div><div class=\"line\">    ctx.clearRect(0, 0,</div><div class=\"line\">                  RemoteCanvas.CANVAS_WIDTH,</div><div class=\"line\">                  RemoteCanvas.CANVAS_HEIGHT);</div><div class=\"line\">    ctx.save();</div><div class=\"line\">    ctx.scale(RemoteCanvas.CANVAS_WIDTH / windowWidth,</div><div class=\"line\">              RemoteCanvas.CANVAS_HEIGHT / windowHeight);</div><div class=\"line\">    ctx.drawWindow(remoteWindow,</div><div class=\"line\">                   0, 0,</div><div class=\"line\">                   windowWidth, windowHeight,</div><div class=\"line\">                   &apos;rgb(255, 255, 255)&apos;);</div><div class=\"line\">    ctx.restore();</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>用法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">var remoteCanvas = new RemoteCanvas();</div><div class=\"line\">remoteCanvas.load();</div></pre></td></tr></table></figure></p>\n<h3 id=\"将图像文件转换为base64字符串\"><a href=\"#将图像文件转换为base64字符串\" class=\"headerlink\" title=\"将图像文件转换为base64字符串\"></a>将图像文件转换为base64字符串</h3><p>下面的代码获取远程图像，并转换其内容Data URI scheme。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">var canvas = document.createElement(&apos;canvas&apos;);</div><div class=\"line\">var ctxt = canvas.getContext(&apos;2d&apos;);</div><div class=\"line\">function loadImageFile(url, callback) &#123;</div><div class=\"line\">  var image = new Image();</div><div class=\"line\">  image.src = url;</div><div class=\"line\">  return new Promise((accept, reject) =&gt; &#123;</div><div class=\"line\">    image.onload = accept;</div><div class=\"line\">    image.onerror = reject;</div><div class=\"line\">  &#125;).then(accept =&gt; &#123;</div><div class=\"line\">    canvas.width = this.width;</div><div class=\"line\">    canvas.height = this.height;</div><div class=\"line\">    ctxt.clearRect(0, 0, this.width, this.height);</div><div class=\"line\">    ctxt.drawImage(this, 0, 0);</div><div class=\"line\">    accept(canvas.toDataURL());</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>用法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">loadImageFile(&apos;myimage.jpg&apos;).then(string64 =&gt; &#123; alert(string64); &#125;);</div></pre></td></tr></table></figure></p>"},{"title":"gulp构建","date":"2017-04-20T03:09:08.000Z","from":"原","_content":"\n#### 入门指南\n\n##### 1. 全局安装 gulp：\n```\n    $ npm install --global gulp\n```\n##### 2. 作为项目的开发依赖（devDependencies）安装：\n```\n    $ npm install --save-dev gulp\n```\n##### 3. 在项目根目录下创建一个名为 gulpfile.js 的文件：\n```\n    var gulp = require('gulp');\n\n    gulp.task('default', function() {\n      // 将你的默认的任务代码放在这\n    });\n```\n##### 4. 运行 gulp：\n```\n    $ gulp\n```\n<!--more-->\n\n```\nvar gulp        = require('gulp');\nvar browserSync = require('browser-sync');\n// 引入组件\nvar jshint = require('gulp-jshint');\nvar sass = require('gulp-sass');// 编译Sass\nvar concat = require('gulp-concat');\nvar uglify = require('gulp-uglify');\nvar rename = require('gulp-rename');\nvar connect = require('gulp-connect'); //自动刷新服务\nvar rev  = require('gulp-rev');//加MD5后缀\nvar revReplace = require('gulp-rev-replace');//替换引用的加了md5后缀的文件名，修改过，用来加cdn前缀\nvar minifyHtml = require('gulp-minify-html'); //压缩html\nvar minifyCss = require('gulp-minify-css');\nvar gulpif = require('gulp-if');\nvar  cssver = require('gulp-make-css-url-version'); //css url\nvar imagemin = require('gulp-imagemin');\nvar pngquant = require('imagemin-pngquant'); //png图片压缩插件\nvar spritesmith = require('gulp-spritesmith');\nvar spriter=require('gulp-css-spriter');\nvar condition = true;\nvar paths = {\n    scripts: './app/js/*.js',//js存放\n    scss:'./app/css/scss/*.scss',//scss存放\n    css:'./app/css/*.css',//看守的css目录\n    cssScss:'./app/css',//压缩sass存放的css目录\n    minCss:'./app/css/minCss',//压缩的minicss\n    rootJs:'./dist/js', //打包后js\n    rootCss:'./dist/css',//打包后css\n    minHtml:'./dist',//打包后html\n};\n// 检查脚本\ngulp.task('lint', function() {\n    return gulp.src(paths.scripts)\n        .pipe(jshint())\n        .pipe(jshint.reporter('default'));\n});\n// 编译Sass\ngulp.task('sass', function() {\n    gulp.src(paths.scss)\n        .pipe(sass())\n        .pipe(gulp.dest(paths.cssScss));\n});\n// 合并，压缩文件\ngulp.task('scripts', function() {\n    gulp.src(paths.scripts)\n        .pipe(concat('app.js'))\n        .pipe(gulp.dest(paths.rootJs))\n        .pipe(rename('app.min.js'))\n        .pipe(uglify())\n        .pipe(gulp.dest(paths.rootJs));\n});\n//浏览器监听刷新\ngulp.task('reload',function(){\n    gulp.src('./*.html').pipe(connect.reload());\n});\n//服务器自动刷新\ngulp.task('connect',function(){\n    connect.server({\n        port:3000,\n        livereload:true\n    })\n})\n//压缩Html/更新引入文件版本\ngulp.task('miniHtml', function () {\n  return gulp.src('./*.html')\n    //.pipe(revCollector())\n    .pipe(gulpif(\n      condition, minifyHtml({\n        empty: true,\n        spare: true,\n        quotes: true\n      })\n    ))\n    .pipe(gulp.dest(paths.minHtml));\n});\n//压缩/合并CSS\ngulp.task('miniCss', function () {\n    gulp.src(paths.css)\n        .pipe(minifyCss({\n            advanced: false,//类型：Boolean 默认：true [是否开启高级优化（合并选择器等）]\n            compatibility: 'ie7',//保留ie7及以下兼容写法 类型：String 默认：''or'*' [启用兼容模式； 'ie7'：IE7兼容模式，'ie8'：IE8兼容模式，'*'：IE9+兼容模式]\n            keepBreaks: true,//类型：Boolean 默认：false [是否保留换行]\n            keepSpecialComments: '*'\n            //保留所有特殊前缀 当你用autoprefixer生成的浏览器前缀，如果不加这个参数，有可能将会删除你的部分前缀\n        }))\n        .pipe(cssver())\n        .pipe(gulp.dest(paths.minCss));\n});\ngulp.task('minImage', function () {\n    return gulp.src('./app/images/*')\n        .pipe(imagemin({\n            progressive: true,\n            use: [pngquant()] //使用pngquant来压缩png图片\n        }))\n        .pipe(gulp.dest('./dist/images'));\n});\ngulp.task('sprite',function(){\n    var timestamp =+ new Date();\n    //需要自动合并雪碧图的样式文件\n    return gulp.src('./app/css/*.css')\n    .pipe(spriter({\n        //生成的spriter的位置\n        'spriteSheet':'./dist/images/sprite/sprite'+timestamp+'.png',\n        //生成样式文件图片引用地址的路径\n        //如下将生产：backgound:url(../images/sprite20324232.png)\n        'pathToSpriteSheetFromCSS':'../images/sprite'+timestamp+'.png'\n    }))\n    .pipe(minifyCss())\n    //产出路径\n    .pipe(gulp.dest('./dist/css/sprite'));\n});\n//监听文件状态\ngulp.task('watch', function() {\n    gulp.watch(\"./*.html\",['reload']);\n});\ngulp.task('default',['watch','scripts','sass','lint','connect','miniHtml','miniCss','minImage','sprite']);\n```\n","source":"_posts/gulp构建.md","raw":"---\ntitle: gulp构建\ntags:\n  - '构建打包'\n  - 'gulp'\ncategories:\n  - '前端'\n  - '构建打包'\n  - 'gulp'\ndate: 2017-04-20 11:09:08\nfrom: '原'\n---\n\n#### 入门指南\n\n##### 1. 全局安装 gulp：\n```\n    $ npm install --global gulp\n```\n##### 2. 作为项目的开发依赖（devDependencies）安装：\n```\n    $ npm install --save-dev gulp\n```\n##### 3. 在项目根目录下创建一个名为 gulpfile.js 的文件：\n```\n    var gulp = require('gulp');\n\n    gulp.task('default', function() {\n      // 将你的默认的任务代码放在这\n    });\n```\n##### 4. 运行 gulp：\n```\n    $ gulp\n```\n<!--more-->\n\n```\nvar gulp        = require('gulp');\nvar browserSync = require('browser-sync');\n// 引入组件\nvar jshint = require('gulp-jshint');\nvar sass = require('gulp-sass');// 编译Sass\nvar concat = require('gulp-concat');\nvar uglify = require('gulp-uglify');\nvar rename = require('gulp-rename');\nvar connect = require('gulp-connect'); //自动刷新服务\nvar rev  = require('gulp-rev');//加MD5后缀\nvar revReplace = require('gulp-rev-replace');//替换引用的加了md5后缀的文件名，修改过，用来加cdn前缀\nvar minifyHtml = require('gulp-minify-html'); //压缩html\nvar minifyCss = require('gulp-minify-css');\nvar gulpif = require('gulp-if');\nvar  cssver = require('gulp-make-css-url-version'); //css url\nvar imagemin = require('gulp-imagemin');\nvar pngquant = require('imagemin-pngquant'); //png图片压缩插件\nvar spritesmith = require('gulp-spritesmith');\nvar spriter=require('gulp-css-spriter');\nvar condition = true;\nvar paths = {\n    scripts: './app/js/*.js',//js存放\n    scss:'./app/css/scss/*.scss',//scss存放\n    css:'./app/css/*.css',//看守的css目录\n    cssScss:'./app/css',//压缩sass存放的css目录\n    minCss:'./app/css/minCss',//压缩的minicss\n    rootJs:'./dist/js', //打包后js\n    rootCss:'./dist/css',//打包后css\n    minHtml:'./dist',//打包后html\n};\n// 检查脚本\ngulp.task('lint', function() {\n    return gulp.src(paths.scripts)\n        .pipe(jshint())\n        .pipe(jshint.reporter('default'));\n});\n// 编译Sass\ngulp.task('sass', function() {\n    gulp.src(paths.scss)\n        .pipe(sass())\n        .pipe(gulp.dest(paths.cssScss));\n});\n// 合并，压缩文件\ngulp.task('scripts', function() {\n    gulp.src(paths.scripts)\n        .pipe(concat('app.js'))\n        .pipe(gulp.dest(paths.rootJs))\n        .pipe(rename('app.min.js'))\n        .pipe(uglify())\n        .pipe(gulp.dest(paths.rootJs));\n});\n//浏览器监听刷新\ngulp.task('reload',function(){\n    gulp.src('./*.html').pipe(connect.reload());\n});\n//服务器自动刷新\ngulp.task('connect',function(){\n    connect.server({\n        port:3000,\n        livereload:true\n    })\n})\n//压缩Html/更新引入文件版本\ngulp.task('miniHtml', function () {\n  return gulp.src('./*.html')\n    //.pipe(revCollector())\n    .pipe(gulpif(\n      condition, minifyHtml({\n        empty: true,\n        spare: true,\n        quotes: true\n      })\n    ))\n    .pipe(gulp.dest(paths.minHtml));\n});\n//压缩/合并CSS\ngulp.task('miniCss', function () {\n    gulp.src(paths.css)\n        .pipe(minifyCss({\n            advanced: false,//类型：Boolean 默认：true [是否开启高级优化（合并选择器等）]\n            compatibility: 'ie7',//保留ie7及以下兼容写法 类型：String 默认：''or'*' [启用兼容模式； 'ie7'：IE7兼容模式，'ie8'：IE8兼容模式，'*'：IE9+兼容模式]\n            keepBreaks: true,//类型：Boolean 默认：false [是否保留换行]\n            keepSpecialComments: '*'\n            //保留所有特殊前缀 当你用autoprefixer生成的浏览器前缀，如果不加这个参数，有可能将会删除你的部分前缀\n        }))\n        .pipe(cssver())\n        .pipe(gulp.dest(paths.minCss));\n});\ngulp.task('minImage', function () {\n    return gulp.src('./app/images/*')\n        .pipe(imagemin({\n            progressive: true,\n            use: [pngquant()] //使用pngquant来压缩png图片\n        }))\n        .pipe(gulp.dest('./dist/images'));\n});\ngulp.task('sprite',function(){\n    var timestamp =+ new Date();\n    //需要自动合并雪碧图的样式文件\n    return gulp.src('./app/css/*.css')\n    .pipe(spriter({\n        //生成的spriter的位置\n        'spriteSheet':'./dist/images/sprite/sprite'+timestamp+'.png',\n        //生成样式文件图片引用地址的路径\n        //如下将生产：backgound:url(../images/sprite20324232.png)\n        'pathToSpriteSheetFromCSS':'../images/sprite'+timestamp+'.png'\n    }))\n    .pipe(minifyCss())\n    //产出路径\n    .pipe(gulp.dest('./dist/css/sprite'));\n});\n//监听文件状态\ngulp.task('watch', function() {\n    gulp.watch(\"./*.html\",['reload']);\n});\ngulp.task('default',['watch','scripts','sass','lint','connect','miniHtml','miniCss','minImage','sprite']);\n```\n","slug":"gulp构建","published":1,"updated":"2017-07-27T02:10:25.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5naxw3x000afcxe57bhss4c","content":"<h4 id=\"入门指南\"><a href=\"#入门指南\" class=\"headerlink\" title=\"入门指南\"></a>入门指南</h4><h5 id=\"1-全局安装-gulp：\"><a href=\"#1-全局安装-gulp：\" class=\"headerlink\" title=\"1. 全局安装 gulp：\"></a>1. 全局安装 gulp：</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install --global gulp</div></pre></td></tr></table></figure>\n<h5 id=\"2-作为项目的开发依赖（devDependencies）安装：\"><a href=\"#2-作为项目的开发依赖（devDependencies）安装：\" class=\"headerlink\" title=\"2. 作为项目的开发依赖（devDependencies）安装：\"></a>2. 作为项目的开发依赖（devDependencies）安装：</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install --save-dev gulp</div></pre></td></tr></table></figure>\n<h5 id=\"3-在项目根目录下创建一个名为-gulpfile-js-的文件：\"><a href=\"#3-在项目根目录下创建一个名为-gulpfile-js-的文件：\" class=\"headerlink\" title=\"3. 在项目根目录下创建一个名为 gulpfile.js 的文件：\"></a>3. 在项目根目录下创建一个名为 gulpfile.js 的文件：</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">var gulp = require(&apos;gulp&apos;);</div><div class=\"line\"></div><div class=\"line\">gulp.task(&apos;default&apos;, function() &#123;</div><div class=\"line\">  // 将你的默认的任务代码放在这</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h5 id=\"4-运行-gulp：\"><a href=\"#4-运行-gulp：\" class=\"headerlink\" title=\"4. 运行 gulp：\"></a>4. 运行 gulp：</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ gulp</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div></pre></td><td class=\"code\"><pre><div class=\"line\">var gulp        = require(&apos;gulp&apos;);</div><div class=\"line\">var browserSync = require(&apos;browser-sync&apos;);</div><div class=\"line\">// 引入组件</div><div class=\"line\">var jshint = require(&apos;gulp-jshint&apos;);</div><div class=\"line\">var sass = require(&apos;gulp-sass&apos;);// 编译Sass</div><div class=\"line\">var concat = require(&apos;gulp-concat&apos;);</div><div class=\"line\">var uglify = require(&apos;gulp-uglify&apos;);</div><div class=\"line\">var rename = require(&apos;gulp-rename&apos;);</div><div class=\"line\">var connect = require(&apos;gulp-connect&apos;); //自动刷新服务</div><div class=\"line\">var rev  = require(&apos;gulp-rev&apos;);//加MD5后缀</div><div class=\"line\">var revReplace = require(&apos;gulp-rev-replace&apos;);//替换引用的加了md5后缀的文件名，修改过，用来加cdn前缀</div><div class=\"line\">var minifyHtml = require(&apos;gulp-minify-html&apos;); //压缩html</div><div class=\"line\">var minifyCss = require(&apos;gulp-minify-css&apos;);</div><div class=\"line\">var gulpif = require(&apos;gulp-if&apos;);</div><div class=\"line\">var  cssver = require(&apos;gulp-make-css-url-version&apos;); //css url</div><div class=\"line\">var imagemin = require(&apos;gulp-imagemin&apos;);</div><div class=\"line\">var pngquant = require(&apos;imagemin-pngquant&apos;); //png图片压缩插件</div><div class=\"line\">var spritesmith = require(&apos;gulp-spritesmith&apos;);</div><div class=\"line\">var spriter=require(&apos;gulp-css-spriter&apos;);</div><div class=\"line\">var condition = true;</div><div class=\"line\">var paths = &#123;</div><div class=\"line\">    scripts: &apos;./app/js/*.js&apos;,//js存放</div><div class=\"line\">    scss:&apos;./app/css/scss/*.scss&apos;,//scss存放</div><div class=\"line\">    css:&apos;./app/css/*.css&apos;,//看守的css目录</div><div class=\"line\">    cssScss:&apos;./app/css&apos;,//压缩sass存放的css目录</div><div class=\"line\">    minCss:&apos;./app/css/minCss&apos;,//压缩的minicss</div><div class=\"line\">    rootJs:&apos;./dist/js&apos;, //打包后js</div><div class=\"line\">    rootCss:&apos;./dist/css&apos;,//打包后css</div><div class=\"line\">    minHtml:&apos;./dist&apos;,//打包后html</div><div class=\"line\">&#125;;</div><div class=\"line\">// 检查脚本</div><div class=\"line\">gulp.task(&apos;lint&apos;, function() &#123;</div><div class=\"line\">    return gulp.src(paths.scripts)</div><div class=\"line\">        .pipe(jshint())</div><div class=\"line\">        .pipe(jshint.reporter(&apos;default&apos;));</div><div class=\"line\">&#125;);</div><div class=\"line\">// 编译Sass</div><div class=\"line\">gulp.task(&apos;sass&apos;, function() &#123;</div><div class=\"line\">    gulp.src(paths.scss)</div><div class=\"line\">        .pipe(sass())</div><div class=\"line\">        .pipe(gulp.dest(paths.cssScss));</div><div class=\"line\">&#125;);</div><div class=\"line\">// 合并，压缩文件</div><div class=\"line\">gulp.task(&apos;scripts&apos;, function() &#123;</div><div class=\"line\">    gulp.src(paths.scripts)</div><div class=\"line\">        .pipe(concat(&apos;app.js&apos;))</div><div class=\"line\">        .pipe(gulp.dest(paths.rootJs))</div><div class=\"line\">        .pipe(rename(&apos;app.min.js&apos;))</div><div class=\"line\">        .pipe(uglify())</div><div class=\"line\">        .pipe(gulp.dest(paths.rootJs));</div><div class=\"line\">&#125;);</div><div class=\"line\">//浏览器监听刷新</div><div class=\"line\">gulp.task(&apos;reload&apos;,function()&#123;</div><div class=\"line\">    gulp.src(&apos;./*.html&apos;).pipe(connect.reload());</div><div class=\"line\">&#125;);</div><div class=\"line\">//服务器自动刷新</div><div class=\"line\">gulp.task(&apos;connect&apos;,function()&#123;</div><div class=\"line\">    connect.server(&#123;</div><div class=\"line\">        port:3000,</div><div class=\"line\">        livereload:true</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;)</div><div class=\"line\">//压缩Html/更新引入文件版本</div><div class=\"line\">gulp.task(&apos;miniHtml&apos;, function () &#123;</div><div class=\"line\">  return gulp.src(&apos;./*.html&apos;)</div><div class=\"line\">    //.pipe(revCollector())</div><div class=\"line\">    .pipe(gulpif(</div><div class=\"line\">      condition, minifyHtml(&#123;</div><div class=\"line\">        empty: true,</div><div class=\"line\">        spare: true,</div><div class=\"line\">        quotes: true</div><div class=\"line\">      &#125;)</div><div class=\"line\">    ))</div><div class=\"line\">    .pipe(gulp.dest(paths.minHtml));</div><div class=\"line\">&#125;);</div><div class=\"line\">//压缩/合并CSS</div><div class=\"line\">gulp.task(&apos;miniCss&apos;, function () &#123;</div><div class=\"line\">    gulp.src(paths.css)</div><div class=\"line\">        .pipe(minifyCss(&#123;</div><div class=\"line\">            advanced: false,//类型：Boolean 默认：true [是否开启高级优化（合并选择器等）]</div><div class=\"line\">            compatibility: &apos;ie7&apos;,//保留ie7及以下兼容写法 类型：String 默认：&apos;&apos;or&apos;*&apos; [启用兼容模式； &apos;ie7&apos;：IE7兼容模式，&apos;ie8&apos;：IE8兼容模式，&apos;*&apos;：IE9+兼容模式]</div><div class=\"line\">            keepBreaks: true,//类型：Boolean 默认：false [是否保留换行]</div><div class=\"line\">            keepSpecialComments: &apos;*&apos;</div><div class=\"line\">            //保留所有特殊前缀 当你用autoprefixer生成的浏览器前缀，如果不加这个参数，有可能将会删除你的部分前缀</div><div class=\"line\">        &#125;))</div><div class=\"line\">        .pipe(cssver())</div><div class=\"line\">        .pipe(gulp.dest(paths.minCss));</div><div class=\"line\">&#125;);</div><div class=\"line\">gulp.task(&apos;minImage&apos;, function () &#123;</div><div class=\"line\">    return gulp.src(&apos;./app/images/*&apos;)</div><div class=\"line\">        .pipe(imagemin(&#123;</div><div class=\"line\">            progressive: true,</div><div class=\"line\">            use: [pngquant()] //使用pngquant来压缩png图片</div><div class=\"line\">        &#125;))</div><div class=\"line\">        .pipe(gulp.dest(&apos;./dist/images&apos;));</div><div class=\"line\">&#125;);</div><div class=\"line\">gulp.task(&apos;sprite&apos;,function()&#123;</div><div class=\"line\">    var timestamp =+ new Date();</div><div class=\"line\">    //需要自动合并雪碧图的样式文件</div><div class=\"line\">    return gulp.src(&apos;./app/css/*.css&apos;)</div><div class=\"line\">    .pipe(spriter(&#123;</div><div class=\"line\">        //生成的spriter的位置</div><div class=\"line\">        &apos;spriteSheet&apos;:&apos;./dist/images/sprite/sprite&apos;+timestamp+&apos;.png&apos;,</div><div class=\"line\">        //生成样式文件图片引用地址的路径</div><div class=\"line\">        //如下将生产：backgound:url(../images/sprite20324232.png)</div><div class=\"line\">        &apos;pathToSpriteSheetFromCSS&apos;:&apos;../images/sprite&apos;+timestamp+&apos;.png&apos;</div><div class=\"line\">    &#125;))</div><div class=\"line\">    .pipe(minifyCss())</div><div class=\"line\">    //产出路径</div><div class=\"line\">    .pipe(gulp.dest(&apos;./dist/css/sprite&apos;));</div><div class=\"line\">&#125;);</div><div class=\"line\">//监听文件状态</div><div class=\"line\">gulp.task(&apos;watch&apos;, function() &#123;</div><div class=\"line\">    gulp.watch(&quot;./*.html&quot;,[&apos;reload&apos;]);</div><div class=\"line\">&#125;);</div><div class=\"line\">gulp.task(&apos;default&apos;,[&apos;watch&apos;,&apos;scripts&apos;,&apos;sass&apos;,&apos;lint&apos;,&apos;connect&apos;,&apos;miniHtml&apos;,&apos;miniCss&apos;,&apos;minImage&apos;,&apos;sprite&apos;]);</div></pre></td></tr></table></figure>\n","excerpt":"<h4 id=\"入门指南\"><a href=\"#入门指南\" class=\"headerlink\" title=\"入门指南\"></a>入门指南</h4><h5 id=\"1-全局安装-gulp：\"><a href=\"#1-全局安装-gulp：\" class=\"headerlink\" title=\"1. 全局安装 gulp：\"></a>1. 全局安装 gulp：</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install --global gulp</div></pre></td></tr></table></figure>\n<h5 id=\"2-作为项目的开发依赖（devDependencies）安装：\"><a href=\"#2-作为项目的开发依赖（devDependencies）安装：\" class=\"headerlink\" title=\"2. 作为项目的开发依赖（devDependencies）安装：\"></a>2. 作为项目的开发依赖（devDependencies）安装：</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install --save-dev gulp</div></pre></td></tr></table></figure>\n<h5 id=\"3-在项目根目录下创建一个名为-gulpfile-js-的文件：\"><a href=\"#3-在项目根目录下创建一个名为-gulpfile-js-的文件：\" class=\"headerlink\" title=\"3. 在项目根目录下创建一个名为 gulpfile.js 的文件：\"></a>3. 在项目根目录下创建一个名为 gulpfile.js 的文件：</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">var gulp = require(&apos;gulp&apos;);</div><div class=\"line\"></div><div class=\"line\">gulp.task(&apos;default&apos;, function() &#123;</div><div class=\"line\">  // 将你的默认的任务代码放在这</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h5 id=\"4-运行-gulp：\"><a href=\"#4-运行-gulp：\" class=\"headerlink\" title=\"4. 运行 gulp：\"></a>4. 运行 gulp：</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ gulp</div></pre></td></tr></table></figure>","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div></pre></td><td class=\"code\"><pre><div class=\"line\">var gulp        = require(&apos;gulp&apos;);</div><div class=\"line\">var browserSync = require(&apos;browser-sync&apos;);</div><div class=\"line\">// 引入组件</div><div class=\"line\">var jshint = require(&apos;gulp-jshint&apos;);</div><div class=\"line\">var sass = require(&apos;gulp-sass&apos;);// 编译Sass</div><div class=\"line\">var concat = require(&apos;gulp-concat&apos;);</div><div class=\"line\">var uglify = require(&apos;gulp-uglify&apos;);</div><div class=\"line\">var rename = require(&apos;gulp-rename&apos;);</div><div class=\"line\">var connect = require(&apos;gulp-connect&apos;); //自动刷新服务</div><div class=\"line\">var rev  = require(&apos;gulp-rev&apos;);//加MD5后缀</div><div class=\"line\">var revReplace = require(&apos;gulp-rev-replace&apos;);//替换引用的加了md5后缀的文件名，修改过，用来加cdn前缀</div><div class=\"line\">var minifyHtml = require(&apos;gulp-minify-html&apos;); //压缩html</div><div class=\"line\">var minifyCss = require(&apos;gulp-minify-css&apos;);</div><div class=\"line\">var gulpif = require(&apos;gulp-if&apos;);</div><div class=\"line\">var  cssver = require(&apos;gulp-make-css-url-version&apos;); //css url</div><div class=\"line\">var imagemin = require(&apos;gulp-imagemin&apos;);</div><div class=\"line\">var pngquant = require(&apos;imagemin-pngquant&apos;); //png图片压缩插件</div><div class=\"line\">var spritesmith = require(&apos;gulp-spritesmith&apos;);</div><div class=\"line\">var spriter=require(&apos;gulp-css-spriter&apos;);</div><div class=\"line\">var condition = true;</div><div class=\"line\">var paths = &#123;</div><div class=\"line\">    scripts: &apos;./app/js/*.js&apos;,//js存放</div><div class=\"line\">    scss:&apos;./app/css/scss/*.scss&apos;,//scss存放</div><div class=\"line\">    css:&apos;./app/css/*.css&apos;,//看守的css目录</div><div class=\"line\">    cssScss:&apos;./app/css&apos;,//压缩sass存放的css目录</div><div class=\"line\">    minCss:&apos;./app/css/minCss&apos;,//压缩的minicss</div><div class=\"line\">    rootJs:&apos;./dist/js&apos;, //打包后js</div><div class=\"line\">    rootCss:&apos;./dist/css&apos;,//打包后css</div><div class=\"line\">    minHtml:&apos;./dist&apos;,//打包后html</div><div class=\"line\">&#125;;</div><div class=\"line\">// 检查脚本</div><div class=\"line\">gulp.task(&apos;lint&apos;, function() &#123;</div><div class=\"line\">    return gulp.src(paths.scripts)</div><div class=\"line\">        .pipe(jshint())</div><div class=\"line\">        .pipe(jshint.reporter(&apos;default&apos;));</div><div class=\"line\">&#125;);</div><div class=\"line\">// 编译Sass</div><div class=\"line\">gulp.task(&apos;sass&apos;, function() &#123;</div><div class=\"line\">    gulp.src(paths.scss)</div><div class=\"line\">        .pipe(sass())</div><div class=\"line\">        .pipe(gulp.dest(paths.cssScss));</div><div class=\"line\">&#125;);</div><div class=\"line\">// 合并，压缩文件</div><div class=\"line\">gulp.task(&apos;scripts&apos;, function() &#123;</div><div class=\"line\">    gulp.src(paths.scripts)</div><div class=\"line\">        .pipe(concat(&apos;app.js&apos;))</div><div class=\"line\">        .pipe(gulp.dest(paths.rootJs))</div><div class=\"line\">        .pipe(rename(&apos;app.min.js&apos;))</div><div class=\"line\">        .pipe(uglify())</div><div class=\"line\">        .pipe(gulp.dest(paths.rootJs));</div><div class=\"line\">&#125;);</div><div class=\"line\">//浏览器监听刷新</div><div class=\"line\">gulp.task(&apos;reload&apos;,function()&#123;</div><div class=\"line\">    gulp.src(&apos;./*.html&apos;).pipe(connect.reload());</div><div class=\"line\">&#125;);</div><div class=\"line\">//服务器自动刷新</div><div class=\"line\">gulp.task(&apos;connect&apos;,function()&#123;</div><div class=\"line\">    connect.server(&#123;</div><div class=\"line\">        port:3000,</div><div class=\"line\">        livereload:true</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;)</div><div class=\"line\">//压缩Html/更新引入文件版本</div><div class=\"line\">gulp.task(&apos;miniHtml&apos;, function () &#123;</div><div class=\"line\">  return gulp.src(&apos;./*.html&apos;)</div><div class=\"line\">    //.pipe(revCollector())</div><div class=\"line\">    .pipe(gulpif(</div><div class=\"line\">      condition, minifyHtml(&#123;</div><div class=\"line\">        empty: true,</div><div class=\"line\">        spare: true,</div><div class=\"line\">        quotes: true</div><div class=\"line\">      &#125;)</div><div class=\"line\">    ))</div><div class=\"line\">    .pipe(gulp.dest(paths.minHtml));</div><div class=\"line\">&#125;);</div><div class=\"line\">//压缩/合并CSS</div><div class=\"line\">gulp.task(&apos;miniCss&apos;, function () &#123;</div><div class=\"line\">    gulp.src(paths.css)</div><div class=\"line\">        .pipe(minifyCss(&#123;</div><div class=\"line\">            advanced: false,//类型：Boolean 默认：true [是否开启高级优化（合并选择器等）]</div><div class=\"line\">            compatibility: &apos;ie7&apos;,//保留ie7及以下兼容写法 类型：String 默认：&apos;&apos;or&apos;*&apos; [启用兼容模式； &apos;ie7&apos;：IE7兼容模式，&apos;ie8&apos;：IE8兼容模式，&apos;*&apos;：IE9+兼容模式]</div><div class=\"line\">            keepBreaks: true,//类型：Boolean 默认：false [是否保留换行]</div><div class=\"line\">            keepSpecialComments: &apos;*&apos;</div><div class=\"line\">            //保留所有特殊前缀 当你用autoprefixer生成的浏览器前缀，如果不加这个参数，有可能将会删除你的部分前缀</div><div class=\"line\">        &#125;))</div><div class=\"line\">        .pipe(cssver())</div><div class=\"line\">        .pipe(gulp.dest(paths.minCss));</div><div class=\"line\">&#125;);</div><div class=\"line\">gulp.task(&apos;minImage&apos;, function () &#123;</div><div class=\"line\">    return gulp.src(&apos;./app/images/*&apos;)</div><div class=\"line\">        .pipe(imagemin(&#123;</div><div class=\"line\">            progressive: true,</div><div class=\"line\">            use: [pngquant()] //使用pngquant来压缩png图片</div><div class=\"line\">        &#125;))</div><div class=\"line\">        .pipe(gulp.dest(&apos;./dist/images&apos;));</div><div class=\"line\">&#125;);</div><div class=\"line\">gulp.task(&apos;sprite&apos;,function()&#123;</div><div class=\"line\">    var timestamp =+ new Date();</div><div class=\"line\">    //需要自动合并雪碧图的样式文件</div><div class=\"line\">    return gulp.src(&apos;./app/css/*.css&apos;)</div><div class=\"line\">    .pipe(spriter(&#123;</div><div class=\"line\">        //生成的spriter的位置</div><div class=\"line\">        &apos;spriteSheet&apos;:&apos;./dist/images/sprite/sprite&apos;+timestamp+&apos;.png&apos;,</div><div class=\"line\">        //生成样式文件图片引用地址的路径</div><div class=\"line\">        //如下将生产：backgound:url(../images/sprite20324232.png)</div><div class=\"line\">        &apos;pathToSpriteSheetFromCSS&apos;:&apos;../images/sprite&apos;+timestamp+&apos;.png&apos;</div><div class=\"line\">    &#125;))</div><div class=\"line\">    .pipe(minifyCss())</div><div class=\"line\">    //产出路径</div><div class=\"line\">    .pipe(gulp.dest(&apos;./dist/css/sprite&apos;));</div><div class=\"line\">&#125;);</div><div class=\"line\">//监听文件状态</div><div class=\"line\">gulp.task(&apos;watch&apos;, function() &#123;</div><div class=\"line\">    gulp.watch(&quot;./*.html&quot;,[&apos;reload&apos;]);</div><div class=\"line\">&#125;);</div><div class=\"line\">gulp.task(&apos;default&apos;,[&apos;watch&apos;,&apos;scripts&apos;,&apos;sass&apos;,&apos;lint&apos;,&apos;connect&apos;,&apos;miniHtml&apos;,&apos;miniCss&apos;,&apos;minImage&apos;,&apos;sprite&apos;]);</div></pre></td></tr></table></figure>"},{"title":"Hello World","type":"tags","_content":"\n## 环境准备\n需要git,Node.js环境\n\n安装hexo\n利用 npm 命令即可安装。（在任意位置点击鼠标右键，选择Git bash）\n\n```\nnpm install -g hexo\n```\n创建hexo文件夹\n选择存放hexo文件的位置,执行以下指令(Git bash终端下)，Hexo即会自动在目标文件夹建立网站所需要的所有文件。\n\n<!--more-->\n```\nhexo init\n```\n安装依赖包\n```\nnpm install\n```\n本地查看\n现在我们已经搭建起本地的hexo博客了，执行以下命令(在hexo文件下)，然后到浏览器输入localhost:4000看看。\n\n```\nhexo generate #此命令是生成静态页面，不执行该命令也可以\nhexo server\n```\n到此，本地服务以及搭建好了。\n\n打包上传到github\n如果没有github账户，则需要注册\n\n创建仓库，配置ssh秘钥\n\n注意：Repository name命名规则：你的github账号.github.io (这个一定要这么命名，具体我也不清楚)\n\nhexo使用\n目录结构\n```\n├── .deploy #需要部署的文件\n├── node_modules #Hexo插件\n├── public #生成的静态网页文件\n├── scaffolds #模板\n├── source #博客正文和其他源文件，404、favicon、CNAME\n├── _drafts #草稿\n├── _posts #文章,可以用子文件来存放文章\n├── themes #主题\n├── _config.yml #全局配置文件\n└── package.json\n```\n\n配置文件的冒号“:”后面有一个空格\nrepo: 刚刚github创库地址.git\nhexo命令行使用\n```\nhexo help #查看帮助\nhexo init #初始化一个目录\nhexo new \"postName\" #新建文章\nhexo new page \"pageName\" #新建页面\nhexo generate #生成网页，可以在 public 目录查看整个网站的文件\nhexo server #本地预览，'Ctrl+C'关闭\nhexo deploy #部署.deploy目录\nhexo clean #清除缓存，**强烈建议每次执行命令前先清理缓存，每次部署前先删除 .deploy 文件夹**\n```\n简写\n\n```\nhexo n == hexo new\nhexo g == hexo generate\nhexo s == hexo server\nhexo d == hexo deploy\n```\n编辑文章\n新建文章\n```\nhexo new \"标题\"\n```\n在 _posts 目录下会生成文件 标题.md\n```\ntitle: Hello World\ndate: 2015-07-30 07:56:29 #发表日期，一般不改动\ncategories: hexo #文章文类\ntags: [hexo,github] #文章标签，多于一项时用这种格式\n---\n正文，使用Markdown语法书写\n编辑完后保存，hexo server 预览\nhexo部署\n\n执行下列指令即可完成部署。\n```\n```\nhexo generate\nhexo deploy\nhexo deploy问题：Deployer not found: git\n```\n\n\n```\nnpm install hexo-deployer-git --save\n```\n重新deploy即可\n\n图片\n我这里是使用本地的图片\n\n安装\n\n```\nnpm install hexo-asset-image --save\n```\n安装该插件后，每次hexo new 新建博文后，会在该文件同级目录下生成一个和文件同名的文件夹，该文件夹就是用来存放图片的\n确保你的_config.yml 配置 post_asset_folder: true\n然后使用\n```\n![logo](logo.jpg)\n```\n在博文中插入logo.jpg.\n\n来源：\nhttp://wuxiaolong.me/2015/07/31/build-blog-by-hexo/\nhttp://www.tuicool.com/articles/umEBVfI\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ntype: \"tags\"\ncategories:\n    - '部署'\n    - '博客系统搭建'\ntags: [hexo]\n---\n\n## 环境准备\n需要git,Node.js环境\n\n安装hexo\n利用 npm 命令即可安装。（在任意位置点击鼠标右键，选择Git bash）\n\n```\nnpm install -g hexo\n```\n创建hexo文件夹\n选择存放hexo文件的位置,执行以下指令(Git bash终端下)，Hexo即会自动在目标文件夹建立网站所需要的所有文件。\n\n<!--more-->\n```\nhexo init\n```\n安装依赖包\n```\nnpm install\n```\n本地查看\n现在我们已经搭建起本地的hexo博客了，执行以下命令(在hexo文件下)，然后到浏览器输入localhost:4000看看。\n\n```\nhexo generate #此命令是生成静态页面，不执行该命令也可以\nhexo server\n```\n到此，本地服务以及搭建好了。\n\n打包上传到github\n如果没有github账户，则需要注册\n\n创建仓库，配置ssh秘钥\n\n注意：Repository name命名规则：你的github账号.github.io (这个一定要这么命名，具体我也不清楚)\n\nhexo使用\n目录结构\n```\n├── .deploy #需要部署的文件\n├── node_modules #Hexo插件\n├── public #生成的静态网页文件\n├── scaffolds #模板\n├── source #博客正文和其他源文件，404、favicon、CNAME\n├── _drafts #草稿\n├── _posts #文章,可以用子文件来存放文章\n├── themes #主题\n├── _config.yml #全局配置文件\n└── package.json\n```\n\n配置文件的冒号“:”后面有一个空格\nrepo: 刚刚github创库地址.git\nhexo命令行使用\n```\nhexo help #查看帮助\nhexo init #初始化一个目录\nhexo new \"postName\" #新建文章\nhexo new page \"pageName\" #新建页面\nhexo generate #生成网页，可以在 public 目录查看整个网站的文件\nhexo server #本地预览，'Ctrl+C'关闭\nhexo deploy #部署.deploy目录\nhexo clean #清除缓存，**强烈建议每次执行命令前先清理缓存，每次部署前先删除 .deploy 文件夹**\n```\n简写\n\n```\nhexo n == hexo new\nhexo g == hexo generate\nhexo s == hexo server\nhexo d == hexo deploy\n```\n编辑文章\n新建文章\n```\nhexo new \"标题\"\n```\n在 _posts 目录下会生成文件 标题.md\n```\ntitle: Hello World\ndate: 2015-07-30 07:56:29 #发表日期，一般不改动\ncategories: hexo #文章文类\ntags: [hexo,github] #文章标签，多于一项时用这种格式\n---\n正文，使用Markdown语法书写\n编辑完后保存，hexo server 预览\nhexo部署\n\n执行下列指令即可完成部署。\n```\n```\nhexo generate\nhexo deploy\nhexo deploy问题：Deployer not found: git\n```\n\n\n```\nnpm install hexo-deployer-git --save\n```\n重新deploy即可\n\n图片\n我这里是使用本地的图片\n\n安装\n\n```\nnpm install hexo-asset-image --save\n```\n安装该插件后，每次hexo new 新建博文后，会在该文件同级目录下生成一个和文件同名的文件夹，该文件夹就是用来存放图片的\n确保你的_config.yml 配置 post_asset_folder: true\n然后使用\n```\n![logo](logo.jpg)\n```\n在博文中插入logo.jpg.\n\n来源：\nhttp://wuxiaolong.me/2015/07/31/build-blog-by-hexo/\nhttp://www.tuicool.com/articles/umEBVfI\n","slug":"hello-world","published":1,"date":"2017-03-09T14:28:32.000Z","updated":"2017-04-15T03:27:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5naxw41000efcxe8n9us1zh","content":"<h2 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h2><p>需要git,Node.js环境</p>\n<p>安装hexo<br>利用 npm 命令即可安装。（在任意位置点击鼠标右键，选择Git bash）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g hexo</div></pre></td></tr></table></figure>\n<p>创建hexo文件夹<br>选择存放hexo文件的位置,执行以下指令(Git bash终端下)，Hexo即会自动在目标文件夹建立网站所需要的所有文件。</p>\n<a id=\"more\"></a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo init</div></pre></td></tr></table></figure>\n<p>安装依赖包<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install</div></pre></td></tr></table></figure></p>\n<p>本地查看<br>现在我们已经搭建起本地的hexo博客了，执行以下命令(在hexo文件下)，然后到浏览器输入localhost:4000看看。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo generate #此命令是生成静态页面，不执行该命令也可以</div><div class=\"line\">hexo server</div></pre></td></tr></table></figure>\n<p>到此，本地服务以及搭建好了。</p>\n<p>打包上传到github<br>如果没有github账户，则需要注册</p>\n<p>创建仓库，配置ssh秘钥</p>\n<p>注意：Repository name命名规则：你的github账号.github.io (这个一定要这么命名，具体我也不清楚)</p>\n<p>hexo使用<br>目录结构<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">├── .deploy #需要部署的文件</div><div class=\"line\">├── node_modules #Hexo插件</div><div class=\"line\">├── public #生成的静态网页文件</div><div class=\"line\">├── scaffolds #模板</div><div class=\"line\">├── source #博客正文和其他源文件，404、favicon、CNAME</div><div class=\"line\">├── _drafts #草稿</div><div class=\"line\">├── _posts #文章,可以用子文件来存放文章</div><div class=\"line\">├── themes #主题</div><div class=\"line\">├── _config.yml #全局配置文件</div><div class=\"line\">└── package.json</div></pre></td></tr></table></figure></p>\n<p>配置文件的冒号“:”后面有一个空格<br>repo: 刚刚github创库地址.git<br>hexo命令行使用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo help #查看帮助</div><div class=\"line\">hexo init #初始化一个目录</div><div class=\"line\">hexo new &quot;postName&quot; #新建文章</div><div class=\"line\">hexo new page &quot;pageName&quot; #新建页面</div><div class=\"line\">hexo generate #生成网页，可以在 public 目录查看整个网站的文件</div><div class=\"line\">hexo server #本地预览，&apos;Ctrl+C&apos;关闭</div><div class=\"line\">hexo deploy #部署.deploy目录</div><div class=\"line\">hexo clean #清除缓存，**强烈建议每次执行命令前先清理缓存，每次部署前先删除 .deploy 文件夹**</div></pre></td></tr></table></figure></p>\n<p>简写</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo n == hexo new</div><div class=\"line\">hexo g == hexo generate</div><div class=\"line\">hexo s == hexo server</div><div class=\"line\">hexo d == hexo deploy</div></pre></td></tr></table></figure>\n<p>编辑文章<br>新建文章<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo new &quot;标题&quot;</div></pre></td></tr></table></figure></p>\n<p>在 _posts 目录下会生成文件 标题.md<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">title: Hello World</div><div class=\"line\">date: 2015-07-30 07:56:29 #发表日期，一般不改动</div><div class=\"line\">categories: hexo #文章文类</div><div class=\"line\">tags: [hexo,github] #文章标签，多于一项时用这种格式</div><div class=\"line\">---</div><div class=\"line\">正文，使用Markdown语法书写</div><div class=\"line\">编辑完后保存，hexo server 预览</div><div class=\"line\">hexo部署</div><div class=\"line\"></div><div class=\"line\">执行下列指令即可完成部署。</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo generate</div><div class=\"line\">hexo deploy</div><div class=\"line\">hexo deploy问题：Deployer not found: git</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>\n<p>重新deploy即可</p>\n<p>图片<br>我这里是使用本地的图片</p>\n<p>安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo-asset-image --save</div></pre></td></tr></table></figure>\n<p>安装该插件后，每次hexo new 新建博文后，会在该文件同级目录下生成一个和文件同名的文件夹，该文件夹就是用来存放图片的<br>确保你的_config.yml 配置 post_asset_folder: true<br>然后使用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">![logo](logo.jpg)</div></pre></td></tr></table></figure></p>\n<p>在博文中插入logo.jpg.</p>\n<p>来源：<br><a href=\"http://wuxiaolong.me/2015/07/31/build-blog-by-hexo/\" target=\"_blank\" rel=\"external\">http://wuxiaolong.me/2015/07/31/build-blog-by-hexo/</a><br><a href=\"http://www.tuicool.com/articles/umEBVfI\" target=\"_blank\" rel=\"external\">http://www.tuicool.com/articles/umEBVfI</a></p>\n","excerpt":"<h2 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h2><p>需要git,Node.js环境</p>\n<p>安装hexo<br>利用 npm 命令即可安装。（在任意位置点击鼠标右键，选择Git bash）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g hexo</div></pre></td></tr></table></figure>\n<p>创建hexo文件夹<br>选择存放hexo文件的位置,执行以下指令(Git bash终端下)，Hexo即会自动在目标文件夹建立网站所需要的所有文件。</p>","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo init</div></pre></td></tr></table></figure>\n<p>安装依赖包<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install</div></pre></td></tr></table></figure></p>\n<p>本地查看<br>现在我们已经搭建起本地的hexo博客了，执行以下命令(在hexo文件下)，然后到浏览器输入localhost:4000看看。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo generate #此命令是生成静态页面，不执行该命令也可以</div><div class=\"line\">hexo server</div></pre></td></tr></table></figure>\n<p>到此，本地服务以及搭建好了。</p>\n<p>打包上传到github<br>如果没有github账户，则需要注册</p>\n<p>创建仓库，配置ssh秘钥</p>\n<p>注意：Repository name命名规则：你的github账号.github.io (这个一定要这么命名，具体我也不清楚)</p>\n<p>hexo使用<br>目录结构<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">├── .deploy #需要部署的文件</div><div class=\"line\">├── node_modules #Hexo插件</div><div class=\"line\">├── public #生成的静态网页文件</div><div class=\"line\">├── scaffolds #模板</div><div class=\"line\">├── source #博客正文和其他源文件，404、favicon、CNAME</div><div class=\"line\">├── _drafts #草稿</div><div class=\"line\">├── _posts #文章,可以用子文件来存放文章</div><div class=\"line\">├── themes #主题</div><div class=\"line\">├── _config.yml #全局配置文件</div><div class=\"line\">└── package.json</div></pre></td></tr></table></figure></p>\n<p>配置文件的冒号“:”后面有一个空格<br>repo: 刚刚github创库地址.git<br>hexo命令行使用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo help #查看帮助</div><div class=\"line\">hexo init #初始化一个目录</div><div class=\"line\">hexo new &quot;postName&quot; #新建文章</div><div class=\"line\">hexo new page &quot;pageName&quot; #新建页面</div><div class=\"line\">hexo generate #生成网页，可以在 public 目录查看整个网站的文件</div><div class=\"line\">hexo server #本地预览，&apos;Ctrl+C&apos;关闭</div><div class=\"line\">hexo deploy #部署.deploy目录</div><div class=\"line\">hexo clean #清除缓存，**强烈建议每次执行命令前先清理缓存，每次部署前先删除 .deploy 文件夹**</div></pre></td></tr></table></figure></p>\n<p>简写</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo n == hexo new</div><div class=\"line\">hexo g == hexo generate</div><div class=\"line\">hexo s == hexo server</div><div class=\"line\">hexo d == hexo deploy</div></pre></td></tr></table></figure>\n<p>编辑文章<br>新建文章<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo new &quot;标题&quot;</div></pre></td></tr></table></figure></p>\n<p>在 _posts 目录下会生成文件 标题.md<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">title: Hello World</div><div class=\"line\">date: 2015-07-30 07:56:29 #发表日期，一般不改动</div><div class=\"line\">categories: hexo #文章文类</div><div class=\"line\">tags: [hexo,github] #文章标签，多于一项时用这种格式</div><div class=\"line\">---</div><div class=\"line\">正文，使用Markdown语法书写</div><div class=\"line\">编辑完后保存，hexo server 预览</div><div class=\"line\">hexo部署</div><div class=\"line\"></div><div class=\"line\">执行下列指令即可完成部署。</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo generate</div><div class=\"line\">hexo deploy</div><div class=\"line\">hexo deploy问题：Deployer not found: git</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>\n<p>重新deploy即可</p>\n<p>图片<br>我这里是使用本地的图片</p>\n<p>安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo-asset-image --save</div></pre></td></tr></table></figure>\n<p>安装该插件后，每次hexo new 新建博文后，会在该文件同级目录下生成一个和文件同名的文件夹，该文件夹就是用来存放图片的<br>确保你的_config.yml 配置 post_asset_folder: true<br>然后使用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">![logo](logo.jpg)</div></pre></td></tr></table></figure></p>\n<p>在博文中插入logo.jpg.</p>\n<p>来源：<br><a href=\"http://wuxiaolong.me/2015/07/31/build-blog-by-hexo/\">http://wuxiaolong.me/2015/07/31/build-blog-by-hexo/</a><br><a href=\"http://www.tuicool.com/articles/umEBVfI\">http://www.tuicool.com/articles/umEBVfI</a></p>"},{"title":"gogs 自动化部署","date":"2017-04-07T09:38:13.000Z","from":"原","_content":"\n#### 1.创建仓库\n 服务器上需要配置两个 git 仓库，一个用于代码版本管理的远程仓库，一个用于用户访问的本地仓库。这里的「远程仓库」并不等同于托管代码的「中央仓库」，这两个仓库都是为了自动同步代码并部署网站而存在。\n<!--more-->\n在存放远程仓库的目录中（假设是 /home/ourai/repos）执行 git init --bare bridge.git 会创建一个包含 git 各种配置文件的「裸仓库」。\n\n切换到存放用户所访问文件的目录（假设为 /home/ourai/www，如果不存在则在 /home/ourai 中执行mkdir www）：\n```\ngit init\ngit remote add origin /root/gogs-repositories/seateam/wxoauth.git\ngit fetch\ngit checkout master\n```\n\n#### 2.配置 Git Hook\n\n将目录切换至 xx.git/hooks，用\n`cp post-receive.sample post-receive` 拷贝并\n\n`cd /root/gogs-repositories/seateam/xx.git/hooks`\n\n用vim post-receive 修改。其内容大致如下：\n```\n#!/bin/sh\n\nunset GIT_DIR\n\nNowPath=`pwd`\nDeployPath=\"/alidata/www/wxoauth\"\n\ncd $DeployPath\ngit pull origin master\n\ncd $NowPath\nexit 0\n```\n使用 `chmod +x post-receive` 改变一下权限后，服务器端的配置就基本完成了。\n#### 3.上线与测试分开\n```\nwhile read oldrev newrev refname\ndo\n    if [[ $refname =~ .*/deploy$ ]];\n    then\n        #!/bin/sh\n        unset GIT_DIR\n\tNowPath='pwd'\n\tDeployPath=\"/alidata/deploy/wxci\"\n\tcd $DeployPath\n\tgit pull origin deploy\n\tcd $NowPath\n\texit 0\n    else\n        #!/bin/sh\n        unset GIT_DIR\n\tNowPath='pwd'\n\tDeployPath=\"/alidata/www/wxci\"\n\tcd $DeployPath\n\tgit pull origin master\n\tcd $NowPath\n\texit 0\n    fi\ndone\n```\n#### 4.挂起进程\n\n`cd /alidata/gogs`  \n`nohup ./gogs web &`    守护进程\ngit hook 钩子，监听操作自动下载资源＝自动部署\n","source":"_posts/gogs-自动化部署.md","raw":"---\ntitle: gogs 自动化部署\ndate: 2017-04-07 17:38:13\ntags: [\"服务器\",\"自动化部署\"]\ncategories: [\"部署\",\"gogs自动化部署\"]\nfrom: '原'\n---\n\n#### 1.创建仓库\n 服务器上需要配置两个 git 仓库，一个用于代码版本管理的远程仓库，一个用于用户访问的本地仓库。这里的「远程仓库」并不等同于托管代码的「中央仓库」，这两个仓库都是为了自动同步代码并部署网站而存在。\n<!--more-->\n在存放远程仓库的目录中（假设是 /home/ourai/repos）执行 git init --bare bridge.git 会创建一个包含 git 各种配置文件的「裸仓库」。\n\n切换到存放用户所访问文件的目录（假设为 /home/ourai/www，如果不存在则在 /home/ourai 中执行mkdir www）：\n```\ngit init\ngit remote add origin /root/gogs-repositories/seateam/wxoauth.git\ngit fetch\ngit checkout master\n```\n\n#### 2.配置 Git Hook\n\n将目录切换至 xx.git/hooks，用\n`cp post-receive.sample post-receive` 拷贝并\n\n`cd /root/gogs-repositories/seateam/xx.git/hooks`\n\n用vim post-receive 修改。其内容大致如下：\n```\n#!/bin/sh\n\nunset GIT_DIR\n\nNowPath=`pwd`\nDeployPath=\"/alidata/www/wxoauth\"\n\ncd $DeployPath\ngit pull origin master\n\ncd $NowPath\nexit 0\n```\n使用 `chmod +x post-receive` 改变一下权限后，服务器端的配置就基本完成了。\n#### 3.上线与测试分开\n```\nwhile read oldrev newrev refname\ndo\n    if [[ $refname =~ .*/deploy$ ]];\n    then\n        #!/bin/sh\n        unset GIT_DIR\n\tNowPath='pwd'\n\tDeployPath=\"/alidata/deploy/wxci\"\n\tcd $DeployPath\n\tgit pull origin deploy\n\tcd $NowPath\n\texit 0\n    else\n        #!/bin/sh\n        unset GIT_DIR\n\tNowPath='pwd'\n\tDeployPath=\"/alidata/www/wxci\"\n\tcd $DeployPath\n\tgit pull origin master\n\tcd $NowPath\n\texit 0\n    fi\ndone\n```\n#### 4.挂起进程\n\n`cd /alidata/gogs`  \n`nohup ./gogs web &`    守护进程\ngit hook 钩子，监听操作自动下载资源＝自动部署\n","slug":"gogs-自动化部署","published":1,"updated":"2017-07-27T02:10:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5naxw44000gfcxegz06wm5m","content":"<h4 id=\"1-创建仓库\"><a href=\"#1-创建仓库\" class=\"headerlink\" title=\"1.创建仓库\"></a>1.创建仓库</h4><p> 服务器上需要配置两个 git 仓库，一个用于代码版本管理的远程仓库，一个用于用户访问的本地仓库。这里的「远程仓库」并不等同于托管代码的「中央仓库」，这两个仓库都是为了自动同步代码并部署网站而存在。<br><a id=\"more\"></a><br>在存放远程仓库的目录中（假设是 /home/ourai/repos）执行 git init –bare bridge.git 会创建一个包含 git 各种配置文件的「裸仓库」。</p>\n<p>切换到存放用户所访问文件的目录（假设为 /home/ourai/www，如果不存在则在 /home/ourai 中执行mkdir www）：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">git init</div><div class=\"line\">git remote add origin /root/gogs-repositories/seateam/wxoauth.git</div><div class=\"line\">git fetch</div><div class=\"line\">git checkout master</div></pre></td></tr></table></figure></p>\n<h4 id=\"2-配置-Git-Hook\"><a href=\"#2-配置-Git-Hook\" class=\"headerlink\" title=\"2.配置 Git Hook\"></a>2.配置 Git Hook</h4><p>将目录切换至 xx.git/hooks，用<br><code>cp post-receive.sample post-receive</code> 拷贝并</p>\n<p><code>cd /root/gogs-repositories/seateam/xx.git/hooks</code></p>\n<p>用vim post-receive 修改。其内容大致如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/bin/sh</div><div class=\"line\"></div><div class=\"line\">unset GIT_DIR</div><div class=\"line\"></div><div class=\"line\">NowPath=`pwd`</div><div class=\"line\">DeployPath=&quot;/alidata/www/wxoauth&quot;</div><div class=\"line\"></div><div class=\"line\">cd $DeployPath</div><div class=\"line\">git pull origin master</div><div class=\"line\"></div><div class=\"line\">cd $NowPath</div><div class=\"line\">exit 0</div></pre></td></tr></table></figure></p>\n<p>使用 <code>chmod +x post-receive</code> 改变一下权限后，服务器端的配置就基本完成了。</p>\n<h4 id=\"3-上线与测试分开\"><a href=\"#3-上线与测试分开\" class=\"headerlink\" title=\"3.上线与测试分开\"></a>3.上线与测试分开</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">while read oldrev newrev refname</div><div class=\"line\">do</div><div class=\"line\">    if [[ $refname =~ .*/deploy$ ]];</div><div class=\"line\">    then</div><div class=\"line\">        #!/bin/sh</div><div class=\"line\">        unset GIT_DIR</div><div class=\"line\">\tNowPath=&apos;pwd&apos;</div><div class=\"line\">\tDeployPath=&quot;/alidata/deploy/wxci&quot;</div><div class=\"line\">\tcd $DeployPath</div><div class=\"line\">\tgit pull origin deploy</div><div class=\"line\">\tcd $NowPath</div><div class=\"line\">\texit 0</div><div class=\"line\">    else</div><div class=\"line\">        #!/bin/sh</div><div class=\"line\">        unset GIT_DIR</div><div class=\"line\">\tNowPath=&apos;pwd&apos;</div><div class=\"line\">\tDeployPath=&quot;/alidata/www/wxci&quot;</div><div class=\"line\">\tcd $DeployPath</div><div class=\"line\">\tgit pull origin master</div><div class=\"line\">\tcd $NowPath</div><div class=\"line\">\texit 0</div><div class=\"line\">    fi</div><div class=\"line\">done</div></pre></td></tr></table></figure>\n<h4 id=\"4-挂起进程\"><a href=\"#4-挂起进程\" class=\"headerlink\" title=\"4.挂起进程\"></a>4.挂起进程</h4><p><code>cd /alidata/gogs</code><br><code>nohup ./gogs web &amp;</code>    守护进程<br>git hook 钩子，监听操作自动下载资源＝自动部署</p>\n","excerpt":"<h4 id=\"1-创建仓库\"><a href=\"#1-创建仓库\" class=\"headerlink\" title=\"1.创建仓库\"></a>1.创建仓库</h4><p> 服务器上需要配置两个 git 仓库，一个用于代码版本管理的远程仓库，一个用于用户访问的本地仓库。这里的「远程仓库」并不等同于托管代码的「中央仓库」，这两个仓库都是为了自动同步代码并部署网站而存在。<br>","more":"<br>在存放远程仓库的目录中（假设是 /home/ourai/repos）执行 git init –bare bridge.git 会创建一个包含 git 各种配置文件的「裸仓库」。</p>\n<p>切换到存放用户所访问文件的目录（假设为 /home/ourai/www，如果不存在则在 /home/ourai 中执行mkdir www）：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">git init</div><div class=\"line\">git remote add origin /root/gogs-repositories/seateam/wxoauth.git</div><div class=\"line\">git fetch</div><div class=\"line\">git checkout master</div></pre></td></tr></table></figure></p>\n<h4 id=\"2-配置-Git-Hook\"><a href=\"#2-配置-Git-Hook\" class=\"headerlink\" title=\"2.配置 Git Hook\"></a>2.配置 Git Hook</h4><p>将目录切换至 xx.git/hooks，用<br><code>cp post-receive.sample post-receive</code> 拷贝并</p>\n<p><code>cd /root/gogs-repositories/seateam/xx.git/hooks</code></p>\n<p>用vim post-receive 修改。其内容大致如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/bin/sh</div><div class=\"line\"></div><div class=\"line\">unset GIT_DIR</div><div class=\"line\"></div><div class=\"line\">NowPath=`pwd`</div><div class=\"line\">DeployPath=&quot;/alidata/www/wxoauth&quot;</div><div class=\"line\"></div><div class=\"line\">cd $DeployPath</div><div class=\"line\">git pull origin master</div><div class=\"line\"></div><div class=\"line\">cd $NowPath</div><div class=\"line\">exit 0</div></pre></td></tr></table></figure></p>\n<p>使用 <code>chmod +x post-receive</code> 改变一下权限后，服务器端的配置就基本完成了。</p>\n<h4 id=\"3-上线与测试分开\"><a href=\"#3-上线与测试分开\" class=\"headerlink\" title=\"3.上线与测试分开\"></a>3.上线与测试分开</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">while read oldrev newrev refname</div><div class=\"line\">do</div><div class=\"line\">    if [[ $refname =~ .*/deploy$ ]];</div><div class=\"line\">    then</div><div class=\"line\">        #!/bin/sh</div><div class=\"line\">        unset GIT_DIR</div><div class=\"line\">\tNowPath=&apos;pwd&apos;</div><div class=\"line\">\tDeployPath=&quot;/alidata/deploy/wxci&quot;</div><div class=\"line\">\tcd $DeployPath</div><div class=\"line\">\tgit pull origin deploy</div><div class=\"line\">\tcd $NowPath</div><div class=\"line\">\texit 0</div><div class=\"line\">    else</div><div class=\"line\">        #!/bin/sh</div><div class=\"line\">        unset GIT_DIR</div><div class=\"line\">\tNowPath=&apos;pwd&apos;</div><div class=\"line\">\tDeployPath=&quot;/alidata/www/wxci&quot;</div><div class=\"line\">\tcd $DeployPath</div><div class=\"line\">\tgit pull origin master</div><div class=\"line\">\tcd $NowPath</div><div class=\"line\">\texit 0</div><div class=\"line\">    fi</div><div class=\"line\">done</div></pre></td></tr></table></figure>\n<h4 id=\"4-挂起进程\"><a href=\"#4-挂起进程\" class=\"headerlink\" title=\"4.挂起进程\"></a>4.挂起进程</h4><p><code>cd /alidata/gogs</code><br><code>nohup ./gogs web &amp;</code>    守护进程<br>git hook 钩子，监听操作自动下载资源＝自动部署</p>"},{"title":"react知识点","date":"2017-04-14T17:23:41.000Z","_content":"\n#### 调用 setState 之后发生了什么？\n\n在代码中调用setState函数之后，React 会将传入的参数对象与组件当前的状态合并，然后触发所谓的调和过程（Reconciliation）。经过调和过程，React 会以相对高效的方式根据新的状态构建 React 元素树并且着手重新渲染整个UI界面。在 React 得到元素树之后，React 会自动计算出新的树与老树的节点差异，然后根据差异对界面进行最小化重渲染。在差异计算算法中，React 能够相对精确地知道哪些位置发生了改变以及应该如何改变，这就保证了按需更新，而不是全部重新渲染。\n\n<!--more-->\n\n#### React 中 Element 与 Component 的区别是？\n\n\n\n简单而言，React Element 是描述屏幕上所见内容的数据结构，是对于 UI 的对象表述。典型的 React Element 就是利用 JSX 构建的声明式代码片然后被转化为createElement的调用组合。而 React Component 则是可以接收参数输入并且返回某个 React Element 的函数或者类。更多介绍可以参考React Elements vs React Components。\n\n\n\n#### 在什么情况下你会优先选择使用 Class Component 而不是 Functional Component？\n\n\n\n在组件需要包含内部状态或者使用到生命周期函数的时候使用 Class Component ，否则使用函数式组件。\n\n\n\n#### React 中 refs 的作用是什么？\n\n\n\nRefs 是 React 提供给我们的安全访问 DOM 元素或者某个组件实例的句柄。我们可以为元素添加ref属性然后在回调函数中接受该元素在 DOM 树中的句柄，该值会作为回调函数的第一个参数返回：\n\n\n```\nclass CustomForm extends Component {\n\n  handleSubmit = () => {\n\n    console.log(\"Input Value: \", this.input.value)\n\n  }\n\n  render () {\n\n    return (\n\n      <form onSubmit={this.handleSubmit}>\n\n        <input\n\n          type='text'\n\n          ref={(input) => this.input = input} />\n\n        <button type='submit'>Submit</button>\n\n      </form>\n\n    )\n\n  }\n\n}\n\n```\n\n上述代码中的input域包含了一个ref属性，该属性声明的回调函数会接收input对应的 DOM 元素，我们将其绑定到this指针以便在其他的类函数中使用。另外值得一提的是，refs 并不是类组件的专属，函数式组件同样能够利用闭包暂存其值：\n\n\n```\nfunction CustomForm ({handleSubmit}) {\n\n  let inputElement\n\n  return (\n\n    <form onSubmit={() => handleSubmit(inputElement.value)}>\n\n      <input\n\n        type='text'\n\n        ref={(input) => inputElement = input} />\n\n      <button type='submit'>Submit</button>\n\n    </form>\n\n  )\n\n}\n```\n\n\n#### React 中 keys 的作用是什么？\n\n\n\nKeys 是 React 用于追踪哪些列表中元素被修改、被添加或者被移除的辅助标识。\n\n\n```\nrender () {\n\n  return (\n\n    <ul>\n\n      {this.state.todoItems.map(({task, uid}) => {\n\n        return <li key={uid}>{task}</li>\n\n      })}\n\n    </ul>\n\n  )\n\n}\n```\n\n\n在开发过程中，我们需要保证某个元素的 key 在其同级元素中具有唯一性。在 React Diff 算法中 React 会借助元素的 Key 值来判断该元素是新近创建的还是被移动而来的元素，从而减少不必要的元素重渲染。此外，React 还需要借助 Key 值来判断元素与本地状态的关联关系，因此我们绝不可忽视转换函数中 Key 的重要性。\n\n\n\n#### 如果你创建了类似于下面的Twitter元素，那么它相关的类定义是啥样子的？\n\n\n```\n<Twitter username='tylermcginnis33'>\n\n  {(user) => user === null\n\n    ? <Loading />\n\n    : <Badge info={user} />}\n\n</Twitter>\n\n\n\nimport React, { Component, PropTypes } from 'react'\n\nimport fetchUser from 'twitter'\n\n// fetchUser take in a username returns a promise\n\n// which will resolve with that username's data.\n\nclass Twitter extends Component {\n\n  // finish this\n\n}\n\n```\n\n如果你还不熟悉回调渲染模式（Render Callback Pattern），这个代码可能看起来有点怪。这种模式中，组件会接收某个函数作为其子组件，然后在渲染函数中以props.children进行调用：\n\n\n```\nimport React, { Component, PropTypes } from 'react'\n\nimport fetchUser from 'twitter'\n\nclass Twitter extends Component {\n\n  state = {\n\n    user: null,\n\n  }\n\n  static propTypes = {\n\n    username: PropTypes.string.isRequired,\n\n  }\n\n  componentDidMount () {\n\n    fetchUser(this.props.username)\n\n      .then((user) => this.setState({user}))\n\n  }\n\n  render () {\n\n    return this.props.children(this.state.user)\n\n  }\n\n}\n\n```\n\n这种模式的优势在于将父组件与子组件解耦和，父组件可以直接访问子组件的内部状态而不需要再通过Props传递，这样父组件能够更为方便地控制子组件展示的UI界面。譬如产品经理让我们将原本展示的Badge替换为Profile，我们可以轻易地修改下回调函数即可：\n\n```\n\n<Twitter username='tylermcginnis33'>\n\n  {(user) => user === null\n\n    ? <Loading />\n\n    : <Profile info={user} />}\n\n</Twitter>\n\n```\n\n#### Controlled Component 与 Uncontrolled Component 之间的区别是什么？\n\n\n\nReact 的核心组成之一就是能够维持内部状态的自治组件，不过当我们引入原生的HTML表单元素时（input,select,textarea 等），我们是否应该将所有的数据托管到 React 组件中还是将其仍然保留在 DOM 元素中呢？这个问题的答案就是受控组件与非受控组件的定义分割。受控组件（Controlled Component）代指那些交由 React 控制并且所有的表单数据统一存放的组件。譬如下面这段代码中username变量值并没有存放到DOM元素中，而是存放在组件状态数据中。任何时候我们需要改变username变量值时，我们应当调用setState函数进行修改。\n\n\n```\nclass ControlledForm extends Component {\n\n  state = {\n\n    username: ''\n\n  }\n\n  updateUsername = (e) => {\n\n    this.setState({\n\n      username: e.target.value,\n\n    })\n\n  }\n\n  handleSubmit = () => {}\n\n  render () {\n\n    return (\n\n      <form onSubmit={this.handleSubmit}>\n\n        <input\n\n          type='text'\n\n          value={this.state.username}\n\n          onChange={this.updateUsername} />\n\n        <button type='submit'>Submit</button>\n\n      </form>\n\n    )\n\n  }\n\n}\n\n```\n\n而非受控组件（Uncontrolled Component）则是由DOM存放表单数据，并非存放在 React 组件中。我们可以使用 refs 来操控DOM元素：\n\n\n```\nclass UnControlledForm extends Component {\n\n  handleSubmit = () => {\n\n    console.log(\"Input Value: \", this.input.value)\n\n  }\n\n  render () {\n\n    return (\n\n      <form onSubmit={this.handleSubmit}>\n\n        <input\n\n          type='text'\n\n          ref={(input) => this.input = input} />\n\n        <button type='submit'>Submit</button>\n\n      </form>\n\n    )\n\n  }\n\n}\n\n```\n\n竟然非受控组件看上去更好实现，我们可以直接从 DOM 中抓取数据，而不需要添加额外的代码。不过实际开发中我们并不提倡使用非受控组件，因为实际情况下我们需要更多的考虑表单验证、选择性的开启或者关闭按钮点击、强制输入格式等功能支持，而此时我们将数据托管到 React 中有助于我们更好地以声明式的方式完成这些功能。引入 React 或者其他 MVVM 框架最初的原因就是为了将我们从繁重的直接操作 DOM 中解放出来。\n\n\n\n#### 在生命周期中的哪一步你应该发起 AJAX 请求？\n\n\n\n我们应当将AJAX 请求放到 componentDidMount 函数中执行，主要原因有下：\n\n\n\nReact 下一代调和算法 Fiber 会通过开始或停止渲染的方式优化应用性能，其会影响到 componentWillMount 的触发次数。对于 componentWillMount 这个生命周期函数的调用次数会变得不确定，React 可能会多次频繁调用 componentWillMount。如果我们将 AJAX 请求放到 componentWillMount 函数中，那么显而易见其会被触发多次，自然也就不是好的选择。\n如果我们将 AJAX 请求放置在生命周期的其他函数中，我们并不能保证请求仅在组件挂载完毕后才会要求响应。如果我们的数据请求在组件挂载之前就完成，并且调用了setState函数将数据添加到组件状态中，对于未挂载的组件则会报错。而在 componentDidMount 函数中进行 AJAX 请求则能有效避免这个问题。\n\n\n#### shouldComponentUpdate 的作用是啥以及为何它这么重要？\n\n\n\nshouldComponentUpdate 允许我们手动地判断是否要进行组件更新，根据组件的应用场景设置函数的合理返回值能够帮我们避免不必要的更新。\n\n\n\n#### 如何告诉 React 它应该编译生产环境版本？\n\n\n\n通常情况下我们会使用 Webpack 的 DefinePlugin 方法来将 NODE_ENV 变量值设置为 production。编译版本中 React 会忽略 propType 验证以及其他的告警信息，同时还会降低代码库的大小，React 使用了 Uglify 插件来移除生产环境下不必要的注释等信息。\n\n\n\n#### 为什么我们需要使用 React 提供的 Children API 而不是 JavaScript 的 map？\n\n\n\nprops.children并不一定是数组类型，譬如下面这个元素：\n\n\n```\n<Parent>\n\n  <h1>Welcome.</h1>\n\n</Parent>\n\n```\n\n如果我们使用props.children.map函数来遍历时会受到异常提示，因为在这种情况下props.children是对象（object）而不是数组（array）。React 当且仅当超过一个子元素的情况下会将props.children设置为数组，就像下面这个代码片：\n\n\n```\n<Parent>\n\n  <h1>Welcome.</h1>\n\n  <h2>props.children will now be an array</h2>\n\n</Parent>\n\n\n```\n这也就是我们优先选择使用React.Children.map函数的原因，其已经将props.children不同类型的情况考虑在内了。\n\n\n\n#### 概述下 React 中的事件处理逻辑\n\n\n\n为了解决跨浏览器兼容性问题，React 会将浏览器原生事件（Browser Native Event）封装为合成事件（SyntheticEvent）传入设置的事件处理器中。这里的合成事件提供了与原生事件相同的接口，不过它们屏蔽了底层浏览器的细节差异，保证了行为的一致性。另外有意思的是，React 并没有直接将事件附着到子元素上，而是以单一事件监听器的方式将所有的事件发送到顶层进行处理。这样 React 在更新 DOM 的时候就不需要考虑如何去处理附着在 DOM 上的事件监听器，最终达到优化性能的目的。\n\n\n\n#### createElement 与 cloneElement 的区别是什么？\n\n\n\ncreateElement 函数是 JSX 编译之后使用的创建 React Element 的函数，而 cloneElement 则是用于复制某个元素并传入新的 Props。\n\n\n\n#### 传入 setState 函数的第二个参数的作用是什么？\n\n\n\n该函数会在setState函数调用完成并且组件开始重渲染的时候被调用，我们可以用该函数来监听渲染是否完成：\n\n```\n\nthis.setState(\n\n  { username: 'tylermcginnis33' },\n\n  () => console.log('setState has finished and the component has re-rendered.')\n\n)\n\n```\n\n下述代码有错吗？\n\n\n```\nthis.setState((prevState, props) => {\n\n  return {\n\n    streak: prevState.streak + props.count\n\n  }\n\n})\n\n```\n\n这段代码没啥问题，不过只是不太常用罢了，详细可以参考React中setState同步更新策略\n","source":"_posts/react知识点.md","raw":"---\ntitle: react知识点\ntags:\n  - '框架'\n  - 'react'\ncategories:\n  - '前端'\n  - '框架'\n  - 'react'\ndate: 2017-04-15 01:23:41\n---\n\n#### 调用 setState 之后发生了什么？\n\n在代码中调用setState函数之后，React 会将传入的参数对象与组件当前的状态合并，然后触发所谓的调和过程（Reconciliation）。经过调和过程，React 会以相对高效的方式根据新的状态构建 React 元素树并且着手重新渲染整个UI界面。在 React 得到元素树之后，React 会自动计算出新的树与老树的节点差异，然后根据差异对界面进行最小化重渲染。在差异计算算法中，React 能够相对精确地知道哪些位置发生了改变以及应该如何改变，这就保证了按需更新，而不是全部重新渲染。\n\n<!--more-->\n\n#### React 中 Element 与 Component 的区别是？\n\n\n\n简单而言，React Element 是描述屏幕上所见内容的数据结构，是对于 UI 的对象表述。典型的 React Element 就是利用 JSX 构建的声明式代码片然后被转化为createElement的调用组合。而 React Component 则是可以接收参数输入并且返回某个 React Element 的函数或者类。更多介绍可以参考React Elements vs React Components。\n\n\n\n#### 在什么情况下你会优先选择使用 Class Component 而不是 Functional Component？\n\n\n\n在组件需要包含内部状态或者使用到生命周期函数的时候使用 Class Component ，否则使用函数式组件。\n\n\n\n#### React 中 refs 的作用是什么？\n\n\n\nRefs 是 React 提供给我们的安全访问 DOM 元素或者某个组件实例的句柄。我们可以为元素添加ref属性然后在回调函数中接受该元素在 DOM 树中的句柄，该值会作为回调函数的第一个参数返回：\n\n\n```\nclass CustomForm extends Component {\n\n  handleSubmit = () => {\n\n    console.log(\"Input Value: \", this.input.value)\n\n  }\n\n  render () {\n\n    return (\n\n      <form onSubmit={this.handleSubmit}>\n\n        <input\n\n          type='text'\n\n          ref={(input) => this.input = input} />\n\n        <button type='submit'>Submit</button>\n\n      </form>\n\n    )\n\n  }\n\n}\n\n```\n\n上述代码中的input域包含了一个ref属性，该属性声明的回调函数会接收input对应的 DOM 元素，我们将其绑定到this指针以便在其他的类函数中使用。另外值得一提的是，refs 并不是类组件的专属，函数式组件同样能够利用闭包暂存其值：\n\n\n```\nfunction CustomForm ({handleSubmit}) {\n\n  let inputElement\n\n  return (\n\n    <form onSubmit={() => handleSubmit(inputElement.value)}>\n\n      <input\n\n        type='text'\n\n        ref={(input) => inputElement = input} />\n\n      <button type='submit'>Submit</button>\n\n    </form>\n\n  )\n\n}\n```\n\n\n#### React 中 keys 的作用是什么？\n\n\n\nKeys 是 React 用于追踪哪些列表中元素被修改、被添加或者被移除的辅助标识。\n\n\n```\nrender () {\n\n  return (\n\n    <ul>\n\n      {this.state.todoItems.map(({task, uid}) => {\n\n        return <li key={uid}>{task}</li>\n\n      })}\n\n    </ul>\n\n  )\n\n}\n```\n\n\n在开发过程中，我们需要保证某个元素的 key 在其同级元素中具有唯一性。在 React Diff 算法中 React 会借助元素的 Key 值来判断该元素是新近创建的还是被移动而来的元素，从而减少不必要的元素重渲染。此外，React 还需要借助 Key 值来判断元素与本地状态的关联关系，因此我们绝不可忽视转换函数中 Key 的重要性。\n\n\n\n#### 如果你创建了类似于下面的Twitter元素，那么它相关的类定义是啥样子的？\n\n\n```\n<Twitter username='tylermcginnis33'>\n\n  {(user) => user === null\n\n    ? <Loading />\n\n    : <Badge info={user} />}\n\n</Twitter>\n\n\n\nimport React, { Component, PropTypes } from 'react'\n\nimport fetchUser from 'twitter'\n\n// fetchUser take in a username returns a promise\n\n// which will resolve with that username's data.\n\nclass Twitter extends Component {\n\n  // finish this\n\n}\n\n```\n\n如果你还不熟悉回调渲染模式（Render Callback Pattern），这个代码可能看起来有点怪。这种模式中，组件会接收某个函数作为其子组件，然后在渲染函数中以props.children进行调用：\n\n\n```\nimport React, { Component, PropTypes } from 'react'\n\nimport fetchUser from 'twitter'\n\nclass Twitter extends Component {\n\n  state = {\n\n    user: null,\n\n  }\n\n  static propTypes = {\n\n    username: PropTypes.string.isRequired,\n\n  }\n\n  componentDidMount () {\n\n    fetchUser(this.props.username)\n\n      .then((user) => this.setState({user}))\n\n  }\n\n  render () {\n\n    return this.props.children(this.state.user)\n\n  }\n\n}\n\n```\n\n这种模式的优势在于将父组件与子组件解耦和，父组件可以直接访问子组件的内部状态而不需要再通过Props传递，这样父组件能够更为方便地控制子组件展示的UI界面。譬如产品经理让我们将原本展示的Badge替换为Profile，我们可以轻易地修改下回调函数即可：\n\n```\n\n<Twitter username='tylermcginnis33'>\n\n  {(user) => user === null\n\n    ? <Loading />\n\n    : <Profile info={user} />}\n\n</Twitter>\n\n```\n\n#### Controlled Component 与 Uncontrolled Component 之间的区别是什么？\n\n\n\nReact 的核心组成之一就是能够维持内部状态的自治组件，不过当我们引入原生的HTML表单元素时（input,select,textarea 等），我们是否应该将所有的数据托管到 React 组件中还是将其仍然保留在 DOM 元素中呢？这个问题的答案就是受控组件与非受控组件的定义分割。受控组件（Controlled Component）代指那些交由 React 控制并且所有的表单数据统一存放的组件。譬如下面这段代码中username变量值并没有存放到DOM元素中，而是存放在组件状态数据中。任何时候我们需要改变username变量值时，我们应当调用setState函数进行修改。\n\n\n```\nclass ControlledForm extends Component {\n\n  state = {\n\n    username: ''\n\n  }\n\n  updateUsername = (e) => {\n\n    this.setState({\n\n      username: e.target.value,\n\n    })\n\n  }\n\n  handleSubmit = () => {}\n\n  render () {\n\n    return (\n\n      <form onSubmit={this.handleSubmit}>\n\n        <input\n\n          type='text'\n\n          value={this.state.username}\n\n          onChange={this.updateUsername} />\n\n        <button type='submit'>Submit</button>\n\n      </form>\n\n    )\n\n  }\n\n}\n\n```\n\n而非受控组件（Uncontrolled Component）则是由DOM存放表单数据，并非存放在 React 组件中。我们可以使用 refs 来操控DOM元素：\n\n\n```\nclass UnControlledForm extends Component {\n\n  handleSubmit = () => {\n\n    console.log(\"Input Value: \", this.input.value)\n\n  }\n\n  render () {\n\n    return (\n\n      <form onSubmit={this.handleSubmit}>\n\n        <input\n\n          type='text'\n\n          ref={(input) => this.input = input} />\n\n        <button type='submit'>Submit</button>\n\n      </form>\n\n    )\n\n  }\n\n}\n\n```\n\n竟然非受控组件看上去更好实现，我们可以直接从 DOM 中抓取数据，而不需要添加额外的代码。不过实际开发中我们并不提倡使用非受控组件，因为实际情况下我们需要更多的考虑表单验证、选择性的开启或者关闭按钮点击、强制输入格式等功能支持，而此时我们将数据托管到 React 中有助于我们更好地以声明式的方式完成这些功能。引入 React 或者其他 MVVM 框架最初的原因就是为了将我们从繁重的直接操作 DOM 中解放出来。\n\n\n\n#### 在生命周期中的哪一步你应该发起 AJAX 请求？\n\n\n\n我们应当将AJAX 请求放到 componentDidMount 函数中执行，主要原因有下：\n\n\n\nReact 下一代调和算法 Fiber 会通过开始或停止渲染的方式优化应用性能，其会影响到 componentWillMount 的触发次数。对于 componentWillMount 这个生命周期函数的调用次数会变得不确定，React 可能会多次频繁调用 componentWillMount。如果我们将 AJAX 请求放到 componentWillMount 函数中，那么显而易见其会被触发多次，自然也就不是好的选择。\n如果我们将 AJAX 请求放置在生命周期的其他函数中，我们并不能保证请求仅在组件挂载完毕后才会要求响应。如果我们的数据请求在组件挂载之前就完成，并且调用了setState函数将数据添加到组件状态中，对于未挂载的组件则会报错。而在 componentDidMount 函数中进行 AJAX 请求则能有效避免这个问题。\n\n\n#### shouldComponentUpdate 的作用是啥以及为何它这么重要？\n\n\n\nshouldComponentUpdate 允许我们手动地判断是否要进行组件更新，根据组件的应用场景设置函数的合理返回值能够帮我们避免不必要的更新。\n\n\n\n#### 如何告诉 React 它应该编译生产环境版本？\n\n\n\n通常情况下我们会使用 Webpack 的 DefinePlugin 方法来将 NODE_ENV 变量值设置为 production。编译版本中 React 会忽略 propType 验证以及其他的告警信息，同时还会降低代码库的大小，React 使用了 Uglify 插件来移除生产环境下不必要的注释等信息。\n\n\n\n#### 为什么我们需要使用 React 提供的 Children API 而不是 JavaScript 的 map？\n\n\n\nprops.children并不一定是数组类型，譬如下面这个元素：\n\n\n```\n<Parent>\n\n  <h1>Welcome.</h1>\n\n</Parent>\n\n```\n\n如果我们使用props.children.map函数来遍历时会受到异常提示，因为在这种情况下props.children是对象（object）而不是数组（array）。React 当且仅当超过一个子元素的情况下会将props.children设置为数组，就像下面这个代码片：\n\n\n```\n<Parent>\n\n  <h1>Welcome.</h1>\n\n  <h2>props.children will now be an array</h2>\n\n</Parent>\n\n\n```\n这也就是我们优先选择使用React.Children.map函数的原因，其已经将props.children不同类型的情况考虑在内了。\n\n\n\n#### 概述下 React 中的事件处理逻辑\n\n\n\n为了解决跨浏览器兼容性问题，React 会将浏览器原生事件（Browser Native Event）封装为合成事件（SyntheticEvent）传入设置的事件处理器中。这里的合成事件提供了与原生事件相同的接口，不过它们屏蔽了底层浏览器的细节差异，保证了行为的一致性。另外有意思的是，React 并没有直接将事件附着到子元素上，而是以单一事件监听器的方式将所有的事件发送到顶层进行处理。这样 React 在更新 DOM 的时候就不需要考虑如何去处理附着在 DOM 上的事件监听器，最终达到优化性能的目的。\n\n\n\n#### createElement 与 cloneElement 的区别是什么？\n\n\n\ncreateElement 函数是 JSX 编译之后使用的创建 React Element 的函数，而 cloneElement 则是用于复制某个元素并传入新的 Props。\n\n\n\n#### 传入 setState 函数的第二个参数的作用是什么？\n\n\n\n该函数会在setState函数调用完成并且组件开始重渲染的时候被调用，我们可以用该函数来监听渲染是否完成：\n\n```\n\nthis.setState(\n\n  { username: 'tylermcginnis33' },\n\n  () => console.log('setState has finished and the component has re-rendered.')\n\n)\n\n```\n\n下述代码有错吗？\n\n\n```\nthis.setState((prevState, props) => {\n\n  return {\n\n    streak: prevState.streak + props.count\n\n  }\n\n})\n\n```\n\n这段代码没啥问题，不过只是不太常用罢了，详细可以参考React中setState同步更新策略\n","slug":"react知识点","published":1,"updated":"2017-04-14T17:27:49.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5naxw47000jfcxewfoud2fr","content":"<h4 id=\"调用-setState-之后发生了什么？\"><a href=\"#调用-setState-之后发生了什么？\" class=\"headerlink\" title=\"调用 setState 之后发生了什么？\"></a>调用 setState 之后发生了什么？</h4><p>在代码中调用setState函数之后，React 会将传入的参数对象与组件当前的状态合并，然后触发所谓的调和过程（Reconciliation）。经过调和过程，React 会以相对高效的方式根据新的状态构建 React 元素树并且着手重新渲染整个UI界面。在 React 得到元素树之后，React 会自动计算出新的树与老树的节点差异，然后根据差异对界面进行最小化重渲染。在差异计算算法中，React 能够相对精确地知道哪些位置发生了改变以及应该如何改变，这就保证了按需更新，而不是全部重新渲染。</p>\n<a id=\"more\"></a>\n<h4 id=\"React-中-Element-与-Component-的区别是？\"><a href=\"#React-中-Element-与-Component-的区别是？\" class=\"headerlink\" title=\"React 中 Element 与 Component 的区别是？\"></a>React 中 Element 与 Component 的区别是？</h4><p>简单而言，React Element 是描述屏幕上所见内容的数据结构，是对于 UI 的对象表述。典型的 React Element 就是利用 JSX 构建的声明式代码片然后被转化为createElement的调用组合。而 React Component 则是可以接收参数输入并且返回某个 React Element 的函数或者类。更多介绍可以参考React Elements vs React Components。</p>\n<h4 id=\"在什么情况下你会优先选择使用-Class-Component-而不是-Functional-Component？\"><a href=\"#在什么情况下你会优先选择使用-Class-Component-而不是-Functional-Component？\" class=\"headerlink\" title=\"在什么情况下你会优先选择使用 Class Component 而不是 Functional Component？\"></a>在什么情况下你会优先选择使用 Class Component 而不是 Functional Component？</h4><p>在组件需要包含内部状态或者使用到生命周期函数的时候使用 Class Component ，否则使用函数式组件。</p>\n<h4 id=\"React-中-refs-的作用是什么？\"><a href=\"#React-中-refs-的作用是什么？\" class=\"headerlink\" title=\"React 中 refs 的作用是什么？\"></a>React 中 refs 的作用是什么？</h4><p>Refs 是 React 提供给我们的安全访问 DOM 元素或者某个组件实例的句柄。我们可以为元素添加ref属性然后在回调函数中接受该元素在 DOM 树中的句柄，该值会作为回调函数的第一个参数返回：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">class CustomForm extends Component &#123;</div><div class=\"line\"></div><div class=\"line\">  handleSubmit = () =&gt; &#123;</div><div class=\"line\"></div><div class=\"line\">    console.log(&quot;Input Value: &quot;, this.input.value)</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  render () &#123;</div><div class=\"line\"></div><div class=\"line\">    return (</div><div class=\"line\"></div><div class=\"line\">      &lt;form onSubmit=&#123;this.handleSubmit&#125;&gt;</div><div class=\"line\"></div><div class=\"line\">        &lt;input</div><div class=\"line\"></div><div class=\"line\">          type=&apos;text&apos;</div><div class=\"line\"></div><div class=\"line\">          ref=&#123;(input) =&gt; this.input = input&#125; /&gt;</div><div class=\"line\"></div><div class=\"line\">        &lt;button type=&apos;submit&apos;&gt;Submit&lt;/button&gt;</div><div class=\"line\"></div><div class=\"line\">      &lt;/form&gt;</div><div class=\"line\"></div><div class=\"line\">    )</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上述代码中的input域包含了一个ref属性，该属性声明的回调函数会接收input对应的 DOM 元素，我们将其绑定到this指针以便在其他的类函数中使用。另外值得一提的是，refs 并不是类组件的专属，函数式组件同样能够利用闭包暂存其值：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">function CustomForm (&#123;handleSubmit&#125;) &#123;</div><div class=\"line\"></div><div class=\"line\">  let inputElement</div><div class=\"line\"></div><div class=\"line\">  return (</div><div class=\"line\"></div><div class=\"line\">    &lt;form onSubmit=&#123;() =&gt; handleSubmit(inputElement.value)&#125;&gt;</div><div class=\"line\"></div><div class=\"line\">      &lt;input</div><div class=\"line\"></div><div class=\"line\">        type=&apos;text&apos;</div><div class=\"line\"></div><div class=\"line\">        ref=&#123;(input) =&gt; inputElement = input&#125; /&gt;</div><div class=\"line\"></div><div class=\"line\">      &lt;button type=&apos;submit&apos;&gt;Submit&lt;/button&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;/form&gt;</div><div class=\"line\"></div><div class=\"line\">  )</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"React-中-keys-的作用是什么？\"><a href=\"#React-中-keys-的作用是什么？\" class=\"headerlink\" title=\"React 中 keys 的作用是什么？\"></a>React 中 keys 的作用是什么？</h4><p>Keys 是 React 用于追踪哪些列表中元素被修改、被添加或者被移除的辅助标识。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">render () &#123;</div><div class=\"line\"></div><div class=\"line\">  return (</div><div class=\"line\"></div><div class=\"line\">    &lt;ul&gt;</div><div class=\"line\"></div><div class=\"line\">      &#123;this.state.todoItems.map((&#123;task, uid&#125;) =&gt; &#123;</div><div class=\"line\"></div><div class=\"line\">        return &lt;li key=&#123;uid&#125;&gt;&#123;task&#125;&lt;/li&gt;</div><div class=\"line\"></div><div class=\"line\">      &#125;)&#125;</div><div class=\"line\"></div><div class=\"line\">    &lt;/ul&gt;</div><div class=\"line\"></div><div class=\"line\">  )</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在开发过程中，我们需要保证某个元素的 key 在其同级元素中具有唯一性。在 React Diff 算法中 React 会借助元素的 Key 值来判断该元素是新近创建的还是被移动而来的元素，从而减少不必要的元素重渲染。此外，React 还需要借助 Key 值来判断元素与本地状态的关联关系，因此我们绝不可忽视转换函数中 Key 的重要性。</p>\n<h4 id=\"如果你创建了类似于下面的Twitter元素，那么它相关的类定义是啥样子的？\"><a href=\"#如果你创建了类似于下面的Twitter元素，那么它相关的类定义是啥样子的？\" class=\"headerlink\" title=\"如果你创建了类似于下面的Twitter元素，那么它相关的类定义是啥样子的？\"></a>如果你创建了类似于下面的Twitter元素，那么它相关的类定义是啥样子的？</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Twitter username=&apos;tylermcginnis33&apos;&gt;</div><div class=\"line\"></div><div class=\"line\">  &#123;(user) =&gt; user === null</div><div class=\"line\"></div><div class=\"line\">    ? &lt;Loading /&gt;</div><div class=\"line\"></div><div class=\"line\">    : &lt;Badge info=&#123;user&#125; /&gt;&#125;</div><div class=\"line\"></div><div class=\"line\">&lt;/Twitter&gt;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">import React, &#123; Component, PropTypes &#125; from &apos;react&apos;</div><div class=\"line\"></div><div class=\"line\">import fetchUser from &apos;twitter&apos;</div><div class=\"line\"></div><div class=\"line\">// fetchUser take in a username returns a promise</div><div class=\"line\"></div><div class=\"line\">// which will resolve with that username&apos;s data.</div><div class=\"line\"></div><div class=\"line\">class Twitter extends Component &#123;</div><div class=\"line\"></div><div class=\"line\">  // finish this</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如果你还不熟悉回调渲染模式（Render Callback Pattern），这个代码可能看起来有点怪。这种模式中，组件会接收某个函数作为其子组件，然后在渲染函数中以props.children进行调用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">import React, &#123; Component, PropTypes &#125; from &apos;react&apos;</div><div class=\"line\"></div><div class=\"line\">import fetchUser from &apos;twitter&apos;</div><div class=\"line\"></div><div class=\"line\">class Twitter extends Component &#123;</div><div class=\"line\"></div><div class=\"line\">  state = &#123;</div><div class=\"line\"></div><div class=\"line\">    user: null,</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  static propTypes = &#123;</div><div class=\"line\"></div><div class=\"line\">    username: PropTypes.string.isRequired,</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  componentDidMount () &#123;</div><div class=\"line\"></div><div class=\"line\">    fetchUser(this.props.username)</div><div class=\"line\"></div><div class=\"line\">      .then((user) =&gt; this.setState(&#123;user&#125;))</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  render () &#123;</div><div class=\"line\"></div><div class=\"line\">    return this.props.children(this.state.user)</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这种模式的优势在于将父组件与子组件解耦和，父组件可以直接访问子组件的内部状态而不需要再通过Props传递，这样父组件能够更为方便地控制子组件展示的UI界面。譬如产品经理让我们将原本展示的Badge替换为Profile，我们可以轻易地修改下回调函数即可：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&lt;Twitter username=&apos;tylermcginnis33&apos;&gt;</div><div class=\"line\"></div><div class=\"line\">  &#123;(user) =&gt; user === null</div><div class=\"line\"></div><div class=\"line\">    ? &lt;Loading /&gt;</div><div class=\"line\"></div><div class=\"line\">    : &lt;Profile info=&#123;user&#125; /&gt;&#125;</div><div class=\"line\"></div><div class=\"line\">&lt;/Twitter&gt;</div></pre></td></tr></table></figure>\n<h4 id=\"Controlled-Component-与-Uncontrolled-Component-之间的区别是什么？\"><a href=\"#Controlled-Component-与-Uncontrolled-Component-之间的区别是什么？\" class=\"headerlink\" title=\"Controlled Component 与 Uncontrolled Component 之间的区别是什么？\"></a>Controlled Component 与 Uncontrolled Component 之间的区别是什么？</h4><p>React 的核心组成之一就是能够维持内部状态的自治组件，不过当我们引入原生的HTML表单元素时（input,select,textarea 等），我们是否应该将所有的数据托管到 React 组件中还是将其仍然保留在 DOM 元素中呢？这个问题的答案就是受控组件与非受控组件的定义分割。受控组件（Controlled Component）代指那些交由 React 控制并且所有的表单数据统一存放的组件。譬如下面这段代码中username变量值并没有存放到DOM元素中，而是存放在组件状态数据中。任何时候我们需要改变username变量值时，我们应当调用setState函数进行修改。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\">class ControlledForm extends Component &#123;</div><div class=\"line\"></div><div class=\"line\">  state = &#123;</div><div class=\"line\"></div><div class=\"line\">    username: &apos;&apos;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  updateUsername = (e) =&gt; &#123;</div><div class=\"line\"></div><div class=\"line\">    this.setState(&#123;</div><div class=\"line\"></div><div class=\"line\">      username: e.target.value,</div><div class=\"line\"></div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  handleSubmit = () =&gt; &#123;&#125;</div><div class=\"line\"></div><div class=\"line\">  render () &#123;</div><div class=\"line\"></div><div class=\"line\">    return (</div><div class=\"line\"></div><div class=\"line\">      &lt;form onSubmit=&#123;this.handleSubmit&#125;&gt;</div><div class=\"line\"></div><div class=\"line\">        &lt;input</div><div class=\"line\"></div><div class=\"line\">          type=&apos;text&apos;</div><div class=\"line\"></div><div class=\"line\">          value=&#123;this.state.username&#125;</div><div class=\"line\"></div><div class=\"line\">          onChange=&#123;this.updateUsername&#125; /&gt;</div><div class=\"line\"></div><div class=\"line\">        &lt;button type=&apos;submit&apos;&gt;Submit&lt;/button&gt;</div><div class=\"line\"></div><div class=\"line\">      &lt;/form&gt;</div><div class=\"line\"></div><div class=\"line\">    )</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>而非受控组件（Uncontrolled Component）则是由DOM存放表单数据，并非存放在 React 组件中。我们可以使用 refs 来操控DOM元素：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">class UnControlledForm extends Component &#123;</div><div class=\"line\"></div><div class=\"line\">  handleSubmit = () =&gt; &#123;</div><div class=\"line\"></div><div class=\"line\">    console.log(&quot;Input Value: &quot;, this.input.value)</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  render () &#123;</div><div class=\"line\"></div><div class=\"line\">    return (</div><div class=\"line\"></div><div class=\"line\">      &lt;form onSubmit=&#123;this.handleSubmit&#125;&gt;</div><div class=\"line\"></div><div class=\"line\">        &lt;input</div><div class=\"line\"></div><div class=\"line\">          type=&apos;text&apos;</div><div class=\"line\"></div><div class=\"line\">          ref=&#123;(input) =&gt; this.input = input&#125; /&gt;</div><div class=\"line\"></div><div class=\"line\">        &lt;button type=&apos;submit&apos;&gt;Submit&lt;/button&gt;</div><div class=\"line\"></div><div class=\"line\">      &lt;/form&gt;</div><div class=\"line\"></div><div class=\"line\">    )</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>竟然非受控组件看上去更好实现，我们可以直接从 DOM 中抓取数据，而不需要添加额外的代码。不过实际开发中我们并不提倡使用非受控组件，因为实际情况下我们需要更多的考虑表单验证、选择性的开启或者关闭按钮点击、强制输入格式等功能支持，而此时我们将数据托管到 React 中有助于我们更好地以声明式的方式完成这些功能。引入 React 或者其他 MVVM 框架最初的原因就是为了将我们从繁重的直接操作 DOM 中解放出来。</p>\n<h4 id=\"在生命周期中的哪一步你应该发起-AJAX-请求？\"><a href=\"#在生命周期中的哪一步你应该发起-AJAX-请求？\" class=\"headerlink\" title=\"在生命周期中的哪一步你应该发起 AJAX 请求？\"></a>在生命周期中的哪一步你应该发起 AJAX 请求？</h4><p>我们应当将AJAX 请求放到 componentDidMount 函数中执行，主要原因有下：</p>\n<p>React 下一代调和算法 Fiber 会通过开始或停止渲染的方式优化应用性能，其会影响到 componentWillMount 的触发次数。对于 componentWillMount 这个生命周期函数的调用次数会变得不确定，React 可能会多次频繁调用 componentWillMount。如果我们将 AJAX 请求放到 componentWillMount 函数中，那么显而易见其会被触发多次，自然也就不是好的选择。<br>如果我们将 AJAX 请求放置在生命周期的其他函数中，我们并不能保证请求仅在组件挂载完毕后才会要求响应。如果我们的数据请求在组件挂载之前就完成，并且调用了setState函数将数据添加到组件状态中，对于未挂载的组件则会报错。而在 componentDidMount 函数中进行 AJAX 请求则能有效避免这个问题。</p>\n<h4 id=\"shouldComponentUpdate-的作用是啥以及为何它这么重要？\"><a href=\"#shouldComponentUpdate-的作用是啥以及为何它这么重要？\" class=\"headerlink\" title=\"shouldComponentUpdate 的作用是啥以及为何它这么重要？\"></a>shouldComponentUpdate 的作用是啥以及为何它这么重要？</h4><p>shouldComponentUpdate 允许我们手动地判断是否要进行组件更新，根据组件的应用场景设置函数的合理返回值能够帮我们避免不必要的更新。</p>\n<h4 id=\"如何告诉-React-它应该编译生产环境版本？\"><a href=\"#如何告诉-React-它应该编译生产环境版本？\" class=\"headerlink\" title=\"如何告诉 React 它应该编译生产环境版本？\"></a>如何告诉 React 它应该编译生产环境版本？</h4><p>通常情况下我们会使用 Webpack 的 DefinePlugin 方法来将 NODE_ENV 变量值设置为 production。编译版本中 React 会忽略 propType 验证以及其他的告警信息，同时还会降低代码库的大小，React 使用了 Uglify 插件来移除生产环境下不必要的注释等信息。</p>\n<h4 id=\"为什么我们需要使用-React-提供的-Children-API-而不是-JavaScript-的-map？\"><a href=\"#为什么我们需要使用-React-提供的-Children-API-而不是-JavaScript-的-map？\" class=\"headerlink\" title=\"为什么我们需要使用 React 提供的 Children API 而不是 JavaScript 的 map？\"></a>为什么我们需要使用 React 提供的 Children API 而不是 JavaScript 的 map？</h4><p>props.children并不一定是数组类型，譬如下面这个元素：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Parent&gt;</div><div class=\"line\"></div><div class=\"line\">  &lt;h1&gt;Welcome.&lt;/h1&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/Parent&gt;</div></pre></td></tr></table></figure>\n<p>如果我们使用props.children.map函数来遍历时会受到异常提示，因为在这种情况下props.children是对象（object）而不是数组（array）。React 当且仅当超过一个子元素的情况下会将props.children设置为数组，就像下面这个代码片：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Parent&gt;</div><div class=\"line\"></div><div class=\"line\">  &lt;h1&gt;Welcome.&lt;/h1&gt;</div><div class=\"line\"></div><div class=\"line\">  &lt;h2&gt;props.children will now be an array&lt;/h2&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/Parent&gt;</div></pre></td></tr></table></figure>\n<p>这也就是我们优先选择使用React.Children.map函数的原因，其已经将props.children不同类型的情况考虑在内了。</p>\n<h4 id=\"概述下-React-中的事件处理逻辑\"><a href=\"#概述下-React-中的事件处理逻辑\" class=\"headerlink\" title=\"概述下 React 中的事件处理逻辑\"></a>概述下 React 中的事件处理逻辑</h4><p>为了解决跨浏览器兼容性问题，React 会将浏览器原生事件（Browser Native Event）封装为合成事件（SyntheticEvent）传入设置的事件处理器中。这里的合成事件提供了与原生事件相同的接口，不过它们屏蔽了底层浏览器的细节差异，保证了行为的一致性。另外有意思的是，React 并没有直接将事件附着到子元素上，而是以单一事件监听器的方式将所有的事件发送到顶层进行处理。这样 React 在更新 DOM 的时候就不需要考虑如何去处理附着在 DOM 上的事件监听器，最终达到优化性能的目的。</p>\n<h4 id=\"createElement-与-cloneElement-的区别是什么？\"><a href=\"#createElement-与-cloneElement-的区别是什么？\" class=\"headerlink\" title=\"createElement 与 cloneElement 的区别是什么？\"></a>createElement 与 cloneElement 的区别是什么？</h4><p>createElement 函数是 JSX 编译之后使用的创建 React Element 的函数，而 cloneElement 则是用于复制某个元素并传入新的 Props。</p>\n<h4 id=\"传入-setState-函数的第二个参数的作用是什么？\"><a href=\"#传入-setState-函数的第二个参数的作用是什么？\" class=\"headerlink\" title=\"传入 setState 函数的第二个参数的作用是什么？\"></a>传入 setState 函数的第二个参数的作用是什么？</h4><p>该函数会在setState函数调用完成并且组件开始重渲染的时候被调用，我们可以用该函数来监听渲染是否完成：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">this.setState(</div><div class=\"line\"></div><div class=\"line\">  &#123; username: &apos;tylermcginnis33&apos; &#125;,</div><div class=\"line\"></div><div class=\"line\">  () =&gt; console.log(&apos;setState has finished and the component has re-rendered.&apos;)</div><div class=\"line\"></div><div class=\"line\">)</div></pre></td></tr></table></figure>\n<p>下述代码有错吗？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">this.setState((prevState, props) =&gt; &#123;</div><div class=\"line\"></div><div class=\"line\">  return &#123;</div><div class=\"line\"></div><div class=\"line\">    streak: prevState.streak + props.count</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>这段代码没啥问题，不过只是不太常用罢了，详细可以参考React中setState同步更新策略</p>\n","excerpt":"<h4 id=\"调用-setState-之后发生了什么？\"><a href=\"#调用-setState-之后发生了什么？\" class=\"headerlink\" title=\"调用 setState 之后发生了什么？\"></a>调用 setState 之后发生了什么？</h4><p>在代码中调用setState函数之后，React 会将传入的参数对象与组件当前的状态合并，然后触发所谓的调和过程（Reconciliation）。经过调和过程，React 会以相对高效的方式根据新的状态构建 React 元素树并且着手重新渲染整个UI界面。在 React 得到元素树之后，React 会自动计算出新的树与老树的节点差异，然后根据差异对界面进行最小化重渲染。在差异计算算法中，React 能够相对精确地知道哪些位置发生了改变以及应该如何改变，这就保证了按需更新，而不是全部重新渲染。</p>","more":"<h4 id=\"React-中-Element-与-Component-的区别是？\"><a href=\"#React-中-Element-与-Component-的区别是？\" class=\"headerlink\" title=\"React 中 Element 与 Component 的区别是？\"></a>React 中 Element 与 Component 的区别是？</h4><p>简单而言，React Element 是描述屏幕上所见内容的数据结构，是对于 UI 的对象表述。典型的 React Element 就是利用 JSX 构建的声明式代码片然后被转化为createElement的调用组合。而 React Component 则是可以接收参数输入并且返回某个 React Element 的函数或者类。更多介绍可以参考React Elements vs React Components。</p>\n<h4 id=\"在什么情况下你会优先选择使用-Class-Component-而不是-Functional-Component？\"><a href=\"#在什么情况下你会优先选择使用-Class-Component-而不是-Functional-Component？\" class=\"headerlink\" title=\"在什么情况下你会优先选择使用 Class Component 而不是 Functional Component？\"></a>在什么情况下你会优先选择使用 Class Component 而不是 Functional Component？</h4><p>在组件需要包含内部状态或者使用到生命周期函数的时候使用 Class Component ，否则使用函数式组件。</p>\n<h4 id=\"React-中-refs-的作用是什么？\"><a href=\"#React-中-refs-的作用是什么？\" class=\"headerlink\" title=\"React 中 refs 的作用是什么？\"></a>React 中 refs 的作用是什么？</h4><p>Refs 是 React 提供给我们的安全访问 DOM 元素或者某个组件实例的句柄。我们可以为元素添加ref属性然后在回调函数中接受该元素在 DOM 树中的句柄，该值会作为回调函数的第一个参数返回：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">class CustomForm extends Component &#123;</div><div class=\"line\"></div><div class=\"line\">  handleSubmit = () =&gt; &#123;</div><div class=\"line\"></div><div class=\"line\">    console.log(&quot;Input Value: &quot;, this.input.value)</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  render () &#123;</div><div class=\"line\"></div><div class=\"line\">    return (</div><div class=\"line\"></div><div class=\"line\">      &lt;form onSubmit=&#123;this.handleSubmit&#125;&gt;</div><div class=\"line\"></div><div class=\"line\">        &lt;input</div><div class=\"line\"></div><div class=\"line\">          type=&apos;text&apos;</div><div class=\"line\"></div><div class=\"line\">          ref=&#123;(input) =&gt; this.input = input&#125; /&gt;</div><div class=\"line\"></div><div class=\"line\">        &lt;button type=&apos;submit&apos;&gt;Submit&lt;/button&gt;</div><div class=\"line\"></div><div class=\"line\">      &lt;/form&gt;</div><div class=\"line\"></div><div class=\"line\">    )</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上述代码中的input域包含了一个ref属性，该属性声明的回调函数会接收input对应的 DOM 元素，我们将其绑定到this指针以便在其他的类函数中使用。另外值得一提的是，refs 并不是类组件的专属，函数式组件同样能够利用闭包暂存其值：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">function CustomForm (&#123;handleSubmit&#125;) &#123;</div><div class=\"line\"></div><div class=\"line\">  let inputElement</div><div class=\"line\"></div><div class=\"line\">  return (</div><div class=\"line\"></div><div class=\"line\">    &lt;form onSubmit=&#123;() =&gt; handleSubmit(inputElement.value)&#125;&gt;</div><div class=\"line\"></div><div class=\"line\">      &lt;input</div><div class=\"line\"></div><div class=\"line\">        type=&apos;text&apos;</div><div class=\"line\"></div><div class=\"line\">        ref=&#123;(input) =&gt; inputElement = input&#125; /&gt;</div><div class=\"line\"></div><div class=\"line\">      &lt;button type=&apos;submit&apos;&gt;Submit&lt;/button&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;/form&gt;</div><div class=\"line\"></div><div class=\"line\">  )</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"React-中-keys-的作用是什么？\"><a href=\"#React-中-keys-的作用是什么？\" class=\"headerlink\" title=\"React 中 keys 的作用是什么？\"></a>React 中 keys 的作用是什么？</h4><p>Keys 是 React 用于追踪哪些列表中元素被修改、被添加或者被移除的辅助标识。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">render () &#123;</div><div class=\"line\"></div><div class=\"line\">  return (</div><div class=\"line\"></div><div class=\"line\">    &lt;ul&gt;</div><div class=\"line\"></div><div class=\"line\">      &#123;this.state.todoItems.map((&#123;task, uid&#125;) =&gt; &#123;</div><div class=\"line\"></div><div class=\"line\">        return &lt;li key=&#123;uid&#125;&gt;&#123;task&#125;&lt;/li&gt;</div><div class=\"line\"></div><div class=\"line\">      &#125;)&#125;</div><div class=\"line\"></div><div class=\"line\">    &lt;/ul&gt;</div><div class=\"line\"></div><div class=\"line\">  )</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在开发过程中，我们需要保证某个元素的 key 在其同级元素中具有唯一性。在 React Diff 算法中 React 会借助元素的 Key 值来判断该元素是新近创建的还是被移动而来的元素，从而减少不必要的元素重渲染。此外，React 还需要借助 Key 值来判断元素与本地状态的关联关系，因此我们绝不可忽视转换函数中 Key 的重要性。</p>\n<h4 id=\"如果你创建了类似于下面的Twitter元素，那么它相关的类定义是啥样子的？\"><a href=\"#如果你创建了类似于下面的Twitter元素，那么它相关的类定义是啥样子的？\" class=\"headerlink\" title=\"如果你创建了类似于下面的Twitter元素，那么它相关的类定义是啥样子的？\"></a>如果你创建了类似于下面的Twitter元素，那么它相关的类定义是啥样子的？</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Twitter username=&apos;tylermcginnis33&apos;&gt;</div><div class=\"line\"></div><div class=\"line\">  &#123;(user) =&gt; user === null</div><div class=\"line\"></div><div class=\"line\">    ? &lt;Loading /&gt;</div><div class=\"line\"></div><div class=\"line\">    : &lt;Badge info=&#123;user&#125; /&gt;&#125;</div><div class=\"line\"></div><div class=\"line\">&lt;/Twitter&gt;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">import React, &#123; Component, PropTypes &#125; from &apos;react&apos;</div><div class=\"line\"></div><div class=\"line\">import fetchUser from &apos;twitter&apos;</div><div class=\"line\"></div><div class=\"line\">// fetchUser take in a username returns a promise</div><div class=\"line\"></div><div class=\"line\">// which will resolve with that username&apos;s data.</div><div class=\"line\"></div><div class=\"line\">class Twitter extends Component &#123;</div><div class=\"line\"></div><div class=\"line\">  // finish this</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如果你还不熟悉回调渲染模式（Render Callback Pattern），这个代码可能看起来有点怪。这种模式中，组件会接收某个函数作为其子组件，然后在渲染函数中以props.children进行调用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">import React, &#123; Component, PropTypes &#125; from &apos;react&apos;</div><div class=\"line\"></div><div class=\"line\">import fetchUser from &apos;twitter&apos;</div><div class=\"line\"></div><div class=\"line\">class Twitter extends Component &#123;</div><div class=\"line\"></div><div class=\"line\">  state = &#123;</div><div class=\"line\"></div><div class=\"line\">    user: null,</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  static propTypes = &#123;</div><div class=\"line\"></div><div class=\"line\">    username: PropTypes.string.isRequired,</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  componentDidMount () &#123;</div><div class=\"line\"></div><div class=\"line\">    fetchUser(this.props.username)</div><div class=\"line\"></div><div class=\"line\">      .then((user) =&gt; this.setState(&#123;user&#125;))</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  render () &#123;</div><div class=\"line\"></div><div class=\"line\">    return this.props.children(this.state.user)</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这种模式的优势在于将父组件与子组件解耦和，父组件可以直接访问子组件的内部状态而不需要再通过Props传递，这样父组件能够更为方便地控制子组件展示的UI界面。譬如产品经理让我们将原本展示的Badge替换为Profile，我们可以轻易地修改下回调函数即可：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&lt;Twitter username=&apos;tylermcginnis33&apos;&gt;</div><div class=\"line\"></div><div class=\"line\">  &#123;(user) =&gt; user === null</div><div class=\"line\"></div><div class=\"line\">    ? &lt;Loading /&gt;</div><div class=\"line\"></div><div class=\"line\">    : &lt;Profile info=&#123;user&#125; /&gt;&#125;</div><div class=\"line\"></div><div class=\"line\">&lt;/Twitter&gt;</div></pre></td></tr></table></figure>\n<h4 id=\"Controlled-Component-与-Uncontrolled-Component-之间的区别是什么？\"><a href=\"#Controlled-Component-与-Uncontrolled-Component-之间的区别是什么？\" class=\"headerlink\" title=\"Controlled Component 与 Uncontrolled Component 之间的区别是什么？\"></a>Controlled Component 与 Uncontrolled Component 之间的区别是什么？</h4><p>React 的核心组成之一就是能够维持内部状态的自治组件，不过当我们引入原生的HTML表单元素时（input,select,textarea 等），我们是否应该将所有的数据托管到 React 组件中还是将其仍然保留在 DOM 元素中呢？这个问题的答案就是受控组件与非受控组件的定义分割。受控组件（Controlled Component）代指那些交由 React 控制并且所有的表单数据统一存放的组件。譬如下面这段代码中username变量值并没有存放到DOM元素中，而是存放在组件状态数据中。任何时候我们需要改变username变量值时，我们应当调用setState函数进行修改。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\">class ControlledForm extends Component &#123;</div><div class=\"line\"></div><div class=\"line\">  state = &#123;</div><div class=\"line\"></div><div class=\"line\">    username: &apos;&apos;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  updateUsername = (e) =&gt; &#123;</div><div class=\"line\"></div><div class=\"line\">    this.setState(&#123;</div><div class=\"line\"></div><div class=\"line\">      username: e.target.value,</div><div class=\"line\"></div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  handleSubmit = () =&gt; &#123;&#125;</div><div class=\"line\"></div><div class=\"line\">  render () &#123;</div><div class=\"line\"></div><div class=\"line\">    return (</div><div class=\"line\"></div><div class=\"line\">      &lt;form onSubmit=&#123;this.handleSubmit&#125;&gt;</div><div class=\"line\"></div><div class=\"line\">        &lt;input</div><div class=\"line\"></div><div class=\"line\">          type=&apos;text&apos;</div><div class=\"line\"></div><div class=\"line\">          value=&#123;this.state.username&#125;</div><div class=\"line\"></div><div class=\"line\">          onChange=&#123;this.updateUsername&#125; /&gt;</div><div class=\"line\"></div><div class=\"line\">        &lt;button type=&apos;submit&apos;&gt;Submit&lt;/button&gt;</div><div class=\"line\"></div><div class=\"line\">      &lt;/form&gt;</div><div class=\"line\"></div><div class=\"line\">    )</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>而非受控组件（Uncontrolled Component）则是由DOM存放表单数据，并非存放在 React 组件中。我们可以使用 refs 来操控DOM元素：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">class UnControlledForm extends Component &#123;</div><div class=\"line\"></div><div class=\"line\">  handleSubmit = () =&gt; &#123;</div><div class=\"line\"></div><div class=\"line\">    console.log(&quot;Input Value: &quot;, this.input.value)</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  render () &#123;</div><div class=\"line\"></div><div class=\"line\">    return (</div><div class=\"line\"></div><div class=\"line\">      &lt;form onSubmit=&#123;this.handleSubmit&#125;&gt;</div><div class=\"line\"></div><div class=\"line\">        &lt;input</div><div class=\"line\"></div><div class=\"line\">          type=&apos;text&apos;</div><div class=\"line\"></div><div class=\"line\">          ref=&#123;(input) =&gt; this.input = input&#125; /&gt;</div><div class=\"line\"></div><div class=\"line\">        &lt;button type=&apos;submit&apos;&gt;Submit&lt;/button&gt;</div><div class=\"line\"></div><div class=\"line\">      &lt;/form&gt;</div><div class=\"line\"></div><div class=\"line\">    )</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>竟然非受控组件看上去更好实现，我们可以直接从 DOM 中抓取数据，而不需要添加额外的代码。不过实际开发中我们并不提倡使用非受控组件，因为实际情况下我们需要更多的考虑表单验证、选择性的开启或者关闭按钮点击、强制输入格式等功能支持，而此时我们将数据托管到 React 中有助于我们更好地以声明式的方式完成这些功能。引入 React 或者其他 MVVM 框架最初的原因就是为了将我们从繁重的直接操作 DOM 中解放出来。</p>\n<h4 id=\"在生命周期中的哪一步你应该发起-AJAX-请求？\"><a href=\"#在生命周期中的哪一步你应该发起-AJAX-请求？\" class=\"headerlink\" title=\"在生命周期中的哪一步你应该发起 AJAX 请求？\"></a>在生命周期中的哪一步你应该发起 AJAX 请求？</h4><p>我们应当将AJAX 请求放到 componentDidMount 函数中执行，主要原因有下：</p>\n<p>React 下一代调和算法 Fiber 会通过开始或停止渲染的方式优化应用性能，其会影响到 componentWillMount 的触发次数。对于 componentWillMount 这个生命周期函数的调用次数会变得不确定，React 可能会多次频繁调用 componentWillMount。如果我们将 AJAX 请求放到 componentWillMount 函数中，那么显而易见其会被触发多次，自然也就不是好的选择。<br>如果我们将 AJAX 请求放置在生命周期的其他函数中，我们并不能保证请求仅在组件挂载完毕后才会要求响应。如果我们的数据请求在组件挂载之前就完成，并且调用了setState函数将数据添加到组件状态中，对于未挂载的组件则会报错。而在 componentDidMount 函数中进行 AJAX 请求则能有效避免这个问题。</p>\n<h4 id=\"shouldComponentUpdate-的作用是啥以及为何它这么重要？\"><a href=\"#shouldComponentUpdate-的作用是啥以及为何它这么重要？\" class=\"headerlink\" title=\"shouldComponentUpdate 的作用是啥以及为何它这么重要？\"></a>shouldComponentUpdate 的作用是啥以及为何它这么重要？</h4><p>shouldComponentUpdate 允许我们手动地判断是否要进行组件更新，根据组件的应用场景设置函数的合理返回值能够帮我们避免不必要的更新。</p>\n<h4 id=\"如何告诉-React-它应该编译生产环境版本？\"><a href=\"#如何告诉-React-它应该编译生产环境版本？\" class=\"headerlink\" title=\"如何告诉 React 它应该编译生产环境版本？\"></a>如何告诉 React 它应该编译生产环境版本？</h4><p>通常情况下我们会使用 Webpack 的 DefinePlugin 方法来将 NODE_ENV 变量值设置为 production。编译版本中 React 会忽略 propType 验证以及其他的告警信息，同时还会降低代码库的大小，React 使用了 Uglify 插件来移除生产环境下不必要的注释等信息。</p>\n<h4 id=\"为什么我们需要使用-React-提供的-Children-API-而不是-JavaScript-的-map？\"><a href=\"#为什么我们需要使用-React-提供的-Children-API-而不是-JavaScript-的-map？\" class=\"headerlink\" title=\"为什么我们需要使用 React 提供的 Children API 而不是 JavaScript 的 map？\"></a>为什么我们需要使用 React 提供的 Children API 而不是 JavaScript 的 map？</h4><p>props.children并不一定是数组类型，譬如下面这个元素：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Parent&gt;</div><div class=\"line\"></div><div class=\"line\">  &lt;h1&gt;Welcome.&lt;/h1&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/Parent&gt;</div></pre></td></tr></table></figure>\n<p>如果我们使用props.children.map函数来遍历时会受到异常提示，因为在这种情况下props.children是对象（object）而不是数组（array）。React 当且仅当超过一个子元素的情况下会将props.children设置为数组，就像下面这个代码片：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Parent&gt;</div><div class=\"line\"></div><div class=\"line\">  &lt;h1&gt;Welcome.&lt;/h1&gt;</div><div class=\"line\"></div><div class=\"line\">  &lt;h2&gt;props.children will now be an array&lt;/h2&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/Parent&gt;</div></pre></td></tr></table></figure>\n<p>这也就是我们优先选择使用React.Children.map函数的原因，其已经将props.children不同类型的情况考虑在内了。</p>\n<h4 id=\"概述下-React-中的事件处理逻辑\"><a href=\"#概述下-React-中的事件处理逻辑\" class=\"headerlink\" title=\"概述下 React 中的事件处理逻辑\"></a>概述下 React 中的事件处理逻辑</h4><p>为了解决跨浏览器兼容性问题，React 会将浏览器原生事件（Browser Native Event）封装为合成事件（SyntheticEvent）传入设置的事件处理器中。这里的合成事件提供了与原生事件相同的接口，不过它们屏蔽了底层浏览器的细节差异，保证了行为的一致性。另外有意思的是，React 并没有直接将事件附着到子元素上，而是以单一事件监听器的方式将所有的事件发送到顶层进行处理。这样 React 在更新 DOM 的时候就不需要考虑如何去处理附着在 DOM 上的事件监听器，最终达到优化性能的目的。</p>\n<h4 id=\"createElement-与-cloneElement-的区别是什么？\"><a href=\"#createElement-与-cloneElement-的区别是什么？\" class=\"headerlink\" title=\"createElement 与 cloneElement 的区别是什么？\"></a>createElement 与 cloneElement 的区别是什么？</h4><p>createElement 函数是 JSX 编译之后使用的创建 React Element 的函数，而 cloneElement 则是用于复制某个元素并传入新的 Props。</p>\n<h4 id=\"传入-setState-函数的第二个参数的作用是什么？\"><a href=\"#传入-setState-函数的第二个参数的作用是什么？\" class=\"headerlink\" title=\"传入 setState 函数的第二个参数的作用是什么？\"></a>传入 setState 函数的第二个参数的作用是什么？</h4><p>该函数会在setState函数调用完成并且组件开始重渲染的时候被调用，我们可以用该函数来监听渲染是否完成：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">this.setState(</div><div class=\"line\"></div><div class=\"line\">  &#123; username: &apos;tylermcginnis33&apos; &#125;,</div><div class=\"line\"></div><div class=\"line\">  () =&gt; console.log(&apos;setState has finished and the component has re-rendered.&apos;)</div><div class=\"line\"></div><div class=\"line\">)</div></pre></td></tr></table></figure>\n<p>下述代码有错吗？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">this.setState((prevState, props) =&gt; &#123;</div><div class=\"line\"></div><div class=\"line\">  return &#123;</div><div class=\"line\"></div><div class=\"line\">    streak: prevState.streak + props.count</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>这段代码没啥问题，不过只是不太常用罢了，详细可以参考React中setState同步更新策略</p>"},{"title":"shell 命令大全","date":"2017-04-07T09:03:42.000Z","_content":"### 1.系统信息\narch 显示机器的处理器架构(1)  \nuname -m 显示机器的处理器架构(2)  \nuname -r 显示正在使用的内核版本  \n<!--more-->\ndmidecode -q 显示硬件系统部件 - (SMBIOS / DMI)  \nhdparm -i /dev/hda 罗列一个磁盘的架构特性  \nhdparm -tT /dev/sda 在磁盘上执行测试性读取操作  \ncat /proc/cpuinfo 显示CPU info的信息  \ncat /proc/interrupts 显示中断  \ncat /proc/meminfo 校验内存使用  \ncat /proc/swaps 显示哪些swap被使用  \ncat /proc/version 显示内核的版本  \ncat /proc/net/dev 显示网络适配器及统计  \ncat /proc/mounts 显示已加载的文件系统  \nlspci -tv 罗列 PCI 设备  \nlsusb -tv 显示 USB 设备  \ndate 显示系统日期   \ncal 2007 显示2007年的日历表  \ndate 041217002007.00 设置日期和时间 - 月日时分年.秒  \nclock -w 将时间修改保存到 BIOS  \n\n\n\n### 2.关机 (系统的关机、重启以及登出 )\nshutdown -h now 关闭系统(1)\ninit 0 关闭系统(2)\ntelinit 0 关闭系统(3)\nshutdown -h hours:minutes & 按预定时间关闭系统\nshutdown -c 取消按预定时间关闭系统\nshutdown -r now 重启(1)\nreboot 重启(2)\nlogout 注销\n\n\n\n### 3.文件和目录\ncd /home 进入 '/ home' 目录'  \ncd .. 返回上一级目录  \ncd ../.. 返回上两级目录  \ncd 进入个人的主目录  \ncd ~user1 进入个人的主目录  \ncd - 返回上次所在的目录  \npwd 显示工作路径  \nls 查看目录中的文件  \nls -F 查看目录中的文件\nls -l 显示文件和目录的详细资料  \nls -a 显示隐藏文件  \nls *[0-9]* 显示包含数字的文件名和目录名  \ntree 显示文件和目录由根目录开始的树形结构(1)  \nlstree 显示文件和目录由根目录开始的树形结构(2)  \nmkdir dir1 创建一个叫做 'dir1' 的目录'  \nmkdir dir1 dir2 同时创建两个目录  \nmkdir -p /tmp/dir1/dir2 创建一个目录树  \nrm -f file1 删除一个叫做 'file1' 的文件'  \nrmdir dir1 删除一个叫做 'dir1' 的目录'  \nrm -rf dir1 删除一个叫做 'dir1'  的目录并同时删除其内容  \nrm -rf dir1 dir2 同时删除两个目录及它们的内容  \nmv dir1 new_dir 重命名/移动 一个目录  \ncp file1 file2 复制一个文件  \ncp dir/* . 复制一个目录下的所有文件到当前工作目录  \ncp -a /tmp/dir1 . 复制一个目录到当前工作目录  \ncp -a dir1 dir2 复制一个目录  \nln -s file1 lnk1 创建一个指向文件或目录的软链接  \nln file1 lnk1 创建一个指向文件或目录的物理链接  \ntouch -t 0712250000 file1  修改一个文件或目录的时间戳 - (YYMMDDhhmm)  \nfile file1 outputs the mime type of the file as text  \niconv -l 列出已知的编码  \niconv -f fromEncoding -t toEncoding inputFile > outputFile creates a new from the given input file by assuming it is encoded in fromEncoding and converting it to toEncoding.  \nfind . -maxdepth 1 -name *.jpg -print -exec convert \"{}\" -resize 80x60 \"thumbs/{}\" \\; batch resize files in the current directory and send them to a thumbnails directory (requires convert from Imagemagick)  \n\n\n\n### 4.文件搜索\nfind / -name file1 从 '/'  开始进入根文件系统搜索文件和目录  \nfind / -user user1 搜索属于用户 'user1' 的文件和目录  \nfind /home/user1 -name \\*.bin 在目录 '/ home/user1' 中搜索带有'.bin' 结尾的文件  \nfind /usr/bin -type f -atime +100 搜索在过去100天内未被使用过的执行文件  \nfind /usr/bin -type f -mtime -10 搜索在10天内被创建或者修改过的文件  \nfind / -name \\*.rpm -exec chmod 755 '{}' \\; 搜索以 '.rpm' 结尾的文件并定义其权限  \nfind / -xdev -name \\*.rpm 搜索以 '.rpm' 结尾的文件，忽略光驱、捷盘等可移动设备\nlocate \\*.ps 寻找以 '.ps' 结尾的文件 - 先运行 'updatedb' 命令  \nwhereis halt 显示一个二进制文件、源码或man的位置  \nwhich halt 显示一个二进制文件或可执行文件的完整路径  \n\n\n\n#### 5.挂载一个文件系统\nmount /dev/hda2 /mnt/hda2 挂载一个叫做hda2的盘 - 确定目录 '/ mnt/hda2' 已经存在  \numount /dev/hda2 卸载一个叫做hda2的盘 - 先从挂载点 '/ mnt/hda2' 退出   \nfuser -km /mnt/hda2 当设备繁忙时强制卸载  \numount -n /mnt/hda2 运行卸载操作而不写入  /etc/mtab 文件-  当文件为只读或当磁盘写满时非常有用  \nmount /dev/fd0 /mnt/floppy 挂载一个软盘  \nmount /dev/cdrom /mnt/cdrom 挂载一个cdrom或dvdrom  \nmount /dev/hdc /mnt/cdrecorder 挂载一个cdrw或dvdrom  \nmount /dev/hdb /mnt/cdrecorder 挂载一个cdrw或dvdrom  \nmount -o loop file.iso /mnt/cdrom 挂载一个文件或ISO镜像文件  \nmount -t vfat /dev/hda5 /mnt/hda5 挂载一个Windows FAT32文件系统  \nmount /dev/sda1 /mnt/usbdisk 挂载一个usb 捷盘或闪存设备  \nmount -t smbfs -o username=user,password=pass //WinClient/share /mnt/share 挂载一个windows网络共享  \n\n\n\n### 6.磁盘空间\ndf -h 显示已经挂载的分区列表  \nls -lSr |more 以尺寸大小排列文件和目录  \ndu -sh dir1 估算目录 'dir1' 已经使用的磁盘空间'  \ndu -sk * | sort -rn  以容量大小为依据依次显示文件和目录的大小  \nrpm -q -a --qf '%10{SIZE}t%{NAME}n' | sort  -k1,1n 以大小为依据依次显示已安装的rpm包所使用的空间 (fedora, redhat类系统)\ndpkg-query -W -f='${Installed-Size;10}t${Package}n' | sort -k1,1n 以大小为依据显示已安装的deb包所使用的空间 (ubuntu, debian类系统)\n\n返回顶部索引 ^\n\n### 7.用户和群组\ngroupadd group_name 创建一个新用户组\ngroupdel group_name 删除一个用户组\ngroupmod -n new_group_name old_group_name 重命名一个用户组\nuseradd -c \"Name Surname \" -g admin -d /home/user1 -s /bin/bash user1 创建一个属于 \"admin\" 用户组的用户\nuseradd user1 创建一个新用户\nuserdel -r user1 删除一个用户 ( '-r' 排除主目录)\nusermod -c \"User FTP\" -g system -d /ftp/user1 -s /bin/nologin user1 修改用户属性\npasswd 修改口令\npasswd user1 修改一个用户的口令 (只允许root执行)\nchage -E 2005-12-31 user1 设置用户口令的失效期限\npwck 检查 '/etc/passwd' 的文件格式和语法修正以及存在的用户\ngrpck 检查 '/etc/passwd' 的文件格式和语法修正以及存在的群组\nnewgrp group_name 登陆进一个新的群组以改变新创建文件的预设群组\n\n\n\n### 8.文件的权限 - 使用 \"+\" 设置权限，使用 \"-\" 用于取消\nls -lh 显示权限\nls /tmp | pr -T5 -W$COLUMNS 将终端划分成5栏显示\nchmod ugo+rwx directory1 设置目录的所有人(u)、群组(g)以及其他人(o)以读（r ）、写(w)和执行(x)的权限\nchmod go-rwx directory1 删除群组(g)与其他人(o)对目录的读写执行权限\nchown user1 file1 改变一个文件的所有人属性\nchown -R user1 directory1 改变一个目录的所有人属性并同时改变改目录下所有文件的属性\nchgrp group1 file1 改变文件的群组\nchown user1:group1 file1 改变一个文件的所有人和群组属性\nfind / -perm -u+s 罗列一个系统中所有使用了SUID控制的文件\nchmod u+s /bin/file1 设置一个二进制文件的 SUID 位 - 运行该文件的用户也被赋予和所有者同样的权限\nchmod u-s /bin/file1 禁用一个二进制文件的 SUID位\nchmod g+s /home/public 设置一个目录的SGID 位 - 类似SUID ，不过这是针对目录的\nchmod g-s /home/public 禁用一个目录的 SGID 位\nchmod o+t /home/public 设置一个文件的 STIKY 位 - 只允许合法所有人删除文件\nchmod o-t /home/public 禁用一个目录的 STIKY 位\n\n\n\n### 9.文件的特殊属性 - 使用 \"+\" 设置权限，使用 \"-\" 用于取消\nchattr +a file1 只允许以追加方式读写文件\nchattr +c file1 允许这个文件能被内核自动压缩/解压\nchattr +d file1 在进行文件系统备份时，dump程序将忽略这个文件\nchattr +i file1 设置成不可变的文件，不能被删除、修改、重命名或者链接\nchattr +s file1 允许一个文件被安全地删除\nchattr +S file1 一旦应用程序对这个文件执行了写操作，使系统立刻把修改的结果写到磁盘\nchattr +u file1 若文件被删除，系统会允许你在以后恢复这个被删除的文件\nlsattr 显示特殊的属性\n\n\n### 10.打包和压缩文件\nbunzip2 file1.bz2 解压一个叫做 'file1.bz2'的文件\nbzip2 file1 压缩一个叫做 'file1' 的文件\ngunzip file1.gz 解压一个叫做 'file1.gz'的文件\ngzip file1 压缩一个叫做 'file1'的文件\ngzip -9 file1 最大程度压缩\nrar a file1.rar test_file 创建一个叫做 'file1.rar' 的包\nrar a file1.rar file1 file2 dir1 同时压缩 'file1', 'file2' 以及目录 'dir1'\nrar x file1.rar 解压rar包\nunrar x file1.rar 解压rar包\ntar -cvf archive.tar file1 创建一个非压缩的 tarball\ntar -cvf archive.tar file1 file2 dir1 创建一个包含了 'file1', 'file2' 以及 'dir1'的档案文件\ntar -tf archive.tar 显示一个包中的内容\ntar -xvf archive.tar 释放一个包\ntar -xvf archive.tar -C /tmp 将压缩包释放到 /tmp目录下\ntar -cvfj archive.tar.bz2 dir1 创建一个bzip2格式的压缩包\ntar -xvfj archive.tar.bz2 解压一个bzip2格式的压缩包\ntar -cvfz archive.tar.gz dir1 创建一个gzip格式的压缩包\ntar -xvfz archive.tar.gz 解压一个gzip格式的压缩包\nzip file1.zip file1 创建一个zip格式的压缩包\nzip -r file1.zip file1 file2 dir1 将几个文件和目录同时压缩成一个zip格式的压缩包\nunzip file1.zip 解压一个zip格式压缩包\n\n### 11.RPM 包 - （Fedora, Redhat及类似系统）\nrpm -ivh package.rpm 安装一个rpm包\nrpm -ivh --nodeeps package.rpm 安装一个rpm包而忽略依赖关系警告\nrpm -U package.rpm 更新一个rpm包但不改变其配置文件\nrpm -F package.rpm 更新一个确定已经安装的rpm包\nrpm -e package_name.rpm 删除一个rpm包\nrpm -qa 显示系统中所有已经安装的rpm包\nrpm -qa | grep httpd 显示所有名称中包含 \"httpd\" 字样的rpm包\nrpm -qi package_name 获取一个已安装包的特殊信息\nrpm -qg \"System Environment/Daemons\" 显示一个组件的rpm包\nrpm -ql package_name 显示一个已经安装的rpm包提供的文件列表\nrpm -qc package_name 显示一个已经安装的rpm包提供的配置文件列表\nrpm -q package_name --whatrequires 显示与一个rpm包存在依赖关系的列表\nrpm -q package_name --whatprovides 显示一个rpm包所占的体积\nrpm -q package_name --scripts 显示在安装/删除期间所执行的脚本l\nrpm -q package_name --changelog 显示一个rpm包的修改历史\nrpm -qf /etc/httpd/conf/httpd.conf 确认所给的文件由哪个rpm包所提供\nrpm -qp package.rpm -l 显示由一个尚未安装的rpm包提供的文件列表\nrpm --import /media/cdrom/RPM-GPG-KEY 导入公钥数字证书\nrpm --checksig package.rpm 确认一个rpm包的完整性\nrpm -qa gpg-pubkey 确认已安装的所有rpm包的完整性\nrpm -V package_name 检查文件尺寸、 许可、类型、所有者、群组、MD5检查以及最后修改时间\nrpm -Va 检查系统中所有已安装的rpm包- 小心使用\nrpm -Vp package.rpm 确认一个rpm包还未安装\nrpm2cpio package.rpm | cpio --extract --make-directories *bin* 从一个rpm包运行可执行文件\nrpm -ivh /usr/src/redhat/RPMS/`arch`/package.rpm 从一个rpm源码安装一个构建好的包\nrpmbuild --rebuild package_name.src.rpm 从一个rpm源码构建一个 rpm 包\n\n### 12.YUM 软件包升级器 - （Fedora, RedHat及类似系统）\nyum install package_name 下载并安装一个rpm包\nyum localinstall package_name.rpm 将安装一个rpm包，使用你自己的软件仓库为你解决所有依赖关系\nyum update package_name.rpm 更新当前系统中所有安装的rpm包\nyum update package_name 更新一个rpm包\nyum remove package_name 删除一个rpm包\nyum list 列出当前系统中安装的所有包\nyum search package_name 在rpm仓库中搜寻软件包\nyum clean packages 清理rpm缓存删除下载的包\nyum clean headers 删除所有头文件\nyum clean all 删除所有缓存的包和头文件\n\n\n### 13.DEB 包 (Debian, Ubuntu 以及类似系统)\ndpkg -i package.deb 安装/更新一个 deb 包\ndpkg -r package_name 从系统删除一个 deb 包\ndpkg -l 显示系统中所有已经安装的 deb 包\ndpkg -l | grep httpd 显示所有名称中包含 \"httpd\" 字样的deb包\ndpkg -s package_name 获得已经安装在系统中一个特殊包的信息\ndpkg -L package_name 显示系统中已经安装的一个deb包所提供的文件列表\ndpkg --contents package.deb 显示尚未安装的一个包所提供的文件列表\ndpkg -S /bin/ping 确认所给的文件由哪个deb包提供\n\n\n### 14.APT 软件工具 (Debian, Ubuntu 以及类似系统)\napt-get install package_name 安装/更新一个 deb 包\napt-cdrom install package_name 从光盘安装/更新一个 deb 包\napt-get update 升级列表中的软件包\napt-get upgrade 升级所有已安装的软件\napt-get remove package_name 从系统删除一个deb包\napt-get check 确认依赖的软件仓库正确\napt-get clean 从下载的软件包中清理缓存\napt-cache search searched-package 返回包含所要搜索字符串的软件包名称\n\n\n### 15.查看文件内容\ncat file1 从第一个字节开始正向查看文件的内容\ntac file1 从最后一行开始反向查看一个文件的内容\nmore file1 查看一个长文件的内容\nless file1 类似于 'more' 命令，但是它允许在文件中和正向操作一样的反向操作\nhead -2 file1 查看一个文件的前两行\ntail -2 file1 查看一个文件的最后两行\ntail -f /var/log/messages 实时查看被添加到一个文件中的内容\n\n### 16.文本处理\ncat file1 file2 ... | command <> file1_in.txt_or_file1_out.txt general syntax for text manipulation using PIPE, STDIN and STDOUT\ncat file1 | command( sed, grep, awk, grep, etc...) > result.txt 合并一个文件的详细说明文本，并将简介写入一个新文件中\ncat file1 | command( sed, grep, awk, grep, etc...) >> result.txt 合并一个文件的详细说明文本，并将简介写入一个已有的文件中\ngrep Aug /var/log/messages 在文件 '/var/log/messages'中查找关键词\"Aug\"\ngrep ^Aug /var/log/messages 在文件 '/var/log/messages'中查找以\"Aug\"开始的词汇\ngrep [0-9] /var/log/messages 选择 '/var/log/messages' 文件中所有包含数字的行\ngrep Aug -R /var/log/* 在目录 '/var/log' 及随后的目录中搜索字符串\"Aug\"\nsed 's/stringa1/stringa2/g' example.txt 将example.txt文件中的 \"string1\" 替换成 \"string2\"\nsed '/^$/d' example.txt 从example.txt文件中删除所有空白行\nsed '/ *#/d; /^$/d' example.txt 从example.txt文件中删除所有注释和空白行\necho 'esempio' | tr '[:lower:]' '[:upper:]' 合并上下单元格内容\nsed -e '1d' result.txt 从文件example.txt 中排除第一行\nsed -n '/stringa1/p' 查看只包含词汇 \"string1\"的行\nsed -e 's/ *$//' example.txt 删除每一行最后的空白字符\nsed -e 's/stringa1//g' example.txt 从文档中只删除词汇 \"string1\" 并保留剩余全部\nsed -n '1,5p;5q' example.txt 查看从第一行到第5行内容\nsed -n '5p;5q' example.txt 查看第5行\nsed -e 's/00*/0/g' example.txt 用单个零替换多个零\ncat -n file1 标示文件的行数\ncat example.txt | awk 'NR%2==1' 删除example.txt文件中的所有偶数行\necho a b c | awk '{print $1}' 查看一行第一栏\necho a b c | awk '{print $1,$3}' 查看一行的第一和第三栏\npaste file1 file2 合并两个文件或两栏的内容\npaste -d '+' file1 file2 合并两个文件或两栏的内容，中间用\"+\"区分\nsort file1 file2 排序两个文件的内容\nsort file1 file2 | uniq 取出两个文件的并集(重复的行只保留一份)\nsort file1 file2 | uniq -u 删除交集，留下其他的行\nsort file1 file2 | uniq -d 取出两个文件的交集(只留下同时存在于两个文件中的文件)\ncomm -1 file1 file2 比较两个文件的内容只删除 'file1' 所包含的内容\ncomm -2 file1 file2 比较两个文件的内容只删除 'file2' 所包含的内容\ncomm -3 file1 file2 比较两个文件的内容只删除两个文件共有的部分\n\n\n### 17.字符设置和文件格式转换\ndos2unix filedos.txt fileunix.txt 将一个文本文件的格式从MSDOS转换成UNIX\nunix2dos fileunix.txt filedos.txt 将一个文本文件的格式从UNIX转换成MSDOS\nrecode ..HTML < page.txt > page.html 将一个文本文件转换成html\nrecode -l | more 显示所有允许的转换格式\n\n\n### 18.文件系统分析\nbadblocks -v /dev/hda1 检查磁盘hda1上的坏磁块\nfsck /dev/hda1 修复/检查hda1磁盘上linux文件系统的完整性\nfsck.ext2 /dev/hda1 修复/检查hda1磁盘上ext2文件系统的完整性\ne2fsck /dev/hda1 修复/检查hda1磁盘上ext2文件系统的完整性\ne2fsck -j /dev/hda1 修复/检查hda1磁盘上ext3文件系统的完整性\nfsck.ext3 /dev/hda1 修复/检查hda1磁盘上ext3文件系统的完整性\nfsck.vfat /dev/hda1 修复/检查hda1磁盘上fat文件系统的完整性\nfsck.msdos /dev/hda1 修复/检查hda1磁盘上dos文件系统的完整性\ndosfsck /dev/hda1 修复/检查hda1磁盘上dos文件系统的完整性\n\n### 19.初始化一个文件系统\nmkfs /dev/hda1 在hda1分区创建一个文件系统\nmke2fs /dev/hda1 在hda1分区创建一个linux ext2的文件系统\nmke2fs -j /dev/hda1 在hda1分区创建一个linux ext3(日志型)的文件系统\nmkfs -t vfat 32 -F /dev/hda1 创建一个 FAT32 文件系统\nfdformat -n /dev/fd0 格式化一个软盘\nmkswap /dev/hda3 创建一个swap文件系统\n\n### 20.SWAP文件系统\nmkswap /dev/hda3 创建一个swap文件系统\nswapon /dev/hda3 启用一个新的swap文件系统\nswapon /dev/hda2 /dev/hdb3 启用两个swap分区\n\n\n### 21.备份\ndump -0aj -f /tmp/home0.bak /home 制作一个 '/home' 目录的完整备份\ndump -1aj -f /tmp/home0.bak /home 制作一个 '/home' 目录的交互式备份\nrestore -if /tmp/home0.bak 还原一个交互式备份\nrsync -rogpav --delete /home /tmp 同步两边的目录\nrsync -rogpav -e ssh --delete /home ip_address:/tmp 通过SSH通道rsync\nrsync -az -e ssh --delete ip_addr:/home/public /home/local 通过ssh和压缩将一个远程目录同步到本地目录\nrsync -az -e ssh --delete /home/local ip_addr:/home/public 通过ssh和压缩将本地目录同步到远程目录\ndd bs=1M if=/dev/hda | gzip | ssh user@ip_addr 'dd of=hda.gz' 通过ssh在远程主机上执行一次备份本地磁盘的操作\ndd if=/dev/sda of=/tmp/file1 备份磁盘内容到一个文件\ntar -Puf backup.tar /home/user 执行一次对 '/home/user' 目录的交互式备份操作\n( cd /tmp/local/ && tar c . ) | ssh -C user@ip_addr 'cd /home/share/ && tar x -p' 通过ssh在远程目录中复制一个目录内容\n( tar c /home ) | ssh -C user@ip_addr 'cd /home/backup-home && tar x -p' 通过ssh在远程目录中复制一个本地目录\ntar cf - . | (cd /tmp/backup ; tar xf - ) 本地将一个目录复制到另一个地方，保留原有权限及链接\nfind /home/user1 -name '*.txt' | xargs cp -av --target-directory=/home/backup/ --parents 从一个目录查找并复制所有以 '.txt' 结尾的文件到另一个目录\nfind /var/log -name '*.log' | tar cv --files-from=- | bzip2 > log.tar.bz2 查找所有以 '.log' 结尾的文件并做成一个bzip包\ndd if=/dev/hda of=/dev/fd0 bs=512 count=1 做一个将 MBR (Master Boot Record)内容复制到软盘的动作\ndd if=/dev/fd0 of=/dev/hda bs=512 count=1 从已经保存到软盘的备份中恢复MBR内容\n\n\n### 22.光盘\ncdrecord -v gracetime=2 dev=/dev/cdrom -eject blank=fast -force 清空一个可复写的光盘内容\nmkisofs /dev/cdrom > cd.iso 在磁盘上创建一个光盘的iso镜像文件\nmkisofs /dev/cdrom | gzip > cd_iso.gz 在磁盘上创建一个压缩了的光盘iso镜像文件\nmkisofs -J -allow-leading-dots -R -V \"Label CD\" -iso-level 4 -o ./cd.iso data_cd 创建一个目录的iso镜像文件\ncdrecord -v dev=/dev/cdrom cd.iso 刻录一个ISO镜像文件\ngzip -dc cd_iso.gz | cdrecord dev=/dev/cdrom - 刻录一个压缩了的ISO镜像文件\nmount -o loop cd.iso /mnt/iso 挂载一个ISO镜像文件\ncd-paranoia -B 从一个CD光盘转录音轨到 wav 文件中\ncd-paranoia -- \"-3\" 从一个CD光盘转录音轨到 wav 文件中（参数-3）\ncdrecord --scanbus 扫描总线以识别scsi通道\ndd if=/dev/hdc | md5sum 校验一个设备的md5sum编码，例如一张 CD\n\n\n### 23.网络 - （以太网和WIFI无线）\nifconfig eth0 显示一个以太网卡的配置\nifup eth0 启用一个 'eth0' 网络设备\nifdown eth0 禁用一个 'eth0' 网络设备\nifconfig eth0 192.168.1.1 netmask 255.255.255.0 控制IP地址\nifconfig eth0 promisc 设置 'eth0' 成混杂模式以嗅探数据包 (sniffing)\ndhclient eth0 以dhcp模式启用 'eth0'\nroute -n show routing table\nroute add -net 0/0 gw IP_Gateway configura default gateway\nroute add -net 192.168.0.0 netmask 255.255.0.0 gw 192.168.1.1 configure static route to reach network '192.168.0.0/16'\nroute del 0/0 gw IP_gateway remove static route\necho \"1\" > /proc/sys/net/ipv4/ip_forward activate ip routing\nhostname show hostname of system\nhost www.example.com lookup hostname to resolve name to ip address and viceversa(1)\nnslookup www.example.com lookup hostname to resolve name to ip address and viceversa(2)\nip link show show link status of all interfaces\nmii-tool eth0 show link status of 'eth0'\nethtool eth0 show statistics of network card 'eth0'\nnetstat -tup show all active network connections and their PID\nnetstat -tupl show all network services listening on the system and their PID\ntcpdump tcp port 80 show all HTTP traffic\niwlist scan show wireless networks\niwconfig eth1 show configuration of a wireless network card\nhostname show hostname\nhost www.example.com lookup hostname to resolve name to ip address and viceversa\nnslookup www.example.com lookup hostname to resolve name to ip address and viceversa\nwhois www.example.com lookup on Whois database\n\n\nMicrosoft Windows networks (SAMBA)\nnbtscan ip_addr netbios name resolution\nnmblookup -A ip_addr netbios name resolution\nsmbclient -L ip_addr/hostname show remote shares of a windows host\nsmbget -Rr smb://ip_addr/share like wget can download files from a host windows via smb\nmount -t smbfs -o username=user,password=pass //WinClient/share /mnt/share mount a windows network share\n","source":"_posts/shell-命令大全.md","raw":"---\ntitle: shell 命令大全\ndate: 2017-04-07 17:03:42\ntags: [\"命令行\",\"shell\"]\ncategories:\n    - '服务器'\n    - 'shell'\n---\n### 1.系统信息\narch 显示机器的处理器架构(1)  \nuname -m 显示机器的处理器架构(2)  \nuname -r 显示正在使用的内核版本  \n<!--more-->\ndmidecode -q 显示硬件系统部件 - (SMBIOS / DMI)  \nhdparm -i /dev/hda 罗列一个磁盘的架构特性  \nhdparm -tT /dev/sda 在磁盘上执行测试性读取操作  \ncat /proc/cpuinfo 显示CPU info的信息  \ncat /proc/interrupts 显示中断  \ncat /proc/meminfo 校验内存使用  \ncat /proc/swaps 显示哪些swap被使用  \ncat /proc/version 显示内核的版本  \ncat /proc/net/dev 显示网络适配器及统计  \ncat /proc/mounts 显示已加载的文件系统  \nlspci -tv 罗列 PCI 设备  \nlsusb -tv 显示 USB 设备  \ndate 显示系统日期   \ncal 2007 显示2007年的日历表  \ndate 041217002007.00 设置日期和时间 - 月日时分年.秒  \nclock -w 将时间修改保存到 BIOS  \n\n\n\n### 2.关机 (系统的关机、重启以及登出 )\nshutdown -h now 关闭系统(1)\ninit 0 关闭系统(2)\ntelinit 0 关闭系统(3)\nshutdown -h hours:minutes & 按预定时间关闭系统\nshutdown -c 取消按预定时间关闭系统\nshutdown -r now 重启(1)\nreboot 重启(2)\nlogout 注销\n\n\n\n### 3.文件和目录\ncd /home 进入 '/ home' 目录'  \ncd .. 返回上一级目录  \ncd ../.. 返回上两级目录  \ncd 进入个人的主目录  \ncd ~user1 进入个人的主目录  \ncd - 返回上次所在的目录  \npwd 显示工作路径  \nls 查看目录中的文件  \nls -F 查看目录中的文件\nls -l 显示文件和目录的详细资料  \nls -a 显示隐藏文件  \nls *[0-9]* 显示包含数字的文件名和目录名  \ntree 显示文件和目录由根目录开始的树形结构(1)  \nlstree 显示文件和目录由根目录开始的树形结构(2)  \nmkdir dir1 创建一个叫做 'dir1' 的目录'  \nmkdir dir1 dir2 同时创建两个目录  \nmkdir -p /tmp/dir1/dir2 创建一个目录树  \nrm -f file1 删除一个叫做 'file1' 的文件'  \nrmdir dir1 删除一个叫做 'dir1' 的目录'  \nrm -rf dir1 删除一个叫做 'dir1'  的目录并同时删除其内容  \nrm -rf dir1 dir2 同时删除两个目录及它们的内容  \nmv dir1 new_dir 重命名/移动 一个目录  \ncp file1 file2 复制一个文件  \ncp dir/* . 复制一个目录下的所有文件到当前工作目录  \ncp -a /tmp/dir1 . 复制一个目录到当前工作目录  \ncp -a dir1 dir2 复制一个目录  \nln -s file1 lnk1 创建一个指向文件或目录的软链接  \nln file1 lnk1 创建一个指向文件或目录的物理链接  \ntouch -t 0712250000 file1  修改一个文件或目录的时间戳 - (YYMMDDhhmm)  \nfile file1 outputs the mime type of the file as text  \niconv -l 列出已知的编码  \niconv -f fromEncoding -t toEncoding inputFile > outputFile creates a new from the given input file by assuming it is encoded in fromEncoding and converting it to toEncoding.  \nfind . -maxdepth 1 -name *.jpg -print -exec convert \"{}\" -resize 80x60 \"thumbs/{}\" \\; batch resize files in the current directory and send them to a thumbnails directory (requires convert from Imagemagick)  \n\n\n\n### 4.文件搜索\nfind / -name file1 从 '/'  开始进入根文件系统搜索文件和目录  \nfind / -user user1 搜索属于用户 'user1' 的文件和目录  \nfind /home/user1 -name \\*.bin 在目录 '/ home/user1' 中搜索带有'.bin' 结尾的文件  \nfind /usr/bin -type f -atime +100 搜索在过去100天内未被使用过的执行文件  \nfind /usr/bin -type f -mtime -10 搜索在10天内被创建或者修改过的文件  \nfind / -name \\*.rpm -exec chmod 755 '{}' \\; 搜索以 '.rpm' 结尾的文件并定义其权限  \nfind / -xdev -name \\*.rpm 搜索以 '.rpm' 结尾的文件，忽略光驱、捷盘等可移动设备\nlocate \\*.ps 寻找以 '.ps' 结尾的文件 - 先运行 'updatedb' 命令  \nwhereis halt 显示一个二进制文件、源码或man的位置  \nwhich halt 显示一个二进制文件或可执行文件的完整路径  \n\n\n\n#### 5.挂载一个文件系统\nmount /dev/hda2 /mnt/hda2 挂载一个叫做hda2的盘 - 确定目录 '/ mnt/hda2' 已经存在  \numount /dev/hda2 卸载一个叫做hda2的盘 - 先从挂载点 '/ mnt/hda2' 退出   \nfuser -km /mnt/hda2 当设备繁忙时强制卸载  \numount -n /mnt/hda2 运行卸载操作而不写入  /etc/mtab 文件-  当文件为只读或当磁盘写满时非常有用  \nmount /dev/fd0 /mnt/floppy 挂载一个软盘  \nmount /dev/cdrom /mnt/cdrom 挂载一个cdrom或dvdrom  \nmount /dev/hdc /mnt/cdrecorder 挂载一个cdrw或dvdrom  \nmount /dev/hdb /mnt/cdrecorder 挂载一个cdrw或dvdrom  \nmount -o loop file.iso /mnt/cdrom 挂载一个文件或ISO镜像文件  \nmount -t vfat /dev/hda5 /mnt/hda5 挂载一个Windows FAT32文件系统  \nmount /dev/sda1 /mnt/usbdisk 挂载一个usb 捷盘或闪存设备  \nmount -t smbfs -o username=user,password=pass //WinClient/share /mnt/share 挂载一个windows网络共享  \n\n\n\n### 6.磁盘空间\ndf -h 显示已经挂载的分区列表  \nls -lSr |more 以尺寸大小排列文件和目录  \ndu -sh dir1 估算目录 'dir1' 已经使用的磁盘空间'  \ndu -sk * | sort -rn  以容量大小为依据依次显示文件和目录的大小  \nrpm -q -a --qf '%10{SIZE}t%{NAME}n' | sort  -k1,1n 以大小为依据依次显示已安装的rpm包所使用的空间 (fedora, redhat类系统)\ndpkg-query -W -f='${Installed-Size;10}t${Package}n' | sort -k1,1n 以大小为依据显示已安装的deb包所使用的空间 (ubuntu, debian类系统)\n\n返回顶部索引 ^\n\n### 7.用户和群组\ngroupadd group_name 创建一个新用户组\ngroupdel group_name 删除一个用户组\ngroupmod -n new_group_name old_group_name 重命名一个用户组\nuseradd -c \"Name Surname \" -g admin -d /home/user1 -s /bin/bash user1 创建一个属于 \"admin\" 用户组的用户\nuseradd user1 创建一个新用户\nuserdel -r user1 删除一个用户 ( '-r' 排除主目录)\nusermod -c \"User FTP\" -g system -d /ftp/user1 -s /bin/nologin user1 修改用户属性\npasswd 修改口令\npasswd user1 修改一个用户的口令 (只允许root执行)\nchage -E 2005-12-31 user1 设置用户口令的失效期限\npwck 检查 '/etc/passwd' 的文件格式和语法修正以及存在的用户\ngrpck 检查 '/etc/passwd' 的文件格式和语法修正以及存在的群组\nnewgrp group_name 登陆进一个新的群组以改变新创建文件的预设群组\n\n\n\n### 8.文件的权限 - 使用 \"+\" 设置权限，使用 \"-\" 用于取消\nls -lh 显示权限\nls /tmp | pr -T5 -W$COLUMNS 将终端划分成5栏显示\nchmod ugo+rwx directory1 设置目录的所有人(u)、群组(g)以及其他人(o)以读（r ）、写(w)和执行(x)的权限\nchmod go-rwx directory1 删除群组(g)与其他人(o)对目录的读写执行权限\nchown user1 file1 改变一个文件的所有人属性\nchown -R user1 directory1 改变一个目录的所有人属性并同时改变改目录下所有文件的属性\nchgrp group1 file1 改变文件的群组\nchown user1:group1 file1 改变一个文件的所有人和群组属性\nfind / -perm -u+s 罗列一个系统中所有使用了SUID控制的文件\nchmod u+s /bin/file1 设置一个二进制文件的 SUID 位 - 运行该文件的用户也被赋予和所有者同样的权限\nchmod u-s /bin/file1 禁用一个二进制文件的 SUID位\nchmod g+s /home/public 设置一个目录的SGID 位 - 类似SUID ，不过这是针对目录的\nchmod g-s /home/public 禁用一个目录的 SGID 位\nchmod o+t /home/public 设置一个文件的 STIKY 位 - 只允许合法所有人删除文件\nchmod o-t /home/public 禁用一个目录的 STIKY 位\n\n\n\n### 9.文件的特殊属性 - 使用 \"+\" 设置权限，使用 \"-\" 用于取消\nchattr +a file1 只允许以追加方式读写文件\nchattr +c file1 允许这个文件能被内核自动压缩/解压\nchattr +d file1 在进行文件系统备份时，dump程序将忽略这个文件\nchattr +i file1 设置成不可变的文件，不能被删除、修改、重命名或者链接\nchattr +s file1 允许一个文件被安全地删除\nchattr +S file1 一旦应用程序对这个文件执行了写操作，使系统立刻把修改的结果写到磁盘\nchattr +u file1 若文件被删除，系统会允许你在以后恢复这个被删除的文件\nlsattr 显示特殊的属性\n\n\n### 10.打包和压缩文件\nbunzip2 file1.bz2 解压一个叫做 'file1.bz2'的文件\nbzip2 file1 压缩一个叫做 'file1' 的文件\ngunzip file1.gz 解压一个叫做 'file1.gz'的文件\ngzip file1 压缩一个叫做 'file1'的文件\ngzip -9 file1 最大程度压缩\nrar a file1.rar test_file 创建一个叫做 'file1.rar' 的包\nrar a file1.rar file1 file2 dir1 同时压缩 'file1', 'file2' 以及目录 'dir1'\nrar x file1.rar 解压rar包\nunrar x file1.rar 解压rar包\ntar -cvf archive.tar file1 创建一个非压缩的 tarball\ntar -cvf archive.tar file1 file2 dir1 创建一个包含了 'file1', 'file2' 以及 'dir1'的档案文件\ntar -tf archive.tar 显示一个包中的内容\ntar -xvf archive.tar 释放一个包\ntar -xvf archive.tar -C /tmp 将压缩包释放到 /tmp目录下\ntar -cvfj archive.tar.bz2 dir1 创建一个bzip2格式的压缩包\ntar -xvfj archive.tar.bz2 解压一个bzip2格式的压缩包\ntar -cvfz archive.tar.gz dir1 创建一个gzip格式的压缩包\ntar -xvfz archive.tar.gz 解压一个gzip格式的压缩包\nzip file1.zip file1 创建一个zip格式的压缩包\nzip -r file1.zip file1 file2 dir1 将几个文件和目录同时压缩成一个zip格式的压缩包\nunzip file1.zip 解压一个zip格式压缩包\n\n### 11.RPM 包 - （Fedora, Redhat及类似系统）\nrpm -ivh package.rpm 安装一个rpm包\nrpm -ivh --nodeeps package.rpm 安装一个rpm包而忽略依赖关系警告\nrpm -U package.rpm 更新一个rpm包但不改变其配置文件\nrpm -F package.rpm 更新一个确定已经安装的rpm包\nrpm -e package_name.rpm 删除一个rpm包\nrpm -qa 显示系统中所有已经安装的rpm包\nrpm -qa | grep httpd 显示所有名称中包含 \"httpd\" 字样的rpm包\nrpm -qi package_name 获取一个已安装包的特殊信息\nrpm -qg \"System Environment/Daemons\" 显示一个组件的rpm包\nrpm -ql package_name 显示一个已经安装的rpm包提供的文件列表\nrpm -qc package_name 显示一个已经安装的rpm包提供的配置文件列表\nrpm -q package_name --whatrequires 显示与一个rpm包存在依赖关系的列表\nrpm -q package_name --whatprovides 显示一个rpm包所占的体积\nrpm -q package_name --scripts 显示在安装/删除期间所执行的脚本l\nrpm -q package_name --changelog 显示一个rpm包的修改历史\nrpm -qf /etc/httpd/conf/httpd.conf 确认所给的文件由哪个rpm包所提供\nrpm -qp package.rpm -l 显示由一个尚未安装的rpm包提供的文件列表\nrpm --import /media/cdrom/RPM-GPG-KEY 导入公钥数字证书\nrpm --checksig package.rpm 确认一个rpm包的完整性\nrpm -qa gpg-pubkey 确认已安装的所有rpm包的完整性\nrpm -V package_name 检查文件尺寸、 许可、类型、所有者、群组、MD5检查以及最后修改时间\nrpm -Va 检查系统中所有已安装的rpm包- 小心使用\nrpm -Vp package.rpm 确认一个rpm包还未安装\nrpm2cpio package.rpm | cpio --extract --make-directories *bin* 从一个rpm包运行可执行文件\nrpm -ivh /usr/src/redhat/RPMS/`arch`/package.rpm 从一个rpm源码安装一个构建好的包\nrpmbuild --rebuild package_name.src.rpm 从一个rpm源码构建一个 rpm 包\n\n### 12.YUM 软件包升级器 - （Fedora, RedHat及类似系统）\nyum install package_name 下载并安装一个rpm包\nyum localinstall package_name.rpm 将安装一个rpm包，使用你自己的软件仓库为你解决所有依赖关系\nyum update package_name.rpm 更新当前系统中所有安装的rpm包\nyum update package_name 更新一个rpm包\nyum remove package_name 删除一个rpm包\nyum list 列出当前系统中安装的所有包\nyum search package_name 在rpm仓库中搜寻软件包\nyum clean packages 清理rpm缓存删除下载的包\nyum clean headers 删除所有头文件\nyum clean all 删除所有缓存的包和头文件\n\n\n### 13.DEB 包 (Debian, Ubuntu 以及类似系统)\ndpkg -i package.deb 安装/更新一个 deb 包\ndpkg -r package_name 从系统删除一个 deb 包\ndpkg -l 显示系统中所有已经安装的 deb 包\ndpkg -l | grep httpd 显示所有名称中包含 \"httpd\" 字样的deb包\ndpkg -s package_name 获得已经安装在系统中一个特殊包的信息\ndpkg -L package_name 显示系统中已经安装的一个deb包所提供的文件列表\ndpkg --contents package.deb 显示尚未安装的一个包所提供的文件列表\ndpkg -S /bin/ping 确认所给的文件由哪个deb包提供\n\n\n### 14.APT 软件工具 (Debian, Ubuntu 以及类似系统)\napt-get install package_name 安装/更新一个 deb 包\napt-cdrom install package_name 从光盘安装/更新一个 deb 包\napt-get update 升级列表中的软件包\napt-get upgrade 升级所有已安装的软件\napt-get remove package_name 从系统删除一个deb包\napt-get check 确认依赖的软件仓库正确\napt-get clean 从下载的软件包中清理缓存\napt-cache search searched-package 返回包含所要搜索字符串的软件包名称\n\n\n### 15.查看文件内容\ncat file1 从第一个字节开始正向查看文件的内容\ntac file1 从最后一行开始反向查看一个文件的内容\nmore file1 查看一个长文件的内容\nless file1 类似于 'more' 命令，但是它允许在文件中和正向操作一样的反向操作\nhead -2 file1 查看一个文件的前两行\ntail -2 file1 查看一个文件的最后两行\ntail -f /var/log/messages 实时查看被添加到一个文件中的内容\n\n### 16.文本处理\ncat file1 file2 ... | command <> file1_in.txt_or_file1_out.txt general syntax for text manipulation using PIPE, STDIN and STDOUT\ncat file1 | command( sed, grep, awk, grep, etc...) > result.txt 合并一个文件的详细说明文本，并将简介写入一个新文件中\ncat file1 | command( sed, grep, awk, grep, etc...) >> result.txt 合并一个文件的详细说明文本，并将简介写入一个已有的文件中\ngrep Aug /var/log/messages 在文件 '/var/log/messages'中查找关键词\"Aug\"\ngrep ^Aug /var/log/messages 在文件 '/var/log/messages'中查找以\"Aug\"开始的词汇\ngrep [0-9] /var/log/messages 选择 '/var/log/messages' 文件中所有包含数字的行\ngrep Aug -R /var/log/* 在目录 '/var/log' 及随后的目录中搜索字符串\"Aug\"\nsed 's/stringa1/stringa2/g' example.txt 将example.txt文件中的 \"string1\" 替换成 \"string2\"\nsed '/^$/d' example.txt 从example.txt文件中删除所有空白行\nsed '/ *#/d; /^$/d' example.txt 从example.txt文件中删除所有注释和空白行\necho 'esempio' | tr '[:lower:]' '[:upper:]' 合并上下单元格内容\nsed -e '1d' result.txt 从文件example.txt 中排除第一行\nsed -n '/stringa1/p' 查看只包含词汇 \"string1\"的行\nsed -e 's/ *$//' example.txt 删除每一行最后的空白字符\nsed -e 's/stringa1//g' example.txt 从文档中只删除词汇 \"string1\" 并保留剩余全部\nsed -n '1,5p;5q' example.txt 查看从第一行到第5行内容\nsed -n '5p;5q' example.txt 查看第5行\nsed -e 's/00*/0/g' example.txt 用单个零替换多个零\ncat -n file1 标示文件的行数\ncat example.txt | awk 'NR%2==1' 删除example.txt文件中的所有偶数行\necho a b c | awk '{print $1}' 查看一行第一栏\necho a b c | awk '{print $1,$3}' 查看一行的第一和第三栏\npaste file1 file2 合并两个文件或两栏的内容\npaste -d '+' file1 file2 合并两个文件或两栏的内容，中间用\"+\"区分\nsort file1 file2 排序两个文件的内容\nsort file1 file2 | uniq 取出两个文件的并集(重复的行只保留一份)\nsort file1 file2 | uniq -u 删除交集，留下其他的行\nsort file1 file2 | uniq -d 取出两个文件的交集(只留下同时存在于两个文件中的文件)\ncomm -1 file1 file2 比较两个文件的内容只删除 'file1' 所包含的内容\ncomm -2 file1 file2 比较两个文件的内容只删除 'file2' 所包含的内容\ncomm -3 file1 file2 比较两个文件的内容只删除两个文件共有的部分\n\n\n### 17.字符设置和文件格式转换\ndos2unix filedos.txt fileunix.txt 将一个文本文件的格式从MSDOS转换成UNIX\nunix2dos fileunix.txt filedos.txt 将一个文本文件的格式从UNIX转换成MSDOS\nrecode ..HTML < page.txt > page.html 将一个文本文件转换成html\nrecode -l | more 显示所有允许的转换格式\n\n\n### 18.文件系统分析\nbadblocks -v /dev/hda1 检查磁盘hda1上的坏磁块\nfsck /dev/hda1 修复/检查hda1磁盘上linux文件系统的完整性\nfsck.ext2 /dev/hda1 修复/检查hda1磁盘上ext2文件系统的完整性\ne2fsck /dev/hda1 修复/检查hda1磁盘上ext2文件系统的完整性\ne2fsck -j /dev/hda1 修复/检查hda1磁盘上ext3文件系统的完整性\nfsck.ext3 /dev/hda1 修复/检查hda1磁盘上ext3文件系统的完整性\nfsck.vfat /dev/hda1 修复/检查hda1磁盘上fat文件系统的完整性\nfsck.msdos /dev/hda1 修复/检查hda1磁盘上dos文件系统的完整性\ndosfsck /dev/hda1 修复/检查hda1磁盘上dos文件系统的完整性\n\n### 19.初始化一个文件系统\nmkfs /dev/hda1 在hda1分区创建一个文件系统\nmke2fs /dev/hda1 在hda1分区创建一个linux ext2的文件系统\nmke2fs -j /dev/hda1 在hda1分区创建一个linux ext3(日志型)的文件系统\nmkfs -t vfat 32 -F /dev/hda1 创建一个 FAT32 文件系统\nfdformat -n /dev/fd0 格式化一个软盘\nmkswap /dev/hda3 创建一个swap文件系统\n\n### 20.SWAP文件系统\nmkswap /dev/hda3 创建一个swap文件系统\nswapon /dev/hda3 启用一个新的swap文件系统\nswapon /dev/hda2 /dev/hdb3 启用两个swap分区\n\n\n### 21.备份\ndump -0aj -f /tmp/home0.bak /home 制作一个 '/home' 目录的完整备份\ndump -1aj -f /tmp/home0.bak /home 制作一个 '/home' 目录的交互式备份\nrestore -if /tmp/home0.bak 还原一个交互式备份\nrsync -rogpav --delete /home /tmp 同步两边的目录\nrsync -rogpav -e ssh --delete /home ip_address:/tmp 通过SSH通道rsync\nrsync -az -e ssh --delete ip_addr:/home/public /home/local 通过ssh和压缩将一个远程目录同步到本地目录\nrsync -az -e ssh --delete /home/local ip_addr:/home/public 通过ssh和压缩将本地目录同步到远程目录\ndd bs=1M if=/dev/hda | gzip | ssh user@ip_addr 'dd of=hda.gz' 通过ssh在远程主机上执行一次备份本地磁盘的操作\ndd if=/dev/sda of=/tmp/file1 备份磁盘内容到一个文件\ntar -Puf backup.tar /home/user 执行一次对 '/home/user' 目录的交互式备份操作\n( cd /tmp/local/ && tar c . ) | ssh -C user@ip_addr 'cd /home/share/ && tar x -p' 通过ssh在远程目录中复制一个目录内容\n( tar c /home ) | ssh -C user@ip_addr 'cd /home/backup-home && tar x -p' 通过ssh在远程目录中复制一个本地目录\ntar cf - . | (cd /tmp/backup ; tar xf - ) 本地将一个目录复制到另一个地方，保留原有权限及链接\nfind /home/user1 -name '*.txt' | xargs cp -av --target-directory=/home/backup/ --parents 从一个目录查找并复制所有以 '.txt' 结尾的文件到另一个目录\nfind /var/log -name '*.log' | tar cv --files-from=- | bzip2 > log.tar.bz2 查找所有以 '.log' 结尾的文件并做成一个bzip包\ndd if=/dev/hda of=/dev/fd0 bs=512 count=1 做一个将 MBR (Master Boot Record)内容复制到软盘的动作\ndd if=/dev/fd0 of=/dev/hda bs=512 count=1 从已经保存到软盘的备份中恢复MBR内容\n\n\n### 22.光盘\ncdrecord -v gracetime=2 dev=/dev/cdrom -eject blank=fast -force 清空一个可复写的光盘内容\nmkisofs /dev/cdrom > cd.iso 在磁盘上创建一个光盘的iso镜像文件\nmkisofs /dev/cdrom | gzip > cd_iso.gz 在磁盘上创建一个压缩了的光盘iso镜像文件\nmkisofs -J -allow-leading-dots -R -V \"Label CD\" -iso-level 4 -o ./cd.iso data_cd 创建一个目录的iso镜像文件\ncdrecord -v dev=/dev/cdrom cd.iso 刻录一个ISO镜像文件\ngzip -dc cd_iso.gz | cdrecord dev=/dev/cdrom - 刻录一个压缩了的ISO镜像文件\nmount -o loop cd.iso /mnt/iso 挂载一个ISO镜像文件\ncd-paranoia -B 从一个CD光盘转录音轨到 wav 文件中\ncd-paranoia -- \"-3\" 从一个CD光盘转录音轨到 wav 文件中（参数-3）\ncdrecord --scanbus 扫描总线以识别scsi通道\ndd if=/dev/hdc | md5sum 校验一个设备的md5sum编码，例如一张 CD\n\n\n### 23.网络 - （以太网和WIFI无线）\nifconfig eth0 显示一个以太网卡的配置\nifup eth0 启用一个 'eth0' 网络设备\nifdown eth0 禁用一个 'eth0' 网络设备\nifconfig eth0 192.168.1.1 netmask 255.255.255.0 控制IP地址\nifconfig eth0 promisc 设置 'eth0' 成混杂模式以嗅探数据包 (sniffing)\ndhclient eth0 以dhcp模式启用 'eth0'\nroute -n show routing table\nroute add -net 0/0 gw IP_Gateway configura default gateway\nroute add -net 192.168.0.0 netmask 255.255.0.0 gw 192.168.1.1 configure static route to reach network '192.168.0.0/16'\nroute del 0/0 gw IP_gateway remove static route\necho \"1\" > /proc/sys/net/ipv4/ip_forward activate ip routing\nhostname show hostname of system\nhost www.example.com lookup hostname to resolve name to ip address and viceversa(1)\nnslookup www.example.com lookup hostname to resolve name to ip address and viceversa(2)\nip link show show link status of all interfaces\nmii-tool eth0 show link status of 'eth0'\nethtool eth0 show statistics of network card 'eth0'\nnetstat -tup show all active network connections and their PID\nnetstat -tupl show all network services listening on the system and their PID\ntcpdump tcp port 80 show all HTTP traffic\niwlist scan show wireless networks\niwconfig eth1 show configuration of a wireless network card\nhostname show hostname\nhost www.example.com lookup hostname to resolve name to ip address and viceversa\nnslookup www.example.com lookup hostname to resolve name to ip address and viceversa\nwhois www.example.com lookup on Whois database\n\n\nMicrosoft Windows networks (SAMBA)\nnbtscan ip_addr netbios name resolution\nnmblookup -A ip_addr netbios name resolution\nsmbclient -L ip_addr/hostname show remote shares of a windows host\nsmbget -Rr smb://ip_addr/share like wget can download files from a host windows via smb\nmount -t smbfs -o username=user,password=pass //WinClient/share /mnt/share mount a windows network share\n","slug":"shell-命令大全","published":1,"updated":"2017-04-15T03:25:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5naxw49000lfcxeaz0d0u3e","content":"<h3 id=\"1-系统信息\"><a href=\"#1-系统信息\" class=\"headerlink\" title=\"1.系统信息\"></a>1.系统信息</h3><p>arch 显示机器的处理器架构(1)<br>uname -m 显示机器的处理器架构(2)<br>uname -r 显示正在使用的内核版本<br><a id=\"more\"></a><br>dmidecode -q 显示硬件系统部件 - (SMBIOS / DMI)<br>hdparm -i /dev/hda 罗列一个磁盘的架构特性<br>hdparm -tT /dev/sda 在磁盘上执行测试性读取操作<br>cat /proc/cpuinfo 显示CPU info的信息<br>cat /proc/interrupts 显示中断<br>cat /proc/meminfo 校验内存使用<br>cat /proc/swaps 显示哪些swap被使用<br>cat /proc/version 显示内核的版本<br>cat /proc/net/dev 显示网络适配器及统计<br>cat /proc/mounts 显示已加载的文件系统<br>lspci -tv 罗列 PCI 设备<br>lsusb -tv 显示 USB 设备<br>date 显示系统日期<br>cal 2007 显示2007年的日历表<br>date 041217002007.00 设置日期和时间 - 月日时分年.秒<br>clock -w 将时间修改保存到 BIOS  </p>\n<h3 id=\"2-关机-系统的关机、重启以及登出\"><a href=\"#2-关机-系统的关机、重启以及登出\" class=\"headerlink\" title=\"2.关机 (系统的关机、重启以及登出 )\"></a>2.关机 (系统的关机、重启以及登出 )</h3><p>shutdown -h now 关闭系统(1)<br>init 0 关闭系统(2)<br>telinit 0 关闭系统(3)<br>shutdown -h hours:minutes &amp; 按预定时间关闭系统<br>shutdown -c 取消按预定时间关闭系统<br>shutdown -r now 重启(1)<br>reboot 重启(2)<br>logout 注销</p>\n<h3 id=\"3-文件和目录\"><a href=\"#3-文件和目录\" class=\"headerlink\" title=\"3.文件和目录\"></a>3.文件和目录</h3><p>cd /home 进入 ‘/ home’ 目录’<br>cd .. 返回上一级目录<br>cd ../.. 返回上两级目录<br>cd 进入个人的主目录<br>cd ~user1 进入个人的主目录<br>cd - 返回上次所在的目录<br>pwd 显示工作路径<br>ls 查看目录中的文件<br>ls -F 查看目录中的文件<br>ls -l 显示文件和目录的详细资料<br>ls -a 显示隐藏文件<br>ls <em>[0-9]</em> 显示包含数字的文件名和目录名<br>tree 显示文件和目录由根目录开始的树形结构(1)<br>lstree 显示文件和目录由根目录开始的树形结构(2)<br>mkdir dir1 创建一个叫做 ‘dir1’ 的目录’<br>mkdir dir1 dir2 同时创建两个目录<br>mkdir -p /tmp/dir1/dir2 创建一个目录树<br>rm -f file1 删除一个叫做 ‘file1’ 的文件’<br>rmdir dir1 删除一个叫做 ‘dir1’ 的目录’<br>rm -rf dir1 删除一个叫做 ‘dir1’  的目录并同时删除其内容<br>rm -rf dir1 dir2 同时删除两个目录及它们的内容<br>mv dir1 new_dir 重命名/移动 一个目录<br>cp file1 file2 复制一个文件<br>cp dir/<em> . 复制一个目录下的所有文件到当前工作目录<br>cp -a /tmp/dir1 . 复制一个目录到当前工作目录<br>cp -a dir1 dir2 复制一个目录<br>ln -s file1 lnk1 创建一个指向文件或目录的软链接<br>ln file1 lnk1 创建一个指向文件或目录的物理链接<br>touch -t 0712250000 file1  修改一个文件或目录的时间戳 - (YYMMDDhhmm)<br>file file1 outputs the mime type of the file as text<br>iconv -l 列出已知的编码<br>iconv -f fromEncoding -t toEncoding inputFile &gt; outputFile creates a new from the given input file by assuming it is encoded in fromEncoding and converting it to toEncoding.<br>find . -maxdepth 1 -name </em>.jpg -print -exec convert “{}” -resize 80x60 “thumbs/{}” \\; batch resize files in the current directory and send them to a thumbnails directory (requires convert from Imagemagick)  </p>\n<h3 id=\"4-文件搜索\"><a href=\"#4-文件搜索\" class=\"headerlink\" title=\"4.文件搜索\"></a>4.文件搜索</h3><p>find / -name file1 从 ‘/‘  开始进入根文件系统搜索文件和目录<br>find / -user user1 搜索属于用户 ‘user1’ 的文件和目录<br>find /home/user1 -name *.bin 在目录 ‘/ home/user1’ 中搜索带有’.bin’ 结尾的文件<br>find /usr/bin -type f -atime +100 搜索在过去100天内未被使用过的执行文件<br>find /usr/bin -type f -mtime -10 搜索在10天内被创建或者修改过的文件<br>find / -name *.rpm -exec chmod 755 ‘{}’ \\; 搜索以 ‘.rpm’ 结尾的文件并定义其权限<br>find / -xdev -name *.rpm 搜索以 ‘.rpm’ 结尾的文件，忽略光驱、捷盘等可移动设备<br>locate *.ps 寻找以 ‘.ps’ 结尾的文件 - 先运行 ‘updatedb’ 命令<br>whereis halt 显示一个二进制文件、源码或man的位置<br>which halt 显示一个二进制文件或可执行文件的完整路径  </p>\n<h4 id=\"5-挂载一个文件系统\"><a href=\"#5-挂载一个文件系统\" class=\"headerlink\" title=\"5.挂载一个文件系统\"></a>5.挂载一个文件系统</h4><p>mount /dev/hda2 /mnt/hda2 挂载一个叫做hda2的盘 - 确定目录 ‘/ mnt/hda2’ 已经存在<br>umount /dev/hda2 卸载一个叫做hda2的盘 - 先从挂载点 ‘/ mnt/hda2’ 退出<br>fuser -km /mnt/hda2 当设备繁忙时强制卸载<br>umount -n /mnt/hda2 运行卸载操作而不写入  /etc/mtab 文件-  当文件为只读或当磁盘写满时非常有用<br>mount /dev/fd0 /mnt/floppy 挂载一个软盘<br>mount /dev/cdrom /mnt/cdrom 挂载一个cdrom或dvdrom<br>mount /dev/hdc /mnt/cdrecorder 挂载一个cdrw或dvdrom<br>mount /dev/hdb /mnt/cdrecorder 挂载一个cdrw或dvdrom<br>mount -o loop file.iso /mnt/cdrom 挂载一个文件或ISO镜像文件<br>mount -t vfat /dev/hda5 /mnt/hda5 挂载一个Windows FAT32文件系统<br>mount /dev/sda1 /mnt/usbdisk 挂载一个usb 捷盘或闪存设备<br>mount -t smbfs -o username=user,password=pass //WinClient/share /mnt/share 挂载一个windows网络共享  </p>\n<h3 id=\"6-磁盘空间\"><a href=\"#6-磁盘空间\" class=\"headerlink\" title=\"6.磁盘空间\"></a>6.磁盘空间</h3><p>df -h 显示已经挂载的分区列表<br>ls -lSr |more 以尺寸大小排列文件和目录<br>du -sh dir1 估算目录 ‘dir1’ 已经使用的磁盘空间’<br>du -sk * | sort -rn  以容量大小为依据依次显示文件和目录的大小<br>rpm -q -a –qf ‘%10{SIZE}t%{NAME}n’ | sort  -k1,1n 以大小为依据依次显示已安装的rpm包所使用的空间 (fedora, redhat类系统)<br>dpkg-query -W -f=’${Installed-Size;10}t${Package}n’ | sort -k1,1n 以大小为依据显示已安装的deb包所使用的空间 (ubuntu, debian类系统)</p>\n<p>返回顶部索引 ^</p>\n<h3 id=\"7-用户和群组\"><a href=\"#7-用户和群组\" class=\"headerlink\" title=\"7.用户和群组\"></a>7.用户和群组</h3><p>groupadd group_name 创建一个新用户组<br>groupdel group_name 删除一个用户组<br>groupmod -n new_group_name old_group_name 重命名一个用户组<br>useradd -c “Name Surname “ -g admin -d /home/user1 -s /bin/bash user1 创建一个属于 “admin” 用户组的用户<br>useradd user1 创建一个新用户<br>userdel -r user1 删除一个用户 ( ‘-r’ 排除主目录)<br>usermod -c “User FTP” -g system -d /ftp/user1 -s /bin/nologin user1 修改用户属性<br>passwd 修改口令<br>passwd user1 修改一个用户的口令 (只允许root执行)<br>chage -E 2005-12-31 user1 设置用户口令的失效期限<br>pwck 检查 ‘/etc/passwd’ 的文件格式和语法修正以及存在的用户<br>grpck 检查 ‘/etc/passwd’ 的文件格式和语法修正以及存在的群组<br>newgrp group_name 登陆进一个新的群组以改变新创建文件的预设群组</p>\n<h3 id=\"8-文件的权限-使用-“-”-设置权限，使用-“-“-用于取消\"><a href=\"#8-文件的权限-使用-“-”-设置权限，使用-“-“-用于取消\" class=\"headerlink\" title=\"8.文件的权限 - 使用 “+” 设置权限，使用 “-“ 用于取消\"></a>8.文件的权限 - 使用 “+” 设置权限，使用 “-“ 用于取消</h3><p>ls -lh 显示权限<br>ls /tmp | pr -T5 -W$COLUMNS 将终端划分成5栏显示<br>chmod ugo+rwx directory1 设置目录的所有人(u)、群组(g)以及其他人(o)以读（r ）、写(w)和执行(x)的权限<br>chmod go-rwx directory1 删除群组(g)与其他人(o)对目录的读写执行权限<br>chown user1 file1 改变一个文件的所有人属性<br>chown -R user1 directory1 改变一个目录的所有人属性并同时改变改目录下所有文件的属性<br>chgrp group1 file1 改变文件的群组<br>chown user1:group1 file1 改变一个文件的所有人和群组属性<br>find / -perm -u+s 罗列一个系统中所有使用了SUID控制的文件<br>chmod u+s /bin/file1 设置一个二进制文件的 SUID 位 - 运行该文件的用户也被赋予和所有者同样的权限<br>chmod u-s /bin/file1 禁用一个二进制文件的 SUID位<br>chmod g+s /home/public 设置一个目录的SGID 位 - 类似SUID ，不过这是针对目录的<br>chmod g-s /home/public 禁用一个目录的 SGID 位<br>chmod o+t /home/public 设置一个文件的 STIKY 位 - 只允许合法所有人删除文件<br>chmod o-t /home/public 禁用一个目录的 STIKY 位</p>\n<h3 id=\"9-文件的特殊属性-使用-“-”-设置权限，使用-“-“-用于取消\"><a href=\"#9-文件的特殊属性-使用-“-”-设置权限，使用-“-“-用于取消\" class=\"headerlink\" title=\"9.文件的特殊属性 - 使用 “+” 设置权限，使用 “-“ 用于取消\"></a>9.文件的特殊属性 - 使用 “+” 设置权限，使用 “-“ 用于取消</h3><p>chattr +a file1 只允许以追加方式读写文件<br>chattr +c file1 允许这个文件能被内核自动压缩/解压<br>chattr +d file1 在进行文件系统备份时，dump程序将忽略这个文件<br>chattr +i file1 设置成不可变的文件，不能被删除、修改、重命名或者链接<br>chattr +s file1 允许一个文件被安全地删除<br>chattr +S file1 一旦应用程序对这个文件执行了写操作，使系统立刻把修改的结果写到磁盘<br>chattr +u file1 若文件被删除，系统会允许你在以后恢复这个被删除的文件<br>lsattr 显示特殊的属性</p>\n<h3 id=\"10-打包和压缩文件\"><a href=\"#10-打包和压缩文件\" class=\"headerlink\" title=\"10.打包和压缩文件\"></a>10.打包和压缩文件</h3><p>bunzip2 file1.bz2 解压一个叫做 ‘file1.bz2’的文件<br>bzip2 file1 压缩一个叫做 ‘file1’ 的文件<br>gunzip file1.gz 解压一个叫做 ‘file1.gz’的文件<br>gzip file1 压缩一个叫做 ‘file1’的文件<br>gzip -9 file1 最大程度压缩<br>rar a file1.rar test_file 创建一个叫做 ‘file1.rar’ 的包<br>rar a file1.rar file1 file2 dir1 同时压缩 ‘file1’, ‘file2’ 以及目录 ‘dir1’<br>rar x file1.rar 解压rar包<br>unrar x file1.rar 解压rar包<br>tar -cvf archive.tar file1 创建一个非压缩的 tarball<br>tar -cvf archive.tar file1 file2 dir1 创建一个包含了 ‘file1’, ‘file2’ 以及 ‘dir1’的档案文件<br>tar -tf archive.tar 显示一个包中的内容<br>tar -xvf archive.tar 释放一个包<br>tar -xvf archive.tar -C /tmp 将压缩包释放到 /tmp目录下<br>tar -cvfj archive.tar.bz2 dir1 创建一个bzip2格式的压缩包<br>tar -xvfj archive.tar.bz2 解压一个bzip2格式的压缩包<br>tar -cvfz archive.tar.gz dir1 创建一个gzip格式的压缩包<br>tar -xvfz archive.tar.gz 解压一个gzip格式的压缩包<br>zip file1.zip file1 创建一个zip格式的压缩包<br>zip -r file1.zip file1 file2 dir1 将几个文件和目录同时压缩成一个zip格式的压缩包<br>unzip file1.zip 解压一个zip格式压缩包</p>\n<h3 id=\"11-RPM-包-（Fedora-Redhat及类似系统）\"><a href=\"#11-RPM-包-（Fedora-Redhat及类似系统）\" class=\"headerlink\" title=\"11.RPM 包 - （Fedora, Redhat及类似系统）\"></a>11.RPM 包 - （Fedora, Redhat及类似系统）</h3><p>rpm -ivh package.rpm 安装一个rpm包<br>rpm -ivh –nodeeps package.rpm 安装一个rpm包而忽略依赖关系警告<br>rpm -U package.rpm 更新一个rpm包但不改变其配置文件<br>rpm -F package.rpm 更新一个确定已经安装的rpm包<br>rpm -e package_name.rpm 删除一个rpm包<br>rpm -qa 显示系统中所有已经安装的rpm包<br>rpm -qa | grep httpd 显示所有名称中包含 “httpd” 字样的rpm包<br>rpm -qi package_name 获取一个已安装包的特殊信息<br>rpm -qg “System Environment/Daemons” 显示一个组件的rpm包<br>rpm -ql package_name 显示一个已经安装的rpm包提供的文件列表<br>rpm -qc package_name 显示一个已经安装的rpm包提供的配置文件列表<br>rpm -q package_name –whatrequires 显示与一个rpm包存在依赖关系的列表<br>rpm -q package_name –whatprovides 显示一个rpm包所占的体积<br>rpm -q package_name –scripts 显示在安装/删除期间所执行的脚本l<br>rpm -q package_name –changelog 显示一个rpm包的修改历史<br>rpm -qf /etc/httpd/conf/httpd.conf 确认所给的文件由哪个rpm包所提供<br>rpm -qp package.rpm -l 显示由一个尚未安装的rpm包提供的文件列表<br>rpm –import /media/cdrom/RPM-GPG-KEY 导入公钥数字证书<br>rpm –checksig package.rpm 确认一个rpm包的完整性<br>rpm -qa gpg-pubkey 确认已安装的所有rpm包的完整性<br>rpm -V package_name 检查文件尺寸、 许可、类型、所有者、群组、MD5检查以及最后修改时间<br>rpm -Va 检查系统中所有已安装的rpm包- 小心使用<br>rpm -Vp package.rpm 确认一个rpm包还未安装<br>rpm2cpio package.rpm | cpio –extract –make-directories <em>bin</em> 从一个rpm包运行可执行文件<br>rpm -ivh /usr/src/redhat/RPMS/<code>arch</code>/package.rpm 从一个rpm源码安装一个构建好的包<br>rpmbuild –rebuild package_name.src.rpm 从一个rpm源码构建一个 rpm 包</p>\n<h3 id=\"12-YUM-软件包升级器-（Fedora-RedHat及类似系统）\"><a href=\"#12-YUM-软件包升级器-（Fedora-RedHat及类似系统）\" class=\"headerlink\" title=\"12.YUM 软件包升级器 - （Fedora, RedHat及类似系统）\"></a>12.YUM 软件包升级器 - （Fedora, RedHat及类似系统）</h3><p>yum install package_name 下载并安装一个rpm包<br>yum localinstall package_name.rpm 将安装一个rpm包，使用你自己的软件仓库为你解决所有依赖关系<br>yum update package_name.rpm 更新当前系统中所有安装的rpm包<br>yum update package_name 更新一个rpm包<br>yum remove package_name 删除一个rpm包<br>yum list 列出当前系统中安装的所有包<br>yum search package_name 在rpm仓库中搜寻软件包<br>yum clean packages 清理rpm缓存删除下载的包<br>yum clean headers 删除所有头文件<br>yum clean all 删除所有缓存的包和头文件</p>\n<h3 id=\"13-DEB-包-Debian-Ubuntu-以及类似系统\"><a href=\"#13-DEB-包-Debian-Ubuntu-以及类似系统\" class=\"headerlink\" title=\"13.DEB 包 (Debian, Ubuntu 以及类似系统)\"></a>13.DEB 包 (Debian, Ubuntu 以及类似系统)</h3><p>dpkg -i package.deb 安装/更新一个 deb 包<br>dpkg -r package_name 从系统删除一个 deb 包<br>dpkg -l 显示系统中所有已经安装的 deb 包<br>dpkg -l | grep httpd 显示所有名称中包含 “httpd” 字样的deb包<br>dpkg -s package_name 获得已经安装在系统中一个特殊包的信息<br>dpkg -L package_name 显示系统中已经安装的一个deb包所提供的文件列表<br>dpkg –contents package.deb 显示尚未安装的一个包所提供的文件列表<br>dpkg -S /bin/ping 确认所给的文件由哪个deb包提供</p>\n<h3 id=\"14-APT-软件工具-Debian-Ubuntu-以及类似系统\"><a href=\"#14-APT-软件工具-Debian-Ubuntu-以及类似系统\" class=\"headerlink\" title=\"14.APT 软件工具 (Debian, Ubuntu 以及类似系统)\"></a>14.APT 软件工具 (Debian, Ubuntu 以及类似系统)</h3><p>apt-get install package_name 安装/更新一个 deb 包<br>apt-cdrom install package_name 从光盘安装/更新一个 deb 包<br>apt-get update 升级列表中的软件包<br>apt-get upgrade 升级所有已安装的软件<br>apt-get remove package_name 从系统删除一个deb包<br>apt-get check 确认依赖的软件仓库正确<br>apt-get clean 从下载的软件包中清理缓存<br>apt-cache search searched-package 返回包含所要搜索字符串的软件包名称</p>\n<h3 id=\"15-查看文件内容\"><a href=\"#15-查看文件内容\" class=\"headerlink\" title=\"15.查看文件内容\"></a>15.查看文件内容</h3><p>cat file1 从第一个字节开始正向查看文件的内容<br>tac file1 从最后一行开始反向查看一个文件的内容<br>more file1 查看一个长文件的内容<br>less file1 类似于 ‘more’ 命令，但是它允许在文件中和正向操作一样的反向操作<br>head -2 file1 查看一个文件的前两行<br>tail -2 file1 查看一个文件的最后两行<br>tail -f /var/log/messages 实时查看被添加到一个文件中的内容</p>\n<h3 id=\"16-文本处理\"><a href=\"#16-文本处理\" class=\"headerlink\" title=\"16.文本处理\"></a>16.文本处理</h3><p>cat file1 file2 … | command &lt;&gt; file1_in.txt_or_file1_out.txt general syntax for text manipulation using PIPE, STDIN and STDOUT<br>cat file1 | command( sed, grep, awk, grep, etc…) &gt; result.txt 合并一个文件的详细说明文本，并将简介写入一个新文件中<br>cat file1 | command( sed, grep, awk, grep, etc…) &gt;&gt; result.txt 合并一个文件的详细说明文本，并将简介写入一个已有的文件中<br>grep Aug /var/log/messages 在文件 ‘/var/log/messages’中查找关键词”Aug”<br>grep ^Aug /var/log/messages 在文件 ‘/var/log/messages’中查找以”Aug”开始的词汇<br>grep [0-9] /var/log/messages 选择 ‘/var/log/messages’ 文件中所有包含数字的行<br>grep Aug -R /var/log/<em> 在目录 ‘/var/log’ 及随后的目录中搜索字符串”Aug”<br>sed ‘s/stringa1/stringa2/g’ example.txt 将example.txt文件中的 “string1” 替换成 “string2”<br>sed ‘/^$/d’ example.txt 从example.txt文件中删除所有空白行<br>sed ‘/ </em>#/d; /^$/d’ example.txt 从example.txt文件中删除所有注释和空白行<br>echo ‘esempio’ | tr ‘[:lower:]’ ‘[:upper:]’ 合并上下单元格内容<br>sed -e ‘1d’ result.txt 从文件example.txt 中排除第一行<br>sed -n ‘/stringa1/p’ 查看只包含词汇 “string1”的行<br>sed -e ‘s/ <em>$//‘ example.txt 删除每一行最后的空白字符<br>sed -e ‘s/stringa1//g’ example.txt 从文档中只删除词汇 “string1” 并保留剩余全部<br>sed -n ‘1,5p;5q’ example.txt 查看从第一行到第5行内容<br>sed -n ‘5p;5q’ example.txt 查看第5行<br>sed -e ‘s/00</em>/0/g’ example.txt 用单个零替换多个零<br>cat -n file1 标示文件的行数<br>cat example.txt | awk ‘NR%2==1’ 删除example.txt文件中的所有偶数行<br>echo a b c | awk ‘{print $1}’ 查看一行第一栏<br>echo a b c | awk ‘{print $1,$3}’ 查看一行的第一和第三栏<br>paste file1 file2 合并两个文件或两栏的内容<br>paste -d ‘+’ file1 file2 合并两个文件或两栏的内容，中间用”+”区分<br>sort file1 file2 排序两个文件的内容<br>sort file1 file2 | uniq 取出两个文件的并集(重复的行只保留一份)<br>sort file1 file2 | uniq -u 删除交集，留下其他的行<br>sort file1 file2 | uniq -d 取出两个文件的交集(只留下同时存在于两个文件中的文件)<br>comm -1 file1 file2 比较两个文件的内容只删除 ‘file1’ 所包含的内容<br>comm -2 file1 file2 比较两个文件的内容只删除 ‘file2’ 所包含的内容<br>comm -3 file1 file2 比较两个文件的内容只删除两个文件共有的部分</p>\n<h3 id=\"17-字符设置和文件格式转换\"><a href=\"#17-字符设置和文件格式转换\" class=\"headerlink\" title=\"17.字符设置和文件格式转换\"></a>17.字符设置和文件格式转换</h3><p>dos2unix filedos.txt fileunix.txt 将一个文本文件的格式从MSDOS转换成UNIX<br>unix2dos fileunix.txt filedos.txt 将一个文本文件的格式从UNIX转换成MSDOS<br>recode ..HTML &lt; page.txt &gt; page.html 将一个文本文件转换成html<br>recode -l | more 显示所有允许的转换格式</p>\n<h3 id=\"18-文件系统分析\"><a href=\"#18-文件系统分析\" class=\"headerlink\" title=\"18.文件系统分析\"></a>18.文件系统分析</h3><p>badblocks -v /dev/hda1 检查磁盘hda1上的坏磁块<br>fsck /dev/hda1 修复/检查hda1磁盘上linux文件系统的完整性<br>fsck.ext2 /dev/hda1 修复/检查hda1磁盘上ext2文件系统的完整性<br>e2fsck /dev/hda1 修复/检查hda1磁盘上ext2文件系统的完整性<br>e2fsck -j /dev/hda1 修复/检查hda1磁盘上ext3文件系统的完整性<br>fsck.ext3 /dev/hda1 修复/检查hda1磁盘上ext3文件系统的完整性<br>fsck.vfat /dev/hda1 修复/检查hda1磁盘上fat文件系统的完整性<br>fsck.msdos /dev/hda1 修复/检查hda1磁盘上dos文件系统的完整性<br>dosfsck /dev/hda1 修复/检查hda1磁盘上dos文件系统的完整性</p>\n<h3 id=\"19-初始化一个文件系统\"><a href=\"#19-初始化一个文件系统\" class=\"headerlink\" title=\"19.初始化一个文件系统\"></a>19.初始化一个文件系统</h3><p>mkfs /dev/hda1 在hda1分区创建一个文件系统<br>mke2fs /dev/hda1 在hda1分区创建一个linux ext2的文件系统<br>mke2fs -j /dev/hda1 在hda1分区创建一个linux ext3(日志型)的文件系统<br>mkfs -t vfat 32 -F /dev/hda1 创建一个 FAT32 文件系统<br>fdformat -n /dev/fd0 格式化一个软盘<br>mkswap /dev/hda3 创建一个swap文件系统</p>\n<h3 id=\"20-SWAP文件系统\"><a href=\"#20-SWAP文件系统\" class=\"headerlink\" title=\"20.SWAP文件系统\"></a>20.SWAP文件系统</h3><p>mkswap /dev/hda3 创建一个swap文件系统<br>swapon /dev/hda3 启用一个新的swap文件系统<br>swapon /dev/hda2 /dev/hdb3 启用两个swap分区</p>\n<h3 id=\"21-备份\"><a href=\"#21-备份\" class=\"headerlink\" title=\"21.备份\"></a>21.备份</h3><p>dump -0aj -f /tmp/home0.bak /home 制作一个 ‘/home’ 目录的完整备份<br>dump -1aj -f /tmp/home0.bak /home 制作一个 ‘/home’ 目录的交互式备份<br>restore -if /tmp/home0.bak 还原一个交互式备份<br>rsync -rogpav –delete /home /tmp 同步两边的目录<br>rsync -rogpav -e ssh –delete /home ip_address:/tmp 通过SSH通道rsync<br>rsync -az -e ssh –delete ip_addr:/home/public /home/local 通过ssh和压缩将一个远程目录同步到本地目录<br>rsync -az -e ssh –delete /home/local ip_addr:/home/public 通过ssh和压缩将本地目录同步到远程目录<br>dd bs=1M if=/dev/hda | gzip | ssh user@ip_addr ‘dd of=hda.gz’ 通过ssh在远程主机上执行一次备份本地磁盘的操作<br>dd if=/dev/sda of=/tmp/file1 备份磁盘内容到一个文件<br>tar -Puf backup.tar /home/user 执行一次对 ‘/home/user’ 目录的交互式备份操作<br>( cd /tmp/local/ &amp;&amp; tar c . ) | ssh -C user@ip_addr ‘cd /home/share/ &amp;&amp; tar x -p’ 通过ssh在远程目录中复制一个目录内容<br>( tar c /home ) | ssh -C user@ip_addr ‘cd /home/backup-home &amp;&amp; tar x -p’ 通过ssh在远程目录中复制一个本地目录<br>tar cf - . | (cd /tmp/backup ; tar xf - ) 本地将一个目录复制到另一个地方，保留原有权限及链接<br>find /home/user1 -name ‘<em>.txt’ | xargs cp -av –target-directory=/home/backup/ –parents 从一个目录查找并复制所有以 ‘.txt’ 结尾的文件到另一个目录<br>find /var/log -name ‘</em>.log’ | tar cv –files-from=- | bzip2 &gt; log.tar.bz2 查找所有以 ‘.log’ 结尾的文件并做成一个bzip包<br>dd if=/dev/hda of=/dev/fd0 bs=512 count=1 做一个将 MBR (Master Boot Record)内容复制到软盘的动作<br>dd if=/dev/fd0 of=/dev/hda bs=512 count=1 从已经保存到软盘的备份中恢复MBR内容</p>\n<h3 id=\"22-光盘\"><a href=\"#22-光盘\" class=\"headerlink\" title=\"22.光盘\"></a>22.光盘</h3><p>cdrecord -v gracetime=2 dev=/dev/cdrom -eject blank=fast -force 清空一个可复写的光盘内容<br>mkisofs /dev/cdrom &gt; cd.iso 在磁盘上创建一个光盘的iso镜像文件<br>mkisofs /dev/cdrom | gzip &gt; cd_iso.gz 在磁盘上创建一个压缩了的光盘iso镜像文件<br>mkisofs -J -allow-leading-dots -R -V “Label CD” -iso-level 4 -o ./cd.iso data_cd 创建一个目录的iso镜像文件<br>cdrecord -v dev=/dev/cdrom cd.iso 刻录一个ISO镜像文件<br>gzip -dc cd_iso.gz | cdrecord dev=/dev/cdrom - 刻录一个压缩了的ISO镜像文件<br>mount -o loop cd.iso /mnt/iso 挂载一个ISO镜像文件<br>cd-paranoia -B 从一个CD光盘转录音轨到 wav 文件中<br>cd-paranoia – “-3” 从一个CD光盘转录音轨到 wav 文件中（参数-3）<br>cdrecord –scanbus 扫描总线以识别scsi通道<br>dd if=/dev/hdc | md5sum 校验一个设备的md5sum编码，例如一张 CD</p>\n<h3 id=\"23-网络-（以太网和WIFI无线）\"><a href=\"#23-网络-（以太网和WIFI无线）\" class=\"headerlink\" title=\"23.网络 - （以太网和WIFI无线）\"></a>23.网络 - （以太网和WIFI无线）</h3><p>ifconfig eth0 显示一个以太网卡的配置<br>ifup eth0 启用一个 ‘eth0’ 网络设备<br>ifdown eth0 禁用一个 ‘eth0’ 网络设备<br>ifconfig eth0 192.168.1.1 netmask 255.255.255.0 控制IP地址<br>ifconfig eth0 promisc 设置 ‘eth0’ 成混杂模式以嗅探数据包 (sniffing)<br>dhclient eth0 以dhcp模式启用 ‘eth0’<br>route -n show routing table<br>route add -net 0/0 gw IP_Gateway configura default gateway<br>route add -net 192.168.0.0 netmask 255.255.0.0 gw 192.168.1.1 configure static route to reach network ‘192.168.0.0/16’<br>route del 0/0 gw IP_gateway remove static route<br>echo “1” &gt; /proc/sys/net/ipv4/ip_forward activate ip routing<br>hostname show hostname of system<br>host www.example.com lookup hostname to resolve name to ip address and viceversa(1)<br>nslookup www.example.com lookup hostname to resolve name to ip address and viceversa(2)<br>ip link show show link status of all interfaces<br>mii-tool eth0 show link status of ‘eth0’<br>ethtool eth0 show statistics of network card ‘eth0’<br>netstat -tup show all active network connections and their PID<br>netstat -tupl show all network services listening on the system and their PID<br>tcpdump tcp port 80 show all HTTP traffic<br>iwlist scan show wireless networks<br>iwconfig eth1 show configuration of a wireless network card<br>hostname show hostname<br>host www.example.com lookup hostname to resolve name to ip address and viceversa<br>nslookup www.example.com lookup hostname to resolve name to ip address and viceversa<br>whois www.example.com lookup on Whois database</p>\n<p>Microsoft Windows networks (SAMBA)<br>nbtscan ip_addr netbios name resolution<br>nmblookup -A ip_addr netbios name resolution<br>smbclient -L ip_addr/hostname show remote shares of a windows host<br>smbget -Rr smb://ip_addr/share like wget can download files from a host windows via smb<br>mount -t smbfs -o username=user,password=pass //WinClient/share /mnt/share mount a windows network share</p>\n","excerpt":"<h3 id=\"1-系统信息\"><a href=\"#1-系统信息\" class=\"headerlink\" title=\"1.系统信息\"></a>1.系统信息</h3><p>arch 显示机器的处理器架构(1)<br>uname -m 显示机器的处理器架构(2)<br>uname -r 显示正在使用的内核版本<br>","more":"<br>dmidecode -q 显示硬件系统部件 - (SMBIOS / DMI)<br>hdparm -i /dev/hda 罗列一个磁盘的架构特性<br>hdparm -tT /dev/sda 在磁盘上执行测试性读取操作<br>cat /proc/cpuinfo 显示CPU info的信息<br>cat /proc/interrupts 显示中断<br>cat /proc/meminfo 校验内存使用<br>cat /proc/swaps 显示哪些swap被使用<br>cat /proc/version 显示内核的版本<br>cat /proc/net/dev 显示网络适配器及统计<br>cat /proc/mounts 显示已加载的文件系统<br>lspci -tv 罗列 PCI 设备<br>lsusb -tv 显示 USB 设备<br>date 显示系统日期<br>cal 2007 显示2007年的日历表<br>date 041217002007.00 设置日期和时间 - 月日时分年.秒<br>clock -w 将时间修改保存到 BIOS  </p>\n<h3 id=\"2-关机-系统的关机、重启以及登出\"><a href=\"#2-关机-系统的关机、重启以及登出\" class=\"headerlink\" title=\"2.关机 (系统的关机、重启以及登出 )\"></a>2.关机 (系统的关机、重启以及登出 )</h3><p>shutdown -h now 关闭系统(1)<br>init 0 关闭系统(2)<br>telinit 0 关闭系统(3)<br>shutdown -h hours:minutes &amp; 按预定时间关闭系统<br>shutdown -c 取消按预定时间关闭系统<br>shutdown -r now 重启(1)<br>reboot 重启(2)<br>logout 注销</p>\n<h3 id=\"3-文件和目录\"><a href=\"#3-文件和目录\" class=\"headerlink\" title=\"3.文件和目录\"></a>3.文件和目录</h3><p>cd /home 进入 ‘/ home’ 目录’<br>cd .. 返回上一级目录<br>cd ../.. 返回上两级目录<br>cd 进入个人的主目录<br>cd ~user1 进入个人的主目录<br>cd - 返回上次所在的目录<br>pwd 显示工作路径<br>ls 查看目录中的文件<br>ls -F 查看目录中的文件<br>ls -l 显示文件和目录的详细资料<br>ls -a 显示隐藏文件<br>ls <em>[0-9]</em> 显示包含数字的文件名和目录名<br>tree 显示文件和目录由根目录开始的树形结构(1)<br>lstree 显示文件和目录由根目录开始的树形结构(2)<br>mkdir dir1 创建一个叫做 ‘dir1’ 的目录’<br>mkdir dir1 dir2 同时创建两个目录<br>mkdir -p /tmp/dir1/dir2 创建一个目录树<br>rm -f file1 删除一个叫做 ‘file1’ 的文件’<br>rmdir dir1 删除一个叫做 ‘dir1’ 的目录’<br>rm -rf dir1 删除一个叫做 ‘dir1’  的目录并同时删除其内容<br>rm -rf dir1 dir2 同时删除两个目录及它们的内容<br>mv dir1 new_dir 重命名/移动 一个目录<br>cp file1 file2 复制一个文件<br>cp dir/<em> . 复制一个目录下的所有文件到当前工作目录<br>cp -a /tmp/dir1 . 复制一个目录到当前工作目录<br>cp -a dir1 dir2 复制一个目录<br>ln -s file1 lnk1 创建一个指向文件或目录的软链接<br>ln file1 lnk1 创建一个指向文件或目录的物理链接<br>touch -t 0712250000 file1  修改一个文件或目录的时间戳 - (YYMMDDhhmm)<br>file file1 outputs the mime type of the file as text<br>iconv -l 列出已知的编码<br>iconv -f fromEncoding -t toEncoding inputFile &gt; outputFile creates a new from the given input file by assuming it is encoded in fromEncoding and converting it to toEncoding.<br>find . -maxdepth 1 -name </em>.jpg -print -exec convert “{}” -resize 80x60 “thumbs/{}” \\; batch resize files in the current directory and send them to a thumbnails directory (requires convert from Imagemagick)  </p>\n<h3 id=\"4-文件搜索\"><a href=\"#4-文件搜索\" class=\"headerlink\" title=\"4.文件搜索\"></a>4.文件搜索</h3><p>find / -name file1 从 ‘/‘  开始进入根文件系统搜索文件和目录<br>find / -user user1 搜索属于用户 ‘user1’ 的文件和目录<br>find /home/user1 -name *.bin 在目录 ‘/ home/user1’ 中搜索带有’.bin’ 结尾的文件<br>find /usr/bin -type f -atime +100 搜索在过去100天内未被使用过的执行文件<br>find /usr/bin -type f -mtime -10 搜索在10天内被创建或者修改过的文件<br>find / -name *.rpm -exec chmod 755 ‘{}’ \\; 搜索以 ‘.rpm’ 结尾的文件并定义其权限<br>find / -xdev -name *.rpm 搜索以 ‘.rpm’ 结尾的文件，忽略光驱、捷盘等可移动设备<br>locate *.ps 寻找以 ‘.ps’ 结尾的文件 - 先运行 ‘updatedb’ 命令<br>whereis halt 显示一个二进制文件、源码或man的位置<br>which halt 显示一个二进制文件或可执行文件的完整路径  </p>\n<h4 id=\"5-挂载一个文件系统\"><a href=\"#5-挂载一个文件系统\" class=\"headerlink\" title=\"5.挂载一个文件系统\"></a>5.挂载一个文件系统</h4><p>mount /dev/hda2 /mnt/hda2 挂载一个叫做hda2的盘 - 确定目录 ‘/ mnt/hda2’ 已经存在<br>umount /dev/hda2 卸载一个叫做hda2的盘 - 先从挂载点 ‘/ mnt/hda2’ 退出<br>fuser -km /mnt/hda2 当设备繁忙时强制卸载<br>umount -n /mnt/hda2 运行卸载操作而不写入  /etc/mtab 文件-  当文件为只读或当磁盘写满时非常有用<br>mount /dev/fd0 /mnt/floppy 挂载一个软盘<br>mount /dev/cdrom /mnt/cdrom 挂载一个cdrom或dvdrom<br>mount /dev/hdc /mnt/cdrecorder 挂载一个cdrw或dvdrom<br>mount /dev/hdb /mnt/cdrecorder 挂载一个cdrw或dvdrom<br>mount -o loop file.iso /mnt/cdrom 挂载一个文件或ISO镜像文件<br>mount -t vfat /dev/hda5 /mnt/hda5 挂载一个Windows FAT32文件系统<br>mount /dev/sda1 /mnt/usbdisk 挂载一个usb 捷盘或闪存设备<br>mount -t smbfs -o username=user,password=pass //WinClient/share /mnt/share 挂载一个windows网络共享  </p>\n<h3 id=\"6-磁盘空间\"><a href=\"#6-磁盘空间\" class=\"headerlink\" title=\"6.磁盘空间\"></a>6.磁盘空间</h3><p>df -h 显示已经挂载的分区列表<br>ls -lSr |more 以尺寸大小排列文件和目录<br>du -sh dir1 估算目录 ‘dir1’ 已经使用的磁盘空间’<br>du -sk * | sort -rn  以容量大小为依据依次显示文件和目录的大小<br>rpm -q -a –qf ‘%10{SIZE}t%{NAME}n’ | sort  -k1,1n 以大小为依据依次显示已安装的rpm包所使用的空间 (fedora, redhat类系统)<br>dpkg-query -W -f=’${Installed-Size;10}t${Package}n’ | sort -k1,1n 以大小为依据显示已安装的deb包所使用的空间 (ubuntu, debian类系统)</p>\n<p>返回顶部索引 ^</p>\n<h3 id=\"7-用户和群组\"><a href=\"#7-用户和群组\" class=\"headerlink\" title=\"7.用户和群组\"></a>7.用户和群组</h3><p>groupadd group_name 创建一个新用户组<br>groupdel group_name 删除一个用户组<br>groupmod -n new_group_name old_group_name 重命名一个用户组<br>useradd -c “Name Surname “ -g admin -d /home/user1 -s /bin/bash user1 创建一个属于 “admin” 用户组的用户<br>useradd user1 创建一个新用户<br>userdel -r user1 删除一个用户 ( ‘-r’ 排除主目录)<br>usermod -c “User FTP” -g system -d /ftp/user1 -s /bin/nologin user1 修改用户属性<br>passwd 修改口令<br>passwd user1 修改一个用户的口令 (只允许root执行)<br>chage -E 2005-12-31 user1 设置用户口令的失效期限<br>pwck 检查 ‘/etc/passwd’ 的文件格式和语法修正以及存在的用户<br>grpck 检查 ‘/etc/passwd’ 的文件格式和语法修正以及存在的群组<br>newgrp group_name 登陆进一个新的群组以改变新创建文件的预设群组</p>\n<h3 id=\"8-文件的权限-使用-“-”-设置权限，使用-“-“-用于取消\"><a href=\"#8-文件的权限-使用-“-”-设置权限，使用-“-“-用于取消\" class=\"headerlink\" title=\"8.文件的权限 - 使用 “+” 设置权限，使用 “-“ 用于取消\"></a>8.文件的权限 - 使用 “+” 设置权限，使用 “-“ 用于取消</h3><p>ls -lh 显示权限<br>ls /tmp | pr -T5 -W$COLUMNS 将终端划分成5栏显示<br>chmod ugo+rwx directory1 设置目录的所有人(u)、群组(g)以及其他人(o)以读（r ）、写(w)和执行(x)的权限<br>chmod go-rwx directory1 删除群组(g)与其他人(o)对目录的读写执行权限<br>chown user1 file1 改变一个文件的所有人属性<br>chown -R user1 directory1 改变一个目录的所有人属性并同时改变改目录下所有文件的属性<br>chgrp group1 file1 改变文件的群组<br>chown user1:group1 file1 改变一个文件的所有人和群组属性<br>find / -perm -u+s 罗列一个系统中所有使用了SUID控制的文件<br>chmod u+s /bin/file1 设置一个二进制文件的 SUID 位 - 运行该文件的用户也被赋予和所有者同样的权限<br>chmod u-s /bin/file1 禁用一个二进制文件的 SUID位<br>chmod g+s /home/public 设置一个目录的SGID 位 - 类似SUID ，不过这是针对目录的<br>chmod g-s /home/public 禁用一个目录的 SGID 位<br>chmod o+t /home/public 设置一个文件的 STIKY 位 - 只允许合法所有人删除文件<br>chmod o-t /home/public 禁用一个目录的 STIKY 位</p>\n<h3 id=\"9-文件的特殊属性-使用-“-”-设置权限，使用-“-“-用于取消\"><a href=\"#9-文件的特殊属性-使用-“-”-设置权限，使用-“-“-用于取消\" class=\"headerlink\" title=\"9.文件的特殊属性 - 使用 “+” 设置权限，使用 “-“ 用于取消\"></a>9.文件的特殊属性 - 使用 “+” 设置权限，使用 “-“ 用于取消</h3><p>chattr +a file1 只允许以追加方式读写文件<br>chattr +c file1 允许这个文件能被内核自动压缩/解压<br>chattr +d file1 在进行文件系统备份时，dump程序将忽略这个文件<br>chattr +i file1 设置成不可变的文件，不能被删除、修改、重命名或者链接<br>chattr +s file1 允许一个文件被安全地删除<br>chattr +S file1 一旦应用程序对这个文件执行了写操作，使系统立刻把修改的结果写到磁盘<br>chattr +u file1 若文件被删除，系统会允许你在以后恢复这个被删除的文件<br>lsattr 显示特殊的属性</p>\n<h3 id=\"10-打包和压缩文件\"><a href=\"#10-打包和压缩文件\" class=\"headerlink\" title=\"10.打包和压缩文件\"></a>10.打包和压缩文件</h3><p>bunzip2 file1.bz2 解压一个叫做 ‘file1.bz2’的文件<br>bzip2 file1 压缩一个叫做 ‘file1’ 的文件<br>gunzip file1.gz 解压一个叫做 ‘file1.gz’的文件<br>gzip file1 压缩一个叫做 ‘file1’的文件<br>gzip -9 file1 最大程度压缩<br>rar a file1.rar test_file 创建一个叫做 ‘file1.rar’ 的包<br>rar a file1.rar file1 file2 dir1 同时压缩 ‘file1’, ‘file2’ 以及目录 ‘dir1’<br>rar x file1.rar 解压rar包<br>unrar x file1.rar 解压rar包<br>tar -cvf archive.tar file1 创建一个非压缩的 tarball<br>tar -cvf archive.tar file1 file2 dir1 创建一个包含了 ‘file1’, ‘file2’ 以及 ‘dir1’的档案文件<br>tar -tf archive.tar 显示一个包中的内容<br>tar -xvf archive.tar 释放一个包<br>tar -xvf archive.tar -C /tmp 将压缩包释放到 /tmp目录下<br>tar -cvfj archive.tar.bz2 dir1 创建一个bzip2格式的压缩包<br>tar -xvfj archive.tar.bz2 解压一个bzip2格式的压缩包<br>tar -cvfz archive.tar.gz dir1 创建一个gzip格式的压缩包<br>tar -xvfz archive.tar.gz 解压一个gzip格式的压缩包<br>zip file1.zip file1 创建一个zip格式的压缩包<br>zip -r file1.zip file1 file2 dir1 将几个文件和目录同时压缩成一个zip格式的压缩包<br>unzip file1.zip 解压一个zip格式压缩包</p>\n<h3 id=\"11-RPM-包-（Fedora-Redhat及类似系统）\"><a href=\"#11-RPM-包-（Fedora-Redhat及类似系统）\" class=\"headerlink\" title=\"11.RPM 包 - （Fedora, Redhat及类似系统）\"></a>11.RPM 包 - （Fedora, Redhat及类似系统）</h3><p>rpm -ivh package.rpm 安装一个rpm包<br>rpm -ivh –nodeeps package.rpm 安装一个rpm包而忽略依赖关系警告<br>rpm -U package.rpm 更新一个rpm包但不改变其配置文件<br>rpm -F package.rpm 更新一个确定已经安装的rpm包<br>rpm -e package_name.rpm 删除一个rpm包<br>rpm -qa 显示系统中所有已经安装的rpm包<br>rpm -qa | grep httpd 显示所有名称中包含 “httpd” 字样的rpm包<br>rpm -qi package_name 获取一个已安装包的特殊信息<br>rpm -qg “System Environment/Daemons” 显示一个组件的rpm包<br>rpm -ql package_name 显示一个已经安装的rpm包提供的文件列表<br>rpm -qc package_name 显示一个已经安装的rpm包提供的配置文件列表<br>rpm -q package_name –whatrequires 显示与一个rpm包存在依赖关系的列表<br>rpm -q package_name –whatprovides 显示一个rpm包所占的体积<br>rpm -q package_name –scripts 显示在安装/删除期间所执行的脚本l<br>rpm -q package_name –changelog 显示一个rpm包的修改历史<br>rpm -qf /etc/httpd/conf/httpd.conf 确认所给的文件由哪个rpm包所提供<br>rpm -qp package.rpm -l 显示由一个尚未安装的rpm包提供的文件列表<br>rpm –import /media/cdrom/RPM-GPG-KEY 导入公钥数字证书<br>rpm –checksig package.rpm 确认一个rpm包的完整性<br>rpm -qa gpg-pubkey 确认已安装的所有rpm包的完整性<br>rpm -V package_name 检查文件尺寸、 许可、类型、所有者、群组、MD5检查以及最后修改时间<br>rpm -Va 检查系统中所有已安装的rpm包- 小心使用<br>rpm -Vp package.rpm 确认一个rpm包还未安装<br>rpm2cpio package.rpm | cpio –extract –make-directories <em>bin</em> 从一个rpm包运行可执行文件<br>rpm -ivh /usr/src/redhat/RPMS/<code>arch</code>/package.rpm 从一个rpm源码安装一个构建好的包<br>rpmbuild –rebuild package_name.src.rpm 从一个rpm源码构建一个 rpm 包</p>\n<h3 id=\"12-YUM-软件包升级器-（Fedora-RedHat及类似系统）\"><a href=\"#12-YUM-软件包升级器-（Fedora-RedHat及类似系统）\" class=\"headerlink\" title=\"12.YUM 软件包升级器 - （Fedora, RedHat及类似系统）\"></a>12.YUM 软件包升级器 - （Fedora, RedHat及类似系统）</h3><p>yum install package_name 下载并安装一个rpm包<br>yum localinstall package_name.rpm 将安装一个rpm包，使用你自己的软件仓库为你解决所有依赖关系<br>yum update package_name.rpm 更新当前系统中所有安装的rpm包<br>yum update package_name 更新一个rpm包<br>yum remove package_name 删除一个rpm包<br>yum list 列出当前系统中安装的所有包<br>yum search package_name 在rpm仓库中搜寻软件包<br>yum clean packages 清理rpm缓存删除下载的包<br>yum clean headers 删除所有头文件<br>yum clean all 删除所有缓存的包和头文件</p>\n<h3 id=\"13-DEB-包-Debian-Ubuntu-以及类似系统\"><a href=\"#13-DEB-包-Debian-Ubuntu-以及类似系统\" class=\"headerlink\" title=\"13.DEB 包 (Debian, Ubuntu 以及类似系统)\"></a>13.DEB 包 (Debian, Ubuntu 以及类似系统)</h3><p>dpkg -i package.deb 安装/更新一个 deb 包<br>dpkg -r package_name 从系统删除一个 deb 包<br>dpkg -l 显示系统中所有已经安装的 deb 包<br>dpkg -l | grep httpd 显示所有名称中包含 “httpd” 字样的deb包<br>dpkg -s package_name 获得已经安装在系统中一个特殊包的信息<br>dpkg -L package_name 显示系统中已经安装的一个deb包所提供的文件列表<br>dpkg –contents package.deb 显示尚未安装的一个包所提供的文件列表<br>dpkg -S /bin/ping 确认所给的文件由哪个deb包提供</p>\n<h3 id=\"14-APT-软件工具-Debian-Ubuntu-以及类似系统\"><a href=\"#14-APT-软件工具-Debian-Ubuntu-以及类似系统\" class=\"headerlink\" title=\"14.APT 软件工具 (Debian, Ubuntu 以及类似系统)\"></a>14.APT 软件工具 (Debian, Ubuntu 以及类似系统)</h3><p>apt-get install package_name 安装/更新一个 deb 包<br>apt-cdrom install package_name 从光盘安装/更新一个 deb 包<br>apt-get update 升级列表中的软件包<br>apt-get upgrade 升级所有已安装的软件<br>apt-get remove package_name 从系统删除一个deb包<br>apt-get check 确认依赖的软件仓库正确<br>apt-get clean 从下载的软件包中清理缓存<br>apt-cache search searched-package 返回包含所要搜索字符串的软件包名称</p>\n<h3 id=\"15-查看文件内容\"><a href=\"#15-查看文件内容\" class=\"headerlink\" title=\"15.查看文件内容\"></a>15.查看文件内容</h3><p>cat file1 从第一个字节开始正向查看文件的内容<br>tac file1 从最后一行开始反向查看一个文件的内容<br>more file1 查看一个长文件的内容<br>less file1 类似于 ‘more’ 命令，但是它允许在文件中和正向操作一样的反向操作<br>head -2 file1 查看一个文件的前两行<br>tail -2 file1 查看一个文件的最后两行<br>tail -f /var/log/messages 实时查看被添加到一个文件中的内容</p>\n<h3 id=\"16-文本处理\"><a href=\"#16-文本处理\" class=\"headerlink\" title=\"16.文本处理\"></a>16.文本处理</h3><p>cat file1 file2 … | command &lt;&gt; file1_in.txt_or_file1_out.txt general syntax for text manipulation using PIPE, STDIN and STDOUT<br>cat file1 | command( sed, grep, awk, grep, etc…) &gt; result.txt 合并一个文件的详细说明文本，并将简介写入一个新文件中<br>cat file1 | command( sed, grep, awk, grep, etc…) &gt;&gt; result.txt 合并一个文件的详细说明文本，并将简介写入一个已有的文件中<br>grep Aug /var/log/messages 在文件 ‘/var/log/messages’中查找关键词”Aug”<br>grep ^Aug /var/log/messages 在文件 ‘/var/log/messages’中查找以”Aug”开始的词汇<br>grep [0-9] /var/log/messages 选择 ‘/var/log/messages’ 文件中所有包含数字的行<br>grep Aug -R /var/log/<em> 在目录 ‘/var/log’ 及随后的目录中搜索字符串”Aug”<br>sed ‘s/stringa1/stringa2/g’ example.txt 将example.txt文件中的 “string1” 替换成 “string2”<br>sed ‘/^$/d’ example.txt 从example.txt文件中删除所有空白行<br>sed ‘/ </em>#/d; /^$/d’ example.txt 从example.txt文件中删除所有注释和空白行<br>echo ‘esempio’ | tr ‘[:lower:]’ ‘[:upper:]’ 合并上下单元格内容<br>sed -e ‘1d’ result.txt 从文件example.txt 中排除第一行<br>sed -n ‘/stringa1/p’ 查看只包含词汇 “string1”的行<br>sed -e ‘s/ <em>$//‘ example.txt 删除每一行最后的空白字符<br>sed -e ‘s/stringa1//g’ example.txt 从文档中只删除词汇 “string1” 并保留剩余全部<br>sed -n ‘1,5p;5q’ example.txt 查看从第一行到第5行内容<br>sed -n ‘5p;5q’ example.txt 查看第5行<br>sed -e ‘s/00</em>/0/g’ example.txt 用单个零替换多个零<br>cat -n file1 标示文件的行数<br>cat example.txt | awk ‘NR%2==1’ 删除example.txt文件中的所有偶数行<br>echo a b c | awk ‘{print $1}’ 查看一行第一栏<br>echo a b c | awk ‘{print $1,$3}’ 查看一行的第一和第三栏<br>paste file1 file2 合并两个文件或两栏的内容<br>paste -d ‘+’ file1 file2 合并两个文件或两栏的内容，中间用”+”区分<br>sort file1 file2 排序两个文件的内容<br>sort file1 file2 | uniq 取出两个文件的并集(重复的行只保留一份)<br>sort file1 file2 | uniq -u 删除交集，留下其他的行<br>sort file1 file2 | uniq -d 取出两个文件的交集(只留下同时存在于两个文件中的文件)<br>comm -1 file1 file2 比较两个文件的内容只删除 ‘file1’ 所包含的内容<br>comm -2 file1 file2 比较两个文件的内容只删除 ‘file2’ 所包含的内容<br>comm -3 file1 file2 比较两个文件的内容只删除两个文件共有的部分</p>\n<h3 id=\"17-字符设置和文件格式转换\"><a href=\"#17-字符设置和文件格式转换\" class=\"headerlink\" title=\"17.字符设置和文件格式转换\"></a>17.字符设置和文件格式转换</h3><p>dos2unix filedos.txt fileunix.txt 将一个文本文件的格式从MSDOS转换成UNIX<br>unix2dos fileunix.txt filedos.txt 将一个文本文件的格式从UNIX转换成MSDOS<br>recode ..HTML &lt; page.txt &gt; page.html 将一个文本文件转换成html<br>recode -l | more 显示所有允许的转换格式</p>\n<h3 id=\"18-文件系统分析\"><a href=\"#18-文件系统分析\" class=\"headerlink\" title=\"18.文件系统分析\"></a>18.文件系统分析</h3><p>badblocks -v /dev/hda1 检查磁盘hda1上的坏磁块<br>fsck /dev/hda1 修复/检查hda1磁盘上linux文件系统的完整性<br>fsck.ext2 /dev/hda1 修复/检查hda1磁盘上ext2文件系统的完整性<br>e2fsck /dev/hda1 修复/检查hda1磁盘上ext2文件系统的完整性<br>e2fsck -j /dev/hda1 修复/检查hda1磁盘上ext3文件系统的完整性<br>fsck.ext3 /dev/hda1 修复/检查hda1磁盘上ext3文件系统的完整性<br>fsck.vfat /dev/hda1 修复/检查hda1磁盘上fat文件系统的完整性<br>fsck.msdos /dev/hda1 修复/检查hda1磁盘上dos文件系统的完整性<br>dosfsck /dev/hda1 修复/检查hda1磁盘上dos文件系统的完整性</p>\n<h3 id=\"19-初始化一个文件系统\"><a href=\"#19-初始化一个文件系统\" class=\"headerlink\" title=\"19.初始化一个文件系统\"></a>19.初始化一个文件系统</h3><p>mkfs /dev/hda1 在hda1分区创建一个文件系统<br>mke2fs /dev/hda1 在hda1分区创建一个linux ext2的文件系统<br>mke2fs -j /dev/hda1 在hda1分区创建一个linux ext3(日志型)的文件系统<br>mkfs -t vfat 32 -F /dev/hda1 创建一个 FAT32 文件系统<br>fdformat -n /dev/fd0 格式化一个软盘<br>mkswap /dev/hda3 创建一个swap文件系统</p>\n<h3 id=\"20-SWAP文件系统\"><a href=\"#20-SWAP文件系统\" class=\"headerlink\" title=\"20.SWAP文件系统\"></a>20.SWAP文件系统</h3><p>mkswap /dev/hda3 创建一个swap文件系统<br>swapon /dev/hda3 启用一个新的swap文件系统<br>swapon /dev/hda2 /dev/hdb3 启用两个swap分区</p>\n<h3 id=\"21-备份\"><a href=\"#21-备份\" class=\"headerlink\" title=\"21.备份\"></a>21.备份</h3><p>dump -0aj -f /tmp/home0.bak /home 制作一个 ‘/home’ 目录的完整备份<br>dump -1aj -f /tmp/home0.bak /home 制作一个 ‘/home’ 目录的交互式备份<br>restore -if /tmp/home0.bak 还原一个交互式备份<br>rsync -rogpav –delete /home /tmp 同步两边的目录<br>rsync -rogpav -e ssh –delete /home ip_address:/tmp 通过SSH通道rsync<br>rsync -az -e ssh –delete ip_addr:/home/public /home/local 通过ssh和压缩将一个远程目录同步到本地目录<br>rsync -az -e ssh –delete /home/local ip_addr:/home/public 通过ssh和压缩将本地目录同步到远程目录<br>dd bs=1M if=/dev/hda | gzip | ssh user@ip_addr ‘dd of=hda.gz’ 通过ssh在远程主机上执行一次备份本地磁盘的操作<br>dd if=/dev/sda of=/tmp/file1 备份磁盘内容到一个文件<br>tar -Puf backup.tar /home/user 执行一次对 ‘/home/user’ 目录的交互式备份操作<br>( cd /tmp/local/ &amp;&amp; tar c . ) | ssh -C user@ip_addr ‘cd /home/share/ &amp;&amp; tar x -p’ 通过ssh在远程目录中复制一个目录内容<br>( tar c /home ) | ssh -C user@ip_addr ‘cd /home/backup-home &amp;&amp; tar x -p’ 通过ssh在远程目录中复制一个本地目录<br>tar cf - . | (cd /tmp/backup ; tar xf - ) 本地将一个目录复制到另一个地方，保留原有权限及链接<br>find /home/user1 -name ‘<em>.txt’ | xargs cp -av –target-directory=/home/backup/ –parents 从一个目录查找并复制所有以 ‘.txt’ 结尾的文件到另一个目录<br>find /var/log -name ‘</em>.log’ | tar cv –files-from=- | bzip2 &gt; log.tar.bz2 查找所有以 ‘.log’ 结尾的文件并做成一个bzip包<br>dd if=/dev/hda of=/dev/fd0 bs=512 count=1 做一个将 MBR (Master Boot Record)内容复制到软盘的动作<br>dd if=/dev/fd0 of=/dev/hda bs=512 count=1 从已经保存到软盘的备份中恢复MBR内容</p>\n<h3 id=\"22-光盘\"><a href=\"#22-光盘\" class=\"headerlink\" title=\"22.光盘\"></a>22.光盘</h3><p>cdrecord -v gracetime=2 dev=/dev/cdrom -eject blank=fast -force 清空一个可复写的光盘内容<br>mkisofs /dev/cdrom &gt; cd.iso 在磁盘上创建一个光盘的iso镜像文件<br>mkisofs /dev/cdrom | gzip &gt; cd_iso.gz 在磁盘上创建一个压缩了的光盘iso镜像文件<br>mkisofs -J -allow-leading-dots -R -V “Label CD” -iso-level 4 -o ./cd.iso data_cd 创建一个目录的iso镜像文件<br>cdrecord -v dev=/dev/cdrom cd.iso 刻录一个ISO镜像文件<br>gzip -dc cd_iso.gz | cdrecord dev=/dev/cdrom - 刻录一个压缩了的ISO镜像文件<br>mount -o loop cd.iso /mnt/iso 挂载一个ISO镜像文件<br>cd-paranoia -B 从一个CD光盘转录音轨到 wav 文件中<br>cd-paranoia – “-3” 从一个CD光盘转录音轨到 wav 文件中（参数-3）<br>cdrecord –scanbus 扫描总线以识别scsi通道<br>dd if=/dev/hdc | md5sum 校验一个设备的md5sum编码，例如一张 CD</p>\n<h3 id=\"23-网络-（以太网和WIFI无线）\"><a href=\"#23-网络-（以太网和WIFI无线）\" class=\"headerlink\" title=\"23.网络 - （以太网和WIFI无线）\"></a>23.网络 - （以太网和WIFI无线）</h3><p>ifconfig eth0 显示一个以太网卡的配置<br>ifup eth0 启用一个 ‘eth0’ 网络设备<br>ifdown eth0 禁用一个 ‘eth0’ 网络设备<br>ifconfig eth0 192.168.1.1 netmask 255.255.255.0 控制IP地址<br>ifconfig eth0 promisc 设置 ‘eth0’ 成混杂模式以嗅探数据包 (sniffing)<br>dhclient eth0 以dhcp模式启用 ‘eth0’<br>route -n show routing table<br>route add -net 0/0 gw IP_Gateway configura default gateway<br>route add -net 192.168.0.0 netmask 255.255.0.0 gw 192.168.1.1 configure static route to reach network ‘192.168.0.0/16’<br>route del 0/0 gw IP_gateway remove static route<br>echo “1” &gt; /proc/sys/net/ipv4/ip_forward activate ip routing<br>hostname show hostname of system<br>host www.example.com lookup hostname to resolve name to ip address and viceversa(1)<br>nslookup www.example.com lookup hostname to resolve name to ip address and viceversa(2)<br>ip link show show link status of all interfaces<br>mii-tool eth0 show link status of ‘eth0’<br>ethtool eth0 show statistics of network card ‘eth0’<br>netstat -tup show all active network connections and their PID<br>netstat -tupl show all network services listening on the system and their PID<br>tcpdump tcp port 80 show all HTTP traffic<br>iwlist scan show wireless networks<br>iwconfig eth1 show configuration of a wireless network card<br>hostname show hostname<br>host www.example.com lookup hostname to resolve name to ip address and viceversa<br>nslookup www.example.com lookup hostname to resolve name to ip address and viceversa<br>whois www.example.com lookup on Whois database</p>\n<p>Microsoft Windows networks (SAMBA)<br>nbtscan ip_addr netbios name resolution<br>nmblookup -A ip_addr netbios name resolution<br>smbclient -L ip_addr/hostname show remote shares of a windows host<br>smbget -Rr smb://ip_addr/share like wget can download files from a host windows via smb<br>mount -t smbfs -o username=user,password=pass //WinClient/share /mnt/share mount a windows network share</p>"},{"title":"koa2搭建接口服务器实践","date":"2017-04-14T17:38:08.000Z","from":"原","_content":"#### 准备工作\n 安装新版node，es7需要高版本node支持， 并且需要babel转换es7语法\n async/await是异步流程控制更好的解决方案\n    `.babelrc`\n```\n   {\n\t\t\"presets\": [\"es2015-node5\"],\n\t\t\"plugins\": [\n\t\t\t\"transform-async-to-generator\",\n\t\t\t\"syntax-async-functions\"\n\t\t]\n\t}\n```\n<!--more-->\n\n`入口index`\n```\nrequire('babel-register');\nrequire('./server/index.js')\n```\n\n#### 目录结构\n\n----------\n* doc `数据库文件，项目文档`\n    - .doc\n    - .sql\n* backEnd `后台文件`\n    - Semantic UI `（样式框架）`\n    - vue／angular `（mvc框架）`\n* frontEnd `前端文件 vue/ng/react`\n    - app `原文件`\n    - release `编译文件`\n    - bower.json `引用`\n* server `服务端文件`\n    - config `配置模块（数据库配置，环境配置）`\n        - index.js\n    - controller `控制器，统一入口模块`\n    - routers `路由文件`\n        - (user) `接口处理模块`\n        - index.js `入口文件`\n    - codes `code编码模块`\n        - code.js\n        - index.js\n    - models `数据库模型模块Sequelize`\n    - services `业务模块，处理封装数据库models`\n    - upload  `文件上传目录`\n    - utils `工具类`\n    - views `node模版引擎`\n        - handlebars\n    - logs `日志模块`\n\n#### todo\n\n`中间件  session redis 缓存处理\n\n### package.json\n```\n{\n  \"name\": \"server\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"babel-plugin-syntax-async-functions\": \"^6.13.0\",\n    \"babel-plugin-transform-async-to-generator\": \"^6.24.1\",\n    \"babel-preset-es2015-node5\": \"^1.2.0\",\n    \"babel-register\": \"^6.24.1\",\n    \"colors\": \"^1.1.2\",\n    \"fs\": \"0.0.1-security\",\n    \"koa\": \"^2.0.0-alpha.8\",\n    \"koa-body\": \"^2.0.0\",\n    \"koa-logger\": \"^2.0.1\",\n    \"koa-router\": \"^7.1.1\",\n    \"koa-views\": \"^6.0.2\",\n    \"mysql\": \"^2.13.0\",\n    \"node.extend\": \"^1.1.6\",\n    \"path\": \"^0.12.7\",\n    \"sequelize\": \"^3.30.4\"\n  }\n}\n\n```\n\n####  services模块入口\n```\nconst fs = require('fs')\nconst path = require('path')\nconst Sequelize = require('sequelize')\nconst env = process.env.NODE_ENV || 'development'\nconst config = require('../config/index')[env]\nconst utils = require('../utils/index')\nconst sequelize = new Sequelize(config.database, config.username, config.password, config);\n\nconst dbStorage = []\nconst modelRoot = process.cwd() + '/models'\nconst models = utils.getFiles(modelRoot)\n\nmodels.map(function(file){\n    let model = sequelize.import(path.join(modelRoot,file))\n    dbStorage[model.name] = model\n})\n\nmodule.exports = dbStorage\n\n```\n\n#### 控制器\n```\n/*============================================================================\n * 控制器入口\n ============================================================================*/\nconst Koa = require('koa');\nconst router = require('../routers/index')\nconst app = new Koa();\nconst http = require('http')\nconst views = require('koa-views')\nconst colors = require('colors')\n// const cors = require('koa-cors')\nconst config = require('../config')\nconst logger = require('koa-logger')\n// 引入模版views\n// app.use(views(__dirname + '/views', { extension: 'jade' }))\napp.use(views( __dirname + '/views', {\n    extension: 'hbs',\n    map: { hbs: 'handlebars' }\n}));\n// 引入路由\napp.use(router.routes())\n\t.use(router.allowedMethods());\n// 跨域\n// app.use(cors())\n// 日志\napp.use(logger())\n// 开启服务\nlet server = http.createServer(app.callback());\nserver.listen(config.base.port);\nconsole.log(colors.red('服务已开启：端口'+ config.base.port))\n\n```\n\n#### 路由入口文件\n```\n/*============================================================================\n * 接口路由入口\n ============================================================================*/\nconst colors = require('colors')\nconst fs = require('fs')\nconst path = require('path')\nconst Router = require('koa-router')\nconst router = new Router()\nconst utils = require('../utils')\n\n/**\n * 遍历路由文件夹，注册路由\n * @type {String}\n */\nlet routesArray = utils.getFiles(__dirname)\n\nroutesArray.map(function(item){\n    let fileName = './' + item\n    if(fs.existsSync(path.resolve(__dirname, fileName))){\n        let routesInstance = require(fileName)\n        router.use(routesInstance.routes())\n        \t.use(routesInstance.allowedMethods());\n    }else{\n        console.log('路由 ----' + path.resolve(__dirname, fileName) + '  not found')\n    }\n})\n\nmodule.exports = router\n\n```\n\n\n#### 某路由文件\n```\nconst Router = require('koa-router')\nconst router = new Router()\nconst body = require('koa-body')()\nconst colors = require('colors')\nconst modules = require(process.cwd() + '/services/index')\nconst codes = require(process.cwd() + '/codes/index')\nconst utils = require(process.cwd() + '/utils/index')\n\n/**\n * 检查用户存在\n * @param  {[type]} userName [description]\n * @return {[type]}          [description]\n */\nconst checkUserExit = async (username) => {\n    if(!username){\n        return\n    }\n    return new Promise((resolve, reject) => {\n        modules.users.findAll({\n            where: {\n                username: username,\n            }\n        }).then((result)=>{\n            if(result && result.length > 0){\n                resolve(true)\n            }else{\n                resolve(false)\n            }\n        })\n    })\n}\n\nrouter.post('/login',body, async (ctx) => {\n    ctx.set('Access-Control-Allow-Method', 'POST');\n    ctx.set('Access-Control-Allow-Origin', '*')\n    let username = ctx.request.body.username\n    let password = ctx.request.body.password\n    if(!username || !password){\n        ctx.body = codes.set('2')\n        return\n    }\n    // 是否存在用户\n    let isExit = await checkUserExit(username)\n    let data = {isExit:isExit}\n\n    ctx.body = utils.extend(codes.set('0'),data)\n\n})\n\n\n\n\nrouter.get('/getUser/:id', async (ctx,next) => {\n\n  let  id = ctx.params.id;\n\n  await modules.users.findAll({\n        where: {\n            id: id,\n        }\n    }).then((result)=>{\n        let params = JSON.stringify(result)\n        ctx.body = JSON.stringify(result)\n  })\n\n});\n\n\nmodule.exports = router\n\n```\n\n#### utils\n\n```\nconst fs = require('fs')\nconst path = require('path')\nconst colors = require('colors')\nconst utils = require('./utils')\n\nutils.prototype.getFiles = function(root){\n    let fileArray = []\n    const getDeepFiles = function(fileRoot,parentRoot){\n        fs.readdirSync(fileRoot)\n        .forEach(function (file) {\n            if(file == 'index.js'){\n                return\n            }\n            let curPath = fileRoot + '/' + file\n            if(fs.statSync(curPath).isDirectory()){\n                getDeepFiles(curPath,file)\n            }else{\n                if(parentRoot){\n                    fileArray.push(parentRoot + '/' + file)\n                }else{\n                    fileArray.push(file)\n                }\n            }\n        })\n    }\n    getDeepFiles(root)\n    return fileArray\n}\n\n```\n\n以上是部分文件显示，如果需要详细框架搭建，留言或QQ联系博主我\n","source":"_posts/koa2搭建接口服务器实践.md","raw":"---\ntitle: koa2搭建接口服务器实践\ntags:\n  - 'koa2'\ncategories:\n  - 'node'\n  - 'koa2'\ndate: 2017-04-15 01:38:08\nfrom: '原'\n---\n#### 准备工作\n 安装新版node，es7需要高版本node支持， 并且需要babel转换es7语法\n async/await是异步流程控制更好的解决方案\n    `.babelrc`\n```\n   {\n\t\t\"presets\": [\"es2015-node5\"],\n\t\t\"plugins\": [\n\t\t\t\"transform-async-to-generator\",\n\t\t\t\"syntax-async-functions\"\n\t\t]\n\t}\n```\n<!--more-->\n\n`入口index`\n```\nrequire('babel-register');\nrequire('./server/index.js')\n```\n\n#### 目录结构\n\n----------\n* doc `数据库文件，项目文档`\n    - .doc\n    - .sql\n* backEnd `后台文件`\n    - Semantic UI `（样式框架）`\n    - vue／angular `（mvc框架）`\n* frontEnd `前端文件 vue/ng/react`\n    - app `原文件`\n    - release `编译文件`\n    - bower.json `引用`\n* server `服务端文件`\n    - config `配置模块（数据库配置，环境配置）`\n        - index.js\n    - controller `控制器，统一入口模块`\n    - routers `路由文件`\n        - (user) `接口处理模块`\n        - index.js `入口文件`\n    - codes `code编码模块`\n        - code.js\n        - index.js\n    - models `数据库模型模块Sequelize`\n    - services `业务模块，处理封装数据库models`\n    - upload  `文件上传目录`\n    - utils `工具类`\n    - views `node模版引擎`\n        - handlebars\n    - logs `日志模块`\n\n#### todo\n\n`中间件  session redis 缓存处理\n\n### package.json\n```\n{\n  \"name\": \"server\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"babel-plugin-syntax-async-functions\": \"^6.13.0\",\n    \"babel-plugin-transform-async-to-generator\": \"^6.24.1\",\n    \"babel-preset-es2015-node5\": \"^1.2.0\",\n    \"babel-register\": \"^6.24.1\",\n    \"colors\": \"^1.1.2\",\n    \"fs\": \"0.0.1-security\",\n    \"koa\": \"^2.0.0-alpha.8\",\n    \"koa-body\": \"^2.0.0\",\n    \"koa-logger\": \"^2.0.1\",\n    \"koa-router\": \"^7.1.1\",\n    \"koa-views\": \"^6.0.2\",\n    \"mysql\": \"^2.13.0\",\n    \"node.extend\": \"^1.1.6\",\n    \"path\": \"^0.12.7\",\n    \"sequelize\": \"^3.30.4\"\n  }\n}\n\n```\n\n####  services模块入口\n```\nconst fs = require('fs')\nconst path = require('path')\nconst Sequelize = require('sequelize')\nconst env = process.env.NODE_ENV || 'development'\nconst config = require('../config/index')[env]\nconst utils = require('../utils/index')\nconst sequelize = new Sequelize(config.database, config.username, config.password, config);\n\nconst dbStorage = []\nconst modelRoot = process.cwd() + '/models'\nconst models = utils.getFiles(modelRoot)\n\nmodels.map(function(file){\n    let model = sequelize.import(path.join(modelRoot,file))\n    dbStorage[model.name] = model\n})\n\nmodule.exports = dbStorage\n\n```\n\n#### 控制器\n```\n/*============================================================================\n * 控制器入口\n ============================================================================*/\nconst Koa = require('koa');\nconst router = require('../routers/index')\nconst app = new Koa();\nconst http = require('http')\nconst views = require('koa-views')\nconst colors = require('colors')\n// const cors = require('koa-cors')\nconst config = require('../config')\nconst logger = require('koa-logger')\n// 引入模版views\n// app.use(views(__dirname + '/views', { extension: 'jade' }))\napp.use(views( __dirname + '/views', {\n    extension: 'hbs',\n    map: { hbs: 'handlebars' }\n}));\n// 引入路由\napp.use(router.routes())\n\t.use(router.allowedMethods());\n// 跨域\n// app.use(cors())\n// 日志\napp.use(logger())\n// 开启服务\nlet server = http.createServer(app.callback());\nserver.listen(config.base.port);\nconsole.log(colors.red('服务已开启：端口'+ config.base.port))\n\n```\n\n#### 路由入口文件\n```\n/*============================================================================\n * 接口路由入口\n ============================================================================*/\nconst colors = require('colors')\nconst fs = require('fs')\nconst path = require('path')\nconst Router = require('koa-router')\nconst router = new Router()\nconst utils = require('../utils')\n\n/**\n * 遍历路由文件夹，注册路由\n * @type {String}\n */\nlet routesArray = utils.getFiles(__dirname)\n\nroutesArray.map(function(item){\n    let fileName = './' + item\n    if(fs.existsSync(path.resolve(__dirname, fileName))){\n        let routesInstance = require(fileName)\n        router.use(routesInstance.routes())\n        \t.use(routesInstance.allowedMethods());\n    }else{\n        console.log('路由 ----' + path.resolve(__dirname, fileName) + '  not found')\n    }\n})\n\nmodule.exports = router\n\n```\n\n\n#### 某路由文件\n```\nconst Router = require('koa-router')\nconst router = new Router()\nconst body = require('koa-body')()\nconst colors = require('colors')\nconst modules = require(process.cwd() + '/services/index')\nconst codes = require(process.cwd() + '/codes/index')\nconst utils = require(process.cwd() + '/utils/index')\n\n/**\n * 检查用户存在\n * @param  {[type]} userName [description]\n * @return {[type]}          [description]\n */\nconst checkUserExit = async (username) => {\n    if(!username){\n        return\n    }\n    return new Promise((resolve, reject) => {\n        modules.users.findAll({\n            where: {\n                username: username,\n            }\n        }).then((result)=>{\n            if(result && result.length > 0){\n                resolve(true)\n            }else{\n                resolve(false)\n            }\n        })\n    })\n}\n\nrouter.post('/login',body, async (ctx) => {\n    ctx.set('Access-Control-Allow-Method', 'POST');\n    ctx.set('Access-Control-Allow-Origin', '*')\n    let username = ctx.request.body.username\n    let password = ctx.request.body.password\n    if(!username || !password){\n        ctx.body = codes.set('2')\n        return\n    }\n    // 是否存在用户\n    let isExit = await checkUserExit(username)\n    let data = {isExit:isExit}\n\n    ctx.body = utils.extend(codes.set('0'),data)\n\n})\n\n\n\n\nrouter.get('/getUser/:id', async (ctx,next) => {\n\n  let  id = ctx.params.id;\n\n  await modules.users.findAll({\n        where: {\n            id: id,\n        }\n    }).then((result)=>{\n        let params = JSON.stringify(result)\n        ctx.body = JSON.stringify(result)\n  })\n\n});\n\n\nmodule.exports = router\n\n```\n\n#### utils\n\n```\nconst fs = require('fs')\nconst path = require('path')\nconst colors = require('colors')\nconst utils = require('./utils')\n\nutils.prototype.getFiles = function(root){\n    let fileArray = []\n    const getDeepFiles = function(fileRoot,parentRoot){\n        fs.readdirSync(fileRoot)\n        .forEach(function (file) {\n            if(file == 'index.js'){\n                return\n            }\n            let curPath = fileRoot + '/' + file\n            if(fs.statSync(curPath).isDirectory()){\n                getDeepFiles(curPath,file)\n            }else{\n                if(parentRoot){\n                    fileArray.push(parentRoot + '/' + file)\n                }else{\n                    fileArray.push(file)\n                }\n            }\n        })\n    }\n    getDeepFiles(root)\n    return fileArray\n}\n\n```\n\n以上是部分文件显示，如果需要详细框架搭建，留言或QQ联系博主我\n","slug":"koa2搭建接口服务器实践","published":1,"updated":"2017-07-27T02:10:34.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5naxw4c000ofcxel5hhp8vg","content":"<h4 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h4><p> 安装新版node，es7需要高版本node支持， 并且需要babel转换es7语法<br> async/await是异步流程控制更好的解决方案<br>    <code>.babelrc</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">  &#123;</div><div class=\"line\">\t&quot;presets&quot;: [&quot;es2015-node5&quot;],</div><div class=\"line\">\t&quot;plugins&quot;: [</div><div class=\"line\">\t\t&quot;transform-async-to-generator&quot;,</div><div class=\"line\">\t\t&quot;syntax-async-functions&quot;</div><div class=\"line\">\t]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p><code>入口index</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">require(&apos;babel-register&apos;);</div><div class=\"line\">require(&apos;./server/index.js&apos;)</div></pre></td></tr></table></figure></p>\n<h4 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h4><hr>\n<ul>\n<li>doc <code>数据库文件，项目文档</code><ul>\n<li>.doc</li>\n<li>.sql</li>\n</ul>\n</li>\n<li>backEnd <code>后台文件</code><ul>\n<li>Semantic UI <code>（样式框架）</code></li>\n<li>vue／angular <code>（mvc框架）</code></li>\n</ul>\n</li>\n<li>frontEnd <code>前端文件 vue/ng/react</code><ul>\n<li>app <code>原文件</code></li>\n<li>release <code>编译文件</code></li>\n<li>bower.json <code>引用</code></li>\n</ul>\n</li>\n<li>server <code>服务端文件</code><ul>\n<li>config <code>配置模块（数据库配置，环境配置）</code><ul>\n<li>index.js</li>\n</ul>\n</li>\n<li>controller <code>控制器，统一入口模块</code></li>\n<li>routers <code>路由文件</code><ul>\n<li>(user) <code>接口处理模块</code></li>\n<li>index.js <code>入口文件</code></li>\n</ul>\n</li>\n<li>codes <code>code编码模块</code><ul>\n<li>code.js</li>\n<li>index.js</li>\n</ul>\n</li>\n<li>models <code>数据库模型模块Sequelize</code></li>\n<li>services <code>业务模块，处理封装数据库models</code></li>\n<li>upload  <code>文件上传目录</code></li>\n<li>utils <code>工具类</code></li>\n<li>views <code>node模版引擎</code><ul>\n<li>handlebars</li>\n</ul>\n</li>\n<li>logs <code>日志模块</code></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"todo\"><a href=\"#todo\" class=\"headerlink\" title=\"todo\"></a>todo</h4><p>`中间件  session redis 缓存处理</p>\n<h3 id=\"package-json\"><a href=\"#package-json\" class=\"headerlink\" title=\"package.json\"></a>package.json</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  &quot;name&quot;: &quot;server&quot;,</div><div class=\"line\">  &quot;version&quot;: &quot;1.0.0&quot;,</div><div class=\"line\">  &quot;description&quot;: &quot;&quot;,</div><div class=\"line\">  &quot;main&quot;: &quot;index.js&quot;,</div><div class=\"line\">  &quot;scripts&quot;: &#123;</div><div class=\"line\">    &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  &quot;author&quot;: &quot;&quot;,</div><div class=\"line\">  &quot;license&quot;: &quot;ISC&quot;,</div><div class=\"line\">  &quot;dependencies&quot;: &#123;</div><div class=\"line\">    &quot;babel-plugin-syntax-async-functions&quot;: &quot;^6.13.0&quot;,</div><div class=\"line\">    &quot;babel-plugin-transform-async-to-generator&quot;: &quot;^6.24.1&quot;,</div><div class=\"line\">    &quot;babel-preset-es2015-node5&quot;: &quot;^1.2.0&quot;,</div><div class=\"line\">    &quot;babel-register&quot;: &quot;^6.24.1&quot;,</div><div class=\"line\">    &quot;colors&quot;: &quot;^1.1.2&quot;,</div><div class=\"line\">    &quot;fs&quot;: &quot;0.0.1-security&quot;,</div><div class=\"line\">    &quot;koa&quot;: &quot;^2.0.0-alpha.8&quot;,</div><div class=\"line\">    &quot;koa-body&quot;: &quot;^2.0.0&quot;,</div><div class=\"line\">    &quot;koa-logger&quot;: &quot;^2.0.1&quot;,</div><div class=\"line\">    &quot;koa-router&quot;: &quot;^7.1.1&quot;,</div><div class=\"line\">    &quot;koa-views&quot;: &quot;^6.0.2&quot;,</div><div class=\"line\">    &quot;mysql&quot;: &quot;^2.13.0&quot;,</div><div class=\"line\">    &quot;node.extend&quot;: &quot;^1.1.6&quot;,</div><div class=\"line\">    &quot;path&quot;: &quot;^0.12.7&quot;,</div><div class=\"line\">    &quot;sequelize&quot;: &quot;^3.30.4&quot;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"services模块入口\"><a href=\"#services模块入口\" class=\"headerlink\" title=\"services模块入口\"></a>services模块入口</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">const fs = require(&apos;fs&apos;)</div><div class=\"line\">const path = require(&apos;path&apos;)</div><div class=\"line\">const Sequelize = require(&apos;sequelize&apos;)</div><div class=\"line\">const env = process.env.NODE_ENV || &apos;development&apos;</div><div class=\"line\">const config = require(&apos;../config/index&apos;)[env]</div><div class=\"line\">const utils = require(&apos;../utils/index&apos;)</div><div class=\"line\">const sequelize = new Sequelize(config.database, config.username, config.password, config);</div><div class=\"line\"></div><div class=\"line\">const dbStorage = []</div><div class=\"line\">const modelRoot = process.cwd() + &apos;/models&apos;</div><div class=\"line\">const models = utils.getFiles(modelRoot)</div><div class=\"line\"></div><div class=\"line\">models.map(function(file)&#123;</div><div class=\"line\">    let model = sequelize.import(path.join(modelRoot,file))</div><div class=\"line\">    dbStorage[model.name] = model</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">module.exports = dbStorage</div></pre></td></tr></table></figure>\n<h4 id=\"控制器\"><a href=\"#控制器\" class=\"headerlink\" title=\"控制器\"></a>控制器</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">/*============================================================================</div><div class=\"line\"> * 控制器入口</div><div class=\"line\"> ============================================================================*/</div><div class=\"line\">const Koa = require(&apos;koa&apos;);</div><div class=\"line\">const router = require(&apos;../routers/index&apos;)</div><div class=\"line\">const app = new Koa();</div><div class=\"line\">const http = require(&apos;http&apos;)</div><div class=\"line\">const views = require(&apos;koa-views&apos;)</div><div class=\"line\">const colors = require(&apos;colors&apos;)</div><div class=\"line\">// const cors = require(&apos;koa-cors&apos;)</div><div class=\"line\">const config = require(&apos;../config&apos;)</div><div class=\"line\">const logger = require(&apos;koa-logger&apos;)</div><div class=\"line\">// 引入模版views</div><div class=\"line\">// app.use(views(__dirname + &apos;/views&apos;, &#123; extension: &apos;jade&apos; &#125;))</div><div class=\"line\">app.use(views( __dirname + &apos;/views&apos;, &#123;</div><div class=\"line\">    extension: &apos;hbs&apos;,</div><div class=\"line\">    map: &#123; hbs: &apos;handlebars&apos; &#125;</div><div class=\"line\">&#125;));</div><div class=\"line\">// 引入路由</div><div class=\"line\">app.use(router.routes())</div><div class=\"line\">\t.use(router.allowedMethods());</div><div class=\"line\">// 跨域</div><div class=\"line\">// app.use(cors())</div><div class=\"line\">// 日志</div><div class=\"line\">app.use(logger())</div><div class=\"line\">// 开启服务</div><div class=\"line\">let server = http.createServer(app.callback());</div><div class=\"line\">server.listen(config.base.port);</div><div class=\"line\">console.log(colors.red(&apos;服务已开启：端口&apos;+ config.base.port))</div></pre></td></tr></table></figure>\n<h4 id=\"路由入口文件\"><a href=\"#路由入口文件\" class=\"headerlink\" title=\"路由入口文件\"></a>路由入口文件</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">/*============================================================================</div><div class=\"line\"> * 接口路由入口</div><div class=\"line\"> ============================================================================*/</div><div class=\"line\">const colors = require(&apos;colors&apos;)</div><div class=\"line\">const fs = require(&apos;fs&apos;)</div><div class=\"line\">const path = require(&apos;path&apos;)</div><div class=\"line\">const Router = require(&apos;koa-router&apos;)</div><div class=\"line\">const router = new Router()</div><div class=\"line\">const utils = require(&apos;../utils&apos;)</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 遍历路由文件夹，注册路由</div><div class=\"line\"> * @type &#123;String&#125;</div><div class=\"line\"> */</div><div class=\"line\">let routesArray = utils.getFiles(__dirname)</div><div class=\"line\"></div><div class=\"line\">routesArray.map(function(item)&#123;</div><div class=\"line\">    let fileName = &apos;./&apos; + item</div><div class=\"line\">    if(fs.existsSync(path.resolve(__dirname, fileName)))&#123;</div><div class=\"line\">        let routesInstance = require(fileName)</div><div class=\"line\">        router.use(routesInstance.routes())</div><div class=\"line\">        \t.use(routesInstance.allowedMethods());</div><div class=\"line\">    &#125;else&#123;</div><div class=\"line\">        console.log(&apos;路由 ----&apos; + path.resolve(__dirname, fileName) + &apos;  not found&apos;)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">module.exports = router</div></pre></td></tr></table></figure>\n<h4 id=\"某路由文件\"><a href=\"#某路由文件\" class=\"headerlink\" title=\"某路由文件\"></a>某路由文件</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div></pre></td><td class=\"code\"><pre><div class=\"line\">const Router = require(&apos;koa-router&apos;)</div><div class=\"line\">const router = new Router()</div><div class=\"line\">const body = require(&apos;koa-body&apos;)()</div><div class=\"line\">const colors = require(&apos;colors&apos;)</div><div class=\"line\">const modules = require(process.cwd() + &apos;/services/index&apos;)</div><div class=\"line\">const codes = require(process.cwd() + &apos;/codes/index&apos;)</div><div class=\"line\">const utils = require(process.cwd() + &apos;/utils/index&apos;)</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 检查用户存在</div><div class=\"line\"> * @param  &#123;[type]&#125; userName [description]</div><div class=\"line\"> * @return &#123;[type]&#125;          [description]</div><div class=\"line\"> */</div><div class=\"line\">const checkUserExit = async (username) =&gt; &#123;</div><div class=\"line\">    if(!username)&#123;</div><div class=\"line\">        return</div><div class=\"line\">    &#125;</div><div class=\"line\">    return new Promise((resolve, reject) =&gt; &#123;</div><div class=\"line\">        modules.users.findAll(&#123;</div><div class=\"line\">            where: &#123;</div><div class=\"line\">                username: username,</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;).then((result)=&gt;&#123;</div><div class=\"line\">            if(result &amp;&amp; result.length &gt; 0)&#123;</div><div class=\"line\">                resolve(true)</div><div class=\"line\">            &#125;else&#123;</div><div class=\"line\">                resolve(false)</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;)</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">router.post(&apos;/login&apos;,body, async (ctx) =&gt; &#123;</div><div class=\"line\">    ctx.set(&apos;Access-Control-Allow-Method&apos;, &apos;POST&apos;);</div><div class=\"line\">    ctx.set(&apos;Access-Control-Allow-Origin&apos;, &apos;*&apos;)</div><div class=\"line\">    let username = ctx.request.body.username</div><div class=\"line\">    let password = ctx.request.body.password</div><div class=\"line\">    if(!username || !password)&#123;</div><div class=\"line\">        ctx.body = codes.set(&apos;2&apos;)</div><div class=\"line\">        return</div><div class=\"line\">    &#125;</div><div class=\"line\">    // 是否存在用户</div><div class=\"line\">    let isExit = await checkUserExit(username)</div><div class=\"line\">    let data = &#123;isExit:isExit&#125;</div><div class=\"line\"></div><div class=\"line\">    ctx.body = utils.extend(codes.set(&apos;0&apos;),data)</div><div class=\"line\"></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">router.get(&apos;/getUser/:id&apos;, async (ctx,next) =&gt; &#123;</div><div class=\"line\"></div><div class=\"line\">  let  id = ctx.params.id;</div><div class=\"line\"></div><div class=\"line\">  await modules.users.findAll(&#123;</div><div class=\"line\">        where: &#123;</div><div class=\"line\">            id: id,</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;).then((result)=&gt;&#123;</div><div class=\"line\">        let params = JSON.stringify(result)</div><div class=\"line\">        ctx.body = JSON.stringify(result)</div><div class=\"line\">  &#125;)</div><div class=\"line\"></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">module.exports = router</div></pre></td></tr></table></figure>\n<h4 id=\"utils\"><a href=\"#utils\" class=\"headerlink\" title=\"utils\"></a>utils</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">const fs = require(&apos;fs&apos;)</div><div class=\"line\">const path = require(&apos;path&apos;)</div><div class=\"line\">const colors = require(&apos;colors&apos;)</div><div class=\"line\">const utils = require(&apos;./utils&apos;)</div><div class=\"line\"></div><div class=\"line\">utils.prototype.getFiles = function(root)&#123;</div><div class=\"line\">    let fileArray = []</div><div class=\"line\">    const getDeepFiles = function(fileRoot,parentRoot)&#123;</div><div class=\"line\">        fs.readdirSync(fileRoot)</div><div class=\"line\">        .forEach(function (file) &#123;</div><div class=\"line\">            if(file == &apos;index.js&apos;)&#123;</div><div class=\"line\">                return</div><div class=\"line\">            &#125;</div><div class=\"line\">            let curPath = fileRoot + &apos;/&apos; + file</div><div class=\"line\">            if(fs.statSync(curPath).isDirectory())&#123;</div><div class=\"line\">                getDeepFiles(curPath,file)</div><div class=\"line\">            &#125;else&#123;</div><div class=\"line\">                if(parentRoot)&#123;</div><div class=\"line\">                    fileArray.push(parentRoot + &apos;/&apos; + file)</div><div class=\"line\">                &#125;else&#123;</div><div class=\"line\">                    fileArray.push(file)</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">    getDeepFiles(root)</div><div class=\"line\">    return fileArray</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上是部分文件显示，如果需要详细框架搭建，留言或QQ联系博主我</p>\n","excerpt":"<h4 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h4><p> 安装新版node，es7需要高版本node支持， 并且需要babel转换es7语法<br> async/await是异步流程控制更好的解决方案<br>    <code>.babelrc</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">  &#123;</div><div class=\"line\">\t&quot;presets&quot;: [&quot;es2015-node5&quot;],</div><div class=\"line\">\t&quot;plugins&quot;: [</div><div class=\"line\">\t\t&quot;transform-async-to-generator&quot;,</div><div class=\"line\">\t\t&quot;syntax-async-functions&quot;</div><div class=\"line\">\t]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>","more":"<p><code>入口index</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">require(&apos;babel-register&apos;);</div><div class=\"line\">require(&apos;./server/index.js&apos;)</div></pre></td></tr></table></figure></p>\n<h4 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h4><hr>\n<ul>\n<li>doc <code>数据库文件，项目文档</code><ul>\n<li>.doc</li>\n<li>.sql</li>\n</ul>\n</li>\n<li>backEnd <code>后台文件</code><ul>\n<li>Semantic UI <code>（样式框架）</code></li>\n<li>vue／angular <code>（mvc框架）</code></li>\n</ul>\n</li>\n<li>frontEnd <code>前端文件 vue/ng/react</code><ul>\n<li>app <code>原文件</code></li>\n<li>release <code>编译文件</code></li>\n<li>bower.json <code>引用</code></li>\n</ul>\n</li>\n<li>server <code>服务端文件</code><ul>\n<li>config <code>配置模块（数据库配置，环境配置）</code><ul>\n<li>index.js</li>\n</ul>\n</li>\n<li>controller <code>控制器，统一入口模块</code></li>\n<li>routers <code>路由文件</code><ul>\n<li>(user) <code>接口处理模块</code></li>\n<li>index.js <code>入口文件</code></li>\n</ul>\n</li>\n<li>codes <code>code编码模块</code><ul>\n<li>code.js</li>\n<li>index.js</li>\n</ul>\n</li>\n<li>models <code>数据库模型模块Sequelize</code></li>\n<li>services <code>业务模块，处理封装数据库models</code></li>\n<li>upload  <code>文件上传目录</code></li>\n<li>utils <code>工具类</code></li>\n<li>views <code>node模版引擎</code><ul>\n<li>handlebars</li>\n</ul>\n</li>\n<li>logs <code>日志模块</code></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"todo\"><a href=\"#todo\" class=\"headerlink\" title=\"todo\"></a>todo</h4><p>`中间件  session redis 缓存处理</p>\n<h3 id=\"package-json\"><a href=\"#package-json\" class=\"headerlink\" title=\"package.json\"></a>package.json</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  &quot;name&quot;: &quot;server&quot;,</div><div class=\"line\">  &quot;version&quot;: &quot;1.0.0&quot;,</div><div class=\"line\">  &quot;description&quot;: &quot;&quot;,</div><div class=\"line\">  &quot;main&quot;: &quot;index.js&quot;,</div><div class=\"line\">  &quot;scripts&quot;: &#123;</div><div class=\"line\">    &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  &quot;author&quot;: &quot;&quot;,</div><div class=\"line\">  &quot;license&quot;: &quot;ISC&quot;,</div><div class=\"line\">  &quot;dependencies&quot;: &#123;</div><div class=\"line\">    &quot;babel-plugin-syntax-async-functions&quot;: &quot;^6.13.0&quot;,</div><div class=\"line\">    &quot;babel-plugin-transform-async-to-generator&quot;: &quot;^6.24.1&quot;,</div><div class=\"line\">    &quot;babel-preset-es2015-node5&quot;: &quot;^1.2.0&quot;,</div><div class=\"line\">    &quot;babel-register&quot;: &quot;^6.24.1&quot;,</div><div class=\"line\">    &quot;colors&quot;: &quot;^1.1.2&quot;,</div><div class=\"line\">    &quot;fs&quot;: &quot;0.0.1-security&quot;,</div><div class=\"line\">    &quot;koa&quot;: &quot;^2.0.0-alpha.8&quot;,</div><div class=\"line\">    &quot;koa-body&quot;: &quot;^2.0.0&quot;,</div><div class=\"line\">    &quot;koa-logger&quot;: &quot;^2.0.1&quot;,</div><div class=\"line\">    &quot;koa-router&quot;: &quot;^7.1.1&quot;,</div><div class=\"line\">    &quot;koa-views&quot;: &quot;^6.0.2&quot;,</div><div class=\"line\">    &quot;mysql&quot;: &quot;^2.13.0&quot;,</div><div class=\"line\">    &quot;node.extend&quot;: &quot;^1.1.6&quot;,</div><div class=\"line\">    &quot;path&quot;: &quot;^0.12.7&quot;,</div><div class=\"line\">    &quot;sequelize&quot;: &quot;^3.30.4&quot;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"services模块入口\"><a href=\"#services模块入口\" class=\"headerlink\" title=\"services模块入口\"></a>services模块入口</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">const fs = require(&apos;fs&apos;)</div><div class=\"line\">const path = require(&apos;path&apos;)</div><div class=\"line\">const Sequelize = require(&apos;sequelize&apos;)</div><div class=\"line\">const env = process.env.NODE_ENV || &apos;development&apos;</div><div class=\"line\">const config = require(&apos;../config/index&apos;)[env]</div><div class=\"line\">const utils = require(&apos;../utils/index&apos;)</div><div class=\"line\">const sequelize = new Sequelize(config.database, config.username, config.password, config);</div><div class=\"line\"></div><div class=\"line\">const dbStorage = []</div><div class=\"line\">const modelRoot = process.cwd() + &apos;/models&apos;</div><div class=\"line\">const models = utils.getFiles(modelRoot)</div><div class=\"line\"></div><div class=\"line\">models.map(function(file)&#123;</div><div class=\"line\">    let model = sequelize.import(path.join(modelRoot,file))</div><div class=\"line\">    dbStorage[model.name] = model</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">module.exports = dbStorage</div></pre></td></tr></table></figure>\n<h4 id=\"控制器\"><a href=\"#控制器\" class=\"headerlink\" title=\"控制器\"></a>控制器</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">/*============================================================================</div><div class=\"line\"> * 控制器入口</div><div class=\"line\"> ============================================================================*/</div><div class=\"line\">const Koa = require(&apos;koa&apos;);</div><div class=\"line\">const router = require(&apos;../routers/index&apos;)</div><div class=\"line\">const app = new Koa();</div><div class=\"line\">const http = require(&apos;http&apos;)</div><div class=\"line\">const views = require(&apos;koa-views&apos;)</div><div class=\"line\">const colors = require(&apos;colors&apos;)</div><div class=\"line\">// const cors = require(&apos;koa-cors&apos;)</div><div class=\"line\">const config = require(&apos;../config&apos;)</div><div class=\"line\">const logger = require(&apos;koa-logger&apos;)</div><div class=\"line\">// 引入模版views</div><div class=\"line\">// app.use(views(__dirname + &apos;/views&apos;, &#123; extension: &apos;jade&apos; &#125;))</div><div class=\"line\">app.use(views( __dirname + &apos;/views&apos;, &#123;</div><div class=\"line\">    extension: &apos;hbs&apos;,</div><div class=\"line\">    map: &#123; hbs: &apos;handlebars&apos; &#125;</div><div class=\"line\">&#125;));</div><div class=\"line\">// 引入路由</div><div class=\"line\">app.use(router.routes())</div><div class=\"line\">\t.use(router.allowedMethods());</div><div class=\"line\">// 跨域</div><div class=\"line\">// app.use(cors())</div><div class=\"line\">// 日志</div><div class=\"line\">app.use(logger())</div><div class=\"line\">// 开启服务</div><div class=\"line\">let server = http.createServer(app.callback());</div><div class=\"line\">server.listen(config.base.port);</div><div class=\"line\">console.log(colors.red(&apos;服务已开启：端口&apos;+ config.base.port))</div></pre></td></tr></table></figure>\n<h4 id=\"路由入口文件\"><a href=\"#路由入口文件\" class=\"headerlink\" title=\"路由入口文件\"></a>路由入口文件</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">/*============================================================================</div><div class=\"line\"> * 接口路由入口</div><div class=\"line\"> ============================================================================*/</div><div class=\"line\">const colors = require(&apos;colors&apos;)</div><div class=\"line\">const fs = require(&apos;fs&apos;)</div><div class=\"line\">const path = require(&apos;path&apos;)</div><div class=\"line\">const Router = require(&apos;koa-router&apos;)</div><div class=\"line\">const router = new Router()</div><div class=\"line\">const utils = require(&apos;../utils&apos;)</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 遍历路由文件夹，注册路由</div><div class=\"line\"> * @type &#123;String&#125;</div><div class=\"line\"> */</div><div class=\"line\">let routesArray = utils.getFiles(__dirname)</div><div class=\"line\"></div><div class=\"line\">routesArray.map(function(item)&#123;</div><div class=\"line\">    let fileName = &apos;./&apos; + item</div><div class=\"line\">    if(fs.existsSync(path.resolve(__dirname, fileName)))&#123;</div><div class=\"line\">        let routesInstance = require(fileName)</div><div class=\"line\">        router.use(routesInstance.routes())</div><div class=\"line\">        \t.use(routesInstance.allowedMethods());</div><div class=\"line\">    &#125;else&#123;</div><div class=\"line\">        console.log(&apos;路由 ----&apos; + path.resolve(__dirname, fileName) + &apos;  not found&apos;)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">module.exports = router</div></pre></td></tr></table></figure>\n<h4 id=\"某路由文件\"><a href=\"#某路由文件\" class=\"headerlink\" title=\"某路由文件\"></a>某路由文件</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div></pre></td><td class=\"code\"><pre><div class=\"line\">const Router = require(&apos;koa-router&apos;)</div><div class=\"line\">const router = new Router()</div><div class=\"line\">const body = require(&apos;koa-body&apos;)()</div><div class=\"line\">const colors = require(&apos;colors&apos;)</div><div class=\"line\">const modules = require(process.cwd() + &apos;/services/index&apos;)</div><div class=\"line\">const codes = require(process.cwd() + &apos;/codes/index&apos;)</div><div class=\"line\">const utils = require(process.cwd() + &apos;/utils/index&apos;)</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 检查用户存在</div><div class=\"line\"> * @param  &#123;[type]&#125; userName [description]</div><div class=\"line\"> * @return &#123;[type]&#125;          [description]</div><div class=\"line\"> */</div><div class=\"line\">const checkUserExit = async (username) =&gt; &#123;</div><div class=\"line\">    if(!username)&#123;</div><div class=\"line\">        return</div><div class=\"line\">    &#125;</div><div class=\"line\">    return new Promise((resolve, reject) =&gt; &#123;</div><div class=\"line\">        modules.users.findAll(&#123;</div><div class=\"line\">            where: &#123;</div><div class=\"line\">                username: username,</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;).then((result)=&gt;&#123;</div><div class=\"line\">            if(result &amp;&amp; result.length &gt; 0)&#123;</div><div class=\"line\">                resolve(true)</div><div class=\"line\">            &#125;else&#123;</div><div class=\"line\">                resolve(false)</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;)</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">router.post(&apos;/login&apos;,body, async (ctx) =&gt; &#123;</div><div class=\"line\">    ctx.set(&apos;Access-Control-Allow-Method&apos;, &apos;POST&apos;);</div><div class=\"line\">    ctx.set(&apos;Access-Control-Allow-Origin&apos;, &apos;*&apos;)</div><div class=\"line\">    let username = ctx.request.body.username</div><div class=\"line\">    let password = ctx.request.body.password</div><div class=\"line\">    if(!username || !password)&#123;</div><div class=\"line\">        ctx.body = codes.set(&apos;2&apos;)</div><div class=\"line\">        return</div><div class=\"line\">    &#125;</div><div class=\"line\">    // 是否存在用户</div><div class=\"line\">    let isExit = await checkUserExit(username)</div><div class=\"line\">    let data = &#123;isExit:isExit&#125;</div><div class=\"line\"></div><div class=\"line\">    ctx.body = utils.extend(codes.set(&apos;0&apos;),data)</div><div class=\"line\"></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">router.get(&apos;/getUser/:id&apos;, async (ctx,next) =&gt; &#123;</div><div class=\"line\"></div><div class=\"line\">  let  id = ctx.params.id;</div><div class=\"line\"></div><div class=\"line\">  await modules.users.findAll(&#123;</div><div class=\"line\">        where: &#123;</div><div class=\"line\">            id: id,</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;).then((result)=&gt;&#123;</div><div class=\"line\">        let params = JSON.stringify(result)</div><div class=\"line\">        ctx.body = JSON.stringify(result)</div><div class=\"line\">  &#125;)</div><div class=\"line\"></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">module.exports = router</div></pre></td></tr></table></figure>\n<h4 id=\"utils\"><a href=\"#utils\" class=\"headerlink\" title=\"utils\"></a>utils</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">const fs = require(&apos;fs&apos;)</div><div class=\"line\">const path = require(&apos;path&apos;)</div><div class=\"line\">const colors = require(&apos;colors&apos;)</div><div class=\"line\">const utils = require(&apos;./utils&apos;)</div><div class=\"line\"></div><div class=\"line\">utils.prototype.getFiles = function(root)&#123;</div><div class=\"line\">    let fileArray = []</div><div class=\"line\">    const getDeepFiles = function(fileRoot,parentRoot)&#123;</div><div class=\"line\">        fs.readdirSync(fileRoot)</div><div class=\"line\">        .forEach(function (file) &#123;</div><div class=\"line\">            if(file == &apos;index.js&apos;)&#123;</div><div class=\"line\">                return</div><div class=\"line\">            &#125;</div><div class=\"line\">            let curPath = fileRoot + &apos;/&apos; + file</div><div class=\"line\">            if(fs.statSync(curPath).isDirectory())&#123;</div><div class=\"line\">                getDeepFiles(curPath,file)</div><div class=\"line\">            &#125;else&#123;</div><div class=\"line\">                if(parentRoot)&#123;</div><div class=\"line\">                    fileArray.push(parentRoot + &apos;/&apos; + file)</div><div class=\"line\">                &#125;else&#123;</div><div class=\"line\">                    fileArray.push(file)</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">    getDeepFiles(root)</div><div class=\"line\">    return fileArray</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上是部分文件显示，如果需要详细框架搭建，留言或QQ联系博主我</p>"},{"title":"nodejs模版引擎","date":"2017-04-08T07:45:37.000Z","from":"原","_content":"\n#### 1.ejs  （写法有点类jsp／php)\n\nNode 开源模板的选择很多，但推荐像我这样的老人去用 EJS，有 Classic ASP/PHP/JSP 的经验用起 EJS 来的确可以很自然，也就是说，你能够在 <%...%> 块中安排 JavaScript 代码，利用最传统的方式 <%=输出变量%>（另外 <%-输出变量是不会对 & 等符号进行转义的）\n<!--more-->\n```\n<% if (names.length) { %>  \n  <ul>  \n    <% names.forEach(function(name){ %>  \n      <li foo='<%= name + \"'\" %>'><%= name %></li>  \n    <% }) %>  \n  </ul>  \n<% } %>  \n```\n#### 2. jade\n\njade全新的\nJade有两点是超出传统模板技术的。\n##### 第一、简洁。\n注意，简洁并非单指更少的符号，而是看是否能match你的需要。Jade强制的缩进格式能凸显html的结构，而对于前端来说，最重要的任务恰恰是处理结构，而不像一般的html author那样是处理内容。反过来说，假如你的主要任务是处理内容，比如写作blog之类的，那你应该用wiki或者markdown之类的，而不应该用Jade。\n##### 第二、html-aware\n传统模板技术其实是通用模板，即模板引擎并不care你输出的是html还是其他格式的文本。而Jade专为HTML设计，因此可以做许多传统模板做不到的专门针对html的优化。举个几个简单的例子：\n>* 1. 决定如何输出属性（当属性赋值为null/false时不输出属性，为true时只需属性不需要值，这在传统模板里写起来很麻烦、代码难看易出错）\n>* 2. 自动产生well-formed结构（甚至可决定是否要输出结束标签，而传统模板理论上也做不到这点，除非引入额外的html parse或tidy）\n>* 3. 换行处理，避免产生额外的空白节点\n>* 4. 对输出的变量自动进行特殊字符的encode\n```\n!!!\nhtml\n    head\n        title #{title}\n        meta(charset=\"UTF-8\")\n    body\n        div.description #{description}\n        ul\n            - each data in datas\n                li.item(id='item_'+data.index)\n                    span= data.time\n                    a.art(href=data.url)= data.title\n\n```\n#### 3.handlebars\n```\n<!doctype html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>{{title}} - Page Test</title>\n</head>\n<body>\n    <div class=\"description\">{{description}}</div>\n    <ul>\n{{#datas}}\n        <li class=\"item\" id=\"item_{{index}}\"><span>{{time}}</span><a href=\"{{url}}\" class=\"art\">{{title}}</a></li>\n{{/datas}}\n    </ul>\n</body>\n</html>\n```\n\n#### 总结：\nJade 很简洁，表达能力也很强，但不够直观，学习和适应成本不低。\nJade 处理模板时计算量大，在没有缓存的情况下性能低是肯定的。\nJade 对于一个不擅长前端、喜欢Bootstrap和Ctrl c + v 实在不能提高开发效， 性能瓶颈\n          Ejs 适用于写JSP/PHP后台的人使用，上手快\n          Handlebars 更接近前端的模版引擎，使用方便顺手\n","source":"_posts/nodejs模版引擎.md","raw":"---\ntitle: nodejs模版引擎\ndate: 2017-04-08 15:45:37\ntags: \"node\"\ncategories: [\"node\",\"node模版引擎\"]\nfrom: '原'\n---\n\n#### 1.ejs  （写法有点类jsp／php)\n\nNode 开源模板的选择很多，但推荐像我这样的老人去用 EJS，有 Classic ASP/PHP/JSP 的经验用起 EJS 来的确可以很自然，也就是说，你能够在 <%...%> 块中安排 JavaScript 代码，利用最传统的方式 <%=输出变量%>（另外 <%-输出变量是不会对 & 等符号进行转义的）\n<!--more-->\n```\n<% if (names.length) { %>  \n  <ul>  \n    <% names.forEach(function(name){ %>  \n      <li foo='<%= name + \"'\" %>'><%= name %></li>  \n    <% }) %>  \n  </ul>  \n<% } %>  \n```\n#### 2. jade\n\njade全新的\nJade有两点是超出传统模板技术的。\n##### 第一、简洁。\n注意，简洁并非单指更少的符号，而是看是否能match你的需要。Jade强制的缩进格式能凸显html的结构，而对于前端来说，最重要的任务恰恰是处理结构，而不像一般的html author那样是处理内容。反过来说，假如你的主要任务是处理内容，比如写作blog之类的，那你应该用wiki或者markdown之类的，而不应该用Jade。\n##### 第二、html-aware\n传统模板技术其实是通用模板，即模板引擎并不care你输出的是html还是其他格式的文本。而Jade专为HTML设计，因此可以做许多传统模板做不到的专门针对html的优化。举个几个简单的例子：\n>* 1. 决定如何输出属性（当属性赋值为null/false时不输出属性，为true时只需属性不需要值，这在传统模板里写起来很麻烦、代码难看易出错）\n>* 2. 自动产生well-formed结构（甚至可决定是否要输出结束标签，而传统模板理论上也做不到这点，除非引入额外的html parse或tidy）\n>* 3. 换行处理，避免产生额外的空白节点\n>* 4. 对输出的变量自动进行特殊字符的encode\n```\n!!!\nhtml\n    head\n        title #{title}\n        meta(charset=\"UTF-8\")\n    body\n        div.description #{description}\n        ul\n            - each data in datas\n                li.item(id='item_'+data.index)\n                    span= data.time\n                    a.art(href=data.url)= data.title\n\n```\n#### 3.handlebars\n```\n<!doctype html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>{{title}} - Page Test</title>\n</head>\n<body>\n    <div class=\"description\">{{description}}</div>\n    <ul>\n{{#datas}}\n        <li class=\"item\" id=\"item_{{index}}\"><span>{{time}}</span><a href=\"{{url}}\" class=\"art\">{{title}}</a></li>\n{{/datas}}\n    </ul>\n</body>\n</html>\n```\n\n#### 总结：\nJade 很简洁，表达能力也很强，但不够直观，学习和适应成本不低。\nJade 处理模板时计算量大，在没有缓存的情况下性能低是肯定的。\nJade 对于一个不擅长前端、喜欢Bootstrap和Ctrl c + v 实在不能提高开发效， 性能瓶颈\n          Ejs 适用于写JSP/PHP后台的人使用，上手快\n          Handlebars 更接近前端的模版引擎，使用方便顺手\n","slug":"nodejs模版引擎","published":1,"updated":"2017-07-27T02:10:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5naxw4d000qfcxe26c89kc4","content":"<h4 id=\"1-ejs-（写法有点类jsp／php\"><a href=\"#1-ejs-（写法有点类jsp／php\" class=\"headerlink\" title=\"1.ejs  （写法有点类jsp／php)\"></a>1.ejs  （写法有点类jsp／php)</h4><p>Node 开源模板的选择很多，但推荐像我这样的老人去用 EJS，有 Classic ASP/PHP/JSP 的经验用起 EJS 来的确可以很自然，也就是说，你能够在 &lt;%…%&gt; 块中安排 JavaScript 代码，利用最传统的方式 &lt;%=输出变量%&gt;（另外 &lt;%-输出变量是不会对 &amp; 等符号进行转义的）<br><a id=\"more\"></a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;% if (names.length) &#123; %&gt;  </div><div class=\"line\">  &lt;ul&gt;  </div><div class=\"line\">    &lt;% names.forEach(function(name)&#123; %&gt;  </div><div class=\"line\">      &lt;li foo=&apos;&lt;%= name + &quot;&apos;&quot; %&gt;&apos;&gt;&lt;%= name %&gt;&lt;/li&gt;  </div><div class=\"line\">    &lt;% &#125;) %&gt;  </div><div class=\"line\">  &lt;/ul&gt;  </div><div class=\"line\">&lt;% &#125; %&gt;</div></pre></td></tr></table></figure></p>\n<h4 id=\"2-jade\"><a href=\"#2-jade\" class=\"headerlink\" title=\"2. jade\"></a>2. jade</h4><p>jade全新的<br>Jade有两点是超出传统模板技术的。</p>\n<h5 id=\"第一、简洁。\"><a href=\"#第一、简洁。\" class=\"headerlink\" title=\"第一、简洁。\"></a>第一、简洁。</h5><p>注意，简洁并非单指更少的符号，而是看是否能match你的需要。Jade强制的缩进格式能凸显html的结构，而对于前端来说，最重要的任务恰恰是处理结构，而不像一般的html author那样是处理内容。反过来说，假如你的主要任务是处理内容，比如写作blog之类的，那你应该用wiki或者markdown之类的，而不应该用Jade。</p>\n<h5 id=\"第二、html-aware\"><a href=\"#第二、html-aware\" class=\"headerlink\" title=\"第二、html-aware\"></a>第二、html-aware</h5><p>传统模板技术其实是通用模板，即模板引擎并不care你输出的是html还是其他格式的文本。而Jade专为HTML设计，因此可以做许多传统模板做不到的专门针对html的优化。举个几个简单的例子：</p>\n<blockquote>\n<ul>\n<li><ol>\n<li>决定如何输出属性（当属性赋值为null/false时不输出属性，为true时只需属性不需要值，这在传统模板里写起来很麻烦、代码难看易出错）</li>\n</ol>\n</li>\n<li><ol>\n<li>自动产生well-formed结构（甚至可决定是否要输出结束标签，而传统模板理论上也做不到这点，除非引入额外的html parse或tidy）</li>\n</ol>\n</li>\n<li><ol>\n<li>换行处理，避免产生额外的空白节点</li>\n</ol>\n</li>\n<li><ol>\n<li>对输出的变量自动进行特殊字符的encode<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">!!!</div><div class=\"line\">html</div><div class=\"line\">    head</div><div class=\"line\">        title #&#123;title&#125;</div><div class=\"line\">        meta(charset=&quot;UTF-8&quot;)</div><div class=\"line\">    body</div><div class=\"line\">        div.description #&#123;description&#125;</div><div class=\"line\">        ul</div><div class=\"line\">            - each data in datas</div><div class=\"line\">                li.item(id=&apos;item_&apos;+data.index)</div><div class=\"line\">                    span= data.time</div><div class=\"line\">                    a.art(href=data.url)= data.title</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ul>\n</blockquote>\n<h4 id=\"3-handlebars\"><a href=\"#3-handlebars\" class=\"headerlink\" title=\"3.handlebars\"></a>3.handlebars</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!doctype html&gt;</div><div class=\"line\">&lt;html&gt;</div><div class=\"line\">&lt;head&gt;</div><div class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class=\"line\">    &lt;title&gt;&#123;&#123;title&#125;&#125; - Page Test&lt;/title&gt;</div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\">    &lt;div class=&quot;description&quot;&gt;&#123;&#123;description&#125;&#125;&lt;/div&gt;</div><div class=\"line\">    &lt;ul&gt;</div><div class=\"line\">&#123;&#123;#datas&#125;&#125;</div><div class=\"line\">        &lt;li class=&quot;item&quot; id=&quot;item_&#123;&#123;index&#125;&#125;&quot;&gt;&lt;span&gt;&#123;&#123;time&#125;&#125;&lt;/span&gt;&lt;a href=&quot;&#123;&#123;url&#125;&#125;&quot; class=&quot;art&quot;&gt;&#123;&#123;title&#125;&#125;&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">&#123;&#123;/datas&#125;&#125;</div><div class=\"line\">    &lt;/ul&gt;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure>\n<h4 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h4><p>Jade 很简洁，表达能力也很强，但不够直观，学习和适应成本不低。<br>Jade 处理模板时计算量大，在没有缓存的情况下性能低是肯定的。<br>Jade 对于一个不擅长前端、喜欢Bootstrap和Ctrl c + v 实在不能提高开发效， 性能瓶颈<br>          Ejs 适用于写JSP/PHP后台的人使用，上手快<br>          Handlebars 更接近前端的模版引擎，使用方便顺手</p>\n","excerpt":"<h4 id=\"1-ejs-（写法有点类jsp／php\"><a href=\"#1-ejs-（写法有点类jsp／php\" class=\"headerlink\" title=\"1.ejs  （写法有点类jsp／php)\"></a>1.ejs  （写法有点类jsp／php)</h4><p>Node 开源模板的选择很多，但推荐像我这样的老人去用 EJS，有 Classic ASP/PHP/JSP 的经验用起 EJS 来的确可以很自然，也就是说，你能够在 &lt;%…%&gt; 块中安排 JavaScript 代码，利用最传统的方式 &lt;%=输出变量%&gt;（另外 &lt;%-输出变量是不会对 &amp; 等符号进行转义的）<br>","more":"<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;% if (names.length) &#123; %&gt;  </div><div class=\"line\">  &lt;ul&gt;  </div><div class=\"line\">    &lt;% names.forEach(function(name)&#123; %&gt;  </div><div class=\"line\">      &lt;li foo=&apos;&lt;%= name + &quot;&apos;&quot; %&gt;&apos;&gt;&lt;%= name %&gt;&lt;/li&gt;  </div><div class=\"line\">    &lt;% &#125;) %&gt;  </div><div class=\"line\">  &lt;/ul&gt;  </div><div class=\"line\">&lt;% &#125; %&gt;</div></pre></td></tr></table></figure></p>\n<h4 id=\"2-jade\"><a href=\"#2-jade\" class=\"headerlink\" title=\"2. jade\"></a>2. jade</h4><p>jade全新的<br>Jade有两点是超出传统模板技术的。</p>\n<h5 id=\"第一、简洁。\"><a href=\"#第一、简洁。\" class=\"headerlink\" title=\"第一、简洁。\"></a>第一、简洁。</h5><p>注意，简洁并非单指更少的符号，而是看是否能match你的需要。Jade强制的缩进格式能凸显html的结构，而对于前端来说，最重要的任务恰恰是处理结构，而不像一般的html author那样是处理内容。反过来说，假如你的主要任务是处理内容，比如写作blog之类的，那你应该用wiki或者markdown之类的，而不应该用Jade。</p>\n<h5 id=\"第二、html-aware\"><a href=\"#第二、html-aware\" class=\"headerlink\" title=\"第二、html-aware\"></a>第二、html-aware</h5><p>传统模板技术其实是通用模板，即模板引擎并不care你输出的是html还是其他格式的文本。而Jade专为HTML设计，因此可以做许多传统模板做不到的专门针对html的优化。举个几个简单的例子：</p>\n<blockquote>\n<ul>\n<li><ol>\n<li>决定如何输出属性（当属性赋值为null/false时不输出属性，为true时只需属性不需要值，这在传统模板里写起来很麻烦、代码难看易出错）</li>\n</ol>\n</li>\n<li><ol>\n<li>自动产生well-formed结构（甚至可决定是否要输出结束标签，而传统模板理论上也做不到这点，除非引入额外的html parse或tidy）</li>\n</ol>\n</li>\n<li><ol>\n<li>换行处理，避免产生额外的空白节点</li>\n</ol>\n</li>\n<li><ol>\n<li>对输出的变量自动进行特殊字符的encode<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">!!!</div><div class=\"line\">html</div><div class=\"line\">    head</div><div class=\"line\">        title #&#123;title&#125;</div><div class=\"line\">        meta(charset=&quot;UTF-8&quot;)</div><div class=\"line\">    body</div><div class=\"line\">        div.description #&#123;description&#125;</div><div class=\"line\">        ul</div><div class=\"line\">            - each data in datas</div><div class=\"line\">                li.item(id=&apos;item_&apos;+data.index)</div><div class=\"line\">                    span= data.time</div><div class=\"line\">                    a.art(href=data.url)= data.title</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ul>\n</blockquote>\n<h4 id=\"3-handlebars\"><a href=\"#3-handlebars\" class=\"headerlink\" title=\"3.handlebars\"></a>3.handlebars</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!doctype html&gt;</div><div class=\"line\">&lt;html&gt;</div><div class=\"line\">&lt;head&gt;</div><div class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class=\"line\">    &lt;title&gt;&#123;&#123;title&#125;&#125; - Page Test&lt;/title&gt;</div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\">    &lt;div class=&quot;description&quot;&gt;&#123;&#123;description&#125;&#125;&lt;/div&gt;</div><div class=\"line\">    &lt;ul&gt;</div><div class=\"line\">&#123;&#123;#datas&#125;&#125;</div><div class=\"line\">        &lt;li class=&quot;item&quot; id=&quot;item_&#123;&#123;index&#125;&#125;&quot;&gt;&lt;span&gt;&#123;&#123;time&#125;&#125;&lt;/span&gt;&lt;a href=&quot;&#123;&#123;url&#125;&#125;&quot; class=&quot;art&quot;&gt;&#123;&#123;title&#125;&#125;&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">&#123;&#123;/datas&#125;&#125;</div><div class=\"line\">    &lt;/ul&gt;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure>\n<h4 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h4><p>Jade 很简洁，表达能力也很强，但不够直观，学习和适应成本不低。<br>Jade 处理模板时计算量大，在没有缓存的情况下性能低是肯定的。<br>Jade 对于一个不擅长前端、喜欢Bootstrap和Ctrl c + v 实在不能提高开发效， 性能瓶颈<br>          Ejs 适用于写JSP/PHP后台的人使用，上手快<br>          Handlebars 更接近前端的模版引擎，使用方便顺手</p>"},{"title":"vue知识点","date":"2017-04-27T11:36:23.000Z","_content":"\n#### vue是什么？\n\nvue也是一个数据驱动框架，做spa页面的\nvue如果不做页面可以当做一个单独使用的js库，做双向数据绑定用\nVue的核心库只关注视图层,但是vue并不只关注视图，和angular一样也有指令，过滤器这些东西\nvue有非常强大的单文件组件\n就是css+html+js都写在一个.vue文件中，这样定义的组件很简洁，清晰，组件化分的很彻底\n而angular中的js文件只能写js\n虽然react中可以写css-in-js，但是缺乏选择器功能，即便可以在js中引入css文件，但还是不方便\nvue融合了react和angular的优点，并且解决了react和angualr的痛点\n<!--more-->\n\n#### vue学习地址和技术栈\n\nVue2.0中文网：\nvue全家桶变为vue2.0+vue-router+fetch+vuex\n我们下文中所出现的vue都指代vue2.0\nvue和其他框架的对比\n\nvue比市面上的其他框架功能更完善，性能更高效\n#### vue快速开始\n\n用vue-cli开始\n\n```\n# 全局安装 vue-cli\n$ npm install --global vue-cli\n# 创建一个基于 webpack 模板的新项目\n$  vue init webpack my-project\n# 安装依赖，走你\n$ cd my-project\n$ npm install\n$ npm run dev\n```\n你只需要关注你配置的东西就可以了，不需要关注webpack的配置项，因为webpack的配置很难，很多人不会，也是为了简便开发\n自己创建Vue的开发环境\n\n#### 准备工作\n\n升级webstorm到最新版本，老版本对.vue文件的开发是有bug的\n下载webstorm为Vue提供的插件vue-for-idea，这个插件可以让webstorm支持以.vue结尾的文件能够运行\n下载vuenpm install vue -save\n下载编译模块npm install vue-template-compiler -save\nsrc/js文件中创建main.js\n```\nimport Vue from 'vue'\nimport AppContainer from '../containers/AppContainer'\n\nconst app = new Vue({\n    render: h => h(AppContainer),\n}).$mount('#app')\n\n\n// new Vue({\n//     el:'#app',\n//     render: h => h(App)\n// })\n```\n在src/container中创建AppContainer.vue文件\n```\n<template>\n    <div>\n        {{msg}}\n    </div>\n</template>\n<style>\n    body{\n        background-color:#ff0000;\n    }\n</style>\n<script>\n    export default{\n        data(){\n            return{\n                msg:'hello vue'\n            }\n        }\n    }\n</script>\n```\n当你第一次创建.vue文件的时候IDE会问你用什么语法去解析，你选择html语法\n接下来就可以直接运行npm run develop了\n你可以去google中搜索vue-devtools下载并安装，用于帮你监听组件的data属性变化\n#### vue中的基础知识点\n\nVue实例\n\n#####  属性与方法\n\n我们自定义的一些数据和方法是要绑定到实例的不同属性上面去的\n例如数据都要绑定要data属性，方法都要绑定到methods方法\n实例上的data和methods里面的key值会自动挂载到vue实例上，我们管他们叫动态属性，获取方式直接使实例.动态属性名\nvue实例上的实例属性要通过实例.$实例属性名获取\n在vue实例里面用this，this指向的是vue实例\n可以通过this.a去获取动态属性\n可以通过this.$data去获取实例属性\n实例上有一个$watch方法可以监听data属性里面的数据的变化，data一变会自动触发监听事件的执行\n```\nvar data = {a: 1}\n    const app = new Vue({\n        // 和数据相关的都挂载到data上\n        data: data,\n        // 和方法相关的都挂载到methods上\n        methods: {\n            // this和$的使用\n            func1: function () {\n                console.log(this.a);\n                console.log(this.$data.a);\n            },\n            changeData:function () {\n                this.a=2\n            }\n        }\n    })\n\n    // 先监听再改变\n    app.$watch('a', function (newVal, oldVal) {\n        console.log(newVal)\n        console.log(oldVal)\n    })\n    // 值改变之后会自动执行监听方法\n    // data的值是可以直接改变的，和react的setState方法不一样，因为vue里面用了set和get方法，可以起到自动监听的作用\n    app.a=3\n\n\n    // 动态属性和实例属性\n//    console.log(app)\n//    console.log(app.a)\n//    console.log(app.$data.a)\n```\n##### 实例生命周期\n\n和react的生命周期基本思想是一样的\n只不过react中是监听props和state属性的变化\n而在vue中是只监听data属性的变化\nvue中的生命周期函数要比react中的方法多\n这些生命周期方法只能在spa应用中起作用，单独作为双向数据绑定库无法生效\n`vue生命周期图`\n![](https://static.oschina.net/uploads/img/201704/24103726_vz9U.png)\n\n##### 模板语法\n\n就是如何在.vue文件的template标签中书写内容\n\nv-once指令只会执行一次性地插值，当数据改变时，插值处的内容不会更新。但请留心这会影响到该节点上所有的数据绑定：\nv-html会按照html规则去解析内容\n我们在为标签的属性赋值的时候不能Mustache语法，我们要用v-bind指令\nv-bind绑定的属性必须是data属性里面定义的值，如果想写固定的值加单引号\n```\n// 错误的写法\n<div id=\"{{id}}\"></div>\n// 正确的写法\n<div v-bind:id=\"id\"></div>\n```\n在Mustache中可以处理一些简单的js表达式，Mustache中的属性本身有什么方法，在里面也是可以直接使用的\n```\n{{ number + 1 }}\n{{ ok ? 'YES' : 'NO' }}\n{{ message.split('').reverse().join('') }}\n<div v-bind:id=\"'list-' + id\"></div>\n```\n在Mustache中可以使用自定义过滤器，也可以多过滤器串联。但是过滤器不能用在v-bind中，如果想实现相同的效果在v-bind中我们要用计算属性\n```\n{{ message | capitalize }}\n\n{{ message | filterA | filterB }}\n\nnew Vue({\n  // ...\n  filters: {\n    capitalize: function (value) {\n      if (!value) return ''\n      value = value.toString()\n      return value.charAt(0).toUpperCase() + value.slice(1)\n    }\n  }\n})\n```\n在dom标签中可以使用指令，如v-if，v-for\n```\n<a v-on:click=\"doSomething\">\n```\n在dom的事件中可以使用修饰符去帮你简化一些操作\n```\n<form v-on:submit.prevent=\"onSubmit\"></form>\n```\nv-bind和v-on在模板语法中可以缩写\n```\n//完整语法\n<a v-bind:href=\"url\"></a>\n//缩写\n<a :href=\"url\"></a>\n//完整语法\n<a v-on:click=\"doSomething\"></a>\n// 缩写\n<a @click=\"doSomething\"></a>\n```\n\n\n#### 计算属性\n\n计算属性可以处理模板语法中的复杂业务逻辑，跟Mustache语法比\n计算属性 vs methods\n\n我们看到计算属性和methods的效果基本你一样，那么他们的区别是什么？\n计算属性的依赖如果没有发生变化，当你再次调用计算属性的时候，能够立即返回上次缓存的计算值，而不需要从新执行计算属性的方法\n而方法需要从新执行方法体\n样例\n```\n<template>\n    <div>\n        <p>Original message: \"{{ message }}{{name}}\"</p>\n        <p>Computed reversed message: \"{{ reversedMessage }}\"</p>\n        <p>Computed reversed message: \"{{ reverseMessage() }}\"</p>\n    </div>\n</template>\n<style>\n    body{\n        background-color:#ff0000;\n    }\n</style>\n<script>\n    export default{\n        data(){\n            return{\n                message: 'Hello',\n                name:'a'\n            }\n        },\n        mounted(){\n            this.name=\"b\"\n        },\n        computed: {\n            reversedMessage: function () {\n                console.log('计算属性被调用了')\n                return this.message.split('').reverse().join('')\n            }\n        },\n        methods: {\n            reverseMessage: function () {\n                console.log('方法被执行了')\n                return this.message.split('').reverse().join('')\n            }\n        }\n\n    }\n</script>\n```\n计算属性 vs watch\n\nwatch方法每次只能监听一个data值的变化\n而计算属性可以同时监听多个data值的变化\n用计算属性可以简化watch中重复的代码\n```\n<!--页面-->\n<div id=\"demo\">{{ fullName }}</div>\n  //watch写法\n  var vm = new Vue({\n    el: '#demo',\n    data: {\n      firstName: 'Foo',\n      lastName: 'Bar',\n      fullName: 'Foo Bar'\n    },\n    watch: {\n      firstName: function (val) {\n        this.fullName = val + ' ' + this.lastName\n      },\n      lastName: function (val) {\n        this.fullName = this.firstName + ' ' + val\n      }\n    }\n  })\n  //计算属性的写法\n  //本质是你要获取全名\n  var vm = new Vue({\n    el: '#demo',\n    data: {\n      firstName: 'Foo',\n      lastName: 'Bar'\n    },\n    computed: {\n      fullName: function () {\n        return this.firstName + ' ' + this.lastName\n      }\n    }\n  })\n```\n计算setter\n\n计算属性默认是只有getter的，那么data属性里面你的值发生改变了，计算属性要从新执行\n而setter的作用是调用计算属性的时候给一个初始值，那么data属性里面的值也会跟着做相应的改变\n```\n// 接上面的代码段\ncomputed: {\n  fullName: {\n    // getter\n    get: function () {\n      return this.firstName + ' ' + this.lastName\n    },\n    // setter\n    set: function (newValue) {\n      var names = newValue.split(' ')\n      this.firstName = names[0]\n      this.lastName = names[names.length - 1]\n    }\n  }\n}\n```\nvue实例上的观察watch还是很有用的，在进行执行异步操作或昂贵操作时，我们要用watch这个实例属性\n因为你不要忘记计算属性出现的原因是为了解决mustache语法中有过多的逻辑操作问题，它只能进行一些小型操作的内容\nClass与Style绑定\n\n绑定要用v-bind:class和:bind:style\nv-bind:class指令可以与普通的class属性共存\n绑定的时候可以给对象，可以个数组，还可以有条件判断和三元表达式\n条件渲染\n\nv-if和v-else只能控制一个标签的渲染，而且v-else要紧跟着v-if\n如果想要控制一部分标签的渲染，需要用<template>标签包裹，v-if作用在template标签上\nv-show也可以控制标签的显示隐藏，不过只是简单的切换样式\nv-show的元素会始终渲染并保持在 DOM 中，v-if的元素会被移除\n注意 v-show 不支持 <template> 语法\nv-if是惰性的，只有在条件第一次为true的时候才进行局部渲染吧\nv-if有更高的切换消耗，v-show有更高的初始渲染消耗。因此如果需要频繁切换使用v-show较好，如果在运行时条件不大可能改变则使用v-if较好。\n列表渲染\n\nv-for是vue中做循环的，值可以给数组，对象，数值三种类型\n可以用of替换in\n如果想循环渲染一部分标签，要用template标签包裹，v-for作用在template标签上\n在循环渲染引入的自定义组件的时候要手动为组件传递item的属性值\n```\n    <my-components\n      is=\"todo-item\"\n      v-for=\"(item, index) in todos\"\n      v-bind:title=\"item\"\n      v-on:remove=\"item.splice(index, 1)\"\n    >\n    </my-components>\n```\n在循环渲染的时候要动态的绑定v-bind:key,这样可以提升vue的渲染效率\nVue 包含一组观察数组的变异方法，只要调用它们将会触发视图更新，并且改变了原数组\npush() pop() shift() unshift() splice() sort() reverse()\n重塑数组不会改变原来的数据，而是返回一个改变之后的新数据\nfilter(), concat(), slice()\n重塑数组一般是赋值用，这样才能触发vue的重新渲染，而你并不需要担心性能问题，因为vue会智能的重用数组\n由于JavaScript 的限制，Vue不能检测以下变动的数组：\n当你直接设置一个项的索引时，例如： vm.items[indexOfItem] = newValue\n用Vue.set解决\n当你修改数组的长度时，例如： vm.items.length = newLength\n用splice解决\nv-for结合计属性或者methods时可以做数据的过滤和排序\n```\n// <li v-for=\"n in evenNumbers\">{{ n }}</li>\n\ndata: {\n  numbers: [ 1, 2, 3, 4, 5 ]\n},\ncomputed: {\n  evenNumbers: function () {\n    return this.numbers.filter(function (number) {\n      return number % 2 === 0\n    })\n  }\n}\n```\n#### 事件处理器\n\n在v-on:click的时候想既传递参数又想传递事件对象，那么你需要手动传入$event参数\n```\n<button v-on:click=\"warn('Form cannot be submitted yet.', $event)\">Submit</button>\nmethods: {\n  warn: function (message, event) {\n    // 现在我们可以访问原生事件对象\n    if (event) event.preventDefault()\n    alert(message)\n  }\n}\n```\n#### 常用事件修饰符\n```\n<!-- 阻止单击事件冒泡 -->\n<a v-on:click.stop=\"doThis\"></a>\n<!-- 提交事件不再重载页面 -->\n<form v-on:submit.prevent=\"onSubmit\"></form>\n<!-- 修饰符可以串联  -->\n<a v-on:click.stop.prevent=\"doThat\"></a>\n<!-- 只有修饰符 -->\n<form v-on:submit.prevent></form>\n<!-- 添加事件侦听器时使用时间捕获模式 -->\n<div v-on:click.capture=\"doThis\">...</div>\n<!-- 只当事件在该元素本身（而不是子元素）触发时触发回调 -->\n<div v-on:click.self=\"doThat\">...</div>\n<!-- the click event will be triggered at most once -->\n<a v-on:click.once=\"doThis\"></a>\n```\n\n#### 常见的按键修饰符\n```\n<!-- 只有在 keyCode 是 13 时调用 vm.submit() -->\n<input v-on:keyup.13=\"submit\">\n<!-- 同上 -->\n<input v-on:keyup.enter=\"submit\">\n<!-- 缩写语法 -->\n<input @keyup.enter=\"submit\">\n\n<!--全部的按键别名：-->\n\n    enter\n    tab\n    delete (捕获 “删除” 和 “退格” 键)\n    esc\n    space\n    up\n    down\n    left\n    right\n    ctrl\n    alt\n    shift\n    meta\n通过全局 config.keyCodes自定义按键修饰符别名,记住要在new新实例之前注册\n// 可以使用 v-on:keyup.f1\nVue.config.keyCodes.f1 = 112\n```\n#### 表单控件绑定\n\n表单的双向绑定用v-model指令\n在文本区域插值<textarea></textarea>并不会生效，应用v-model来代替\n单个复选按钮绑定的是选中状态，多个复选按钮绑定的是值\n列表没有value值绑定的是标签内容，有value值绑定的就是value值\n如果想让表单的value属性绑定到Vue实例的动态属性上，需要用v-bind:value绑定\n```\n<input type=\"radio\" v-model=\"pick\" v-bind:value=\"a\">\n```\n.lazy修饰符可以实现单向数据绑定\n```\n<!-- 在 \"change\" 而不是 \"input\" 事件中更新 -->\n<input v-model.lazy=\"msg\" >\n```\n组件\n\n组件可以扩展 HTML 元素，封装可重用的代码。在较高层面上，组件是自定义元素， Vue.js 的编译器为它添加特殊功能。在有些情况下，组件也可以是原生 HTML 元素的形式，以 is 特性扩展。\n组件是类似于angualr中自定义指令，是vue中的一种自定义标签\n相当于react中的通用组件，高可复用性的（例如：列表，按钮，等待器）\n组件的使用\n\n#### 全局注册组件\n\n全局组件的定义一定要在创建根实例之前\n在全局注册的组件可以在子组件的页面中随意使用\n```\nVue.component('soupfree', {\n        template: '<div>汤免费</div>'\n    })\n\n    const app = new Vue({\n        el:'#example'\n    })\n```\n##### 局部注册组件\n\n在要使用的组价中增加components属性，注册引入的组件并改名，之后才可以在html代码中使用\n一般局部注册的组件都是通过.vue文件实现的\n```\n<template>\n    <div>\n       姓名：汤免费，年龄：{{age}},性别：{{genderSex}}\n    </div>\n</template>\n<style scope>\n    div{\n        background-color:orange;\n    }\n</style>\n<script>\n    export default{\n        data(){\n            return{\n\n            }\n        },\n        props:['age','genderSex']\n    }\n</script>\n<template>\n    <div>\n        <soup-free></soup-free>\n        {{msg}}\n    </div>\n</template>\n<style>\n    body{\n        background-color:#ff0000;\n    }\n</style>\n<script>\n    import soupfree from '../components/soupfree.vue'\n    export default{\n        data(){\n            return{\n                msg:'hello vue'\n            }\n        },\n        components:{\n            'soup-free':soupfree\n        }\n    }\n</script>\n```\n##### Dom模板解析问题\n\n当你在一些特殊标签如table，ul，ol，select中使用自定义组件的时候会有一些限制\n\n例如\n```\n<table>\n     <my-row>...</my-row>\n</table>\n```\n因为Vue只有在浏览器解析和标准化HTML后才能获取模版内容\n再准确的说也就是用Vue.component方法自定义的组件\nis特性可以解决这个问题\n```\n  <table>\n    <tr is=\"my-row\"></tr>\n  </table>\n```\n应当注意，如果您使用来自以下来源之一的字符串模板，这些限制将不适用：\n```\n<script type=\"text/x-template\">\n```\n因为这里面的代码是内连载页面中的\nJavaScript内联模版字符串\n这个就是template属性\n.vue 组件\n在webpack构建的时候就已经处理了组件内容为html了\n因此，有必要的话请使用字符串模版。\n☆在自定义组件中data属性必须是函数形式☆\n\n也就是在Vue.component中和.vue文件中的data属性\n如果是父子组件，那么父组件向子组件传递参数用props,子组件向父组件传递参数用$emit广播\nprops属性\n\n参数在传递的过程中，父组件传递参数用kebab-case（短横线隔开），在子组件接收的时候用camelCase\n如果传递的属性来自父组件的data属性，也就是向子组件传递动态属性那么需要用v-bind去传递\n如何传递的属性类型是数值型，那么也需要用v-bind去传递把\n<!-- 传递实际的数字 -->\n<comp v-bind:some-prop=\"1\"></comp>\n☆注意在JavaScript中对象和数组是引用类型，指向同一个内存空间，如果prop是一个对象或数组，在子组件内部改变它会影响父组件的状态。\n注意一般情况下不要在子组件中改变父组件中传递过来的props，但是有两种特殊情况会改变\n我们在传递属性的时候可以做属性校验\n当prop验证失败了,Vue将拒绝在子组件上设置此值，如果使用的是开发版本会抛出一条警告。\n自定义事件\n\n用v-on去绑定自定义事件\n使用$on(eventName)监听事件\n使用$emit(eventName)触发事件\n在自定义组件上是不可以用v-model指令，但是这个效果可以通过自定义组件在内部用自定义事件模拟实现\n```\nVue.component('currency-input', {\n  template: '\\\n    <span>\\\n      $\\\n      <input\\\n        ref=\"input\"\\\n        v-bind:value=\"value\"\\\n        v-on:input=\"updateValue($event.target.value)\"\\\n      >\\\n    </span>\\\n  ',\n  props: ['value'],\n  methods: {\n    // 不是直接更新值，而是使用此方法来对输入值进行格式化和位数限制\n    updateValue: function (value) {\n      var formattedValue = value\n        // 删除两侧的空格符\n        .trim()\n        // 保留 2 小数位\n        .slice(0, value.indexOf('.') + 3)\n      // 如果值不统一，手动覆盖以保持一致\n      if (formattedValue !== value) {\n        this.$refs.input.value = formattedValue\n      }\n      // 通过 input 事件发出数值\n      this.$emit('input', Number(formattedValue))\n    }\n  }\n})\n```\n兄弟组件之间的通信可以通过bus中央事件总线实现\n但是更复杂的数据通信最好还是用vuex\n```\n// 在根组件中注册bus属性\nconst app = new Vue({\n    data:{\n        bus:new Vue()\n    },\n    render: h => h(AppContainer),\n}).$mount('#app')\n// 在子组件中使用\nthis.$root.bus.$emit('eventName',2323)\n```\nslot分发\n\n在自定义组件使用的时候，如果页面中有内容，又想让内容在自定义组件中使用，我们需要养slot标签\nslot标签在一个html标签中只能出现一次\n作用域插槽是一种特殊类型的插槽，用作使用一个（能够传递数据到）可重用模板替换已渲染元素。\n通俗的说就是子组件里面的数据可以通过作用域插槽用在父组件页面中的指定区域内\n动态组件\n\n组件可以通过is特性动态加载\n你可以用keep-alive指令缓存组件\n杂项\n\n你可以通过ref属性标记一个组件，之后可以用this.$refs.标记的名称或得到该组件\n当ref和v-for一起使用时，ref是一个数组或对象，包含相应的子组件。\n$refs只在组件渲染完成后才填充，并且它是非响应式的。它仅仅作为一个直接访问子组件的应急方案——应当避免在模版或计算属性中使用$refs\n##### 组件的异步加载\n\n##### 组件命名规范\n\n##### 组件的递归调用\n\n组件上的name属性还是这个组件在全局注册时候的名字\n```\n<unique-name-of-my-component name=\"unique-name-of-my-component\"></unique-name-of-my-component>\n```\n##### 组件的循环引用\n\nVue.component全局注册组件后，这个问题会自动解决，你要做的就是在写代码的时候不要出现组件循环引用\n内联模板\n\n通俗的说就是在定义组件的时候不用给template属性了\nx-Templates\n","source":"_posts/vue知识点.md","raw":"---\ntitle: vue知识点\ntags:\n  - ''\ncategories:\n  - ''\ndate: 2017-04-27 19:36:23\n---\n\n#### vue是什么？\n\nvue也是一个数据驱动框架，做spa页面的\nvue如果不做页面可以当做一个单独使用的js库，做双向数据绑定用\nVue的核心库只关注视图层,但是vue并不只关注视图，和angular一样也有指令，过滤器这些东西\nvue有非常强大的单文件组件\n就是css+html+js都写在一个.vue文件中，这样定义的组件很简洁，清晰，组件化分的很彻底\n而angular中的js文件只能写js\n虽然react中可以写css-in-js，但是缺乏选择器功能，即便可以在js中引入css文件，但还是不方便\nvue融合了react和angular的优点，并且解决了react和angualr的痛点\n<!--more-->\n\n#### vue学习地址和技术栈\n\nVue2.0中文网：\nvue全家桶变为vue2.0+vue-router+fetch+vuex\n我们下文中所出现的vue都指代vue2.0\nvue和其他框架的对比\n\nvue比市面上的其他框架功能更完善，性能更高效\n#### vue快速开始\n\n用vue-cli开始\n\n```\n# 全局安装 vue-cli\n$ npm install --global vue-cli\n# 创建一个基于 webpack 模板的新项目\n$  vue init webpack my-project\n# 安装依赖，走你\n$ cd my-project\n$ npm install\n$ npm run dev\n```\n你只需要关注你配置的东西就可以了，不需要关注webpack的配置项，因为webpack的配置很难，很多人不会，也是为了简便开发\n自己创建Vue的开发环境\n\n#### 准备工作\n\n升级webstorm到最新版本，老版本对.vue文件的开发是有bug的\n下载webstorm为Vue提供的插件vue-for-idea，这个插件可以让webstorm支持以.vue结尾的文件能够运行\n下载vuenpm install vue -save\n下载编译模块npm install vue-template-compiler -save\nsrc/js文件中创建main.js\n```\nimport Vue from 'vue'\nimport AppContainer from '../containers/AppContainer'\n\nconst app = new Vue({\n    render: h => h(AppContainer),\n}).$mount('#app')\n\n\n// new Vue({\n//     el:'#app',\n//     render: h => h(App)\n// })\n```\n在src/container中创建AppContainer.vue文件\n```\n<template>\n    <div>\n        {{msg}}\n    </div>\n</template>\n<style>\n    body{\n        background-color:#ff0000;\n    }\n</style>\n<script>\n    export default{\n        data(){\n            return{\n                msg:'hello vue'\n            }\n        }\n    }\n</script>\n```\n当你第一次创建.vue文件的时候IDE会问你用什么语法去解析，你选择html语法\n接下来就可以直接运行npm run develop了\n你可以去google中搜索vue-devtools下载并安装，用于帮你监听组件的data属性变化\n#### vue中的基础知识点\n\nVue实例\n\n#####  属性与方法\n\n我们自定义的一些数据和方法是要绑定到实例的不同属性上面去的\n例如数据都要绑定要data属性，方法都要绑定到methods方法\n实例上的data和methods里面的key值会自动挂载到vue实例上，我们管他们叫动态属性，获取方式直接使实例.动态属性名\nvue实例上的实例属性要通过实例.$实例属性名获取\n在vue实例里面用this，this指向的是vue实例\n可以通过this.a去获取动态属性\n可以通过this.$data去获取实例属性\n实例上有一个$watch方法可以监听data属性里面的数据的变化，data一变会自动触发监听事件的执行\n```\nvar data = {a: 1}\n    const app = new Vue({\n        // 和数据相关的都挂载到data上\n        data: data,\n        // 和方法相关的都挂载到methods上\n        methods: {\n            // this和$的使用\n            func1: function () {\n                console.log(this.a);\n                console.log(this.$data.a);\n            },\n            changeData:function () {\n                this.a=2\n            }\n        }\n    })\n\n    // 先监听再改变\n    app.$watch('a', function (newVal, oldVal) {\n        console.log(newVal)\n        console.log(oldVal)\n    })\n    // 值改变之后会自动执行监听方法\n    // data的值是可以直接改变的，和react的setState方法不一样，因为vue里面用了set和get方法，可以起到自动监听的作用\n    app.a=3\n\n\n    // 动态属性和实例属性\n//    console.log(app)\n//    console.log(app.a)\n//    console.log(app.$data.a)\n```\n##### 实例生命周期\n\n和react的生命周期基本思想是一样的\n只不过react中是监听props和state属性的变化\n而在vue中是只监听data属性的变化\nvue中的生命周期函数要比react中的方法多\n这些生命周期方法只能在spa应用中起作用，单独作为双向数据绑定库无法生效\n`vue生命周期图`\n![](https://static.oschina.net/uploads/img/201704/24103726_vz9U.png)\n\n##### 模板语法\n\n就是如何在.vue文件的template标签中书写内容\n\nv-once指令只会执行一次性地插值，当数据改变时，插值处的内容不会更新。但请留心这会影响到该节点上所有的数据绑定：\nv-html会按照html规则去解析内容\n我们在为标签的属性赋值的时候不能Mustache语法，我们要用v-bind指令\nv-bind绑定的属性必须是data属性里面定义的值，如果想写固定的值加单引号\n```\n// 错误的写法\n<div id=\"{{id}}\"></div>\n// 正确的写法\n<div v-bind:id=\"id\"></div>\n```\n在Mustache中可以处理一些简单的js表达式，Mustache中的属性本身有什么方法，在里面也是可以直接使用的\n```\n{{ number + 1 }}\n{{ ok ? 'YES' : 'NO' }}\n{{ message.split('').reverse().join('') }}\n<div v-bind:id=\"'list-' + id\"></div>\n```\n在Mustache中可以使用自定义过滤器，也可以多过滤器串联。但是过滤器不能用在v-bind中，如果想实现相同的效果在v-bind中我们要用计算属性\n```\n{{ message | capitalize }}\n\n{{ message | filterA | filterB }}\n\nnew Vue({\n  // ...\n  filters: {\n    capitalize: function (value) {\n      if (!value) return ''\n      value = value.toString()\n      return value.charAt(0).toUpperCase() + value.slice(1)\n    }\n  }\n})\n```\n在dom标签中可以使用指令，如v-if，v-for\n```\n<a v-on:click=\"doSomething\">\n```\n在dom的事件中可以使用修饰符去帮你简化一些操作\n```\n<form v-on:submit.prevent=\"onSubmit\"></form>\n```\nv-bind和v-on在模板语法中可以缩写\n```\n//完整语法\n<a v-bind:href=\"url\"></a>\n//缩写\n<a :href=\"url\"></a>\n//完整语法\n<a v-on:click=\"doSomething\"></a>\n// 缩写\n<a @click=\"doSomething\"></a>\n```\n\n\n#### 计算属性\n\n计算属性可以处理模板语法中的复杂业务逻辑，跟Mustache语法比\n计算属性 vs methods\n\n我们看到计算属性和methods的效果基本你一样，那么他们的区别是什么？\n计算属性的依赖如果没有发生变化，当你再次调用计算属性的时候，能够立即返回上次缓存的计算值，而不需要从新执行计算属性的方法\n而方法需要从新执行方法体\n样例\n```\n<template>\n    <div>\n        <p>Original message: \"{{ message }}{{name}}\"</p>\n        <p>Computed reversed message: \"{{ reversedMessage }}\"</p>\n        <p>Computed reversed message: \"{{ reverseMessage() }}\"</p>\n    </div>\n</template>\n<style>\n    body{\n        background-color:#ff0000;\n    }\n</style>\n<script>\n    export default{\n        data(){\n            return{\n                message: 'Hello',\n                name:'a'\n            }\n        },\n        mounted(){\n            this.name=\"b\"\n        },\n        computed: {\n            reversedMessage: function () {\n                console.log('计算属性被调用了')\n                return this.message.split('').reverse().join('')\n            }\n        },\n        methods: {\n            reverseMessage: function () {\n                console.log('方法被执行了')\n                return this.message.split('').reverse().join('')\n            }\n        }\n\n    }\n</script>\n```\n计算属性 vs watch\n\nwatch方法每次只能监听一个data值的变化\n而计算属性可以同时监听多个data值的变化\n用计算属性可以简化watch中重复的代码\n```\n<!--页面-->\n<div id=\"demo\">{{ fullName }}</div>\n  //watch写法\n  var vm = new Vue({\n    el: '#demo',\n    data: {\n      firstName: 'Foo',\n      lastName: 'Bar',\n      fullName: 'Foo Bar'\n    },\n    watch: {\n      firstName: function (val) {\n        this.fullName = val + ' ' + this.lastName\n      },\n      lastName: function (val) {\n        this.fullName = this.firstName + ' ' + val\n      }\n    }\n  })\n  //计算属性的写法\n  //本质是你要获取全名\n  var vm = new Vue({\n    el: '#demo',\n    data: {\n      firstName: 'Foo',\n      lastName: 'Bar'\n    },\n    computed: {\n      fullName: function () {\n        return this.firstName + ' ' + this.lastName\n      }\n    }\n  })\n```\n计算setter\n\n计算属性默认是只有getter的，那么data属性里面你的值发生改变了，计算属性要从新执行\n而setter的作用是调用计算属性的时候给一个初始值，那么data属性里面的值也会跟着做相应的改变\n```\n// 接上面的代码段\ncomputed: {\n  fullName: {\n    // getter\n    get: function () {\n      return this.firstName + ' ' + this.lastName\n    },\n    // setter\n    set: function (newValue) {\n      var names = newValue.split(' ')\n      this.firstName = names[0]\n      this.lastName = names[names.length - 1]\n    }\n  }\n}\n```\nvue实例上的观察watch还是很有用的，在进行执行异步操作或昂贵操作时，我们要用watch这个实例属性\n因为你不要忘记计算属性出现的原因是为了解决mustache语法中有过多的逻辑操作问题，它只能进行一些小型操作的内容\nClass与Style绑定\n\n绑定要用v-bind:class和:bind:style\nv-bind:class指令可以与普通的class属性共存\n绑定的时候可以给对象，可以个数组，还可以有条件判断和三元表达式\n条件渲染\n\nv-if和v-else只能控制一个标签的渲染，而且v-else要紧跟着v-if\n如果想要控制一部分标签的渲染，需要用<template>标签包裹，v-if作用在template标签上\nv-show也可以控制标签的显示隐藏，不过只是简单的切换样式\nv-show的元素会始终渲染并保持在 DOM 中，v-if的元素会被移除\n注意 v-show 不支持 <template> 语法\nv-if是惰性的，只有在条件第一次为true的时候才进行局部渲染吧\nv-if有更高的切换消耗，v-show有更高的初始渲染消耗。因此如果需要频繁切换使用v-show较好，如果在运行时条件不大可能改变则使用v-if较好。\n列表渲染\n\nv-for是vue中做循环的，值可以给数组，对象，数值三种类型\n可以用of替换in\n如果想循环渲染一部分标签，要用template标签包裹，v-for作用在template标签上\n在循环渲染引入的自定义组件的时候要手动为组件传递item的属性值\n```\n    <my-components\n      is=\"todo-item\"\n      v-for=\"(item, index) in todos\"\n      v-bind:title=\"item\"\n      v-on:remove=\"item.splice(index, 1)\"\n    >\n    </my-components>\n```\n在循环渲染的时候要动态的绑定v-bind:key,这样可以提升vue的渲染效率\nVue 包含一组观察数组的变异方法，只要调用它们将会触发视图更新，并且改变了原数组\npush() pop() shift() unshift() splice() sort() reverse()\n重塑数组不会改变原来的数据，而是返回一个改变之后的新数据\nfilter(), concat(), slice()\n重塑数组一般是赋值用，这样才能触发vue的重新渲染，而你并不需要担心性能问题，因为vue会智能的重用数组\n由于JavaScript 的限制，Vue不能检测以下变动的数组：\n当你直接设置一个项的索引时，例如： vm.items[indexOfItem] = newValue\n用Vue.set解决\n当你修改数组的长度时，例如： vm.items.length = newLength\n用splice解决\nv-for结合计属性或者methods时可以做数据的过滤和排序\n```\n// <li v-for=\"n in evenNumbers\">{{ n }}</li>\n\ndata: {\n  numbers: [ 1, 2, 3, 4, 5 ]\n},\ncomputed: {\n  evenNumbers: function () {\n    return this.numbers.filter(function (number) {\n      return number % 2 === 0\n    })\n  }\n}\n```\n#### 事件处理器\n\n在v-on:click的时候想既传递参数又想传递事件对象，那么你需要手动传入$event参数\n```\n<button v-on:click=\"warn('Form cannot be submitted yet.', $event)\">Submit</button>\nmethods: {\n  warn: function (message, event) {\n    // 现在我们可以访问原生事件对象\n    if (event) event.preventDefault()\n    alert(message)\n  }\n}\n```\n#### 常用事件修饰符\n```\n<!-- 阻止单击事件冒泡 -->\n<a v-on:click.stop=\"doThis\"></a>\n<!-- 提交事件不再重载页面 -->\n<form v-on:submit.prevent=\"onSubmit\"></form>\n<!-- 修饰符可以串联  -->\n<a v-on:click.stop.prevent=\"doThat\"></a>\n<!-- 只有修饰符 -->\n<form v-on:submit.prevent></form>\n<!-- 添加事件侦听器时使用时间捕获模式 -->\n<div v-on:click.capture=\"doThis\">...</div>\n<!-- 只当事件在该元素本身（而不是子元素）触发时触发回调 -->\n<div v-on:click.self=\"doThat\">...</div>\n<!-- the click event will be triggered at most once -->\n<a v-on:click.once=\"doThis\"></a>\n```\n\n#### 常见的按键修饰符\n```\n<!-- 只有在 keyCode 是 13 时调用 vm.submit() -->\n<input v-on:keyup.13=\"submit\">\n<!-- 同上 -->\n<input v-on:keyup.enter=\"submit\">\n<!-- 缩写语法 -->\n<input @keyup.enter=\"submit\">\n\n<!--全部的按键别名：-->\n\n    enter\n    tab\n    delete (捕获 “删除” 和 “退格” 键)\n    esc\n    space\n    up\n    down\n    left\n    right\n    ctrl\n    alt\n    shift\n    meta\n通过全局 config.keyCodes自定义按键修饰符别名,记住要在new新实例之前注册\n// 可以使用 v-on:keyup.f1\nVue.config.keyCodes.f1 = 112\n```\n#### 表单控件绑定\n\n表单的双向绑定用v-model指令\n在文本区域插值<textarea></textarea>并不会生效，应用v-model来代替\n单个复选按钮绑定的是选中状态，多个复选按钮绑定的是值\n列表没有value值绑定的是标签内容，有value值绑定的就是value值\n如果想让表单的value属性绑定到Vue实例的动态属性上，需要用v-bind:value绑定\n```\n<input type=\"radio\" v-model=\"pick\" v-bind:value=\"a\">\n```\n.lazy修饰符可以实现单向数据绑定\n```\n<!-- 在 \"change\" 而不是 \"input\" 事件中更新 -->\n<input v-model.lazy=\"msg\" >\n```\n组件\n\n组件可以扩展 HTML 元素，封装可重用的代码。在较高层面上，组件是自定义元素， Vue.js 的编译器为它添加特殊功能。在有些情况下，组件也可以是原生 HTML 元素的形式，以 is 特性扩展。\n组件是类似于angualr中自定义指令，是vue中的一种自定义标签\n相当于react中的通用组件，高可复用性的（例如：列表，按钮，等待器）\n组件的使用\n\n#### 全局注册组件\n\n全局组件的定义一定要在创建根实例之前\n在全局注册的组件可以在子组件的页面中随意使用\n```\nVue.component('soupfree', {\n        template: '<div>汤免费</div>'\n    })\n\n    const app = new Vue({\n        el:'#example'\n    })\n```\n##### 局部注册组件\n\n在要使用的组价中增加components属性，注册引入的组件并改名，之后才可以在html代码中使用\n一般局部注册的组件都是通过.vue文件实现的\n```\n<template>\n    <div>\n       姓名：汤免费，年龄：{{age}},性别：{{genderSex}}\n    </div>\n</template>\n<style scope>\n    div{\n        background-color:orange;\n    }\n</style>\n<script>\n    export default{\n        data(){\n            return{\n\n            }\n        },\n        props:['age','genderSex']\n    }\n</script>\n<template>\n    <div>\n        <soup-free></soup-free>\n        {{msg}}\n    </div>\n</template>\n<style>\n    body{\n        background-color:#ff0000;\n    }\n</style>\n<script>\n    import soupfree from '../components/soupfree.vue'\n    export default{\n        data(){\n            return{\n                msg:'hello vue'\n            }\n        },\n        components:{\n            'soup-free':soupfree\n        }\n    }\n</script>\n```\n##### Dom模板解析问题\n\n当你在一些特殊标签如table，ul，ol，select中使用自定义组件的时候会有一些限制\n\n例如\n```\n<table>\n     <my-row>...</my-row>\n</table>\n```\n因为Vue只有在浏览器解析和标准化HTML后才能获取模版内容\n再准确的说也就是用Vue.component方法自定义的组件\nis特性可以解决这个问题\n```\n  <table>\n    <tr is=\"my-row\"></tr>\n  </table>\n```\n应当注意，如果您使用来自以下来源之一的字符串模板，这些限制将不适用：\n```\n<script type=\"text/x-template\">\n```\n因为这里面的代码是内连载页面中的\nJavaScript内联模版字符串\n这个就是template属性\n.vue 组件\n在webpack构建的时候就已经处理了组件内容为html了\n因此，有必要的话请使用字符串模版。\n☆在自定义组件中data属性必须是函数形式☆\n\n也就是在Vue.component中和.vue文件中的data属性\n如果是父子组件，那么父组件向子组件传递参数用props,子组件向父组件传递参数用$emit广播\nprops属性\n\n参数在传递的过程中，父组件传递参数用kebab-case（短横线隔开），在子组件接收的时候用camelCase\n如果传递的属性来自父组件的data属性，也就是向子组件传递动态属性那么需要用v-bind去传递\n如何传递的属性类型是数值型，那么也需要用v-bind去传递把\n<!-- 传递实际的数字 -->\n<comp v-bind:some-prop=\"1\"></comp>\n☆注意在JavaScript中对象和数组是引用类型，指向同一个内存空间，如果prop是一个对象或数组，在子组件内部改变它会影响父组件的状态。\n注意一般情况下不要在子组件中改变父组件中传递过来的props，但是有两种特殊情况会改变\n我们在传递属性的时候可以做属性校验\n当prop验证失败了,Vue将拒绝在子组件上设置此值，如果使用的是开发版本会抛出一条警告。\n自定义事件\n\n用v-on去绑定自定义事件\n使用$on(eventName)监听事件\n使用$emit(eventName)触发事件\n在自定义组件上是不可以用v-model指令，但是这个效果可以通过自定义组件在内部用自定义事件模拟实现\n```\nVue.component('currency-input', {\n  template: '\\\n    <span>\\\n      $\\\n      <input\\\n        ref=\"input\"\\\n        v-bind:value=\"value\"\\\n        v-on:input=\"updateValue($event.target.value)\"\\\n      >\\\n    </span>\\\n  ',\n  props: ['value'],\n  methods: {\n    // 不是直接更新值，而是使用此方法来对输入值进行格式化和位数限制\n    updateValue: function (value) {\n      var formattedValue = value\n        // 删除两侧的空格符\n        .trim()\n        // 保留 2 小数位\n        .slice(0, value.indexOf('.') + 3)\n      // 如果值不统一，手动覆盖以保持一致\n      if (formattedValue !== value) {\n        this.$refs.input.value = formattedValue\n      }\n      // 通过 input 事件发出数值\n      this.$emit('input', Number(formattedValue))\n    }\n  }\n})\n```\n兄弟组件之间的通信可以通过bus中央事件总线实现\n但是更复杂的数据通信最好还是用vuex\n```\n// 在根组件中注册bus属性\nconst app = new Vue({\n    data:{\n        bus:new Vue()\n    },\n    render: h => h(AppContainer),\n}).$mount('#app')\n// 在子组件中使用\nthis.$root.bus.$emit('eventName',2323)\n```\nslot分发\n\n在自定义组件使用的时候，如果页面中有内容，又想让内容在自定义组件中使用，我们需要养slot标签\nslot标签在一个html标签中只能出现一次\n作用域插槽是一种特殊类型的插槽，用作使用一个（能够传递数据到）可重用模板替换已渲染元素。\n通俗的说就是子组件里面的数据可以通过作用域插槽用在父组件页面中的指定区域内\n动态组件\n\n组件可以通过is特性动态加载\n你可以用keep-alive指令缓存组件\n杂项\n\n你可以通过ref属性标记一个组件，之后可以用this.$refs.标记的名称或得到该组件\n当ref和v-for一起使用时，ref是一个数组或对象，包含相应的子组件。\n$refs只在组件渲染完成后才填充，并且它是非响应式的。它仅仅作为一个直接访问子组件的应急方案——应当避免在模版或计算属性中使用$refs\n##### 组件的异步加载\n\n##### 组件命名规范\n\n##### 组件的递归调用\n\n组件上的name属性还是这个组件在全局注册时候的名字\n```\n<unique-name-of-my-component name=\"unique-name-of-my-component\"></unique-name-of-my-component>\n```\n##### 组件的循环引用\n\nVue.component全局注册组件后，这个问题会自动解决，你要做的就是在写代码的时候不要出现组件循环引用\n内联模板\n\n通俗的说就是在定义组件的时候不用给template属性了\nx-Templates\n","slug":"vue知识点","published":1,"updated":"2017-04-27T11:56:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5naxw4g000tfcxe70rtalyz","content":"<h4 id=\"vue是什么？\"><a href=\"#vue是什么？\" class=\"headerlink\" title=\"vue是什么？\"></a>vue是什么？</h4><p>vue也是一个数据驱动框架，做spa页面的<br>vue如果不做页面可以当做一个单独使用的js库，做双向数据绑定用<br>Vue的核心库只关注视图层,但是vue并不只关注视图，和angular一样也有指令，过滤器这些东西<br>vue有非常强大的单文件组件<br>就是css+html+js都写在一个.vue文件中，这样定义的组件很简洁，清晰，组件化分的很彻底<br>而angular中的js文件只能写js<br>虽然react中可以写css-in-js，但是缺乏选择器功能，即便可以在js中引入css文件，但还是不方便<br>vue融合了react和angular的优点，并且解决了react和angualr的痛点<br><a id=\"more\"></a></p>\n<h4 id=\"vue学习地址和技术栈\"><a href=\"#vue学习地址和技术栈\" class=\"headerlink\" title=\"vue学习地址和技术栈\"></a>vue学习地址和技术栈</h4><p>Vue2.0中文网：<br>vue全家桶变为vue2.0+vue-router+fetch+vuex<br>我们下文中所出现的vue都指代vue2.0<br>vue和其他框架的对比</p>\n<p>vue比市面上的其他框架功能更完善，性能更高效</p>\n<h4 id=\"vue快速开始\"><a href=\"#vue快速开始\" class=\"headerlink\" title=\"vue快速开始\"></a>vue快速开始</h4><p>用vue-cli开始</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 全局安装 vue-cli</div><div class=\"line\">$ npm install --global vue-cli</div><div class=\"line\"># 创建一个基于 webpack 模板的新项目</div><div class=\"line\">$  vue init webpack my-project</div><div class=\"line\"># 安装依赖，走你</div><div class=\"line\">$ cd my-project</div><div class=\"line\">$ npm install</div><div class=\"line\">$ npm run dev</div></pre></td></tr></table></figure>\n<p>你只需要关注你配置的东西就可以了，不需要关注webpack的配置项，因为webpack的配置很难，很多人不会，也是为了简便开发<br>自己创建Vue的开发环境</p>\n<h4 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h4><p>升级webstorm到最新版本，老版本对.vue文件的开发是有bug的<br>下载webstorm为Vue提供的插件vue-for-idea，这个插件可以让webstorm支持以.vue结尾的文件能够运行<br>下载vuenpm install vue -save<br>下载编译模块npm install vue-template-compiler -save<br>src/js文件中创建main.js<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">import Vue from &apos;vue&apos;</div><div class=\"line\">import AppContainer from &apos;../containers/AppContainer&apos;</div><div class=\"line\"></div><div class=\"line\">const app = new Vue(&#123;</div><div class=\"line\">    render: h =&gt; h(AppContainer),</div><div class=\"line\">&#125;).$mount(&apos;#app&apos;)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">// new Vue(&#123;</div><div class=\"line\">//     el:&apos;#app&apos;,</div><div class=\"line\">//     render: h =&gt; h(App)</div><div class=\"line\">// &#125;)</div></pre></td></tr></table></figure></p>\n<p>在src/container中创建AppContainer.vue文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;template&gt;</div><div class=\"line\">    &lt;div&gt;</div><div class=\"line\">        &#123;&#123;msg&#125;&#125;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">&lt;/template&gt;</div><div class=\"line\">&lt;style&gt;</div><div class=\"line\">    body&#123;</div><div class=\"line\">        background-color:#ff0000;</div><div class=\"line\">    &#125;</div><div class=\"line\">&lt;/style&gt;</div><div class=\"line\">&lt;script&gt;</div><div class=\"line\">    export default&#123;</div><div class=\"line\">        data()&#123;</div><div class=\"line\">            return&#123;</div><div class=\"line\">                msg:&apos;hello vue&apos;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure></p>\n<p>当你第一次创建.vue文件的时候IDE会问你用什么语法去解析，你选择html语法<br>接下来就可以直接运行npm run develop了<br>你可以去google中搜索vue-devtools下载并安装，用于帮你监听组件的data属性变化</p>\n<h4 id=\"vue中的基础知识点\"><a href=\"#vue中的基础知识点\" class=\"headerlink\" title=\"vue中的基础知识点\"></a>vue中的基础知识点</h4><p>Vue实例</p>\n<h5 id=\"属性与方法\"><a href=\"#属性与方法\" class=\"headerlink\" title=\"属性与方法\"></a>属性与方法</h5><p>我们自定义的一些数据和方法是要绑定到实例的不同属性上面去的<br>例如数据都要绑定要data属性，方法都要绑定到methods方法<br>实例上的data和methods里面的key值会自动挂载到vue实例上，我们管他们叫动态属性，获取方式直接使实例.动态属性名<br>vue实例上的实例属性要通过实例.$实例属性名获取<br>在vue实例里面用this，this指向的是vue实例<br>可以通过this.a去获取动态属性<br>可以通过this.$data去获取实例属性<br>实例上有一个$watch方法可以监听data属性里面的数据的变化，data一变会自动触发监听事件的执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">var data = &#123;a: 1&#125;</div><div class=\"line\">    const app = new Vue(&#123;</div><div class=\"line\">        // 和数据相关的都挂载到data上</div><div class=\"line\">        data: data,</div><div class=\"line\">        // 和方法相关的都挂载到methods上</div><div class=\"line\">        methods: &#123;</div><div class=\"line\">            // this和$的使用</div><div class=\"line\">            func1: function () &#123;</div><div class=\"line\">                console.log(this.a);</div><div class=\"line\">                console.log(this.$data.a);</div><div class=\"line\">            &#125;,</div><div class=\"line\">            changeData:function () &#123;</div><div class=\"line\">                this.a=2</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">    // 先监听再改变</div><div class=\"line\">    app.$watch(&apos;a&apos;, function (newVal, oldVal) &#123;</div><div class=\"line\">        console.log(newVal)</div><div class=\"line\">        console.log(oldVal)</div><div class=\"line\">    &#125;)</div><div class=\"line\">    // 值改变之后会自动执行监听方法</div><div class=\"line\">    // data的值是可以直接改变的，和react的setState方法不一样，因为vue里面用了set和get方法，可以起到自动监听的作用</div><div class=\"line\">    app.a=3</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    // 动态属性和实例属性</div><div class=\"line\">//    console.log(app)</div><div class=\"line\">//    console.log(app.a)</div><div class=\"line\">//    console.log(app.$data.a)</div></pre></td></tr></table></figure></p>\n<h5 id=\"实例生命周期\"><a href=\"#实例生命周期\" class=\"headerlink\" title=\"实例生命周期\"></a>实例生命周期</h5><p>和react的生命周期基本思想是一样的<br>只不过react中是监听props和state属性的变化<br>而在vue中是只监听data属性的变化<br>vue中的生命周期函数要比react中的方法多<br>这些生命周期方法只能在spa应用中起作用，单独作为双向数据绑定库无法生效<br><code>vue生命周期图</code><br><img src=\"https://static.oschina.net/uploads/img/201704/24103726_vz9U.png\" alt=\"\"></p>\n<h5 id=\"模板语法\"><a href=\"#模板语法\" class=\"headerlink\" title=\"模板语法\"></a>模板语法</h5><p>就是如何在.vue文件的template标签中书写内容</p>\n<p>v-once指令只会执行一次性地插值，当数据改变时，插值处的内容不会更新。但请留心这会影响到该节点上所有的数据绑定：<br>v-html会按照html规则去解析内容<br>我们在为标签的属性赋值的时候不能Mustache语法，我们要用v-bind指令<br>v-bind绑定的属性必须是data属性里面定义的值，如果想写固定的值加单引号<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 错误的写法</div><div class=\"line\">&lt;div id=&quot;&#123;&#123;id&#125;&#125;&quot;&gt;&lt;/div&gt;</div><div class=\"line\">// 正确的写法</div><div class=\"line\">&lt;div v-bind:id=&quot;id&quot;&gt;&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>在Mustache中可以处理一些简单的js表达式，Mustache中的属性本身有什么方法，在里面也是可以直接使用的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;&#123; number + 1 &#125;&#125;</div><div class=\"line\">&#123;&#123; ok ? &apos;YES&apos; : &apos;NO&apos; &#125;&#125;</div><div class=\"line\">&#123;&#123; message.split(&apos;&apos;).reverse().join(&apos;&apos;) &#125;&#125;</div><div class=\"line\">&lt;div v-bind:id=&quot;&apos;list-&apos; + id&quot;&gt;&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>在Mustache中可以使用自定义过滤器，也可以多过滤器串联。但是过滤器不能用在v-bind中，如果想实现相同的效果在v-bind中我们要用计算属性<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;&#123; message | capitalize &#125;&#125;</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; message | filterA | filterB &#125;&#125;</div><div class=\"line\"></div><div class=\"line\">new Vue(&#123;</div><div class=\"line\">  // ...</div><div class=\"line\">  filters: &#123;</div><div class=\"line\">    capitalize: function (value) &#123;</div><div class=\"line\">      if (!value) return &apos;&apos;</div><div class=\"line\">      value = value.toString()</div><div class=\"line\">      return value.charAt(0).toUpperCase() + value.slice(1)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>在dom标签中可以使用指令，如v-if，v-for<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;a v-on:click=&quot;doSomething&quot;&gt;</div></pre></td></tr></table></figure></p>\n<p>在dom的事件中可以使用修饰符去帮你简化一些操作<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;form v-on:submit.prevent=&quot;onSubmit&quot;&gt;&lt;/form&gt;</div></pre></td></tr></table></figure></p>\n<p>v-bind和v-on在模板语法中可以缩写<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">//完整语法</div><div class=\"line\">&lt;a v-bind:href=&quot;url&quot;&gt;&lt;/a&gt;</div><div class=\"line\">//缩写</div><div class=\"line\">&lt;a :href=&quot;url&quot;&gt;&lt;/a&gt;</div><div class=\"line\">//完整语法</div><div class=\"line\">&lt;a v-on:click=&quot;doSomething&quot;&gt;&lt;/a&gt;</div><div class=\"line\">// 缩写</div><div class=\"line\">&lt;a @click=&quot;doSomething&quot;&gt;&lt;/a&gt;</div></pre></td></tr></table></figure></p>\n<h4 id=\"计算属性\"><a href=\"#计算属性\" class=\"headerlink\" title=\"计算属性\"></a>计算属性</h4><p>计算属性可以处理模板语法中的复杂业务逻辑，跟Mustache语法比<br>计算属性 vs methods</p>\n<p>我们看到计算属性和methods的效果基本你一样，那么他们的区别是什么？<br>计算属性的依赖如果没有发生变化，当你再次调用计算属性的时候，能够立即返回上次缓存的计算值，而不需要从新执行计算属性的方法<br>而方法需要从新执行方法体<br>样例<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;template&gt;</div><div class=\"line\">    &lt;div&gt;</div><div class=\"line\">        &lt;p&gt;Original message: &quot;&#123;&#123; message &#125;&#125;&#123;&#123;name&#125;&#125;&quot;&lt;/p&gt;</div><div class=\"line\">        &lt;p&gt;Computed reversed message: &quot;&#123;&#123; reversedMessage &#125;&#125;&quot;&lt;/p&gt;</div><div class=\"line\">        &lt;p&gt;Computed reversed message: &quot;&#123;&#123; reverseMessage() &#125;&#125;&quot;&lt;/p&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">&lt;/template&gt;</div><div class=\"line\">&lt;style&gt;</div><div class=\"line\">    body&#123;</div><div class=\"line\">        background-color:#ff0000;</div><div class=\"line\">    &#125;</div><div class=\"line\">&lt;/style&gt;</div><div class=\"line\">&lt;script&gt;</div><div class=\"line\">    export default&#123;</div><div class=\"line\">        data()&#123;</div><div class=\"line\">            return&#123;</div><div class=\"line\">                message: &apos;Hello&apos;,</div><div class=\"line\">                name:&apos;a&apos;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        mounted()&#123;</div><div class=\"line\">            this.name=&quot;b&quot;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        computed: &#123;</div><div class=\"line\">            reversedMessage: function () &#123;</div><div class=\"line\">                console.log(&apos;计算属性被调用了&apos;)</div><div class=\"line\">                return this.message.split(&apos;&apos;).reverse().join(&apos;&apos;)</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        methods: &#123;</div><div class=\"line\">            reverseMessage: function () &#123;</div><div class=\"line\">                console.log(&apos;方法被执行了&apos;)</div><div class=\"line\">                return this.message.split(&apos;&apos;).reverse().join(&apos;&apos;)</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure></p>\n<p>计算属性 vs watch</p>\n<p>watch方法每次只能监听一个data值的变化<br>而计算属性可以同时监听多个data值的变化<br>用计算属性可以简化watch中重复的代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!--页面--&gt;</div><div class=\"line\">&lt;div id=&quot;demo&quot;&gt;&#123;&#123; fullName &#125;&#125;&lt;/div&gt;</div><div class=\"line\">  //watch写法</div><div class=\"line\">  var vm = new Vue(&#123;</div><div class=\"line\">    el: &apos;#demo&apos;,</div><div class=\"line\">    data: &#123;</div><div class=\"line\">      firstName: &apos;Foo&apos;,</div><div class=\"line\">      lastName: &apos;Bar&apos;,</div><div class=\"line\">      fullName: &apos;Foo Bar&apos;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    watch: &#123;</div><div class=\"line\">      firstName: function (val) &#123;</div><div class=\"line\">        this.fullName = val + &apos; &apos; + this.lastName</div><div class=\"line\">      &#125;,</div><div class=\"line\">      lastName: function (val) &#123;</div><div class=\"line\">        this.fullName = this.firstName + &apos; &apos; + val</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;)</div><div class=\"line\">  //计算属性的写法</div><div class=\"line\">  //本质是你要获取全名</div><div class=\"line\">  var vm = new Vue(&#123;</div><div class=\"line\">    el: &apos;#demo&apos;,</div><div class=\"line\">    data: &#123;</div><div class=\"line\">      firstName: &apos;Foo&apos;,</div><div class=\"line\">      lastName: &apos;Bar&apos;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    computed: &#123;</div><div class=\"line\">      fullName: function () &#123;</div><div class=\"line\">        return this.firstName + &apos; &apos; + this.lastName</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;)</div></pre></td></tr></table></figure></p>\n<p>计算setter</p>\n<p>计算属性默认是只有getter的，那么data属性里面你的值发生改变了，计算属性要从新执行<br>而setter的作用是调用计算属性的时候给一个初始值，那么data属性里面的值也会跟着做相应的改变<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 接上面的代码段</div><div class=\"line\">computed: &#123;</div><div class=\"line\">  fullName: &#123;</div><div class=\"line\">    // getter</div><div class=\"line\">    get: function () &#123;</div><div class=\"line\">      return this.firstName + &apos; &apos; + this.lastName</div><div class=\"line\">    &#125;,</div><div class=\"line\">    // setter</div><div class=\"line\">    set: function (newValue) &#123;</div><div class=\"line\">      var names = newValue.split(&apos; &apos;)</div><div class=\"line\">      this.firstName = names[0]</div><div class=\"line\">      this.lastName = names[names.length - 1]</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>vue实例上的观察watch还是很有用的，在进行执行异步操作或昂贵操作时，我们要用watch这个实例属性<br>因为你不要忘记计算属性出现的原因是为了解决mustache语法中有过多的逻辑操作问题，它只能进行一些小型操作的内容<br>Class与Style绑定</p>\n<p>绑定要用v-bind:class和:bind:style<br>v-bind:class指令可以与普通的class属性共存<br>绑定的时候可以给对象，可以个数组，还可以有条件判断和三元表达式<br>条件渲染</p>\n<p>v-if和v-else只能控制一个标签的渲染，而且v-else要紧跟着v-if<br>如果想要控制一部分标签的渲染，需要用<template>标签包裹，v-if作用在template标签上<br>v-show也可以控制标签的显示隐藏，不过只是简单的切换样式<br>v-show的元素会始终渲染并保持在 DOM 中，v-if的元素会被移除<br>注意 v-show 不支持 <template> 语法<br>v-if是惰性的，只有在条件第一次为true的时候才进行局部渲染吧<br>v-if有更高的切换消耗，v-show有更高的初始渲染消耗。因此如果需要频繁切换使用v-show较好，如果在运行时条件不大可能改变则使用v-if较好。<br>列表渲染</template></template></p>\n<p>v-for是vue中做循环的，值可以给数组，对象，数值三种类型<br>可以用of替换in<br>如果想循环渲染一部分标签，要用template标签包裹，v-for作用在template标签上<br>在循环渲染引入的自定义组件的时候要手动为组件传递item的属性值<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;my-components</div><div class=\"line\">  is=&quot;todo-item&quot;</div><div class=\"line\">  v-for=&quot;(item, index) in todos&quot;</div><div class=\"line\">  v-bind:title=&quot;item&quot;</div><div class=\"line\">  v-on:remove=&quot;item.splice(index, 1)&quot;</div><div class=\"line\">&gt;</div><div class=\"line\">&lt;/my-components&gt;</div></pre></td></tr></table></figure></p>\n<p>在循环渲染的时候要动态的绑定v-bind:key,这样可以提升vue的渲染效率<br>Vue 包含一组观察数组的变异方法，只要调用它们将会触发视图更新，并且改变了原数组<br>push() pop() shift() unshift() splice() sort() reverse()<br>重塑数组不会改变原来的数据，而是返回一个改变之后的新数据<br>filter(), concat(), slice()<br>重塑数组一般是赋值用，这样才能触发vue的重新渲染，而你并不需要担心性能问题，因为vue会智能的重用数组<br>由于JavaScript 的限制，Vue不能检测以下变动的数组：<br>当你直接设置一个项的索引时，例如： vm.items[indexOfItem] = newValue<br>用Vue.set解决<br>当你修改数组的长度时，例如： vm.items.length = newLength<br>用splice解决<br>v-for结合计属性或者methods时可以做数据的过滤和排序<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">// &lt;li v-for=&quot;n in evenNumbers&quot;&gt;&#123;&#123; n &#125;&#125;&lt;/li&gt;</div><div class=\"line\"></div><div class=\"line\">data: &#123;</div><div class=\"line\">  numbers: [ 1, 2, 3, 4, 5 ]</div><div class=\"line\">&#125;,</div><div class=\"line\">computed: &#123;</div><div class=\"line\">  evenNumbers: function () &#123;</div><div class=\"line\">    return this.numbers.filter(function (number) &#123;</div><div class=\"line\">      return number % 2 === 0</div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"事件处理器\"><a href=\"#事件处理器\" class=\"headerlink\" title=\"事件处理器\"></a>事件处理器</h4><p>在v-on:click的时候想既传递参数又想传递事件对象，那么你需要手动传入$event参数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;button v-on:click=&quot;warn(&apos;Form cannot be submitted yet.&apos;, $event)&quot;&gt;Submit&lt;/button&gt;</div><div class=\"line\">methods: &#123;</div><div class=\"line\">  warn: function (message, event) &#123;</div><div class=\"line\">    // 现在我们可以访问原生事件对象</div><div class=\"line\">    if (event) event.preventDefault()</div><div class=\"line\">    alert(message)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"常用事件修饰符\"><a href=\"#常用事件修饰符\" class=\"headerlink\" title=\"常用事件修饰符\"></a>常用事件修饰符</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- 阻止单击事件冒泡 --&gt;</div><div class=\"line\">&lt;a v-on:click.stop=&quot;doThis&quot;&gt;&lt;/a&gt;</div><div class=\"line\">&lt;!-- 提交事件不再重载页面 --&gt;</div><div class=\"line\">&lt;form v-on:submit.prevent=&quot;onSubmit&quot;&gt;&lt;/form&gt;</div><div class=\"line\">&lt;!-- 修饰符可以串联  --&gt;</div><div class=\"line\">&lt;a v-on:click.stop.prevent=&quot;doThat&quot;&gt;&lt;/a&gt;</div><div class=\"line\">&lt;!-- 只有修饰符 --&gt;</div><div class=\"line\">&lt;form v-on:submit.prevent&gt;&lt;/form&gt;</div><div class=\"line\">&lt;!-- 添加事件侦听器时使用时间捕获模式 --&gt;</div><div class=\"line\">&lt;div v-on:click.capture=&quot;doThis&quot;&gt;...&lt;/div&gt;</div><div class=\"line\">&lt;!-- 只当事件在该元素本身（而不是子元素）触发时触发回调 --&gt;</div><div class=\"line\">&lt;div v-on:click.self=&quot;doThat&quot;&gt;...&lt;/div&gt;</div><div class=\"line\">&lt;!-- the click event will be triggered at most once --&gt;</div><div class=\"line\">&lt;a v-on:click.once=&quot;doThis&quot;&gt;&lt;/a&gt;</div></pre></td></tr></table></figure>\n<h4 id=\"常见的按键修饰符\"><a href=\"#常见的按键修饰符\" class=\"headerlink\" title=\"常见的按键修饰符\"></a>常见的按键修饰符</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- 只有在 keyCode 是 13 时调用 vm.submit() --&gt;</div><div class=\"line\">&lt;input v-on:keyup.13=&quot;submit&quot;&gt;</div><div class=\"line\">&lt;!-- 同上 --&gt;</div><div class=\"line\">&lt;input v-on:keyup.enter=&quot;submit&quot;&gt;</div><div class=\"line\">&lt;!-- 缩写语法 --&gt;</div><div class=\"line\">&lt;input @keyup.enter=&quot;submit&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;!--全部的按键别名：--&gt;</div><div class=\"line\"></div><div class=\"line\">    enter</div><div class=\"line\">    tab</div><div class=\"line\">    delete (捕获 “删除” 和 “退格” 键)</div><div class=\"line\">    esc</div><div class=\"line\">    space</div><div class=\"line\">    up</div><div class=\"line\">    down</div><div class=\"line\">    left</div><div class=\"line\">    right</div><div class=\"line\">    ctrl</div><div class=\"line\">    alt</div><div class=\"line\">    shift</div><div class=\"line\">    meta</div><div class=\"line\">通过全局 config.keyCodes自定义按键修饰符别名,记住要在new新实例之前注册</div><div class=\"line\">// 可以使用 v-on:keyup.f1</div><div class=\"line\">Vue.config.keyCodes.f1 = 112</div></pre></td></tr></table></figure>\n<h4 id=\"表单控件绑定\"><a href=\"#表单控件绑定\" class=\"headerlink\" title=\"表单控件绑定\"></a>表单控件绑定</h4><p>表单的双向绑定用v-model指令<br>在文本区域插值<textarea></textarea>并不会生效，应用v-model来代替<br>单个复选按钮绑定的是选中状态，多个复选按钮绑定的是值<br>列表没有value值绑定的是标签内容，有value值绑定的就是value值<br>如果想让表单的value属性绑定到Vue实例的动态属性上，需要用v-bind:value绑定<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;input type=&quot;radio&quot; v-model=&quot;pick&quot; v-bind:value=&quot;a&quot;&gt;</div></pre></td></tr></table></figure></p>\n<p>.lazy修饰符可以实现单向数据绑定<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- 在 &quot;change&quot; 而不是 &quot;input&quot; 事件中更新 --&gt;</div><div class=\"line\">&lt;input v-model.lazy=&quot;msg&quot; &gt;</div></pre></td></tr></table></figure></p>\n<p>组件</p>\n<p>组件可以扩展 HTML 元素，封装可重用的代码。在较高层面上，组件是自定义元素， Vue.js 的编译器为它添加特殊功能。在有些情况下，组件也可以是原生 HTML 元素的形式，以 is 特性扩展。<br>组件是类似于angualr中自定义指令，是vue中的一种自定义标签<br>相当于react中的通用组件，高可复用性的（例如：列表，按钮，等待器）<br>组件的使用</p>\n<h4 id=\"全局注册组件\"><a href=\"#全局注册组件\" class=\"headerlink\" title=\"全局注册组件\"></a>全局注册组件</h4><p>全局组件的定义一定要在创建根实例之前<br>在全局注册的组件可以在子组件的页面中随意使用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Vue.component(&apos;soupfree&apos;, &#123;</div><div class=\"line\">        template: &apos;&lt;div&gt;汤免费&lt;/div&gt;&apos;</div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">    const app = new Vue(&#123;</div><div class=\"line\">        el:&apos;#example&apos;</div><div class=\"line\">    &#125;)</div></pre></td></tr></table></figure></p>\n<h5 id=\"局部注册组件\"><a href=\"#局部注册组件\" class=\"headerlink\" title=\"局部注册组件\"></a>局部注册组件</h5><p>在要使用的组价中增加components属性，注册引入的组件并改名，之后才可以在html代码中使用<br>一般局部注册的组件都是通过.vue文件实现的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;template&gt;</div><div class=\"line\">    &lt;div&gt;</div><div class=\"line\">       姓名：汤免费，年龄：&#123;&#123;age&#125;&#125;,性别：&#123;&#123;genderSex&#125;&#125;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">&lt;/template&gt;</div><div class=\"line\">&lt;style scope&gt;</div><div class=\"line\">    div&#123;</div><div class=\"line\">        background-color:orange;</div><div class=\"line\">    &#125;</div><div class=\"line\">&lt;/style&gt;</div><div class=\"line\">&lt;script&gt;</div><div class=\"line\">    export default&#123;</div><div class=\"line\">        data()&#123;</div><div class=\"line\">            return&#123;</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        props:[&apos;age&apos;,&apos;genderSex&apos;]</div><div class=\"line\">    &#125;</div><div class=\"line\">&lt;/script&gt;</div><div class=\"line\">&lt;template&gt;</div><div class=\"line\">    &lt;div&gt;</div><div class=\"line\">        &lt;soup-free&gt;&lt;/soup-free&gt;</div><div class=\"line\">        &#123;&#123;msg&#125;&#125;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">&lt;/template&gt;</div><div class=\"line\">&lt;style&gt;</div><div class=\"line\">    body&#123;</div><div class=\"line\">        background-color:#ff0000;</div><div class=\"line\">    &#125;</div><div class=\"line\">&lt;/style&gt;</div><div class=\"line\">&lt;script&gt;</div><div class=\"line\">    import soupfree from &apos;../components/soupfree.vue&apos;</div><div class=\"line\">    export default&#123;</div><div class=\"line\">        data()&#123;</div><div class=\"line\">            return&#123;</div><div class=\"line\">                msg:&apos;hello vue&apos;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        components:&#123;</div><div class=\"line\">            &apos;soup-free&apos;:soupfree</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure></p>\n<h5 id=\"Dom模板解析问题\"><a href=\"#Dom模板解析问题\" class=\"headerlink\" title=\"Dom模板解析问题\"></a>Dom模板解析问题</h5><p>当你在一些特殊标签如table，ul，ol，select中使用自定义组件的时候会有一些限制</p>\n<p>例如<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;table&gt;</div><div class=\"line\">     &lt;my-row&gt;...&lt;/my-row&gt;</div><div class=\"line\">&lt;/table&gt;</div></pre></td></tr></table></figure></p>\n<p>因为Vue只有在浏览器解析和标准化HTML后才能获取模版内容<br>再准确的说也就是用Vue.component方法自定义的组件<br>is特性可以解决这个问题<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;table&gt;</div><div class=\"line\">  &lt;tr is=&quot;my-row&quot;&gt;&lt;/tr&gt;</div><div class=\"line\">&lt;/table&gt;</div></pre></td></tr></table></figure></p>\n<p>应当注意，如果您使用来自以下来源之一的字符串模板，这些限制将不适用：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script type=&quot;text/x-template&quot;&gt;</div></pre></td></tr></table></figure></p>\n<p>因为这里面的代码是内连载页面中的<br>JavaScript内联模版字符串<br>这个就是template属性<br>.vue 组件<br>在webpack构建的时候就已经处理了组件内容为html了<br>因此，有必要的话请使用字符串模版。<br>☆在自定义组件中data属性必须是函数形式☆</p>\n<p>也就是在Vue.component中和.vue文件中的data属性<br>如果是父子组件，那么父组件向子组件传递参数用props,子组件向父组件传递参数用$emit广播<br>props属性</p>\n<p>参数在传递的过程中，父组件传递参数用kebab-case（短横线隔开），在子组件接收的时候用camelCase<br>如果传递的属性来自父组件的data属性，也就是向子组件传递动态属性那么需要用v-bind去传递<br>如何传递的属性类型是数值型，那么也需要用v-bind去传递把<br><!-- 传递实际的数字 --></p>\n<p><comp v-bind:some-prop=\"1\"></comp><br>☆注意在JavaScript中对象和数组是引用类型，指向同一个内存空间，如果prop是一个对象或数组，在子组件内部改变它会影响父组件的状态。<br>注意一般情况下不要在子组件中改变父组件中传递过来的props，但是有两种特殊情况会改变<br>我们在传递属性的时候可以做属性校验<br>当prop验证失败了,Vue将拒绝在子组件上设置此值，如果使用的是开发版本会抛出一条警告。<br>自定义事件</p>\n<p>用v-on去绑定自定义事件<br>使用$on(eventName)监听事件<br>使用$emit(eventName)触发事件<br>在自定义组件上是不可以用v-model指令，但是这个效果可以通过自定义组件在内部用自定义事件模拟实现<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">Vue.component(&apos;currency-input&apos;, &#123;</div><div class=\"line\">  template: &apos;\\</div><div class=\"line\">    &lt;span&gt;\\</div><div class=\"line\">      $\\</div><div class=\"line\">      &lt;input\\</div><div class=\"line\">        ref=&quot;input&quot;\\</div><div class=\"line\">        v-bind:value=&quot;value&quot;\\</div><div class=\"line\">        v-on:input=&quot;updateValue($event.target.value)&quot;\\</div><div class=\"line\">      &gt;\\</div><div class=\"line\">    &lt;/span&gt;\\</div><div class=\"line\">  &apos;,</div><div class=\"line\">  props: [&apos;value&apos;],</div><div class=\"line\">  methods: &#123;</div><div class=\"line\">    // 不是直接更新值，而是使用此方法来对输入值进行格式化和位数限制</div><div class=\"line\">    updateValue: function (value) &#123;</div><div class=\"line\">      var formattedValue = value</div><div class=\"line\">        // 删除两侧的空格符</div><div class=\"line\">        .trim()</div><div class=\"line\">        // 保留 2 小数位</div><div class=\"line\">        .slice(0, value.indexOf(&apos;.&apos;) + 3)</div><div class=\"line\">      // 如果值不统一，手动覆盖以保持一致</div><div class=\"line\">      if (formattedValue !== value) &#123;</div><div class=\"line\">        this.$refs.input.value = formattedValue</div><div class=\"line\">      &#125;</div><div class=\"line\">      // 通过 input 事件发出数值</div><div class=\"line\">      this.$emit(&apos;input&apos;, Number(formattedValue))</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>兄弟组件之间的通信可以通过bus中央事件总线实现<br>但是更复杂的数据通信最好还是用vuex<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 在根组件中注册bus属性</div><div class=\"line\">const app = new Vue(&#123;</div><div class=\"line\">    data:&#123;</div><div class=\"line\">        bus:new Vue()</div><div class=\"line\">    &#125;,</div><div class=\"line\">    render: h =&gt; h(AppContainer),</div><div class=\"line\">&#125;).$mount(&apos;#app&apos;)</div><div class=\"line\">// 在子组件中使用</div><div class=\"line\">this.$root.bus.$emit(&apos;eventName&apos;,2323)</div></pre></td></tr></table></figure></p>\n<p>slot分发</p>\n<p>在自定义组件使用的时候，如果页面中有内容，又想让内容在自定义组件中使用，我们需要养slot标签<br>slot标签在一个html标签中只能出现一次<br>作用域插槽是一种特殊类型的插槽，用作使用一个（能够传递数据到）可重用模板替换已渲染元素。<br>通俗的说就是子组件里面的数据可以通过作用域插槽用在父组件页面中的指定区域内<br>动态组件</p>\n<p>组件可以通过is特性动态加载<br>你可以用keep-alive指令缓存组件<br>杂项</p>\n<p>你可以通过ref属性标记一个组件，之后可以用this.$refs.标记的名称或得到该组件<br>当ref和v-for一起使用时，ref是一个数组或对象，包含相应的子组件。<br>$refs只在组件渲染完成后才填充，并且它是非响应式的。它仅仅作为一个直接访问子组件的应急方案——应当避免在模版或计算属性中使用$refs</p>\n<h5 id=\"组件的异步加载\"><a href=\"#组件的异步加载\" class=\"headerlink\" title=\"组件的异步加载\"></a>组件的异步加载</h5><h5 id=\"组件命名规范\"><a href=\"#组件命名规范\" class=\"headerlink\" title=\"组件命名规范\"></a>组件命名规范</h5><h5 id=\"组件的递归调用\"><a href=\"#组件的递归调用\" class=\"headerlink\" title=\"组件的递归调用\"></a>组件的递归调用</h5><p>组件上的name属性还是这个组件在全局注册时候的名字<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;unique-name-of-my-component name=&quot;unique-name-of-my-component&quot;&gt;&lt;/unique-name-of-my-component&gt;</div></pre></td></tr></table></figure></p>\n<h5 id=\"组件的循环引用\"><a href=\"#组件的循环引用\" class=\"headerlink\" title=\"组件的循环引用\"></a>组件的循环引用</h5><p>Vue.component全局注册组件后，这个问题会自动解决，你要做的就是在写代码的时候不要出现组件循环引用<br>内联模板</p>\n<p>通俗的说就是在定义组件的时候不用给template属性了<br>x-Templates</p>\n","excerpt":"<h4 id=\"vue是什么？\"><a href=\"#vue是什么？\" class=\"headerlink\" title=\"vue是什么？\"></a>vue是什么？</h4><p>vue也是一个数据驱动框架，做spa页面的<br>vue如果不做页面可以当做一个单独使用的js库，做双向数据绑定用<br>Vue的核心库只关注视图层,但是vue并不只关注视图，和angular一样也有指令，过滤器这些东西<br>vue有非常强大的单文件组件<br>就是css+html+js都写在一个.vue文件中，这样定义的组件很简洁，清晰，组件化分的很彻底<br>而angular中的js文件只能写js<br>虽然react中可以写css-in-js，但是缺乏选择器功能，即便可以在js中引入css文件，但还是不方便<br>vue融合了react和angular的优点，并且解决了react和angualr的痛点<br>","more":"</p>\n<h4 id=\"vue学习地址和技术栈\"><a href=\"#vue学习地址和技术栈\" class=\"headerlink\" title=\"vue学习地址和技术栈\"></a>vue学习地址和技术栈</h4><p>Vue2.0中文网：<br>vue全家桶变为vue2.0+vue-router+fetch+vuex<br>我们下文中所出现的vue都指代vue2.0<br>vue和其他框架的对比</p>\n<p>vue比市面上的其他框架功能更完善，性能更高效</p>\n<h4 id=\"vue快速开始\"><a href=\"#vue快速开始\" class=\"headerlink\" title=\"vue快速开始\"></a>vue快速开始</h4><p>用vue-cli开始</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 全局安装 vue-cli</div><div class=\"line\">$ npm install --global vue-cli</div><div class=\"line\"># 创建一个基于 webpack 模板的新项目</div><div class=\"line\">$  vue init webpack my-project</div><div class=\"line\"># 安装依赖，走你</div><div class=\"line\">$ cd my-project</div><div class=\"line\">$ npm install</div><div class=\"line\">$ npm run dev</div></pre></td></tr></table></figure>\n<p>你只需要关注你配置的东西就可以了，不需要关注webpack的配置项，因为webpack的配置很难，很多人不会，也是为了简便开发<br>自己创建Vue的开发环境</p>\n<h4 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h4><p>升级webstorm到最新版本，老版本对.vue文件的开发是有bug的<br>下载webstorm为Vue提供的插件vue-for-idea，这个插件可以让webstorm支持以.vue结尾的文件能够运行<br>下载vuenpm install vue -save<br>下载编译模块npm install vue-template-compiler -save<br>src/js文件中创建main.js<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">import Vue from &apos;vue&apos;</div><div class=\"line\">import AppContainer from &apos;../containers/AppContainer&apos;</div><div class=\"line\"></div><div class=\"line\">const app = new Vue(&#123;</div><div class=\"line\">    render: h =&gt; h(AppContainer),</div><div class=\"line\">&#125;).$mount(&apos;#app&apos;)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">// new Vue(&#123;</div><div class=\"line\">//     el:&apos;#app&apos;,</div><div class=\"line\">//     render: h =&gt; h(App)</div><div class=\"line\">// &#125;)</div></pre></td></tr></table></figure></p>\n<p>在src/container中创建AppContainer.vue文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;template&gt;</div><div class=\"line\">    &lt;div&gt;</div><div class=\"line\">        &#123;&#123;msg&#125;&#125;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">&lt;/template&gt;</div><div class=\"line\">&lt;style&gt;</div><div class=\"line\">    body&#123;</div><div class=\"line\">        background-color:#ff0000;</div><div class=\"line\">    &#125;</div><div class=\"line\">&lt;/style&gt;</div><div class=\"line\">&lt;script&gt;</div><div class=\"line\">    export default&#123;</div><div class=\"line\">        data()&#123;</div><div class=\"line\">            return&#123;</div><div class=\"line\">                msg:&apos;hello vue&apos;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure></p>\n<p>当你第一次创建.vue文件的时候IDE会问你用什么语法去解析，你选择html语法<br>接下来就可以直接运行npm run develop了<br>你可以去google中搜索vue-devtools下载并安装，用于帮你监听组件的data属性变化</p>\n<h4 id=\"vue中的基础知识点\"><a href=\"#vue中的基础知识点\" class=\"headerlink\" title=\"vue中的基础知识点\"></a>vue中的基础知识点</h4><p>Vue实例</p>\n<h5 id=\"属性与方法\"><a href=\"#属性与方法\" class=\"headerlink\" title=\"属性与方法\"></a>属性与方法</h5><p>我们自定义的一些数据和方法是要绑定到实例的不同属性上面去的<br>例如数据都要绑定要data属性，方法都要绑定到methods方法<br>实例上的data和methods里面的key值会自动挂载到vue实例上，我们管他们叫动态属性，获取方式直接使实例.动态属性名<br>vue实例上的实例属性要通过实例.$实例属性名获取<br>在vue实例里面用this，this指向的是vue实例<br>可以通过this.a去获取动态属性<br>可以通过this.$data去获取实例属性<br>实例上有一个$watch方法可以监听data属性里面的数据的变化，data一变会自动触发监听事件的执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">var data = &#123;a: 1&#125;</div><div class=\"line\">    const app = new Vue(&#123;</div><div class=\"line\">        // 和数据相关的都挂载到data上</div><div class=\"line\">        data: data,</div><div class=\"line\">        // 和方法相关的都挂载到methods上</div><div class=\"line\">        methods: &#123;</div><div class=\"line\">            // this和$的使用</div><div class=\"line\">            func1: function () &#123;</div><div class=\"line\">                console.log(this.a);</div><div class=\"line\">                console.log(this.$data.a);</div><div class=\"line\">            &#125;,</div><div class=\"line\">            changeData:function () &#123;</div><div class=\"line\">                this.a=2</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">    // 先监听再改变</div><div class=\"line\">    app.$watch(&apos;a&apos;, function (newVal, oldVal) &#123;</div><div class=\"line\">        console.log(newVal)</div><div class=\"line\">        console.log(oldVal)</div><div class=\"line\">    &#125;)</div><div class=\"line\">    // 值改变之后会自动执行监听方法</div><div class=\"line\">    // data的值是可以直接改变的，和react的setState方法不一样，因为vue里面用了set和get方法，可以起到自动监听的作用</div><div class=\"line\">    app.a=3</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    // 动态属性和实例属性</div><div class=\"line\">//    console.log(app)</div><div class=\"line\">//    console.log(app.a)</div><div class=\"line\">//    console.log(app.$data.a)</div></pre></td></tr></table></figure></p>\n<h5 id=\"实例生命周期\"><a href=\"#实例生命周期\" class=\"headerlink\" title=\"实例生命周期\"></a>实例生命周期</h5><p>和react的生命周期基本思想是一样的<br>只不过react中是监听props和state属性的变化<br>而在vue中是只监听data属性的变化<br>vue中的生命周期函数要比react中的方法多<br>这些生命周期方法只能在spa应用中起作用，单独作为双向数据绑定库无法生效<br><code>vue生命周期图</code><br><img src=\"https://static.oschina.net/uploads/img/201704/24103726_vz9U.png\" alt=\"\"></p>\n<h5 id=\"模板语法\"><a href=\"#模板语法\" class=\"headerlink\" title=\"模板语法\"></a>模板语法</h5><p>就是如何在.vue文件的template标签中书写内容</p>\n<p>v-once指令只会执行一次性地插值，当数据改变时，插值处的内容不会更新。但请留心这会影响到该节点上所有的数据绑定：<br>v-html会按照html规则去解析内容<br>我们在为标签的属性赋值的时候不能Mustache语法，我们要用v-bind指令<br>v-bind绑定的属性必须是data属性里面定义的值，如果想写固定的值加单引号<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 错误的写法</div><div class=\"line\">&lt;div id=&quot;&#123;&#123;id&#125;&#125;&quot;&gt;&lt;/div&gt;</div><div class=\"line\">// 正确的写法</div><div class=\"line\">&lt;div v-bind:id=&quot;id&quot;&gt;&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>在Mustache中可以处理一些简单的js表达式，Mustache中的属性本身有什么方法，在里面也是可以直接使用的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;&#123; number + 1 &#125;&#125;</div><div class=\"line\">&#123;&#123; ok ? &apos;YES&apos; : &apos;NO&apos; &#125;&#125;</div><div class=\"line\">&#123;&#123; message.split(&apos;&apos;).reverse().join(&apos;&apos;) &#125;&#125;</div><div class=\"line\">&lt;div v-bind:id=&quot;&apos;list-&apos; + id&quot;&gt;&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>在Mustache中可以使用自定义过滤器，也可以多过滤器串联。但是过滤器不能用在v-bind中，如果想实现相同的效果在v-bind中我们要用计算属性<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;&#123; message | capitalize &#125;&#125;</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; message | filterA | filterB &#125;&#125;</div><div class=\"line\"></div><div class=\"line\">new Vue(&#123;</div><div class=\"line\">  // ...</div><div class=\"line\">  filters: &#123;</div><div class=\"line\">    capitalize: function (value) &#123;</div><div class=\"line\">      if (!value) return &apos;&apos;</div><div class=\"line\">      value = value.toString()</div><div class=\"line\">      return value.charAt(0).toUpperCase() + value.slice(1)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>在dom标签中可以使用指令，如v-if，v-for<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;a v-on:click=&quot;doSomething&quot;&gt;</div></pre></td></tr></table></figure></p>\n<p>在dom的事件中可以使用修饰符去帮你简化一些操作<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;form v-on:submit.prevent=&quot;onSubmit&quot;&gt;&lt;/form&gt;</div></pre></td></tr></table></figure></p>\n<p>v-bind和v-on在模板语法中可以缩写<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">//完整语法</div><div class=\"line\">&lt;a v-bind:href=&quot;url&quot;&gt;&lt;/a&gt;</div><div class=\"line\">//缩写</div><div class=\"line\">&lt;a :href=&quot;url&quot;&gt;&lt;/a&gt;</div><div class=\"line\">//完整语法</div><div class=\"line\">&lt;a v-on:click=&quot;doSomething&quot;&gt;&lt;/a&gt;</div><div class=\"line\">// 缩写</div><div class=\"line\">&lt;a @click=&quot;doSomething&quot;&gt;&lt;/a&gt;</div></pre></td></tr></table></figure></p>\n<h4 id=\"计算属性\"><a href=\"#计算属性\" class=\"headerlink\" title=\"计算属性\"></a>计算属性</h4><p>计算属性可以处理模板语法中的复杂业务逻辑，跟Mustache语法比<br>计算属性 vs methods</p>\n<p>我们看到计算属性和methods的效果基本你一样，那么他们的区别是什么？<br>计算属性的依赖如果没有发生变化，当你再次调用计算属性的时候，能够立即返回上次缓存的计算值，而不需要从新执行计算属性的方法<br>而方法需要从新执行方法体<br>样例<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;template&gt;</div><div class=\"line\">    &lt;div&gt;</div><div class=\"line\">        &lt;p&gt;Original message: &quot;&#123;&#123; message &#125;&#125;&#123;&#123;name&#125;&#125;&quot;&lt;/p&gt;</div><div class=\"line\">        &lt;p&gt;Computed reversed message: &quot;&#123;&#123; reversedMessage &#125;&#125;&quot;&lt;/p&gt;</div><div class=\"line\">        &lt;p&gt;Computed reversed message: &quot;&#123;&#123; reverseMessage() &#125;&#125;&quot;&lt;/p&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">&lt;/template&gt;</div><div class=\"line\">&lt;style&gt;</div><div class=\"line\">    body&#123;</div><div class=\"line\">        background-color:#ff0000;</div><div class=\"line\">    &#125;</div><div class=\"line\">&lt;/style&gt;</div><div class=\"line\">&lt;script&gt;</div><div class=\"line\">    export default&#123;</div><div class=\"line\">        data()&#123;</div><div class=\"line\">            return&#123;</div><div class=\"line\">                message: &apos;Hello&apos;,</div><div class=\"line\">                name:&apos;a&apos;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        mounted()&#123;</div><div class=\"line\">            this.name=&quot;b&quot;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        computed: &#123;</div><div class=\"line\">            reversedMessage: function () &#123;</div><div class=\"line\">                console.log(&apos;计算属性被调用了&apos;)</div><div class=\"line\">                return this.message.split(&apos;&apos;).reverse().join(&apos;&apos;)</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        methods: &#123;</div><div class=\"line\">            reverseMessage: function () &#123;</div><div class=\"line\">                console.log(&apos;方法被执行了&apos;)</div><div class=\"line\">                return this.message.split(&apos;&apos;).reverse().join(&apos;&apos;)</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure></p>\n<p>计算属性 vs watch</p>\n<p>watch方法每次只能监听一个data值的变化<br>而计算属性可以同时监听多个data值的变化<br>用计算属性可以简化watch中重复的代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!--页面--&gt;</div><div class=\"line\">&lt;div id=&quot;demo&quot;&gt;&#123;&#123; fullName &#125;&#125;&lt;/div&gt;</div><div class=\"line\">  //watch写法</div><div class=\"line\">  var vm = new Vue(&#123;</div><div class=\"line\">    el: &apos;#demo&apos;,</div><div class=\"line\">    data: &#123;</div><div class=\"line\">      firstName: &apos;Foo&apos;,</div><div class=\"line\">      lastName: &apos;Bar&apos;,</div><div class=\"line\">      fullName: &apos;Foo Bar&apos;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    watch: &#123;</div><div class=\"line\">      firstName: function (val) &#123;</div><div class=\"line\">        this.fullName = val + &apos; &apos; + this.lastName</div><div class=\"line\">      &#125;,</div><div class=\"line\">      lastName: function (val) &#123;</div><div class=\"line\">        this.fullName = this.firstName + &apos; &apos; + val</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;)</div><div class=\"line\">  //计算属性的写法</div><div class=\"line\">  //本质是你要获取全名</div><div class=\"line\">  var vm = new Vue(&#123;</div><div class=\"line\">    el: &apos;#demo&apos;,</div><div class=\"line\">    data: &#123;</div><div class=\"line\">      firstName: &apos;Foo&apos;,</div><div class=\"line\">      lastName: &apos;Bar&apos;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    computed: &#123;</div><div class=\"line\">      fullName: function () &#123;</div><div class=\"line\">        return this.firstName + &apos; &apos; + this.lastName</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;)</div></pre></td></tr></table></figure></p>\n<p>计算setter</p>\n<p>计算属性默认是只有getter的，那么data属性里面你的值发生改变了，计算属性要从新执行<br>而setter的作用是调用计算属性的时候给一个初始值，那么data属性里面的值也会跟着做相应的改变<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 接上面的代码段</div><div class=\"line\">computed: &#123;</div><div class=\"line\">  fullName: &#123;</div><div class=\"line\">    // getter</div><div class=\"line\">    get: function () &#123;</div><div class=\"line\">      return this.firstName + &apos; &apos; + this.lastName</div><div class=\"line\">    &#125;,</div><div class=\"line\">    // setter</div><div class=\"line\">    set: function (newValue) &#123;</div><div class=\"line\">      var names = newValue.split(&apos; &apos;)</div><div class=\"line\">      this.firstName = names[0]</div><div class=\"line\">      this.lastName = names[names.length - 1]</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>vue实例上的观察watch还是很有用的，在进行执行异步操作或昂贵操作时，我们要用watch这个实例属性<br>因为你不要忘记计算属性出现的原因是为了解决mustache语法中有过多的逻辑操作问题，它只能进行一些小型操作的内容<br>Class与Style绑定</p>\n<p>绑定要用v-bind:class和:bind:style<br>v-bind:class指令可以与普通的class属性共存<br>绑定的时候可以给对象，可以个数组，还可以有条件判断和三元表达式<br>条件渲染</p>\n<p>v-if和v-else只能控制一个标签的渲染，而且v-else要紧跟着v-if<br>如果想要控制一部分标签的渲染，需要用<template>标签包裹，v-if作用在template标签上<br>v-show也可以控制标签的显示隐藏，不过只是简单的切换样式<br>v-show的元素会始终渲染并保持在 DOM 中，v-if的元素会被移除<br>注意 v-show 不支持 <template> 语法<br>v-if是惰性的，只有在条件第一次为true的时候才进行局部渲染吧<br>v-if有更高的切换消耗，v-show有更高的初始渲染消耗。因此如果需要频繁切换使用v-show较好，如果在运行时条件不大可能改变则使用v-if较好。<br>列表渲染</p>\n<p>v-for是vue中做循环的，值可以给数组，对象，数值三种类型<br>可以用of替换in<br>如果想循环渲染一部分标签，要用template标签包裹，v-for作用在template标签上<br>在循环渲染引入的自定义组件的时候要手动为组件传递item的属性值<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;my-components</div><div class=\"line\">  is=&quot;todo-item&quot;</div><div class=\"line\">  v-for=&quot;(item, index) in todos&quot;</div><div class=\"line\">  v-bind:title=&quot;item&quot;</div><div class=\"line\">  v-on:remove=&quot;item.splice(index, 1)&quot;</div><div class=\"line\">&gt;</div><div class=\"line\">&lt;/my-components&gt;</div></pre></td></tr></table></figure></p>\n<p>在循环渲染的时候要动态的绑定v-bind:key,这样可以提升vue的渲染效率<br>Vue 包含一组观察数组的变异方法，只要调用它们将会触发视图更新，并且改变了原数组<br>push() pop() shift() unshift() splice() sort() reverse()<br>重塑数组不会改变原来的数据，而是返回一个改变之后的新数据<br>filter(), concat(), slice()<br>重塑数组一般是赋值用，这样才能触发vue的重新渲染，而你并不需要担心性能问题，因为vue会智能的重用数组<br>由于JavaScript 的限制，Vue不能检测以下变动的数组：<br>当你直接设置一个项的索引时，例如： vm.items[indexOfItem] = newValue<br>用Vue.set解决<br>当你修改数组的长度时，例如： vm.items.length = newLength<br>用splice解决<br>v-for结合计属性或者methods时可以做数据的过滤和排序<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">// &lt;li v-for=&quot;n in evenNumbers&quot;&gt;&#123;&#123; n &#125;&#125;&lt;/li&gt;</div><div class=\"line\"></div><div class=\"line\">data: &#123;</div><div class=\"line\">  numbers: [ 1, 2, 3, 4, 5 ]</div><div class=\"line\">&#125;,</div><div class=\"line\">computed: &#123;</div><div class=\"line\">  evenNumbers: function () &#123;</div><div class=\"line\">    return this.numbers.filter(function (number) &#123;</div><div class=\"line\">      return number % 2 === 0</div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"事件处理器\"><a href=\"#事件处理器\" class=\"headerlink\" title=\"事件处理器\"></a>事件处理器</h4><p>在v-on:click的时候想既传递参数又想传递事件对象，那么你需要手动传入$event参数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;button v-on:click=&quot;warn(&apos;Form cannot be submitted yet.&apos;, $event)&quot;&gt;Submit&lt;/button&gt;</div><div class=\"line\">methods: &#123;</div><div class=\"line\">  warn: function (message, event) &#123;</div><div class=\"line\">    // 现在我们可以访问原生事件对象</div><div class=\"line\">    if (event) event.preventDefault()</div><div class=\"line\">    alert(message)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"常用事件修饰符\"><a href=\"#常用事件修饰符\" class=\"headerlink\" title=\"常用事件修饰符\"></a>常用事件修饰符</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- 阻止单击事件冒泡 --&gt;</div><div class=\"line\">&lt;a v-on:click.stop=&quot;doThis&quot;&gt;&lt;/a&gt;</div><div class=\"line\">&lt;!-- 提交事件不再重载页面 --&gt;</div><div class=\"line\">&lt;form v-on:submit.prevent=&quot;onSubmit&quot;&gt;&lt;/form&gt;</div><div class=\"line\">&lt;!-- 修饰符可以串联  --&gt;</div><div class=\"line\">&lt;a v-on:click.stop.prevent=&quot;doThat&quot;&gt;&lt;/a&gt;</div><div class=\"line\">&lt;!-- 只有修饰符 --&gt;</div><div class=\"line\">&lt;form v-on:submit.prevent&gt;&lt;/form&gt;</div><div class=\"line\">&lt;!-- 添加事件侦听器时使用时间捕获模式 --&gt;</div><div class=\"line\">&lt;div v-on:click.capture=&quot;doThis&quot;&gt;...&lt;/div&gt;</div><div class=\"line\">&lt;!-- 只当事件在该元素本身（而不是子元素）触发时触发回调 --&gt;</div><div class=\"line\">&lt;div v-on:click.self=&quot;doThat&quot;&gt;...&lt;/div&gt;</div><div class=\"line\">&lt;!-- the click event will be triggered at most once --&gt;</div><div class=\"line\">&lt;a v-on:click.once=&quot;doThis&quot;&gt;&lt;/a&gt;</div></pre></td></tr></table></figure>\n<h4 id=\"常见的按键修饰符\"><a href=\"#常见的按键修饰符\" class=\"headerlink\" title=\"常见的按键修饰符\"></a>常见的按键修饰符</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- 只有在 keyCode 是 13 时调用 vm.submit() --&gt;</div><div class=\"line\">&lt;input v-on:keyup.13=&quot;submit&quot;&gt;</div><div class=\"line\">&lt;!-- 同上 --&gt;</div><div class=\"line\">&lt;input v-on:keyup.enter=&quot;submit&quot;&gt;</div><div class=\"line\">&lt;!-- 缩写语法 --&gt;</div><div class=\"line\">&lt;input @keyup.enter=&quot;submit&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;!--全部的按键别名：--&gt;</div><div class=\"line\"></div><div class=\"line\">    enter</div><div class=\"line\">    tab</div><div class=\"line\">    delete (捕获 “删除” 和 “退格” 键)</div><div class=\"line\">    esc</div><div class=\"line\">    space</div><div class=\"line\">    up</div><div class=\"line\">    down</div><div class=\"line\">    left</div><div class=\"line\">    right</div><div class=\"line\">    ctrl</div><div class=\"line\">    alt</div><div class=\"line\">    shift</div><div class=\"line\">    meta</div><div class=\"line\">通过全局 config.keyCodes自定义按键修饰符别名,记住要在new新实例之前注册</div><div class=\"line\">// 可以使用 v-on:keyup.f1</div><div class=\"line\">Vue.config.keyCodes.f1 = 112</div></pre></td></tr></table></figure>\n<h4 id=\"表单控件绑定\"><a href=\"#表单控件绑定\" class=\"headerlink\" title=\"表单控件绑定\"></a>表单控件绑定</h4><p>表单的双向绑定用v-model指令<br>在文本区域插值<textarea></textarea>并不会生效，应用v-model来代替<br>单个复选按钮绑定的是选中状态，多个复选按钮绑定的是值<br>列表没有value值绑定的是标签内容，有value值绑定的就是value值<br>如果想让表单的value属性绑定到Vue实例的动态属性上，需要用v-bind:value绑定<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;input type=&quot;radio&quot; v-model=&quot;pick&quot; v-bind:value=&quot;a&quot;&gt;</div></pre></td></tr></table></figure></p>\n<p>.lazy修饰符可以实现单向数据绑定<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- 在 &quot;change&quot; 而不是 &quot;input&quot; 事件中更新 --&gt;</div><div class=\"line\">&lt;input v-model.lazy=&quot;msg&quot; &gt;</div></pre></td></tr></table></figure></p>\n<p>组件</p>\n<p>组件可以扩展 HTML 元素，封装可重用的代码。在较高层面上，组件是自定义元素， Vue.js 的编译器为它添加特殊功能。在有些情况下，组件也可以是原生 HTML 元素的形式，以 is 特性扩展。<br>组件是类似于angualr中自定义指令，是vue中的一种自定义标签<br>相当于react中的通用组件，高可复用性的（例如：列表，按钮，等待器）<br>组件的使用</p>\n<h4 id=\"全局注册组件\"><a href=\"#全局注册组件\" class=\"headerlink\" title=\"全局注册组件\"></a>全局注册组件</h4><p>全局组件的定义一定要在创建根实例之前<br>在全局注册的组件可以在子组件的页面中随意使用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Vue.component(&apos;soupfree&apos;, &#123;</div><div class=\"line\">        template: &apos;&lt;div&gt;汤免费&lt;/div&gt;&apos;</div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">    const app = new Vue(&#123;</div><div class=\"line\">        el:&apos;#example&apos;</div><div class=\"line\">    &#125;)</div></pre></td></tr></table></figure></p>\n<h5 id=\"局部注册组件\"><a href=\"#局部注册组件\" class=\"headerlink\" title=\"局部注册组件\"></a>局部注册组件</h5><p>在要使用的组价中增加components属性，注册引入的组件并改名，之后才可以在html代码中使用<br>一般局部注册的组件都是通过.vue文件实现的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;template&gt;</div><div class=\"line\">    &lt;div&gt;</div><div class=\"line\">       姓名：汤免费，年龄：&#123;&#123;age&#125;&#125;,性别：&#123;&#123;genderSex&#125;&#125;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">&lt;/template&gt;</div><div class=\"line\">&lt;style scope&gt;</div><div class=\"line\">    div&#123;</div><div class=\"line\">        background-color:orange;</div><div class=\"line\">    &#125;</div><div class=\"line\">&lt;/style&gt;</div><div class=\"line\">&lt;script&gt;</div><div class=\"line\">    export default&#123;</div><div class=\"line\">        data()&#123;</div><div class=\"line\">            return&#123;</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        props:[&apos;age&apos;,&apos;genderSex&apos;]</div><div class=\"line\">    &#125;</div><div class=\"line\">&lt;/script&gt;</div><div class=\"line\">&lt;template&gt;</div><div class=\"line\">    &lt;div&gt;</div><div class=\"line\">        &lt;soup-free&gt;&lt;/soup-free&gt;</div><div class=\"line\">        &#123;&#123;msg&#125;&#125;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">&lt;/template&gt;</div><div class=\"line\">&lt;style&gt;</div><div class=\"line\">    body&#123;</div><div class=\"line\">        background-color:#ff0000;</div><div class=\"line\">    &#125;</div><div class=\"line\">&lt;/style&gt;</div><div class=\"line\">&lt;script&gt;</div><div class=\"line\">    import soupfree from &apos;../components/soupfree.vue&apos;</div><div class=\"line\">    export default&#123;</div><div class=\"line\">        data()&#123;</div><div class=\"line\">            return&#123;</div><div class=\"line\">                msg:&apos;hello vue&apos;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        components:&#123;</div><div class=\"line\">            &apos;soup-free&apos;:soupfree</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure></p>\n<h5 id=\"Dom模板解析问题\"><a href=\"#Dom模板解析问题\" class=\"headerlink\" title=\"Dom模板解析问题\"></a>Dom模板解析问题</h5><p>当你在一些特殊标签如table，ul，ol，select中使用自定义组件的时候会有一些限制</p>\n<p>例如<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;table&gt;</div><div class=\"line\">     &lt;my-row&gt;...&lt;/my-row&gt;</div><div class=\"line\">&lt;/table&gt;</div></pre></td></tr></table></figure></p>\n<p>因为Vue只有在浏览器解析和标准化HTML后才能获取模版内容<br>再准确的说也就是用Vue.component方法自定义的组件<br>is特性可以解决这个问题<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;table&gt;</div><div class=\"line\">  &lt;tr is=&quot;my-row&quot;&gt;&lt;/tr&gt;</div><div class=\"line\">&lt;/table&gt;</div></pre></td></tr></table></figure></p>\n<p>应当注意，如果您使用来自以下来源之一的字符串模板，这些限制将不适用：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script type=&quot;text/x-template&quot;&gt;</div></pre></td></tr></table></figure></p>\n<p>因为这里面的代码是内连载页面中的<br>JavaScript内联模版字符串<br>这个就是template属性<br>.vue 组件<br>在webpack构建的时候就已经处理了组件内容为html了<br>因此，有必要的话请使用字符串模版。<br>☆在自定义组件中data属性必须是函数形式☆</p>\n<p>也就是在Vue.component中和.vue文件中的data属性<br>如果是父子组件，那么父组件向子组件传递参数用props,子组件向父组件传递参数用$emit广播<br>props属性</p>\n<p>参数在传递的过程中，父组件传递参数用kebab-case（短横线隔开），在子组件接收的时候用camelCase<br>如果传递的属性来自父组件的data属性，也就是向子组件传递动态属性那么需要用v-bind去传递<br>如何传递的属性类型是数值型，那么也需要用v-bind去传递把<br><!-- 传递实际的数字 --></p>\n<p><comp v-bind:some-prop=\"1\"></comp><br>☆注意在JavaScript中对象和数组是引用类型，指向同一个内存空间，如果prop是一个对象或数组，在子组件内部改变它会影响父组件的状态。<br>注意一般情况下不要在子组件中改变父组件中传递过来的props，但是有两种特殊情况会改变<br>我们在传递属性的时候可以做属性校验<br>当prop验证失败了,Vue将拒绝在子组件上设置此值，如果使用的是开发版本会抛出一条警告。<br>自定义事件</p>\n<p>用v-on去绑定自定义事件<br>使用$on(eventName)监听事件<br>使用$emit(eventName)触发事件<br>在自定义组件上是不可以用v-model指令，但是这个效果可以通过自定义组件在内部用自定义事件模拟实现<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">Vue.component(&apos;currency-input&apos;, &#123;</div><div class=\"line\">  template: &apos;\\</div><div class=\"line\">    &lt;span&gt;\\</div><div class=\"line\">      $\\</div><div class=\"line\">      &lt;input\\</div><div class=\"line\">        ref=&quot;input&quot;\\</div><div class=\"line\">        v-bind:value=&quot;value&quot;\\</div><div class=\"line\">        v-on:input=&quot;updateValue($event.target.value)&quot;\\</div><div class=\"line\">      &gt;\\</div><div class=\"line\">    &lt;/span&gt;\\</div><div class=\"line\">  &apos;,</div><div class=\"line\">  props: [&apos;value&apos;],</div><div class=\"line\">  methods: &#123;</div><div class=\"line\">    // 不是直接更新值，而是使用此方法来对输入值进行格式化和位数限制</div><div class=\"line\">    updateValue: function (value) &#123;</div><div class=\"line\">      var formattedValue = value</div><div class=\"line\">        // 删除两侧的空格符</div><div class=\"line\">        .trim()</div><div class=\"line\">        // 保留 2 小数位</div><div class=\"line\">        .slice(0, value.indexOf(&apos;.&apos;) + 3)</div><div class=\"line\">      // 如果值不统一，手动覆盖以保持一致</div><div class=\"line\">      if (formattedValue !== value) &#123;</div><div class=\"line\">        this.$refs.input.value = formattedValue</div><div class=\"line\">      &#125;</div><div class=\"line\">      // 通过 input 事件发出数值</div><div class=\"line\">      this.$emit(&apos;input&apos;, Number(formattedValue))</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>兄弟组件之间的通信可以通过bus中央事件总线实现<br>但是更复杂的数据通信最好还是用vuex<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 在根组件中注册bus属性</div><div class=\"line\">const app = new Vue(&#123;</div><div class=\"line\">    data:&#123;</div><div class=\"line\">        bus:new Vue()</div><div class=\"line\">    &#125;,</div><div class=\"line\">    render: h =&gt; h(AppContainer),</div><div class=\"line\">&#125;).$mount(&apos;#app&apos;)</div><div class=\"line\">// 在子组件中使用</div><div class=\"line\">this.$root.bus.$emit(&apos;eventName&apos;,2323)</div></pre></td></tr></table></figure></p>\n<p>slot分发</p>\n<p>在自定义组件使用的时候，如果页面中有内容，又想让内容在自定义组件中使用，我们需要养slot标签<br>slot标签在一个html标签中只能出现一次<br>作用域插槽是一种特殊类型的插槽，用作使用一个（能够传递数据到）可重用模板替换已渲染元素。<br>通俗的说就是子组件里面的数据可以通过作用域插槽用在父组件页面中的指定区域内<br>动态组件</p>\n<p>组件可以通过is特性动态加载<br>你可以用keep-alive指令缓存组件<br>杂项</p>\n<p>你可以通过ref属性标记一个组件，之后可以用this.$refs.标记的名称或得到该组件<br>当ref和v-for一起使用时，ref是一个数组或对象，包含相应的子组件。<br>$refs只在组件渲染完成后才填充，并且它是非响应式的。它仅仅作为一个直接访问子组件的应急方案——应当避免在模版或计算属性中使用$refs</p>\n<h5 id=\"组件的异步加载\"><a href=\"#组件的异步加载\" class=\"headerlink\" title=\"组件的异步加载\"></a>组件的异步加载</h5><h5 id=\"组件命名规范\"><a href=\"#组件命名规范\" class=\"headerlink\" title=\"组件命名规范\"></a>组件命名规范</h5><h5 id=\"组件的递归调用\"><a href=\"#组件的递归调用\" class=\"headerlink\" title=\"组件的递归调用\"></a>组件的递归调用</h5><p>组件上的name属性还是这个组件在全局注册时候的名字<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;unique-name-of-my-component name=&quot;unique-name-of-my-component&quot;&gt;&lt;/unique-name-of-my-component&gt;</div></pre></td></tr></table></figure></p>\n<h5 id=\"组件的循环引用\"><a href=\"#组件的循环引用\" class=\"headerlink\" title=\"组件的循环引用\"></a>组件的循环引用</h5><p>Vue.component全局注册组件后，这个问题会自动解决，你要做的就是在写代码的时候不要出现组件循环引用<br>内联模板</p>\n<p>通俗的说就是在定义组件的时候不用给template属性了<br>x-Templates</p>"},{"title":"前端功能代码块","date":"2017-04-17T03:10:57.000Z","from":"原","_content":"\n#### 摇一摇\n```\nvar speed = 15;//摇动速度\nvar flag=true;\nvar x = y = z = lastX = lastY = lastZ = 0;\n$(function(){\n    if(window.DeviceMotionEvent) {\n    \twindow.addEventListener('devicemotion', shakeHandler, false);\n    }\n});\n\nfunction shakeHandler(event){\n    var acceleration =event.accelerationIncludingGravity;//将传感值赋给acceleration\n    x = acceleration.x;\n    y = acceleration.y;\n    z = acceleration.z;\n    if(Math.abs(x-lastX) > speed || Math.abs(y-lastY) > speed ) {\n    \tif(flag==true){\n    \t   flag=false;\n\n    \t}\n    }\n    lastX = x;\n    lastY = y;\n    lastZ = z;\n}\n```\n<!--more-->\n#### 计算rem\n\n```\n(function (doc, win) {\n  var docEl = doc.documentElement,\n\tresizeEvt = 'orientationchange' in window ? 'orientationchange' : 'resize',\n\trecalc = function () {\n\t  var clientWidth = docEl.clientWidth;\n\t  if (!clientWidth) return;\n\t  docEl.style.fontSize = 20 * (clientWidth / 320) + 'px';\n\t};\n  if (!doc.addEventListener) return;\n  win.addEventListener(resizeEvt, recalc, false);\n  doc.addEventListener('DOMContentLoaded', recalc, false);\n})(document, window);\n```\n\n\n#### 禁止连续点击\n\n```\ncheckscroll();\nfunction checkscroll(){\n\t var agent = navigator.userAgent.toLowerCase();        //检测是否是ios\n\t\tvar iLastTouch = null;                                //缓存上一次tap的时间\n\t\tif (agent.indexOf('iphone') >= 0 || agent.indexOf('ipad') >= 0)\n\t\t{\n\t\t\tdocument.body.addEventListener('touchend', function(event)\n\t\t\t{\n\t\t\t\tvar iNow = new Date()\n\t\t\t\t\t.getTime();\n\t\t\t\tiLastTouch = iLastTouch || iNow + 1 /** 第一次时将iLastTouch设为当前时间+1 */ ;\n\t\t\t\tvar delta = iNow - iLastTouch;\n\t\t\t\tif (delta < 500 && delta > 0)\n\t\t\t\t{\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tiLastTouch = iNow;\n\t\t\t}, false);\n\t\t}\n}\n```\n\n#### node删除文件\n`遍历文件`\n```\n//遍历文件\nconst deleteFolder = function(path) {\n    let files = []\n    if(fs.existsSync(path)) {\n        files = fs.readdirSync(path)\n        files.forEach(function(file,index){\n            let curPath = path + \"/\" + file\n            if(fs.statSync(curPath).isDirectory()) { // recurse\n                deleteFolder(curPath)\n            } else { // delete file\n                fs.unlinkSync(curPath)\n            }\n        });\n        fs.rmdirSync(path)\n    }\n}\n```\n`执行系统命令`\n```\nvar exec = require('child_process').exec,child;\nchild = exec('rm -rf test',function(err,out) {\n  console.log(out); err && console.log(err);\n});\n```\n","source":"_posts/前端功能代码块.md","raw":"---\ntitle: 前端功能代码块\ntags:\n  - ''\ncategories:\n  - '前端'\n  - '代码块'\ndate: 2017-04-17 11:10:57\nfrom: '原'\n---\n\n#### 摇一摇\n```\nvar speed = 15;//摇动速度\nvar flag=true;\nvar x = y = z = lastX = lastY = lastZ = 0;\n$(function(){\n    if(window.DeviceMotionEvent) {\n    \twindow.addEventListener('devicemotion', shakeHandler, false);\n    }\n});\n\nfunction shakeHandler(event){\n    var acceleration =event.accelerationIncludingGravity;//将传感值赋给acceleration\n    x = acceleration.x;\n    y = acceleration.y;\n    z = acceleration.z;\n    if(Math.abs(x-lastX) > speed || Math.abs(y-lastY) > speed ) {\n    \tif(flag==true){\n    \t   flag=false;\n\n    \t}\n    }\n    lastX = x;\n    lastY = y;\n    lastZ = z;\n}\n```\n<!--more-->\n#### 计算rem\n\n```\n(function (doc, win) {\n  var docEl = doc.documentElement,\n\tresizeEvt = 'orientationchange' in window ? 'orientationchange' : 'resize',\n\trecalc = function () {\n\t  var clientWidth = docEl.clientWidth;\n\t  if (!clientWidth) return;\n\t  docEl.style.fontSize = 20 * (clientWidth / 320) + 'px';\n\t};\n  if (!doc.addEventListener) return;\n  win.addEventListener(resizeEvt, recalc, false);\n  doc.addEventListener('DOMContentLoaded', recalc, false);\n})(document, window);\n```\n\n\n#### 禁止连续点击\n\n```\ncheckscroll();\nfunction checkscroll(){\n\t var agent = navigator.userAgent.toLowerCase();        //检测是否是ios\n\t\tvar iLastTouch = null;                                //缓存上一次tap的时间\n\t\tif (agent.indexOf('iphone') >= 0 || agent.indexOf('ipad') >= 0)\n\t\t{\n\t\t\tdocument.body.addEventListener('touchend', function(event)\n\t\t\t{\n\t\t\t\tvar iNow = new Date()\n\t\t\t\t\t.getTime();\n\t\t\t\tiLastTouch = iLastTouch || iNow + 1 /** 第一次时将iLastTouch设为当前时间+1 */ ;\n\t\t\t\tvar delta = iNow - iLastTouch;\n\t\t\t\tif (delta < 500 && delta > 0)\n\t\t\t\t{\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tiLastTouch = iNow;\n\t\t\t}, false);\n\t\t}\n}\n```\n\n#### node删除文件\n`遍历文件`\n```\n//遍历文件\nconst deleteFolder = function(path) {\n    let files = []\n    if(fs.existsSync(path)) {\n        files = fs.readdirSync(path)\n        files.forEach(function(file,index){\n            let curPath = path + \"/\" + file\n            if(fs.statSync(curPath).isDirectory()) { // recurse\n                deleteFolder(curPath)\n            } else { // delete file\n                fs.unlinkSync(curPath)\n            }\n        });\n        fs.rmdirSync(path)\n    }\n}\n```\n`执行系统命令`\n```\nvar exec = require('child_process').exec,child;\nchild = exec('rm -rf test',function(err,out) {\n  console.log(out); err && console.log(err);\n});\n```\n","slug":"前端功能代码块","published":1,"updated":"2017-07-27T02:13:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5naxw4j000vfcxeds3rzm32","content":"<h4 id=\"摇一摇\"><a href=\"#摇一摇\" class=\"headerlink\" title=\"摇一摇\"></a>摇一摇</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">var speed = 15;//摇动速度</div><div class=\"line\">var flag=true;</div><div class=\"line\">var x = y = z = lastX = lastY = lastZ = 0;</div><div class=\"line\">$(function()&#123;</div><div class=\"line\">    if(window.DeviceMotionEvent) &#123;</div><div class=\"line\">    \twindow.addEventListener(&apos;devicemotion&apos;, shakeHandler, false);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">function shakeHandler(event)&#123;</div><div class=\"line\">    var acceleration =event.accelerationIncludingGravity;//将传感值赋给acceleration</div><div class=\"line\">    x = acceleration.x;</div><div class=\"line\">    y = acceleration.y;</div><div class=\"line\">    z = acceleration.z;</div><div class=\"line\">    if(Math.abs(x-lastX) &gt; speed || Math.abs(y-lastY) &gt; speed ) &#123;</div><div class=\"line\">    \tif(flag==true)&#123;</div><div class=\"line\">    \t   flag=false;</div><div class=\"line\"></div><div class=\"line\">    \t&#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    lastX = x;</div><div class=\"line\">    lastY = y;</div><div class=\"line\">    lastZ = z;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h4 id=\"计算rem\"><a href=\"#计算rem\" class=\"headerlink\" title=\"计算rem\"></a>计算rem</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">(function (doc, win) &#123;</div><div class=\"line\">  var docEl = doc.documentElement,</div><div class=\"line\">\tresizeEvt = &apos;orientationchange&apos; in window ? &apos;orientationchange&apos; : &apos;resize&apos;,</div><div class=\"line\">\trecalc = function () &#123;</div><div class=\"line\">\t  var clientWidth = docEl.clientWidth;</div><div class=\"line\">\t  if (!clientWidth) return;</div><div class=\"line\">\t  docEl.style.fontSize = 20 * (clientWidth / 320) + &apos;px&apos;;</div><div class=\"line\">\t&#125;;</div><div class=\"line\">  if (!doc.addEventListener) return;</div><div class=\"line\">  win.addEventListener(resizeEvt, recalc, false);</div><div class=\"line\">  doc.addEventListener(&apos;DOMContentLoaded&apos;, recalc, false);</div><div class=\"line\">&#125;)(document, window);</div></pre></td></tr></table></figure>\n<h4 id=\"禁止连续点击\"><a href=\"#禁止连续点击\" class=\"headerlink\" title=\"禁止连续点击\"></a>禁止连续点击</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">checkscroll();</div><div class=\"line\">function checkscroll()&#123;</div><div class=\"line\">\t var agent = navigator.userAgent.toLowerCase();        //检测是否是ios</div><div class=\"line\">\t\tvar iLastTouch = null;                                //缓存上一次tap的时间</div><div class=\"line\">\t\tif (agent.indexOf(&apos;iphone&apos;) &gt;= 0 || agent.indexOf(&apos;ipad&apos;) &gt;= 0)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tdocument.body.addEventListener(&apos;touchend&apos;, function(event)</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\tvar iNow = new Date()</div><div class=\"line\">\t\t\t\t\t.getTime();</div><div class=\"line\">\t\t\t\tiLastTouch = iLastTouch || iNow + 1 /** 第一次时将iLastTouch设为当前时间+1 */ ;</div><div class=\"line\">\t\t\t\tvar delta = iNow - iLastTouch;</div><div class=\"line\">\t\t\t\tif (delta &lt; 500 &amp;&amp; delta &gt; 0)</div><div class=\"line\">\t\t\t\t&#123;</div><div class=\"line\">\t\t\t\t\tevent.preventDefault();</div><div class=\"line\">\t\t\t\t\treturn false;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\tiLastTouch = iNow;</div><div class=\"line\">\t\t\t&#125;, false);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"node删除文件\"><a href=\"#node删除文件\" class=\"headerlink\" title=\"node删除文件\"></a>node删除文件</h4><p><code>遍历文件</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">//遍历文件</div><div class=\"line\">const deleteFolder = function(path) &#123;</div><div class=\"line\">    let files = []</div><div class=\"line\">    if(fs.existsSync(path)) &#123;</div><div class=\"line\">        files = fs.readdirSync(path)</div><div class=\"line\">        files.forEach(function(file,index)&#123;</div><div class=\"line\">            let curPath = path + &quot;/&quot; + file</div><div class=\"line\">            if(fs.statSync(curPath).isDirectory()) &#123; // recurse</div><div class=\"line\">                deleteFolder(curPath)</div><div class=\"line\">            &#125; else &#123; // delete file</div><div class=\"line\">                fs.unlinkSync(curPath)</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        fs.rmdirSync(path)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>执行系统命令</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var exec = require(&apos;child_process&apos;).exec,child;</div><div class=\"line\">child = exec(&apos;rm -rf test&apos;,function(err,out) &#123;</div><div class=\"line\">  console.log(out); err &amp;&amp; console.log(err);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n","excerpt":"<h4 id=\"摇一摇\"><a href=\"#摇一摇\" class=\"headerlink\" title=\"摇一摇\"></a>摇一摇</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">var speed = 15;//摇动速度</div><div class=\"line\">var flag=true;</div><div class=\"line\">var x = y = z = lastX = lastY = lastZ = 0;</div><div class=\"line\">$(function()&#123;</div><div class=\"line\">    if(window.DeviceMotionEvent) &#123;</div><div class=\"line\">    \twindow.addEventListener(&apos;devicemotion&apos;, shakeHandler, false);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">function shakeHandler(event)&#123;</div><div class=\"line\">    var acceleration =event.accelerationIncludingGravity;//将传感值赋给acceleration</div><div class=\"line\">    x = acceleration.x;</div><div class=\"line\">    y = acceleration.y;</div><div class=\"line\">    z = acceleration.z;</div><div class=\"line\">    if(Math.abs(x-lastX) &gt; speed || Math.abs(y-lastY) &gt; speed ) &#123;</div><div class=\"line\">    \tif(flag==true)&#123;</div><div class=\"line\">    \t   flag=false;</div><div class=\"line\"></div><div class=\"line\">    \t&#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    lastX = x;</div><div class=\"line\">    lastY = y;</div><div class=\"line\">    lastZ = z;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","more":"<h4 id=\"计算rem\"><a href=\"#计算rem\" class=\"headerlink\" title=\"计算rem\"></a>计算rem</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">(function (doc, win) &#123;</div><div class=\"line\">  var docEl = doc.documentElement,</div><div class=\"line\">\tresizeEvt = &apos;orientationchange&apos; in window ? &apos;orientationchange&apos; : &apos;resize&apos;,</div><div class=\"line\">\trecalc = function () &#123;</div><div class=\"line\">\t  var clientWidth = docEl.clientWidth;</div><div class=\"line\">\t  if (!clientWidth) return;</div><div class=\"line\">\t  docEl.style.fontSize = 20 * (clientWidth / 320) + &apos;px&apos;;</div><div class=\"line\">\t&#125;;</div><div class=\"line\">  if (!doc.addEventListener) return;</div><div class=\"line\">  win.addEventListener(resizeEvt, recalc, false);</div><div class=\"line\">  doc.addEventListener(&apos;DOMContentLoaded&apos;, recalc, false);</div><div class=\"line\">&#125;)(document, window);</div></pre></td></tr></table></figure>\n<h4 id=\"禁止连续点击\"><a href=\"#禁止连续点击\" class=\"headerlink\" title=\"禁止连续点击\"></a>禁止连续点击</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">checkscroll();</div><div class=\"line\">function checkscroll()&#123;</div><div class=\"line\">\t var agent = navigator.userAgent.toLowerCase();        //检测是否是ios</div><div class=\"line\">\t\tvar iLastTouch = null;                                //缓存上一次tap的时间</div><div class=\"line\">\t\tif (agent.indexOf(&apos;iphone&apos;) &gt;= 0 || agent.indexOf(&apos;ipad&apos;) &gt;= 0)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tdocument.body.addEventListener(&apos;touchend&apos;, function(event)</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\tvar iNow = new Date()</div><div class=\"line\">\t\t\t\t\t.getTime();</div><div class=\"line\">\t\t\t\tiLastTouch = iLastTouch || iNow + 1 /** 第一次时将iLastTouch设为当前时间+1 */ ;</div><div class=\"line\">\t\t\t\tvar delta = iNow - iLastTouch;</div><div class=\"line\">\t\t\t\tif (delta &lt; 500 &amp;&amp; delta &gt; 0)</div><div class=\"line\">\t\t\t\t&#123;</div><div class=\"line\">\t\t\t\t\tevent.preventDefault();</div><div class=\"line\">\t\t\t\t\treturn false;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\tiLastTouch = iNow;</div><div class=\"line\">\t\t\t&#125;, false);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"node删除文件\"><a href=\"#node删除文件\" class=\"headerlink\" title=\"node删除文件\"></a>node删除文件</h4><p><code>遍历文件</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">//遍历文件</div><div class=\"line\">const deleteFolder = function(path) &#123;</div><div class=\"line\">    let files = []</div><div class=\"line\">    if(fs.existsSync(path)) &#123;</div><div class=\"line\">        files = fs.readdirSync(path)</div><div class=\"line\">        files.forEach(function(file,index)&#123;</div><div class=\"line\">            let curPath = path + &quot;/&quot; + file</div><div class=\"line\">            if(fs.statSync(curPath).isDirectory()) &#123; // recurse</div><div class=\"line\">                deleteFolder(curPath)</div><div class=\"line\">            &#125; else &#123; // delete file</div><div class=\"line\">                fs.unlinkSync(curPath)</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        fs.rmdirSync(path)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>执行系统命令</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var exec = require(&apos;child_process&apos;).exec,child;</div><div class=\"line\">child = exec(&apos;rm -rf test&apos;,function(err,out) &#123;</div><div class=\"line\">  console.log(out); err &amp;&amp; console.log(err);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>"},{"title":"前端mvc框架backbone.js","date":"2017-04-17T01:51:48.000Z","_content":"\n#### 简介\nWeb 应用程序越来越关注于前端，使用客户端脚本与 Ajax 进行交互。由于 JavaScript 应用程序越来越复杂，如果没有合适的工具和模式，那么 JavaScript 代码的高效编写、非重复性和可维护性方面会面临挑战。`模型-视图-控制器 (MVC) 是一个常见模式，可用于服务器端开发以生成有组织以及易维护的代码。`MVC 支持将数据（比如通常用于 Ajax 交互的 JavaScript Object Notation (JSON) 对象）从表示层或从页面的文档对象模型 (document object model, DOM) 中分离出来，也可适用于客户端开发。\n<!--more-->\n`Backbone（也称为 Backbone.js）`是由 Jeremy Ashkenas 创建的一个轻量级库，可用于创建 MVC 类应用程序。Backbone：\n强制依赖于 Underscore.js，`Underscore.js` 是一个实用型库\n非强制依赖于 jQuery/Zepto\n根据模型的变更自动更新应用程序的 HTML，有助于代码维护\n促进客户端模板使用，避免了在 JavaScript 中嵌入 HTML 代码\n模型、视图、集合和路由器是 Backbone 框架中的主要组件。在 Backbone 中，模型会存储通过 RESTful JSON 接口从服务器检索到的数据。模型与视图密切关联，负责为特定 UI 组件渲染 HTML 并处理元素上触发的事件，这也是视图本身的一部分。\n常用缩略词\n`DOM：文档对象模型\nMVC：模型-视图-控制器\nSPI：单页界面`\n\n\n#### SPI 应用程序：Backbone.Router 和 Backbone.history\n含有大量 Ajax 交互的应用程序越来越像那些无页面刷新的应用程序。这些应用程序常常试图限制与单个页面的交互。该 SPI 方法提高了效率和速度，并使整个应用程序变得更灵敏。状态概念代替了页面概念。散列 (Hash) 片段被用于识别一个特定状态。散列片段 是 URL 中散列标签 (#) 后的那部分，是该类应用程序的关键元素。清单 1 显示了一个 SPI 应用程序使用两个不同的散列片段产生的两个不同状态。\n#### 清单 1. SPI 或 Ajax 应用程序中的两个不同状态\nhttp://www.example.com/#/state1\nhttp://www.example.com/#/state2\nBackbone 提供一个称为路由器（版本 0.5 前称之为控制器）的组件来路由客户端状态。路由器可以扩展 Backbone.Router 函数，且包含一个散列映射（routes 属性）将状态与活动关联起来。当应用程序达到相关状态时，会触发一个特定活动。清单 2 展示了一个 Backbone 路由器示例。\n#### 清单 2. Backbone.Router 示例：routers.js\n```\nApp.Routers.Main = Backbone.Router.extend({\n\n   // Hash maps for routes\n   routes : {\n      \"\" : \"index\",\n      \"/teams\" : \"getTeams\",\n      \"/teams/:country\" : \"getTeamsCountry\",\n      \"/teams/:country/:name : \"getTeam\"\n      \"*error\" : \"fourOfour\"\n   },\n\n   index: function(){\n       // Homepage\n   },\n\n   getTeams: function() {\n       // List all teams\n   },\n   getTeamsCountry: function(country) {\n       // Get list of teams for specific country\n   },\n   getTeam: function(country, name) {\n       // Get the teams for a specific country and with a specific name\n   },\n   fourOfour: function(error) {\n       // 404 page\n   }\n});\n```\n创建的每个状态可以为书签。当 URL 碰到类似下面情况时，会调用这 5 个活动（index、getTeams、getTeamsCountry、getTeamCountry 和 fourOfour）。\nhttp://www.example.com 触发 index()\nhttp://www.example.com/#/teams 触发 getTeams()\nhttp://www.example.com/#/teams/country1 触发 getTeamsCountry() 传递 country1 作为参数\nhttp://www.example.com/#/teams/country1/team1 触发 getTeamCountry() 传递 country1 和 team1 作为参数\nhttp://www.example.com/#/something 触发 fourOfour() 以作 * （星号）使用。\n要启动 Backbone，先实例化页面加载的路由器，并通过指令 Backbone.history.start() 方法监视散列片段中的任何变更，如 清单 3 所示。\n#### 清单 3. 应用程序实例化（使用 jQuery）\n```\n$(function(){\n    var router = new App.Routers.Main();\n    Backbone.history.start({pushState : true});\n})\n```\n当实例化路由器时，会生成 Backbone.history 对象；它将自动引用 Backbone.History 函数。Backbone.History 负责匹配路由和 router 对象中定义的活动。start() 方法触发后，将创建 Backbone.history 的 fragment 属性。它包含散列片段的值。该序列在根据状态次序管理浏览器历史方面十分有用。用户如果想要返回前一状态，单击浏览器的返回按钮。\n在 清单 3 的示例中，通过一个启用 HTML5 特性 pushState 的配置调用 start() 方法。对于那些支持 pushState 的浏览器，Backbone 将监视 popstate 事件以触发一个新状态。如果浏览器不能支持 HTML5 特性，那么 onhashchange 活动会被监视。如果浏览器不支持该事件，轮询技术将监视 URL 散列片段的任何更改。\n\n模型和集合\n模型和集合是 Backbone.js 的重要组件，模型将数据（通常是来自服务器的数据）存储在键值对中。要创建一个模型，需要扩展 Backbone.Model，如 清单 4 所示。\n#### 清单 4. Backbone.Model 创建\n```\nApp.Models.Team = Backbone.Model.extend({\n    defaults : {\n       // default attributes\n    }\n    // Domain-specific methods go here\n});\n```\nApp.Models.Team 函数是一个新模型函数，但是必须创建一个实例才能在应用程序中使用特定模型，如 清单 5 所示。\n#### 清单 5. 模型实例化\n```\nvar team1 = new App.Models.Team();\n```\n现在，变量 team1 有一个名为 cid 的字段名，这是一个客户端标识符，形式为 \"c\" 再加上一个数字（例如，c0、c1、c2）。模型是通过存储在散列映射中的属性来定义的。属性可以在实例化时进行设置，或者使用 set() 方法设置。属性值可通过 get() 方法检索。清单 6 显示了如何通过实例化或 get()/set() 方法设置和获取属性。\n#### 清单 6. 模型实例化和 get/set 方法\n```\n// \"name\" attribute is set into the model\nvar team1 = new App.Models.Team({\n    name : \"name1\"\n});\nconsole.log(team1.get(\"name\")); // prints \"name1\"\n\n// \"name\" attribute is set with a new value\nteam1.set({\n    name : \"name2\"\n});\nconsole.log(team1.get(\"name\")); //prints \"name2\"\n```\n当使用 JavaScript 对象时，使用 set() 方法创建或者设置属性值的原因并不是显而易见的。其中一个原因是为了更新此值，如 清单 7 所示。\n#### 清单 7. 以错误的方法更新属性\n```\nteam1.attributes.name = \"name2\";\n```\n为了避免 使用 清单 7 中的代码，使用 set() 是改变模型状态并触发其变更事件的唯一方法。使用 set() 提升封装原则。清单 8 展示了如何将一个事件处理程序绑到发生变更的事件中。该事件处理程序包含一个 alert，在调用 set() 方法时会被触发，如 清单 6 所示。但是，在使用 清单 7 中的代码时不触发 alert。\n#### 清单 8. 更改 App.Models.Team 模型中的事件处理程序\n```\nApp.Models.Team = Backbone.Model.extend({\n    initialize : function(){\n        this.bind(\"change\", this.changed);\n    },\n    changed : function(){\n        alert(\"changed\");\n    }\n});\n```\nBackbone 的另一个优势是易于通过 Ajax 交互与服务器进行通信。在模型上调用一个 save() 方法会通过 REST JSON API 异步将当前状态保存到服务器。清单 9 展示了此示例。\n#### 清单 9. 在模型对象上调用 save 方法\n```\nbarca.save();\n```\nsave() 函数将在后台委托给 Backbone.sync，这是负责发出 RESTful 请求的组件，默认使用 jQuery 函数 $.ajax()。由于调用了 REST 风格架构，每个 Create、Read、Update 或 Delete (CRUD) 活动均会与各种不同类型的 HTTP 请求（POST、GET、PUT 和 DELETE）相关联。首先保存模型对象，使用一个 POST 请求，创建一个标识符 ID，其后，尝试发送对象到服务器，使用一个 PUT 请求。\n当需要从服务器检索一个模型时，请求一个 Read 活动并使用一个 Ajax GET 请求。这类请求使用 fetch() 方法。要确定导入模型数据或者从中取出模型数据的服务器的位置：\n如果模型属于一个 collection，那么集合对象的 url 属性将是该位置的基础，并且该模型 ID（不是 cid）会被附加以构成完整的 URL。\n如果模型不是在一个集合中，那么该模型的 urlroot 属性被用作该位置的基础\n清单 10 显示了如何获取一个模型。\n#### 清单 10. 模型对象的 Fetch() 方法\n```\nvar teamNew = new App.Models.Team({\n    urlRoot : '/specialTeams'\n});\nteamNew.save(); // returns model's ID equal to '222'\nteamNew.fetch(); // Ajax request to '/specialTeams/222'\n```\nvalidate() 方法被用于验证模型，如 清单 11 所示。需要重写 validate() 方法（在调用 set() 方法时触发）来包含模型的有效逻辑。传递给该函数的惟一参数是一个 JavaScript 对象，该对象包含了 set() 方法更新的属性，以便验证那些属性的条件。如果从 validate() 方法中没有返回任何内容，那么验证成功。如果返回一个错误消息，那么验证失败，将无法执行 set() 方法。\n#### 清单 11. 模型的验证方法\n```\nApp.Models.Team = Backbone.Model.extend({\n    validate : function(attributes){\n        if (!!attributes && attributes.name === \"teamX\") {\n            // Error message returned if the value of the \"name\"\n            // attribute is equal to \"teamX\"\n            return \"Error!\";\n        }\n    }\n}\n```\n一组模型被分组到到集合中，这个集合是 Backbone.Collection 的扩展函数。集合具有一个模型属性的特性，定义了组成该集合的模型类型。使用 add()/remove() 方法可以将一个模型添加和移动到集合中。清单 12 显示了如何创建和填充一个集合。\n#### 清单 12. Backbone 集合\n```\nApp.Collections.Teams = Backbone.Collection.extend({\n    model : App.Models.Team\n});\nvar teams = new App.Collections.Teams();\n\n// Add e model to the collection object \"teams\"\nteams.add(team1);\nteams.add(new App.Models.Team({\n    name : \"Team B\"\n}));\nteams.add(new App.Models.Team());\nteams.remove(team1);\n\nconsole.log(teams.length) // prints 2\n```\n创建的 teams 集合中包含一个含有两个模型的阵列，存储在模型属性中。尽管，在典型 Ajax 应用程序中，会从服务器动态（不是人工）填充该集合。fetch() 方法可以帮助完成此项任务，如 清单 13 所示，并将数据存储到模型阵列中。\n#### 清单 13. Fetch() 方法\n```\nteams.fetch();\n```\nBackbone 中的集合拥有一个 url 属性，定义了使用 Ajax GET 请求从服务器取出 JSON 数据的位置，如 清单 14 所示。\n#### 清单 14. 集合的 url 属性和 fetch() 方法\n```\nteams.url = '/getTeams';\nteams.fetch(); //Ajax GET Request to '/getTeams'\n```\nFetch() 方法属于异步调用，因此，在等待服务器响应时，应用程序不会中止。在一些情况下，要操作来自服务器的原始数据，可以使用集合的 parse() 方法。正如 清单 15 所示。\n#### 清单 15. parse() 方法\n```\nApp.Collections.Teams = Backbone.Collection.extend({\n    model : App.Models.Team,\n    parse : function(data) {\n        // 'data' contains the raw JSON object\n        console.log(data);\n    }\n});\n```\n集合提供的另一个有趣的方法是 reset()，它允许将多个模型设置到一个集合中。reset() 方法可以非常方便地将数据引导到集合中，比如页面加载，来避免用户等待异步调用返回。\n\n视图和客户端模板\nBackbone 中的视图与典型 MVC 方法的视图不一样。Backbone 视图可以扩展 Backbone.View 函数并显示模型中存储的数据。一个视图提供一个由 el 属性定义的 HTML 元素。该属性可以是由 tagName、className 和 id 属性相组合而构成的，或者是通过其本身的 el 值形成的。清单 16 显示了使用这不同方法组合 el 属性的两个不同视图。\n#### 清单 16. Backbone 视图样例\n```\n// In the following view, el value is 'UL.team-element'\nApp.Views.Teams = Backbone.View.extend({\n    el : 'UL.team-list'\n});\n// In the following view, el value is 'div.team-element'\nApp.Views.Team = Backbone.View.extend({\n    className : '.team-element',\n    tagName : 'div'\n});\n```\n如果 el、tagName、className 和 id 属性为空，那么会默认将一个空的 DIV 分配给 el。\n如上所述，一个视图必须与一个模型相关联。该模型属性也很有用，如 清单 17 所示。App.View.Team 视图被绑定到一个 App.Models.Team 模型实例。\n#### 清单 17. Backbone 视图中的模型属性\n```\n// In the following view, el value is 'UL.team-element'\nApp.Views.Team = Backbone.View.extend({\n    ...\n    model : new App.Models.Team\n});\n```\n要渲染数据（这是视图的主要目的），重写 render() 方法和逻辑来显示 DOM 元素（由 el 属性引用的）中的模型属性。清单 18 展示了一个 render 方法如何更新用户界面的样例。\n#### 清单 18. Render() 方法\n```\nApp.Views.Team = Backbone.View.extend({\n    className : '.team-element',\n    tagName : 'div',\n    model : new App.Models.Team\n    render : function() {\n        // Render the 'name' attribute of the model associated\n        // inside the DOM element referred by 'el'\n        $(this.el).html(\"<span>\" + this.model.get(\"name\") + \"</span>\");\n    }\n});\n```\nBackbone 也可以促进客户端模板的使用，这就使得我们没有必要在 JavaScript 中嵌入 HTML 代码，如 清单 18 所示。（使用模板，模板会封装视图中常见函数；只指定此函数一次即可。）Backbone 在 underscore.js（一个必须的库）中提供一个模板引擎，尽管没有必要使用该模板引擎。清单 19 中的实例使用 underscore.js HTML 模板。\n#### 清单 19. HTML 含有模板\n```\n<script id=\"teamTemplate\" type=\"text/template\">\n    <%= name %>\n</script>\n```\n清单 20 显示了另一个使用 underscore.js HTML 模板的样例。\n#### 清单 20. 使用 _.template() 函数的视图\n```\nApp.Views.Team = Backbone.View.extend({\n    className : '.team-element',\n    tagName : 'div',\n    model : new App.Models.Team\n    render : function() {\n        // Compile the template\n        var compiledTemplate = _.template($('#teamTemplate').html());\n        // Model attributes loaded into the template. Template is\n        // appended to the DOM element referred by the el attribute\n        $(this.el).html(compiledTemplate(this.model.toJSON()));\n    }\n});\n```\nBackbone 中最有用且最有趣的一个功能是将 render() 方法绑定到模型的变更事件中，如 清单 21 所示。\n#### 清单 21. Render() 方法绑定到模型变更事件\n```\n// In the following view, el value is 'div.team-element'\nApp.Views.Team = Backbone.View.extend({\n    model : new App.Models.Team,\n    initialize : function() {\n        this.model.bind(\"change\", this.render, this);\n    }\n})\n```\n上述代码将 render() 方法绑定到一个模型的变更事件中。当模型发生更改时，会自动触发 render() 方法，从而节省数行代码。从 Backbone 0.5.2 开始，bind() 方法就开始接受使用第三个参数来定义回调函数的对象。（在上述示例中，当前视图是回调函数 render() 中的对象）。在 Backbone 0.5.2 之前的版本中，必须使用 underscore.js 中的 bindAll 函数，如 清单 22 所示。\n#### 清单 22. _.bindAll() usage\n```\n// In the following view, el value is 'div.team-element'\nApp.Views.Team = Backbone.View.extend({\n    initialize : function() {\n        _.bindAll(this, \"render\");\n        this.model.bind(\"change\", this.render);\n    }\n})\n```\nBackbone 视图中，通过视图中的 DOM 对象监听事件是比较容易的。对于实现这一点，events 属性很是方便的，如 清单 23 所示。\n#### 清单 23. 事件属性\n```\nApp.Views.Team = Backbone.View.extend({\n    className : '.team-element',\n    tagName : 'div',\n    events : {\n        \"click a.more\" : \"moreInfo\"\n    },\n    moreInfo : function(e){\n         // Logic here\n    }\n})\n```\nevents 属性的每个项均由两部分构成：\n左边部分指定事件类型和触发事件的选择器。\n右边部分定义了事件处理函数。\n在 清单 23 中，当用户通过 DIV 中的类 more 以及类 team-element 点击链接时，会调用函数 moreInfo。\n\n#### 结束语\nMVC 模式可以为大型 JavaScript 应用程序提供所需的组织化代码。Backbone 是一个 JavaScript MVC 框架，它属于轻量级框架，且易于学习掌握。模型、视图、集合和路由器从不同的层面划分了应用程序，并负责处理几种特定事件。处理 Ajax 应用程序或者 SPI 应用程序时，Backbone 可能是最好的解决方案。\n","source":"_posts/前端mvc框架backbone-js.md","raw":"---\ntitle: 前端mvc框架backbone.js\ntags:\n  - '框架'\n  - 'backbone'\ncategories:\n  - '前端'\n  - '框架'\n  - 'backbone'\ndate: 2017-04-17 09:51:48\n---\n\n#### 简介\nWeb 应用程序越来越关注于前端，使用客户端脚本与 Ajax 进行交互。由于 JavaScript 应用程序越来越复杂，如果没有合适的工具和模式，那么 JavaScript 代码的高效编写、非重复性和可维护性方面会面临挑战。`模型-视图-控制器 (MVC) 是一个常见模式，可用于服务器端开发以生成有组织以及易维护的代码。`MVC 支持将数据（比如通常用于 Ajax 交互的 JavaScript Object Notation (JSON) 对象）从表示层或从页面的文档对象模型 (document object model, DOM) 中分离出来，也可适用于客户端开发。\n<!--more-->\n`Backbone（也称为 Backbone.js）`是由 Jeremy Ashkenas 创建的一个轻量级库，可用于创建 MVC 类应用程序。Backbone：\n强制依赖于 Underscore.js，`Underscore.js` 是一个实用型库\n非强制依赖于 jQuery/Zepto\n根据模型的变更自动更新应用程序的 HTML，有助于代码维护\n促进客户端模板使用，避免了在 JavaScript 中嵌入 HTML 代码\n模型、视图、集合和路由器是 Backbone 框架中的主要组件。在 Backbone 中，模型会存储通过 RESTful JSON 接口从服务器检索到的数据。模型与视图密切关联，负责为特定 UI 组件渲染 HTML 并处理元素上触发的事件，这也是视图本身的一部分。\n常用缩略词\n`DOM：文档对象模型\nMVC：模型-视图-控制器\nSPI：单页界面`\n\n\n#### SPI 应用程序：Backbone.Router 和 Backbone.history\n含有大量 Ajax 交互的应用程序越来越像那些无页面刷新的应用程序。这些应用程序常常试图限制与单个页面的交互。该 SPI 方法提高了效率和速度，并使整个应用程序变得更灵敏。状态概念代替了页面概念。散列 (Hash) 片段被用于识别一个特定状态。散列片段 是 URL 中散列标签 (#) 后的那部分，是该类应用程序的关键元素。清单 1 显示了一个 SPI 应用程序使用两个不同的散列片段产生的两个不同状态。\n#### 清单 1. SPI 或 Ajax 应用程序中的两个不同状态\nhttp://www.example.com/#/state1\nhttp://www.example.com/#/state2\nBackbone 提供一个称为路由器（版本 0.5 前称之为控制器）的组件来路由客户端状态。路由器可以扩展 Backbone.Router 函数，且包含一个散列映射（routes 属性）将状态与活动关联起来。当应用程序达到相关状态时，会触发一个特定活动。清单 2 展示了一个 Backbone 路由器示例。\n#### 清单 2. Backbone.Router 示例：routers.js\n```\nApp.Routers.Main = Backbone.Router.extend({\n\n   // Hash maps for routes\n   routes : {\n      \"\" : \"index\",\n      \"/teams\" : \"getTeams\",\n      \"/teams/:country\" : \"getTeamsCountry\",\n      \"/teams/:country/:name : \"getTeam\"\n      \"*error\" : \"fourOfour\"\n   },\n\n   index: function(){\n       // Homepage\n   },\n\n   getTeams: function() {\n       // List all teams\n   },\n   getTeamsCountry: function(country) {\n       // Get list of teams for specific country\n   },\n   getTeam: function(country, name) {\n       // Get the teams for a specific country and with a specific name\n   },\n   fourOfour: function(error) {\n       // 404 page\n   }\n});\n```\n创建的每个状态可以为书签。当 URL 碰到类似下面情况时，会调用这 5 个活动（index、getTeams、getTeamsCountry、getTeamCountry 和 fourOfour）。\nhttp://www.example.com 触发 index()\nhttp://www.example.com/#/teams 触发 getTeams()\nhttp://www.example.com/#/teams/country1 触发 getTeamsCountry() 传递 country1 作为参数\nhttp://www.example.com/#/teams/country1/team1 触发 getTeamCountry() 传递 country1 和 team1 作为参数\nhttp://www.example.com/#/something 触发 fourOfour() 以作 * （星号）使用。\n要启动 Backbone，先实例化页面加载的路由器，并通过指令 Backbone.history.start() 方法监视散列片段中的任何变更，如 清单 3 所示。\n#### 清单 3. 应用程序实例化（使用 jQuery）\n```\n$(function(){\n    var router = new App.Routers.Main();\n    Backbone.history.start({pushState : true});\n})\n```\n当实例化路由器时，会生成 Backbone.history 对象；它将自动引用 Backbone.History 函数。Backbone.History 负责匹配路由和 router 对象中定义的活动。start() 方法触发后，将创建 Backbone.history 的 fragment 属性。它包含散列片段的值。该序列在根据状态次序管理浏览器历史方面十分有用。用户如果想要返回前一状态，单击浏览器的返回按钮。\n在 清单 3 的示例中，通过一个启用 HTML5 特性 pushState 的配置调用 start() 方法。对于那些支持 pushState 的浏览器，Backbone 将监视 popstate 事件以触发一个新状态。如果浏览器不能支持 HTML5 特性，那么 onhashchange 活动会被监视。如果浏览器不支持该事件，轮询技术将监视 URL 散列片段的任何更改。\n\n模型和集合\n模型和集合是 Backbone.js 的重要组件，模型将数据（通常是来自服务器的数据）存储在键值对中。要创建一个模型，需要扩展 Backbone.Model，如 清单 4 所示。\n#### 清单 4. Backbone.Model 创建\n```\nApp.Models.Team = Backbone.Model.extend({\n    defaults : {\n       // default attributes\n    }\n    // Domain-specific methods go here\n});\n```\nApp.Models.Team 函数是一个新模型函数，但是必须创建一个实例才能在应用程序中使用特定模型，如 清单 5 所示。\n#### 清单 5. 模型实例化\n```\nvar team1 = new App.Models.Team();\n```\n现在，变量 team1 有一个名为 cid 的字段名，这是一个客户端标识符，形式为 \"c\" 再加上一个数字（例如，c0、c1、c2）。模型是通过存储在散列映射中的属性来定义的。属性可以在实例化时进行设置，或者使用 set() 方法设置。属性值可通过 get() 方法检索。清单 6 显示了如何通过实例化或 get()/set() 方法设置和获取属性。\n#### 清单 6. 模型实例化和 get/set 方法\n```\n// \"name\" attribute is set into the model\nvar team1 = new App.Models.Team({\n    name : \"name1\"\n});\nconsole.log(team1.get(\"name\")); // prints \"name1\"\n\n// \"name\" attribute is set with a new value\nteam1.set({\n    name : \"name2\"\n});\nconsole.log(team1.get(\"name\")); //prints \"name2\"\n```\n当使用 JavaScript 对象时，使用 set() 方法创建或者设置属性值的原因并不是显而易见的。其中一个原因是为了更新此值，如 清单 7 所示。\n#### 清单 7. 以错误的方法更新属性\n```\nteam1.attributes.name = \"name2\";\n```\n为了避免 使用 清单 7 中的代码，使用 set() 是改变模型状态并触发其变更事件的唯一方法。使用 set() 提升封装原则。清单 8 展示了如何将一个事件处理程序绑到发生变更的事件中。该事件处理程序包含一个 alert，在调用 set() 方法时会被触发，如 清单 6 所示。但是，在使用 清单 7 中的代码时不触发 alert。\n#### 清单 8. 更改 App.Models.Team 模型中的事件处理程序\n```\nApp.Models.Team = Backbone.Model.extend({\n    initialize : function(){\n        this.bind(\"change\", this.changed);\n    },\n    changed : function(){\n        alert(\"changed\");\n    }\n});\n```\nBackbone 的另一个优势是易于通过 Ajax 交互与服务器进行通信。在模型上调用一个 save() 方法会通过 REST JSON API 异步将当前状态保存到服务器。清单 9 展示了此示例。\n#### 清单 9. 在模型对象上调用 save 方法\n```\nbarca.save();\n```\nsave() 函数将在后台委托给 Backbone.sync，这是负责发出 RESTful 请求的组件，默认使用 jQuery 函数 $.ajax()。由于调用了 REST 风格架构，每个 Create、Read、Update 或 Delete (CRUD) 活动均会与各种不同类型的 HTTP 请求（POST、GET、PUT 和 DELETE）相关联。首先保存模型对象，使用一个 POST 请求，创建一个标识符 ID，其后，尝试发送对象到服务器，使用一个 PUT 请求。\n当需要从服务器检索一个模型时，请求一个 Read 活动并使用一个 Ajax GET 请求。这类请求使用 fetch() 方法。要确定导入模型数据或者从中取出模型数据的服务器的位置：\n如果模型属于一个 collection，那么集合对象的 url 属性将是该位置的基础，并且该模型 ID（不是 cid）会被附加以构成完整的 URL。\n如果模型不是在一个集合中，那么该模型的 urlroot 属性被用作该位置的基础\n清单 10 显示了如何获取一个模型。\n#### 清单 10. 模型对象的 Fetch() 方法\n```\nvar teamNew = new App.Models.Team({\n    urlRoot : '/specialTeams'\n});\nteamNew.save(); // returns model's ID equal to '222'\nteamNew.fetch(); // Ajax request to '/specialTeams/222'\n```\nvalidate() 方法被用于验证模型，如 清单 11 所示。需要重写 validate() 方法（在调用 set() 方法时触发）来包含模型的有效逻辑。传递给该函数的惟一参数是一个 JavaScript 对象，该对象包含了 set() 方法更新的属性，以便验证那些属性的条件。如果从 validate() 方法中没有返回任何内容，那么验证成功。如果返回一个错误消息，那么验证失败，将无法执行 set() 方法。\n#### 清单 11. 模型的验证方法\n```\nApp.Models.Team = Backbone.Model.extend({\n    validate : function(attributes){\n        if (!!attributes && attributes.name === \"teamX\") {\n            // Error message returned if the value of the \"name\"\n            // attribute is equal to \"teamX\"\n            return \"Error!\";\n        }\n    }\n}\n```\n一组模型被分组到到集合中，这个集合是 Backbone.Collection 的扩展函数。集合具有一个模型属性的特性，定义了组成该集合的模型类型。使用 add()/remove() 方法可以将一个模型添加和移动到集合中。清单 12 显示了如何创建和填充一个集合。\n#### 清单 12. Backbone 集合\n```\nApp.Collections.Teams = Backbone.Collection.extend({\n    model : App.Models.Team\n});\nvar teams = new App.Collections.Teams();\n\n// Add e model to the collection object \"teams\"\nteams.add(team1);\nteams.add(new App.Models.Team({\n    name : \"Team B\"\n}));\nteams.add(new App.Models.Team());\nteams.remove(team1);\n\nconsole.log(teams.length) // prints 2\n```\n创建的 teams 集合中包含一个含有两个模型的阵列，存储在模型属性中。尽管，在典型 Ajax 应用程序中，会从服务器动态（不是人工）填充该集合。fetch() 方法可以帮助完成此项任务，如 清单 13 所示，并将数据存储到模型阵列中。\n#### 清单 13. Fetch() 方法\n```\nteams.fetch();\n```\nBackbone 中的集合拥有一个 url 属性，定义了使用 Ajax GET 请求从服务器取出 JSON 数据的位置，如 清单 14 所示。\n#### 清单 14. 集合的 url 属性和 fetch() 方法\n```\nteams.url = '/getTeams';\nteams.fetch(); //Ajax GET Request to '/getTeams'\n```\nFetch() 方法属于异步调用，因此，在等待服务器响应时，应用程序不会中止。在一些情况下，要操作来自服务器的原始数据，可以使用集合的 parse() 方法。正如 清单 15 所示。\n#### 清单 15. parse() 方法\n```\nApp.Collections.Teams = Backbone.Collection.extend({\n    model : App.Models.Team,\n    parse : function(data) {\n        // 'data' contains the raw JSON object\n        console.log(data);\n    }\n});\n```\n集合提供的另一个有趣的方法是 reset()，它允许将多个模型设置到一个集合中。reset() 方法可以非常方便地将数据引导到集合中，比如页面加载，来避免用户等待异步调用返回。\n\n视图和客户端模板\nBackbone 中的视图与典型 MVC 方法的视图不一样。Backbone 视图可以扩展 Backbone.View 函数并显示模型中存储的数据。一个视图提供一个由 el 属性定义的 HTML 元素。该属性可以是由 tagName、className 和 id 属性相组合而构成的，或者是通过其本身的 el 值形成的。清单 16 显示了使用这不同方法组合 el 属性的两个不同视图。\n#### 清单 16. Backbone 视图样例\n```\n// In the following view, el value is 'UL.team-element'\nApp.Views.Teams = Backbone.View.extend({\n    el : 'UL.team-list'\n});\n// In the following view, el value is 'div.team-element'\nApp.Views.Team = Backbone.View.extend({\n    className : '.team-element',\n    tagName : 'div'\n});\n```\n如果 el、tagName、className 和 id 属性为空，那么会默认将一个空的 DIV 分配给 el。\n如上所述，一个视图必须与一个模型相关联。该模型属性也很有用，如 清单 17 所示。App.View.Team 视图被绑定到一个 App.Models.Team 模型实例。\n#### 清单 17. Backbone 视图中的模型属性\n```\n// In the following view, el value is 'UL.team-element'\nApp.Views.Team = Backbone.View.extend({\n    ...\n    model : new App.Models.Team\n});\n```\n要渲染数据（这是视图的主要目的），重写 render() 方法和逻辑来显示 DOM 元素（由 el 属性引用的）中的模型属性。清单 18 展示了一个 render 方法如何更新用户界面的样例。\n#### 清单 18. Render() 方法\n```\nApp.Views.Team = Backbone.View.extend({\n    className : '.team-element',\n    tagName : 'div',\n    model : new App.Models.Team\n    render : function() {\n        // Render the 'name' attribute of the model associated\n        // inside the DOM element referred by 'el'\n        $(this.el).html(\"<span>\" + this.model.get(\"name\") + \"</span>\");\n    }\n});\n```\nBackbone 也可以促进客户端模板的使用，这就使得我们没有必要在 JavaScript 中嵌入 HTML 代码，如 清单 18 所示。（使用模板，模板会封装视图中常见函数；只指定此函数一次即可。）Backbone 在 underscore.js（一个必须的库）中提供一个模板引擎，尽管没有必要使用该模板引擎。清单 19 中的实例使用 underscore.js HTML 模板。\n#### 清单 19. HTML 含有模板\n```\n<script id=\"teamTemplate\" type=\"text/template\">\n    <%= name %>\n</script>\n```\n清单 20 显示了另一个使用 underscore.js HTML 模板的样例。\n#### 清单 20. 使用 _.template() 函数的视图\n```\nApp.Views.Team = Backbone.View.extend({\n    className : '.team-element',\n    tagName : 'div',\n    model : new App.Models.Team\n    render : function() {\n        // Compile the template\n        var compiledTemplate = _.template($('#teamTemplate').html());\n        // Model attributes loaded into the template. Template is\n        // appended to the DOM element referred by the el attribute\n        $(this.el).html(compiledTemplate(this.model.toJSON()));\n    }\n});\n```\nBackbone 中最有用且最有趣的一个功能是将 render() 方法绑定到模型的变更事件中，如 清单 21 所示。\n#### 清单 21. Render() 方法绑定到模型变更事件\n```\n// In the following view, el value is 'div.team-element'\nApp.Views.Team = Backbone.View.extend({\n    model : new App.Models.Team,\n    initialize : function() {\n        this.model.bind(\"change\", this.render, this);\n    }\n})\n```\n上述代码将 render() 方法绑定到一个模型的变更事件中。当模型发生更改时，会自动触发 render() 方法，从而节省数行代码。从 Backbone 0.5.2 开始，bind() 方法就开始接受使用第三个参数来定义回调函数的对象。（在上述示例中，当前视图是回调函数 render() 中的对象）。在 Backbone 0.5.2 之前的版本中，必须使用 underscore.js 中的 bindAll 函数，如 清单 22 所示。\n#### 清单 22. _.bindAll() usage\n```\n// In the following view, el value is 'div.team-element'\nApp.Views.Team = Backbone.View.extend({\n    initialize : function() {\n        _.bindAll(this, \"render\");\n        this.model.bind(\"change\", this.render);\n    }\n})\n```\nBackbone 视图中，通过视图中的 DOM 对象监听事件是比较容易的。对于实现这一点，events 属性很是方便的，如 清单 23 所示。\n#### 清单 23. 事件属性\n```\nApp.Views.Team = Backbone.View.extend({\n    className : '.team-element',\n    tagName : 'div',\n    events : {\n        \"click a.more\" : \"moreInfo\"\n    },\n    moreInfo : function(e){\n         // Logic here\n    }\n})\n```\nevents 属性的每个项均由两部分构成：\n左边部分指定事件类型和触发事件的选择器。\n右边部分定义了事件处理函数。\n在 清单 23 中，当用户通过 DIV 中的类 more 以及类 team-element 点击链接时，会调用函数 moreInfo。\n\n#### 结束语\nMVC 模式可以为大型 JavaScript 应用程序提供所需的组织化代码。Backbone 是一个 JavaScript MVC 框架，它属于轻量级框架，且易于学习掌握。模型、视图、集合和路由器从不同的层面划分了应用程序，并负责处理几种特定事件。处理 Ajax 应用程序或者 SPI 应用程序时，Backbone 可能是最好的解决方案。\n","slug":"前端mvc框架backbone-js","published":1,"updated":"2017-04-17T01:52:34.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5naxw4m000yfcxef1ml4q6h","content":"<h4 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h4><p>Web 应用程序越来越关注于前端，使用客户端脚本与 Ajax 进行交互。由于 JavaScript 应用程序越来越复杂，如果没有合适的工具和模式，那么 JavaScript 代码的高效编写、非重复性和可维护性方面会面临挑战。<code>模型-视图-控制器 (MVC) 是一个常见模式，可用于服务器端开发以生成有组织以及易维护的代码。</code>MVC 支持将数据（比如通常用于 Ajax 交互的 JavaScript Object Notation (JSON) 对象）从表示层或从页面的文档对象模型 (document object model, DOM) 中分离出来，也可适用于客户端开发。<br><a id=\"more\"></a><br><code>Backbone（也称为 Backbone.js）</code>是由 Jeremy Ashkenas 创建的一个轻量级库，可用于创建 MVC 类应用程序。Backbone：<br>强制依赖于 Underscore.js，<code>Underscore.js</code> 是一个实用型库<br>非强制依赖于 jQuery/Zepto<br>根据模型的变更自动更新应用程序的 HTML，有助于代码维护<br>促进客户端模板使用，避免了在 JavaScript 中嵌入 HTML 代码<br>模型、视图、集合和路由器是 Backbone 框架中的主要组件。在 Backbone 中，模型会存储通过 RESTful JSON 接口从服务器检索到的数据。模型与视图密切关联，负责为特定 UI 组件渲染 HTML 并处理元素上触发的事件，这也是视图本身的一部分。<br>常用缩略词<br><code>DOM：文档对象模型\nMVC：模型-视图-控制器\nSPI：单页界面</code></p>\n<h4 id=\"SPI-应用程序：Backbone-Router-和-Backbone-history\"><a href=\"#SPI-应用程序：Backbone-Router-和-Backbone-history\" class=\"headerlink\" title=\"SPI 应用程序：Backbone.Router 和 Backbone.history\"></a>SPI 应用程序：Backbone.Router 和 Backbone.history</h4><p>含有大量 Ajax 交互的应用程序越来越像那些无页面刷新的应用程序。这些应用程序常常试图限制与单个页面的交互。该 SPI 方法提高了效率和速度，并使整个应用程序变得更灵敏。状态概念代替了页面概念。散列 (Hash) 片段被用于识别一个特定状态。散列片段 是 URL 中散列标签 (#) 后的那部分，是该类应用程序的关键元素。清单 1 显示了一个 SPI 应用程序使用两个不同的散列片段产生的两个不同状态。</p>\n<h4 id=\"清单-1-SPI-或-Ajax-应用程序中的两个不同状态\"><a href=\"#清单-1-SPI-或-Ajax-应用程序中的两个不同状态\" class=\"headerlink\" title=\"清单 1. SPI 或 Ajax 应用程序中的两个不同状态\"></a>清单 1. SPI 或 Ajax 应用程序中的两个不同状态</h4><p><a href=\"http://www.example.com/#/state1\" target=\"_blank\" rel=\"external\">http://www.example.com/#/state1</a><br><a href=\"http://www.example.com/#/state2\" target=\"_blank\" rel=\"external\">http://www.example.com/#/state2</a><br>Backbone 提供一个称为路由器（版本 0.5 前称之为控制器）的组件来路由客户端状态。路由器可以扩展 Backbone.Router 函数，且包含一个散列映射（routes 属性）将状态与活动关联起来。当应用程序达到相关状态时，会触发一个特定活动。清单 2 展示了一个 Backbone 路由器示例。</p>\n<h4 id=\"清单-2-Backbone-Router-示例：routers-js\"><a href=\"#清单-2-Backbone-Router-示例：routers-js\" class=\"headerlink\" title=\"清单 2. Backbone.Router 示例：routers.js\"></a>清单 2. Backbone.Router 示例：routers.js</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">App.Routers.Main = Backbone.Router.extend(&#123;</div><div class=\"line\"></div><div class=\"line\">   // Hash maps for routes</div><div class=\"line\">   routes : &#123;</div><div class=\"line\">      &quot;&quot; : &quot;index&quot;,</div><div class=\"line\">      &quot;/teams&quot; : &quot;getTeams&quot;,</div><div class=\"line\">      &quot;/teams/:country&quot; : &quot;getTeamsCountry&quot;,</div><div class=\"line\">      &quot;/teams/:country/:name : &quot;getTeam&quot;</div><div class=\"line\">      &quot;*error&quot; : &quot;fourOfour&quot;</div><div class=\"line\">   &#125;,</div><div class=\"line\"></div><div class=\"line\">   index: function()&#123;</div><div class=\"line\">       // Homepage</div><div class=\"line\">   &#125;,</div><div class=\"line\"></div><div class=\"line\">   getTeams: function() &#123;</div><div class=\"line\">       // List all teams</div><div class=\"line\">   &#125;,</div><div class=\"line\">   getTeamsCountry: function(country) &#123;</div><div class=\"line\">       // Get list of teams for specific country</div><div class=\"line\">   &#125;,</div><div class=\"line\">   getTeam: function(country, name) &#123;</div><div class=\"line\">       // Get the teams for a specific country and with a specific name</div><div class=\"line\">   &#125;,</div><div class=\"line\">   fourOfour: function(error) &#123;</div><div class=\"line\">       // 404 page</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>创建的每个状态可以为书签。当 URL 碰到类似下面情况时，会调用这 5 个活动（index、getTeams、getTeamsCountry、getTeamCountry 和 fourOfour）。<br><a href=\"http://www.example.com\" target=\"_blank\" rel=\"external\">http://www.example.com</a> 触发 index()<br><a href=\"http://www.example.com/#/teams\" target=\"_blank\" rel=\"external\">http://www.example.com/#/teams</a> 触发 getTeams()<br><a href=\"http://www.example.com/#/teams/country1\" target=\"_blank\" rel=\"external\">http://www.example.com/#/teams/country1</a> 触发 getTeamsCountry() 传递 country1 作为参数<br><a href=\"http://www.example.com/#/teams/country1/team1\" target=\"_blank\" rel=\"external\">http://www.example.com/#/teams/country1/team1</a> 触发 getTeamCountry() 传递 country1 和 team1 作为参数<br><a href=\"http://www.example.com/#/something\" target=\"_blank\" rel=\"external\">http://www.example.com/#/something</a> 触发 fourOfour() 以作 * （星号）使用。<br>要启动 Backbone，先实例化页面加载的路由器，并通过指令 Backbone.history.start() 方法监视散列片段中的任何变更，如 清单 3 所示。</p>\n<h4 id=\"清单-3-应用程序实例化（使用-jQuery）\"><a href=\"#清单-3-应用程序实例化（使用-jQuery）\" class=\"headerlink\" title=\"清单 3. 应用程序实例化（使用 jQuery）\"></a>清单 3. 应用程序实例化（使用 jQuery）</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(function()&#123;</div><div class=\"line\">    var router = new App.Routers.Main();</div><div class=\"line\">    Backbone.history.start(&#123;pushState : true&#125;);</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>当实例化路由器时，会生成 Backbone.history 对象；它将自动引用 Backbone.History 函数。Backbone.History 负责匹配路由和 router 对象中定义的活动。start() 方法触发后，将创建 Backbone.history 的 fragment 属性。它包含散列片段的值。该序列在根据状态次序管理浏览器历史方面十分有用。用户如果想要返回前一状态，单击浏览器的返回按钮。<br>在 清单 3 的示例中，通过一个启用 HTML5 特性 pushState 的配置调用 start() 方法。对于那些支持 pushState 的浏览器，Backbone 将监视 popstate 事件以触发一个新状态。如果浏览器不能支持 HTML5 特性，那么 onhashchange 活动会被监视。如果浏览器不支持该事件，轮询技术将监视 URL 散列片段的任何更改。</p>\n<p>模型和集合<br>模型和集合是 Backbone.js 的重要组件，模型将数据（通常是来自服务器的数据）存储在键值对中。要创建一个模型，需要扩展 Backbone.Model，如 清单 4 所示。</p>\n<h4 id=\"清单-4-Backbone-Model-创建\"><a href=\"#清单-4-Backbone-Model-创建\" class=\"headerlink\" title=\"清单 4. Backbone.Model 创建\"></a>清单 4. Backbone.Model 创建</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">App.Models.Team = Backbone.Model.extend(&#123;</div><div class=\"line\">    defaults : &#123;</div><div class=\"line\">       // default attributes</div><div class=\"line\">    &#125;</div><div class=\"line\">    // Domain-specific methods go here</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>App.Models.Team 函数是一个新模型函数，但是必须创建一个实例才能在应用程序中使用特定模型，如 清单 5 所示。</p>\n<h4 id=\"清单-5-模型实例化\"><a href=\"#清单-5-模型实例化\" class=\"headerlink\" title=\"清单 5. 模型实例化\"></a>清单 5. 模型实例化</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">var team1 = new App.Models.Team();</div></pre></td></tr></table></figure>\n<p>现在，变量 team1 有一个名为 cid 的字段名，这是一个客户端标识符，形式为 “c” 再加上一个数字（例如，c0、c1、c2）。模型是通过存储在散列映射中的属性来定义的。属性可以在实例化时进行设置，或者使用 set() 方法设置。属性值可通过 get() 方法检索。清单 6 显示了如何通过实例化或 get()/set() 方法设置和获取属性。</p>\n<h4 id=\"清单-6-模型实例化和-get-set-方法\"><a href=\"#清单-6-模型实例化和-get-set-方法\" class=\"headerlink\" title=\"清单 6. 模型实例化和 get/set 方法\"></a>清单 6. 模型实例化和 get/set 方法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">// &quot;name&quot; attribute is set into the model</div><div class=\"line\">var team1 = new App.Models.Team(&#123;</div><div class=\"line\">    name : &quot;name1&quot;</div><div class=\"line\">&#125;);</div><div class=\"line\">console.log(team1.get(&quot;name&quot;)); // prints &quot;name1&quot;</div><div class=\"line\"></div><div class=\"line\">// &quot;name&quot; attribute is set with a new value</div><div class=\"line\">team1.set(&#123;</div><div class=\"line\">    name : &quot;name2&quot;</div><div class=\"line\">&#125;);</div><div class=\"line\">console.log(team1.get(&quot;name&quot;)); //prints &quot;name2&quot;</div></pre></td></tr></table></figure>\n<p>当使用 JavaScript 对象时，使用 set() 方法创建或者设置属性值的原因并不是显而易见的。其中一个原因是为了更新此值，如 清单 7 所示。</p>\n<h4 id=\"清单-7-以错误的方法更新属性\"><a href=\"#清单-7-以错误的方法更新属性\" class=\"headerlink\" title=\"清单 7. 以错误的方法更新属性\"></a>清单 7. 以错误的方法更新属性</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">team1.attributes.name = &quot;name2&quot;;</div></pre></td></tr></table></figure>\n<p>为了避免 使用 清单 7 中的代码，使用 set() 是改变模型状态并触发其变更事件的唯一方法。使用 set() 提升封装原则。清单 8 展示了如何将一个事件处理程序绑到发生变更的事件中。该事件处理程序包含一个 alert，在调用 set() 方法时会被触发，如 清单 6 所示。但是，在使用 清单 7 中的代码时不触发 alert。</p>\n<h4 id=\"清单-8-更改-App-Models-Team-模型中的事件处理程序\"><a href=\"#清单-8-更改-App-Models-Team-模型中的事件处理程序\" class=\"headerlink\" title=\"清单 8. 更改 App.Models.Team 模型中的事件处理程序\"></a>清单 8. 更改 App.Models.Team 模型中的事件处理程序</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">App.Models.Team = Backbone.Model.extend(&#123;</div><div class=\"line\">    initialize : function()&#123;</div><div class=\"line\">        this.bind(&quot;change&quot;, this.changed);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    changed : function()&#123;</div><div class=\"line\">        alert(&quot;changed&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>Backbone 的另一个优势是易于通过 Ajax 交互与服务器进行通信。在模型上调用一个 save() 方法会通过 REST JSON API 异步将当前状态保存到服务器。清单 9 展示了此示例。</p>\n<h4 id=\"清单-9-在模型对象上调用-save-方法\"><a href=\"#清单-9-在模型对象上调用-save-方法\" class=\"headerlink\" title=\"清单 9. 在模型对象上调用 save 方法\"></a>清单 9. 在模型对象上调用 save 方法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">barca.save();</div></pre></td></tr></table></figure>\n<p>save() 函数将在后台委托给 Backbone.sync，这是负责发出 RESTful 请求的组件，默认使用 jQuery 函数 $.ajax()。由于调用了 REST 风格架构，每个 Create、Read、Update 或 Delete (CRUD) 活动均会与各种不同类型的 HTTP 请求（POST、GET、PUT 和 DELETE）相关联。首先保存模型对象，使用一个 POST 请求，创建一个标识符 ID，其后，尝试发送对象到服务器，使用一个 PUT 请求。<br>当需要从服务器检索一个模型时，请求一个 Read 活动并使用一个 Ajax GET 请求。这类请求使用 fetch() 方法。要确定导入模型数据或者从中取出模型数据的服务器的位置：<br>如果模型属于一个 collection，那么集合对象的 url 属性将是该位置的基础，并且该模型 ID（不是 cid）会被附加以构成完整的 URL。<br>如果模型不是在一个集合中，那么该模型的 urlroot 属性被用作该位置的基础<br>清单 10 显示了如何获取一个模型。</p>\n<h4 id=\"清单-10-模型对象的-Fetch-方法\"><a href=\"#清单-10-模型对象的-Fetch-方法\" class=\"headerlink\" title=\"清单 10. 模型对象的 Fetch() 方法\"></a>清单 10. 模型对象的 Fetch() 方法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">var teamNew = new App.Models.Team(&#123;</div><div class=\"line\">    urlRoot : &apos;/specialTeams&apos;</div><div class=\"line\">&#125;);</div><div class=\"line\">teamNew.save(); // returns model&apos;s ID equal to &apos;222&apos;</div><div class=\"line\">teamNew.fetch(); // Ajax request to &apos;/specialTeams/222&apos;</div></pre></td></tr></table></figure>\n<p>validate() 方法被用于验证模型，如 清单 11 所示。需要重写 validate() 方法（在调用 set() 方法时触发）来包含模型的有效逻辑。传递给该函数的惟一参数是一个 JavaScript 对象，该对象包含了 set() 方法更新的属性，以便验证那些属性的条件。如果从 validate() 方法中没有返回任何内容，那么验证成功。如果返回一个错误消息，那么验证失败，将无法执行 set() 方法。</p>\n<h4 id=\"清单-11-模型的验证方法\"><a href=\"#清单-11-模型的验证方法\" class=\"headerlink\" title=\"清单 11. 模型的验证方法\"></a>清单 11. 模型的验证方法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">App.Models.Team = Backbone.Model.extend(&#123;</div><div class=\"line\">    validate : function(attributes)&#123;</div><div class=\"line\">        if (!!attributes &amp;&amp; attributes.name === &quot;teamX&quot;) &#123;</div><div class=\"line\">            // Error message returned if the value of the &quot;name&quot;</div><div class=\"line\">            // attribute is equal to &quot;teamX&quot;</div><div class=\"line\">            return &quot;Error!&quot;;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>一组模型被分组到到集合中，这个集合是 Backbone.Collection 的扩展函数。集合具有一个模型属性的特性，定义了组成该集合的模型类型。使用 add()/remove() 方法可以将一个模型添加和移动到集合中。清单 12 显示了如何创建和填充一个集合。</p>\n<h4 id=\"清单-12-Backbone-集合\"><a href=\"#清单-12-Backbone-集合\" class=\"headerlink\" title=\"清单 12. Backbone 集合\"></a>清单 12. Backbone 集合</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">App.Collections.Teams = Backbone.Collection.extend(&#123;</div><div class=\"line\">    model : App.Models.Team</div><div class=\"line\">&#125;);</div><div class=\"line\">var teams = new App.Collections.Teams();</div><div class=\"line\"></div><div class=\"line\">// Add e model to the collection object &quot;teams&quot;</div><div class=\"line\">teams.add(team1);</div><div class=\"line\">teams.add(new App.Models.Team(&#123;</div><div class=\"line\">    name : &quot;Team B&quot;</div><div class=\"line\">&#125;));</div><div class=\"line\">teams.add(new App.Models.Team());</div><div class=\"line\">teams.remove(team1);</div><div class=\"line\"></div><div class=\"line\">console.log(teams.length) // prints 2</div></pre></td></tr></table></figure>\n<p>创建的 teams 集合中包含一个含有两个模型的阵列，存储在模型属性中。尽管，在典型 Ajax 应用程序中，会从服务器动态（不是人工）填充该集合。fetch() 方法可以帮助完成此项任务，如 清单 13 所示，并将数据存储到模型阵列中。</p>\n<h4 id=\"清单-13-Fetch-方法\"><a href=\"#清单-13-Fetch-方法\" class=\"headerlink\" title=\"清单 13. Fetch() 方法\"></a>清单 13. Fetch() 方法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">teams.fetch();</div></pre></td></tr></table></figure>\n<p>Backbone 中的集合拥有一个 url 属性，定义了使用 Ajax GET 请求从服务器取出 JSON 数据的位置，如 清单 14 所示。</p>\n<h4 id=\"清单-14-集合的-url-属性和-fetch-方法\"><a href=\"#清单-14-集合的-url-属性和-fetch-方法\" class=\"headerlink\" title=\"清单 14. 集合的 url 属性和 fetch() 方法\"></a>清单 14. 集合的 url 属性和 fetch() 方法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">teams.url = &apos;/getTeams&apos;;</div><div class=\"line\">teams.fetch(); //Ajax GET Request to &apos;/getTeams&apos;</div></pre></td></tr></table></figure>\n<p>Fetch() 方法属于异步调用，因此，在等待服务器响应时，应用程序不会中止。在一些情况下，要操作来自服务器的原始数据，可以使用集合的 parse() 方法。正如 清单 15 所示。</p>\n<h4 id=\"清单-15-parse-方法\"><a href=\"#清单-15-parse-方法\" class=\"headerlink\" title=\"清单 15. parse() 方法\"></a>清单 15. parse() 方法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">App.Collections.Teams = Backbone.Collection.extend(&#123;</div><div class=\"line\">    model : App.Models.Team,</div><div class=\"line\">    parse : function(data) &#123;</div><div class=\"line\">        // &apos;data&apos; contains the raw JSON object</div><div class=\"line\">        console.log(data);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>集合提供的另一个有趣的方法是 reset()，它允许将多个模型设置到一个集合中。reset() 方法可以非常方便地将数据引导到集合中，比如页面加载，来避免用户等待异步调用返回。</p>\n<p>视图和客户端模板<br>Backbone 中的视图与典型 MVC 方法的视图不一样。Backbone 视图可以扩展 Backbone.View 函数并显示模型中存储的数据。一个视图提供一个由 el 属性定义的 HTML 元素。该属性可以是由 tagName、className 和 id 属性相组合而构成的，或者是通过其本身的 el 值形成的。清单 16 显示了使用这不同方法组合 el 属性的两个不同视图。</p>\n<h4 id=\"清单-16-Backbone-视图样例\"><a href=\"#清单-16-Backbone-视图样例\" class=\"headerlink\" title=\"清单 16. Backbone 视图样例\"></a>清单 16. Backbone 视图样例</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">// In the following view, el value is &apos;UL.team-element&apos;</div><div class=\"line\">App.Views.Teams = Backbone.View.extend(&#123;</div><div class=\"line\">    el : &apos;UL.team-list&apos;</div><div class=\"line\">&#125;);</div><div class=\"line\">// In the following view, el value is &apos;div.team-element&apos;</div><div class=\"line\">App.Views.Team = Backbone.View.extend(&#123;</div><div class=\"line\">    className : &apos;.team-element&apos;,</div><div class=\"line\">    tagName : &apos;div&apos;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>如果 el、tagName、className 和 id 属性为空，那么会默认将一个空的 DIV 分配给 el。<br>如上所述，一个视图必须与一个模型相关联。该模型属性也很有用，如 清单 17 所示。App.View.Team 视图被绑定到一个 App.Models.Team 模型实例。</p>\n<h4 id=\"清单-17-Backbone-视图中的模型属性\"><a href=\"#清单-17-Backbone-视图中的模型属性\" class=\"headerlink\" title=\"清单 17. Backbone 视图中的模型属性\"></a>清单 17. Backbone 视图中的模型属性</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">// In the following view, el value is &apos;UL.team-element&apos;</div><div class=\"line\">App.Views.Team = Backbone.View.extend(&#123;</div><div class=\"line\">    ...</div><div class=\"line\">    model : new App.Models.Team</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>要渲染数据（这是视图的主要目的），重写 render() 方法和逻辑来显示 DOM 元素（由 el 属性引用的）中的模型属性。清单 18 展示了一个 render 方法如何更新用户界面的样例。</p>\n<h4 id=\"清单-18-Render-方法\"><a href=\"#清单-18-Render-方法\" class=\"headerlink\" title=\"清单 18. Render() 方法\"></a>清单 18. Render() 方法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">App.Views.Team = Backbone.View.extend(&#123;</div><div class=\"line\">    className : &apos;.team-element&apos;,</div><div class=\"line\">    tagName : &apos;div&apos;,</div><div class=\"line\">    model : new App.Models.Team</div><div class=\"line\">    render : function() &#123;</div><div class=\"line\">        // Render the &apos;name&apos; attribute of the model associated</div><div class=\"line\">        // inside the DOM element referred by &apos;el&apos;</div><div class=\"line\">        $(this.el).html(&quot;&lt;span&gt;&quot; + this.model.get(&quot;name&quot;) + &quot;&lt;/span&gt;&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>Backbone 也可以促进客户端模板的使用，这就使得我们没有必要在 JavaScript 中嵌入 HTML 代码，如 清单 18 所示。（使用模板，模板会封装视图中常见函数；只指定此函数一次即可。）Backbone 在 underscore.js（一个必须的库）中提供一个模板引擎，尽管没有必要使用该模板引擎。清单 19 中的实例使用 underscore.js HTML 模板。</p>\n<h4 id=\"清单-19-HTML-含有模板\"><a href=\"#清单-19-HTML-含有模板\" class=\"headerlink\" title=\"清单 19. HTML 含有模板\"></a>清单 19. HTML 含有模板</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script id=&quot;teamTemplate&quot; type=&quot;text/template&quot;&gt;</div><div class=\"line\">    &lt;%= name %&gt;</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure>\n<p>清单 20 显示了另一个使用 underscore.js HTML 模板的样例。</p>\n<h4 id=\"清单-20-使用-template-函数的视图\"><a href=\"#清单-20-使用-template-函数的视图\" class=\"headerlink\" title=\"清单 20. 使用 _.template() 函数的视图\"></a>清单 20. 使用 _.template() 函数的视图</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">App.Views.Team = Backbone.View.extend(&#123;</div><div class=\"line\">    className : &apos;.team-element&apos;,</div><div class=\"line\">    tagName : &apos;div&apos;,</div><div class=\"line\">    model : new App.Models.Team</div><div class=\"line\">    render : function() &#123;</div><div class=\"line\">        // Compile the template</div><div class=\"line\">        var compiledTemplate = _.template($(&apos;#teamTemplate&apos;).html());</div><div class=\"line\">        // Model attributes loaded into the template. Template is</div><div class=\"line\">        // appended to the DOM element referred by the el attribute</div><div class=\"line\">        $(this.el).html(compiledTemplate(this.model.toJSON()));</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>Backbone 中最有用且最有趣的一个功能是将 render() 方法绑定到模型的变更事件中，如 清单 21 所示。</p>\n<h4 id=\"清单-21-Render-方法绑定到模型变更事件\"><a href=\"#清单-21-Render-方法绑定到模型变更事件\" class=\"headerlink\" title=\"清单 21. Render() 方法绑定到模型变更事件\"></a>清单 21. Render() 方法绑定到模型变更事件</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">// In the following view, el value is &apos;div.team-element&apos;</div><div class=\"line\">App.Views.Team = Backbone.View.extend(&#123;</div><div class=\"line\">    model : new App.Models.Team,</div><div class=\"line\">    initialize : function() &#123;</div><div class=\"line\">        this.model.bind(&quot;change&quot;, this.render, this);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>上述代码将 render() 方法绑定到一个模型的变更事件中。当模型发生更改时，会自动触发 render() 方法，从而节省数行代码。从 Backbone 0.5.2 开始，bind() 方法就开始接受使用第三个参数来定义回调函数的对象。（在上述示例中，当前视图是回调函数 render() 中的对象）。在 Backbone 0.5.2 之前的版本中，必须使用 underscore.js 中的 bindAll 函数，如 清单 22 所示。</p>\n<h4 id=\"清单-22-bindAll-usage\"><a href=\"#清单-22-bindAll-usage\" class=\"headerlink\" title=\"清单 22. _.bindAll() usage\"></a>清单 22. _.bindAll() usage</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">// In the following view, el value is &apos;div.team-element&apos;</div><div class=\"line\">App.Views.Team = Backbone.View.extend(&#123;</div><div class=\"line\">    initialize : function() &#123;</div><div class=\"line\">        _.bindAll(this, &quot;render&quot;);</div><div class=\"line\">        this.model.bind(&quot;change&quot;, this.render);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Backbone 视图中，通过视图中的 DOM 对象监听事件是比较容易的。对于实现这一点，events 属性很是方便的，如 清单 23 所示。</p>\n<h4 id=\"清单-23-事件属性\"><a href=\"#清单-23-事件属性\" class=\"headerlink\" title=\"清单 23. 事件属性\"></a>清单 23. 事件属性</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">App.Views.Team = Backbone.View.extend(&#123;</div><div class=\"line\">    className : &apos;.team-element&apos;,</div><div class=\"line\">    tagName : &apos;div&apos;,</div><div class=\"line\">    events : &#123;</div><div class=\"line\">        &quot;click a.more&quot; : &quot;moreInfo&quot;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    moreInfo : function(e)&#123;</div><div class=\"line\">         // Logic here</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>events 属性的每个项均由两部分构成：<br>左边部分指定事件类型和触发事件的选择器。<br>右边部分定义了事件处理函数。<br>在 清单 23 中，当用户通过 DIV 中的类 more 以及类 team-element 点击链接时，会调用函数 moreInfo。</p>\n<h4 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h4><p>MVC 模式可以为大型 JavaScript 应用程序提供所需的组织化代码。Backbone 是一个 JavaScript MVC 框架，它属于轻量级框架，且易于学习掌握。模型、视图、集合和路由器从不同的层面划分了应用程序，并负责处理几种特定事件。处理 Ajax 应用程序或者 SPI 应用程序时，Backbone 可能是最好的解决方案。</p>\n","excerpt":"<h4 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h4><p>Web 应用程序越来越关注于前端，使用客户端脚本与 Ajax 进行交互。由于 JavaScript 应用程序越来越复杂，如果没有合适的工具和模式，那么 JavaScript 代码的高效编写、非重复性和可维护性方面会面临挑战。<code>模型-视图-控制器 (MVC) 是一个常见模式，可用于服务器端开发以生成有组织以及易维护的代码。</code>MVC 支持将数据（比如通常用于 Ajax 交互的 JavaScript Object Notation (JSON) 对象）从表示层或从页面的文档对象模型 (document object model, DOM) 中分离出来，也可适用于客户端开发。<br>","more":"<br><code>Backbone（也称为 Backbone.js）</code>是由 Jeremy Ashkenas 创建的一个轻量级库，可用于创建 MVC 类应用程序。Backbone：<br>强制依赖于 Underscore.js，<code>Underscore.js</code> 是一个实用型库<br>非强制依赖于 jQuery/Zepto<br>根据模型的变更自动更新应用程序的 HTML，有助于代码维护<br>促进客户端模板使用，避免了在 JavaScript 中嵌入 HTML 代码<br>模型、视图、集合和路由器是 Backbone 框架中的主要组件。在 Backbone 中，模型会存储通过 RESTful JSON 接口从服务器检索到的数据。模型与视图密切关联，负责为特定 UI 组件渲染 HTML 并处理元素上触发的事件，这也是视图本身的一部分。<br>常用缩略词<br><code>DOM：文档对象模型\nMVC：模型-视图-控制器\nSPI：单页界面</code></p>\n<h4 id=\"SPI-应用程序：Backbone-Router-和-Backbone-history\"><a href=\"#SPI-应用程序：Backbone-Router-和-Backbone-history\" class=\"headerlink\" title=\"SPI 应用程序：Backbone.Router 和 Backbone.history\"></a>SPI 应用程序：Backbone.Router 和 Backbone.history</h4><p>含有大量 Ajax 交互的应用程序越来越像那些无页面刷新的应用程序。这些应用程序常常试图限制与单个页面的交互。该 SPI 方法提高了效率和速度，并使整个应用程序变得更灵敏。状态概念代替了页面概念。散列 (Hash) 片段被用于识别一个特定状态。散列片段 是 URL 中散列标签 (#) 后的那部分，是该类应用程序的关键元素。清单 1 显示了一个 SPI 应用程序使用两个不同的散列片段产生的两个不同状态。</p>\n<h4 id=\"清单-1-SPI-或-Ajax-应用程序中的两个不同状态\"><a href=\"#清单-1-SPI-或-Ajax-应用程序中的两个不同状态\" class=\"headerlink\" title=\"清单 1. SPI 或 Ajax 应用程序中的两个不同状态\"></a>清单 1. SPI 或 Ajax 应用程序中的两个不同状态</h4><p><a href=\"http://www.example.com/#/state1\">http://www.example.com/#/state1</a><br><a href=\"http://www.example.com/#/state2\">http://www.example.com/#/state2</a><br>Backbone 提供一个称为路由器（版本 0.5 前称之为控制器）的组件来路由客户端状态。路由器可以扩展 Backbone.Router 函数，且包含一个散列映射（routes 属性）将状态与活动关联起来。当应用程序达到相关状态时，会触发一个特定活动。清单 2 展示了一个 Backbone 路由器示例。</p>\n<h4 id=\"清单-2-Backbone-Router-示例：routers-js\"><a href=\"#清单-2-Backbone-Router-示例：routers-js\" class=\"headerlink\" title=\"清单 2. Backbone.Router 示例：routers.js\"></a>清单 2. Backbone.Router 示例：routers.js</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">App.Routers.Main = Backbone.Router.extend(&#123;</div><div class=\"line\"></div><div class=\"line\">   // Hash maps for routes</div><div class=\"line\">   routes : &#123;</div><div class=\"line\">      &quot;&quot; : &quot;index&quot;,</div><div class=\"line\">      &quot;/teams&quot; : &quot;getTeams&quot;,</div><div class=\"line\">      &quot;/teams/:country&quot; : &quot;getTeamsCountry&quot;,</div><div class=\"line\">      &quot;/teams/:country/:name : &quot;getTeam&quot;</div><div class=\"line\">      &quot;*error&quot; : &quot;fourOfour&quot;</div><div class=\"line\">   &#125;,</div><div class=\"line\"></div><div class=\"line\">   index: function()&#123;</div><div class=\"line\">       // Homepage</div><div class=\"line\">   &#125;,</div><div class=\"line\"></div><div class=\"line\">   getTeams: function() &#123;</div><div class=\"line\">       // List all teams</div><div class=\"line\">   &#125;,</div><div class=\"line\">   getTeamsCountry: function(country) &#123;</div><div class=\"line\">       // Get list of teams for specific country</div><div class=\"line\">   &#125;,</div><div class=\"line\">   getTeam: function(country, name) &#123;</div><div class=\"line\">       // Get the teams for a specific country and with a specific name</div><div class=\"line\">   &#125;,</div><div class=\"line\">   fourOfour: function(error) &#123;</div><div class=\"line\">       // 404 page</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>创建的每个状态可以为书签。当 URL 碰到类似下面情况时，会调用这 5 个活动（index、getTeams、getTeamsCountry、getTeamCountry 和 fourOfour）。<br><a href=\"http://www.example.com\">http://www.example.com</a> 触发 index()<br><a href=\"http://www.example.com/#/teams\">http://www.example.com/#/teams</a> 触发 getTeams()<br><a href=\"http://www.example.com/#/teams/country1\">http://www.example.com/#/teams/country1</a> 触发 getTeamsCountry() 传递 country1 作为参数<br><a href=\"http://www.example.com/#/teams/country1/team1\">http://www.example.com/#/teams/country1/team1</a> 触发 getTeamCountry() 传递 country1 和 team1 作为参数<br><a href=\"http://www.example.com/#/something\">http://www.example.com/#/something</a> 触发 fourOfour() 以作 * （星号）使用。<br>要启动 Backbone，先实例化页面加载的路由器，并通过指令 Backbone.history.start() 方法监视散列片段中的任何变更，如 清单 3 所示。</p>\n<h4 id=\"清单-3-应用程序实例化（使用-jQuery）\"><a href=\"#清单-3-应用程序实例化（使用-jQuery）\" class=\"headerlink\" title=\"清单 3. 应用程序实例化（使用 jQuery）\"></a>清单 3. 应用程序实例化（使用 jQuery）</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(function()&#123;</div><div class=\"line\">    var router = new App.Routers.Main();</div><div class=\"line\">    Backbone.history.start(&#123;pushState : true&#125;);</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>当实例化路由器时，会生成 Backbone.history 对象；它将自动引用 Backbone.History 函数。Backbone.History 负责匹配路由和 router 对象中定义的活动。start() 方法触发后，将创建 Backbone.history 的 fragment 属性。它包含散列片段的值。该序列在根据状态次序管理浏览器历史方面十分有用。用户如果想要返回前一状态，单击浏览器的返回按钮。<br>在 清单 3 的示例中，通过一个启用 HTML5 特性 pushState 的配置调用 start() 方法。对于那些支持 pushState 的浏览器，Backbone 将监视 popstate 事件以触发一个新状态。如果浏览器不能支持 HTML5 特性，那么 onhashchange 活动会被监视。如果浏览器不支持该事件，轮询技术将监视 URL 散列片段的任何更改。</p>\n<p>模型和集合<br>模型和集合是 Backbone.js 的重要组件，模型将数据（通常是来自服务器的数据）存储在键值对中。要创建一个模型，需要扩展 Backbone.Model，如 清单 4 所示。</p>\n<h4 id=\"清单-4-Backbone-Model-创建\"><a href=\"#清单-4-Backbone-Model-创建\" class=\"headerlink\" title=\"清单 4. Backbone.Model 创建\"></a>清单 4. Backbone.Model 创建</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">App.Models.Team = Backbone.Model.extend(&#123;</div><div class=\"line\">    defaults : &#123;</div><div class=\"line\">       // default attributes</div><div class=\"line\">    &#125;</div><div class=\"line\">    // Domain-specific methods go here</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>App.Models.Team 函数是一个新模型函数，但是必须创建一个实例才能在应用程序中使用特定模型，如 清单 5 所示。</p>\n<h4 id=\"清单-5-模型实例化\"><a href=\"#清单-5-模型实例化\" class=\"headerlink\" title=\"清单 5. 模型实例化\"></a>清单 5. 模型实例化</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">var team1 = new App.Models.Team();</div></pre></td></tr></table></figure>\n<p>现在，变量 team1 有一个名为 cid 的字段名，这是一个客户端标识符，形式为 “c” 再加上一个数字（例如，c0、c1、c2）。模型是通过存储在散列映射中的属性来定义的。属性可以在实例化时进行设置，或者使用 set() 方法设置。属性值可通过 get() 方法检索。清单 6 显示了如何通过实例化或 get()/set() 方法设置和获取属性。</p>\n<h4 id=\"清单-6-模型实例化和-get-set-方法\"><a href=\"#清单-6-模型实例化和-get-set-方法\" class=\"headerlink\" title=\"清单 6. 模型实例化和 get/set 方法\"></a>清单 6. 模型实例化和 get/set 方法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">// &quot;name&quot; attribute is set into the model</div><div class=\"line\">var team1 = new App.Models.Team(&#123;</div><div class=\"line\">    name : &quot;name1&quot;</div><div class=\"line\">&#125;);</div><div class=\"line\">console.log(team1.get(&quot;name&quot;)); // prints &quot;name1&quot;</div><div class=\"line\"></div><div class=\"line\">// &quot;name&quot; attribute is set with a new value</div><div class=\"line\">team1.set(&#123;</div><div class=\"line\">    name : &quot;name2&quot;</div><div class=\"line\">&#125;);</div><div class=\"line\">console.log(team1.get(&quot;name&quot;)); //prints &quot;name2&quot;</div></pre></td></tr></table></figure>\n<p>当使用 JavaScript 对象时，使用 set() 方法创建或者设置属性值的原因并不是显而易见的。其中一个原因是为了更新此值，如 清单 7 所示。</p>\n<h4 id=\"清单-7-以错误的方法更新属性\"><a href=\"#清单-7-以错误的方法更新属性\" class=\"headerlink\" title=\"清单 7. 以错误的方法更新属性\"></a>清单 7. 以错误的方法更新属性</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">team1.attributes.name = &quot;name2&quot;;</div></pre></td></tr></table></figure>\n<p>为了避免 使用 清单 7 中的代码，使用 set() 是改变模型状态并触发其变更事件的唯一方法。使用 set() 提升封装原则。清单 8 展示了如何将一个事件处理程序绑到发生变更的事件中。该事件处理程序包含一个 alert，在调用 set() 方法时会被触发，如 清单 6 所示。但是，在使用 清单 7 中的代码时不触发 alert。</p>\n<h4 id=\"清单-8-更改-App-Models-Team-模型中的事件处理程序\"><a href=\"#清单-8-更改-App-Models-Team-模型中的事件处理程序\" class=\"headerlink\" title=\"清单 8. 更改 App.Models.Team 模型中的事件处理程序\"></a>清单 8. 更改 App.Models.Team 模型中的事件处理程序</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">App.Models.Team = Backbone.Model.extend(&#123;</div><div class=\"line\">    initialize : function()&#123;</div><div class=\"line\">        this.bind(&quot;change&quot;, this.changed);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    changed : function()&#123;</div><div class=\"line\">        alert(&quot;changed&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>Backbone 的另一个优势是易于通过 Ajax 交互与服务器进行通信。在模型上调用一个 save() 方法会通过 REST JSON API 异步将当前状态保存到服务器。清单 9 展示了此示例。</p>\n<h4 id=\"清单-9-在模型对象上调用-save-方法\"><a href=\"#清单-9-在模型对象上调用-save-方法\" class=\"headerlink\" title=\"清单 9. 在模型对象上调用 save 方法\"></a>清单 9. 在模型对象上调用 save 方法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">barca.save();</div></pre></td></tr></table></figure>\n<p>save() 函数将在后台委托给 Backbone.sync，这是负责发出 RESTful 请求的组件，默认使用 jQuery 函数 $.ajax()。由于调用了 REST 风格架构，每个 Create、Read、Update 或 Delete (CRUD) 活动均会与各种不同类型的 HTTP 请求（POST、GET、PUT 和 DELETE）相关联。首先保存模型对象，使用一个 POST 请求，创建一个标识符 ID，其后，尝试发送对象到服务器，使用一个 PUT 请求。<br>当需要从服务器检索一个模型时，请求一个 Read 活动并使用一个 Ajax GET 请求。这类请求使用 fetch() 方法。要确定导入模型数据或者从中取出模型数据的服务器的位置：<br>如果模型属于一个 collection，那么集合对象的 url 属性将是该位置的基础，并且该模型 ID（不是 cid）会被附加以构成完整的 URL。<br>如果模型不是在一个集合中，那么该模型的 urlroot 属性被用作该位置的基础<br>清单 10 显示了如何获取一个模型。</p>\n<h4 id=\"清单-10-模型对象的-Fetch-方法\"><a href=\"#清单-10-模型对象的-Fetch-方法\" class=\"headerlink\" title=\"清单 10. 模型对象的 Fetch() 方法\"></a>清单 10. 模型对象的 Fetch() 方法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">var teamNew = new App.Models.Team(&#123;</div><div class=\"line\">    urlRoot : &apos;/specialTeams&apos;</div><div class=\"line\">&#125;);</div><div class=\"line\">teamNew.save(); // returns model&apos;s ID equal to &apos;222&apos;</div><div class=\"line\">teamNew.fetch(); // Ajax request to &apos;/specialTeams/222&apos;</div></pre></td></tr></table></figure>\n<p>validate() 方法被用于验证模型，如 清单 11 所示。需要重写 validate() 方法（在调用 set() 方法时触发）来包含模型的有效逻辑。传递给该函数的惟一参数是一个 JavaScript 对象，该对象包含了 set() 方法更新的属性，以便验证那些属性的条件。如果从 validate() 方法中没有返回任何内容，那么验证成功。如果返回一个错误消息，那么验证失败，将无法执行 set() 方法。</p>\n<h4 id=\"清单-11-模型的验证方法\"><a href=\"#清单-11-模型的验证方法\" class=\"headerlink\" title=\"清单 11. 模型的验证方法\"></a>清单 11. 模型的验证方法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">App.Models.Team = Backbone.Model.extend(&#123;</div><div class=\"line\">    validate : function(attributes)&#123;</div><div class=\"line\">        if (!!attributes &amp;&amp; attributes.name === &quot;teamX&quot;) &#123;</div><div class=\"line\">            // Error message returned if the value of the &quot;name&quot;</div><div class=\"line\">            // attribute is equal to &quot;teamX&quot;</div><div class=\"line\">            return &quot;Error!&quot;;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>一组模型被分组到到集合中，这个集合是 Backbone.Collection 的扩展函数。集合具有一个模型属性的特性，定义了组成该集合的模型类型。使用 add()/remove() 方法可以将一个模型添加和移动到集合中。清单 12 显示了如何创建和填充一个集合。</p>\n<h4 id=\"清单-12-Backbone-集合\"><a href=\"#清单-12-Backbone-集合\" class=\"headerlink\" title=\"清单 12. Backbone 集合\"></a>清单 12. Backbone 集合</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">App.Collections.Teams = Backbone.Collection.extend(&#123;</div><div class=\"line\">    model : App.Models.Team</div><div class=\"line\">&#125;);</div><div class=\"line\">var teams = new App.Collections.Teams();</div><div class=\"line\"></div><div class=\"line\">// Add e model to the collection object &quot;teams&quot;</div><div class=\"line\">teams.add(team1);</div><div class=\"line\">teams.add(new App.Models.Team(&#123;</div><div class=\"line\">    name : &quot;Team B&quot;</div><div class=\"line\">&#125;));</div><div class=\"line\">teams.add(new App.Models.Team());</div><div class=\"line\">teams.remove(team1);</div><div class=\"line\"></div><div class=\"line\">console.log(teams.length) // prints 2</div></pre></td></tr></table></figure>\n<p>创建的 teams 集合中包含一个含有两个模型的阵列，存储在模型属性中。尽管，在典型 Ajax 应用程序中，会从服务器动态（不是人工）填充该集合。fetch() 方法可以帮助完成此项任务，如 清单 13 所示，并将数据存储到模型阵列中。</p>\n<h4 id=\"清单-13-Fetch-方法\"><a href=\"#清单-13-Fetch-方法\" class=\"headerlink\" title=\"清单 13. Fetch() 方法\"></a>清单 13. Fetch() 方法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">teams.fetch();</div></pre></td></tr></table></figure>\n<p>Backbone 中的集合拥有一个 url 属性，定义了使用 Ajax GET 请求从服务器取出 JSON 数据的位置，如 清单 14 所示。</p>\n<h4 id=\"清单-14-集合的-url-属性和-fetch-方法\"><a href=\"#清单-14-集合的-url-属性和-fetch-方法\" class=\"headerlink\" title=\"清单 14. 集合的 url 属性和 fetch() 方法\"></a>清单 14. 集合的 url 属性和 fetch() 方法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">teams.url = &apos;/getTeams&apos;;</div><div class=\"line\">teams.fetch(); //Ajax GET Request to &apos;/getTeams&apos;</div></pre></td></tr></table></figure>\n<p>Fetch() 方法属于异步调用，因此，在等待服务器响应时，应用程序不会中止。在一些情况下，要操作来自服务器的原始数据，可以使用集合的 parse() 方法。正如 清单 15 所示。</p>\n<h4 id=\"清单-15-parse-方法\"><a href=\"#清单-15-parse-方法\" class=\"headerlink\" title=\"清单 15. parse() 方法\"></a>清单 15. parse() 方法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">App.Collections.Teams = Backbone.Collection.extend(&#123;</div><div class=\"line\">    model : App.Models.Team,</div><div class=\"line\">    parse : function(data) &#123;</div><div class=\"line\">        // &apos;data&apos; contains the raw JSON object</div><div class=\"line\">        console.log(data);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>集合提供的另一个有趣的方法是 reset()，它允许将多个模型设置到一个集合中。reset() 方法可以非常方便地将数据引导到集合中，比如页面加载，来避免用户等待异步调用返回。</p>\n<p>视图和客户端模板<br>Backbone 中的视图与典型 MVC 方法的视图不一样。Backbone 视图可以扩展 Backbone.View 函数并显示模型中存储的数据。一个视图提供一个由 el 属性定义的 HTML 元素。该属性可以是由 tagName、className 和 id 属性相组合而构成的，或者是通过其本身的 el 值形成的。清单 16 显示了使用这不同方法组合 el 属性的两个不同视图。</p>\n<h4 id=\"清单-16-Backbone-视图样例\"><a href=\"#清单-16-Backbone-视图样例\" class=\"headerlink\" title=\"清单 16. Backbone 视图样例\"></a>清单 16. Backbone 视图样例</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">// In the following view, el value is &apos;UL.team-element&apos;</div><div class=\"line\">App.Views.Teams = Backbone.View.extend(&#123;</div><div class=\"line\">    el : &apos;UL.team-list&apos;</div><div class=\"line\">&#125;);</div><div class=\"line\">// In the following view, el value is &apos;div.team-element&apos;</div><div class=\"line\">App.Views.Team = Backbone.View.extend(&#123;</div><div class=\"line\">    className : &apos;.team-element&apos;,</div><div class=\"line\">    tagName : &apos;div&apos;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>如果 el、tagName、className 和 id 属性为空，那么会默认将一个空的 DIV 分配给 el。<br>如上所述，一个视图必须与一个模型相关联。该模型属性也很有用，如 清单 17 所示。App.View.Team 视图被绑定到一个 App.Models.Team 模型实例。</p>\n<h4 id=\"清单-17-Backbone-视图中的模型属性\"><a href=\"#清单-17-Backbone-视图中的模型属性\" class=\"headerlink\" title=\"清单 17. Backbone 视图中的模型属性\"></a>清单 17. Backbone 视图中的模型属性</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">// In the following view, el value is &apos;UL.team-element&apos;</div><div class=\"line\">App.Views.Team = Backbone.View.extend(&#123;</div><div class=\"line\">    ...</div><div class=\"line\">    model : new App.Models.Team</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>要渲染数据（这是视图的主要目的），重写 render() 方法和逻辑来显示 DOM 元素（由 el 属性引用的）中的模型属性。清单 18 展示了一个 render 方法如何更新用户界面的样例。</p>\n<h4 id=\"清单-18-Render-方法\"><a href=\"#清单-18-Render-方法\" class=\"headerlink\" title=\"清单 18. Render() 方法\"></a>清单 18. Render() 方法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">App.Views.Team = Backbone.View.extend(&#123;</div><div class=\"line\">    className : &apos;.team-element&apos;,</div><div class=\"line\">    tagName : &apos;div&apos;,</div><div class=\"line\">    model : new App.Models.Team</div><div class=\"line\">    render : function() &#123;</div><div class=\"line\">        // Render the &apos;name&apos; attribute of the model associated</div><div class=\"line\">        // inside the DOM element referred by &apos;el&apos;</div><div class=\"line\">        $(this.el).html(&quot;&lt;span&gt;&quot; + this.model.get(&quot;name&quot;) + &quot;&lt;/span&gt;&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>Backbone 也可以促进客户端模板的使用，这就使得我们没有必要在 JavaScript 中嵌入 HTML 代码，如 清单 18 所示。（使用模板，模板会封装视图中常见函数；只指定此函数一次即可。）Backbone 在 underscore.js（一个必须的库）中提供一个模板引擎，尽管没有必要使用该模板引擎。清单 19 中的实例使用 underscore.js HTML 模板。</p>\n<h4 id=\"清单-19-HTML-含有模板\"><a href=\"#清单-19-HTML-含有模板\" class=\"headerlink\" title=\"清单 19. HTML 含有模板\"></a>清单 19. HTML 含有模板</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script id=&quot;teamTemplate&quot; type=&quot;text/template&quot;&gt;</div><div class=\"line\">    &lt;%= name %&gt;</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure>\n<p>清单 20 显示了另一个使用 underscore.js HTML 模板的样例。</p>\n<h4 id=\"清单-20-使用-template-函数的视图\"><a href=\"#清单-20-使用-template-函数的视图\" class=\"headerlink\" title=\"清单 20. 使用 _.template() 函数的视图\"></a>清单 20. 使用 _.template() 函数的视图</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">App.Views.Team = Backbone.View.extend(&#123;</div><div class=\"line\">    className : &apos;.team-element&apos;,</div><div class=\"line\">    tagName : &apos;div&apos;,</div><div class=\"line\">    model : new App.Models.Team</div><div class=\"line\">    render : function() &#123;</div><div class=\"line\">        // Compile the template</div><div class=\"line\">        var compiledTemplate = _.template($(&apos;#teamTemplate&apos;).html());</div><div class=\"line\">        // Model attributes loaded into the template. Template is</div><div class=\"line\">        // appended to the DOM element referred by the el attribute</div><div class=\"line\">        $(this.el).html(compiledTemplate(this.model.toJSON()));</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>Backbone 中最有用且最有趣的一个功能是将 render() 方法绑定到模型的变更事件中，如 清单 21 所示。</p>\n<h4 id=\"清单-21-Render-方法绑定到模型变更事件\"><a href=\"#清单-21-Render-方法绑定到模型变更事件\" class=\"headerlink\" title=\"清单 21. Render() 方法绑定到模型变更事件\"></a>清单 21. Render() 方法绑定到模型变更事件</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">// In the following view, el value is &apos;div.team-element&apos;</div><div class=\"line\">App.Views.Team = Backbone.View.extend(&#123;</div><div class=\"line\">    model : new App.Models.Team,</div><div class=\"line\">    initialize : function() &#123;</div><div class=\"line\">        this.model.bind(&quot;change&quot;, this.render, this);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>上述代码将 render() 方法绑定到一个模型的变更事件中。当模型发生更改时，会自动触发 render() 方法，从而节省数行代码。从 Backbone 0.5.2 开始，bind() 方法就开始接受使用第三个参数来定义回调函数的对象。（在上述示例中，当前视图是回调函数 render() 中的对象）。在 Backbone 0.5.2 之前的版本中，必须使用 underscore.js 中的 bindAll 函数，如 清单 22 所示。</p>\n<h4 id=\"清单-22-bindAll-usage\"><a href=\"#清单-22-bindAll-usage\" class=\"headerlink\" title=\"清单 22. _.bindAll() usage\"></a>清单 22. _.bindAll() usage</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">// In the following view, el value is &apos;div.team-element&apos;</div><div class=\"line\">App.Views.Team = Backbone.View.extend(&#123;</div><div class=\"line\">    initialize : function() &#123;</div><div class=\"line\">        _.bindAll(this, &quot;render&quot;);</div><div class=\"line\">        this.model.bind(&quot;change&quot;, this.render);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Backbone 视图中，通过视图中的 DOM 对象监听事件是比较容易的。对于实现这一点，events 属性很是方便的，如 清单 23 所示。</p>\n<h4 id=\"清单-23-事件属性\"><a href=\"#清单-23-事件属性\" class=\"headerlink\" title=\"清单 23. 事件属性\"></a>清单 23. 事件属性</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">App.Views.Team = Backbone.View.extend(&#123;</div><div class=\"line\">    className : &apos;.team-element&apos;,</div><div class=\"line\">    tagName : &apos;div&apos;,</div><div class=\"line\">    events : &#123;</div><div class=\"line\">        &quot;click a.more&quot; : &quot;moreInfo&quot;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    moreInfo : function(e)&#123;</div><div class=\"line\">         // Logic here</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>events 属性的每个项均由两部分构成：<br>左边部分指定事件类型和触发事件的选择器。<br>右边部分定义了事件处理函数。<br>在 清单 23 中，当用户通过 DIV 中的类 more 以及类 team-element 点击链接时，会调用函数 moreInfo。</p>\n<h4 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h4><p>MVC 模式可以为大型 JavaScript 应用程序提供所需的组织化代码。Backbone 是一个 JavaScript MVC 框架，它属于轻量级框架，且易于学习掌握。模型、视图、集合和路由器从不同的层面划分了应用程序，并负责处理几种特定事件。处理 Ajax 应用程序或者 SPI 应用程序时，Backbone 可能是最好的解决方案。</p>"},{"title":"借助nodejs探究websocket","date":"2017-04-08T07:49:22.000Z","_content":"#### 文章导读：\n\n>* 一、概述-what's WebSocket?\n>* 二、运行在浏览器中的WebSocket客户端+使用ws模块搭建的简单服务器\n>* 三、Node中的WebSocket\n>* 四、socket.io\n>* 五、扩展阅读\n#### 一、概述-what's WebSocket?\n\n##### 1.1 为什么我们需要WebSocket这样的实时的通信协议？\n\nWebSocket是web通信方式的一种，像我们熟知的HTTP协议也是web通信方式的一种。但是我们知道HTTP协议是一种无状态的协议，其服务端本身不具备识别客户端的能力，必须借助外部的一些信息比如说session和cookie，才能与特定的客户端保持通信。\n<!--more-->\n也就是说我们所发送的每一个HTTP的请求都会带上请求头中一些相应的信息还有cookie，这明显会增加我们传输的信息的体量从而带来一定的网络延迟，对于一些对通信的实时性要求比较高的应用来说就是不可忍受的了，比如说聊天程序或者是运行在浏览器中的实时小游戏。最郁闷的却还是这些头信息和cookie往往对于服务器响应客户端的请求来说是多余的，也就是说虽然我每个请求都带了这些信息，但是服务器与客户端的交互过程中可能根本用不上这些信息。\n\n为了改善HTTP请求的这种网络延迟的情况，也出现了一些适应不同需求的其他的[web通信]方式，比如说：轮询，长轮询( long-polling )，数据流，EventSouce等等，WebSocket便是其中一种。\n\n实际上大多数基于因特网（或者局域网）的网络链接通常都包含长连接和基于TCP套接字的双向消息交换。但是TCP协议是属于最底层的网络通信协议了，让一些不能信任的客户端脚本去访问底层的TCP套接字显然是不太安全的，因此WebSocket实现了一种较为安全的方案，它允许客户端脚本在客户端和支持WebSocket协议的服务器之间创建双向的套接字连接。从而使实时通信的某些网络操作变得简单。\n\n##### 1.2 WebSocket是如何工作的？\n\n我们知道了WebSocket的主要作用是，允许服务器端与客户端进行全双工（full-duplex）的实时通信。这里有个例子特别好：HTTP协议像发电子邮件，发出后必须等待对方回信；WebSocket则是像打电话，服务器端和客户端可以同时向对方发送数据，它们之间存着一条持续打开的数据通道。\n\n我们先看一下一个基于WebSocket协议通信的请求头和响应头(下面简单实例中的一个消息头)：\n\n\n\n其中与WebSocket协议相关的信息：\n\n>* 1 Upgrade:websocket-------HTTP1.1协议规定，Upgrade头信息表示将通信协议从HTTP/1.1转向该项所指定的协议；\n>* 2 Connection:Upgrade------表示浏览器通知服务器，如果允许，就将通信协议升级到websocket协议；\n>* 3 Origin------------------用于验证浏览器域名是否在服务器许可的范围内;\n>* 4 Sec-WebSocket-Key-------则是用于握手协议的密钥，是base64编码的16字节随机字符串;\n>* 5 Sec-WebSocket-Accept----是服务器在浏览器提供的Sec-WebSocket-Key字符串后面，添加“258EAFA5-E914-47DA-95CA-C5AB0DC85B11” 字符串，然后再取sha-1的hash值。浏览器将对这个值进行验证，以证明确实是目标服务器回应了webSocket请求；\n>* 6.Sec-WebSocket-Location--一般情况下还有这个响应消息头用来表示进行通信的WebSocket网址，这里面可能是因为我例子中设置了127.0.0.1，所以这个信息省略掉了。\n客户端通过一个WebSocket握手的过程建立一个WebSocket连接。整个过程看起来是这个样子的：\n\n\n\n完成握手以后，WebSocket协议就在TCP协议之上，客户端和服务器端就可以开始传送数据了。\n\nwebsocket协议用ws表示，加密的websocket协议用wss协议，就像普通的HTTP协议用http表示，加密的HTTP协议用https表示一样。\n\n下面我们就通过一些实例看一下websocket的不同实现是如何应用的。\n\n#### 二、 运行在浏览器中的WebSocket客户端+使用ws模块搭建的简单服务器\n\n我们可以通过跑起来这个简单的实例看一下如何编写运行在浏览器中的WebSocket客户端，并且看它是怎样与服务器端交互的。\n\n##### 2.1 运行实例\n\n我们把客户端代码和服务端代码准备好，然后启动服务器监听端口，比如说8080，再然后运行我们的客户端代码即可看到效果。\n\n我们的客户端代码写在html文件中：\n\n\n```\n1 var onOpen = function() {\n2            console.log(\"Socket opened.\");\n3                 socket.send(\"Hi, Server!\");\n4             },\n5             onClose = function() {\n6                 console.log(\"Socket closed.\");\n7             },\n8\n9\n10             onMessage = function(data) {\n11                 console.log(\"We get signal:\");\n12                 console.log(data);\n13             },\n14\n15\n16             onError = function() {\n17                 console.log(\"We got an error.\");\n18             },\n19\n20             \n21             socket = new WebSocket(\"ws://127.0.0.1:8080/\");\n22\n23         socket.onopen = onOpen;\n24         socket.onclose = onClose;\n25         socket.onerror = onError;\n26         socket.onmessage = onMessage;\n```\n我们通过它建立连接并且监听open和messege等事件，与此同时，我们想要得到服务器的响应。服务器端的js代码：\n\n\n```\n1 var WebSocketServer = require('ws').Server;\n 2 var wss = new WebSocketServer({ port: 8080 });\n 3\n 4 wss.on('connection', function connection(ws) {\n 5   ws.on('message', function incoming(message) {\n 6     console.log('received: %s', message);\n 7   });\n 8\n 9   ws.send('something');\n10 });\n```\n这个简单的websocket服务器使用了[ ws模块 ]，如果没有安装过，要先安装一下：\n\n1 `sudo npm install ws`\n然后在我们的命令行执行：\n\n1 `node simpleWSserver.js`\n我们的服务器启动之后，我们运行客户端代码可以看到：\n\n浏览器：\n\n\n\n命令行：\n\n\n\n整个过程看起来是这个样子的：\n\n![](http://img2.tuicool.com/I7nmuqr.png!web)\n\n2.2 运行在浏览器中的websocket客户端\n\n我们在浏览器中的websocket主要做的事情无非是以下几个：\n\n1 建立连接和关闭连接\n2 发送数据和接收数据\n3 处理错误\n对应的会触发以下的事件：\n\n1`onopen`\n2`onmessage`\n3`onclose`\n4`onerror`\n2.2.1 建立连接和关闭连接\n\n通常我们新建了一个WebSocket的实例就可以建立一个连接：\n```\n1 if(window.WebSocket != undefined) {\n2     var socket = new WebSocket(\"ws://127.0.0.1:8080/\");\n3 }\n```\n建立连接之后的WebSocket实例有一个readyState属性，用来标识当前的状态：\n\n0-正在连接\n1-连接成功\n2-正在关闭\n3-关闭成功\n连接成功后会触发onopen事件，这时我们就可以向服务器发送数据了：\n```\n1 var onOpen = function() {\n2       console.log(\"Socket opened.\");\n3       socket.send(\"Hi, Server!\");\n4  }\n5 socket.onopen = onOpen;\n```\n要是关闭连接的话就会出发onclose事件：\n```\n1 var onClose = function() {\n2         console.log(\"Socket closed.\");\n3   }\n4 socket.onclose = onClose;\n```\n2.2.2 发送数据和接收数据\n\n在连接建立成功后触发的onopen事件中我们通过send()方法发送数据给服务器：\n\n`1 socket.send(\"Hi, Server!\");`\n除了发送字符串类型的数据，也可以使用 Blob 或 ArrayBuffer 对象发送二进制数据。不仅如此，我们还可以发送JSON数据：\n```\n1  var onOpen = function() {\n 2       var msg = {\n 3          type: \"message\",\n 4          text: \"something\",\n 5          id:   \"number\",\n 6          date: Date.now()\n 7       };\n 8\n 9    // Send the msg object as a JSON-formatted string.\n10    socket.send(JSON.stringify(msg));\n11   }\n12  socket.onopen = onOpen;\n```\n这时会触发服务器端的message事件：\n```\n1 ws.on('message', function incoming(message) {\n2     console.log('received: %s', message);\n3   });\n```\n同时，服务器端发来信息的时候：\n\n`1 ws.send('something');`\n也会触发客户端的onmessage事件：\n```\n1 var onMessage = function(data) {\n2         console.log(\"We get signal:\");\n3         console.log(data);\n4   }\n5 socket.onmessage = onMessage;\n```\n2.2.3 处理错误\n\n发生的错误会触发onerror事件：\n```\n1 var onError = function() {\n2      console.log(\"We got an error.\");\n3  }\n4 socket.onerror = onError;\n```\n三、Node中的WebSocket\n\nWebSocket在Node中的实现[ WebSocket-Node ]使我们可以在Nodejs中使用websokcet开发客户端和服务器端实时交互的应用程序。我们可以运行客户端和服务器实时交换随机数的例子看看它是怎么工作的：\nnode socketserver.js\n\nnode socketclient.js\n\n\n\n#### 四、socket.io\n\n现在很流行的websocket的实现socket.io同样包括客户端和服务器端两部分。它不仅简化了接口，使得操作更容易，而且对于那些不支持WebSocket的浏览器，会自动降为Ajax连接，最大限度地保证了兼容性。它的目标是统一通信机制，使得所有浏览器和移动设备都可以进行实时通信。\n\n##### 4.1 socket.io与WebSocket的区别在哪里呢？\n\nwebsocket是浏览器对象，websocket api是浏览器提供给我们的用于浏览器和服务器实时通信的接口。\n\nwebsocket在node中的实现使我们可以开发服务端程序时使用websocket的特性。\n\n在我们使用websocket的时候，因为他是浏览器提供的接口，所以会涉及到一些兼容性和支持性的问题。如果我们对程序所运行的环境或局限不是那么了解的化，那么可能会出现问题：\n\n[ Differences between socket.io and websocket ] 。而socket.io则是进化了的websocket api。socket.io建立在websocket之上，它在合适的时候使用websocket。\n\n4.2 socket.io实现聊天室\n\n使用websocket或socket.io可以从一个简单的聊天室程序开始。对于socket.io来说，这非常容易。\n\n基于 node ，这里使用express和socket.io：\n\n`1 npm install --save express@4.10.2`\n`2 npm install --save socket.io`\n那么我们就可以开始写聊天程序了。它需要的就是一个客户端的聊天窗口和一个用来接收消息和分发消息的服务器。\n\n我们需要三个文件，分别新建：package.json,index.js,index.html.\n\npackage.json:\n\n```\n\n1 {\n2   \"name\": \"chat-application\",\n3   \"version\": \"0.0.1\",\n4   \"description\": \"my first socket.io app\",\n5   \"dependencies\": {\n6     \"socket.io\": \"^1.3.5\"\n7   }\n8 }\n```\n\nindex.js:\n\n\n```\n1 var app = require('express')();\n 2 var http = require('http').Server(app);\n 3 var io = require('socket.io')(http);\n 4\n 5 app.get('/', function(req, res){\n 6   res.sendfile('index.html');\n 7 });\n 8\n 9 io.on('connection', function(socket){\n10   console.log('a user connected');\n11   //监听客户端的消息\n12   socket.on('chat message', function(msg){\n13       //用于将消息发送给每个人，包括发送者\n14     io.emit('chat message', msg);\n15   });\n16   socket.on('disconnect', function(){\n17     console.log('user disconnected');\n18   });\n19 });\n20\n21 http.listen(3000, function(){\n22   console.log('listening on *:3000');\n23 });\n```\nindex.html:\n\n\n```\n1 <!doctype html>\n 2 <html>\n 3   <head>\n 4     <title>Socket.IO chat</title>\n 5     <style>\n 6       * { margin: 0; padding: 0; box-sizing: border-box; }\n 7       body { font: 13px Helvetica, Arial; }\n 8       form { background: #000; padding: 3px; position: fixed; bottom: 0; width: 100%; }\n 9       form input { border: 0; padding: 10px; width: 90%; margin-right: .5%; }\n10       form button { width: 9%; background: rgb(130, 224, 255); border: none; padding: 10px; }\n11       #messages { list-style-type: none; margin: 0; padding: 0; }\n12       #messages li { padding: 5px 10px; }\n13       #messages li:nth-child(odd) { background: #eee; }\n14     </style>\n15   </head>\n16   <body>\n17     <ul id=\"messages\"></ul>\n18     <form action=\"\">\n19       <input id=\"m\" autocomplete=\"off\" /><button>Send</button>\n20     </form>\n21     <script src=\"https://cdn.socket.io/socket.io-1.2.0.js\"></script>\n22     <script src=\"http://code.jquery.com/jquery-1.11.1.js\"></script>\n23     <script>\n24       var socket = io();\n25       $('form').submit(function(){\n26         //io.emit提供给我们可以发送给所有人的事件io.emit('some event', { for: 'everyone' });\n27         socket.emit('chat message', $('#m').val());\n28         $('#m').val('');\n29         return false;\n30       });\n31       socket.on('chat message', function(msg){\n32         $('#messages').append($('<li>').text(msg));\n33       });\n34     </script>\n35   </body>\n36 </html>\n```\n先运行：\n\nnode index.js\n在打开两个http://localhost:3000的窗口就可以开始聊天了：\n\n\nsocket.io官网上有很详细的使用方法和教程：[ socket.io doc ]\n\n五、扩展阅读\n\n[ 浏览器对象-WebSocket ]\n\n[web通信]\n\n[细说WebSocket]\n\n[ WebSocket MDN ]\n\n[ WebSocket-Node implementation ]\n\n[ A Guide For WebSocket ]\n\n[ socket.IO ]\n\n[ writing websocket client ]\n\n[ deferences between socket.io and websocket ]\n\n[ websocket and socketio ]\n\n[ socket.io application ]\n","source":"_posts/借助nodejs探究websocket.md","raw":"---\ntitle: 借助nodejs探究websocket\ndate: 2017-04-08 15:49:22\ntags: [\"node\",\"websocket\"]\ncategories: [\"node\",\"websocket\"]\n---\n#### 文章导读：\n\n>* 一、概述-what's WebSocket?\n>* 二、运行在浏览器中的WebSocket客户端+使用ws模块搭建的简单服务器\n>* 三、Node中的WebSocket\n>* 四、socket.io\n>* 五、扩展阅读\n#### 一、概述-what's WebSocket?\n\n##### 1.1 为什么我们需要WebSocket这样的实时的通信协议？\n\nWebSocket是web通信方式的一种，像我们熟知的HTTP协议也是web通信方式的一种。但是我们知道HTTP协议是一种无状态的协议，其服务端本身不具备识别客户端的能力，必须借助外部的一些信息比如说session和cookie，才能与特定的客户端保持通信。\n<!--more-->\n也就是说我们所发送的每一个HTTP的请求都会带上请求头中一些相应的信息还有cookie，这明显会增加我们传输的信息的体量从而带来一定的网络延迟，对于一些对通信的实时性要求比较高的应用来说就是不可忍受的了，比如说聊天程序或者是运行在浏览器中的实时小游戏。最郁闷的却还是这些头信息和cookie往往对于服务器响应客户端的请求来说是多余的，也就是说虽然我每个请求都带了这些信息，但是服务器与客户端的交互过程中可能根本用不上这些信息。\n\n为了改善HTTP请求的这种网络延迟的情况，也出现了一些适应不同需求的其他的[web通信]方式，比如说：轮询，长轮询( long-polling )，数据流，EventSouce等等，WebSocket便是其中一种。\n\n实际上大多数基于因特网（或者局域网）的网络链接通常都包含长连接和基于TCP套接字的双向消息交换。但是TCP协议是属于最底层的网络通信协议了，让一些不能信任的客户端脚本去访问底层的TCP套接字显然是不太安全的，因此WebSocket实现了一种较为安全的方案，它允许客户端脚本在客户端和支持WebSocket协议的服务器之间创建双向的套接字连接。从而使实时通信的某些网络操作变得简单。\n\n##### 1.2 WebSocket是如何工作的？\n\n我们知道了WebSocket的主要作用是，允许服务器端与客户端进行全双工（full-duplex）的实时通信。这里有个例子特别好：HTTP协议像发电子邮件，发出后必须等待对方回信；WebSocket则是像打电话，服务器端和客户端可以同时向对方发送数据，它们之间存着一条持续打开的数据通道。\n\n我们先看一下一个基于WebSocket协议通信的请求头和响应头(下面简单实例中的一个消息头)：\n\n\n\n其中与WebSocket协议相关的信息：\n\n>* 1 Upgrade:websocket-------HTTP1.1协议规定，Upgrade头信息表示将通信协议从HTTP/1.1转向该项所指定的协议；\n>* 2 Connection:Upgrade------表示浏览器通知服务器，如果允许，就将通信协议升级到websocket协议；\n>* 3 Origin------------------用于验证浏览器域名是否在服务器许可的范围内;\n>* 4 Sec-WebSocket-Key-------则是用于握手协议的密钥，是base64编码的16字节随机字符串;\n>* 5 Sec-WebSocket-Accept----是服务器在浏览器提供的Sec-WebSocket-Key字符串后面，添加“258EAFA5-E914-47DA-95CA-C5AB0DC85B11” 字符串，然后再取sha-1的hash值。浏览器将对这个值进行验证，以证明确实是目标服务器回应了webSocket请求；\n>* 6.Sec-WebSocket-Location--一般情况下还有这个响应消息头用来表示进行通信的WebSocket网址，这里面可能是因为我例子中设置了127.0.0.1，所以这个信息省略掉了。\n客户端通过一个WebSocket握手的过程建立一个WebSocket连接。整个过程看起来是这个样子的：\n\n\n\n完成握手以后，WebSocket协议就在TCP协议之上，客户端和服务器端就可以开始传送数据了。\n\nwebsocket协议用ws表示，加密的websocket协议用wss协议，就像普通的HTTP协议用http表示，加密的HTTP协议用https表示一样。\n\n下面我们就通过一些实例看一下websocket的不同实现是如何应用的。\n\n#### 二、 运行在浏览器中的WebSocket客户端+使用ws模块搭建的简单服务器\n\n我们可以通过跑起来这个简单的实例看一下如何编写运行在浏览器中的WebSocket客户端，并且看它是怎样与服务器端交互的。\n\n##### 2.1 运行实例\n\n我们把客户端代码和服务端代码准备好，然后启动服务器监听端口，比如说8080，再然后运行我们的客户端代码即可看到效果。\n\n我们的客户端代码写在html文件中：\n\n\n```\n1 var onOpen = function() {\n2            console.log(\"Socket opened.\");\n3                 socket.send(\"Hi, Server!\");\n4             },\n5             onClose = function() {\n6                 console.log(\"Socket closed.\");\n7             },\n8\n9\n10             onMessage = function(data) {\n11                 console.log(\"We get signal:\");\n12                 console.log(data);\n13             },\n14\n15\n16             onError = function() {\n17                 console.log(\"We got an error.\");\n18             },\n19\n20             \n21             socket = new WebSocket(\"ws://127.0.0.1:8080/\");\n22\n23         socket.onopen = onOpen;\n24         socket.onclose = onClose;\n25         socket.onerror = onError;\n26         socket.onmessage = onMessage;\n```\n我们通过它建立连接并且监听open和messege等事件，与此同时，我们想要得到服务器的响应。服务器端的js代码：\n\n\n```\n1 var WebSocketServer = require('ws').Server;\n 2 var wss = new WebSocketServer({ port: 8080 });\n 3\n 4 wss.on('connection', function connection(ws) {\n 5   ws.on('message', function incoming(message) {\n 6     console.log('received: %s', message);\n 7   });\n 8\n 9   ws.send('something');\n10 });\n```\n这个简单的websocket服务器使用了[ ws模块 ]，如果没有安装过，要先安装一下：\n\n1 `sudo npm install ws`\n然后在我们的命令行执行：\n\n1 `node simpleWSserver.js`\n我们的服务器启动之后，我们运行客户端代码可以看到：\n\n浏览器：\n\n\n\n命令行：\n\n\n\n整个过程看起来是这个样子的：\n\n![](http://img2.tuicool.com/I7nmuqr.png!web)\n\n2.2 运行在浏览器中的websocket客户端\n\n我们在浏览器中的websocket主要做的事情无非是以下几个：\n\n1 建立连接和关闭连接\n2 发送数据和接收数据\n3 处理错误\n对应的会触发以下的事件：\n\n1`onopen`\n2`onmessage`\n3`onclose`\n4`onerror`\n2.2.1 建立连接和关闭连接\n\n通常我们新建了一个WebSocket的实例就可以建立一个连接：\n```\n1 if(window.WebSocket != undefined) {\n2     var socket = new WebSocket(\"ws://127.0.0.1:8080/\");\n3 }\n```\n建立连接之后的WebSocket实例有一个readyState属性，用来标识当前的状态：\n\n0-正在连接\n1-连接成功\n2-正在关闭\n3-关闭成功\n连接成功后会触发onopen事件，这时我们就可以向服务器发送数据了：\n```\n1 var onOpen = function() {\n2       console.log(\"Socket opened.\");\n3       socket.send(\"Hi, Server!\");\n4  }\n5 socket.onopen = onOpen;\n```\n要是关闭连接的话就会出发onclose事件：\n```\n1 var onClose = function() {\n2         console.log(\"Socket closed.\");\n3   }\n4 socket.onclose = onClose;\n```\n2.2.2 发送数据和接收数据\n\n在连接建立成功后触发的onopen事件中我们通过send()方法发送数据给服务器：\n\n`1 socket.send(\"Hi, Server!\");`\n除了发送字符串类型的数据，也可以使用 Blob 或 ArrayBuffer 对象发送二进制数据。不仅如此，我们还可以发送JSON数据：\n```\n1  var onOpen = function() {\n 2       var msg = {\n 3          type: \"message\",\n 4          text: \"something\",\n 5          id:   \"number\",\n 6          date: Date.now()\n 7       };\n 8\n 9    // Send the msg object as a JSON-formatted string.\n10    socket.send(JSON.stringify(msg));\n11   }\n12  socket.onopen = onOpen;\n```\n这时会触发服务器端的message事件：\n```\n1 ws.on('message', function incoming(message) {\n2     console.log('received: %s', message);\n3   });\n```\n同时，服务器端发来信息的时候：\n\n`1 ws.send('something');`\n也会触发客户端的onmessage事件：\n```\n1 var onMessage = function(data) {\n2         console.log(\"We get signal:\");\n3         console.log(data);\n4   }\n5 socket.onmessage = onMessage;\n```\n2.2.3 处理错误\n\n发生的错误会触发onerror事件：\n```\n1 var onError = function() {\n2      console.log(\"We got an error.\");\n3  }\n4 socket.onerror = onError;\n```\n三、Node中的WebSocket\n\nWebSocket在Node中的实现[ WebSocket-Node ]使我们可以在Nodejs中使用websokcet开发客户端和服务器端实时交互的应用程序。我们可以运行客户端和服务器实时交换随机数的例子看看它是怎么工作的：\nnode socketserver.js\n\nnode socketclient.js\n\n\n\n#### 四、socket.io\n\n现在很流行的websocket的实现socket.io同样包括客户端和服务器端两部分。它不仅简化了接口，使得操作更容易，而且对于那些不支持WebSocket的浏览器，会自动降为Ajax连接，最大限度地保证了兼容性。它的目标是统一通信机制，使得所有浏览器和移动设备都可以进行实时通信。\n\n##### 4.1 socket.io与WebSocket的区别在哪里呢？\n\nwebsocket是浏览器对象，websocket api是浏览器提供给我们的用于浏览器和服务器实时通信的接口。\n\nwebsocket在node中的实现使我们可以开发服务端程序时使用websocket的特性。\n\n在我们使用websocket的时候，因为他是浏览器提供的接口，所以会涉及到一些兼容性和支持性的问题。如果我们对程序所运行的环境或局限不是那么了解的化，那么可能会出现问题：\n\n[ Differences between socket.io and websocket ] 。而socket.io则是进化了的websocket api。socket.io建立在websocket之上，它在合适的时候使用websocket。\n\n4.2 socket.io实现聊天室\n\n使用websocket或socket.io可以从一个简单的聊天室程序开始。对于socket.io来说，这非常容易。\n\n基于 node ，这里使用express和socket.io：\n\n`1 npm install --save express@4.10.2`\n`2 npm install --save socket.io`\n那么我们就可以开始写聊天程序了。它需要的就是一个客户端的聊天窗口和一个用来接收消息和分发消息的服务器。\n\n我们需要三个文件，分别新建：package.json,index.js,index.html.\n\npackage.json:\n\n```\n\n1 {\n2   \"name\": \"chat-application\",\n3   \"version\": \"0.0.1\",\n4   \"description\": \"my first socket.io app\",\n5   \"dependencies\": {\n6     \"socket.io\": \"^1.3.5\"\n7   }\n8 }\n```\n\nindex.js:\n\n\n```\n1 var app = require('express')();\n 2 var http = require('http').Server(app);\n 3 var io = require('socket.io')(http);\n 4\n 5 app.get('/', function(req, res){\n 6   res.sendfile('index.html');\n 7 });\n 8\n 9 io.on('connection', function(socket){\n10   console.log('a user connected');\n11   //监听客户端的消息\n12   socket.on('chat message', function(msg){\n13       //用于将消息发送给每个人，包括发送者\n14     io.emit('chat message', msg);\n15   });\n16   socket.on('disconnect', function(){\n17     console.log('user disconnected');\n18   });\n19 });\n20\n21 http.listen(3000, function(){\n22   console.log('listening on *:3000');\n23 });\n```\nindex.html:\n\n\n```\n1 <!doctype html>\n 2 <html>\n 3   <head>\n 4     <title>Socket.IO chat</title>\n 5     <style>\n 6       * { margin: 0; padding: 0; box-sizing: border-box; }\n 7       body { font: 13px Helvetica, Arial; }\n 8       form { background: #000; padding: 3px; position: fixed; bottom: 0; width: 100%; }\n 9       form input { border: 0; padding: 10px; width: 90%; margin-right: .5%; }\n10       form button { width: 9%; background: rgb(130, 224, 255); border: none; padding: 10px; }\n11       #messages { list-style-type: none; margin: 0; padding: 0; }\n12       #messages li { padding: 5px 10px; }\n13       #messages li:nth-child(odd) { background: #eee; }\n14     </style>\n15   </head>\n16   <body>\n17     <ul id=\"messages\"></ul>\n18     <form action=\"\">\n19       <input id=\"m\" autocomplete=\"off\" /><button>Send</button>\n20     </form>\n21     <script src=\"https://cdn.socket.io/socket.io-1.2.0.js\"></script>\n22     <script src=\"http://code.jquery.com/jquery-1.11.1.js\"></script>\n23     <script>\n24       var socket = io();\n25       $('form').submit(function(){\n26         //io.emit提供给我们可以发送给所有人的事件io.emit('some event', { for: 'everyone' });\n27         socket.emit('chat message', $('#m').val());\n28         $('#m').val('');\n29         return false;\n30       });\n31       socket.on('chat message', function(msg){\n32         $('#messages').append($('<li>').text(msg));\n33       });\n34     </script>\n35   </body>\n36 </html>\n```\n先运行：\n\nnode index.js\n在打开两个http://localhost:3000的窗口就可以开始聊天了：\n\n\nsocket.io官网上有很详细的使用方法和教程：[ socket.io doc ]\n\n五、扩展阅读\n\n[ 浏览器对象-WebSocket ]\n\n[web通信]\n\n[细说WebSocket]\n\n[ WebSocket MDN ]\n\n[ WebSocket-Node implementation ]\n\n[ A Guide For WebSocket ]\n\n[ socket.IO ]\n\n[ writing websocket client ]\n\n[ deferences between socket.io and websocket ]\n\n[ websocket and socketio ]\n\n[ socket.io application ]\n","slug":"借助nodejs探究websocket","published":1,"updated":"2017-04-11T01:34:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5naxw4n000zfcxe0uwpq3u3","content":"<h4 id=\"文章导读：\"><a href=\"#文章导读：\" class=\"headerlink\" title=\"文章导读：\"></a>文章导读：</h4><blockquote>\n<ul>\n<li>一、概述-what’s WebSocket?</li>\n<li>二、运行在浏览器中的WebSocket客户端+使用ws模块搭建的简单服务器</li>\n<li>三、Node中的WebSocket</li>\n<li>四、socket.io</li>\n<li>五、扩展阅读<h4 id=\"一、概述-what’s-WebSocket\"><a href=\"#一、概述-what’s-WebSocket\" class=\"headerlink\" title=\"一、概述-what’s WebSocket?\"></a>一、概述-what’s WebSocket?</h4></li>\n</ul>\n</blockquote>\n<h5 id=\"1-1-为什么我们需要WebSocket这样的实时的通信协议？\"><a href=\"#1-1-为什么我们需要WebSocket这样的实时的通信协议？\" class=\"headerlink\" title=\"1.1 为什么我们需要WebSocket这样的实时的通信协议？\"></a>1.1 为什么我们需要WebSocket这样的实时的通信协议？</h5><p>WebSocket是web通信方式的一种，像我们熟知的HTTP协议也是web通信方式的一种。但是我们知道HTTP协议是一种无状态的协议，其服务端本身不具备识别客户端的能力，必须借助外部的一些信息比如说session和cookie，才能与特定的客户端保持通信。<br><a id=\"more\"></a><br>也就是说我们所发送的每一个HTTP的请求都会带上请求头中一些相应的信息还有cookie，这明显会增加我们传输的信息的体量从而带来一定的网络延迟，对于一些对通信的实时性要求比较高的应用来说就是不可忍受的了，比如说聊天程序或者是运行在浏览器中的实时小游戏。最郁闷的却还是这些头信息和cookie往往对于服务器响应客户端的请求来说是多余的，也就是说虽然我每个请求都带了这些信息，但是服务器与客户端的交互过程中可能根本用不上这些信息。</p>\n<p>为了改善HTTP请求的这种网络延迟的情况，也出现了一些适应不同需求的其他的[web通信]方式，比如说：轮询，长轮询( long-polling )，数据流，EventSouce等等，WebSocket便是其中一种。</p>\n<p>实际上大多数基于因特网（或者局域网）的网络链接通常都包含长连接和基于TCP套接字的双向消息交换。但是TCP协议是属于最底层的网络通信协议了，让一些不能信任的客户端脚本去访问底层的TCP套接字显然是不太安全的，因此WebSocket实现了一种较为安全的方案，它允许客户端脚本在客户端和支持WebSocket协议的服务器之间创建双向的套接字连接。从而使实时通信的某些网络操作变得简单。</p>\n<h5 id=\"1-2-WebSocket是如何工作的？\"><a href=\"#1-2-WebSocket是如何工作的？\" class=\"headerlink\" title=\"1.2 WebSocket是如何工作的？\"></a>1.2 WebSocket是如何工作的？</h5><p>我们知道了WebSocket的主要作用是，允许服务器端与客户端进行全双工（full-duplex）的实时通信。这里有个例子特别好：HTTP协议像发电子邮件，发出后必须等待对方回信；WebSocket则是像打电话，服务器端和客户端可以同时向对方发送数据，它们之间存着一条持续打开的数据通道。</p>\n<p>我们先看一下一个基于WebSocket协议通信的请求头和响应头(下面简单实例中的一个消息头)：</p>\n<p>其中与WebSocket协议相关的信息：</p>\n<blockquote>\n<ul>\n<li>1 Upgrade:websocket——-HTTP1.1协议规定，Upgrade头信息表示将通信协议从HTTP/1.1转向该项所指定的协议；</li>\n<li>2 Connection:Upgrade——表示浏览器通知服务器，如果允许，就将通信协议升级到websocket协议；</li>\n<li>3 Origin——————用于验证浏览器域名是否在服务器许可的范围内;</li>\n<li>4 Sec-WebSocket-Key——-则是用于握手协议的密钥，是base64编码的16字节随机字符串;</li>\n<li>5 Sec-WebSocket-Accept—-是服务器在浏览器提供的Sec-WebSocket-Key字符串后面，添加“258EAFA5-E914-47DA-95CA-C5AB0DC85B11” 字符串，然后再取sha-1的hash值。浏览器将对这个值进行验证，以证明确实是目标服务器回应了webSocket请求；</li>\n<li>6.Sec-WebSocket-Location–一般情况下还有这个响应消息头用来表示进行通信的WebSocket网址，这里面可能是因为我例子中设置了127.0.0.1，所以这个信息省略掉了。<br>客户端通过一个WebSocket握手的过程建立一个WebSocket连接。整个过程看起来是这个样子的：</li>\n</ul>\n</blockquote>\n<p>完成握手以后，WebSocket协议就在TCP协议之上，客户端和服务器端就可以开始传送数据了。</p>\n<p>websocket协议用ws表示，加密的websocket协议用wss协议，就像普通的HTTP协议用http表示，加密的HTTP协议用https表示一样。</p>\n<p>下面我们就通过一些实例看一下websocket的不同实现是如何应用的。</p>\n<h4 id=\"二、-运行在浏览器中的WebSocket客户端-使用ws模块搭建的简单服务器\"><a href=\"#二、-运行在浏览器中的WebSocket客户端-使用ws模块搭建的简单服务器\" class=\"headerlink\" title=\"二、 运行在浏览器中的WebSocket客户端+使用ws模块搭建的简单服务器\"></a>二、 运行在浏览器中的WebSocket客户端+使用ws模块搭建的简单服务器</h4><p>我们可以通过跑起来这个简单的实例看一下如何编写运行在浏览器中的WebSocket客户端，并且看它是怎样与服务器端交互的。</p>\n<h5 id=\"2-1-运行实例\"><a href=\"#2-1-运行实例\" class=\"headerlink\" title=\"2.1 运行实例\"></a>2.1 运行实例</h5><p>我们把客户端代码和服务端代码准备好，然后启动服务器监听端口，比如说8080，再然后运行我们的客户端代码即可看到效果。</p>\n<p>我们的客户端代码写在html文件中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">1 var onOpen = function() &#123;</div><div class=\"line\">2            console.log(&quot;Socket opened.&quot;);</div><div class=\"line\">3                 socket.send(&quot;Hi, Server!&quot;);</div><div class=\"line\">4             &#125;,</div><div class=\"line\">5             onClose = function() &#123;</div><div class=\"line\">6                 console.log(&quot;Socket closed.&quot;);</div><div class=\"line\">7             &#125;,</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10             onMessage = function(data) &#123;</div><div class=\"line\">11                 console.log(&quot;We get signal:&quot;);</div><div class=\"line\">12                 console.log(data);</div><div class=\"line\">13             &#125;,</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16             onError = function() &#123;</div><div class=\"line\">17                 console.log(&quot;We got an error.&quot;);</div><div class=\"line\">18             &#125;,</div><div class=\"line\">19</div><div class=\"line\">20             </div><div class=\"line\">21             socket = new WebSocket(&quot;ws://127.0.0.1:8080/&quot;);</div><div class=\"line\">22</div><div class=\"line\">23         socket.onopen = onOpen;</div><div class=\"line\">24         socket.onclose = onClose;</div><div class=\"line\">25         socket.onerror = onError;</div><div class=\"line\">26         socket.onmessage = onMessage;</div></pre></td></tr></table></figure>\n<p>我们通过它建立连接并且监听open和messege等事件，与此同时，我们想要得到服务器的响应。服务器端的js代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">1 var WebSocketServer = require(&apos;ws&apos;).Server;</div><div class=\"line\"> 2 var wss = new WebSocketServer(&#123; port: 8080 &#125;);</div><div class=\"line\"> 3</div><div class=\"line\"> 4 wss.on(&apos;connection&apos;, function connection(ws) &#123;</div><div class=\"line\"> 5   ws.on(&apos;message&apos;, function incoming(message) &#123;</div><div class=\"line\"> 6     console.log(&apos;received: %s&apos;, message);</div><div class=\"line\"> 7   &#125;);</div><div class=\"line\"> 8</div><div class=\"line\"> 9   ws.send(&apos;something&apos;);</div><div class=\"line\">10 &#125;);</div></pre></td></tr></table></figure>\n<p>这个简单的websocket服务器使用了[ ws模块 ]，如果没有安装过，要先安装一下：</p>\n<p>1 <code>sudo npm install ws</code><br>然后在我们的命令行执行：</p>\n<p>1 <code>node simpleWSserver.js</code><br>我们的服务器启动之后，我们运行客户端代码可以看到：</p>\n<p>浏览器：</p>\n<p>命令行：</p>\n<p>整个过程看起来是这个样子的：</p>\n<p><img src=\"http://img2.tuicool.com/I7nmuqr.png!web\" alt=\"\"></p>\n<p>2.2 运行在浏览器中的websocket客户端</p>\n<p>我们在浏览器中的websocket主要做的事情无非是以下几个：</p>\n<p>1 建立连接和关闭连接<br>2 发送数据和接收数据<br>3 处理错误<br>对应的会触发以下的事件：</p>\n<p>1<code>onopen</code><br>2<code>onmessage</code><br>3<code>onclose</code><br>4<code>onerror</code><br>2.2.1 建立连接和关闭连接</p>\n<p>通常我们新建了一个WebSocket的实例就可以建立一个连接：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">1 if(window.WebSocket != undefined) &#123;</div><div class=\"line\">2     var socket = new WebSocket(&quot;ws://127.0.0.1:8080/&quot;);</div><div class=\"line\">3 &#125;</div></pre></td></tr></table></figure></p>\n<p>建立连接之后的WebSocket实例有一个readyState属性，用来标识当前的状态：</p>\n<p>0-正在连接<br>1-连接成功<br>2-正在关闭<br>3-关闭成功<br>连接成功后会触发onopen事件，这时我们就可以向服务器发送数据了：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">1 var onOpen = function() &#123;</div><div class=\"line\">2       console.log(&quot;Socket opened.&quot;);</div><div class=\"line\">3       socket.send(&quot;Hi, Server!&quot;);</div><div class=\"line\">4  &#125;</div><div class=\"line\">5 socket.onopen = onOpen;</div></pre></td></tr></table></figure></p>\n<p>要是关闭连接的话就会出发onclose事件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">1 var onClose = function() &#123;</div><div class=\"line\">2         console.log(&quot;Socket closed.&quot;);</div><div class=\"line\">3   &#125;</div><div class=\"line\">4 socket.onclose = onClose;</div></pre></td></tr></table></figure></p>\n<p>2.2.2 发送数据和接收数据</p>\n<p>在连接建立成功后触发的onopen事件中我们通过send()方法发送数据给服务器：</p>\n<p><code>1 socket.send(&quot;Hi, Server!&quot;);</code><br>除了发送字符串类型的数据，也可以使用 Blob 或 ArrayBuffer 对象发送二进制数据。不仅如此，我们还可以发送JSON数据：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">1  var onOpen = function() &#123;</div><div class=\"line\"> 2       var msg = &#123;</div><div class=\"line\"> 3          type: &quot;message&quot;,</div><div class=\"line\"> 4          text: &quot;something&quot;,</div><div class=\"line\"> 5          id:   &quot;number&quot;,</div><div class=\"line\"> 6          date: Date.now()</div><div class=\"line\"> 7       &#125;;</div><div class=\"line\"> 8</div><div class=\"line\"> 9    // Send the msg object as a JSON-formatted string.</div><div class=\"line\">10    socket.send(JSON.stringify(msg));</div><div class=\"line\">11   &#125;</div><div class=\"line\">12  socket.onopen = onOpen;</div></pre></td></tr></table></figure></p>\n<p>这时会触发服务器端的message事件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">1 ws.on(&apos;message&apos;, function incoming(message) &#123;</div><div class=\"line\">2     console.log(&apos;received: %s&apos;, message);</div><div class=\"line\">3   &#125;);</div></pre></td></tr></table></figure></p>\n<p>同时，服务器端发来信息的时候：</p>\n<p><code>1 ws.send(&#39;something&#39;);</code><br>也会触发客户端的onmessage事件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">1 var onMessage = function(data) &#123;</div><div class=\"line\">2         console.log(&quot;We get signal:&quot;);</div><div class=\"line\">3         console.log(data);</div><div class=\"line\">4   &#125;</div><div class=\"line\">5 socket.onmessage = onMessage;</div></pre></td></tr></table></figure></p>\n<p>2.2.3 处理错误</p>\n<p>发生的错误会触发onerror事件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">1 var onError = function() &#123;</div><div class=\"line\">2      console.log(&quot;We got an error.&quot;);</div><div class=\"line\">3  &#125;</div><div class=\"line\">4 socket.onerror = onError;</div></pre></td></tr></table></figure></p>\n<p>三、Node中的WebSocket</p>\n<p>WebSocket在Node中的实现[ WebSocket-Node ]使我们可以在Nodejs中使用websokcet开发客户端和服务器端实时交互的应用程序。我们可以运行客户端和服务器实时交换随机数的例子看看它是怎么工作的：<br>node socketserver.js</p>\n<p>node socketclient.js</p>\n<h4 id=\"四、socket-io\"><a href=\"#四、socket-io\" class=\"headerlink\" title=\"四、socket.io\"></a>四、socket.io</h4><p>现在很流行的websocket的实现socket.io同样包括客户端和服务器端两部分。它不仅简化了接口，使得操作更容易，而且对于那些不支持WebSocket的浏览器，会自动降为Ajax连接，最大限度地保证了兼容性。它的目标是统一通信机制，使得所有浏览器和移动设备都可以进行实时通信。</p>\n<h5 id=\"4-1-socket-io与WebSocket的区别在哪里呢？\"><a href=\"#4-1-socket-io与WebSocket的区别在哪里呢？\" class=\"headerlink\" title=\"4.1 socket.io与WebSocket的区别在哪里呢？\"></a>4.1 socket.io与WebSocket的区别在哪里呢？</h5><p>websocket是浏览器对象，websocket api是浏览器提供给我们的用于浏览器和服务器实时通信的接口。</p>\n<p>websocket在node中的实现使我们可以开发服务端程序时使用websocket的特性。</p>\n<p>在我们使用websocket的时候，因为他是浏览器提供的接口，所以会涉及到一些兼容性和支持性的问题。如果我们对程序所运行的环境或局限不是那么了解的化，那么可能会出现问题：</p>\n<p>[ Differences between socket.io and websocket ] 。而socket.io则是进化了的websocket api。socket.io建立在websocket之上，它在合适的时候使用websocket。</p>\n<p>4.2 socket.io实现聊天室</p>\n<p>使用websocket或socket.io可以从一个简单的聊天室程序开始。对于socket.io来说，这非常容易。</p>\n<p>基于 node ，这里使用express和socket.io：</p>\n<p><code>1 npm install --save express@4.10.2</code><br><code>2 npm install --save socket.io</code><br>那么我们就可以开始写聊天程序了。它需要的就是一个客户端的聊天窗口和一个用来接收消息和分发消息的服务器。</p>\n<p>我们需要三个文件，分别新建：package.json,index.js,index.html.</p>\n<p>package.json:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">1 &#123;</div><div class=\"line\">2   &quot;name&quot;: &quot;chat-application&quot;,</div><div class=\"line\">3   &quot;version&quot;: &quot;0.0.1&quot;,</div><div class=\"line\">4   &quot;description&quot;: &quot;my first socket.io app&quot;,</div><div class=\"line\">5   &quot;dependencies&quot;: &#123;</div><div class=\"line\">6     &quot;socket.io&quot;: &quot;^1.3.5&quot;</div><div class=\"line\">7   &#125;</div><div class=\"line\">8 &#125;</div></pre></td></tr></table></figure>\n<p>index.js:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">1 var app = require(&apos;express&apos;)();</div><div class=\"line\"> 2 var http = require(&apos;http&apos;).Server(app);</div><div class=\"line\"> 3 var io = require(&apos;socket.io&apos;)(http);</div><div class=\"line\"> 4</div><div class=\"line\"> 5 app.get(&apos;/&apos;, function(req, res)&#123;</div><div class=\"line\"> 6   res.sendfile(&apos;index.html&apos;);</div><div class=\"line\"> 7 &#125;);</div><div class=\"line\"> 8</div><div class=\"line\"> 9 io.on(&apos;connection&apos;, function(socket)&#123;</div><div class=\"line\">10   console.log(&apos;a user connected&apos;);</div><div class=\"line\">11   //监听客户端的消息</div><div class=\"line\">12   socket.on(&apos;chat message&apos;, function(msg)&#123;</div><div class=\"line\">13       //用于将消息发送给每个人，包括发送者</div><div class=\"line\">14     io.emit(&apos;chat message&apos;, msg);</div><div class=\"line\">15   &#125;);</div><div class=\"line\">16   socket.on(&apos;disconnect&apos;, function()&#123;</div><div class=\"line\">17     console.log(&apos;user disconnected&apos;);</div><div class=\"line\">18   &#125;);</div><div class=\"line\">19 &#125;);</div><div class=\"line\">20</div><div class=\"line\">21 http.listen(3000, function()&#123;</div><div class=\"line\">22   console.log(&apos;listening on *:3000&apos;);</div><div class=\"line\">23 &#125;);</div></pre></td></tr></table></figure>\n<p>index.html:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\">1 &lt;!doctype html&gt;</div><div class=\"line\"> 2 &lt;html&gt;</div><div class=\"line\"> 3   &lt;head&gt;</div><div class=\"line\"> 4     &lt;title&gt;Socket.IO chat&lt;/title&gt;</div><div class=\"line\"> 5     &lt;style&gt;</div><div class=\"line\"> 6       * &#123; margin: 0; padding: 0; box-sizing: border-box; &#125;</div><div class=\"line\"> 7       body &#123; font: 13px Helvetica, Arial; &#125;</div><div class=\"line\"> 8       form &#123; background: #000; padding: 3px; position: fixed; bottom: 0; width: 100%; &#125;</div><div class=\"line\"> 9       form input &#123; border: 0; padding: 10px; width: 90%; margin-right: .5%; &#125;</div><div class=\"line\">10       form button &#123; width: 9%; background: rgb(130, 224, 255); border: none; padding: 10px; &#125;</div><div class=\"line\">11       #messages &#123; list-style-type: none; margin: 0; padding: 0; &#125;</div><div class=\"line\">12       #messages li &#123; padding: 5px 10px; &#125;</div><div class=\"line\">13       #messages li:nth-child(odd) &#123; background: #eee; &#125;</div><div class=\"line\">14     &lt;/style&gt;</div><div class=\"line\">15   &lt;/head&gt;</div><div class=\"line\">16   &lt;body&gt;</div><div class=\"line\">17     &lt;ul id=&quot;messages&quot;&gt;&lt;/ul&gt;</div><div class=\"line\">18     &lt;form action=&quot;&quot;&gt;</div><div class=\"line\">19       &lt;input id=&quot;m&quot; autocomplete=&quot;off&quot; /&gt;&lt;button&gt;Send&lt;/button&gt;</div><div class=\"line\">20     &lt;/form&gt;</div><div class=\"line\">21     &lt;script src=&quot;https://cdn.socket.io/socket.io-1.2.0.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">22     &lt;script src=&quot;http://code.jquery.com/jquery-1.11.1.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">23     &lt;script&gt;</div><div class=\"line\">24       var socket = io();</div><div class=\"line\">25       $(&apos;form&apos;).submit(function()&#123;</div><div class=\"line\">26         //io.emit提供给我们可以发送给所有人的事件io.emit(&apos;some event&apos;, &#123; for: &apos;everyone&apos; &#125;);</div><div class=\"line\">27         socket.emit(&apos;chat message&apos;, $(&apos;#m&apos;).val());</div><div class=\"line\">28         $(&apos;#m&apos;).val(&apos;&apos;);</div><div class=\"line\">29         return false;</div><div class=\"line\">30       &#125;);</div><div class=\"line\">31       socket.on(&apos;chat message&apos;, function(msg)&#123;</div><div class=\"line\">32         $(&apos;#messages&apos;).append($(&apos;&lt;li&gt;&apos;).text(msg));</div><div class=\"line\">33       &#125;);</div><div class=\"line\">34     &lt;/script&gt;</div><div class=\"line\">35   &lt;/body&gt;</div><div class=\"line\">36 &lt;/html&gt;</div></pre></td></tr></table></figure>\n<p>先运行：</p>\n<p>node index.js<br>在打开两个<a href=\"http://localhost:3000的窗口就可以开始聊天了：\" target=\"_blank\" rel=\"external\">http://localhost:3000的窗口就可以开始聊天了：</a></p>\n<p>socket.io官网上有很详细的使用方法和教程：[ socket.io doc ]</p>\n<p>五、扩展阅读</p>\n<p>[ 浏览器对象-WebSocket ]</p>\n<p>[web通信]</p>\n<p>[细说WebSocket]</p>\n<p>[ WebSocket MDN ]</p>\n<p>[ WebSocket-Node implementation ]</p>\n<p>[ A Guide For WebSocket ]</p>\n<p>[ socket.IO ]</p>\n<p>[ writing websocket client ]</p>\n<p>[ deferences between socket.io and websocket ]</p>\n<p>[ websocket and socketio ]</p>\n<p>[ socket.io application ]</p>\n","excerpt":"<h4 id=\"文章导读：\"><a href=\"#文章导读：\" class=\"headerlink\" title=\"文章导读：\"></a>文章导读：</h4><blockquote>\n<ul>\n<li>一、概述-what’s WebSocket?</li>\n<li>二、运行在浏览器中的WebSocket客户端+使用ws模块搭建的简单服务器</li>\n<li>三、Node中的WebSocket</li>\n<li>四、socket.io</li>\n<li>五、扩展阅读<h4 id=\"一、概述-what’s-WebSocket\"><a href=\"#一、概述-what’s-WebSocket\" class=\"headerlink\" title=\"一、概述-what’s WebSocket?\"></a>一、概述-what’s WebSocket?</h4></li>\n</ul>\n</blockquote>\n<h5 id=\"1-1-为什么我们需要WebSocket这样的实时的通信协议？\"><a href=\"#1-1-为什么我们需要WebSocket这样的实时的通信协议？\" class=\"headerlink\" title=\"1.1 为什么我们需要WebSocket这样的实时的通信协议？\"></a>1.1 为什么我们需要WebSocket这样的实时的通信协议？</h5><p>WebSocket是web通信方式的一种，像我们熟知的HTTP协议也是web通信方式的一种。但是我们知道HTTP协议是一种无状态的协议，其服务端本身不具备识别客户端的能力，必须借助外部的一些信息比如说session和cookie，才能与特定的客户端保持通信。<br>","more":"<br>也就是说我们所发送的每一个HTTP的请求都会带上请求头中一些相应的信息还有cookie，这明显会增加我们传输的信息的体量从而带来一定的网络延迟，对于一些对通信的实时性要求比较高的应用来说就是不可忍受的了，比如说聊天程序或者是运行在浏览器中的实时小游戏。最郁闷的却还是这些头信息和cookie往往对于服务器响应客户端的请求来说是多余的，也就是说虽然我每个请求都带了这些信息，但是服务器与客户端的交互过程中可能根本用不上这些信息。</p>\n<p>为了改善HTTP请求的这种网络延迟的情况，也出现了一些适应不同需求的其他的[web通信]方式，比如说：轮询，长轮询( long-polling )，数据流，EventSouce等等，WebSocket便是其中一种。</p>\n<p>实际上大多数基于因特网（或者局域网）的网络链接通常都包含长连接和基于TCP套接字的双向消息交换。但是TCP协议是属于最底层的网络通信协议了，让一些不能信任的客户端脚本去访问底层的TCP套接字显然是不太安全的，因此WebSocket实现了一种较为安全的方案，它允许客户端脚本在客户端和支持WebSocket协议的服务器之间创建双向的套接字连接。从而使实时通信的某些网络操作变得简单。</p>\n<h5 id=\"1-2-WebSocket是如何工作的？\"><a href=\"#1-2-WebSocket是如何工作的？\" class=\"headerlink\" title=\"1.2 WebSocket是如何工作的？\"></a>1.2 WebSocket是如何工作的？</h5><p>我们知道了WebSocket的主要作用是，允许服务器端与客户端进行全双工（full-duplex）的实时通信。这里有个例子特别好：HTTP协议像发电子邮件，发出后必须等待对方回信；WebSocket则是像打电话，服务器端和客户端可以同时向对方发送数据，它们之间存着一条持续打开的数据通道。</p>\n<p>我们先看一下一个基于WebSocket协议通信的请求头和响应头(下面简单实例中的一个消息头)：</p>\n<p>其中与WebSocket协议相关的信息：</p>\n<blockquote>\n<ul>\n<li>1 Upgrade:websocket——-HTTP1.1协议规定，Upgrade头信息表示将通信协议从HTTP/1.1转向该项所指定的协议；</li>\n<li>2 Connection:Upgrade——表示浏览器通知服务器，如果允许，就将通信协议升级到websocket协议；</li>\n<li>3 Origin——————用于验证浏览器域名是否在服务器许可的范围内;</li>\n<li>4 Sec-WebSocket-Key——-则是用于握手协议的密钥，是base64编码的16字节随机字符串;</li>\n<li>5 Sec-WebSocket-Accept—-是服务器在浏览器提供的Sec-WebSocket-Key字符串后面，添加“258EAFA5-E914-47DA-95CA-C5AB0DC85B11” 字符串，然后再取sha-1的hash值。浏览器将对这个值进行验证，以证明确实是目标服务器回应了webSocket请求；</li>\n<li>6.Sec-WebSocket-Location–一般情况下还有这个响应消息头用来表示进行通信的WebSocket网址，这里面可能是因为我例子中设置了127.0.0.1，所以这个信息省略掉了。<br>客户端通过一个WebSocket握手的过程建立一个WebSocket连接。整个过程看起来是这个样子的：</li>\n</ul>\n</blockquote>\n<p>完成握手以后，WebSocket协议就在TCP协议之上，客户端和服务器端就可以开始传送数据了。</p>\n<p>websocket协议用ws表示，加密的websocket协议用wss协议，就像普通的HTTP协议用http表示，加密的HTTP协议用https表示一样。</p>\n<p>下面我们就通过一些实例看一下websocket的不同实现是如何应用的。</p>\n<h4 id=\"二、-运行在浏览器中的WebSocket客户端-使用ws模块搭建的简单服务器\"><a href=\"#二、-运行在浏览器中的WebSocket客户端-使用ws模块搭建的简单服务器\" class=\"headerlink\" title=\"二、 运行在浏览器中的WebSocket客户端+使用ws模块搭建的简单服务器\"></a>二、 运行在浏览器中的WebSocket客户端+使用ws模块搭建的简单服务器</h4><p>我们可以通过跑起来这个简单的实例看一下如何编写运行在浏览器中的WebSocket客户端，并且看它是怎样与服务器端交互的。</p>\n<h5 id=\"2-1-运行实例\"><a href=\"#2-1-运行实例\" class=\"headerlink\" title=\"2.1 运行实例\"></a>2.1 运行实例</h5><p>我们把客户端代码和服务端代码准备好，然后启动服务器监听端口，比如说8080，再然后运行我们的客户端代码即可看到效果。</p>\n<p>我们的客户端代码写在html文件中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">1 var onOpen = function() &#123;</div><div class=\"line\">2            console.log(&quot;Socket opened.&quot;);</div><div class=\"line\">3                 socket.send(&quot;Hi, Server!&quot;);</div><div class=\"line\">4             &#125;,</div><div class=\"line\">5             onClose = function() &#123;</div><div class=\"line\">6                 console.log(&quot;Socket closed.&quot;);</div><div class=\"line\">7             &#125;,</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10             onMessage = function(data) &#123;</div><div class=\"line\">11                 console.log(&quot;We get signal:&quot;);</div><div class=\"line\">12                 console.log(data);</div><div class=\"line\">13             &#125;,</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16             onError = function() &#123;</div><div class=\"line\">17                 console.log(&quot;We got an error.&quot;);</div><div class=\"line\">18             &#125;,</div><div class=\"line\">19</div><div class=\"line\">20             </div><div class=\"line\">21             socket = new WebSocket(&quot;ws://127.0.0.1:8080/&quot;);</div><div class=\"line\">22</div><div class=\"line\">23         socket.onopen = onOpen;</div><div class=\"line\">24         socket.onclose = onClose;</div><div class=\"line\">25         socket.onerror = onError;</div><div class=\"line\">26         socket.onmessage = onMessage;</div></pre></td></tr></table></figure>\n<p>我们通过它建立连接并且监听open和messege等事件，与此同时，我们想要得到服务器的响应。服务器端的js代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">1 var WebSocketServer = require(&apos;ws&apos;).Server;</div><div class=\"line\"> 2 var wss = new WebSocketServer(&#123; port: 8080 &#125;);</div><div class=\"line\"> 3</div><div class=\"line\"> 4 wss.on(&apos;connection&apos;, function connection(ws) &#123;</div><div class=\"line\"> 5   ws.on(&apos;message&apos;, function incoming(message) &#123;</div><div class=\"line\"> 6     console.log(&apos;received: %s&apos;, message);</div><div class=\"line\"> 7   &#125;);</div><div class=\"line\"> 8</div><div class=\"line\"> 9   ws.send(&apos;something&apos;);</div><div class=\"line\">10 &#125;);</div></pre></td></tr></table></figure>\n<p>这个简单的websocket服务器使用了[ ws模块 ]，如果没有安装过，要先安装一下：</p>\n<p>1 <code>sudo npm install ws</code><br>然后在我们的命令行执行：</p>\n<p>1 <code>node simpleWSserver.js</code><br>我们的服务器启动之后，我们运行客户端代码可以看到：</p>\n<p>浏览器：</p>\n<p>命令行：</p>\n<p>整个过程看起来是这个样子的：</p>\n<p><img src=\"http://img2.tuicool.com/I7nmuqr.png!web\" alt=\"\"></p>\n<p>2.2 运行在浏览器中的websocket客户端</p>\n<p>我们在浏览器中的websocket主要做的事情无非是以下几个：</p>\n<p>1 建立连接和关闭连接<br>2 发送数据和接收数据<br>3 处理错误<br>对应的会触发以下的事件：</p>\n<p>1<code>onopen</code><br>2<code>onmessage</code><br>3<code>onclose</code><br>4<code>onerror</code><br>2.2.1 建立连接和关闭连接</p>\n<p>通常我们新建了一个WebSocket的实例就可以建立一个连接：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">1 if(window.WebSocket != undefined) &#123;</div><div class=\"line\">2     var socket = new WebSocket(&quot;ws://127.0.0.1:8080/&quot;);</div><div class=\"line\">3 &#125;</div></pre></td></tr></table></figure></p>\n<p>建立连接之后的WebSocket实例有一个readyState属性，用来标识当前的状态：</p>\n<p>0-正在连接<br>1-连接成功<br>2-正在关闭<br>3-关闭成功<br>连接成功后会触发onopen事件，这时我们就可以向服务器发送数据了：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">1 var onOpen = function() &#123;</div><div class=\"line\">2       console.log(&quot;Socket opened.&quot;);</div><div class=\"line\">3       socket.send(&quot;Hi, Server!&quot;);</div><div class=\"line\">4  &#125;</div><div class=\"line\">5 socket.onopen = onOpen;</div></pre></td></tr></table></figure></p>\n<p>要是关闭连接的话就会出发onclose事件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">1 var onClose = function() &#123;</div><div class=\"line\">2         console.log(&quot;Socket closed.&quot;);</div><div class=\"line\">3   &#125;</div><div class=\"line\">4 socket.onclose = onClose;</div></pre></td></tr></table></figure></p>\n<p>2.2.2 发送数据和接收数据</p>\n<p>在连接建立成功后触发的onopen事件中我们通过send()方法发送数据给服务器：</p>\n<p><code>1 socket.send(&quot;Hi, Server!&quot;);</code><br>除了发送字符串类型的数据，也可以使用 Blob 或 ArrayBuffer 对象发送二进制数据。不仅如此，我们还可以发送JSON数据：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">1  var onOpen = function() &#123;</div><div class=\"line\"> 2       var msg = &#123;</div><div class=\"line\"> 3          type: &quot;message&quot;,</div><div class=\"line\"> 4          text: &quot;something&quot;,</div><div class=\"line\"> 5          id:   &quot;number&quot;,</div><div class=\"line\"> 6          date: Date.now()</div><div class=\"line\"> 7       &#125;;</div><div class=\"line\"> 8</div><div class=\"line\"> 9    // Send the msg object as a JSON-formatted string.</div><div class=\"line\">10    socket.send(JSON.stringify(msg));</div><div class=\"line\">11   &#125;</div><div class=\"line\">12  socket.onopen = onOpen;</div></pre></td></tr></table></figure></p>\n<p>这时会触发服务器端的message事件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">1 ws.on(&apos;message&apos;, function incoming(message) &#123;</div><div class=\"line\">2     console.log(&apos;received: %s&apos;, message);</div><div class=\"line\">3   &#125;);</div></pre></td></tr></table></figure></p>\n<p>同时，服务器端发来信息的时候：</p>\n<p><code>1 ws.send(&#39;something&#39;);</code><br>也会触发客户端的onmessage事件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">1 var onMessage = function(data) &#123;</div><div class=\"line\">2         console.log(&quot;We get signal:&quot;);</div><div class=\"line\">3         console.log(data);</div><div class=\"line\">4   &#125;</div><div class=\"line\">5 socket.onmessage = onMessage;</div></pre></td></tr></table></figure></p>\n<p>2.2.3 处理错误</p>\n<p>发生的错误会触发onerror事件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">1 var onError = function() &#123;</div><div class=\"line\">2      console.log(&quot;We got an error.&quot;);</div><div class=\"line\">3  &#125;</div><div class=\"line\">4 socket.onerror = onError;</div></pre></td></tr></table></figure></p>\n<p>三、Node中的WebSocket</p>\n<p>WebSocket在Node中的实现[ WebSocket-Node ]使我们可以在Nodejs中使用websokcet开发客户端和服务器端实时交互的应用程序。我们可以运行客户端和服务器实时交换随机数的例子看看它是怎么工作的：<br>node socketserver.js</p>\n<p>node socketclient.js</p>\n<h4 id=\"四、socket-io\"><a href=\"#四、socket-io\" class=\"headerlink\" title=\"四、socket.io\"></a>四、socket.io</h4><p>现在很流行的websocket的实现socket.io同样包括客户端和服务器端两部分。它不仅简化了接口，使得操作更容易，而且对于那些不支持WebSocket的浏览器，会自动降为Ajax连接，最大限度地保证了兼容性。它的目标是统一通信机制，使得所有浏览器和移动设备都可以进行实时通信。</p>\n<h5 id=\"4-1-socket-io与WebSocket的区别在哪里呢？\"><a href=\"#4-1-socket-io与WebSocket的区别在哪里呢？\" class=\"headerlink\" title=\"4.1 socket.io与WebSocket的区别在哪里呢？\"></a>4.1 socket.io与WebSocket的区别在哪里呢？</h5><p>websocket是浏览器对象，websocket api是浏览器提供给我们的用于浏览器和服务器实时通信的接口。</p>\n<p>websocket在node中的实现使我们可以开发服务端程序时使用websocket的特性。</p>\n<p>在我们使用websocket的时候，因为他是浏览器提供的接口，所以会涉及到一些兼容性和支持性的问题。如果我们对程序所运行的环境或局限不是那么了解的化，那么可能会出现问题：</p>\n<p>[ Differences between socket.io and websocket ] 。而socket.io则是进化了的websocket api。socket.io建立在websocket之上，它在合适的时候使用websocket。</p>\n<p>4.2 socket.io实现聊天室</p>\n<p>使用websocket或socket.io可以从一个简单的聊天室程序开始。对于socket.io来说，这非常容易。</p>\n<p>基于 node ，这里使用express和socket.io：</p>\n<p><code>1 npm install --save express@4.10.2</code><br><code>2 npm install --save socket.io</code><br>那么我们就可以开始写聊天程序了。它需要的就是一个客户端的聊天窗口和一个用来接收消息和分发消息的服务器。</p>\n<p>我们需要三个文件，分别新建：package.json,index.js,index.html.</p>\n<p>package.json:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">1 &#123;</div><div class=\"line\">2   &quot;name&quot;: &quot;chat-application&quot;,</div><div class=\"line\">3   &quot;version&quot;: &quot;0.0.1&quot;,</div><div class=\"line\">4   &quot;description&quot;: &quot;my first socket.io app&quot;,</div><div class=\"line\">5   &quot;dependencies&quot;: &#123;</div><div class=\"line\">6     &quot;socket.io&quot;: &quot;^1.3.5&quot;</div><div class=\"line\">7   &#125;</div><div class=\"line\">8 &#125;</div></pre></td></tr></table></figure>\n<p>index.js:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">1 var app = require(&apos;express&apos;)();</div><div class=\"line\"> 2 var http = require(&apos;http&apos;).Server(app);</div><div class=\"line\"> 3 var io = require(&apos;socket.io&apos;)(http);</div><div class=\"line\"> 4</div><div class=\"line\"> 5 app.get(&apos;/&apos;, function(req, res)&#123;</div><div class=\"line\"> 6   res.sendfile(&apos;index.html&apos;);</div><div class=\"line\"> 7 &#125;);</div><div class=\"line\"> 8</div><div class=\"line\"> 9 io.on(&apos;connection&apos;, function(socket)&#123;</div><div class=\"line\">10   console.log(&apos;a user connected&apos;);</div><div class=\"line\">11   //监听客户端的消息</div><div class=\"line\">12   socket.on(&apos;chat message&apos;, function(msg)&#123;</div><div class=\"line\">13       //用于将消息发送给每个人，包括发送者</div><div class=\"line\">14     io.emit(&apos;chat message&apos;, msg);</div><div class=\"line\">15   &#125;);</div><div class=\"line\">16   socket.on(&apos;disconnect&apos;, function()&#123;</div><div class=\"line\">17     console.log(&apos;user disconnected&apos;);</div><div class=\"line\">18   &#125;);</div><div class=\"line\">19 &#125;);</div><div class=\"line\">20</div><div class=\"line\">21 http.listen(3000, function()&#123;</div><div class=\"line\">22   console.log(&apos;listening on *:3000&apos;);</div><div class=\"line\">23 &#125;);</div></pre></td></tr></table></figure>\n<p>index.html:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\">1 &lt;!doctype html&gt;</div><div class=\"line\"> 2 &lt;html&gt;</div><div class=\"line\"> 3   &lt;head&gt;</div><div class=\"line\"> 4     &lt;title&gt;Socket.IO chat&lt;/title&gt;</div><div class=\"line\"> 5     &lt;style&gt;</div><div class=\"line\"> 6       * &#123; margin: 0; padding: 0; box-sizing: border-box; &#125;</div><div class=\"line\"> 7       body &#123; font: 13px Helvetica, Arial; &#125;</div><div class=\"line\"> 8       form &#123; background: #000; padding: 3px; position: fixed; bottom: 0; width: 100%; &#125;</div><div class=\"line\"> 9       form input &#123; border: 0; padding: 10px; width: 90%; margin-right: .5%; &#125;</div><div class=\"line\">10       form button &#123; width: 9%; background: rgb(130, 224, 255); border: none; padding: 10px; &#125;</div><div class=\"line\">11       #messages &#123; list-style-type: none; margin: 0; padding: 0; &#125;</div><div class=\"line\">12       #messages li &#123; padding: 5px 10px; &#125;</div><div class=\"line\">13       #messages li:nth-child(odd) &#123; background: #eee; &#125;</div><div class=\"line\">14     &lt;/style&gt;</div><div class=\"line\">15   &lt;/head&gt;</div><div class=\"line\">16   &lt;body&gt;</div><div class=\"line\">17     &lt;ul id=&quot;messages&quot;&gt;&lt;/ul&gt;</div><div class=\"line\">18     &lt;form action=&quot;&quot;&gt;</div><div class=\"line\">19       &lt;input id=&quot;m&quot; autocomplete=&quot;off&quot; /&gt;&lt;button&gt;Send&lt;/button&gt;</div><div class=\"line\">20     &lt;/form&gt;</div><div class=\"line\">21     &lt;script src=&quot;https://cdn.socket.io/socket.io-1.2.0.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">22     &lt;script src=&quot;http://code.jquery.com/jquery-1.11.1.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">23     &lt;script&gt;</div><div class=\"line\">24       var socket = io();</div><div class=\"line\">25       $(&apos;form&apos;).submit(function()&#123;</div><div class=\"line\">26         //io.emit提供给我们可以发送给所有人的事件io.emit(&apos;some event&apos;, &#123; for: &apos;everyone&apos; &#125;);</div><div class=\"line\">27         socket.emit(&apos;chat message&apos;, $(&apos;#m&apos;).val());</div><div class=\"line\">28         $(&apos;#m&apos;).val(&apos;&apos;);</div><div class=\"line\">29         return false;</div><div class=\"line\">30       &#125;);</div><div class=\"line\">31       socket.on(&apos;chat message&apos;, function(msg)&#123;</div><div class=\"line\">32         $(&apos;#messages&apos;).append($(&apos;&lt;li&gt;&apos;).text(msg));</div><div class=\"line\">33       &#125;);</div><div class=\"line\">34     &lt;/script&gt;</div><div class=\"line\">35   &lt;/body&gt;</div><div class=\"line\">36 &lt;/html&gt;</div></pre></td></tr></table></figure>\n<p>先运行：</p>\n<p>node index.js<br>在打开两个<a href=\"http://localhost:3000的窗口就可以开始聊天了：\">http://localhost:3000的窗口就可以开始聊天了：</a></p>\n<p>socket.io官网上有很详细的使用方法和教程：[ socket.io doc ]</p>\n<p>五、扩展阅读</p>\n<p>[ 浏览器对象-WebSocket ]</p>\n<p>[web通信]</p>\n<p>[细说WebSocket]</p>\n<p>[ WebSocket MDN ]</p>\n<p>[ WebSocket-Node implementation ]</p>\n<p>[ A Guide For WebSocket ]</p>\n<p>[ socket.IO ]</p>\n<p>[ writing websocket client ]</p>\n<p>[ deferences between socket.io and websocket ]</p>\n<p>[ websocket and socketio ]</p>\n<p>[ socket.io application ]</p>"},{"title":"前端文件断点续传","date":"2017-04-11T01:29:07.000Z","_content":"\n本文通过断点续传的简单例子（前端文件提交+后端PHP文件接收），理解其大致的实现过程\n\n\n\n还是先以图片为例，看看最后的样子\n\n![](http://gitpage.oss-cn-hangzhou.aliyuncs.com/frontEndUpload/0.gif)\n\n\n<!--more-->\n\n\n### 一、一些知识准备\n\n\n\n断点续传，既然有断，那就应该有文件分割的过程，一段一段的传。\n\n\n\n以前文件无法分割，但随着HTML5新特性的引入，类似普通字符串、数组的分割，我们可以可以使用slice方法来分割文件。\n\n\n\n所以断点续传的最基本实现也就是：前端通过FileList对象获取到相应的文件，按照指定的分割方式将大文件分段，然后一段一段地传给后端，后端再按顺序一段段将文件进行拼接。\n\n\n\n而我们需要对FileList对象进行修改再提交，在之前的文章中知晓了这种提交的一些注意点，因为FileList对象不能直接更改，所以不能直接通过表单的.submit()方法上传提交，需要结合FormData对象生成一个新的数据，通过Ajax进行上传操作。\n\n\n\n二、实现过程\n\n\n\n这个例子实现了文件断点续传的基本功能，不过手动的“暂停上传”操作还未实现成功，可以在上传过程中刷新页面来模拟上传的中断，体验“断点续传”、\n\n\n\n有可能还有其他一些小bug，但基本逻辑大致如此。\n\n\n\n1. 前端实现\n\n\n\n首先选择文件，列出选中的文件列表信息，然后可以自定义的做上传操作\n\n\n\n（1）所以先设置好页面DOM结构\n\n\n\n\n\n\n\n这里一并将CSS样式扔出来\n\n\n```\nbody {\n\n    font-family: Arial;\n\n}\n\nform {\n\n    margin: 50px auto;\n\n    width: 600px;\n\n}\n\ninput[type=\"button\"] {\n\n    cursor: pointer;\n\n}\n\ntable {\n\n    display: none;\n\n    margin-top: 15px;\n\n    border: 1px solid #ddd;\n\n    border-collapse: collapse;\n\n}\n\ntable th {\n\n    color: #666;\n\n}\n\ntable td, table th {\n\n    padding: 5px;\n\n    border: 1px solid #ddd;\n\n    text-align: center;\n\n    font-size: 14px;\n\n}\n```\n\n\n（2）接下来是JS的实现解析\n\n\n\n通过FileList对象我们能获取到文件的一些信息\n\n\n\n\n\n\n\n其中的size就是文件的大小，文件的分分割分片需要依赖这个\n\n\n\n这里的size是字节数，所以在界面显示文件大小时，可以这样转化\n\n```\n\n// 计算文件大小\n\nsize = file.size > 1024\n\n    ? file.size / 1024  > 1024\n\n    ? file.size / (1024 * 1024) > 1024\n\n    ? (file.size / (1024 * 1024 * 1024)).toFixed(2) + 'GB'\n\n    : (file.size / (1024 * 1024)).toFixed(2) + 'MB'\n\n    : (file.size / 1024).toFixed(2) + 'KB'\n\n    : (file.size).toFixed(2) + 'B';\n\n```\n\n选择文件后显示文件的信息，在模版中替换一下数据\n\n\n\n// 更新文件信息列表\n```\nuploadItem.push(uploadItemTpl\n\n    .replace(/{{fileName}}/g, file.name)\n\n    .replace('{{fileType}}', file.type || file.name.match(/\\.\\w+$/) + '文件')\n\n    .replace('{{fileSize}}', size)\n\n    .replace('{{progress}}', progress)\n\n    .replace('{{totalSize}}', file.size)\n\n    .replace('{{uploadVal}}', uploadVal)\n\n);\n\n```\n\n不过，在显示文件信息的时候，可能这个文件之前之前已经上传过了，为了断点续传，需要判断并在界面上做出提示\n\n\n\n通过查询本地看是否有相应的数据（这里的做法是当本地记录的是已经上传100%时，就直接是重新上传而不是继续上传了）\n\n\n\n// 初始通过本地记录，判断该文件是否曾经上传过\n```\npercent = window.localStorage.getItem(file.name + '_p');\n\n\n\nif (percent && percent !== '100.0') {\n\n    progress = '已上传 ' + percent + '%';\n\n    uploadVal = '继续上传';\n\n}\n```\n\n\n显示了文件信息列表\n\n\n![](http://gitpage.oss-cn-hangzhou.aliyuncs.com/frontEndUpload/1.jpg)\n\n\n\n\n点击开始上传，可以上传相应的文件\n\n\n![](http://gitpage.oss-cn-hangzhou.aliyuncs.com/frontEndUpload/2.jpg)\n\n\n\n\n上传文件的时候需要就将文件进行分片分段\n\n\n\n比如这里配置的每段1024B，总共chunks段（用来判断是否为末段），第chunk段，当前已上传的百分比percent等\n\n\n\n需要提一下的是这个暂停上传的操作，其实我还没实现出来，暂停不了无奈ing…\n\n![](http://gitpage.oss-cn-hangzhou.aliyuncs.com/frontEndUpload/3.jpg)\n\n![](http://gitpage.oss-cn-hangzhou.aliyuncs.com/frontEndUpload/4.jpg)\n\n\n\n\n\n接下来是分段过程\n\n![](http://gitpage.oss-cn-hangzhou.aliyuncs.com/frontEndUpload/5.jpg)\n\n\n\n\n\n// 上传之前查询是否以及上传过分片\n```\nchunk = window.localStorage.getItem(fileName + '_chunk') || 0;\n\nchunk = parseInt(chunk, 10);\n\n```\n\n文件应该支持覆盖上传，所以如果文件以及上传完了，现在再上传，应该重置数据以支持覆盖（不然后端就直接追加blob数据了）\n\n\n```\n// 如果第一次上传就为末分片，即文件已经上传完成，则重新覆盖上传\n\nif (times === 'first' && isLastChunk === 1) {\n\n    window.localStorage.setItem(fileName + '_chunk', 0);\n\n    chunk = 0;\n\n    isLastChunk = 0;\n\n}\n```\n\n\n这个times其实就是个参数，因为要在上一分段传完之后再传下一分段，所以这里的做法是在回调中继续调用这个上传操作\n\n![](http://gitpage.oss-cn-hangzhou.aliyuncs.com/frontEndUpload/6.jpg)\n\n\n\n\n\n接下来就是真正的文件上传操作了，用Ajax上传，因为用到了FormData对象，所以不要忘了在$.ajax({}加上这个配置processData: false\n\n\n\n上传了一个分段，通过返回的结果判断是否上传完毕，是否继续上传\n\n![](http://gitpage.oss-cn-hangzhou.aliyuncs.com/frontEndUpload/7.jpg)\n\n\n\n\n\n继续下一分段的上传时，就进行了递归操作，按顺序地上传下一分段\n\n\n\n截个图..\n\n\n![](http://gitpage.oss-cn-hangzhou.aliyuncs.com/frontEndUpload/8.jpg)\n\n\n\n\n这是完整的JS逻辑，代码有点儿注释了应该不难看懂吧哈哈\n\n\n```\n// 全部上传操作\n\n$(document).on('click', '#upload-all-btn', function () {\n\n    // 未选择文件\n\n    if (!$('#myFile').val()) {\n\n        $('#myFile').focus();\n\n    }\n\n    // 模拟点击其他可上传的文件\n\n    else {\n\n        $('#upload-list .upload-item-btn').each(function () {\n\n            $(this).click();\n\n        });\n\n    }\n\n});\n\n\n\n// 选择文件-显示文件信息\n\n$('#myFile').change(function (e) {\n\n    var file,\n\n        uploadItem = [],\n\n        uploadItemTpl = $('#file-upload-tpl').html(),\n\n        size,\n\n        percent,\n\n        progress = '未上传',\n\n        uploadVal = '开始上传';\n\n\n\n    for (var i = 0, j = this.files.length; i < j; ++i) {\n\n        file = this.files[i];\n\n\n\n        percent = undefined;\n\n        progress = '未上传';\n\n        uploadVal = '开始上传';\n\n\n\n        // 计算文件大小\n\n        size = file.size > 1024 ? file.size / 1024 > 1024 ? file.size / (1024 * 1024) > 1024 ? (file.size /\n\n            (1024 * 1024 * 1024)).toFixed(2) + 'GB' : (file.size / (1024 * 1024)).toFixed(2) + 'MB' : (file\n\n            .size / 1024).toFixed(2) + 'KB' : (file.size).toFixed(2) + 'B';\n\n\n\n        // 初始通过本地记录，判断该文件是否曾经上传过\n\n        percent = window.localStorage.getItem(file.name + '_p');\n\n\n\n        if (percent && percent !== '100.0') {\n\n            progress = '已上传 ' + percent + '%';\n\n            uploadVal = '继续上传';\n\n        }\n\n\n\n        // 更新文件信息列表\n\n        uploadItem.push(uploadItemTpl\n\n            .replace(/{{fileName}}/g, file.name)\n\n            .replace('{{fileType}}', file.type || file.name.match(/\\.\\w+$/) + '文件')\n\n            .replace('{{fileSize}}', size)\n\n            .replace('{{progress}}', progress)\n\n            .replace('{{totalSize}}', file.size)\n\n            .replace('{{uploadVal}}', uploadVal));\n\n    }\n\n\n\n    $('#upload-list').children('tbody').html(uploadItem.join(''))\n\n        .end().show();\n\n});\n\n\n\n/**\n\n* 上传文件时，提取相应匹配的文件项\n\n* @param  {String} fileName   需要匹配的文件名\n\n* @return {FileList}          匹配的文件项目\n\n*/\n\nfunction findTheFile(fileName) {\n\n    var files = $('#myFile')[0].files,\n\n        theFile;\n\n\n\n    for (var i = 0, j = files.length; i < j; ++i) {\n\n        if (files[i].name === fileName) {\n\n            theFile = files[i];\n\n            break;\n\n        }\n\n    }\n\n\n\n    return theFile ? theFile : [];\n\n}\n\n\n\n// 上传文件\n\n$(document).on('click', '.upload-item-btn', function () {\n\n    var $this = $(this),\n\n        state = $this.attr('data-state'),\n\n        msg = {\n\n            done: '上传成功',\n\n            failed: '上传失败',\n\n            in : '上传中...',\n\n            paused: '暂停中...'\n\n        },\n\n        fileName = $this.attr('data-name'),\n\n        $progress = $this.closest('tr').find('.upload-progress'),\n\n        eachSize = 1024,\n\n        totalSize = $this.attr('data-size'),\n\n        chunks = Math.ceil(totalSize / eachSize),\n\n        percent,\n\n        chunk,\n\n        // 暂停上传操作\n\n        isPaused = 0;\n\n\n\n    // 进行暂停上传操作\n\n    // 未实现，这里通过动态的设置isPaused值并不能阻止下方ajax请求的调用\n\n    if (state === 'uploading') {\n\n        $this.val('继续上传').attr('data-state', 'paused');\n\n        $progress.text(msg['paused'] + percent + '%');\n\n        isPaused = 1;\n\n        console.log('暂停：', isPaused);\n\n    }\n\n    // 进行开始/继续上传操作\n\n    else if (state === 'paused' || state === 'default') {\n\n        $this.val('暂停上传').attr('data-state', 'uploading');\n\n        isPaused = 0;\n\n    }\n\n\n\n    // 第一次点击上传\n\n    startUpload('first');\n\n\n\n    // 上传操作 times: 第几次\n\n\n\n    function startUpload(times) {\n\n        // 上传之前查询是否以及上传过分片\n\n        chunk = window.localStorage.getItem(fileName + '_chunk') || 0;\n\n        chunk = parseInt(chunk, 10);\n\n        // 判断是否为末分片\n\n        var isLastChunk = (chunk == (chunks - 1) ? 1 : 0);\n\n\n\n        // 如果第一次上传就为末分片，即文件已经上传完成，则重新覆盖上传\n\n        if (times === 'first' && isLastChunk === 1) {\n\n            window.localStorage.setItem(fileName + '_chunk', 0);\n\n            chunk = 0;\n\n            isLastChunk = 0;\n\n        }\n\n\n\n        // 设置分片的开始结尾\n\n        var blobFrom = chunk * eachSize, // 分段开始\n\n            blobTo = (chunk + 1) * eachSize > totalSize ? totalSize : (chunk + 1) * eachSize, // 分段结尾\n\n            percent = (100 * blobTo / totalSize).toFixed(1), // 已上传的百分比\n\n            timeout = 5000, // 超时时间\n\n            fd = new FormData($('#myForm')[0]);\n\n\n\n        fd.append('theFile', findTheFile(fileName).slice(blobFrom, blobTo)); // 分好段的文件\n\n        fd.append('fileName', fileName); // 文件名\n\n        fd.append('totalSize', totalSize); // 文件总大小\n\n        fd.append('isLastChunk', isLastChunk); // 是否为末段\n\n        fd.append('isFirstUpload', times === 'first' ? 1 : 0); // 是否是第一段（第一次上传）\n\n\n\n        // 上传\n\n        $.ajax({\n\n            type: 'post',\n\n            url: '/fileTest.php',\n\n            data: fd,\n\n            processData: false,\n\n            contentType: false,\n\n            timeout: timeout,\n\n            success: function (rs) {\n\n                rs = JSON.parse(rs);\n\n\n\n                // 上传成功\n\n                if (rs.status === 200) {\n\n                    // 记录已经上传的百分比\n\n                    window.localStorage.setItem(fileName + '_p', percent);\n\n\n\n                    // 已经上传完毕\n\n                    if (chunk === (chunks - 1)) {\n\n                        $progress.text(msg['done']);\n\n                        $this.val('已经上传').prop('disabled', true).css('cursor', 'not-allowed');\n\n                        if (!$('#upload-list').find('.upload-item-btn:not(:disabled)').length) {\n\n                            $('#upload-all-btn').val('已经上传').prop('disabled', true).css('cursor',\n\n                                'not-allowed');\n\n                        }\n\n                    } else {\n\n                        // 记录已经上传的分片\n\n                        window.localStorage.setItem(fileName + '_chunk', ++chunk);\n\n\n\n                        $progress.text(msg['in'] + percent + '%');\n\n                        // 这样设置可以暂停，但点击后动态的设置就暂停不了..\n\n                        // if (chunk == 10) {\n\n                        //     isPaused = 1;\n\n                        // }\n\n                        console.log(isPaused);\n\n                        if (!isPaused) {\n\n                            startUpload();\n\n                        }\n\n\n\n                    }\n\n                }\n\n                // 上传失败，上传失败分很多种情况，具体按实际来设置\n\n                else if (rs.status === 500) {\n\n                    $progress.text(msg['failed']);\n\n                }\n\n            },\n\n            error: function () {\n\n                $progress.text(msg['failed']);\n\n            }\n\n        });\n\n    }\n\n});\n\n```\n\n2. 后端实现\n\n\n\n这里的后端实现还是比较简单的，主要用依赖了 file_put_contents、file_get_contents 这两个方法\n\n\n![](http://gitpage.oss-cn-hangzhou.aliyuncs.com/frontEndUpload/9.jpg)\n\n\n\n\n要注意一下，通过FormData对象上传的文件对象，在PHP中也是通过$_FILES全局对象获取的，还有为了避免上传后文件中文的乱码，用一下iconv\n\n\n\n断点续传支持文件的覆盖，所以如果已经存在完整的文件，就将其删除\n\n\n```\n// 如果第一次上传的时候，该文件已经存在，则删除文件重新上传\n\nif ($isFirstUpload == '1' && file_exists('upload/'.$fileName) && filesize('upload/'.$fileName) == $totalSize) {\n\n    unlink('upload/'.$fileName);\n\n}\n```\n\n\n使用上述的两个方法，进行文件信息的追加，别忘了加上 FILE_APPEND 这个参数~\n\n\n![](http://gitpage.oss-cn-hangzhou.aliyuncs.com/frontEndUpload/10.jpg)\n\n\n\n\n一般在传完后都需要进行文件的校验吧，所以这里简单校验了文件大小是否一致\n\n\n\n根据实际需求的不同有不同的错误处理方法，这里就先不多处理了\n\n\n\n完整的PHP部分\n\n![](http://gitpage.oss-cn-hangzhou.aliyuncs.com/frontEndUpload/11.jpg)\n","source":"_posts/前端文件断点续传.md","raw":"---\ntitle: 前端文件断点续传\ndate: 2017-04-11 09:29:07\ntags: [\"断点续传\"]\ncategories:\n    - '前端'\n    - '知识点'\n---\n\n本文通过断点续传的简单例子（前端文件提交+后端PHP文件接收），理解其大致的实现过程\n\n\n\n还是先以图片为例，看看最后的样子\n\n![](http://gitpage.oss-cn-hangzhou.aliyuncs.com/frontEndUpload/0.gif)\n\n\n<!--more-->\n\n\n### 一、一些知识准备\n\n\n\n断点续传，既然有断，那就应该有文件分割的过程，一段一段的传。\n\n\n\n以前文件无法分割，但随着HTML5新特性的引入，类似普通字符串、数组的分割，我们可以可以使用slice方法来分割文件。\n\n\n\n所以断点续传的最基本实现也就是：前端通过FileList对象获取到相应的文件，按照指定的分割方式将大文件分段，然后一段一段地传给后端，后端再按顺序一段段将文件进行拼接。\n\n\n\n而我们需要对FileList对象进行修改再提交，在之前的文章中知晓了这种提交的一些注意点，因为FileList对象不能直接更改，所以不能直接通过表单的.submit()方法上传提交，需要结合FormData对象生成一个新的数据，通过Ajax进行上传操作。\n\n\n\n二、实现过程\n\n\n\n这个例子实现了文件断点续传的基本功能，不过手动的“暂停上传”操作还未实现成功，可以在上传过程中刷新页面来模拟上传的中断，体验“断点续传”、\n\n\n\n有可能还有其他一些小bug，但基本逻辑大致如此。\n\n\n\n1. 前端实现\n\n\n\n首先选择文件，列出选中的文件列表信息，然后可以自定义的做上传操作\n\n\n\n（1）所以先设置好页面DOM结构\n\n\n\n\n\n\n\n这里一并将CSS样式扔出来\n\n\n```\nbody {\n\n    font-family: Arial;\n\n}\n\nform {\n\n    margin: 50px auto;\n\n    width: 600px;\n\n}\n\ninput[type=\"button\"] {\n\n    cursor: pointer;\n\n}\n\ntable {\n\n    display: none;\n\n    margin-top: 15px;\n\n    border: 1px solid #ddd;\n\n    border-collapse: collapse;\n\n}\n\ntable th {\n\n    color: #666;\n\n}\n\ntable td, table th {\n\n    padding: 5px;\n\n    border: 1px solid #ddd;\n\n    text-align: center;\n\n    font-size: 14px;\n\n}\n```\n\n\n（2）接下来是JS的实现解析\n\n\n\n通过FileList对象我们能获取到文件的一些信息\n\n\n\n\n\n\n\n其中的size就是文件的大小，文件的分分割分片需要依赖这个\n\n\n\n这里的size是字节数，所以在界面显示文件大小时，可以这样转化\n\n```\n\n// 计算文件大小\n\nsize = file.size > 1024\n\n    ? file.size / 1024  > 1024\n\n    ? file.size / (1024 * 1024) > 1024\n\n    ? (file.size / (1024 * 1024 * 1024)).toFixed(2) + 'GB'\n\n    : (file.size / (1024 * 1024)).toFixed(2) + 'MB'\n\n    : (file.size / 1024).toFixed(2) + 'KB'\n\n    : (file.size).toFixed(2) + 'B';\n\n```\n\n选择文件后显示文件的信息，在模版中替换一下数据\n\n\n\n// 更新文件信息列表\n```\nuploadItem.push(uploadItemTpl\n\n    .replace(/{{fileName}}/g, file.name)\n\n    .replace('{{fileType}}', file.type || file.name.match(/\\.\\w+$/) + '文件')\n\n    .replace('{{fileSize}}', size)\n\n    .replace('{{progress}}', progress)\n\n    .replace('{{totalSize}}', file.size)\n\n    .replace('{{uploadVal}}', uploadVal)\n\n);\n\n```\n\n不过，在显示文件信息的时候，可能这个文件之前之前已经上传过了，为了断点续传，需要判断并在界面上做出提示\n\n\n\n通过查询本地看是否有相应的数据（这里的做法是当本地记录的是已经上传100%时，就直接是重新上传而不是继续上传了）\n\n\n\n// 初始通过本地记录，判断该文件是否曾经上传过\n```\npercent = window.localStorage.getItem(file.name + '_p');\n\n\n\nif (percent && percent !== '100.0') {\n\n    progress = '已上传 ' + percent + '%';\n\n    uploadVal = '继续上传';\n\n}\n```\n\n\n显示了文件信息列表\n\n\n![](http://gitpage.oss-cn-hangzhou.aliyuncs.com/frontEndUpload/1.jpg)\n\n\n\n\n点击开始上传，可以上传相应的文件\n\n\n![](http://gitpage.oss-cn-hangzhou.aliyuncs.com/frontEndUpload/2.jpg)\n\n\n\n\n上传文件的时候需要就将文件进行分片分段\n\n\n\n比如这里配置的每段1024B，总共chunks段（用来判断是否为末段），第chunk段，当前已上传的百分比percent等\n\n\n\n需要提一下的是这个暂停上传的操作，其实我还没实现出来，暂停不了无奈ing…\n\n![](http://gitpage.oss-cn-hangzhou.aliyuncs.com/frontEndUpload/3.jpg)\n\n![](http://gitpage.oss-cn-hangzhou.aliyuncs.com/frontEndUpload/4.jpg)\n\n\n\n\n\n接下来是分段过程\n\n![](http://gitpage.oss-cn-hangzhou.aliyuncs.com/frontEndUpload/5.jpg)\n\n\n\n\n\n// 上传之前查询是否以及上传过分片\n```\nchunk = window.localStorage.getItem(fileName + '_chunk') || 0;\n\nchunk = parseInt(chunk, 10);\n\n```\n\n文件应该支持覆盖上传，所以如果文件以及上传完了，现在再上传，应该重置数据以支持覆盖（不然后端就直接追加blob数据了）\n\n\n```\n// 如果第一次上传就为末分片，即文件已经上传完成，则重新覆盖上传\n\nif (times === 'first' && isLastChunk === 1) {\n\n    window.localStorage.setItem(fileName + '_chunk', 0);\n\n    chunk = 0;\n\n    isLastChunk = 0;\n\n}\n```\n\n\n这个times其实就是个参数，因为要在上一分段传完之后再传下一分段，所以这里的做法是在回调中继续调用这个上传操作\n\n![](http://gitpage.oss-cn-hangzhou.aliyuncs.com/frontEndUpload/6.jpg)\n\n\n\n\n\n接下来就是真正的文件上传操作了，用Ajax上传，因为用到了FormData对象，所以不要忘了在$.ajax({}加上这个配置processData: false\n\n\n\n上传了一个分段，通过返回的结果判断是否上传完毕，是否继续上传\n\n![](http://gitpage.oss-cn-hangzhou.aliyuncs.com/frontEndUpload/7.jpg)\n\n\n\n\n\n继续下一分段的上传时，就进行了递归操作，按顺序地上传下一分段\n\n\n\n截个图..\n\n\n![](http://gitpage.oss-cn-hangzhou.aliyuncs.com/frontEndUpload/8.jpg)\n\n\n\n\n这是完整的JS逻辑，代码有点儿注释了应该不难看懂吧哈哈\n\n\n```\n// 全部上传操作\n\n$(document).on('click', '#upload-all-btn', function () {\n\n    // 未选择文件\n\n    if (!$('#myFile').val()) {\n\n        $('#myFile').focus();\n\n    }\n\n    // 模拟点击其他可上传的文件\n\n    else {\n\n        $('#upload-list .upload-item-btn').each(function () {\n\n            $(this).click();\n\n        });\n\n    }\n\n});\n\n\n\n// 选择文件-显示文件信息\n\n$('#myFile').change(function (e) {\n\n    var file,\n\n        uploadItem = [],\n\n        uploadItemTpl = $('#file-upload-tpl').html(),\n\n        size,\n\n        percent,\n\n        progress = '未上传',\n\n        uploadVal = '开始上传';\n\n\n\n    for (var i = 0, j = this.files.length; i < j; ++i) {\n\n        file = this.files[i];\n\n\n\n        percent = undefined;\n\n        progress = '未上传';\n\n        uploadVal = '开始上传';\n\n\n\n        // 计算文件大小\n\n        size = file.size > 1024 ? file.size / 1024 > 1024 ? file.size / (1024 * 1024) > 1024 ? (file.size /\n\n            (1024 * 1024 * 1024)).toFixed(2) + 'GB' : (file.size / (1024 * 1024)).toFixed(2) + 'MB' : (file\n\n            .size / 1024).toFixed(2) + 'KB' : (file.size).toFixed(2) + 'B';\n\n\n\n        // 初始通过本地记录，判断该文件是否曾经上传过\n\n        percent = window.localStorage.getItem(file.name + '_p');\n\n\n\n        if (percent && percent !== '100.0') {\n\n            progress = '已上传 ' + percent + '%';\n\n            uploadVal = '继续上传';\n\n        }\n\n\n\n        // 更新文件信息列表\n\n        uploadItem.push(uploadItemTpl\n\n            .replace(/{{fileName}}/g, file.name)\n\n            .replace('{{fileType}}', file.type || file.name.match(/\\.\\w+$/) + '文件')\n\n            .replace('{{fileSize}}', size)\n\n            .replace('{{progress}}', progress)\n\n            .replace('{{totalSize}}', file.size)\n\n            .replace('{{uploadVal}}', uploadVal));\n\n    }\n\n\n\n    $('#upload-list').children('tbody').html(uploadItem.join(''))\n\n        .end().show();\n\n});\n\n\n\n/**\n\n* 上传文件时，提取相应匹配的文件项\n\n* @param  {String} fileName   需要匹配的文件名\n\n* @return {FileList}          匹配的文件项目\n\n*/\n\nfunction findTheFile(fileName) {\n\n    var files = $('#myFile')[0].files,\n\n        theFile;\n\n\n\n    for (var i = 0, j = files.length; i < j; ++i) {\n\n        if (files[i].name === fileName) {\n\n            theFile = files[i];\n\n            break;\n\n        }\n\n    }\n\n\n\n    return theFile ? theFile : [];\n\n}\n\n\n\n// 上传文件\n\n$(document).on('click', '.upload-item-btn', function () {\n\n    var $this = $(this),\n\n        state = $this.attr('data-state'),\n\n        msg = {\n\n            done: '上传成功',\n\n            failed: '上传失败',\n\n            in : '上传中...',\n\n            paused: '暂停中...'\n\n        },\n\n        fileName = $this.attr('data-name'),\n\n        $progress = $this.closest('tr').find('.upload-progress'),\n\n        eachSize = 1024,\n\n        totalSize = $this.attr('data-size'),\n\n        chunks = Math.ceil(totalSize / eachSize),\n\n        percent,\n\n        chunk,\n\n        // 暂停上传操作\n\n        isPaused = 0;\n\n\n\n    // 进行暂停上传操作\n\n    // 未实现，这里通过动态的设置isPaused值并不能阻止下方ajax请求的调用\n\n    if (state === 'uploading') {\n\n        $this.val('继续上传').attr('data-state', 'paused');\n\n        $progress.text(msg['paused'] + percent + '%');\n\n        isPaused = 1;\n\n        console.log('暂停：', isPaused);\n\n    }\n\n    // 进行开始/继续上传操作\n\n    else if (state === 'paused' || state === 'default') {\n\n        $this.val('暂停上传').attr('data-state', 'uploading');\n\n        isPaused = 0;\n\n    }\n\n\n\n    // 第一次点击上传\n\n    startUpload('first');\n\n\n\n    // 上传操作 times: 第几次\n\n\n\n    function startUpload(times) {\n\n        // 上传之前查询是否以及上传过分片\n\n        chunk = window.localStorage.getItem(fileName + '_chunk') || 0;\n\n        chunk = parseInt(chunk, 10);\n\n        // 判断是否为末分片\n\n        var isLastChunk = (chunk == (chunks - 1) ? 1 : 0);\n\n\n\n        // 如果第一次上传就为末分片，即文件已经上传完成，则重新覆盖上传\n\n        if (times === 'first' && isLastChunk === 1) {\n\n            window.localStorage.setItem(fileName + '_chunk', 0);\n\n            chunk = 0;\n\n            isLastChunk = 0;\n\n        }\n\n\n\n        // 设置分片的开始结尾\n\n        var blobFrom = chunk * eachSize, // 分段开始\n\n            blobTo = (chunk + 1) * eachSize > totalSize ? totalSize : (chunk + 1) * eachSize, // 分段结尾\n\n            percent = (100 * blobTo / totalSize).toFixed(1), // 已上传的百分比\n\n            timeout = 5000, // 超时时间\n\n            fd = new FormData($('#myForm')[0]);\n\n\n\n        fd.append('theFile', findTheFile(fileName).slice(blobFrom, blobTo)); // 分好段的文件\n\n        fd.append('fileName', fileName); // 文件名\n\n        fd.append('totalSize', totalSize); // 文件总大小\n\n        fd.append('isLastChunk', isLastChunk); // 是否为末段\n\n        fd.append('isFirstUpload', times === 'first' ? 1 : 0); // 是否是第一段（第一次上传）\n\n\n\n        // 上传\n\n        $.ajax({\n\n            type: 'post',\n\n            url: '/fileTest.php',\n\n            data: fd,\n\n            processData: false,\n\n            contentType: false,\n\n            timeout: timeout,\n\n            success: function (rs) {\n\n                rs = JSON.parse(rs);\n\n\n\n                // 上传成功\n\n                if (rs.status === 200) {\n\n                    // 记录已经上传的百分比\n\n                    window.localStorage.setItem(fileName + '_p', percent);\n\n\n\n                    // 已经上传完毕\n\n                    if (chunk === (chunks - 1)) {\n\n                        $progress.text(msg['done']);\n\n                        $this.val('已经上传').prop('disabled', true).css('cursor', 'not-allowed');\n\n                        if (!$('#upload-list').find('.upload-item-btn:not(:disabled)').length) {\n\n                            $('#upload-all-btn').val('已经上传').prop('disabled', true).css('cursor',\n\n                                'not-allowed');\n\n                        }\n\n                    } else {\n\n                        // 记录已经上传的分片\n\n                        window.localStorage.setItem(fileName + '_chunk', ++chunk);\n\n\n\n                        $progress.text(msg['in'] + percent + '%');\n\n                        // 这样设置可以暂停，但点击后动态的设置就暂停不了..\n\n                        // if (chunk == 10) {\n\n                        //     isPaused = 1;\n\n                        // }\n\n                        console.log(isPaused);\n\n                        if (!isPaused) {\n\n                            startUpload();\n\n                        }\n\n\n\n                    }\n\n                }\n\n                // 上传失败，上传失败分很多种情况，具体按实际来设置\n\n                else if (rs.status === 500) {\n\n                    $progress.text(msg['failed']);\n\n                }\n\n            },\n\n            error: function () {\n\n                $progress.text(msg['failed']);\n\n            }\n\n        });\n\n    }\n\n});\n\n```\n\n2. 后端实现\n\n\n\n这里的后端实现还是比较简单的，主要用依赖了 file_put_contents、file_get_contents 这两个方法\n\n\n![](http://gitpage.oss-cn-hangzhou.aliyuncs.com/frontEndUpload/9.jpg)\n\n\n\n\n要注意一下，通过FormData对象上传的文件对象，在PHP中也是通过$_FILES全局对象获取的，还有为了避免上传后文件中文的乱码，用一下iconv\n\n\n\n断点续传支持文件的覆盖，所以如果已经存在完整的文件，就将其删除\n\n\n```\n// 如果第一次上传的时候，该文件已经存在，则删除文件重新上传\n\nif ($isFirstUpload == '1' && file_exists('upload/'.$fileName) && filesize('upload/'.$fileName) == $totalSize) {\n\n    unlink('upload/'.$fileName);\n\n}\n```\n\n\n使用上述的两个方法，进行文件信息的追加，别忘了加上 FILE_APPEND 这个参数~\n\n\n![](http://gitpage.oss-cn-hangzhou.aliyuncs.com/frontEndUpload/10.jpg)\n\n\n\n\n一般在传完后都需要进行文件的校验吧，所以这里简单校验了文件大小是否一致\n\n\n\n根据实际需求的不同有不同的错误处理方法，这里就先不多处理了\n\n\n\n完整的PHP部分\n\n![](http://gitpage.oss-cn-hangzhou.aliyuncs.com/frontEndUpload/11.jpg)\n","slug":"前端文件断点续传","published":1,"updated":"2017-04-17T02:38:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5naxw4r0011fcxe5islqqyd","content":"<p>本文通过断点续传的简单例子（前端文件提交+后端PHP文件接收），理解其大致的实现过程</p>\n<p>还是先以图片为例，看看最后的样子</p>\n<p><img src=\"http://gitpage.oss-cn-hangzhou.aliyuncs.com/frontEndUpload/0.gif\" alt=\"\"></p>\n<a id=\"more\"></a>\n<h3 id=\"一、一些知识准备\"><a href=\"#一、一些知识准备\" class=\"headerlink\" title=\"一、一些知识准备\"></a>一、一些知识准备</h3><p>断点续传，既然有断，那就应该有文件分割的过程，一段一段的传。</p>\n<p>以前文件无法分割，但随着HTML5新特性的引入，类似普通字符串、数组的分割，我们可以可以使用slice方法来分割文件。</p>\n<p>所以断点续传的最基本实现也就是：前端通过FileList对象获取到相应的文件，按照指定的分割方式将大文件分段，然后一段一段地传给后端，后端再按顺序一段段将文件进行拼接。</p>\n<p>而我们需要对FileList对象进行修改再提交，在之前的文章中知晓了这种提交的一些注意点，因为FileList对象不能直接更改，所以不能直接通过表单的.submit()方法上传提交，需要结合FormData对象生成一个新的数据，通过Ajax进行上传操作。</p>\n<p>二、实现过程</p>\n<p>这个例子实现了文件断点续传的基本功能，不过手动的“暂停上传”操作还未实现成功，可以在上传过程中刷新页面来模拟上传的中断，体验“断点续传”、</p>\n<p>有可能还有其他一些小bug，但基本逻辑大致如此。</p>\n<ol>\n<li>前端实现</li>\n</ol>\n<p>首先选择文件，列出选中的文件列表信息，然后可以自定义的做上传操作</p>\n<p>（1）所以先设置好页面DOM结构</p>\n<p>这里一并将CSS样式扔出来</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\">body &#123;</div><div class=\"line\"></div><div class=\"line\">    font-family: Arial;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">form &#123;</div><div class=\"line\"></div><div class=\"line\">    margin: 50px auto;</div><div class=\"line\"></div><div class=\"line\">    width: 600px;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">input[type=&quot;button&quot;] &#123;</div><div class=\"line\"></div><div class=\"line\">    cursor: pointer;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">table &#123;</div><div class=\"line\"></div><div class=\"line\">    display: none;</div><div class=\"line\"></div><div class=\"line\">    margin-top: 15px;</div><div class=\"line\"></div><div class=\"line\">    border: 1px solid #ddd;</div><div class=\"line\"></div><div class=\"line\">    border-collapse: collapse;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">table th &#123;</div><div class=\"line\"></div><div class=\"line\">    color: #666;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">table td, table th &#123;</div><div class=\"line\"></div><div class=\"line\">    padding: 5px;</div><div class=\"line\"></div><div class=\"line\">    border: 1px solid #ddd;</div><div class=\"line\"></div><div class=\"line\">    text-align: center;</div><div class=\"line\"></div><div class=\"line\">    font-size: 14px;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>（2）接下来是JS的实现解析</p>\n<p>通过FileList对象我们能获取到文件的一些信息</p>\n<p>其中的size就是文件的大小，文件的分分割分片需要依赖这个</p>\n<p>这里的size是字节数，所以在界面显示文件大小时，可以这样转化</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">// 计算文件大小</div><div class=\"line\"></div><div class=\"line\">size = file.size &gt; 1024</div><div class=\"line\"></div><div class=\"line\">    ? file.size / 1024  &gt; 1024</div><div class=\"line\"></div><div class=\"line\">    ? file.size / (1024 * 1024) &gt; 1024</div><div class=\"line\"></div><div class=\"line\">    ? (file.size / (1024 * 1024 * 1024)).toFixed(2) + &apos;GB&apos;</div><div class=\"line\"></div><div class=\"line\">    : (file.size / (1024 * 1024)).toFixed(2) + &apos;MB&apos;</div><div class=\"line\"></div><div class=\"line\">    : (file.size / 1024).toFixed(2) + &apos;KB&apos;</div><div class=\"line\"></div><div class=\"line\">    : (file.size).toFixed(2) + &apos;B&apos;;</div></pre></td></tr></table></figure>\n<p>选择文件后显示文件的信息，在模版中替换一下数据</p>\n<p>// 更新文件信息列表<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">uploadItem.push(uploadItemTpl</div><div class=\"line\"></div><div class=\"line\">    .replace(/&#123;&#123;fileName&#125;&#125;/g, file.name)</div><div class=\"line\"></div><div class=\"line\">    .replace(&apos;&#123;&#123;fileType&#125;&#125;&apos;, file.type || file.name.match(/\\.\\w+$/) + &apos;文件&apos;)</div><div class=\"line\"></div><div class=\"line\">    .replace(&apos;&#123;&#123;fileSize&#125;&#125;&apos;, size)</div><div class=\"line\"></div><div class=\"line\">    .replace(&apos;&#123;&#123;progress&#125;&#125;&apos;, progress)</div><div class=\"line\"></div><div class=\"line\">    .replace(&apos;&#123;&#123;totalSize&#125;&#125;&apos;, file.size)</div><div class=\"line\"></div><div class=\"line\">    .replace(&apos;&#123;&#123;uploadVal&#125;&#125;&apos;, uploadVal)</div><div class=\"line\"></div><div class=\"line\">);</div></pre></td></tr></table></figure></p>\n<p>不过，在显示文件信息的时候，可能这个文件之前之前已经上传过了，为了断点续传，需要判断并在界面上做出提示</p>\n<p>通过查询本地看是否有相应的数据（这里的做法是当本地记录的是已经上传100%时，就直接是重新上传而不是继续上传了）</p>\n<p>// 初始通过本地记录，判断该文件是否曾经上传过<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">percent = window.localStorage.getItem(file.name + &apos;_p&apos;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">if (percent &amp;&amp; percent !== &apos;100.0&apos;) &#123;</div><div class=\"line\"></div><div class=\"line\">    progress = &apos;已上传 &apos; + percent + &apos;%&apos;;</div><div class=\"line\"></div><div class=\"line\">    uploadVal = &apos;继续上传&apos;;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>显示了文件信息列表</p>\n<p><img src=\"http://gitpage.oss-cn-hangzhou.aliyuncs.com/frontEndUpload/1.jpg\" alt=\"\"></p>\n<p>点击开始上传，可以上传相应的文件</p>\n<p><img src=\"http://gitpage.oss-cn-hangzhou.aliyuncs.com/frontEndUpload/2.jpg\" alt=\"\"></p>\n<p>上传文件的时候需要就将文件进行分片分段</p>\n<p>比如这里配置的每段1024B，总共chunks段（用来判断是否为末段），第chunk段，当前已上传的百分比percent等</p>\n<p>需要提一下的是这个暂停上传的操作，其实我还没实现出来，暂停不了无奈ing…</p>\n<p><img src=\"http://gitpage.oss-cn-hangzhou.aliyuncs.com/frontEndUpload/3.jpg\" alt=\"\"></p>\n<p><img src=\"http://gitpage.oss-cn-hangzhou.aliyuncs.com/frontEndUpload/4.jpg\" alt=\"\"></p>\n<p>接下来是分段过程</p>\n<p><img src=\"http://gitpage.oss-cn-hangzhou.aliyuncs.com/frontEndUpload/5.jpg\" alt=\"\"></p>\n<p>// 上传之前查询是否以及上传过分片<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">chunk = window.localStorage.getItem(fileName + &apos;_chunk&apos;) || 0;</div><div class=\"line\"></div><div class=\"line\">chunk = parseInt(chunk, 10);</div></pre></td></tr></table></figure></p>\n<p>文件应该支持覆盖上传，所以如果文件以及上传完了，现在再上传，应该重置数据以支持覆盖（不然后端就直接追加blob数据了）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 如果第一次上传就为末分片，即文件已经上传完成，则重新覆盖上传</div><div class=\"line\"></div><div class=\"line\">if (times === &apos;first&apos; &amp;&amp; isLastChunk === 1) &#123;</div><div class=\"line\"></div><div class=\"line\">    window.localStorage.setItem(fileName + &apos;_chunk&apos;, 0);</div><div class=\"line\"></div><div class=\"line\">    chunk = 0;</div><div class=\"line\"></div><div class=\"line\">    isLastChunk = 0;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这个times其实就是个参数，因为要在上一分段传完之后再传下一分段，所以这里的做法是在回调中继续调用这个上传操作</p>\n<p><img src=\"http://gitpage.oss-cn-hangzhou.aliyuncs.com/frontEndUpload/6.jpg\" alt=\"\"></p>\n<p>接下来就是真正的文件上传操作了，用Ajax上传，因为用到了FormData对象，所以不要忘了在$.ajax({}加上这个配置processData: false</p>\n<p>上传了一个分段，通过返回的结果判断是否上传完毕，是否继续上传</p>\n<p><img src=\"http://gitpage.oss-cn-hangzhou.aliyuncs.com/frontEndUpload/7.jpg\" alt=\"\"></p>\n<p>继续下一分段的上传时，就进行了递归操作，按顺序地上传下一分段</p>\n<p>截个图..</p>\n<p><img src=\"http://gitpage.oss-cn-hangzhou.aliyuncs.com/frontEndUpload/8.jpg\" alt=\"\"></p>\n<p>这是完整的JS逻辑，代码有点儿注释了应该不难看懂吧哈哈</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div><div class=\"line\">271</div><div class=\"line\">272</div><div class=\"line\">273</div><div class=\"line\">274</div><div class=\"line\">275</div><div class=\"line\">276</div><div class=\"line\">277</div><div class=\"line\">278</div><div class=\"line\">279</div><div class=\"line\">280</div><div class=\"line\">281</div><div class=\"line\">282</div><div class=\"line\">283</div><div class=\"line\">284</div><div class=\"line\">285</div><div class=\"line\">286</div><div class=\"line\">287</div><div class=\"line\">288</div><div class=\"line\">289</div><div class=\"line\">290</div><div class=\"line\">291</div><div class=\"line\">292</div><div class=\"line\">293</div><div class=\"line\">294</div><div class=\"line\">295</div><div class=\"line\">296</div><div class=\"line\">297</div><div class=\"line\">298</div><div class=\"line\">299</div><div class=\"line\">300</div><div class=\"line\">301</div><div class=\"line\">302</div><div class=\"line\">303</div><div class=\"line\">304</div><div class=\"line\">305</div><div class=\"line\">306</div><div class=\"line\">307</div><div class=\"line\">308</div><div class=\"line\">309</div><div class=\"line\">310</div><div class=\"line\">311</div><div class=\"line\">312</div><div class=\"line\">313</div><div class=\"line\">314</div><div class=\"line\">315</div><div class=\"line\">316</div><div class=\"line\">317</div><div class=\"line\">318</div><div class=\"line\">319</div><div class=\"line\">320</div><div class=\"line\">321</div><div class=\"line\">322</div><div class=\"line\">323</div><div class=\"line\">324</div><div class=\"line\">325</div><div class=\"line\">326</div><div class=\"line\">327</div><div class=\"line\">328</div><div class=\"line\">329</div><div class=\"line\">330</div><div class=\"line\">331</div><div class=\"line\">332</div><div class=\"line\">333</div><div class=\"line\">334</div><div class=\"line\">335</div><div class=\"line\">336</div><div class=\"line\">337</div><div class=\"line\">338</div><div class=\"line\">339</div><div class=\"line\">340</div><div class=\"line\">341</div><div class=\"line\">342</div><div class=\"line\">343</div><div class=\"line\">344</div><div class=\"line\">345</div><div class=\"line\">346</div><div class=\"line\">347</div><div class=\"line\">348</div><div class=\"line\">349</div><div class=\"line\">350</div><div class=\"line\">351</div><div class=\"line\">352</div><div class=\"line\">353</div><div class=\"line\">354</div><div class=\"line\">355</div><div class=\"line\">356</div><div class=\"line\">357</div><div class=\"line\">358</div><div class=\"line\">359</div><div class=\"line\">360</div><div class=\"line\">361</div><div class=\"line\">362</div><div class=\"line\">363</div><div class=\"line\">364</div><div class=\"line\">365</div><div class=\"line\">366</div><div class=\"line\">367</div><div class=\"line\">368</div><div class=\"line\">369</div><div class=\"line\">370</div><div class=\"line\">371</div><div class=\"line\">372</div><div class=\"line\">373</div><div class=\"line\">374</div><div class=\"line\">375</div><div class=\"line\">376</div><div class=\"line\">377</div><div class=\"line\">378</div><div class=\"line\">379</div><div class=\"line\">380</div><div class=\"line\">381</div><div class=\"line\">382</div><div class=\"line\">383</div><div class=\"line\">384</div><div class=\"line\">385</div><div class=\"line\">386</div><div class=\"line\">387</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 全部上传操作</div><div class=\"line\"></div><div class=\"line\">$(document).on(&apos;click&apos;, &apos;#upload-all-btn&apos;, function () &#123;</div><div class=\"line\"></div><div class=\"line\">    // 未选择文件</div><div class=\"line\"></div><div class=\"line\">    if (!$(&apos;#myFile&apos;).val()) &#123;</div><div class=\"line\"></div><div class=\"line\">        $(&apos;#myFile&apos;).focus();</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    // 模拟点击其他可上传的文件</div><div class=\"line\"></div><div class=\"line\">    else &#123;</div><div class=\"line\"></div><div class=\"line\">        $(&apos;#upload-list .upload-item-btn&apos;).each(function () &#123;</div><div class=\"line\"></div><div class=\"line\">            $(this).click();</div><div class=\"line\"></div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">// 选择文件-显示文件信息</div><div class=\"line\"></div><div class=\"line\">$(&apos;#myFile&apos;).change(function (e) &#123;</div><div class=\"line\"></div><div class=\"line\">    var file,</div><div class=\"line\"></div><div class=\"line\">        uploadItem = [],</div><div class=\"line\"></div><div class=\"line\">        uploadItemTpl = $(&apos;#file-upload-tpl&apos;).html(),</div><div class=\"line\"></div><div class=\"line\">        size,</div><div class=\"line\"></div><div class=\"line\">        percent,</div><div class=\"line\"></div><div class=\"line\">        progress = &apos;未上传&apos;,</div><div class=\"line\"></div><div class=\"line\">        uploadVal = &apos;开始上传&apos;;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    for (var i = 0, j = this.files.length; i &lt; j; ++i) &#123;</div><div class=\"line\"></div><div class=\"line\">        file = this.files[i];</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        percent = undefined;</div><div class=\"line\"></div><div class=\"line\">        progress = &apos;未上传&apos;;</div><div class=\"line\"></div><div class=\"line\">        uploadVal = &apos;开始上传&apos;;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        // 计算文件大小</div><div class=\"line\"></div><div class=\"line\">        size = file.size &gt; 1024 ? file.size / 1024 &gt; 1024 ? file.size / (1024 * 1024) &gt; 1024 ? (file.size /</div><div class=\"line\"></div><div class=\"line\">            (1024 * 1024 * 1024)).toFixed(2) + &apos;GB&apos; : (file.size / (1024 * 1024)).toFixed(2) + &apos;MB&apos; : (file</div><div class=\"line\"></div><div class=\"line\">            .size / 1024).toFixed(2) + &apos;KB&apos; : (file.size).toFixed(2) + &apos;B&apos;;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        // 初始通过本地记录，判断该文件是否曾经上传过</div><div class=\"line\"></div><div class=\"line\">        percent = window.localStorage.getItem(file.name + &apos;_p&apos;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        if (percent &amp;&amp; percent !== &apos;100.0&apos;) &#123;</div><div class=\"line\"></div><div class=\"line\">            progress = &apos;已上传 &apos; + percent + &apos;%&apos;;</div><div class=\"line\"></div><div class=\"line\">            uploadVal = &apos;继续上传&apos;;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        // 更新文件信息列表</div><div class=\"line\"></div><div class=\"line\">        uploadItem.push(uploadItemTpl</div><div class=\"line\"></div><div class=\"line\">            .replace(/&#123;&#123;fileName&#125;&#125;/g, file.name)</div><div class=\"line\"></div><div class=\"line\">            .replace(&apos;&#123;&#123;fileType&#125;&#125;&apos;, file.type || file.name.match(/\\.\\w+$/) + &apos;文件&apos;)</div><div class=\"line\"></div><div class=\"line\">            .replace(&apos;&#123;&#123;fileSize&#125;&#125;&apos;, size)</div><div class=\"line\"></div><div class=\"line\">            .replace(&apos;&#123;&#123;progress&#125;&#125;&apos;, progress)</div><div class=\"line\"></div><div class=\"line\">            .replace(&apos;&#123;&#123;totalSize&#125;&#125;&apos;, file.size)</div><div class=\"line\"></div><div class=\"line\">            .replace(&apos;&#123;&#123;uploadVal&#125;&#125;&apos;, uploadVal));</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    $(&apos;#upload-list&apos;).children(&apos;tbody&apos;).html(uploadItem.join(&apos;&apos;))</div><div class=\"line\"></div><div class=\"line\">        .end().show();</div><div class=\"line\"></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"></div><div class=\"line\">* 上传文件时，提取相应匹配的文件项</div><div class=\"line\"></div><div class=\"line\">* @param  &#123;String&#125; fileName   需要匹配的文件名</div><div class=\"line\"></div><div class=\"line\">* @return &#123;FileList&#125;          匹配的文件项目</div><div class=\"line\"></div><div class=\"line\">*/</div><div class=\"line\"></div><div class=\"line\">function findTheFile(fileName) &#123;</div><div class=\"line\"></div><div class=\"line\">    var files = $(&apos;#myFile&apos;)[0].files,</div><div class=\"line\"></div><div class=\"line\">        theFile;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    for (var i = 0, j = files.length; i &lt; j; ++i) &#123;</div><div class=\"line\"></div><div class=\"line\">        if (files[i].name === fileName) &#123;</div><div class=\"line\"></div><div class=\"line\">            theFile = files[i];</div><div class=\"line\"></div><div class=\"line\">            break;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    return theFile ? theFile : [];</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">// 上传文件</div><div class=\"line\"></div><div class=\"line\">$(document).on(&apos;click&apos;, &apos;.upload-item-btn&apos;, function () &#123;</div><div class=\"line\"></div><div class=\"line\">    var $this = $(this),</div><div class=\"line\"></div><div class=\"line\">        state = $this.attr(&apos;data-state&apos;),</div><div class=\"line\"></div><div class=\"line\">        msg = &#123;</div><div class=\"line\"></div><div class=\"line\">            done: &apos;上传成功&apos;,</div><div class=\"line\"></div><div class=\"line\">            failed: &apos;上传失败&apos;,</div><div class=\"line\"></div><div class=\"line\">            in : &apos;上传中...&apos;,</div><div class=\"line\"></div><div class=\"line\">            paused: &apos;暂停中...&apos;</div><div class=\"line\"></div><div class=\"line\">        &#125;,</div><div class=\"line\"></div><div class=\"line\">        fileName = $this.attr(&apos;data-name&apos;),</div><div class=\"line\"></div><div class=\"line\">        $progress = $this.closest(&apos;tr&apos;).find(&apos;.upload-progress&apos;),</div><div class=\"line\"></div><div class=\"line\">        eachSize = 1024,</div><div class=\"line\"></div><div class=\"line\">        totalSize = $this.attr(&apos;data-size&apos;),</div><div class=\"line\"></div><div class=\"line\">        chunks = Math.ceil(totalSize / eachSize),</div><div class=\"line\"></div><div class=\"line\">        percent,</div><div class=\"line\"></div><div class=\"line\">        chunk,</div><div class=\"line\"></div><div class=\"line\">        // 暂停上传操作</div><div class=\"line\"></div><div class=\"line\">        isPaused = 0;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    // 进行暂停上传操作</div><div class=\"line\"></div><div class=\"line\">    // 未实现，这里通过动态的设置isPaused值并不能阻止下方ajax请求的调用</div><div class=\"line\"></div><div class=\"line\">    if (state === &apos;uploading&apos;) &#123;</div><div class=\"line\"></div><div class=\"line\">        $this.val(&apos;继续上传&apos;).attr(&apos;data-state&apos;, &apos;paused&apos;);</div><div class=\"line\"></div><div class=\"line\">        $progress.text(msg[&apos;paused&apos;] + percent + &apos;%&apos;);</div><div class=\"line\"></div><div class=\"line\">        isPaused = 1;</div><div class=\"line\"></div><div class=\"line\">        console.log(&apos;暂停：&apos;, isPaused);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    // 进行开始/继续上传操作</div><div class=\"line\"></div><div class=\"line\">    else if (state === &apos;paused&apos; || state === &apos;default&apos;) &#123;</div><div class=\"line\"></div><div class=\"line\">        $this.val(&apos;暂停上传&apos;).attr(&apos;data-state&apos;, &apos;uploading&apos;);</div><div class=\"line\"></div><div class=\"line\">        isPaused = 0;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    // 第一次点击上传</div><div class=\"line\"></div><div class=\"line\">    startUpload(&apos;first&apos;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    // 上传操作 times: 第几次</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    function startUpload(times) &#123;</div><div class=\"line\"></div><div class=\"line\">        // 上传之前查询是否以及上传过分片</div><div class=\"line\"></div><div class=\"line\">        chunk = window.localStorage.getItem(fileName + &apos;_chunk&apos;) || 0;</div><div class=\"line\"></div><div class=\"line\">        chunk = parseInt(chunk, 10);</div><div class=\"line\"></div><div class=\"line\">        // 判断是否为末分片</div><div class=\"line\"></div><div class=\"line\">        var isLastChunk = (chunk == (chunks - 1) ? 1 : 0);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        // 如果第一次上传就为末分片，即文件已经上传完成，则重新覆盖上传</div><div class=\"line\"></div><div class=\"line\">        if (times === &apos;first&apos; &amp;&amp; isLastChunk === 1) &#123;</div><div class=\"line\"></div><div class=\"line\">            window.localStorage.setItem(fileName + &apos;_chunk&apos;, 0);</div><div class=\"line\"></div><div class=\"line\">            chunk = 0;</div><div class=\"line\"></div><div class=\"line\">            isLastChunk = 0;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        // 设置分片的开始结尾</div><div class=\"line\"></div><div class=\"line\">        var blobFrom = chunk * eachSize, // 分段开始</div><div class=\"line\"></div><div class=\"line\">            blobTo = (chunk + 1) * eachSize &gt; totalSize ? totalSize : (chunk + 1) * eachSize, // 分段结尾</div><div class=\"line\"></div><div class=\"line\">            percent = (100 * blobTo / totalSize).toFixed(1), // 已上传的百分比</div><div class=\"line\"></div><div class=\"line\">            timeout = 5000, // 超时时间</div><div class=\"line\"></div><div class=\"line\">            fd = new FormData($(&apos;#myForm&apos;)[0]);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        fd.append(&apos;theFile&apos;, findTheFile(fileName).slice(blobFrom, blobTo)); // 分好段的文件</div><div class=\"line\"></div><div class=\"line\">        fd.append(&apos;fileName&apos;, fileName); // 文件名</div><div class=\"line\"></div><div class=\"line\">        fd.append(&apos;totalSize&apos;, totalSize); // 文件总大小</div><div class=\"line\"></div><div class=\"line\">        fd.append(&apos;isLastChunk&apos;, isLastChunk); // 是否为末段</div><div class=\"line\"></div><div class=\"line\">        fd.append(&apos;isFirstUpload&apos;, times === &apos;first&apos; ? 1 : 0); // 是否是第一段（第一次上传）</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        // 上传</div><div class=\"line\"></div><div class=\"line\">        $.ajax(&#123;</div><div class=\"line\"></div><div class=\"line\">            type: &apos;post&apos;,</div><div class=\"line\"></div><div class=\"line\">            url: &apos;/fileTest.php&apos;,</div><div class=\"line\"></div><div class=\"line\">            data: fd,</div><div class=\"line\"></div><div class=\"line\">            processData: false,</div><div class=\"line\"></div><div class=\"line\">            contentType: false,</div><div class=\"line\"></div><div class=\"line\">            timeout: timeout,</div><div class=\"line\"></div><div class=\"line\">            success: function (rs) &#123;</div><div class=\"line\"></div><div class=\"line\">                rs = JSON.parse(rs);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">                // 上传成功</div><div class=\"line\"></div><div class=\"line\">                if (rs.status === 200) &#123;</div><div class=\"line\"></div><div class=\"line\">                    // 记录已经上传的百分比</div><div class=\"line\"></div><div class=\"line\">                    window.localStorage.setItem(fileName + &apos;_p&apos;, percent);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">                    // 已经上传完毕</div><div class=\"line\"></div><div class=\"line\">                    if (chunk === (chunks - 1)) &#123;</div><div class=\"line\"></div><div class=\"line\">                        $progress.text(msg[&apos;done&apos;]);</div><div class=\"line\"></div><div class=\"line\">                        $this.val(&apos;已经上传&apos;).prop(&apos;disabled&apos;, true).css(&apos;cursor&apos;, &apos;not-allowed&apos;);</div><div class=\"line\"></div><div class=\"line\">                        if (!$(&apos;#upload-list&apos;).find(&apos;.upload-item-btn:not(:disabled)&apos;).length) &#123;</div><div class=\"line\"></div><div class=\"line\">                            $(&apos;#upload-all-btn&apos;).val(&apos;已经上传&apos;).prop(&apos;disabled&apos;, true).css(&apos;cursor&apos;,</div><div class=\"line\"></div><div class=\"line\">                                &apos;not-allowed&apos;);</div><div class=\"line\"></div><div class=\"line\">                        &#125;</div><div class=\"line\"></div><div class=\"line\">                    &#125; else &#123;</div><div class=\"line\"></div><div class=\"line\">                        // 记录已经上传的分片</div><div class=\"line\"></div><div class=\"line\">                        window.localStorage.setItem(fileName + &apos;_chunk&apos;, ++chunk);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">                        $progress.text(msg[&apos;in&apos;] + percent + &apos;%&apos;);</div><div class=\"line\"></div><div class=\"line\">                        // 这样设置可以暂停，但点击后动态的设置就暂停不了..</div><div class=\"line\"></div><div class=\"line\">                        // if (chunk == 10) &#123;</div><div class=\"line\"></div><div class=\"line\">                        //     isPaused = 1;</div><div class=\"line\"></div><div class=\"line\">                        // &#125;</div><div class=\"line\"></div><div class=\"line\">                        console.log(isPaused);</div><div class=\"line\"></div><div class=\"line\">                        if (!isPaused) &#123;</div><div class=\"line\"></div><div class=\"line\">                            startUpload();</div><div class=\"line\"></div><div class=\"line\">                        &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                // 上传失败，上传失败分很多种情况，具体按实际来设置</div><div class=\"line\"></div><div class=\"line\">                else if (rs.status === 500) &#123;</div><div class=\"line\"></div><div class=\"line\">                    $progress.text(msg[&apos;failed&apos;]);</div><div class=\"line\"></div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">            &#125;,</div><div class=\"line\"></div><div class=\"line\">            error: function () &#123;</div><div class=\"line\"></div><div class=\"line\">                $progress.text(msg[&apos;failed&apos;]);</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol>\n<li>后端实现</li>\n</ol>\n<p>这里的后端实现还是比较简单的，主要用依赖了 file_put_contents、file_get_contents 这两个方法</p>\n<p><img src=\"http://gitpage.oss-cn-hangzhou.aliyuncs.com/frontEndUpload/9.jpg\" alt=\"\"></p>\n<p>要注意一下，通过FormData对象上传的文件对象，在PHP中也是通过$_FILES全局对象获取的，还有为了避免上传后文件中文的乱码，用一下iconv</p>\n<p>断点续传支持文件的覆盖，所以如果已经存在完整的文件，就将其删除</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 如果第一次上传的时候，该文件已经存在，则删除文件重新上传</div><div class=\"line\"></div><div class=\"line\">if ($isFirstUpload == &apos;1&apos; &amp;&amp; file_exists(&apos;upload/&apos;.$fileName) &amp;&amp; filesize(&apos;upload/&apos;.$fileName) == $totalSize) &#123;</div><div class=\"line\"></div><div class=\"line\">    unlink(&apos;upload/&apos;.$fileName);</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>使用上述的两个方法，进行文件信息的追加，别忘了加上 FILE_APPEND 这个参数~</p>\n<p><img src=\"http://gitpage.oss-cn-hangzhou.aliyuncs.com/frontEndUpload/10.jpg\" alt=\"\"></p>\n<p>一般在传完后都需要进行文件的校验吧，所以这里简单校验了文件大小是否一致</p>\n<p>根据实际需求的不同有不同的错误处理方法，这里就先不多处理了</p>\n<p>完整的PHP部分</p>\n<p><img src=\"http://gitpage.oss-cn-hangzhou.aliyuncs.com/frontEndUpload/11.jpg\" alt=\"\"></p>\n","excerpt":"<p>本文通过断点续传的简单例子（前端文件提交+后端PHP文件接收），理解其大致的实现过程</p>\n<p>还是先以图片为例，看看最后的样子</p>\n<p><img src=\"http://gitpage.oss-cn-hangzhou.aliyuncs.com/frontEndUpload/0.gif\" alt=\"\"></p>","more":"<h3 id=\"一、一些知识准备\"><a href=\"#一、一些知识准备\" class=\"headerlink\" title=\"一、一些知识准备\"></a>一、一些知识准备</h3><p>断点续传，既然有断，那就应该有文件分割的过程，一段一段的传。</p>\n<p>以前文件无法分割，但随着HTML5新特性的引入，类似普通字符串、数组的分割，我们可以可以使用slice方法来分割文件。</p>\n<p>所以断点续传的最基本实现也就是：前端通过FileList对象获取到相应的文件，按照指定的分割方式将大文件分段，然后一段一段地传给后端，后端再按顺序一段段将文件进行拼接。</p>\n<p>而我们需要对FileList对象进行修改再提交，在之前的文章中知晓了这种提交的一些注意点，因为FileList对象不能直接更改，所以不能直接通过表单的.submit()方法上传提交，需要结合FormData对象生成一个新的数据，通过Ajax进行上传操作。</p>\n<p>二、实现过程</p>\n<p>这个例子实现了文件断点续传的基本功能，不过手动的“暂停上传”操作还未实现成功，可以在上传过程中刷新页面来模拟上传的中断，体验“断点续传”、</p>\n<p>有可能还有其他一些小bug，但基本逻辑大致如此。</p>\n<ol>\n<li>前端实现</li>\n</ol>\n<p>首先选择文件，列出选中的文件列表信息，然后可以自定义的做上传操作</p>\n<p>（1）所以先设置好页面DOM结构</p>\n<p>这里一并将CSS样式扔出来</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\">body &#123;</div><div class=\"line\"></div><div class=\"line\">    font-family: Arial;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">form &#123;</div><div class=\"line\"></div><div class=\"line\">    margin: 50px auto;</div><div class=\"line\"></div><div class=\"line\">    width: 600px;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">input[type=&quot;button&quot;] &#123;</div><div class=\"line\"></div><div class=\"line\">    cursor: pointer;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">table &#123;</div><div class=\"line\"></div><div class=\"line\">    display: none;</div><div class=\"line\"></div><div class=\"line\">    margin-top: 15px;</div><div class=\"line\"></div><div class=\"line\">    border: 1px solid #ddd;</div><div class=\"line\"></div><div class=\"line\">    border-collapse: collapse;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">table th &#123;</div><div class=\"line\"></div><div class=\"line\">    color: #666;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">table td, table th &#123;</div><div class=\"line\"></div><div class=\"line\">    padding: 5px;</div><div class=\"line\"></div><div class=\"line\">    border: 1px solid #ddd;</div><div class=\"line\"></div><div class=\"line\">    text-align: center;</div><div class=\"line\"></div><div class=\"line\">    font-size: 14px;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>（2）接下来是JS的实现解析</p>\n<p>通过FileList对象我们能获取到文件的一些信息</p>\n<p>其中的size就是文件的大小，文件的分分割分片需要依赖这个</p>\n<p>这里的size是字节数，所以在界面显示文件大小时，可以这样转化</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">// 计算文件大小</div><div class=\"line\"></div><div class=\"line\">size = file.size &gt; 1024</div><div class=\"line\"></div><div class=\"line\">    ? file.size / 1024  &gt; 1024</div><div class=\"line\"></div><div class=\"line\">    ? file.size / (1024 * 1024) &gt; 1024</div><div class=\"line\"></div><div class=\"line\">    ? (file.size / (1024 * 1024 * 1024)).toFixed(2) + &apos;GB&apos;</div><div class=\"line\"></div><div class=\"line\">    : (file.size / (1024 * 1024)).toFixed(2) + &apos;MB&apos;</div><div class=\"line\"></div><div class=\"line\">    : (file.size / 1024).toFixed(2) + &apos;KB&apos;</div><div class=\"line\"></div><div class=\"line\">    : (file.size).toFixed(2) + &apos;B&apos;;</div></pre></td></tr></table></figure>\n<p>选择文件后显示文件的信息，在模版中替换一下数据</p>\n<p>// 更新文件信息列表<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">uploadItem.push(uploadItemTpl</div><div class=\"line\"></div><div class=\"line\">    .replace(/&#123;&#123;fileName&#125;&#125;/g, file.name)</div><div class=\"line\"></div><div class=\"line\">    .replace(&apos;&#123;&#123;fileType&#125;&#125;&apos;, file.type || file.name.match(/\\.\\w+$/) + &apos;文件&apos;)</div><div class=\"line\"></div><div class=\"line\">    .replace(&apos;&#123;&#123;fileSize&#125;&#125;&apos;, size)</div><div class=\"line\"></div><div class=\"line\">    .replace(&apos;&#123;&#123;progress&#125;&#125;&apos;, progress)</div><div class=\"line\"></div><div class=\"line\">    .replace(&apos;&#123;&#123;totalSize&#125;&#125;&apos;, file.size)</div><div class=\"line\"></div><div class=\"line\">    .replace(&apos;&#123;&#123;uploadVal&#125;&#125;&apos;, uploadVal)</div><div class=\"line\"></div><div class=\"line\">);</div></pre></td></tr></table></figure></p>\n<p>不过，在显示文件信息的时候，可能这个文件之前之前已经上传过了，为了断点续传，需要判断并在界面上做出提示</p>\n<p>通过查询本地看是否有相应的数据（这里的做法是当本地记录的是已经上传100%时，就直接是重新上传而不是继续上传了）</p>\n<p>// 初始通过本地记录，判断该文件是否曾经上传过<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">percent = window.localStorage.getItem(file.name + &apos;_p&apos;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">if (percent &amp;&amp; percent !== &apos;100.0&apos;) &#123;</div><div class=\"line\"></div><div class=\"line\">    progress = &apos;已上传 &apos; + percent + &apos;%&apos;;</div><div class=\"line\"></div><div class=\"line\">    uploadVal = &apos;继续上传&apos;;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>显示了文件信息列表</p>\n<p><img src=\"http://gitpage.oss-cn-hangzhou.aliyuncs.com/frontEndUpload/1.jpg\" alt=\"\"></p>\n<p>点击开始上传，可以上传相应的文件</p>\n<p><img src=\"http://gitpage.oss-cn-hangzhou.aliyuncs.com/frontEndUpload/2.jpg\" alt=\"\"></p>\n<p>上传文件的时候需要就将文件进行分片分段</p>\n<p>比如这里配置的每段1024B，总共chunks段（用来判断是否为末段），第chunk段，当前已上传的百分比percent等</p>\n<p>需要提一下的是这个暂停上传的操作，其实我还没实现出来，暂停不了无奈ing…</p>\n<p><img src=\"http://gitpage.oss-cn-hangzhou.aliyuncs.com/frontEndUpload/3.jpg\" alt=\"\"></p>\n<p><img src=\"http://gitpage.oss-cn-hangzhou.aliyuncs.com/frontEndUpload/4.jpg\" alt=\"\"></p>\n<p>接下来是分段过程</p>\n<p><img src=\"http://gitpage.oss-cn-hangzhou.aliyuncs.com/frontEndUpload/5.jpg\" alt=\"\"></p>\n<p>// 上传之前查询是否以及上传过分片<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">chunk = window.localStorage.getItem(fileName + &apos;_chunk&apos;) || 0;</div><div class=\"line\"></div><div class=\"line\">chunk = parseInt(chunk, 10);</div></pre></td></tr></table></figure></p>\n<p>文件应该支持覆盖上传，所以如果文件以及上传完了，现在再上传，应该重置数据以支持覆盖（不然后端就直接追加blob数据了）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 如果第一次上传就为末分片，即文件已经上传完成，则重新覆盖上传</div><div class=\"line\"></div><div class=\"line\">if (times === &apos;first&apos; &amp;&amp; isLastChunk === 1) &#123;</div><div class=\"line\"></div><div class=\"line\">    window.localStorage.setItem(fileName + &apos;_chunk&apos;, 0);</div><div class=\"line\"></div><div class=\"line\">    chunk = 0;</div><div class=\"line\"></div><div class=\"line\">    isLastChunk = 0;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这个times其实就是个参数，因为要在上一分段传完之后再传下一分段，所以这里的做法是在回调中继续调用这个上传操作</p>\n<p><img src=\"http://gitpage.oss-cn-hangzhou.aliyuncs.com/frontEndUpload/6.jpg\" alt=\"\"></p>\n<p>接下来就是真正的文件上传操作了，用Ajax上传，因为用到了FormData对象，所以不要忘了在$.ajax({}加上这个配置processData: false</p>\n<p>上传了一个分段，通过返回的结果判断是否上传完毕，是否继续上传</p>\n<p><img src=\"http://gitpage.oss-cn-hangzhou.aliyuncs.com/frontEndUpload/7.jpg\" alt=\"\"></p>\n<p>继续下一分段的上传时，就进行了递归操作，按顺序地上传下一分段</p>\n<p>截个图..</p>\n<p><img src=\"http://gitpage.oss-cn-hangzhou.aliyuncs.com/frontEndUpload/8.jpg\" alt=\"\"></p>\n<p>这是完整的JS逻辑，代码有点儿注释了应该不难看懂吧哈哈</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div><div class=\"line\">271</div><div class=\"line\">272</div><div class=\"line\">273</div><div class=\"line\">274</div><div class=\"line\">275</div><div class=\"line\">276</div><div class=\"line\">277</div><div class=\"line\">278</div><div class=\"line\">279</div><div class=\"line\">280</div><div class=\"line\">281</div><div class=\"line\">282</div><div class=\"line\">283</div><div class=\"line\">284</div><div class=\"line\">285</div><div class=\"line\">286</div><div class=\"line\">287</div><div class=\"line\">288</div><div class=\"line\">289</div><div class=\"line\">290</div><div class=\"line\">291</div><div class=\"line\">292</div><div class=\"line\">293</div><div class=\"line\">294</div><div class=\"line\">295</div><div class=\"line\">296</div><div class=\"line\">297</div><div class=\"line\">298</div><div class=\"line\">299</div><div class=\"line\">300</div><div class=\"line\">301</div><div class=\"line\">302</div><div class=\"line\">303</div><div class=\"line\">304</div><div class=\"line\">305</div><div class=\"line\">306</div><div class=\"line\">307</div><div class=\"line\">308</div><div class=\"line\">309</div><div class=\"line\">310</div><div class=\"line\">311</div><div class=\"line\">312</div><div class=\"line\">313</div><div class=\"line\">314</div><div class=\"line\">315</div><div class=\"line\">316</div><div class=\"line\">317</div><div class=\"line\">318</div><div class=\"line\">319</div><div class=\"line\">320</div><div class=\"line\">321</div><div class=\"line\">322</div><div class=\"line\">323</div><div class=\"line\">324</div><div class=\"line\">325</div><div class=\"line\">326</div><div class=\"line\">327</div><div class=\"line\">328</div><div class=\"line\">329</div><div class=\"line\">330</div><div class=\"line\">331</div><div class=\"line\">332</div><div class=\"line\">333</div><div class=\"line\">334</div><div class=\"line\">335</div><div class=\"line\">336</div><div class=\"line\">337</div><div class=\"line\">338</div><div class=\"line\">339</div><div class=\"line\">340</div><div class=\"line\">341</div><div class=\"line\">342</div><div class=\"line\">343</div><div class=\"line\">344</div><div class=\"line\">345</div><div class=\"line\">346</div><div class=\"line\">347</div><div class=\"line\">348</div><div class=\"line\">349</div><div class=\"line\">350</div><div class=\"line\">351</div><div class=\"line\">352</div><div class=\"line\">353</div><div class=\"line\">354</div><div class=\"line\">355</div><div class=\"line\">356</div><div class=\"line\">357</div><div class=\"line\">358</div><div class=\"line\">359</div><div class=\"line\">360</div><div class=\"line\">361</div><div class=\"line\">362</div><div class=\"line\">363</div><div class=\"line\">364</div><div class=\"line\">365</div><div class=\"line\">366</div><div class=\"line\">367</div><div class=\"line\">368</div><div class=\"line\">369</div><div class=\"line\">370</div><div class=\"line\">371</div><div class=\"line\">372</div><div class=\"line\">373</div><div class=\"line\">374</div><div class=\"line\">375</div><div class=\"line\">376</div><div class=\"line\">377</div><div class=\"line\">378</div><div class=\"line\">379</div><div class=\"line\">380</div><div class=\"line\">381</div><div class=\"line\">382</div><div class=\"line\">383</div><div class=\"line\">384</div><div class=\"line\">385</div><div class=\"line\">386</div><div class=\"line\">387</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 全部上传操作</div><div class=\"line\"></div><div class=\"line\">$(document).on(&apos;click&apos;, &apos;#upload-all-btn&apos;, function () &#123;</div><div class=\"line\"></div><div class=\"line\">    // 未选择文件</div><div class=\"line\"></div><div class=\"line\">    if (!$(&apos;#myFile&apos;).val()) &#123;</div><div class=\"line\"></div><div class=\"line\">        $(&apos;#myFile&apos;).focus();</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    // 模拟点击其他可上传的文件</div><div class=\"line\"></div><div class=\"line\">    else &#123;</div><div class=\"line\"></div><div class=\"line\">        $(&apos;#upload-list .upload-item-btn&apos;).each(function () &#123;</div><div class=\"line\"></div><div class=\"line\">            $(this).click();</div><div class=\"line\"></div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">// 选择文件-显示文件信息</div><div class=\"line\"></div><div class=\"line\">$(&apos;#myFile&apos;).change(function (e) &#123;</div><div class=\"line\"></div><div class=\"line\">    var file,</div><div class=\"line\"></div><div class=\"line\">        uploadItem = [],</div><div class=\"line\"></div><div class=\"line\">        uploadItemTpl = $(&apos;#file-upload-tpl&apos;).html(),</div><div class=\"line\"></div><div class=\"line\">        size,</div><div class=\"line\"></div><div class=\"line\">        percent,</div><div class=\"line\"></div><div class=\"line\">        progress = &apos;未上传&apos;,</div><div class=\"line\"></div><div class=\"line\">        uploadVal = &apos;开始上传&apos;;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    for (var i = 0, j = this.files.length; i &lt; j; ++i) &#123;</div><div class=\"line\"></div><div class=\"line\">        file = this.files[i];</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        percent = undefined;</div><div class=\"line\"></div><div class=\"line\">        progress = &apos;未上传&apos;;</div><div class=\"line\"></div><div class=\"line\">        uploadVal = &apos;开始上传&apos;;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        // 计算文件大小</div><div class=\"line\"></div><div class=\"line\">        size = file.size &gt; 1024 ? file.size / 1024 &gt; 1024 ? file.size / (1024 * 1024) &gt; 1024 ? (file.size /</div><div class=\"line\"></div><div class=\"line\">            (1024 * 1024 * 1024)).toFixed(2) + &apos;GB&apos; : (file.size / (1024 * 1024)).toFixed(2) + &apos;MB&apos; : (file</div><div class=\"line\"></div><div class=\"line\">            .size / 1024).toFixed(2) + &apos;KB&apos; : (file.size).toFixed(2) + &apos;B&apos;;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        // 初始通过本地记录，判断该文件是否曾经上传过</div><div class=\"line\"></div><div class=\"line\">        percent = window.localStorage.getItem(file.name + &apos;_p&apos;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        if (percent &amp;&amp; percent !== &apos;100.0&apos;) &#123;</div><div class=\"line\"></div><div class=\"line\">            progress = &apos;已上传 &apos; + percent + &apos;%&apos;;</div><div class=\"line\"></div><div class=\"line\">            uploadVal = &apos;继续上传&apos;;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        // 更新文件信息列表</div><div class=\"line\"></div><div class=\"line\">        uploadItem.push(uploadItemTpl</div><div class=\"line\"></div><div class=\"line\">            .replace(/&#123;&#123;fileName&#125;&#125;/g, file.name)</div><div class=\"line\"></div><div class=\"line\">            .replace(&apos;&#123;&#123;fileType&#125;&#125;&apos;, file.type || file.name.match(/\\.\\w+$/) + &apos;文件&apos;)</div><div class=\"line\"></div><div class=\"line\">            .replace(&apos;&#123;&#123;fileSize&#125;&#125;&apos;, size)</div><div class=\"line\"></div><div class=\"line\">            .replace(&apos;&#123;&#123;progress&#125;&#125;&apos;, progress)</div><div class=\"line\"></div><div class=\"line\">            .replace(&apos;&#123;&#123;totalSize&#125;&#125;&apos;, file.size)</div><div class=\"line\"></div><div class=\"line\">            .replace(&apos;&#123;&#123;uploadVal&#125;&#125;&apos;, uploadVal));</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    $(&apos;#upload-list&apos;).children(&apos;tbody&apos;).html(uploadItem.join(&apos;&apos;))</div><div class=\"line\"></div><div class=\"line\">        .end().show();</div><div class=\"line\"></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"></div><div class=\"line\">* 上传文件时，提取相应匹配的文件项</div><div class=\"line\"></div><div class=\"line\">* @param  &#123;String&#125; fileName   需要匹配的文件名</div><div class=\"line\"></div><div class=\"line\">* @return &#123;FileList&#125;          匹配的文件项目</div><div class=\"line\"></div><div class=\"line\">*/</div><div class=\"line\"></div><div class=\"line\">function findTheFile(fileName) &#123;</div><div class=\"line\"></div><div class=\"line\">    var files = $(&apos;#myFile&apos;)[0].files,</div><div class=\"line\"></div><div class=\"line\">        theFile;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    for (var i = 0, j = files.length; i &lt; j; ++i) &#123;</div><div class=\"line\"></div><div class=\"line\">        if (files[i].name === fileName) &#123;</div><div class=\"line\"></div><div class=\"line\">            theFile = files[i];</div><div class=\"line\"></div><div class=\"line\">            break;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    return theFile ? theFile : [];</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">// 上传文件</div><div class=\"line\"></div><div class=\"line\">$(document).on(&apos;click&apos;, &apos;.upload-item-btn&apos;, function () &#123;</div><div class=\"line\"></div><div class=\"line\">    var $this = $(this),</div><div class=\"line\"></div><div class=\"line\">        state = $this.attr(&apos;data-state&apos;),</div><div class=\"line\"></div><div class=\"line\">        msg = &#123;</div><div class=\"line\"></div><div class=\"line\">            done: &apos;上传成功&apos;,</div><div class=\"line\"></div><div class=\"line\">            failed: &apos;上传失败&apos;,</div><div class=\"line\"></div><div class=\"line\">            in : &apos;上传中...&apos;,</div><div class=\"line\"></div><div class=\"line\">            paused: &apos;暂停中...&apos;</div><div class=\"line\"></div><div class=\"line\">        &#125;,</div><div class=\"line\"></div><div class=\"line\">        fileName = $this.attr(&apos;data-name&apos;),</div><div class=\"line\"></div><div class=\"line\">        $progress = $this.closest(&apos;tr&apos;).find(&apos;.upload-progress&apos;),</div><div class=\"line\"></div><div class=\"line\">        eachSize = 1024,</div><div class=\"line\"></div><div class=\"line\">        totalSize = $this.attr(&apos;data-size&apos;),</div><div class=\"line\"></div><div class=\"line\">        chunks = Math.ceil(totalSize / eachSize),</div><div class=\"line\"></div><div class=\"line\">        percent,</div><div class=\"line\"></div><div class=\"line\">        chunk,</div><div class=\"line\"></div><div class=\"line\">        // 暂停上传操作</div><div class=\"line\"></div><div class=\"line\">        isPaused = 0;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    // 进行暂停上传操作</div><div class=\"line\"></div><div class=\"line\">    // 未实现，这里通过动态的设置isPaused值并不能阻止下方ajax请求的调用</div><div class=\"line\"></div><div class=\"line\">    if (state === &apos;uploading&apos;) &#123;</div><div class=\"line\"></div><div class=\"line\">        $this.val(&apos;继续上传&apos;).attr(&apos;data-state&apos;, &apos;paused&apos;);</div><div class=\"line\"></div><div class=\"line\">        $progress.text(msg[&apos;paused&apos;] + percent + &apos;%&apos;);</div><div class=\"line\"></div><div class=\"line\">        isPaused = 1;</div><div class=\"line\"></div><div class=\"line\">        console.log(&apos;暂停：&apos;, isPaused);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    // 进行开始/继续上传操作</div><div class=\"line\"></div><div class=\"line\">    else if (state === &apos;paused&apos; || state === &apos;default&apos;) &#123;</div><div class=\"line\"></div><div class=\"line\">        $this.val(&apos;暂停上传&apos;).attr(&apos;data-state&apos;, &apos;uploading&apos;);</div><div class=\"line\"></div><div class=\"line\">        isPaused = 0;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    // 第一次点击上传</div><div class=\"line\"></div><div class=\"line\">    startUpload(&apos;first&apos;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    // 上传操作 times: 第几次</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    function startUpload(times) &#123;</div><div class=\"line\"></div><div class=\"line\">        // 上传之前查询是否以及上传过分片</div><div class=\"line\"></div><div class=\"line\">        chunk = window.localStorage.getItem(fileName + &apos;_chunk&apos;) || 0;</div><div class=\"line\"></div><div class=\"line\">        chunk = parseInt(chunk, 10);</div><div class=\"line\"></div><div class=\"line\">        // 判断是否为末分片</div><div class=\"line\"></div><div class=\"line\">        var isLastChunk = (chunk == (chunks - 1) ? 1 : 0);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        // 如果第一次上传就为末分片，即文件已经上传完成，则重新覆盖上传</div><div class=\"line\"></div><div class=\"line\">        if (times === &apos;first&apos; &amp;&amp; isLastChunk === 1) &#123;</div><div class=\"line\"></div><div class=\"line\">            window.localStorage.setItem(fileName + &apos;_chunk&apos;, 0);</div><div class=\"line\"></div><div class=\"line\">            chunk = 0;</div><div class=\"line\"></div><div class=\"line\">            isLastChunk = 0;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        // 设置分片的开始结尾</div><div class=\"line\"></div><div class=\"line\">        var blobFrom = chunk * eachSize, // 分段开始</div><div class=\"line\"></div><div class=\"line\">            blobTo = (chunk + 1) * eachSize &gt; totalSize ? totalSize : (chunk + 1) * eachSize, // 分段结尾</div><div class=\"line\"></div><div class=\"line\">            percent = (100 * blobTo / totalSize).toFixed(1), // 已上传的百分比</div><div class=\"line\"></div><div class=\"line\">            timeout = 5000, // 超时时间</div><div class=\"line\"></div><div class=\"line\">            fd = new FormData($(&apos;#myForm&apos;)[0]);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        fd.append(&apos;theFile&apos;, findTheFile(fileName).slice(blobFrom, blobTo)); // 分好段的文件</div><div class=\"line\"></div><div class=\"line\">        fd.append(&apos;fileName&apos;, fileName); // 文件名</div><div class=\"line\"></div><div class=\"line\">        fd.append(&apos;totalSize&apos;, totalSize); // 文件总大小</div><div class=\"line\"></div><div class=\"line\">        fd.append(&apos;isLastChunk&apos;, isLastChunk); // 是否为末段</div><div class=\"line\"></div><div class=\"line\">        fd.append(&apos;isFirstUpload&apos;, times === &apos;first&apos; ? 1 : 0); // 是否是第一段（第一次上传）</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        // 上传</div><div class=\"line\"></div><div class=\"line\">        $.ajax(&#123;</div><div class=\"line\"></div><div class=\"line\">            type: &apos;post&apos;,</div><div class=\"line\"></div><div class=\"line\">            url: &apos;/fileTest.php&apos;,</div><div class=\"line\"></div><div class=\"line\">            data: fd,</div><div class=\"line\"></div><div class=\"line\">            processData: false,</div><div class=\"line\"></div><div class=\"line\">            contentType: false,</div><div class=\"line\"></div><div class=\"line\">            timeout: timeout,</div><div class=\"line\"></div><div class=\"line\">            success: function (rs) &#123;</div><div class=\"line\"></div><div class=\"line\">                rs = JSON.parse(rs);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">                // 上传成功</div><div class=\"line\"></div><div class=\"line\">                if (rs.status === 200) &#123;</div><div class=\"line\"></div><div class=\"line\">                    // 记录已经上传的百分比</div><div class=\"line\"></div><div class=\"line\">                    window.localStorage.setItem(fileName + &apos;_p&apos;, percent);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">                    // 已经上传完毕</div><div class=\"line\"></div><div class=\"line\">                    if (chunk === (chunks - 1)) &#123;</div><div class=\"line\"></div><div class=\"line\">                        $progress.text(msg[&apos;done&apos;]);</div><div class=\"line\"></div><div class=\"line\">                        $this.val(&apos;已经上传&apos;).prop(&apos;disabled&apos;, true).css(&apos;cursor&apos;, &apos;not-allowed&apos;);</div><div class=\"line\"></div><div class=\"line\">                        if (!$(&apos;#upload-list&apos;).find(&apos;.upload-item-btn:not(:disabled)&apos;).length) &#123;</div><div class=\"line\"></div><div class=\"line\">                            $(&apos;#upload-all-btn&apos;).val(&apos;已经上传&apos;).prop(&apos;disabled&apos;, true).css(&apos;cursor&apos;,</div><div class=\"line\"></div><div class=\"line\">                                &apos;not-allowed&apos;);</div><div class=\"line\"></div><div class=\"line\">                        &#125;</div><div class=\"line\"></div><div class=\"line\">                    &#125; else &#123;</div><div class=\"line\"></div><div class=\"line\">                        // 记录已经上传的分片</div><div class=\"line\"></div><div class=\"line\">                        window.localStorage.setItem(fileName + &apos;_chunk&apos;, ++chunk);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">                        $progress.text(msg[&apos;in&apos;] + percent + &apos;%&apos;);</div><div class=\"line\"></div><div class=\"line\">                        // 这样设置可以暂停，但点击后动态的设置就暂停不了..</div><div class=\"line\"></div><div class=\"line\">                        // if (chunk == 10) &#123;</div><div class=\"line\"></div><div class=\"line\">                        //     isPaused = 1;</div><div class=\"line\"></div><div class=\"line\">                        // &#125;</div><div class=\"line\"></div><div class=\"line\">                        console.log(isPaused);</div><div class=\"line\"></div><div class=\"line\">                        if (!isPaused) &#123;</div><div class=\"line\"></div><div class=\"line\">                            startUpload();</div><div class=\"line\"></div><div class=\"line\">                        &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                // 上传失败，上传失败分很多种情况，具体按实际来设置</div><div class=\"line\"></div><div class=\"line\">                else if (rs.status === 500) &#123;</div><div class=\"line\"></div><div class=\"line\">                    $progress.text(msg[&apos;failed&apos;]);</div><div class=\"line\"></div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">            &#125;,</div><div class=\"line\"></div><div class=\"line\">            error: function () &#123;</div><div class=\"line\"></div><div class=\"line\">                $progress.text(msg[&apos;failed&apos;]);</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol>\n<li>后端实现</li>\n</ol>\n<p>这里的后端实现还是比较简单的，主要用依赖了 file_put_contents、file_get_contents 这两个方法</p>\n<p><img src=\"http://gitpage.oss-cn-hangzhou.aliyuncs.com/frontEndUpload/9.jpg\" alt=\"\"></p>\n<p>要注意一下，通过FormData对象上传的文件对象，在PHP中也是通过$_FILES全局对象获取的，还有为了避免上传后文件中文的乱码，用一下iconv</p>\n<p>断点续传支持文件的覆盖，所以如果已经存在完整的文件，就将其删除</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 如果第一次上传的时候，该文件已经存在，则删除文件重新上传</div><div class=\"line\"></div><div class=\"line\">if ($isFirstUpload == &apos;1&apos; &amp;&amp; file_exists(&apos;upload/&apos;.$fileName) &amp;&amp; filesize(&apos;upload/&apos;.$fileName) == $totalSize) &#123;</div><div class=\"line\"></div><div class=\"line\">    unlink(&apos;upload/&apos;.$fileName);</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>使用上述的两个方法，进行文件信息的追加，别忘了加上 FILE_APPEND 这个参数~</p>\n<p><img src=\"http://gitpage.oss-cn-hangzhou.aliyuncs.com/frontEndUpload/10.jpg\" alt=\"\"></p>\n<p>一般在传完后都需要进行文件的校验吧，所以这里简单校验了文件大小是否一致</p>\n<p>根据实际需求的不同有不同的错误处理方法，这里就先不多处理了</p>\n<p>完整的PHP部分</p>\n<p><img src=\"http://gitpage.oss-cn-hangzhou.aliyuncs.com/frontEndUpload/11.jpg\" alt=\"\"></p>"},{"title":"用webpack做vue热加载","date":"2017-04-15T04:03:09.000Z","from":"原","_content":"\n#### 介绍\n使用 webpack 有一段时间了，其中的模块热加载加快了开发的速度。它无需刷新，只要修改了文件，客户端就立刻做热加载\n<!--more-->\n`webpack.config.js`\n\n```\nconst webpack = require('webpack')\nconst glob = require('glob')\nconst fs = require('fs')\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\nconst colors = require('colors')\nconst path = require('path')\nconst TransferWebpackPlugin = require('transfer-webpack-plugin')\nconst express = require('express')\nconst WebpackDevMiddleware = require('webpack-dev-middleware')\nconst WebpackHotMiddleware = require('webpack-hot-middleware')\nconst ExtractTextPlugin = require('extract-text-webpack-plugin')\nconst argv = require('minimist')(process.argv.slice(2))\nconst bs = require('browser-sync').create();\nlet bsFlag = false\nconst gulp = require('gulp')\n/**\n * 编译配置\n * @type {Object}\n */\nconst setting = {\n    src:'./src', // 源文件目录\n    release:'./dist' // 编译后文件\n}\n\n/**\n * 获取配置\n * @return {[type]} [description]\n */\nconst getConf = function(){\n\n    let config = {\n        entry:{\n\n        },\n        output: {\n            path:path.resolve(__dirname, 'dist'),\n            publicPath: '/',\n            filename: '[name]-[hash].js',\n            chunkFilename:\"[id].chunk.js\"\n        },\n        module: {\n            loaders: [\n                {\n                        test: /\\.vue$/,\n                        exclude: /node_modules/,\n                        loader: 'vue'\n                    },\n                    {\n                        test: /\\.html$/,\n                        loader: 'html'\n                    },\n                    {\n                        test: /\\.(js|jsx)$/,\n                        loader: 'babel',\n                        query: {\n                            presets: [\n                                require.resolve('babel-preset-react'),\n                                require.resolve('babel-preset-es2015')\n                            ]\n                        },\n                        include: path.resolve(process.cwd(), './'),\n                        exclude: /node_modules/\n                    },\n                    {\n                        test: /\\.(png|jpg|gif|svg|mp3|wav|ogg|json)$/,\n                        loaders: [\n                            'url?limit=1024&hash=sha512&digest=hex&name=[name]-[hash].[ext]'\n                        ]\n                    }\n            ]\n        },\n        resolve: {\n            extensions: ['', '.js', '.json', '.scss','.hbs','.html'],\n            alias: {\n                'vue': 'vue/dist/vue.js'\n            }\n        },\n        plugins:[\n        //    new MyPlugin({options: ''}),\n        new webpack.HotModuleReplacementPlugin(),\n        new webpack.optimize.OccurenceOrderPlugin(),\n        new webpack.NoErrorsPlugin()\n\n        ],\n    }\n\n    config.entry = entries()\n    // 处理html\n    config.plugins = config.plugins.concat(htmlPlugins())\n\n    // 处理版本控制\n    if(checkEnvPro()){\n        config.plugins.push(\n            new webpack.DefinePlugin({\n                'process.env': {\n                    NODE_ENV: '\"production\"'\n                }\n            }),\n            new webpack.optimize.UglifyJsPlugin({\n                compress: {\n                    warnings: false\n                }\n            })\n        )\n    }else{\n    //    config.devtool = '#source-map'\n    }\n\n    return config\n}\n\n/**\n * 获取入口文件\n * @return {[type]} [description]\n */\nconst entries = function(){\n\n    let targetJs = path.resolve(setting.src, 'entries')\n\n    console.log(colors.red(targetJs))\n\n    let entryFiles = glob.sync(targetJs + '/*.{js,jsx}')\n\n    let map = {}\n\n    let targetFiles = glob.sync(setting.release + '/*.{js,css,html}')\n\n    entryFiles.forEach(function (entry) {\n\n        let fileName = entry.substring(entry.lastIndexOf('\\/') + 1, entry.lastIndexOf('.'))\n\n        map[fileName] = path.resolve(__dirname,entry)\n        /**\n         * 清理上个版本文件\n         * @type {[type]}\n         */\n        targetFiles.forEach(function(file){\n\n            let sourceName = file.substring(file.lastIndexOf('\\/') + 1, file.lastIndexOf('-'))\n\n        \tlet htmlName = file.substring(file.lastIndexOf('\\/') + 1, file.lastIndexOf('.'))\n\n            if(sourceName == fileName || htmlName == fileName){\n\n                !argv.hot && fs.existsSync(file) && fs.unlinkSync(file)\n\n            }\n        })\n    })\n\n    return map\n}\n\n/**\n * 处理html-views\n * @return {[type]} [description]\n */\nconst htmlPlugins = function () {\n\n    let entryHtml = glob.sync(setting.src + '/views/*.html')\n\n    let plugins = []\n\n    entryHtml.forEach(function(entry){\n\n        let filePath = path.join(__dirname, entry)\n\n        let fileName = filePath.substring(filePath.lastIndexOf('\\/') + 1, filePath.lastIndexOf('.'));\n\n        plugins.push(new HtmlWebpackPlugin({\n    \t\tchunks: [fileName],\n        \tcache:false,\n            filename: fileName + '.html',\n            inject:true,\n            hash:true,\n            template:filePath,\n            minify:checkEnvPro() ? { removeAttributeQuotes: true } : false,\n        \t// templateContent: function(templateParams, compilation){\n        \t// \tlet contentStr = fs.readFileSync(filePath).toString()\n        \t// \treturn contentStr\n        \t// }\n        }))\n    })\n\n    return plugins\n}\n\n/**\n * 检查版本，增加版本功能控制\n * @return {[type]} [description]\n */\nconst checkEnvPro = function(){\n    if (process.env.NODE_ENV === 'production') {\n        return true\n    } else {\n        return false\n    }\n}\n\n/**\n * 监听html\n * @return {[type]} [description]\n */\nconst browserSync = function(){\n    if(bsFlag){\n        return\n    }\n     bsFlag = true\n    bs.init({\n        server: {\n            baseDir: setting.release\n        },\n        files: ['./src/**'],\n        port: 8090,\n        files: [\n            {\n                match: ['./src/**'],\n                fn: function (event, file) {\n                    if (event === 'change') {\n                        webpack(getConf(),function(){\n                            bs.reload();\n                        })\n                    }\n                }\n            }\n        ]\n    });\n}\n\n\nfunction MyPlugin(options) {}\n\nMyPlugin.prototype.apply = function(compiler) {\n\n  compiler.plugin('compilation', function(compilation) {\n    //  console.log(colors.red('compilation'))\n    //  browserSync()\n  });\n\n};\n\n\n\nmodule.exports = getConf()\n\n```\n\n\n`webpack.js`\n```\nconst webpack = require('webpack')\nconst webpackDevServer = require('webpack-dev-server')\nconst webpackDevMiddleware = require('webpack-dev-middleware')\nconst webpackHotMiddleware = require('webpack-hot-middleware')\nconst colors = require('colors')\nconst bs = require('browser-sync').create();\nconst express = require('express')\nconst app = express()\nconst opn = require('opn')\nconst ExtractTextPlugin = require('extract-text-webpack-plugin')\nconst connectHistoryApiFallBack = require('connect-history-api-fallback')\nconst path = require('path')\nconst config = require(path.join(__dirname, 'webpack.config'))\nconst port = process.env.PORT || 8090\n/**\n * 设置confg，hot参数\n */\nconst setConfig = function(){\n    var extras = ['./dev-client'];\n//    var extras = ['webpack-hot-middleware/client?path=/__webpack_hmr&reload=true']\n    Object.keys(config.entry).forEach(function(name) {\n        config.entry[name] = extras.concat(config.entry[name])\n    })\n    config.plugins.push(\n        new webpack.HotModuleReplacementPlugin(),\n        new webpack.optimize.OccurenceOrderPlugin(),\n        new webpack.NoErrorsPlugin()\n    )\n    return config\n}\n\nvar compiler = webpack(setConfig())\nvar proxyMiddleware = require('http-proxy-middleware')\nvar devMiddleware = require('webpack-dev-middleware')(compiler, {\n    publicPath: config.output.publicPath,\n    stats: {\n        colors: true,\n        chunks: false\n    },\n})\n\nvar hotMiddleware = require('webpack-hot-middleware')(compiler)\ncompiler.plugin('compilation', function(compilation) {\n    compilation.plugin('html-webpack-plugin-after-emit', function(data, cb) {\n        hotMiddleware.publish({\n            action: 'reload'\n        })\n        cb()\n    })\n})\napp.use(devMiddleware)\napp.use(hotMiddleware)\napp.use(express.static(config.output.path))\n\napp.use(require('connect-history-api-fallback')())\n\n\napp.listen(port, function(err) {\n    if (err) {\n        console.log(err)\n        return\n    }\n    console.log(colors.green('服务已开启，端口:'+port))\n//    opn('http://localhost:'+port)\n})\n\n```\n\n\n`package.json`\n\n```\n{\n  \"name\": \"back\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"dev\": \"webpack-dev-server --inline --hot\",\n    \"build\": \"export NODE_ENV=production && webpack --progress --hide-modules\",\n    \"hot\": \"node webpack.js --hot\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"autoprefixer\": \"^6.7.7\",\n    \"babel-core\": \"^6.2.1\",\n    \"babel-loader\": \"^6.2.0\",\n    \"babel-plugin-transform-runtime\": \"^6.1.18\",\n    \"babel-preset-es2015\": \"^6.1.18\",\n    \"babel-preset-react\": \"^6.23.0\",\n    \"babel-preset-stage-0\": \"^6.1.18\",\n    \"babel-runtime\": \"^6.2.0\",\n    \"browser-sync\": \"^2.18.8\",\n    \"connect-history-api-fallback\": \"^1.3.0\",\n    \"css-loader\": \"^0.23.1\",\n    \"express\": \"^4.15.2\",\n    \"extract-text-webpack-plugin\": \"^2.1.0\",\n    \"file-loader\": \"^0.8.5\",\n    \"fs\": \"0.0.1-security\",\n    \"glob\": \"^7.1.1\",\n    \"gulp\": \"^3.9.1\",\n    \"html-loader\": \"^0.4.5\",\n    \"html-webpack-plugin\": \"^2.28.0\",\n    \"http-proxy-middleware\": \"^0.17.4\",\n    \"jade\": \"^1.11.0\",\n    \"minimist\": \"^1.2.0\",\n    \"node-sass\": \"^3.4.2\",\n    \"opn\": \"^4.0.2\",\n    \"postcss-loader\": \"^1.3.3\",\n    \"sass-loader\": \"^3.2.3\",\n    \"style-loader\": \"^0.13.0\",\n    \"stylus-loader\": \"^1.4.2\",\n    \"template-html-loader\": \"0.0.3\",\n    \"transfer-webpack-plugin\": \"^0.1.4\",\n    \"vue\": \"^2.1.0\",\n    \"vue-loader\": \"^10.0.0\",\n    \"vue-resource\": \"^1.0.3\",\n    \"vue-router\": \"^2.1.1\",\n    \"vue-scroll\": \"^2.0.1\",\n    \"vue-style-loader\": \"^1.0.0\",\n    \"vue-template-compiler\": \"^2.1.0\",\n    \"vuex\": \"^2.1.1\",\n    \"webpack\": \"^1.13.1\",\n    \"webpack-dev-middleware\": \"^1.8.3\",\n    \"webpack-hot-middleware\": \"^2.12.2\"\n  }\n}\n\n```\n","source":"_posts/webpack热加载.md","raw":"---\ntitle: 用webpack做vue热加载\ntags:\n  - 'webpack'\ncategories:\n  - '前端'\n  - '构建打包'\n  - 'webpack'\ndate: 2017-04-15 12:03:09\nfrom: '原'\n---\n\n#### 介绍\n使用 webpack 有一段时间了，其中的模块热加载加快了开发的速度。它无需刷新，只要修改了文件，客户端就立刻做热加载\n<!--more-->\n`webpack.config.js`\n\n```\nconst webpack = require('webpack')\nconst glob = require('glob')\nconst fs = require('fs')\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\nconst colors = require('colors')\nconst path = require('path')\nconst TransferWebpackPlugin = require('transfer-webpack-plugin')\nconst express = require('express')\nconst WebpackDevMiddleware = require('webpack-dev-middleware')\nconst WebpackHotMiddleware = require('webpack-hot-middleware')\nconst ExtractTextPlugin = require('extract-text-webpack-plugin')\nconst argv = require('minimist')(process.argv.slice(2))\nconst bs = require('browser-sync').create();\nlet bsFlag = false\nconst gulp = require('gulp')\n/**\n * 编译配置\n * @type {Object}\n */\nconst setting = {\n    src:'./src', // 源文件目录\n    release:'./dist' // 编译后文件\n}\n\n/**\n * 获取配置\n * @return {[type]} [description]\n */\nconst getConf = function(){\n\n    let config = {\n        entry:{\n\n        },\n        output: {\n            path:path.resolve(__dirname, 'dist'),\n            publicPath: '/',\n            filename: '[name]-[hash].js',\n            chunkFilename:\"[id].chunk.js\"\n        },\n        module: {\n            loaders: [\n                {\n                        test: /\\.vue$/,\n                        exclude: /node_modules/,\n                        loader: 'vue'\n                    },\n                    {\n                        test: /\\.html$/,\n                        loader: 'html'\n                    },\n                    {\n                        test: /\\.(js|jsx)$/,\n                        loader: 'babel',\n                        query: {\n                            presets: [\n                                require.resolve('babel-preset-react'),\n                                require.resolve('babel-preset-es2015')\n                            ]\n                        },\n                        include: path.resolve(process.cwd(), './'),\n                        exclude: /node_modules/\n                    },\n                    {\n                        test: /\\.(png|jpg|gif|svg|mp3|wav|ogg|json)$/,\n                        loaders: [\n                            'url?limit=1024&hash=sha512&digest=hex&name=[name]-[hash].[ext]'\n                        ]\n                    }\n            ]\n        },\n        resolve: {\n            extensions: ['', '.js', '.json', '.scss','.hbs','.html'],\n            alias: {\n                'vue': 'vue/dist/vue.js'\n            }\n        },\n        plugins:[\n        //    new MyPlugin({options: ''}),\n        new webpack.HotModuleReplacementPlugin(),\n        new webpack.optimize.OccurenceOrderPlugin(),\n        new webpack.NoErrorsPlugin()\n\n        ],\n    }\n\n    config.entry = entries()\n    // 处理html\n    config.plugins = config.plugins.concat(htmlPlugins())\n\n    // 处理版本控制\n    if(checkEnvPro()){\n        config.plugins.push(\n            new webpack.DefinePlugin({\n                'process.env': {\n                    NODE_ENV: '\"production\"'\n                }\n            }),\n            new webpack.optimize.UglifyJsPlugin({\n                compress: {\n                    warnings: false\n                }\n            })\n        )\n    }else{\n    //    config.devtool = '#source-map'\n    }\n\n    return config\n}\n\n/**\n * 获取入口文件\n * @return {[type]} [description]\n */\nconst entries = function(){\n\n    let targetJs = path.resolve(setting.src, 'entries')\n\n    console.log(colors.red(targetJs))\n\n    let entryFiles = glob.sync(targetJs + '/*.{js,jsx}')\n\n    let map = {}\n\n    let targetFiles = glob.sync(setting.release + '/*.{js,css,html}')\n\n    entryFiles.forEach(function (entry) {\n\n        let fileName = entry.substring(entry.lastIndexOf('\\/') + 1, entry.lastIndexOf('.'))\n\n        map[fileName] = path.resolve(__dirname,entry)\n        /**\n         * 清理上个版本文件\n         * @type {[type]}\n         */\n        targetFiles.forEach(function(file){\n\n            let sourceName = file.substring(file.lastIndexOf('\\/') + 1, file.lastIndexOf('-'))\n\n        \tlet htmlName = file.substring(file.lastIndexOf('\\/') + 1, file.lastIndexOf('.'))\n\n            if(sourceName == fileName || htmlName == fileName){\n\n                !argv.hot && fs.existsSync(file) && fs.unlinkSync(file)\n\n            }\n        })\n    })\n\n    return map\n}\n\n/**\n * 处理html-views\n * @return {[type]} [description]\n */\nconst htmlPlugins = function () {\n\n    let entryHtml = glob.sync(setting.src + '/views/*.html')\n\n    let plugins = []\n\n    entryHtml.forEach(function(entry){\n\n        let filePath = path.join(__dirname, entry)\n\n        let fileName = filePath.substring(filePath.lastIndexOf('\\/') + 1, filePath.lastIndexOf('.'));\n\n        plugins.push(new HtmlWebpackPlugin({\n    \t\tchunks: [fileName],\n        \tcache:false,\n            filename: fileName + '.html',\n            inject:true,\n            hash:true,\n            template:filePath,\n            minify:checkEnvPro() ? { removeAttributeQuotes: true } : false,\n        \t// templateContent: function(templateParams, compilation){\n        \t// \tlet contentStr = fs.readFileSync(filePath).toString()\n        \t// \treturn contentStr\n        \t// }\n        }))\n    })\n\n    return plugins\n}\n\n/**\n * 检查版本，增加版本功能控制\n * @return {[type]} [description]\n */\nconst checkEnvPro = function(){\n    if (process.env.NODE_ENV === 'production') {\n        return true\n    } else {\n        return false\n    }\n}\n\n/**\n * 监听html\n * @return {[type]} [description]\n */\nconst browserSync = function(){\n    if(bsFlag){\n        return\n    }\n     bsFlag = true\n    bs.init({\n        server: {\n            baseDir: setting.release\n        },\n        files: ['./src/**'],\n        port: 8090,\n        files: [\n            {\n                match: ['./src/**'],\n                fn: function (event, file) {\n                    if (event === 'change') {\n                        webpack(getConf(),function(){\n                            bs.reload();\n                        })\n                    }\n                }\n            }\n        ]\n    });\n}\n\n\nfunction MyPlugin(options) {}\n\nMyPlugin.prototype.apply = function(compiler) {\n\n  compiler.plugin('compilation', function(compilation) {\n    //  console.log(colors.red('compilation'))\n    //  browserSync()\n  });\n\n};\n\n\n\nmodule.exports = getConf()\n\n```\n\n\n`webpack.js`\n```\nconst webpack = require('webpack')\nconst webpackDevServer = require('webpack-dev-server')\nconst webpackDevMiddleware = require('webpack-dev-middleware')\nconst webpackHotMiddleware = require('webpack-hot-middleware')\nconst colors = require('colors')\nconst bs = require('browser-sync').create();\nconst express = require('express')\nconst app = express()\nconst opn = require('opn')\nconst ExtractTextPlugin = require('extract-text-webpack-plugin')\nconst connectHistoryApiFallBack = require('connect-history-api-fallback')\nconst path = require('path')\nconst config = require(path.join(__dirname, 'webpack.config'))\nconst port = process.env.PORT || 8090\n/**\n * 设置confg，hot参数\n */\nconst setConfig = function(){\n    var extras = ['./dev-client'];\n//    var extras = ['webpack-hot-middleware/client?path=/__webpack_hmr&reload=true']\n    Object.keys(config.entry).forEach(function(name) {\n        config.entry[name] = extras.concat(config.entry[name])\n    })\n    config.plugins.push(\n        new webpack.HotModuleReplacementPlugin(),\n        new webpack.optimize.OccurenceOrderPlugin(),\n        new webpack.NoErrorsPlugin()\n    )\n    return config\n}\n\nvar compiler = webpack(setConfig())\nvar proxyMiddleware = require('http-proxy-middleware')\nvar devMiddleware = require('webpack-dev-middleware')(compiler, {\n    publicPath: config.output.publicPath,\n    stats: {\n        colors: true,\n        chunks: false\n    },\n})\n\nvar hotMiddleware = require('webpack-hot-middleware')(compiler)\ncompiler.plugin('compilation', function(compilation) {\n    compilation.plugin('html-webpack-plugin-after-emit', function(data, cb) {\n        hotMiddleware.publish({\n            action: 'reload'\n        })\n        cb()\n    })\n})\napp.use(devMiddleware)\napp.use(hotMiddleware)\napp.use(express.static(config.output.path))\n\napp.use(require('connect-history-api-fallback')())\n\n\napp.listen(port, function(err) {\n    if (err) {\n        console.log(err)\n        return\n    }\n    console.log(colors.green('服务已开启，端口:'+port))\n//    opn('http://localhost:'+port)\n})\n\n```\n\n\n`package.json`\n\n```\n{\n  \"name\": \"back\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"dev\": \"webpack-dev-server --inline --hot\",\n    \"build\": \"export NODE_ENV=production && webpack --progress --hide-modules\",\n    \"hot\": \"node webpack.js --hot\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"autoprefixer\": \"^6.7.7\",\n    \"babel-core\": \"^6.2.1\",\n    \"babel-loader\": \"^6.2.0\",\n    \"babel-plugin-transform-runtime\": \"^6.1.18\",\n    \"babel-preset-es2015\": \"^6.1.18\",\n    \"babel-preset-react\": \"^6.23.0\",\n    \"babel-preset-stage-0\": \"^6.1.18\",\n    \"babel-runtime\": \"^6.2.0\",\n    \"browser-sync\": \"^2.18.8\",\n    \"connect-history-api-fallback\": \"^1.3.0\",\n    \"css-loader\": \"^0.23.1\",\n    \"express\": \"^4.15.2\",\n    \"extract-text-webpack-plugin\": \"^2.1.0\",\n    \"file-loader\": \"^0.8.5\",\n    \"fs\": \"0.0.1-security\",\n    \"glob\": \"^7.1.1\",\n    \"gulp\": \"^3.9.1\",\n    \"html-loader\": \"^0.4.5\",\n    \"html-webpack-plugin\": \"^2.28.0\",\n    \"http-proxy-middleware\": \"^0.17.4\",\n    \"jade\": \"^1.11.0\",\n    \"minimist\": \"^1.2.0\",\n    \"node-sass\": \"^3.4.2\",\n    \"opn\": \"^4.0.2\",\n    \"postcss-loader\": \"^1.3.3\",\n    \"sass-loader\": \"^3.2.3\",\n    \"style-loader\": \"^0.13.0\",\n    \"stylus-loader\": \"^1.4.2\",\n    \"template-html-loader\": \"0.0.3\",\n    \"transfer-webpack-plugin\": \"^0.1.4\",\n    \"vue\": \"^2.1.0\",\n    \"vue-loader\": \"^10.0.0\",\n    \"vue-resource\": \"^1.0.3\",\n    \"vue-router\": \"^2.1.1\",\n    \"vue-scroll\": \"^2.0.1\",\n    \"vue-style-loader\": \"^1.0.0\",\n    \"vue-template-compiler\": \"^2.1.0\",\n    \"vuex\": \"^2.1.1\",\n    \"webpack\": \"^1.13.1\",\n    \"webpack-dev-middleware\": \"^1.8.3\",\n    \"webpack-hot-middleware\": \"^2.12.2\"\n  }\n}\n\n```\n","slug":"webpack热加载","published":1,"updated":"2017-07-27T02:11:12.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5naxw4u0014fcxepaanjsfy","content":"<h4 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h4><p>使用 webpack 有一段时间了，其中的模块热加载加快了开发的速度。它无需刷新，只要修改了文件，客户端就立刻做热加载<br><a id=\"more\"></a><br><code>webpack.config.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div></pre></td><td class=\"code\"><pre><div class=\"line\">const webpack = require(&apos;webpack&apos;)</div><div class=\"line\">const glob = require(&apos;glob&apos;)</div><div class=\"line\">const fs = require(&apos;fs&apos;)</div><div class=\"line\">const HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;)</div><div class=\"line\">const colors = require(&apos;colors&apos;)</div><div class=\"line\">const path = require(&apos;path&apos;)</div><div class=\"line\">const TransferWebpackPlugin = require(&apos;transfer-webpack-plugin&apos;)</div><div class=\"line\">const express = require(&apos;express&apos;)</div><div class=\"line\">const WebpackDevMiddleware = require(&apos;webpack-dev-middleware&apos;)</div><div class=\"line\">const WebpackHotMiddleware = require(&apos;webpack-hot-middleware&apos;)</div><div class=\"line\">const ExtractTextPlugin = require(&apos;extract-text-webpack-plugin&apos;)</div><div class=\"line\">const argv = require(&apos;minimist&apos;)(process.argv.slice(2))</div><div class=\"line\">const bs = require(&apos;browser-sync&apos;).create();</div><div class=\"line\">let bsFlag = false</div><div class=\"line\">const gulp = require(&apos;gulp&apos;)</div><div class=\"line\">/**</div><div class=\"line\"> * 编译配置</div><div class=\"line\"> * @type &#123;Object&#125;</div><div class=\"line\"> */</div><div class=\"line\">const setting = &#123;</div><div class=\"line\">    src:&apos;./src&apos;, // 源文件目录</div><div class=\"line\">    release:&apos;./dist&apos; // 编译后文件</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 获取配置</div><div class=\"line\"> * @return &#123;[type]&#125; [description]</div><div class=\"line\"> */</div><div class=\"line\">const getConf = function()&#123;</div><div class=\"line\"></div><div class=\"line\">    let config = &#123;</div><div class=\"line\">        entry:&#123;</div><div class=\"line\"></div><div class=\"line\">        &#125;,</div><div class=\"line\">        output: &#123;</div><div class=\"line\">            path:path.resolve(__dirname, &apos;dist&apos;),</div><div class=\"line\">            publicPath: &apos;/&apos;,</div><div class=\"line\">            filename: &apos;[name]-[hash].js&apos;,</div><div class=\"line\">            chunkFilename:&quot;[id].chunk.js&quot;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        module: &#123;</div><div class=\"line\">            loaders: [</div><div class=\"line\">                &#123;</div><div class=\"line\">                        test: /\\.vue$/,</div><div class=\"line\">                        exclude: /node_modules/,</div><div class=\"line\">                        loader: &apos;vue&apos;</div><div class=\"line\">                    &#125;,</div><div class=\"line\">                    &#123;</div><div class=\"line\">                        test: /\\.html$/,</div><div class=\"line\">                        loader: &apos;html&apos;</div><div class=\"line\">                    &#125;,</div><div class=\"line\">                    &#123;</div><div class=\"line\">                        test: /\\.(js|jsx)$/,</div><div class=\"line\">                        loader: &apos;babel&apos;,</div><div class=\"line\">                        query: &#123;</div><div class=\"line\">                            presets: [</div><div class=\"line\">                                require.resolve(&apos;babel-preset-react&apos;),</div><div class=\"line\">                                require.resolve(&apos;babel-preset-es2015&apos;)</div><div class=\"line\">                            ]</div><div class=\"line\">                        &#125;,</div><div class=\"line\">                        include: path.resolve(process.cwd(), &apos;./&apos;),</div><div class=\"line\">                        exclude: /node_modules/</div><div class=\"line\">                    &#125;,</div><div class=\"line\">                    &#123;</div><div class=\"line\">                        test: /\\.(png|jpg|gif|svg|mp3|wav|ogg|json)$/,</div><div class=\"line\">                        loaders: [</div><div class=\"line\">                            &apos;url?limit=1024&amp;hash=sha512&amp;digest=hex&amp;name=[name]-[hash].[ext]&apos;</div><div class=\"line\">                        ]</div><div class=\"line\">                    &#125;</div><div class=\"line\">            ]</div><div class=\"line\">        &#125;,</div><div class=\"line\">        resolve: &#123;</div><div class=\"line\">            extensions: [&apos;&apos;, &apos;.js&apos;, &apos;.json&apos;, &apos;.scss&apos;,&apos;.hbs&apos;,&apos;.html&apos;],</div><div class=\"line\">            alias: &#123;</div><div class=\"line\">                &apos;vue&apos;: &apos;vue/dist/vue.js&apos;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        plugins:[</div><div class=\"line\">        //    new MyPlugin(&#123;options: &apos;&apos;&#125;),</div><div class=\"line\">        new webpack.HotModuleReplacementPlugin(),</div><div class=\"line\">        new webpack.optimize.OccurenceOrderPlugin(),</div><div class=\"line\">        new webpack.NoErrorsPlugin()</div><div class=\"line\"></div><div class=\"line\">        ],</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    config.entry = entries()</div><div class=\"line\">    // 处理html</div><div class=\"line\">    config.plugins = config.plugins.concat(htmlPlugins())</div><div class=\"line\"></div><div class=\"line\">    // 处理版本控制</div><div class=\"line\">    if(checkEnvPro())&#123;</div><div class=\"line\">        config.plugins.push(</div><div class=\"line\">            new webpack.DefinePlugin(&#123;</div><div class=\"line\">                &apos;process.env&apos;: &#123;</div><div class=\"line\">                    NODE_ENV: &apos;&quot;production&quot;&apos;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;),</div><div class=\"line\">            new webpack.optimize.UglifyJsPlugin(&#123;</div><div class=\"line\">                compress: &#123;</div><div class=\"line\">                    warnings: false</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;)</div><div class=\"line\">        )</div><div class=\"line\">    &#125;else&#123;</div><div class=\"line\">    //    config.devtool = &apos;#source-map&apos;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    return config</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 获取入口文件</div><div class=\"line\"> * @return &#123;[type]&#125; [description]</div><div class=\"line\"> */</div><div class=\"line\">const entries = function()&#123;</div><div class=\"line\"></div><div class=\"line\">    let targetJs = path.resolve(setting.src, &apos;entries&apos;)</div><div class=\"line\"></div><div class=\"line\">    console.log(colors.red(targetJs))</div><div class=\"line\"></div><div class=\"line\">    let entryFiles = glob.sync(targetJs + &apos;/*.&#123;js,jsx&#125;&apos;)</div><div class=\"line\"></div><div class=\"line\">    let map = &#123;&#125;</div><div class=\"line\"></div><div class=\"line\">    let targetFiles = glob.sync(setting.release + &apos;/*.&#123;js,css,html&#125;&apos;)</div><div class=\"line\"></div><div class=\"line\">    entryFiles.forEach(function (entry) &#123;</div><div class=\"line\"></div><div class=\"line\">        let fileName = entry.substring(entry.lastIndexOf(&apos;\\/&apos;) + 1, entry.lastIndexOf(&apos;.&apos;))</div><div class=\"line\"></div><div class=\"line\">        map[fileName] = path.resolve(__dirname,entry)</div><div class=\"line\">        /**</div><div class=\"line\">         * 清理上个版本文件</div><div class=\"line\">         * @type &#123;[type]&#125;</div><div class=\"line\">         */</div><div class=\"line\">        targetFiles.forEach(function(file)&#123;</div><div class=\"line\"></div><div class=\"line\">            let sourceName = file.substring(file.lastIndexOf(&apos;\\/&apos;) + 1, file.lastIndexOf(&apos;-&apos;))</div><div class=\"line\"></div><div class=\"line\">        \tlet htmlName = file.substring(file.lastIndexOf(&apos;\\/&apos;) + 1, file.lastIndexOf(&apos;.&apos;))</div><div class=\"line\"></div><div class=\"line\">            if(sourceName == fileName || htmlName == fileName)&#123;</div><div class=\"line\"></div><div class=\"line\">                !argv.hot &amp;&amp; fs.existsSync(file) &amp;&amp; fs.unlinkSync(file)</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;)</div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">    return map</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 处理html-views</div><div class=\"line\"> * @return &#123;[type]&#125; [description]</div><div class=\"line\"> */</div><div class=\"line\">const htmlPlugins = function () &#123;</div><div class=\"line\"></div><div class=\"line\">    let entryHtml = glob.sync(setting.src + &apos;/views/*.html&apos;)</div><div class=\"line\"></div><div class=\"line\">    let plugins = []</div><div class=\"line\"></div><div class=\"line\">    entryHtml.forEach(function(entry)&#123;</div><div class=\"line\"></div><div class=\"line\">        let filePath = path.join(__dirname, entry)</div><div class=\"line\"></div><div class=\"line\">        let fileName = filePath.substring(filePath.lastIndexOf(&apos;\\/&apos;) + 1, filePath.lastIndexOf(&apos;.&apos;));</div><div class=\"line\"></div><div class=\"line\">        plugins.push(new HtmlWebpackPlugin(&#123;</div><div class=\"line\">    \t\tchunks: [fileName],</div><div class=\"line\">        \tcache:false,</div><div class=\"line\">            filename: fileName + &apos;.html&apos;,</div><div class=\"line\">            inject:true,</div><div class=\"line\">            hash:true,</div><div class=\"line\">            template:filePath,</div><div class=\"line\">            minify:checkEnvPro() ? &#123; removeAttributeQuotes: true &#125; : false,</div><div class=\"line\">        \t// templateContent: function(templateParams, compilation)&#123;</div><div class=\"line\">        \t// \tlet contentStr = fs.readFileSync(filePath).toString()</div><div class=\"line\">        \t// \treturn contentStr</div><div class=\"line\">        \t// &#125;</div><div class=\"line\">        &#125;))</div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">    return plugins</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 检查版本，增加版本功能控制</div><div class=\"line\"> * @return &#123;[type]&#125; [description]</div><div class=\"line\"> */</div><div class=\"line\">const checkEnvPro = function()&#123;</div><div class=\"line\">    if (process.env.NODE_ENV === &apos;production&apos;) &#123;</div><div class=\"line\">        return true</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">        return false</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 监听html</div><div class=\"line\"> * @return &#123;[type]&#125; [description]</div><div class=\"line\"> */</div><div class=\"line\">const browserSync = function()&#123;</div><div class=\"line\">    if(bsFlag)&#123;</div><div class=\"line\">        return</div><div class=\"line\">    &#125;</div><div class=\"line\">     bsFlag = true</div><div class=\"line\">    bs.init(&#123;</div><div class=\"line\">        server: &#123;</div><div class=\"line\">            baseDir: setting.release</div><div class=\"line\">        &#125;,</div><div class=\"line\">        files: [&apos;./src/**&apos;],</div><div class=\"line\">        port: 8090,</div><div class=\"line\">        files: [</div><div class=\"line\">            &#123;</div><div class=\"line\">                match: [&apos;./src/**&apos;],</div><div class=\"line\">                fn: function (event, file) &#123;</div><div class=\"line\">                    if (event === &apos;change&apos;) &#123;</div><div class=\"line\">                        webpack(getConf(),function()&#123;</div><div class=\"line\">                            bs.reload();</div><div class=\"line\">                        &#125;)</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        ]</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">function MyPlugin(options) &#123;&#125;</div><div class=\"line\"></div><div class=\"line\">MyPlugin.prototype.apply = function(compiler) &#123;</div><div class=\"line\"></div><div class=\"line\">  compiler.plugin(&apos;compilation&apos;, function(compilation) &#123;</div><div class=\"line\">    //  console.log(colors.red(&apos;compilation&apos;))</div><div class=\"line\">    //  browserSync()</div><div class=\"line\">  &#125;);</div><div class=\"line\"></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">module.exports = getConf()</div></pre></td></tr></table></figure>\n<p><code>webpack.js</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div></pre></td><td class=\"code\"><pre><div class=\"line\">const webpack = require(&apos;webpack&apos;)</div><div class=\"line\">const webpackDevServer = require(&apos;webpack-dev-server&apos;)</div><div class=\"line\">const webpackDevMiddleware = require(&apos;webpack-dev-middleware&apos;)</div><div class=\"line\">const webpackHotMiddleware = require(&apos;webpack-hot-middleware&apos;)</div><div class=\"line\">const colors = require(&apos;colors&apos;)</div><div class=\"line\">const bs = require(&apos;browser-sync&apos;).create();</div><div class=\"line\">const express = require(&apos;express&apos;)</div><div class=\"line\">const app = express()</div><div class=\"line\">const opn = require(&apos;opn&apos;)</div><div class=\"line\">const ExtractTextPlugin = require(&apos;extract-text-webpack-plugin&apos;)</div><div class=\"line\">const connectHistoryApiFallBack = require(&apos;connect-history-api-fallback&apos;)</div><div class=\"line\">const path = require(&apos;path&apos;)</div><div class=\"line\">const config = require(path.join(__dirname, &apos;webpack.config&apos;))</div><div class=\"line\">const port = process.env.PORT || 8090</div><div class=\"line\">/**</div><div class=\"line\"> * 设置confg，hot参数</div><div class=\"line\"> */</div><div class=\"line\">const setConfig = function()&#123;</div><div class=\"line\">    var extras = [&apos;./dev-client&apos;];</div><div class=\"line\">//    var extras = [&apos;webpack-hot-middleware/client?path=/__webpack_hmr&amp;reload=true&apos;]</div><div class=\"line\">    Object.keys(config.entry).forEach(function(name) &#123;</div><div class=\"line\">        config.entry[name] = extras.concat(config.entry[name])</div><div class=\"line\">    &#125;)</div><div class=\"line\">    config.plugins.push(</div><div class=\"line\">        new webpack.HotModuleReplacementPlugin(),</div><div class=\"line\">        new webpack.optimize.OccurenceOrderPlugin(),</div><div class=\"line\">        new webpack.NoErrorsPlugin()</div><div class=\"line\">    )</div><div class=\"line\">    return config</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var compiler = webpack(setConfig())</div><div class=\"line\">var proxyMiddleware = require(&apos;http-proxy-middleware&apos;)</div><div class=\"line\">var devMiddleware = require(&apos;webpack-dev-middleware&apos;)(compiler, &#123;</div><div class=\"line\">    publicPath: config.output.publicPath,</div><div class=\"line\">    stats: &#123;</div><div class=\"line\">        colors: true,</div><div class=\"line\">        chunks: false</div><div class=\"line\">    &#125;,</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">var hotMiddleware = require(&apos;webpack-hot-middleware&apos;)(compiler)</div><div class=\"line\">compiler.plugin(&apos;compilation&apos;, function(compilation) &#123;</div><div class=\"line\">    compilation.plugin(&apos;html-webpack-plugin-after-emit&apos;, function(data, cb) &#123;</div><div class=\"line\">        hotMiddleware.publish(&#123;</div><div class=\"line\">            action: &apos;reload&apos;</div><div class=\"line\">        &#125;)</div><div class=\"line\">        cb()</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;)</div><div class=\"line\">app.use(devMiddleware)</div><div class=\"line\">app.use(hotMiddleware)</div><div class=\"line\">app.use(express.static(config.output.path))</div><div class=\"line\"></div><div class=\"line\">app.use(require(&apos;connect-history-api-fallback&apos;)())</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">app.listen(port, function(err) &#123;</div><div class=\"line\">    if (err) &#123;</div><div class=\"line\">        console.log(err)</div><div class=\"line\">        return</div><div class=\"line\">    &#125;</div><div class=\"line\">    console.log(colors.green(&apos;服务已开启，端口:&apos;+port))</div><div class=\"line\">//    opn(&apos;http://localhost:&apos;+port)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p><code>package.json</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  &quot;name&quot;: &quot;back&quot;,</div><div class=\"line\">  &quot;version&quot;: &quot;1.0.0&quot;,</div><div class=\"line\">  &quot;description&quot;: &quot;&quot;,</div><div class=\"line\">  &quot;main&quot;: &quot;index.js&quot;,</div><div class=\"line\">  &quot;scripts&quot;: &#123;</div><div class=\"line\">    &quot;dev&quot;: &quot;webpack-dev-server --inline --hot&quot;,</div><div class=\"line\">    &quot;build&quot;: &quot;export NODE_ENV=production &amp;&amp; webpack --progress --hide-modules&quot;,</div><div class=\"line\">    &quot;hot&quot;: &quot;node webpack.js --hot&quot;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  &quot;author&quot;: &quot;&quot;,</div><div class=\"line\">  &quot;license&quot;: &quot;ISC&quot;,</div><div class=\"line\">  &quot;dependencies&quot;: &#123;</div><div class=\"line\">    &quot;autoprefixer&quot;: &quot;^6.7.7&quot;,</div><div class=\"line\">    &quot;babel-core&quot;: &quot;^6.2.1&quot;,</div><div class=\"line\">    &quot;babel-loader&quot;: &quot;^6.2.0&quot;,</div><div class=\"line\">    &quot;babel-plugin-transform-runtime&quot;: &quot;^6.1.18&quot;,</div><div class=\"line\">    &quot;babel-preset-es2015&quot;: &quot;^6.1.18&quot;,</div><div class=\"line\">    &quot;babel-preset-react&quot;: &quot;^6.23.0&quot;,</div><div class=\"line\">    &quot;babel-preset-stage-0&quot;: &quot;^6.1.18&quot;,</div><div class=\"line\">    &quot;babel-runtime&quot;: &quot;^6.2.0&quot;,</div><div class=\"line\">    &quot;browser-sync&quot;: &quot;^2.18.8&quot;,</div><div class=\"line\">    &quot;connect-history-api-fallback&quot;: &quot;^1.3.0&quot;,</div><div class=\"line\">    &quot;css-loader&quot;: &quot;^0.23.1&quot;,</div><div class=\"line\">    &quot;express&quot;: &quot;^4.15.2&quot;,</div><div class=\"line\">    &quot;extract-text-webpack-plugin&quot;: &quot;^2.1.0&quot;,</div><div class=\"line\">    &quot;file-loader&quot;: &quot;^0.8.5&quot;,</div><div class=\"line\">    &quot;fs&quot;: &quot;0.0.1-security&quot;,</div><div class=\"line\">    &quot;glob&quot;: &quot;^7.1.1&quot;,</div><div class=\"line\">    &quot;gulp&quot;: &quot;^3.9.1&quot;,</div><div class=\"line\">    &quot;html-loader&quot;: &quot;^0.4.5&quot;,</div><div class=\"line\">    &quot;html-webpack-plugin&quot;: &quot;^2.28.0&quot;,</div><div class=\"line\">    &quot;http-proxy-middleware&quot;: &quot;^0.17.4&quot;,</div><div class=\"line\">    &quot;jade&quot;: &quot;^1.11.0&quot;,</div><div class=\"line\">    &quot;minimist&quot;: &quot;^1.2.0&quot;,</div><div class=\"line\">    &quot;node-sass&quot;: &quot;^3.4.2&quot;,</div><div class=\"line\">    &quot;opn&quot;: &quot;^4.0.2&quot;,</div><div class=\"line\">    &quot;postcss-loader&quot;: &quot;^1.3.3&quot;,</div><div class=\"line\">    &quot;sass-loader&quot;: &quot;^3.2.3&quot;,</div><div class=\"line\">    &quot;style-loader&quot;: &quot;^0.13.0&quot;,</div><div class=\"line\">    &quot;stylus-loader&quot;: &quot;^1.4.2&quot;,</div><div class=\"line\">    &quot;template-html-loader&quot;: &quot;0.0.3&quot;,</div><div class=\"line\">    &quot;transfer-webpack-plugin&quot;: &quot;^0.1.4&quot;,</div><div class=\"line\">    &quot;vue&quot;: &quot;^2.1.0&quot;,</div><div class=\"line\">    &quot;vue-loader&quot;: &quot;^10.0.0&quot;,</div><div class=\"line\">    &quot;vue-resource&quot;: &quot;^1.0.3&quot;,</div><div class=\"line\">    &quot;vue-router&quot;: &quot;^2.1.1&quot;,</div><div class=\"line\">    &quot;vue-scroll&quot;: &quot;^2.0.1&quot;,</div><div class=\"line\">    &quot;vue-style-loader&quot;: &quot;^1.0.0&quot;,</div><div class=\"line\">    &quot;vue-template-compiler&quot;: &quot;^2.1.0&quot;,</div><div class=\"line\">    &quot;vuex&quot;: &quot;^2.1.1&quot;,</div><div class=\"line\">    &quot;webpack&quot;: &quot;^1.13.1&quot;,</div><div class=\"line\">    &quot;webpack-dev-middleware&quot;: &quot;^1.8.3&quot;,</div><div class=\"line\">    &quot;webpack-hot-middleware&quot;: &quot;^2.12.2&quot;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"<h4 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h4><p>使用 webpack 有一段时间了，其中的模块热加载加快了开发的速度。它无需刷新，只要修改了文件，客户端就立刻做热加载<br>","more":"<br><code>webpack.config.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div></pre></td><td class=\"code\"><pre><div class=\"line\">const webpack = require(&apos;webpack&apos;)</div><div class=\"line\">const glob = require(&apos;glob&apos;)</div><div class=\"line\">const fs = require(&apos;fs&apos;)</div><div class=\"line\">const HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;)</div><div class=\"line\">const colors = require(&apos;colors&apos;)</div><div class=\"line\">const path = require(&apos;path&apos;)</div><div class=\"line\">const TransferWebpackPlugin = require(&apos;transfer-webpack-plugin&apos;)</div><div class=\"line\">const express = require(&apos;express&apos;)</div><div class=\"line\">const WebpackDevMiddleware = require(&apos;webpack-dev-middleware&apos;)</div><div class=\"line\">const WebpackHotMiddleware = require(&apos;webpack-hot-middleware&apos;)</div><div class=\"line\">const ExtractTextPlugin = require(&apos;extract-text-webpack-plugin&apos;)</div><div class=\"line\">const argv = require(&apos;minimist&apos;)(process.argv.slice(2))</div><div class=\"line\">const bs = require(&apos;browser-sync&apos;).create();</div><div class=\"line\">let bsFlag = false</div><div class=\"line\">const gulp = require(&apos;gulp&apos;)</div><div class=\"line\">/**</div><div class=\"line\"> * 编译配置</div><div class=\"line\"> * @type &#123;Object&#125;</div><div class=\"line\"> */</div><div class=\"line\">const setting = &#123;</div><div class=\"line\">    src:&apos;./src&apos;, // 源文件目录</div><div class=\"line\">    release:&apos;./dist&apos; // 编译后文件</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 获取配置</div><div class=\"line\"> * @return &#123;[type]&#125; [description]</div><div class=\"line\"> */</div><div class=\"line\">const getConf = function()&#123;</div><div class=\"line\"></div><div class=\"line\">    let config = &#123;</div><div class=\"line\">        entry:&#123;</div><div class=\"line\"></div><div class=\"line\">        &#125;,</div><div class=\"line\">        output: &#123;</div><div class=\"line\">            path:path.resolve(__dirname, &apos;dist&apos;),</div><div class=\"line\">            publicPath: &apos;/&apos;,</div><div class=\"line\">            filename: &apos;[name]-[hash].js&apos;,</div><div class=\"line\">            chunkFilename:&quot;[id].chunk.js&quot;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        module: &#123;</div><div class=\"line\">            loaders: [</div><div class=\"line\">                &#123;</div><div class=\"line\">                        test: /\\.vue$/,</div><div class=\"line\">                        exclude: /node_modules/,</div><div class=\"line\">                        loader: &apos;vue&apos;</div><div class=\"line\">                    &#125;,</div><div class=\"line\">                    &#123;</div><div class=\"line\">                        test: /\\.html$/,</div><div class=\"line\">                        loader: &apos;html&apos;</div><div class=\"line\">                    &#125;,</div><div class=\"line\">                    &#123;</div><div class=\"line\">                        test: /\\.(js|jsx)$/,</div><div class=\"line\">                        loader: &apos;babel&apos;,</div><div class=\"line\">                        query: &#123;</div><div class=\"line\">                            presets: [</div><div class=\"line\">                                require.resolve(&apos;babel-preset-react&apos;),</div><div class=\"line\">                                require.resolve(&apos;babel-preset-es2015&apos;)</div><div class=\"line\">                            ]</div><div class=\"line\">                        &#125;,</div><div class=\"line\">                        include: path.resolve(process.cwd(), &apos;./&apos;),</div><div class=\"line\">                        exclude: /node_modules/</div><div class=\"line\">                    &#125;,</div><div class=\"line\">                    &#123;</div><div class=\"line\">                        test: /\\.(png|jpg|gif|svg|mp3|wav|ogg|json)$/,</div><div class=\"line\">                        loaders: [</div><div class=\"line\">                            &apos;url?limit=1024&amp;hash=sha512&amp;digest=hex&amp;name=[name]-[hash].[ext]&apos;</div><div class=\"line\">                        ]</div><div class=\"line\">                    &#125;</div><div class=\"line\">            ]</div><div class=\"line\">        &#125;,</div><div class=\"line\">        resolve: &#123;</div><div class=\"line\">            extensions: [&apos;&apos;, &apos;.js&apos;, &apos;.json&apos;, &apos;.scss&apos;,&apos;.hbs&apos;,&apos;.html&apos;],</div><div class=\"line\">            alias: &#123;</div><div class=\"line\">                &apos;vue&apos;: &apos;vue/dist/vue.js&apos;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        plugins:[</div><div class=\"line\">        //    new MyPlugin(&#123;options: &apos;&apos;&#125;),</div><div class=\"line\">        new webpack.HotModuleReplacementPlugin(),</div><div class=\"line\">        new webpack.optimize.OccurenceOrderPlugin(),</div><div class=\"line\">        new webpack.NoErrorsPlugin()</div><div class=\"line\"></div><div class=\"line\">        ],</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    config.entry = entries()</div><div class=\"line\">    // 处理html</div><div class=\"line\">    config.plugins = config.plugins.concat(htmlPlugins())</div><div class=\"line\"></div><div class=\"line\">    // 处理版本控制</div><div class=\"line\">    if(checkEnvPro())&#123;</div><div class=\"line\">        config.plugins.push(</div><div class=\"line\">            new webpack.DefinePlugin(&#123;</div><div class=\"line\">                &apos;process.env&apos;: &#123;</div><div class=\"line\">                    NODE_ENV: &apos;&quot;production&quot;&apos;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;),</div><div class=\"line\">            new webpack.optimize.UglifyJsPlugin(&#123;</div><div class=\"line\">                compress: &#123;</div><div class=\"line\">                    warnings: false</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;)</div><div class=\"line\">        )</div><div class=\"line\">    &#125;else&#123;</div><div class=\"line\">    //    config.devtool = &apos;#source-map&apos;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    return config</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 获取入口文件</div><div class=\"line\"> * @return &#123;[type]&#125; [description]</div><div class=\"line\"> */</div><div class=\"line\">const entries = function()&#123;</div><div class=\"line\"></div><div class=\"line\">    let targetJs = path.resolve(setting.src, &apos;entries&apos;)</div><div class=\"line\"></div><div class=\"line\">    console.log(colors.red(targetJs))</div><div class=\"line\"></div><div class=\"line\">    let entryFiles = glob.sync(targetJs + &apos;/*.&#123;js,jsx&#125;&apos;)</div><div class=\"line\"></div><div class=\"line\">    let map = &#123;&#125;</div><div class=\"line\"></div><div class=\"line\">    let targetFiles = glob.sync(setting.release + &apos;/*.&#123;js,css,html&#125;&apos;)</div><div class=\"line\"></div><div class=\"line\">    entryFiles.forEach(function (entry) &#123;</div><div class=\"line\"></div><div class=\"line\">        let fileName = entry.substring(entry.lastIndexOf(&apos;\\/&apos;) + 1, entry.lastIndexOf(&apos;.&apos;))</div><div class=\"line\"></div><div class=\"line\">        map[fileName] = path.resolve(__dirname,entry)</div><div class=\"line\">        /**</div><div class=\"line\">         * 清理上个版本文件</div><div class=\"line\">         * @type &#123;[type]&#125;</div><div class=\"line\">         */</div><div class=\"line\">        targetFiles.forEach(function(file)&#123;</div><div class=\"line\"></div><div class=\"line\">            let sourceName = file.substring(file.lastIndexOf(&apos;\\/&apos;) + 1, file.lastIndexOf(&apos;-&apos;))</div><div class=\"line\"></div><div class=\"line\">        \tlet htmlName = file.substring(file.lastIndexOf(&apos;\\/&apos;) + 1, file.lastIndexOf(&apos;.&apos;))</div><div class=\"line\"></div><div class=\"line\">            if(sourceName == fileName || htmlName == fileName)&#123;</div><div class=\"line\"></div><div class=\"line\">                !argv.hot &amp;&amp; fs.existsSync(file) &amp;&amp; fs.unlinkSync(file)</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;)</div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">    return map</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 处理html-views</div><div class=\"line\"> * @return &#123;[type]&#125; [description]</div><div class=\"line\"> */</div><div class=\"line\">const htmlPlugins = function () &#123;</div><div class=\"line\"></div><div class=\"line\">    let entryHtml = glob.sync(setting.src + &apos;/views/*.html&apos;)</div><div class=\"line\"></div><div class=\"line\">    let plugins = []</div><div class=\"line\"></div><div class=\"line\">    entryHtml.forEach(function(entry)&#123;</div><div class=\"line\"></div><div class=\"line\">        let filePath = path.join(__dirname, entry)</div><div class=\"line\"></div><div class=\"line\">        let fileName = filePath.substring(filePath.lastIndexOf(&apos;\\/&apos;) + 1, filePath.lastIndexOf(&apos;.&apos;));</div><div class=\"line\"></div><div class=\"line\">        plugins.push(new HtmlWebpackPlugin(&#123;</div><div class=\"line\">    \t\tchunks: [fileName],</div><div class=\"line\">        \tcache:false,</div><div class=\"line\">            filename: fileName + &apos;.html&apos;,</div><div class=\"line\">            inject:true,</div><div class=\"line\">            hash:true,</div><div class=\"line\">            template:filePath,</div><div class=\"line\">            minify:checkEnvPro() ? &#123; removeAttributeQuotes: true &#125; : false,</div><div class=\"line\">        \t// templateContent: function(templateParams, compilation)&#123;</div><div class=\"line\">        \t// \tlet contentStr = fs.readFileSync(filePath).toString()</div><div class=\"line\">        \t// \treturn contentStr</div><div class=\"line\">        \t// &#125;</div><div class=\"line\">        &#125;))</div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">    return plugins</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 检查版本，增加版本功能控制</div><div class=\"line\"> * @return &#123;[type]&#125; [description]</div><div class=\"line\"> */</div><div class=\"line\">const checkEnvPro = function()&#123;</div><div class=\"line\">    if (process.env.NODE_ENV === &apos;production&apos;) &#123;</div><div class=\"line\">        return true</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">        return false</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 监听html</div><div class=\"line\"> * @return &#123;[type]&#125; [description]</div><div class=\"line\"> */</div><div class=\"line\">const browserSync = function()&#123;</div><div class=\"line\">    if(bsFlag)&#123;</div><div class=\"line\">        return</div><div class=\"line\">    &#125;</div><div class=\"line\">     bsFlag = true</div><div class=\"line\">    bs.init(&#123;</div><div class=\"line\">        server: &#123;</div><div class=\"line\">            baseDir: setting.release</div><div class=\"line\">        &#125;,</div><div class=\"line\">        files: [&apos;./src/**&apos;],</div><div class=\"line\">        port: 8090,</div><div class=\"line\">        files: [</div><div class=\"line\">            &#123;</div><div class=\"line\">                match: [&apos;./src/**&apos;],</div><div class=\"line\">                fn: function (event, file) &#123;</div><div class=\"line\">                    if (event === &apos;change&apos;) &#123;</div><div class=\"line\">                        webpack(getConf(),function()&#123;</div><div class=\"line\">                            bs.reload();</div><div class=\"line\">                        &#125;)</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        ]</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">function MyPlugin(options) &#123;&#125;</div><div class=\"line\"></div><div class=\"line\">MyPlugin.prototype.apply = function(compiler) &#123;</div><div class=\"line\"></div><div class=\"line\">  compiler.plugin(&apos;compilation&apos;, function(compilation) &#123;</div><div class=\"line\">    //  console.log(colors.red(&apos;compilation&apos;))</div><div class=\"line\">    //  browserSync()</div><div class=\"line\">  &#125;);</div><div class=\"line\"></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">module.exports = getConf()</div></pre></td></tr></table></figure>\n<p><code>webpack.js</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div></pre></td><td class=\"code\"><pre><div class=\"line\">const webpack = require(&apos;webpack&apos;)</div><div class=\"line\">const webpackDevServer = require(&apos;webpack-dev-server&apos;)</div><div class=\"line\">const webpackDevMiddleware = require(&apos;webpack-dev-middleware&apos;)</div><div class=\"line\">const webpackHotMiddleware = require(&apos;webpack-hot-middleware&apos;)</div><div class=\"line\">const colors = require(&apos;colors&apos;)</div><div class=\"line\">const bs = require(&apos;browser-sync&apos;).create();</div><div class=\"line\">const express = require(&apos;express&apos;)</div><div class=\"line\">const app = express()</div><div class=\"line\">const opn = require(&apos;opn&apos;)</div><div class=\"line\">const ExtractTextPlugin = require(&apos;extract-text-webpack-plugin&apos;)</div><div class=\"line\">const connectHistoryApiFallBack = require(&apos;connect-history-api-fallback&apos;)</div><div class=\"line\">const path = require(&apos;path&apos;)</div><div class=\"line\">const config = require(path.join(__dirname, &apos;webpack.config&apos;))</div><div class=\"line\">const port = process.env.PORT || 8090</div><div class=\"line\">/**</div><div class=\"line\"> * 设置confg，hot参数</div><div class=\"line\"> */</div><div class=\"line\">const setConfig = function()&#123;</div><div class=\"line\">    var extras = [&apos;./dev-client&apos;];</div><div class=\"line\">//    var extras = [&apos;webpack-hot-middleware/client?path=/__webpack_hmr&amp;reload=true&apos;]</div><div class=\"line\">    Object.keys(config.entry).forEach(function(name) &#123;</div><div class=\"line\">        config.entry[name] = extras.concat(config.entry[name])</div><div class=\"line\">    &#125;)</div><div class=\"line\">    config.plugins.push(</div><div class=\"line\">        new webpack.HotModuleReplacementPlugin(),</div><div class=\"line\">        new webpack.optimize.OccurenceOrderPlugin(),</div><div class=\"line\">        new webpack.NoErrorsPlugin()</div><div class=\"line\">    )</div><div class=\"line\">    return config</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var compiler = webpack(setConfig())</div><div class=\"line\">var proxyMiddleware = require(&apos;http-proxy-middleware&apos;)</div><div class=\"line\">var devMiddleware = require(&apos;webpack-dev-middleware&apos;)(compiler, &#123;</div><div class=\"line\">    publicPath: config.output.publicPath,</div><div class=\"line\">    stats: &#123;</div><div class=\"line\">        colors: true,</div><div class=\"line\">        chunks: false</div><div class=\"line\">    &#125;,</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">var hotMiddleware = require(&apos;webpack-hot-middleware&apos;)(compiler)</div><div class=\"line\">compiler.plugin(&apos;compilation&apos;, function(compilation) &#123;</div><div class=\"line\">    compilation.plugin(&apos;html-webpack-plugin-after-emit&apos;, function(data, cb) &#123;</div><div class=\"line\">        hotMiddleware.publish(&#123;</div><div class=\"line\">            action: &apos;reload&apos;</div><div class=\"line\">        &#125;)</div><div class=\"line\">        cb()</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;)</div><div class=\"line\">app.use(devMiddleware)</div><div class=\"line\">app.use(hotMiddleware)</div><div class=\"line\">app.use(express.static(config.output.path))</div><div class=\"line\"></div><div class=\"line\">app.use(require(&apos;connect-history-api-fallback&apos;)())</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">app.listen(port, function(err) &#123;</div><div class=\"line\">    if (err) &#123;</div><div class=\"line\">        console.log(err)</div><div class=\"line\">        return</div><div class=\"line\">    &#125;</div><div class=\"line\">    console.log(colors.green(&apos;服务已开启，端口:&apos;+port))</div><div class=\"line\">//    opn(&apos;http://localhost:&apos;+port)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p><code>package.json</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  &quot;name&quot;: &quot;back&quot;,</div><div class=\"line\">  &quot;version&quot;: &quot;1.0.0&quot;,</div><div class=\"line\">  &quot;description&quot;: &quot;&quot;,</div><div class=\"line\">  &quot;main&quot;: &quot;index.js&quot;,</div><div class=\"line\">  &quot;scripts&quot;: &#123;</div><div class=\"line\">    &quot;dev&quot;: &quot;webpack-dev-server --inline --hot&quot;,</div><div class=\"line\">    &quot;build&quot;: &quot;export NODE_ENV=production &amp;&amp; webpack --progress --hide-modules&quot;,</div><div class=\"line\">    &quot;hot&quot;: &quot;node webpack.js --hot&quot;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  &quot;author&quot;: &quot;&quot;,</div><div class=\"line\">  &quot;license&quot;: &quot;ISC&quot;,</div><div class=\"line\">  &quot;dependencies&quot;: &#123;</div><div class=\"line\">    &quot;autoprefixer&quot;: &quot;^6.7.7&quot;,</div><div class=\"line\">    &quot;babel-core&quot;: &quot;^6.2.1&quot;,</div><div class=\"line\">    &quot;babel-loader&quot;: &quot;^6.2.0&quot;,</div><div class=\"line\">    &quot;babel-plugin-transform-runtime&quot;: &quot;^6.1.18&quot;,</div><div class=\"line\">    &quot;babel-preset-es2015&quot;: &quot;^6.1.18&quot;,</div><div class=\"line\">    &quot;babel-preset-react&quot;: &quot;^6.23.0&quot;,</div><div class=\"line\">    &quot;babel-preset-stage-0&quot;: &quot;^6.1.18&quot;,</div><div class=\"line\">    &quot;babel-runtime&quot;: &quot;^6.2.0&quot;,</div><div class=\"line\">    &quot;browser-sync&quot;: &quot;^2.18.8&quot;,</div><div class=\"line\">    &quot;connect-history-api-fallback&quot;: &quot;^1.3.0&quot;,</div><div class=\"line\">    &quot;css-loader&quot;: &quot;^0.23.1&quot;,</div><div class=\"line\">    &quot;express&quot;: &quot;^4.15.2&quot;,</div><div class=\"line\">    &quot;extract-text-webpack-plugin&quot;: &quot;^2.1.0&quot;,</div><div class=\"line\">    &quot;file-loader&quot;: &quot;^0.8.5&quot;,</div><div class=\"line\">    &quot;fs&quot;: &quot;0.0.1-security&quot;,</div><div class=\"line\">    &quot;glob&quot;: &quot;^7.1.1&quot;,</div><div class=\"line\">    &quot;gulp&quot;: &quot;^3.9.1&quot;,</div><div class=\"line\">    &quot;html-loader&quot;: &quot;^0.4.5&quot;,</div><div class=\"line\">    &quot;html-webpack-plugin&quot;: &quot;^2.28.0&quot;,</div><div class=\"line\">    &quot;http-proxy-middleware&quot;: &quot;^0.17.4&quot;,</div><div class=\"line\">    &quot;jade&quot;: &quot;^1.11.0&quot;,</div><div class=\"line\">    &quot;minimist&quot;: &quot;^1.2.0&quot;,</div><div class=\"line\">    &quot;node-sass&quot;: &quot;^3.4.2&quot;,</div><div class=\"line\">    &quot;opn&quot;: &quot;^4.0.2&quot;,</div><div class=\"line\">    &quot;postcss-loader&quot;: &quot;^1.3.3&quot;,</div><div class=\"line\">    &quot;sass-loader&quot;: &quot;^3.2.3&quot;,</div><div class=\"line\">    &quot;style-loader&quot;: &quot;^0.13.0&quot;,</div><div class=\"line\">    &quot;stylus-loader&quot;: &quot;^1.4.2&quot;,</div><div class=\"line\">    &quot;template-html-loader&quot;: &quot;0.0.3&quot;,</div><div class=\"line\">    &quot;transfer-webpack-plugin&quot;: &quot;^0.1.4&quot;,</div><div class=\"line\">    &quot;vue&quot;: &quot;^2.1.0&quot;,</div><div class=\"line\">    &quot;vue-loader&quot;: &quot;^10.0.0&quot;,</div><div class=\"line\">    &quot;vue-resource&quot;: &quot;^1.0.3&quot;,</div><div class=\"line\">    &quot;vue-router&quot;: &quot;^2.1.1&quot;,</div><div class=\"line\">    &quot;vue-scroll&quot;: &quot;^2.0.1&quot;,</div><div class=\"line\">    &quot;vue-style-loader&quot;: &quot;^1.0.0&quot;,</div><div class=\"line\">    &quot;vue-template-compiler&quot;: &quot;^2.1.0&quot;,</div><div class=\"line\">    &quot;vuex&quot;: &quot;^2.1.1&quot;,</div><div class=\"line\">    &quot;webpack&quot;: &quot;^1.13.1&quot;,</div><div class=\"line\">    &quot;webpack-dev-middleware&quot;: &quot;^1.8.3&quot;,</div><div class=\"line\">    &quot;webpack-hot-middleware&quot;: &quot;^2.12.2&quot;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"前端性能优化","date":"2017-05-22T03:33:44.000Z","_content":"\n\n### 移动H5前端性能优化指南\n\n#### 概述\n\n1. PC优化手段在Mobile侧同样适用\n2. 在Mobile侧我们提出三秒种渲染完成首屏指标\n3. 基于第二点，首屏加载3秒完成或使用Loading\n4. 基于联通3G网络平均338KB/s(2.71Mb/s)，所以首屏资源不应超过1014KB\n5. Mobile侧因手机配置原因，除加载外渲染速度也是优化重点\n6. 基于第五点，要合理处理代码减少渲染损耗\n7. 基于第二、第五点，所有影响首屏加载和渲染的代码应在处理逻辑中后置\n8. 加载完成后用户交互使用时也需注意性能\n\n<!--more-->\n优化指南\n\n\n![https://isux.tencent.com/wp-content/uploads/2015/01/20150108170945527.png](https://isux.tencent.com/wp-content/uploads/2015/01/20150108170945527.png)\n\n#### [加载优化]\n\n加载过程是最为耗时的过程，可能会占到总耗时的80%时间，因此是优化的重点\n\n##### · 减少HTTP请求\n因为手机浏览器同时响应请求为4个请求（Android支持4个，iOS 5后可支持6个），所以要尽量减少页面的请求数，首次加载同时请求数不能超过4个\na) 合并CSS、JavaScript\nb) 合并小图片，使用雪碧图\n\n##### · 缓存\n使用缓存可以减少向服务器的请求数，节省加载时间，所以所有静态资源都要在服务器端设置缓存，并且尽量使用长Cache（长Cache资源的更新可使用时间戳）\na) 缓存一切可缓存的资源\nb) 使用长Cache（使用时间戳更新Cache）\nc) 使用外联式引用CSS、JavaScript\n\n##### · 压缩HTML、CSS、JavaScript\n减少资源大小可以加快网页显示速度，所以要对HTML、CSS、JavaScript等进行代码压缩，并在服务器端设置GZip\na) 压缩（例如，多余的空格、换行符和缩进）\nb) 启用GZip\n\n##### · 无阻塞\n写在HTML头部的JavaScript（无异步），和写在HTML标签中的Style会阻塞页面的渲染，因此CSS放在页面头部并使用Link方式引入，避免在HTML标签中写Style，JavaScript放在页面尾\n\n部或使用异步方式加载\n\n##### · 使用首屏加载\n首屏的快速显示，可以大大提升用户对页面速度的感知，因此应尽量针对首屏的快速显示做优化\n\n##### · 按需加载\n将不影响首屏的资源和当前屏幕资源不用的资源放到用户需要时才加载，可以大大提升重要资源的显示速度和降低总体流量\nPS：按需加载会导致大量重绘，影响渲染性能\na) LazyLoad\nb) 滚屏加载\nc) 通过Media Query加载\n\n##### · 预加载\n大型重资源页面（如游戏）可使用增加Loading的方法，资源加载完成后再显示页面。但Loading时间过长，会造成用户流失\n对用户行为分析，可以在当前页加载下一页资源，提升速度\na) 可感知Loading(如进入空间游戏的Loading)\nb) 不可感知的Loading（如提前加载下一页）\n\n##### · 压缩图片\n图片是最占流量的资源，因此尽量避免使用他，使用时选择最合适的格式（实现需求的前提下，以大小判断），合适的大小，然后使用智图压缩，同时在代码中用Srcset来按需显示\nPS：过度压缩图片大小影响图片显示效果\na) 使用智图（ http://zhitu.isux.us/ ）\nb) 使用其它方式代替图片(1. 使用CSS3 2. 使用SVG 3. 使用IconFont)\nc) 使用Srcset\nd) 选择合适的图片(1. webP优于JPG 2. PNG8优于GIF)\ne) 选择合适的大小（1. 首次加载不大于1014KB 2. 不宽于640（基于手机屏幕一般宽度））\n\n##### · 减少Cookie\nCookie会影响加载速度，所以静态资源域名不使用Cookie\n\n##### · 避免重定向\n重定向会影响加载速度，所以在服务器正确设置避免重定向\n\n##### · 异步加载第三方资源\n第三方资源不可控会影响页面的加载和显示，因此要异步加载第三方资源\n\n#### [脚本执行优化]\n\n脚本处理不当会阻塞页面加载、渲染，因此在使用时需当注意\n\n##### · CSS写在头部，JavaScript写在尾部或异步\n\n##### · 避免图片和iFrame等的空Src\n空Src会重新加载当前页面，影响速度和效率\n\n##### · 尽量避免重设图片大小\n重设图片大小是指在页面、CSS、JavaScript等中多次重置图片大小，多次重设图片大小会引发图片的多次重绘，影响性能\n\n##### · 图片尽量避免使用DataURL\nDataURL图片没有使用图片的压缩算法文件会变大，并且要解码后再渲染，加载慢耗时长\n\n#### [CSS优化]\n\n##### · 尽量避免写在HTML标签中写Style属性\n\n##### · 避免CSS表达式\nCSS表达式的执行需跳出CSS树的渲染，因此请避免CSS表达式\n\n##### · 移除空的CSS规则\n空的CSS规则增加了CSS文件的大小，且影响CSS树的执行，所以需移除空的CSS规则\n\n##### · 正确使用Display的属性\nDisplay属性会影响页面的渲染，因此请合理使用\na) display:inline后不应该再使用width、height、margin、padding以及float\nb) display:inline-block后不应该再使用float\nc) display:block后不应该再使用vertical-align\nd) display:table-*后不应该再使用margin或者float\n\n##### · 不滥用Float\nFloat在渲染时计算量比较大，尽量减少使用\n\n##### · 不滥用Web字体\nWeb字体需要下载，解析，重绘当前页面，尽量减少使用\n\n##### · 不声明过多的Font-size\n过多的Font-size引发CSS树的效率\n\n##### · 值为0时不需要任何单位\n为了浏览器的兼容性和性能，值为0时不要带单位\n\n##### · 标准化各种浏览器前缀\na) 无前缀应放在最后\nb) CSS动画只用 （-webkit- 无前缀）两种即可\nc) 其它前缀为 -webkit- -moz- -ms- 无前缀 四种，（-o-Opera浏览器改用blink内核，所以淘汰）\n\n##### · 避免让选择符看起来像正则表达式\n高级选择器执行耗时长且不易读懂，避免使用\n\n#### [JavaScript执行优化]\n\n##### · 减少重绘和回流\na) 避免不必要的Dom操作\nb) 尽量改变Class而不是Style，使用classList代替className\nc) 避免使用document.write\nd) 减少drawImage\n\n##### · 缓存Dom选择与计算\n每次Dom选择都要计算，缓存他\n\n##### · 缓存列表.length\n每次.length都要计算，用一个变量保存这个值\n\n##### · 尽量使用事件代理，避免批量绑定事件\n\n##### · 尽量使用ID选择器\nID选择器是最快的\n\n##### · TOUCH事件优化\n使用touchstart、touchend代替click，因快影响速度快。但应注意Touch响应过快，易引发误操作\n\n#### [渲染优化]\n\n##### · HTML使用Viewport\nViewport可以加速页面的渲染，请使用以下代码\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n\n##### · 减少Dom节点\nDom节点太多影响页面的渲染，应尽量减少Dom节点\n\n##### · 动画优化\na) 尽量使用CSS3动画\nb) 合理使用requestAnimationFrame动画代替setTimeout\nc) 适当使用Canvas动画 5个元素以内使用css动画，5个以上使用Canvas动画（iOS8可使用webGL）\n\n##### · 高频事件优化\nTouchmove、Scroll 事件可导致多次渲染\na) 使用requestAnimationFrame监听帧变化，使得在正确的时间进行渲染\nb) 增加响应变化的时间间隔，减少重绘次数\n\n##### · GPU加速\nCSS中以下属性（CSS3 transitions、CSS3 3D transforms、Opacity、Canvas、WebGL、Video）来触发GPU渲染，请合理使用\nPS：过渡使用会引发手机过耗电增加\n","source":"_posts/前端性能优化.md","raw":"---\ntitle: 前端性能优化\ntags:\n  - '性能优化'\ncategories:\n  - '前端'\n  - '性能优化'\ndate: 2017-05-22 11:33:44\n---\n\n\n### 移动H5前端性能优化指南\n\n#### 概述\n\n1. PC优化手段在Mobile侧同样适用\n2. 在Mobile侧我们提出三秒种渲染完成首屏指标\n3. 基于第二点，首屏加载3秒完成或使用Loading\n4. 基于联通3G网络平均338KB/s(2.71Mb/s)，所以首屏资源不应超过1014KB\n5. Mobile侧因手机配置原因，除加载外渲染速度也是优化重点\n6. 基于第五点，要合理处理代码减少渲染损耗\n7. 基于第二、第五点，所有影响首屏加载和渲染的代码应在处理逻辑中后置\n8. 加载完成后用户交互使用时也需注意性能\n\n<!--more-->\n优化指南\n\n\n![https://isux.tencent.com/wp-content/uploads/2015/01/20150108170945527.png](https://isux.tencent.com/wp-content/uploads/2015/01/20150108170945527.png)\n\n#### [加载优化]\n\n加载过程是最为耗时的过程，可能会占到总耗时的80%时间，因此是优化的重点\n\n##### · 减少HTTP请求\n因为手机浏览器同时响应请求为4个请求（Android支持4个，iOS 5后可支持6个），所以要尽量减少页面的请求数，首次加载同时请求数不能超过4个\na) 合并CSS、JavaScript\nb) 合并小图片，使用雪碧图\n\n##### · 缓存\n使用缓存可以减少向服务器的请求数，节省加载时间，所以所有静态资源都要在服务器端设置缓存，并且尽量使用长Cache（长Cache资源的更新可使用时间戳）\na) 缓存一切可缓存的资源\nb) 使用长Cache（使用时间戳更新Cache）\nc) 使用外联式引用CSS、JavaScript\n\n##### · 压缩HTML、CSS、JavaScript\n减少资源大小可以加快网页显示速度，所以要对HTML、CSS、JavaScript等进行代码压缩，并在服务器端设置GZip\na) 压缩（例如，多余的空格、换行符和缩进）\nb) 启用GZip\n\n##### · 无阻塞\n写在HTML头部的JavaScript（无异步），和写在HTML标签中的Style会阻塞页面的渲染，因此CSS放在页面头部并使用Link方式引入，避免在HTML标签中写Style，JavaScript放在页面尾\n\n部或使用异步方式加载\n\n##### · 使用首屏加载\n首屏的快速显示，可以大大提升用户对页面速度的感知，因此应尽量针对首屏的快速显示做优化\n\n##### · 按需加载\n将不影响首屏的资源和当前屏幕资源不用的资源放到用户需要时才加载，可以大大提升重要资源的显示速度和降低总体流量\nPS：按需加载会导致大量重绘，影响渲染性能\na) LazyLoad\nb) 滚屏加载\nc) 通过Media Query加载\n\n##### · 预加载\n大型重资源页面（如游戏）可使用增加Loading的方法，资源加载完成后再显示页面。但Loading时间过长，会造成用户流失\n对用户行为分析，可以在当前页加载下一页资源，提升速度\na) 可感知Loading(如进入空间游戏的Loading)\nb) 不可感知的Loading（如提前加载下一页）\n\n##### · 压缩图片\n图片是最占流量的资源，因此尽量避免使用他，使用时选择最合适的格式（实现需求的前提下，以大小判断），合适的大小，然后使用智图压缩，同时在代码中用Srcset来按需显示\nPS：过度压缩图片大小影响图片显示效果\na) 使用智图（ http://zhitu.isux.us/ ）\nb) 使用其它方式代替图片(1. 使用CSS3 2. 使用SVG 3. 使用IconFont)\nc) 使用Srcset\nd) 选择合适的图片(1. webP优于JPG 2. PNG8优于GIF)\ne) 选择合适的大小（1. 首次加载不大于1014KB 2. 不宽于640（基于手机屏幕一般宽度））\n\n##### · 减少Cookie\nCookie会影响加载速度，所以静态资源域名不使用Cookie\n\n##### · 避免重定向\n重定向会影响加载速度，所以在服务器正确设置避免重定向\n\n##### · 异步加载第三方资源\n第三方资源不可控会影响页面的加载和显示，因此要异步加载第三方资源\n\n#### [脚本执行优化]\n\n脚本处理不当会阻塞页面加载、渲染，因此在使用时需当注意\n\n##### · CSS写在头部，JavaScript写在尾部或异步\n\n##### · 避免图片和iFrame等的空Src\n空Src会重新加载当前页面，影响速度和效率\n\n##### · 尽量避免重设图片大小\n重设图片大小是指在页面、CSS、JavaScript等中多次重置图片大小，多次重设图片大小会引发图片的多次重绘，影响性能\n\n##### · 图片尽量避免使用DataURL\nDataURL图片没有使用图片的压缩算法文件会变大，并且要解码后再渲染，加载慢耗时长\n\n#### [CSS优化]\n\n##### · 尽量避免写在HTML标签中写Style属性\n\n##### · 避免CSS表达式\nCSS表达式的执行需跳出CSS树的渲染，因此请避免CSS表达式\n\n##### · 移除空的CSS规则\n空的CSS规则增加了CSS文件的大小，且影响CSS树的执行，所以需移除空的CSS规则\n\n##### · 正确使用Display的属性\nDisplay属性会影响页面的渲染，因此请合理使用\na) display:inline后不应该再使用width、height、margin、padding以及float\nb) display:inline-block后不应该再使用float\nc) display:block后不应该再使用vertical-align\nd) display:table-*后不应该再使用margin或者float\n\n##### · 不滥用Float\nFloat在渲染时计算量比较大，尽量减少使用\n\n##### · 不滥用Web字体\nWeb字体需要下载，解析，重绘当前页面，尽量减少使用\n\n##### · 不声明过多的Font-size\n过多的Font-size引发CSS树的效率\n\n##### · 值为0时不需要任何单位\n为了浏览器的兼容性和性能，值为0时不要带单位\n\n##### · 标准化各种浏览器前缀\na) 无前缀应放在最后\nb) CSS动画只用 （-webkit- 无前缀）两种即可\nc) 其它前缀为 -webkit- -moz- -ms- 无前缀 四种，（-o-Opera浏览器改用blink内核，所以淘汰）\n\n##### · 避免让选择符看起来像正则表达式\n高级选择器执行耗时长且不易读懂，避免使用\n\n#### [JavaScript执行优化]\n\n##### · 减少重绘和回流\na) 避免不必要的Dom操作\nb) 尽量改变Class而不是Style，使用classList代替className\nc) 避免使用document.write\nd) 减少drawImage\n\n##### · 缓存Dom选择与计算\n每次Dom选择都要计算，缓存他\n\n##### · 缓存列表.length\n每次.length都要计算，用一个变量保存这个值\n\n##### · 尽量使用事件代理，避免批量绑定事件\n\n##### · 尽量使用ID选择器\nID选择器是最快的\n\n##### · TOUCH事件优化\n使用touchstart、touchend代替click，因快影响速度快。但应注意Touch响应过快，易引发误操作\n\n#### [渲染优化]\n\n##### · HTML使用Viewport\nViewport可以加速页面的渲染，请使用以下代码\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n\n##### · 减少Dom节点\nDom节点太多影响页面的渲染，应尽量减少Dom节点\n\n##### · 动画优化\na) 尽量使用CSS3动画\nb) 合理使用requestAnimationFrame动画代替setTimeout\nc) 适当使用Canvas动画 5个元素以内使用css动画，5个以上使用Canvas动画（iOS8可使用webGL）\n\n##### · 高频事件优化\nTouchmove、Scroll 事件可导致多次渲染\na) 使用requestAnimationFrame监听帧变化，使得在正确的时间进行渲染\nb) 增加响应变化的时间间隔，减少重绘次数\n\n##### · GPU加速\nCSS中以下属性（CSS3 transitions、CSS3 3D transforms、Opacity、Canvas、WebGL、Video）来触发GPU渲染，请合理使用\nPS：过渡使用会引发手机过耗电增加\n","slug":"前端性能优化","published":1,"updated":"2017-05-22T03:34:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5naxw4w0016fcxe0x4kfdvb","content":"<h3 id=\"移动H5前端性能优化指南\"><a href=\"#移动H5前端性能优化指南\" class=\"headerlink\" title=\"移动H5前端性能优化指南\"></a>移动H5前端性能优化指南</h3><h4 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h4><ol>\n<li>PC优化手段在Mobile侧同样适用</li>\n<li>在Mobile侧我们提出三秒种渲染完成首屏指标</li>\n<li>基于第二点，首屏加载3秒完成或使用Loading</li>\n<li>基于联通3G网络平均338KB/s(2.71Mb/s)，所以首屏资源不应超过1014KB</li>\n<li>Mobile侧因手机配置原因，除加载外渲染速度也是优化重点</li>\n<li>基于第五点，要合理处理代码减少渲染损耗</li>\n<li>基于第二、第五点，所有影响首屏加载和渲染的代码应在处理逻辑中后置</li>\n<li>加载完成后用户交互使用时也需注意性能</li>\n</ol>\n<a id=\"more\"></a>\n<p>优化指南</p>\n<p><img src=\"https://isux.tencent.com/wp-content/uploads/2015/01/20150108170945527.png\" alt=\"https://isux.tencent.com/wp-content/uploads/2015/01/20150108170945527.png\"></p>\n<h4 id=\"加载优化\"><a href=\"#加载优化\" class=\"headerlink\" title=\"[加载优化]\"></a>[加载优化]</h4><p>加载过程是最为耗时的过程，可能会占到总耗时的80%时间，因此是优化的重点</p>\n<h5 id=\"·-减少HTTP请求\"><a href=\"#·-减少HTTP请求\" class=\"headerlink\" title=\"· 减少HTTP请求\"></a>· 减少HTTP请求</h5><p>因为手机浏览器同时响应请求为4个请求（Android支持4个，iOS 5后可支持6个），所以要尽量减少页面的请求数，首次加载同时请求数不能超过4个<br>a) 合并CSS、JavaScript<br>b) 合并小图片，使用雪碧图</p>\n<h5 id=\"·-缓存\"><a href=\"#·-缓存\" class=\"headerlink\" title=\"· 缓存\"></a>· 缓存</h5><p>使用缓存可以减少向服务器的请求数，节省加载时间，所以所有静态资源都要在服务器端设置缓存，并且尽量使用长Cache（长Cache资源的更新可使用时间戳）<br>a) 缓存一切可缓存的资源<br>b) 使用长Cache（使用时间戳更新Cache）<br>c) 使用外联式引用CSS、JavaScript</p>\n<h5 id=\"·-压缩HTML、CSS、JavaScript\"><a href=\"#·-压缩HTML、CSS、JavaScript\" class=\"headerlink\" title=\"· 压缩HTML、CSS、JavaScript\"></a>· 压缩HTML、CSS、JavaScript</h5><p>减少资源大小可以加快网页显示速度，所以要对HTML、CSS、JavaScript等进行代码压缩，并在服务器端设置GZip<br>a) 压缩（例如，多余的空格、换行符和缩进）<br>b) 启用GZip</p>\n<h5 id=\"·-无阻塞\"><a href=\"#·-无阻塞\" class=\"headerlink\" title=\"· 无阻塞\"></a>· 无阻塞</h5><p>写在HTML头部的JavaScript（无异步），和写在HTML标签中的Style会阻塞页面的渲染，因此CSS放在页面头部并使用Link方式引入，避免在HTML标签中写Style，JavaScript放在页面尾</p>\n<p>部或使用异步方式加载</p>\n<h5 id=\"·-使用首屏加载\"><a href=\"#·-使用首屏加载\" class=\"headerlink\" title=\"· 使用首屏加载\"></a>· 使用首屏加载</h5><p>首屏的快速显示，可以大大提升用户对页面速度的感知，因此应尽量针对首屏的快速显示做优化</p>\n<h5 id=\"·-按需加载\"><a href=\"#·-按需加载\" class=\"headerlink\" title=\"· 按需加载\"></a>· 按需加载</h5><p>将不影响首屏的资源和当前屏幕资源不用的资源放到用户需要时才加载，可以大大提升重要资源的显示速度和降低总体流量<br>PS：按需加载会导致大量重绘，影响渲染性能<br>a) LazyLoad<br>b) 滚屏加载<br>c) 通过Media Query加载</p>\n<h5 id=\"·-预加载\"><a href=\"#·-预加载\" class=\"headerlink\" title=\"· 预加载\"></a>· 预加载</h5><p>大型重资源页面（如游戏）可使用增加Loading的方法，资源加载完成后再显示页面。但Loading时间过长，会造成用户流失<br>对用户行为分析，可以在当前页加载下一页资源，提升速度<br>a) 可感知Loading(如进入空间游戏的Loading)<br>b) 不可感知的Loading（如提前加载下一页）</p>\n<h5 id=\"·-压缩图片\"><a href=\"#·-压缩图片\" class=\"headerlink\" title=\"· 压缩图片\"></a>· 压缩图片</h5><p>图片是最占流量的资源，因此尽量避免使用他，使用时选择最合适的格式（实现需求的前提下，以大小判断），合适的大小，然后使用智图压缩，同时在代码中用Srcset来按需显示<br>PS：过度压缩图片大小影响图片显示效果<br>a) 使用智图（ <a href=\"http://zhitu.isux.us/\" target=\"_blank\" rel=\"external\">http://zhitu.isux.us/</a> ）<br>b) 使用其它方式代替图片(1. 使用CSS3 2. 使用SVG 3. 使用IconFont)<br>c) 使用Srcset<br>d) 选择合适的图片(1. webP优于JPG 2. PNG8优于GIF)<br>e) 选择合适的大小（1. 首次加载不大于1014KB 2. 不宽于640（基于手机屏幕一般宽度））</p>\n<h5 id=\"·-减少Cookie\"><a href=\"#·-减少Cookie\" class=\"headerlink\" title=\"· 减少Cookie\"></a>· 减少Cookie</h5><p>Cookie会影响加载速度，所以静态资源域名不使用Cookie</p>\n<h5 id=\"·-避免重定向\"><a href=\"#·-避免重定向\" class=\"headerlink\" title=\"· 避免重定向\"></a>· 避免重定向</h5><p>重定向会影响加载速度，所以在服务器正确设置避免重定向</p>\n<h5 id=\"·-异步加载第三方资源\"><a href=\"#·-异步加载第三方资源\" class=\"headerlink\" title=\"· 异步加载第三方资源\"></a>· 异步加载第三方资源</h5><p>第三方资源不可控会影响页面的加载和显示，因此要异步加载第三方资源</p>\n<h4 id=\"脚本执行优化\"><a href=\"#脚本执行优化\" class=\"headerlink\" title=\"[脚本执行优化]\"></a>[脚本执行优化]</h4><p>脚本处理不当会阻塞页面加载、渲染，因此在使用时需当注意</p>\n<h5 id=\"·-CSS写在头部，JavaScript写在尾部或异步\"><a href=\"#·-CSS写在头部，JavaScript写在尾部或异步\" class=\"headerlink\" title=\"· CSS写在头部，JavaScript写在尾部或异步\"></a>· CSS写在头部，JavaScript写在尾部或异步</h5><h5 id=\"·-避免图片和iFrame等的空Src\"><a href=\"#·-避免图片和iFrame等的空Src\" class=\"headerlink\" title=\"· 避免图片和iFrame等的空Src\"></a>· 避免图片和iFrame等的空Src</h5><p>空Src会重新加载当前页面，影响速度和效率</p>\n<h5 id=\"·-尽量避免重设图片大小\"><a href=\"#·-尽量避免重设图片大小\" class=\"headerlink\" title=\"· 尽量避免重设图片大小\"></a>· 尽量避免重设图片大小</h5><p>重设图片大小是指在页面、CSS、JavaScript等中多次重置图片大小，多次重设图片大小会引发图片的多次重绘，影响性能</p>\n<h5 id=\"·-图片尽量避免使用DataURL\"><a href=\"#·-图片尽量避免使用DataURL\" class=\"headerlink\" title=\"· 图片尽量避免使用DataURL\"></a>· 图片尽量避免使用DataURL</h5><p>DataURL图片没有使用图片的压缩算法文件会变大，并且要解码后再渲染，加载慢耗时长</p>\n<h4 id=\"CSS优化\"><a href=\"#CSS优化\" class=\"headerlink\" title=\"[CSS优化]\"></a>[CSS优化]</h4><h5 id=\"·-尽量避免写在HTML标签中写Style属性\"><a href=\"#·-尽量避免写在HTML标签中写Style属性\" class=\"headerlink\" title=\"· 尽量避免写在HTML标签中写Style属性\"></a>· 尽量避免写在HTML标签中写Style属性</h5><h5 id=\"·-避免CSS表达式\"><a href=\"#·-避免CSS表达式\" class=\"headerlink\" title=\"· 避免CSS表达式\"></a>· 避免CSS表达式</h5><p>CSS表达式的执行需跳出CSS树的渲染，因此请避免CSS表达式</p>\n<h5 id=\"·-移除空的CSS规则\"><a href=\"#·-移除空的CSS规则\" class=\"headerlink\" title=\"· 移除空的CSS规则\"></a>· 移除空的CSS规则</h5><p>空的CSS规则增加了CSS文件的大小，且影响CSS树的执行，所以需移除空的CSS规则</p>\n<h5 id=\"·-正确使用Display的属性\"><a href=\"#·-正确使用Display的属性\" class=\"headerlink\" title=\"· 正确使用Display的属性\"></a>· 正确使用Display的属性</h5><p>Display属性会影响页面的渲染，因此请合理使用<br>a) display:inline后不应该再使用width、height、margin、padding以及float<br>b) display:inline-block后不应该再使用float<br>c) display:block后不应该再使用vertical-align<br>d) display:table-*后不应该再使用margin或者float</p>\n<h5 id=\"·-不滥用Float\"><a href=\"#·-不滥用Float\" class=\"headerlink\" title=\"· 不滥用Float\"></a>· 不滥用Float</h5><p>Float在渲染时计算量比较大，尽量减少使用</p>\n<h5 id=\"·-不滥用Web字体\"><a href=\"#·-不滥用Web字体\" class=\"headerlink\" title=\"· 不滥用Web字体\"></a>· 不滥用Web字体</h5><p>Web字体需要下载，解析，重绘当前页面，尽量减少使用</p>\n<h5 id=\"·-不声明过多的Font-size\"><a href=\"#·-不声明过多的Font-size\" class=\"headerlink\" title=\"· 不声明过多的Font-size\"></a>· 不声明过多的Font-size</h5><p>过多的Font-size引发CSS树的效率</p>\n<h5 id=\"·-值为0时不需要任何单位\"><a href=\"#·-值为0时不需要任何单位\" class=\"headerlink\" title=\"· 值为0时不需要任何单位\"></a>· 值为0时不需要任何单位</h5><p>为了浏览器的兼容性和性能，值为0时不要带单位</p>\n<h5 id=\"·-标准化各种浏览器前缀\"><a href=\"#·-标准化各种浏览器前缀\" class=\"headerlink\" title=\"· 标准化各种浏览器前缀\"></a>· 标准化各种浏览器前缀</h5><p>a) 无前缀应放在最后<br>b) CSS动画只用 （-webkit- 无前缀）两种即可<br>c) 其它前缀为 -webkit- -moz- -ms- 无前缀 四种，（-o-Opera浏览器改用blink内核，所以淘汰）</p>\n<h5 id=\"·-避免让选择符看起来像正则表达式\"><a href=\"#·-避免让选择符看起来像正则表达式\" class=\"headerlink\" title=\"· 避免让选择符看起来像正则表达式\"></a>· 避免让选择符看起来像正则表达式</h5><p>高级选择器执行耗时长且不易读懂，避免使用</p>\n<h4 id=\"JavaScript执行优化\"><a href=\"#JavaScript执行优化\" class=\"headerlink\" title=\"[JavaScript执行优化]\"></a>[JavaScript执行优化]</h4><h5 id=\"·-减少重绘和回流\"><a href=\"#·-减少重绘和回流\" class=\"headerlink\" title=\"· 减少重绘和回流\"></a>· 减少重绘和回流</h5><p>a) 避免不必要的Dom操作<br>b) 尽量改变Class而不是Style，使用classList代替className<br>c) 避免使用document.write<br>d) 减少drawImage</p>\n<h5 id=\"·-缓存Dom选择与计算\"><a href=\"#·-缓存Dom选择与计算\" class=\"headerlink\" title=\"· 缓存Dom选择与计算\"></a>· 缓存Dom选择与计算</h5><p>每次Dom选择都要计算，缓存他</p>\n<h5 id=\"·-缓存列表-length\"><a href=\"#·-缓存列表-length\" class=\"headerlink\" title=\"· 缓存列表.length\"></a>· 缓存列表.length</h5><p>每次.length都要计算，用一个变量保存这个值</p>\n<h5 id=\"·-尽量使用事件代理，避免批量绑定事件\"><a href=\"#·-尽量使用事件代理，避免批量绑定事件\" class=\"headerlink\" title=\"· 尽量使用事件代理，避免批量绑定事件\"></a>· 尽量使用事件代理，避免批量绑定事件</h5><h5 id=\"·-尽量使用ID选择器\"><a href=\"#·-尽量使用ID选择器\" class=\"headerlink\" title=\"· 尽量使用ID选择器\"></a>· 尽量使用ID选择器</h5><p>ID选择器是最快的</p>\n<h5 id=\"·-TOUCH事件优化\"><a href=\"#·-TOUCH事件优化\" class=\"headerlink\" title=\"· TOUCH事件优化\"></a>· TOUCH事件优化</h5><p>使用touchstart、touchend代替click，因快影响速度快。但应注意Touch响应过快，易引发误操作</p>\n<h4 id=\"渲染优化\"><a href=\"#渲染优化\" class=\"headerlink\" title=\"[渲染优化]\"></a>[渲染优化]</h4><h5 id=\"·-HTML使用Viewport\"><a href=\"#·-HTML使用Viewport\" class=\"headerlink\" title=\"· HTML使用Viewport\"></a>· HTML使用Viewport</h5><p>Viewport可以加速页面的渲染，请使用以下代码</p>\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n\n<h5 id=\"·-减少Dom节点\"><a href=\"#·-减少Dom节点\" class=\"headerlink\" title=\"· 减少Dom节点\"></a>· 减少Dom节点</h5><p>Dom节点太多影响页面的渲染，应尽量减少Dom节点</p>\n<h5 id=\"·-动画优化\"><a href=\"#·-动画优化\" class=\"headerlink\" title=\"· 动画优化\"></a>· 动画优化</h5><p>a) 尽量使用CSS3动画<br>b) 合理使用requestAnimationFrame动画代替setTimeout<br>c) 适当使用Canvas动画 5个元素以内使用css动画，5个以上使用Canvas动画（iOS8可使用webGL）</p>\n<h5 id=\"·-高频事件优化\"><a href=\"#·-高频事件优化\" class=\"headerlink\" title=\"· 高频事件优化\"></a>· 高频事件优化</h5><p>Touchmove、Scroll 事件可导致多次渲染<br>a) 使用requestAnimationFrame监听帧变化，使得在正确的时间进行渲染<br>b) 增加响应变化的时间间隔，减少重绘次数</p>\n<h5 id=\"·-GPU加速\"><a href=\"#·-GPU加速\" class=\"headerlink\" title=\"· GPU加速\"></a>· GPU加速</h5><p>CSS中以下属性（CSS3 transitions、CSS3 3D transforms、Opacity、Canvas、WebGL、Video）来触发GPU渲染，请合理使用<br>PS：过渡使用会引发手机过耗电增加</p>\n","excerpt":"<h3 id=\"移动H5前端性能优化指南\"><a href=\"#移动H5前端性能优化指南\" class=\"headerlink\" title=\"移动H5前端性能优化指南\"></a>移动H5前端性能优化指南</h3><h4 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h4><ol>\n<li>PC优化手段在Mobile侧同样适用</li>\n<li>在Mobile侧我们提出三秒种渲染完成首屏指标</li>\n<li>基于第二点，首屏加载3秒完成或使用Loading</li>\n<li>基于联通3G网络平均338KB/s(2.71Mb/s)，所以首屏资源不应超过1014KB</li>\n<li>Mobile侧因手机配置原因，除加载外渲染速度也是优化重点</li>\n<li>基于第五点，要合理处理代码减少渲染损耗</li>\n<li>基于第二、第五点，所有影响首屏加载和渲染的代码应在处理逻辑中后置</li>\n<li>加载完成后用户交互使用时也需注意性能</li>\n</ol>","more":"<p>优化指南</p>\n<p><img src=\"https://isux.tencent.com/wp-content/uploads/2015/01/20150108170945527.png\" alt=\"https://isux.tencent.com/wp-content/uploads/2015/01/20150108170945527.png\"></p>\n<h4 id=\"加载优化\"><a href=\"#加载优化\" class=\"headerlink\" title=\"[加载优化]\"></a>[加载优化]</h4><p>加载过程是最为耗时的过程，可能会占到总耗时的80%时间，因此是优化的重点</p>\n<h5 id=\"·-减少HTTP请求\"><a href=\"#·-减少HTTP请求\" class=\"headerlink\" title=\"· 减少HTTP请求\"></a>· 减少HTTP请求</h5><p>因为手机浏览器同时响应请求为4个请求（Android支持4个，iOS 5后可支持6个），所以要尽量减少页面的请求数，首次加载同时请求数不能超过4个<br>a) 合并CSS、JavaScript<br>b) 合并小图片，使用雪碧图</p>\n<h5 id=\"·-缓存\"><a href=\"#·-缓存\" class=\"headerlink\" title=\"· 缓存\"></a>· 缓存</h5><p>使用缓存可以减少向服务器的请求数，节省加载时间，所以所有静态资源都要在服务器端设置缓存，并且尽量使用长Cache（长Cache资源的更新可使用时间戳）<br>a) 缓存一切可缓存的资源<br>b) 使用长Cache（使用时间戳更新Cache）<br>c) 使用外联式引用CSS、JavaScript</p>\n<h5 id=\"·-压缩HTML、CSS、JavaScript\"><a href=\"#·-压缩HTML、CSS、JavaScript\" class=\"headerlink\" title=\"· 压缩HTML、CSS、JavaScript\"></a>· 压缩HTML、CSS、JavaScript</h5><p>减少资源大小可以加快网页显示速度，所以要对HTML、CSS、JavaScript等进行代码压缩，并在服务器端设置GZip<br>a) 压缩（例如，多余的空格、换行符和缩进）<br>b) 启用GZip</p>\n<h5 id=\"·-无阻塞\"><a href=\"#·-无阻塞\" class=\"headerlink\" title=\"· 无阻塞\"></a>· 无阻塞</h5><p>写在HTML头部的JavaScript（无异步），和写在HTML标签中的Style会阻塞页面的渲染，因此CSS放在页面头部并使用Link方式引入，避免在HTML标签中写Style，JavaScript放在页面尾</p>\n<p>部或使用异步方式加载</p>\n<h5 id=\"·-使用首屏加载\"><a href=\"#·-使用首屏加载\" class=\"headerlink\" title=\"· 使用首屏加载\"></a>· 使用首屏加载</h5><p>首屏的快速显示，可以大大提升用户对页面速度的感知，因此应尽量针对首屏的快速显示做优化</p>\n<h5 id=\"·-按需加载\"><a href=\"#·-按需加载\" class=\"headerlink\" title=\"· 按需加载\"></a>· 按需加载</h5><p>将不影响首屏的资源和当前屏幕资源不用的资源放到用户需要时才加载，可以大大提升重要资源的显示速度和降低总体流量<br>PS：按需加载会导致大量重绘，影响渲染性能<br>a) LazyLoad<br>b) 滚屏加载<br>c) 通过Media Query加载</p>\n<h5 id=\"·-预加载\"><a href=\"#·-预加载\" class=\"headerlink\" title=\"· 预加载\"></a>· 预加载</h5><p>大型重资源页面（如游戏）可使用增加Loading的方法，资源加载完成后再显示页面。但Loading时间过长，会造成用户流失<br>对用户行为分析，可以在当前页加载下一页资源，提升速度<br>a) 可感知Loading(如进入空间游戏的Loading)<br>b) 不可感知的Loading（如提前加载下一页）</p>\n<h5 id=\"·-压缩图片\"><a href=\"#·-压缩图片\" class=\"headerlink\" title=\"· 压缩图片\"></a>· 压缩图片</h5><p>图片是最占流量的资源，因此尽量避免使用他，使用时选择最合适的格式（实现需求的前提下，以大小判断），合适的大小，然后使用智图压缩，同时在代码中用Srcset来按需显示<br>PS：过度压缩图片大小影响图片显示效果<br>a) 使用智图（ <a href=\"http://zhitu.isux.us/\">http://zhitu.isux.us/</a> ）<br>b) 使用其它方式代替图片(1. 使用CSS3 2. 使用SVG 3. 使用IconFont)<br>c) 使用Srcset<br>d) 选择合适的图片(1. webP优于JPG 2. PNG8优于GIF)<br>e) 选择合适的大小（1. 首次加载不大于1014KB 2. 不宽于640（基于手机屏幕一般宽度））</p>\n<h5 id=\"·-减少Cookie\"><a href=\"#·-减少Cookie\" class=\"headerlink\" title=\"· 减少Cookie\"></a>· 减少Cookie</h5><p>Cookie会影响加载速度，所以静态资源域名不使用Cookie</p>\n<h5 id=\"·-避免重定向\"><a href=\"#·-避免重定向\" class=\"headerlink\" title=\"· 避免重定向\"></a>· 避免重定向</h5><p>重定向会影响加载速度，所以在服务器正确设置避免重定向</p>\n<h5 id=\"·-异步加载第三方资源\"><a href=\"#·-异步加载第三方资源\" class=\"headerlink\" title=\"· 异步加载第三方资源\"></a>· 异步加载第三方资源</h5><p>第三方资源不可控会影响页面的加载和显示，因此要异步加载第三方资源</p>\n<h4 id=\"脚本执行优化\"><a href=\"#脚本执行优化\" class=\"headerlink\" title=\"[脚本执行优化]\"></a>[脚本执行优化]</h4><p>脚本处理不当会阻塞页面加载、渲染，因此在使用时需当注意</p>\n<h5 id=\"·-CSS写在头部，JavaScript写在尾部或异步\"><a href=\"#·-CSS写在头部，JavaScript写在尾部或异步\" class=\"headerlink\" title=\"· CSS写在头部，JavaScript写在尾部或异步\"></a>· CSS写在头部，JavaScript写在尾部或异步</h5><h5 id=\"·-避免图片和iFrame等的空Src\"><a href=\"#·-避免图片和iFrame等的空Src\" class=\"headerlink\" title=\"· 避免图片和iFrame等的空Src\"></a>· 避免图片和iFrame等的空Src</h5><p>空Src会重新加载当前页面，影响速度和效率</p>\n<h5 id=\"·-尽量避免重设图片大小\"><a href=\"#·-尽量避免重设图片大小\" class=\"headerlink\" title=\"· 尽量避免重设图片大小\"></a>· 尽量避免重设图片大小</h5><p>重设图片大小是指在页面、CSS、JavaScript等中多次重置图片大小，多次重设图片大小会引发图片的多次重绘，影响性能</p>\n<h5 id=\"·-图片尽量避免使用DataURL\"><a href=\"#·-图片尽量避免使用DataURL\" class=\"headerlink\" title=\"· 图片尽量避免使用DataURL\"></a>· 图片尽量避免使用DataURL</h5><p>DataURL图片没有使用图片的压缩算法文件会变大，并且要解码后再渲染，加载慢耗时长</p>\n<h4 id=\"CSS优化\"><a href=\"#CSS优化\" class=\"headerlink\" title=\"[CSS优化]\"></a>[CSS优化]</h4><h5 id=\"·-尽量避免写在HTML标签中写Style属性\"><a href=\"#·-尽量避免写在HTML标签中写Style属性\" class=\"headerlink\" title=\"· 尽量避免写在HTML标签中写Style属性\"></a>· 尽量避免写在HTML标签中写Style属性</h5><h5 id=\"·-避免CSS表达式\"><a href=\"#·-避免CSS表达式\" class=\"headerlink\" title=\"· 避免CSS表达式\"></a>· 避免CSS表达式</h5><p>CSS表达式的执行需跳出CSS树的渲染，因此请避免CSS表达式</p>\n<h5 id=\"·-移除空的CSS规则\"><a href=\"#·-移除空的CSS规则\" class=\"headerlink\" title=\"· 移除空的CSS规则\"></a>· 移除空的CSS规则</h5><p>空的CSS规则增加了CSS文件的大小，且影响CSS树的执行，所以需移除空的CSS规则</p>\n<h5 id=\"·-正确使用Display的属性\"><a href=\"#·-正确使用Display的属性\" class=\"headerlink\" title=\"· 正确使用Display的属性\"></a>· 正确使用Display的属性</h5><p>Display属性会影响页面的渲染，因此请合理使用<br>a) display:inline后不应该再使用width、height、margin、padding以及float<br>b) display:inline-block后不应该再使用float<br>c) display:block后不应该再使用vertical-align<br>d) display:table-*后不应该再使用margin或者float</p>\n<h5 id=\"·-不滥用Float\"><a href=\"#·-不滥用Float\" class=\"headerlink\" title=\"· 不滥用Float\"></a>· 不滥用Float</h5><p>Float在渲染时计算量比较大，尽量减少使用</p>\n<h5 id=\"·-不滥用Web字体\"><a href=\"#·-不滥用Web字体\" class=\"headerlink\" title=\"· 不滥用Web字体\"></a>· 不滥用Web字体</h5><p>Web字体需要下载，解析，重绘当前页面，尽量减少使用</p>\n<h5 id=\"·-不声明过多的Font-size\"><a href=\"#·-不声明过多的Font-size\" class=\"headerlink\" title=\"· 不声明过多的Font-size\"></a>· 不声明过多的Font-size</h5><p>过多的Font-size引发CSS树的效率</p>\n<h5 id=\"·-值为0时不需要任何单位\"><a href=\"#·-值为0时不需要任何单位\" class=\"headerlink\" title=\"· 值为0时不需要任何单位\"></a>· 值为0时不需要任何单位</h5><p>为了浏览器的兼容性和性能，值为0时不要带单位</p>\n<h5 id=\"·-标准化各种浏览器前缀\"><a href=\"#·-标准化各种浏览器前缀\" class=\"headerlink\" title=\"· 标准化各种浏览器前缀\"></a>· 标准化各种浏览器前缀</h5><p>a) 无前缀应放在最后<br>b) CSS动画只用 （-webkit- 无前缀）两种即可<br>c) 其它前缀为 -webkit- -moz- -ms- 无前缀 四种，（-o-Opera浏览器改用blink内核，所以淘汰）</p>\n<h5 id=\"·-避免让选择符看起来像正则表达式\"><a href=\"#·-避免让选择符看起来像正则表达式\" class=\"headerlink\" title=\"· 避免让选择符看起来像正则表达式\"></a>· 避免让选择符看起来像正则表达式</h5><p>高级选择器执行耗时长且不易读懂，避免使用</p>\n<h4 id=\"JavaScript执行优化\"><a href=\"#JavaScript执行优化\" class=\"headerlink\" title=\"[JavaScript执行优化]\"></a>[JavaScript执行优化]</h4><h5 id=\"·-减少重绘和回流\"><a href=\"#·-减少重绘和回流\" class=\"headerlink\" title=\"· 减少重绘和回流\"></a>· 减少重绘和回流</h5><p>a) 避免不必要的Dom操作<br>b) 尽量改变Class而不是Style，使用classList代替className<br>c) 避免使用document.write<br>d) 减少drawImage</p>\n<h5 id=\"·-缓存Dom选择与计算\"><a href=\"#·-缓存Dom选择与计算\" class=\"headerlink\" title=\"· 缓存Dom选择与计算\"></a>· 缓存Dom选择与计算</h5><p>每次Dom选择都要计算，缓存他</p>\n<h5 id=\"·-缓存列表-length\"><a href=\"#·-缓存列表-length\" class=\"headerlink\" title=\"· 缓存列表.length\"></a>· 缓存列表.length</h5><p>每次.length都要计算，用一个变量保存这个值</p>\n<h5 id=\"·-尽量使用事件代理，避免批量绑定事件\"><a href=\"#·-尽量使用事件代理，避免批量绑定事件\" class=\"headerlink\" title=\"· 尽量使用事件代理，避免批量绑定事件\"></a>· 尽量使用事件代理，避免批量绑定事件</h5><h5 id=\"·-尽量使用ID选择器\"><a href=\"#·-尽量使用ID选择器\" class=\"headerlink\" title=\"· 尽量使用ID选择器\"></a>· 尽量使用ID选择器</h5><p>ID选择器是最快的</p>\n<h5 id=\"·-TOUCH事件优化\"><a href=\"#·-TOUCH事件优化\" class=\"headerlink\" title=\"· TOUCH事件优化\"></a>· TOUCH事件优化</h5><p>使用touchstart、touchend代替click，因快影响速度快。但应注意Touch响应过快，易引发误操作</p>\n<h4 id=\"渲染优化\"><a href=\"#渲染优化\" class=\"headerlink\" title=\"[渲染优化]\"></a>[渲染优化]</h4><h5 id=\"·-HTML使用Viewport\"><a href=\"#·-HTML使用Viewport\" class=\"headerlink\" title=\"· HTML使用Viewport\"></a>· HTML使用Viewport</h5><p>Viewport可以加速页面的渲染，请使用以下代码</p>\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n\n<h5 id=\"·-减少Dom节点\"><a href=\"#·-减少Dom节点\" class=\"headerlink\" title=\"· 减少Dom节点\"></a>· 减少Dom节点</h5><p>Dom节点太多影响页面的渲染，应尽量减少Dom节点</p>\n<h5 id=\"·-动画优化\"><a href=\"#·-动画优化\" class=\"headerlink\" title=\"· 动画优化\"></a>· 动画优化</h5><p>a) 尽量使用CSS3动画<br>b) 合理使用requestAnimationFrame动画代替setTimeout<br>c) 适当使用Canvas动画 5个元素以内使用css动画，5个以上使用Canvas动画（iOS8可使用webGL）</p>\n<h5 id=\"·-高频事件优化\"><a href=\"#·-高频事件优化\" class=\"headerlink\" title=\"· 高频事件优化\"></a>· 高频事件优化</h5><p>Touchmove、Scroll 事件可导致多次渲染<br>a) 使用requestAnimationFrame监听帧变化，使得在正确的时间进行渲染<br>b) 增加响应变化的时间间隔，减少重绘次数</p>\n<h5 id=\"·-GPU加速\"><a href=\"#·-GPU加速\" class=\"headerlink\" title=\"· GPU加速\"></a>· GPU加速</h5><p>CSS中以下属性（CSS3 transitions、CSS3 3D transforms、Opacity、Canvas、WebGL、Video）来触发GPU渲染，请合理使用<br>PS：过渡使用会引发手机过耗电增加</p>"},{"title":"前端样式代码块","date":"2017-07-18T01:14:44.000Z","from":"原","_content":"\n\n#### 瀑布流布局\n\n```\n.masonry {\n  -webkit-column-count: 2;\n     -moz-column-count: 2;\n          column-count: 2;\n  -webkit-column-gap: 0;\n     -moz-column-gap: 0;\n          column-gap: 0;\n  counter-reset: item-counter;\n  padding:10rpx;\n}\n.item {\n  box-sizing: border-box;\n  -webkit-column-break-inside: avoid;\n     page-break-inside: avoid;\n          break-inside: avoid;\n\n  counter-increment: item-counter;\n  padding:10rpx;\n\n}\n.item__content {\n  position: relative;\n  display: flex;\n  -webkit-box-orient: vertical;\n  -webkit-box-direction: normal;\n      -ms-flex-direction: column;\n          flex-direction: column;\n  -webkit-box-pack: center;\n      -ms-flex-pack: center;\n          justify-content: center;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n  min-height: 100rpx;\n  font-size: 24rpx;\n  box-sizing: border-box;\n  white-space: normal;\n  word-break: break-all;\n  padding:15rpx;\n}\n\n<view class=\"masonry \">\n  <view class=\"item\" wx:for=\"{{list}}\" wx:key=\"id\" wx:for-item=\"item\">\n    <view class=\"item__content\">\n      {{item.content}}\n    </view>\n  </view>\n</view>\n\n```\n\n<!--more-->\n","source":"_posts/前端样式代码块.md","raw":"---\ntitle: 前端样式代码块\ntags:\n  - ''\ncategories:\n  - '前端'\n  - '代码块'\ndate: 2017-07-18 09:14:44\nfrom: '原'\n---\n\n\n#### 瀑布流布局\n\n```\n.masonry {\n  -webkit-column-count: 2;\n     -moz-column-count: 2;\n          column-count: 2;\n  -webkit-column-gap: 0;\n     -moz-column-gap: 0;\n          column-gap: 0;\n  counter-reset: item-counter;\n  padding:10rpx;\n}\n.item {\n  box-sizing: border-box;\n  -webkit-column-break-inside: avoid;\n     page-break-inside: avoid;\n          break-inside: avoid;\n\n  counter-increment: item-counter;\n  padding:10rpx;\n\n}\n.item__content {\n  position: relative;\n  display: flex;\n  -webkit-box-orient: vertical;\n  -webkit-box-direction: normal;\n      -ms-flex-direction: column;\n          flex-direction: column;\n  -webkit-box-pack: center;\n      -ms-flex-pack: center;\n          justify-content: center;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n  min-height: 100rpx;\n  font-size: 24rpx;\n  box-sizing: border-box;\n  white-space: normal;\n  word-break: break-all;\n  padding:15rpx;\n}\n\n<view class=\"masonry \">\n  <view class=\"item\" wx:for=\"{{list}}\" wx:key=\"id\" wx:for-item=\"item\">\n    <view class=\"item__content\">\n      {{item.content}}\n    </view>\n  </view>\n</view>\n\n```\n\n<!--more-->\n","slug":"前端样式代码块","published":1,"updated":"2017-07-27T01:46:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5naxw4x0019fcxe34rv8ld6","content":"<h4 id=\"瀑布流布局\"><a href=\"#瀑布流布局\" class=\"headerlink\" title=\"瀑布流布局\"></a>瀑布流布局</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\">.masonry &#123;</div><div class=\"line\">  -webkit-column-count: 2;</div><div class=\"line\">     -moz-column-count: 2;</div><div class=\"line\">          column-count: 2;</div><div class=\"line\">  -webkit-column-gap: 0;</div><div class=\"line\">     -moz-column-gap: 0;</div><div class=\"line\">          column-gap: 0;</div><div class=\"line\">  counter-reset: item-counter;</div><div class=\"line\">  padding:10rpx;</div><div class=\"line\">&#125;</div><div class=\"line\">.item &#123;</div><div class=\"line\">  box-sizing: border-box;</div><div class=\"line\">  -webkit-column-break-inside: avoid;</div><div class=\"line\">     page-break-inside: avoid;</div><div class=\"line\">          break-inside: avoid;</div><div class=\"line\"></div><div class=\"line\">  counter-increment: item-counter;</div><div class=\"line\">  padding:10rpx;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\">.item__content &#123;</div><div class=\"line\">  position: relative;</div><div class=\"line\">  display: flex;</div><div class=\"line\">  -webkit-box-orient: vertical;</div><div class=\"line\">  -webkit-box-direction: normal;</div><div class=\"line\">      -ms-flex-direction: column;</div><div class=\"line\">          flex-direction: column;</div><div class=\"line\">  -webkit-box-pack: center;</div><div class=\"line\">      -ms-flex-pack: center;</div><div class=\"line\">          justify-content: center;</div><div class=\"line\">  -webkit-box-align: center;</div><div class=\"line\">      -ms-flex-align: center;</div><div class=\"line\">          align-items: center;</div><div class=\"line\">  min-height: 100rpx;</div><div class=\"line\">  font-size: 24rpx;</div><div class=\"line\">  box-sizing: border-box;</div><div class=\"line\">  white-space: normal;</div><div class=\"line\">  word-break: break-all;</div><div class=\"line\">  padding:15rpx;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">&lt;view class=&quot;masonry &quot;&gt;</div><div class=\"line\">  &lt;view class=&quot;item&quot; wx:for=&quot;&#123;&#123;list&#125;&#125;&quot; wx:key=&quot;id&quot; wx:for-item=&quot;item&quot;&gt;</div><div class=\"line\">    &lt;view class=&quot;item__content&quot;&gt;</div><div class=\"line\">      &#123;&#123;item.content&#125;&#125;</div><div class=\"line\">    &lt;/view&gt;</div><div class=\"line\">  &lt;/view&gt;</div><div class=\"line\">&lt;/view&gt;</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n","excerpt":"<h4 id=\"瀑布流布局\"><a href=\"#瀑布流布局\" class=\"headerlink\" title=\"瀑布流布局\"></a>瀑布流布局</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\">.masonry &#123;</div><div class=\"line\">  -webkit-column-count: 2;</div><div class=\"line\">     -moz-column-count: 2;</div><div class=\"line\">          column-count: 2;</div><div class=\"line\">  -webkit-column-gap: 0;</div><div class=\"line\">     -moz-column-gap: 0;</div><div class=\"line\">          column-gap: 0;</div><div class=\"line\">  counter-reset: item-counter;</div><div class=\"line\">  padding:10rpx;</div><div class=\"line\">&#125;</div><div class=\"line\">.item &#123;</div><div class=\"line\">  box-sizing: border-box;</div><div class=\"line\">  -webkit-column-break-inside: avoid;</div><div class=\"line\">     page-break-inside: avoid;</div><div class=\"line\">          break-inside: avoid;</div><div class=\"line\"></div><div class=\"line\">  counter-increment: item-counter;</div><div class=\"line\">  padding:10rpx;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\">.item__content &#123;</div><div class=\"line\">  position: relative;</div><div class=\"line\">  display: flex;</div><div class=\"line\">  -webkit-box-orient: vertical;</div><div class=\"line\">  -webkit-box-direction: normal;</div><div class=\"line\">      -ms-flex-direction: column;</div><div class=\"line\">          flex-direction: column;</div><div class=\"line\">  -webkit-box-pack: center;</div><div class=\"line\">      -ms-flex-pack: center;</div><div class=\"line\">          justify-content: center;</div><div class=\"line\">  -webkit-box-align: center;</div><div class=\"line\">      -ms-flex-align: center;</div><div class=\"line\">          align-items: center;</div><div class=\"line\">  min-height: 100rpx;</div><div class=\"line\">  font-size: 24rpx;</div><div class=\"line\">  box-sizing: border-box;</div><div class=\"line\">  white-space: normal;</div><div class=\"line\">  word-break: break-all;</div><div class=\"line\">  padding:15rpx;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">&lt;view class=&quot;masonry &quot;&gt;</div><div class=\"line\">  &lt;view class=&quot;item&quot; wx:for=&quot;&#123;&#123;list&#125;&#125;&quot; wx:key=&quot;id&quot; wx:for-item=&quot;item&quot;&gt;</div><div class=\"line\">    &lt;view class=&quot;item__content&quot;&gt;</div><div class=\"line\">      &#123;&#123;item.content&#125;&#125;</div><div class=\"line\">    &lt;/view&gt;</div><div class=\"line\">  &lt;/view&gt;</div><div class=\"line\">&lt;/view&gt;</div></pre></td></tr></table></figure>","more":""},{"title":"前端疑难杂症","date":"2017-04-17T02:28:33.000Z","from":"原","_content":"\n### 苹果手机自动播放或者控制播放\n苹果手机audio标签单单控制play()没声音，需要通过再次加载音效\n```\n  if ($('#auidoSuccess').length) {\n\n       $('#auidoSuccess').attr('src', 'themes/audio/weixinyaoyy.mp3')\n\n       function audioAutoPlay(id) {\n           var audio = document.getElementById(id);\n           audio.load();\n           document.addEventListener(\"WeixinJSBridgeReady\", function () {\n               WeixinJSBridge.invoke('getNetworkType', {}, function (e) {\n                   audio.load();\n               });\n\n           }, false);\n           document.addEventListener('YixinJSBridgeReady', function () {\n               audio.load();\n           }, false);\n       }\n       audioAutoPlay('auidoSuccess')\n   }\n}\n\nplayMusic()\n```\n<!--more-->\n","source":"_posts/前端疑难杂症.md","raw":"---\ntitle: 前端疑难杂症\ntags:\n  - ''\ncategories:\n  - '前端'\n  - '知识点'\ndate: 2017-04-17 10:28:33\nfrom: '原'\n---\n\n### 苹果手机自动播放或者控制播放\n苹果手机audio标签单单控制play()没声音，需要通过再次加载音效\n```\n  if ($('#auidoSuccess').length) {\n\n       $('#auidoSuccess').attr('src', 'themes/audio/weixinyaoyy.mp3')\n\n       function audioAutoPlay(id) {\n           var audio = document.getElementById(id);\n           audio.load();\n           document.addEventListener(\"WeixinJSBridgeReady\", function () {\n               WeixinJSBridge.invoke('getNetworkType', {}, function (e) {\n                   audio.load();\n               });\n\n           }, false);\n           document.addEventListener('YixinJSBridgeReady', function () {\n               audio.load();\n           }, false);\n       }\n       audioAutoPlay('auidoSuccess')\n   }\n}\n\nplayMusic()\n```\n<!--more-->\n","slug":"前端疑难杂症","published":1,"updated":"2017-07-27T02:09:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5naxw4y001cfcxe590rcmk6","content":"<h3 id=\"苹果手机自动播放或者控制播放\"><a href=\"#苹果手机自动播放或者控制播放\" class=\"headerlink\" title=\"苹果手机自动播放或者控制播放\"></a>苹果手机自动播放或者控制播放</h3><p>苹果手机audio标签单单控制play()没声音，需要通过再次加载音效<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">  if ($(&apos;#auidoSuccess&apos;).length) &#123;</div><div class=\"line\"></div><div class=\"line\">       $(&apos;#auidoSuccess&apos;).attr(&apos;src&apos;, &apos;themes/audio/weixinyaoyy.mp3&apos;)</div><div class=\"line\"></div><div class=\"line\">       function audioAutoPlay(id) &#123;</div><div class=\"line\">           var audio = document.getElementById(id);</div><div class=\"line\">           audio.load();</div><div class=\"line\">           document.addEventListener(&quot;WeixinJSBridgeReady&quot;, function () &#123;</div><div class=\"line\">               WeixinJSBridge.invoke(&apos;getNetworkType&apos;, &#123;&#125;, function (e) &#123;</div><div class=\"line\">                   audio.load();</div><div class=\"line\">               &#125;);</div><div class=\"line\"></div><div class=\"line\">           &#125;, false);</div><div class=\"line\">           document.addEventListener(&apos;YixinJSBridgeReady&apos;, function () &#123;</div><div class=\"line\">               audio.load();</div><div class=\"line\">           &#125;, false);</div><div class=\"line\">       &#125;</div><div class=\"line\">       audioAutoPlay(&apos;auidoSuccess&apos;)</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">playMusic()</div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n","excerpt":"<h3 id=\"苹果手机自动播放或者控制播放\"><a href=\"#苹果手机自动播放或者控制播放\" class=\"headerlink\" title=\"苹果手机自动播放或者控制播放\"></a>苹果手机自动播放或者控制播放</h3><p>苹果手机audio标签单单控制play()没声音，需要通过再次加载音效<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">  if ($(&apos;#auidoSuccess&apos;).length) &#123;</div><div class=\"line\"></div><div class=\"line\">       $(&apos;#auidoSuccess&apos;).attr(&apos;src&apos;, &apos;themes/audio/weixinyaoyy.mp3&apos;)</div><div class=\"line\"></div><div class=\"line\">       function audioAutoPlay(id) &#123;</div><div class=\"line\">           var audio = document.getElementById(id);</div><div class=\"line\">           audio.load();</div><div class=\"line\">           document.addEventListener(&quot;WeixinJSBridgeReady&quot;, function () &#123;</div><div class=\"line\">               WeixinJSBridge.invoke(&apos;getNetworkType&apos;, &#123;&#125;, function (e) &#123;</div><div class=\"line\">                   audio.load();</div><div class=\"line\">               &#125;);</div><div class=\"line\"></div><div class=\"line\">           &#125;, false);</div><div class=\"line\">           document.addEventListener(&apos;YixinJSBridgeReady&apos;, function () &#123;</div><div class=\"line\">               audio.load();</div><div class=\"line\">           &#125;, false);</div><div class=\"line\">       &#125;</div><div class=\"line\">       audioAutoPlay(&apos;auidoSuccess&apos;)</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">playMusic()</div></pre></td></tr></table></figure></p>","more":""},{"title":"前端知识点1","date":"2017-04-06T09:42:41.000Z","_content":"#### 1. 常用那几种浏览器测试？有哪些内核(Layout Engine)?\n(Q1) 浏览器：IE，Chrome，FireFox，Safari，Opera。\n(Q2) 内核：Trident，Gecko，Presto，Webkit。\n<!--more-->\n#### 2. 说下行内元素和块级元素的区别？行内块元素的兼容性使用？（IE8 以下）\n(Q1) `行内元素`：会在水平方向排列，不能包含块级元素，设置width无效，height无效(可以设置line-height)，margin上下无效，padding上下无效。\n\n`块级元素`：各占据一行，垂直方向排列。从新行开始结束接着一个断行。\n\n(Q2)` 兼容性`：display:inline-block;*display:inline;*zoom:1;\n\n#### 3. 清除浮动有哪些方式？比较好的方式是哪一种？\n(Q1)\n（1）父级div定义height。\n（2）结尾处加空div标签clear:both。\n（3）父级div定义伪类:after和zoom。\n（4）父级div定义overflow:hidden。\n（5）父级div定义overflow:auto。\n（6）父级div也浮动，需要定义宽度。\n（7）父级div定义display:table。\n（8）结尾处加br标签clear:both。\n\n(Q2) 比较好的是第3种方式，好多网站都这么用。\n\n#### 4. box-sizing常用的属性有哪些？分别有什么作用？\n(Q1)box-sizing: content-box|border-box|inherit;\n\n(Q2)content-box:宽度和高度分别应用到元素的内容框。在宽度和高度之外绘制元素的内边距和边框(元素默认效果)。\nborder-box:元素指定的任何内边距和边框都将在已设定的宽度和高度内进行绘制。通过从已设定的宽度和高度分别减去边框和内边距才能得到内容的宽度和高度。\n\n#### 5. Doctype作用？标准模式与兼容模式各有什么区别?\n(Q1) <!DOCTYPE>告知浏览器的解析器用什么文档标准解析这个文档。DOCTYPE不存在或格式不正确会导致文档以兼容模式呈现。\n\n(Q2) 标准模式的排版和JS运作模式都是以该浏览器支持的最高标准运行。在兼容模式中，页面以宽松的向后兼容的方式显示,模拟老式浏览器的行为以防止站点无法工作。\n\n#### 6. HTML5 为什么只需要写 <!DOCTYPE HTML>？\nHTML5不基于 SGML，因此不需要对DTD进行引用，但是需要doctype来规范浏览器的行为（让浏览器按照它们应该的方式来运行）。\n\n而HTML4.01基于SGML,所以需要对DTD进行引用，才能告知浏览器文档所使用的文档类型。\n\n#### 7. 页面导入样式时，使用link和@import有什么区别？\n（1）link属于XHTML标签，除了加载CSS外，还能用于定义RSS, 定义rel连接属性等作用；而@import是CSS提供的，只能用于加载CSS;\n（2）页面被加载的时，link会同时被加载，而@import引用的CSS会等到页面被加载完再加载;\n（3）import是CSS2.1 提出的，只在IE5以上才能被识别，而link是XHTML标签，无兼容问题。\n\n#### 8. 介绍一下你对浏览器内核的理解？\n主要分成两部分：渲染引擎(layout engineer或Rendering Engine)和JS引擎。\n\n渲染引擎：负责取得网页的内容（HTML、XML、图像等等）、我们组建一大牛裙前面是4七一，整理讯息（例如加入CSS等），中间是零2七，以及计算网页的显示方式，后面是壹武四，是学习的就加，不是学习的请勿打扰。然后会输出至显示器或打印机。浏览器的内核的不同对于网页的语法解释会有不同，所以渲染的效果也不相同。所有网页浏览器、电子邮件客户端以及其它需要编辑、显示网络内容的应用程序都需要内核。\n\nJS引擎则：解析和执行javascript来实现网页的动态效果。\n\n最开始渲染引擎和JS引擎并没有区分的很明确，后来JS引擎越来越独立，内核就倾向于只指渲染引擎。\n\n#### 9. html5有哪些新特性？如何处理HTML5新标签的浏览器兼容问题？如何区分 HTML 和 HTML5？\n(Q1)\nHTML5 现在已经不是 SGML 的子集，主要是关于图像，位置，存储，多任务等功能的增加。\n(1)绘画 canvas;\n(2)用于媒介回放的 video 和 audio 元素;\n(3)本地离线存储 localStorage 长期存储数据，浏览器关闭后数据不丢失;\n(4)sessionStorage 的数据在浏览器关闭后自动删除;\n(5)语意化更好的内容元素，比如 article、footer、header、nav、section;\n(6)表单控件，calendar、date、time、email、url、search;\n(7)新的技术webworker, websocket, Geolocation;\n\n(Q2)\nIE8/IE7/IE6支持通过document.createElement方法产生的标签，\n可以利用这一特性让这些浏览器支持HTML5新标签，\n浏览器支持新标签后，还需要添加标签默认的样式。\n当然也可以直接使用成熟的框架、比如html5shim，\n\n< !--[if lt IE 9]>\n< ![endif]-->\n\n#### 10. 简述一下你对HTML语义化的理解？\n\n用正确的标签做正确的事情。\n\nhtml语义化让页面的内容结构化，结构更清晰，便于对浏览器、搜索引擎解析;\n即使在没有样式CSS情况下也以一种文档格式显示，并且是容易阅读的;\n搜索引擎的爬虫也依赖于HTML标记来确定上下文和各个关键字的权重，利于SEO;\n使阅读源代码的人对网站更容易将网站分块，便于阅读维护理解。\n\n\nJavaScript\n----------------------------\n\n#### 1. 介绍js的基本数据类型\n`Undefined、Null、Boolean、Number、String`\n\n#### 2. js有哪些内置对象？\n数据封装类对象：`Object、Array、Boolean、Number 和 String`\n其他对象：`Function、Arguments、Math、Date、RegExp、Error`\n\n#### 3. this对象的理解\nthis总是指向函数的直接调用者（而非间接调用者）；\n如果有new关键字，this指向new出来的那个对象；\n在事件中，this指向触发这个事件的对象，特殊的是，IE中的attachEvent中的this总是指向全局对象Window。\n\n#### 4. eval是做什么的？\n它的功能是把对应的字符串解析成JS代码并运行；\n应该避免使用eval，不安全，非常耗性能（2次，一次解析成js语句，一次执行）。\n由JSON字符串转换为JSON对象的时候可以用eval，var obj =eval('('+ str +')')。\n\n#### 5. DOM怎样添加、移除、移动、复制、创建和查找节点\n// 创建新节点\n```\ncreateDocumentFragment()    //创建一个DOM片段\ncreateElement()   //创建一个具体的元素\ncreateTextNode()   //创建一个文本节点\n```\n// 添加、移除、替换、插入\n```\nappendChild()\nremoveChild()\nreplaceChild()\ninsertBefore() //在已有的子节点前插入一个新的子节点\n```\n// 查找\n```\ngetElementsByTagName()    //通过标签名称\ngetElementsByName()    //通过元素的Name属性的值(IE容错能力较强，会得到一个数组，其中包括id等于name值的)\ngetElementById()    //通过元素Id，唯一性\n```\n#### 6. null和undefined的区别？\nnull是一个表示\"无\"的对象，转为数值时为0；undefined是一个表示\"无\"的原始值，转为数值时为NaN。\nundefined：\n（1）变量被声明了，但没有赋值时，就等于undefined。\n（2) 调用函数时，应该提供的参数没有提供，该参数等于undefined。\n（3）对象没有赋值的属性，该属性的值为undefined。\n（4）函数没有返回值时，默认返回undefined。\nnull：\n（1） 作为函数的参数，表示该函数的参数不是对象。\n（2） 作为对象原型链的终点。\n\n#### 7. new操作符具体干了什么呢?\n（1）创建一个空对象，并且 this 变量引用该对象，同时还继承了该函数的原型。\n（2）属性和方法被加入到 this 引用的对象中。\n（3）新创建的对象由 this 所引用，并且最后隐式的返回 this 。\n\n#### 8. JSON 的了解？\nJSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。它是基于JavaScript的一个子集。数据格式简单, 易于读写, 占用带宽小。\n格式：采用键值对，例如：{'age':'12', 'name':'back'}\n\n#### 9. call() 和 apply() 的区别和作用？\n`apply()`函数有两个参数：第一个参数是上下文，第二个参数是参数组成的数组。如果上下文是null，则使用全局对象代替。\n如：function.apply(this,[1,2,3]);\n`call()`的第一个参数是上下文，后续是实例传入的参数序列。\n如：function.call(this,1,2,3);\n\n#### 10. 如何获取UA？\n```\n   function whatBrowser() {  \n       document.Browser.Name.value=navigator.appName;  \n       document.Browser.Version.value=navigator.appVersion;  \n       document.Browser.Code.value=navigator.appCodeName;  \n       document.Browser.Agent.value=navigator.userAgent;  \n   }  \n```\n其他\n----------------------------\n\n#### 1. HTTP状态码知道哪些？\n100  Continue  继续，一般在发送post请求时，已发送了http header之后服务端将返回此信息，表示确认，之后发送具体参数信息\n200  OK   正常返回信息\n201  Created  请求成功并且服务器创建了新的资源\n202  Accepted  服务器已接受请求，但尚未处理\n301  Moved Permanently  请求的网页已永久移动到新位置。\n302 Found  临时性重定向。\n303 See Other  临时性重定向，且总是使用 GET 请求新的 URI。\n304  Not Modified  自从上次请求后，请求的网页未修改过。\n400 Bad Request  服务器无法理解请求的格式，客户端不应当尝试再次使用相同的内容发起请求。\n401 Unauthorized  请求未授权。\n403 Forbidden  禁止访问。\n404 Not Found  找不到如何与 URI 相匹配的资源。\n500 Internal Server Error  最常见的服务器端错误。\n503 Service Unavailable 服务器端暂时无法处理请求（可能是过载或维护）。\n\n#### 2. 你有哪些性能优化的方法？\n（1） 减少http请求次数：CSS Sprites, JS、CSS源码压缩、图片大小控制合适；网页Gzip，CDN托管，data缓存 ，图片服务器。\n（2） 前端模板 JS+数据，减少由于HTML标签导致的带宽浪费，前端用变量保存AJAX请求结果，每次操作本地变量，不用请求，减少请求次数\n（3） 用innerHTML代替DOM操作，减少DOM操作次数，优化javascript性能。\n（4） 当需要设置的样式很多时设置className而不是直接操作style。\n（5） 少用全局变量、缓存DOM节点查找的结果。减少IO读取操作。\n（6） 避免使用CSS Expression（css表达式)又称Dynamic properties(动态属性)。\n（7） 图片预加载，将样式表放在顶部，将脚本放在底部  加上时间戳。\n\n#### 3. 什么叫优雅降级和渐进增强？\n`优雅降级`：Web站点在所有新式浏览器中都能正常工作，如果用户使用的是老式浏览器，则代码会检查以确认它们是否能正常工作。由于IE独特的盒模型布局问题，针对不同版本的IE的hack实践过优雅降级了,为那些无法支持功能的浏览器增加候选方案，使之在旧式浏览器上以某种形式降级体验却不至于完全失效。\n`渐进增强`：从被所有浏览器支持的基本功能开始，逐步地添加那些只有新式浏览器才支持的功能,向页面增加无害于基础浏览器的额外样式和功能的。当浏览器支持时，它们会自动地呈现出来并发挥作用。\n\n#### 4. 哪些常见操作会造成内存泄漏？\n内存泄漏指任何对象在您不再拥有或需要它之后仍然存在。\n垃圾回收器定期扫描对象，并计算引用了每个对象的其他对象的数量。如果一个对象的引用数量为 0（没有其他对象引用过该对象），或对该对象的惟一引用是循环的，那么该对象的内存即可回收。\nsetTimeout 的第一个参数使用字符串而非函数的话，会引发内存泄漏。\n闭包、控制台日志、循环（在两个对象彼此引用且彼此保留时，就会产生一个循环）。\n\n#### 5. 线程与进程的区别\n一个程序至少有一个进程,一个进程至少有一个线程。\n线程的划分尺度小于进程，使得多线程程序的并发性高。\n另外，进程在执行过程中拥有独立的内存单元，而多个线程共享内存，从而极大地提高了程序的运行效率。\n线程在执行过程中与进程还是有区别的。每个独立的线程有一个程序运行的入口、顺序执行序列和程序的出口。但是线程不能够独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制。\n从逻辑角度来看，多线程的意义在于一个应用程序中，有多个执行部分可以同时执行。但操作系统并没有将多个线程看做多个独立的应用，来实现进程的调度和管理以及资源分配。这就是进程和线程的重要区别\n","source":"_posts/前端知识点1.md","raw":"---\ntitle: 前端知识点1\ndate: 2017-04-06 17:42:41\ntags: \"前端知识点\"\ncategories: [\"前端\",\"知识点\"]\n---\n#### 1. 常用那几种浏览器测试？有哪些内核(Layout Engine)?\n(Q1) 浏览器：IE，Chrome，FireFox，Safari，Opera。\n(Q2) 内核：Trident，Gecko，Presto，Webkit。\n<!--more-->\n#### 2. 说下行内元素和块级元素的区别？行内块元素的兼容性使用？（IE8 以下）\n(Q1) `行内元素`：会在水平方向排列，不能包含块级元素，设置width无效，height无效(可以设置line-height)，margin上下无效，padding上下无效。\n\n`块级元素`：各占据一行，垂直方向排列。从新行开始结束接着一个断行。\n\n(Q2)` 兼容性`：display:inline-block;*display:inline;*zoom:1;\n\n#### 3. 清除浮动有哪些方式？比较好的方式是哪一种？\n(Q1)\n（1）父级div定义height。\n（2）结尾处加空div标签clear:both。\n（3）父级div定义伪类:after和zoom。\n（4）父级div定义overflow:hidden。\n（5）父级div定义overflow:auto。\n（6）父级div也浮动，需要定义宽度。\n（7）父级div定义display:table。\n（8）结尾处加br标签clear:both。\n\n(Q2) 比较好的是第3种方式，好多网站都这么用。\n\n#### 4. box-sizing常用的属性有哪些？分别有什么作用？\n(Q1)box-sizing: content-box|border-box|inherit;\n\n(Q2)content-box:宽度和高度分别应用到元素的内容框。在宽度和高度之外绘制元素的内边距和边框(元素默认效果)。\nborder-box:元素指定的任何内边距和边框都将在已设定的宽度和高度内进行绘制。通过从已设定的宽度和高度分别减去边框和内边距才能得到内容的宽度和高度。\n\n#### 5. Doctype作用？标准模式与兼容模式各有什么区别?\n(Q1) <!DOCTYPE>告知浏览器的解析器用什么文档标准解析这个文档。DOCTYPE不存在或格式不正确会导致文档以兼容模式呈现。\n\n(Q2) 标准模式的排版和JS运作模式都是以该浏览器支持的最高标准运行。在兼容模式中，页面以宽松的向后兼容的方式显示,模拟老式浏览器的行为以防止站点无法工作。\n\n#### 6. HTML5 为什么只需要写 <!DOCTYPE HTML>？\nHTML5不基于 SGML，因此不需要对DTD进行引用，但是需要doctype来规范浏览器的行为（让浏览器按照它们应该的方式来运行）。\n\n而HTML4.01基于SGML,所以需要对DTD进行引用，才能告知浏览器文档所使用的文档类型。\n\n#### 7. 页面导入样式时，使用link和@import有什么区别？\n（1）link属于XHTML标签，除了加载CSS外，还能用于定义RSS, 定义rel连接属性等作用；而@import是CSS提供的，只能用于加载CSS;\n（2）页面被加载的时，link会同时被加载，而@import引用的CSS会等到页面被加载完再加载;\n（3）import是CSS2.1 提出的，只在IE5以上才能被识别，而link是XHTML标签，无兼容问题。\n\n#### 8. 介绍一下你对浏览器内核的理解？\n主要分成两部分：渲染引擎(layout engineer或Rendering Engine)和JS引擎。\n\n渲染引擎：负责取得网页的内容（HTML、XML、图像等等）、我们组建一大牛裙前面是4七一，整理讯息（例如加入CSS等），中间是零2七，以及计算网页的显示方式，后面是壹武四，是学习的就加，不是学习的请勿打扰。然后会输出至显示器或打印机。浏览器的内核的不同对于网页的语法解释会有不同，所以渲染的效果也不相同。所有网页浏览器、电子邮件客户端以及其它需要编辑、显示网络内容的应用程序都需要内核。\n\nJS引擎则：解析和执行javascript来实现网页的动态效果。\n\n最开始渲染引擎和JS引擎并没有区分的很明确，后来JS引擎越来越独立，内核就倾向于只指渲染引擎。\n\n#### 9. html5有哪些新特性？如何处理HTML5新标签的浏览器兼容问题？如何区分 HTML 和 HTML5？\n(Q1)\nHTML5 现在已经不是 SGML 的子集，主要是关于图像，位置，存储，多任务等功能的增加。\n(1)绘画 canvas;\n(2)用于媒介回放的 video 和 audio 元素;\n(3)本地离线存储 localStorage 长期存储数据，浏览器关闭后数据不丢失;\n(4)sessionStorage 的数据在浏览器关闭后自动删除;\n(5)语意化更好的内容元素，比如 article、footer、header、nav、section;\n(6)表单控件，calendar、date、time、email、url、search;\n(7)新的技术webworker, websocket, Geolocation;\n\n(Q2)\nIE8/IE7/IE6支持通过document.createElement方法产生的标签，\n可以利用这一特性让这些浏览器支持HTML5新标签，\n浏览器支持新标签后，还需要添加标签默认的样式。\n当然也可以直接使用成熟的框架、比如html5shim，\n\n< !--[if lt IE 9]>\n< ![endif]-->\n\n#### 10. 简述一下你对HTML语义化的理解？\n\n用正确的标签做正确的事情。\n\nhtml语义化让页面的内容结构化，结构更清晰，便于对浏览器、搜索引擎解析;\n即使在没有样式CSS情况下也以一种文档格式显示，并且是容易阅读的;\n搜索引擎的爬虫也依赖于HTML标记来确定上下文和各个关键字的权重，利于SEO;\n使阅读源代码的人对网站更容易将网站分块，便于阅读维护理解。\n\n\nJavaScript\n----------------------------\n\n#### 1. 介绍js的基本数据类型\n`Undefined、Null、Boolean、Number、String`\n\n#### 2. js有哪些内置对象？\n数据封装类对象：`Object、Array、Boolean、Number 和 String`\n其他对象：`Function、Arguments、Math、Date、RegExp、Error`\n\n#### 3. this对象的理解\nthis总是指向函数的直接调用者（而非间接调用者）；\n如果有new关键字，this指向new出来的那个对象；\n在事件中，this指向触发这个事件的对象，特殊的是，IE中的attachEvent中的this总是指向全局对象Window。\n\n#### 4. eval是做什么的？\n它的功能是把对应的字符串解析成JS代码并运行；\n应该避免使用eval，不安全，非常耗性能（2次，一次解析成js语句，一次执行）。\n由JSON字符串转换为JSON对象的时候可以用eval，var obj =eval('('+ str +')')。\n\n#### 5. DOM怎样添加、移除、移动、复制、创建和查找节点\n// 创建新节点\n```\ncreateDocumentFragment()    //创建一个DOM片段\ncreateElement()   //创建一个具体的元素\ncreateTextNode()   //创建一个文本节点\n```\n// 添加、移除、替换、插入\n```\nappendChild()\nremoveChild()\nreplaceChild()\ninsertBefore() //在已有的子节点前插入一个新的子节点\n```\n// 查找\n```\ngetElementsByTagName()    //通过标签名称\ngetElementsByName()    //通过元素的Name属性的值(IE容错能力较强，会得到一个数组，其中包括id等于name值的)\ngetElementById()    //通过元素Id，唯一性\n```\n#### 6. null和undefined的区别？\nnull是一个表示\"无\"的对象，转为数值时为0；undefined是一个表示\"无\"的原始值，转为数值时为NaN。\nundefined：\n（1）变量被声明了，但没有赋值时，就等于undefined。\n（2) 调用函数时，应该提供的参数没有提供，该参数等于undefined。\n（3）对象没有赋值的属性，该属性的值为undefined。\n（4）函数没有返回值时，默认返回undefined。\nnull：\n（1） 作为函数的参数，表示该函数的参数不是对象。\n（2） 作为对象原型链的终点。\n\n#### 7. new操作符具体干了什么呢?\n（1）创建一个空对象，并且 this 变量引用该对象，同时还继承了该函数的原型。\n（2）属性和方法被加入到 this 引用的对象中。\n（3）新创建的对象由 this 所引用，并且最后隐式的返回 this 。\n\n#### 8. JSON 的了解？\nJSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。它是基于JavaScript的一个子集。数据格式简单, 易于读写, 占用带宽小。\n格式：采用键值对，例如：{'age':'12', 'name':'back'}\n\n#### 9. call() 和 apply() 的区别和作用？\n`apply()`函数有两个参数：第一个参数是上下文，第二个参数是参数组成的数组。如果上下文是null，则使用全局对象代替。\n如：function.apply(this,[1,2,3]);\n`call()`的第一个参数是上下文，后续是实例传入的参数序列。\n如：function.call(this,1,2,3);\n\n#### 10. 如何获取UA？\n```\n   function whatBrowser() {  \n       document.Browser.Name.value=navigator.appName;  \n       document.Browser.Version.value=navigator.appVersion;  \n       document.Browser.Code.value=navigator.appCodeName;  \n       document.Browser.Agent.value=navigator.userAgent;  \n   }  \n```\n其他\n----------------------------\n\n#### 1. HTTP状态码知道哪些？\n100  Continue  继续，一般在发送post请求时，已发送了http header之后服务端将返回此信息，表示确认，之后发送具体参数信息\n200  OK   正常返回信息\n201  Created  请求成功并且服务器创建了新的资源\n202  Accepted  服务器已接受请求，但尚未处理\n301  Moved Permanently  请求的网页已永久移动到新位置。\n302 Found  临时性重定向。\n303 See Other  临时性重定向，且总是使用 GET 请求新的 URI。\n304  Not Modified  自从上次请求后，请求的网页未修改过。\n400 Bad Request  服务器无法理解请求的格式，客户端不应当尝试再次使用相同的内容发起请求。\n401 Unauthorized  请求未授权。\n403 Forbidden  禁止访问。\n404 Not Found  找不到如何与 URI 相匹配的资源。\n500 Internal Server Error  最常见的服务器端错误。\n503 Service Unavailable 服务器端暂时无法处理请求（可能是过载或维护）。\n\n#### 2. 你有哪些性能优化的方法？\n（1） 减少http请求次数：CSS Sprites, JS、CSS源码压缩、图片大小控制合适；网页Gzip，CDN托管，data缓存 ，图片服务器。\n（2） 前端模板 JS+数据，减少由于HTML标签导致的带宽浪费，前端用变量保存AJAX请求结果，每次操作本地变量，不用请求，减少请求次数\n（3） 用innerHTML代替DOM操作，减少DOM操作次数，优化javascript性能。\n（4） 当需要设置的样式很多时设置className而不是直接操作style。\n（5） 少用全局变量、缓存DOM节点查找的结果。减少IO读取操作。\n（6） 避免使用CSS Expression（css表达式)又称Dynamic properties(动态属性)。\n（7） 图片预加载，将样式表放在顶部，将脚本放在底部  加上时间戳。\n\n#### 3. 什么叫优雅降级和渐进增强？\n`优雅降级`：Web站点在所有新式浏览器中都能正常工作，如果用户使用的是老式浏览器，则代码会检查以确认它们是否能正常工作。由于IE独特的盒模型布局问题，针对不同版本的IE的hack实践过优雅降级了,为那些无法支持功能的浏览器增加候选方案，使之在旧式浏览器上以某种形式降级体验却不至于完全失效。\n`渐进增强`：从被所有浏览器支持的基本功能开始，逐步地添加那些只有新式浏览器才支持的功能,向页面增加无害于基础浏览器的额外样式和功能的。当浏览器支持时，它们会自动地呈现出来并发挥作用。\n\n#### 4. 哪些常见操作会造成内存泄漏？\n内存泄漏指任何对象在您不再拥有或需要它之后仍然存在。\n垃圾回收器定期扫描对象，并计算引用了每个对象的其他对象的数量。如果一个对象的引用数量为 0（没有其他对象引用过该对象），或对该对象的惟一引用是循环的，那么该对象的内存即可回收。\nsetTimeout 的第一个参数使用字符串而非函数的话，会引发内存泄漏。\n闭包、控制台日志、循环（在两个对象彼此引用且彼此保留时，就会产生一个循环）。\n\n#### 5. 线程与进程的区别\n一个程序至少有一个进程,一个进程至少有一个线程。\n线程的划分尺度小于进程，使得多线程程序的并发性高。\n另外，进程在执行过程中拥有独立的内存单元，而多个线程共享内存，从而极大地提高了程序的运行效率。\n线程在执行过程中与进程还是有区别的。每个独立的线程有一个程序运行的入口、顺序执行序列和程序的出口。但是线程不能够独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制。\n从逻辑角度来看，多线程的意义在于一个应用程序中，有多个执行部分可以同时执行。但操作系统并没有将多个线程看做多个独立的应用，来实现进程的调度和管理以及资源分配。这就是进程和线程的重要区别\n","slug":"前端知识点1","published":1,"updated":"2017-04-10T10:29:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5naxw4z001gfcxedz34l7sk","content":"<h4 id=\"1-常用那几种浏览器测试？有哪些内核-Layout-Engine\"><a href=\"#1-常用那几种浏览器测试？有哪些内核-Layout-Engine\" class=\"headerlink\" title=\"1. 常用那几种浏览器测试？有哪些内核(Layout Engine)?\"></a>1. 常用那几种浏览器测试？有哪些内核(Layout Engine)?</h4><p>(Q1) 浏览器：IE，Chrome，FireFox，Safari，Opera。<br>(Q2) 内核：Trident，Gecko，Presto，Webkit。<br><a id=\"more\"></a></p>\n<h4 id=\"2-说下行内元素和块级元素的区别？行内块元素的兼容性使用？（IE8-以下）\"><a href=\"#2-说下行内元素和块级元素的区别？行内块元素的兼容性使用？（IE8-以下）\" class=\"headerlink\" title=\"2. 说下行内元素和块级元素的区别？行内块元素的兼容性使用？（IE8 以下）\"></a>2. 说下行内元素和块级元素的区别？行内块元素的兼容性使用？（IE8 以下）</h4><p>(Q1) <code>行内元素</code>：会在水平方向排列，不能包含块级元素，设置width无效，height无效(可以设置line-height)，margin上下无效，padding上下无效。</p>\n<p><code>块级元素</code>：各占据一行，垂直方向排列。从新行开始结束接着一个断行。</p>\n<p>(Q2)<code>兼容性</code>：display:inline-block;<em>display:inline;</em>zoom:1;</p>\n<h4 id=\"3-清除浮动有哪些方式？比较好的方式是哪一种？\"><a href=\"#3-清除浮动有哪些方式？比较好的方式是哪一种？\" class=\"headerlink\" title=\"3. 清除浮动有哪些方式？比较好的方式是哪一种？\"></a>3. 清除浮动有哪些方式？比较好的方式是哪一种？</h4><p>(Q1)<br>（1）父级div定义height。<br>（2）结尾处加空div标签clear:both。<br>（3）父级div定义伪类:after和zoom。<br>（4）父级div定义overflow:hidden。<br>（5）父级div定义overflow:auto。<br>（6）父级div也浮动，需要定义宽度。<br>（7）父级div定义display:table。<br>（8）结尾处加br标签clear:both。</p>\n<p>(Q2) 比较好的是第3种方式，好多网站都这么用。</p>\n<h4 id=\"4-box-sizing常用的属性有哪些？分别有什么作用？\"><a href=\"#4-box-sizing常用的属性有哪些？分别有什么作用？\" class=\"headerlink\" title=\"4. box-sizing常用的属性有哪些？分别有什么作用？\"></a>4. box-sizing常用的属性有哪些？分别有什么作用？</h4><p>(Q1)box-sizing: content-box|border-box|inherit;</p>\n<p>(Q2)content-box:宽度和高度分别应用到元素的内容框。在宽度和高度之外绘制元素的内边距和边框(元素默认效果)。<br>border-box:元素指定的任何内边距和边框都将在已设定的宽度和高度内进行绘制。通过从已设定的宽度和高度分别减去边框和内边距才能得到内容的宽度和高度。</p>\n<h4 id=\"5-Doctype作用？标准模式与兼容模式各有什么区别\"><a href=\"#5-Doctype作用？标准模式与兼容模式各有什么区别\" class=\"headerlink\" title=\"5. Doctype作用？标准模式与兼容模式各有什么区别?\"></a>5. Doctype作用？标准模式与兼容模式各有什么区别?</h4><p>(Q1) &lt;!DOCTYPE&gt;告知浏览器的解析器用什么文档标准解析这个文档。DOCTYPE不存在或格式不正确会导致文档以兼容模式呈现。</p>\n<p>(Q2) 标准模式的排版和JS运作模式都是以该浏览器支持的最高标准运行。在兼容模式中，页面以宽松的向后兼容的方式显示,模拟老式浏览器的行为以防止站点无法工作。</p>\n<h4 id=\"6-HTML5-为什么只需要写-lt-DOCTYPE-HTML-gt-？\"><a href=\"#6-HTML5-为什么只需要写-lt-DOCTYPE-HTML-gt-？\" class=\"headerlink\" title=\"6. HTML5 为什么只需要写 &lt;!DOCTYPE HTML&gt;？\"></a>6. HTML5 为什么只需要写 &lt;!DOCTYPE HTML&gt;？</h4><p>HTML5不基于 SGML，因此不需要对DTD进行引用，但是需要doctype来规范浏览器的行为（让浏览器按照它们应该的方式来运行）。</p>\n<p>而HTML4.01基于SGML,所以需要对DTD进行引用，才能告知浏览器文档所使用的文档类型。</p>\n<h4 id=\"7-页面导入样式时，使用link和-import有什么区别？\"><a href=\"#7-页面导入样式时，使用link和-import有什么区别？\" class=\"headerlink\" title=\"7. 页面导入样式时，使用link和@import有什么区别？\"></a>7. 页面导入样式时，使用link和@import有什么区别？</h4><p>（1）link属于XHTML标签，除了加载CSS外，还能用于定义RSS, 定义rel连接属性等作用；而@import是CSS提供的，只能用于加载CSS;<br>（2）页面被加载的时，link会同时被加载，而@import引用的CSS会等到页面被加载完再加载;<br>（3）import是CSS2.1 提出的，只在IE5以上才能被识别，而link是XHTML标签，无兼容问题。</p>\n<h4 id=\"8-介绍一下你对浏览器内核的理解？\"><a href=\"#8-介绍一下你对浏览器内核的理解？\" class=\"headerlink\" title=\"8. 介绍一下你对浏览器内核的理解？\"></a>8. 介绍一下你对浏览器内核的理解？</h4><p>主要分成两部分：渲染引擎(layout engineer或Rendering Engine)和JS引擎。</p>\n<p>渲染引擎：负责取得网页的内容（HTML、XML、图像等等）、我们组建一大牛裙前面是4七一，整理讯息（例如加入CSS等），中间是零2七，以及计算网页的显示方式，后面是壹武四，是学习的就加，不是学习的请勿打扰。然后会输出至显示器或打印机。浏览器的内核的不同对于网页的语法解释会有不同，所以渲染的效果也不相同。所有网页浏览器、电子邮件客户端以及其它需要编辑、显示网络内容的应用程序都需要内核。</p>\n<p>JS引擎则：解析和执行javascript来实现网页的动态效果。</p>\n<p>最开始渲染引擎和JS引擎并没有区分的很明确，后来JS引擎越来越独立，内核就倾向于只指渲染引擎。</p>\n<h4 id=\"9-html5有哪些新特性？如何处理HTML5新标签的浏览器兼容问题？如何区分-HTML-和-HTML5？\"><a href=\"#9-html5有哪些新特性？如何处理HTML5新标签的浏览器兼容问题？如何区分-HTML-和-HTML5？\" class=\"headerlink\" title=\"9. html5有哪些新特性？如何处理HTML5新标签的浏览器兼容问题？如何区分 HTML 和 HTML5？\"></a>9. html5有哪些新特性？如何处理HTML5新标签的浏览器兼容问题？如何区分 HTML 和 HTML5？</h4><p>(Q1)<br>HTML5 现在已经不是 SGML 的子集，主要是关于图像，位置，存储，多任务等功能的增加。<br>(1)绘画 canvas;<br>(2)用于媒介回放的 video 和 audio 元素;<br>(3)本地离线存储 localStorage 长期存储数据，浏览器关闭后数据不丢失;<br>(4)sessionStorage 的数据在浏览器关闭后自动删除;<br>(5)语意化更好的内容元素，比如 article、footer、header、nav、section;<br>(6)表单控件，calendar、date、time、email、url、search;<br>(7)新的技术webworker, websocket, Geolocation;</p>\n<p>(Q2)<br>IE8/IE7/IE6支持通过document.createElement方法产生的标签，<br>可以利用这一特性让这些浏览器支持HTML5新标签，<br>浏览器支持新标签后，还需要添加标签默认的样式。<br>当然也可以直接使用成熟的框架、比如html5shim，</p>\n<p>&lt; !–[if lt IE 9]&gt;<br>&lt; ![endif]–&gt;</p>\n<h4 id=\"10-简述一下你对HTML语义化的理解？\"><a href=\"#10-简述一下你对HTML语义化的理解？\" class=\"headerlink\" title=\"10. 简述一下你对HTML语义化的理解？\"></a>10. 简述一下你对HTML语义化的理解？</h4><p>用正确的标签做正确的事情。</p>\n<p>html语义化让页面的内容结构化，结构更清晰，便于对浏览器、搜索引擎解析;<br>即使在没有样式CSS情况下也以一种文档格式显示，并且是容易阅读的;<br>搜索引擎的爬虫也依赖于HTML标记来确定上下文和各个关键字的权重，利于SEO;<br>使阅读源代码的人对网站更容易将网站分块，便于阅读维护理解。</p>\n<h2 id=\"JavaScript\"><a href=\"#JavaScript\" class=\"headerlink\" title=\"JavaScript\"></a>JavaScript</h2><h4 id=\"1-介绍js的基本数据类型\"><a href=\"#1-介绍js的基本数据类型\" class=\"headerlink\" title=\"1. 介绍js的基本数据类型\"></a>1. 介绍js的基本数据类型</h4><p><code>Undefined、Null、Boolean、Number、String</code></p>\n<h4 id=\"2-js有哪些内置对象？\"><a href=\"#2-js有哪些内置对象？\" class=\"headerlink\" title=\"2. js有哪些内置对象？\"></a>2. js有哪些内置对象？</h4><p>数据封装类对象：<code>Object、Array、Boolean、Number 和 String</code><br>其他对象：<code>Function、Arguments、Math、Date、RegExp、Error</code></p>\n<h4 id=\"3-this对象的理解\"><a href=\"#3-this对象的理解\" class=\"headerlink\" title=\"3. this对象的理解\"></a>3. this对象的理解</h4><p>this总是指向函数的直接调用者（而非间接调用者）；<br>如果有new关键字，this指向new出来的那个对象；<br>在事件中，this指向触发这个事件的对象，特殊的是，IE中的attachEvent中的this总是指向全局对象Window。</p>\n<h4 id=\"4-eval是做什么的？\"><a href=\"#4-eval是做什么的？\" class=\"headerlink\" title=\"4. eval是做什么的？\"></a>4. eval是做什么的？</h4><p>它的功能是把对应的字符串解析成JS代码并运行；<br>应该避免使用eval，不安全，非常耗性能（2次，一次解析成js语句，一次执行）。<br>由JSON字符串转换为JSON对象的时候可以用eval，var obj =eval(‘(‘+ str +’)’)。</p>\n<h4 id=\"5-DOM怎样添加、移除、移动、复制、创建和查找节点\"><a href=\"#5-DOM怎样添加、移除、移动、复制、创建和查找节点\" class=\"headerlink\" title=\"5. DOM怎样添加、移除、移动、复制、创建和查找节点\"></a>5. DOM怎样添加、移除、移动、复制、创建和查找节点</h4><p>// 创建新节点<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">createDocumentFragment()    //创建一个DOM片段</div><div class=\"line\">createElement()   //创建一个具体的元素</div><div class=\"line\">createTextNode()   //创建一个文本节点</div></pre></td></tr></table></figure></p>\n<p>// 添加、移除、替换、插入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">appendChild()</div><div class=\"line\">removeChild()</div><div class=\"line\">replaceChild()</div><div class=\"line\">insertBefore() //在已有的子节点前插入一个新的子节点</div></pre></td></tr></table></figure></p>\n<p>// 查找<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">getElementsByTagName()    //通过标签名称</div><div class=\"line\">getElementsByName()    //通过元素的Name属性的值(IE容错能力较强，会得到一个数组，其中包括id等于name值的)</div><div class=\"line\">getElementById()    //通过元素Id，唯一性</div></pre></td></tr></table></figure></p>\n<h4 id=\"6-null和undefined的区别？\"><a href=\"#6-null和undefined的区别？\" class=\"headerlink\" title=\"6. null和undefined的区别？\"></a>6. null和undefined的区别？</h4><p>null是一个表示”无”的对象，转为数值时为0；undefined是一个表示”无”的原始值，转为数值时为NaN。<br>undefined：<br>（1）变量被声明了，但没有赋值时，就等于undefined。<br>（2) 调用函数时，应该提供的参数没有提供，该参数等于undefined。<br>（3）对象没有赋值的属性，该属性的值为undefined。<br>（4）函数没有返回值时，默认返回undefined。<br>null：<br>（1） 作为函数的参数，表示该函数的参数不是对象。<br>（2） 作为对象原型链的终点。</p>\n<h4 id=\"7-new操作符具体干了什么呢\"><a href=\"#7-new操作符具体干了什么呢\" class=\"headerlink\" title=\"7. new操作符具体干了什么呢?\"></a>7. new操作符具体干了什么呢?</h4><p>（1）创建一个空对象，并且 this 变量引用该对象，同时还继承了该函数的原型。<br>（2）属性和方法被加入到 this 引用的对象中。<br>（3）新创建的对象由 this 所引用，并且最后隐式的返回 this 。</p>\n<h4 id=\"8-JSON-的了解？\"><a href=\"#8-JSON-的了解？\" class=\"headerlink\" title=\"8. JSON 的了解？\"></a>8. JSON 的了解？</h4><p>JSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。它是基于JavaScript的一个子集。数据格式简单, 易于读写, 占用带宽小。<br>格式：采用键值对，例如：{‘age’:’12’, ‘name’:’back’}</p>\n<h4 id=\"9-call-和-apply-的区别和作用？\"><a href=\"#9-call-和-apply-的区别和作用？\" class=\"headerlink\" title=\"9. call() 和 apply() 的区别和作用？\"></a>9. call() 和 apply() 的区别和作用？</h4><p><code>apply()</code>函数有两个参数：第一个参数是上下文，第二个参数是参数组成的数组。如果上下文是null，则使用全局对象代替。<br>如：function.apply(this,[1,2,3]);<br><code>call()</code>的第一个参数是上下文，后续是实例传入的参数序列。<br>如：function.call(this,1,2,3);</p>\n<h4 id=\"10-如何获取UA？\"><a href=\"#10-如何获取UA？\" class=\"headerlink\" title=\"10. 如何获取UA？\"></a>10. 如何获取UA？</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">function whatBrowser() &#123;  </div><div class=\"line\">    document.Browser.Name.value=navigator.appName;  </div><div class=\"line\">    document.Browser.Version.value=navigator.appVersion;  </div><div class=\"line\">    document.Browser.Code.value=navigator.appCodeName;  </div><div class=\"line\">    document.Browser.Agent.value=navigator.userAgent;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><h4 id=\"1-HTTP状态码知道哪些？\"><a href=\"#1-HTTP状态码知道哪些？\" class=\"headerlink\" title=\"1. HTTP状态码知道哪些？\"></a>1. HTTP状态码知道哪些？</h4><p>100  Continue  继续，一般在发送post请求时，已发送了http header之后服务端将返回此信息，表示确认，之后发送具体参数信息<br>200  OK   正常返回信息<br>201  Created  请求成功并且服务器创建了新的资源<br>202  Accepted  服务器已接受请求，但尚未处理<br>301  Moved Permanently  请求的网页已永久移动到新位置。<br>302 Found  临时性重定向。<br>303 See Other  临时性重定向，且总是使用 GET 请求新的 URI。<br>304  Not Modified  自从上次请求后，请求的网页未修改过。<br>400 Bad Request  服务器无法理解请求的格式，客户端不应当尝试再次使用相同的内容发起请求。<br>401 Unauthorized  请求未授权。<br>403 Forbidden  禁止访问。<br>404 Not Found  找不到如何与 URI 相匹配的资源。<br>500 Internal Server Error  最常见的服务器端错误。<br>503 Service Unavailable 服务器端暂时无法处理请求（可能是过载或维护）。</p>\n<h4 id=\"2-你有哪些性能优化的方法？\"><a href=\"#2-你有哪些性能优化的方法？\" class=\"headerlink\" title=\"2. 你有哪些性能优化的方法？\"></a>2. 你有哪些性能优化的方法？</h4><p>（1） 减少http请求次数：CSS Sprites, JS、CSS源码压缩、图片大小控制合适；网页Gzip，CDN托管，data缓存 ，图片服务器。<br>（2） 前端模板 JS+数据，减少由于HTML标签导致的带宽浪费，前端用变量保存AJAX请求结果，每次操作本地变量，不用请求，减少请求次数<br>（3） 用innerHTML代替DOM操作，减少DOM操作次数，优化javascript性能。<br>（4） 当需要设置的样式很多时设置className而不是直接操作style。<br>（5） 少用全局变量、缓存DOM节点查找的结果。减少IO读取操作。<br>（6） 避免使用CSS Expression（css表达式)又称Dynamic properties(动态属性)。<br>（7） 图片预加载，将样式表放在顶部，将脚本放在底部  加上时间戳。</p>\n<h4 id=\"3-什么叫优雅降级和渐进增强？\"><a href=\"#3-什么叫优雅降级和渐进增强？\" class=\"headerlink\" title=\"3. 什么叫优雅降级和渐进增强？\"></a>3. 什么叫优雅降级和渐进增强？</h4><p><code>优雅降级</code>：Web站点在所有新式浏览器中都能正常工作，如果用户使用的是老式浏览器，则代码会检查以确认它们是否能正常工作。由于IE独特的盒模型布局问题，针对不同版本的IE的hack实践过优雅降级了,为那些无法支持功能的浏览器增加候选方案，使之在旧式浏览器上以某种形式降级体验却不至于完全失效。<br><code>渐进增强</code>：从被所有浏览器支持的基本功能开始，逐步地添加那些只有新式浏览器才支持的功能,向页面增加无害于基础浏览器的额外样式和功能的。当浏览器支持时，它们会自动地呈现出来并发挥作用。</p>\n<h4 id=\"4-哪些常见操作会造成内存泄漏？\"><a href=\"#4-哪些常见操作会造成内存泄漏？\" class=\"headerlink\" title=\"4. 哪些常见操作会造成内存泄漏？\"></a>4. 哪些常见操作会造成内存泄漏？</h4><p>内存泄漏指任何对象在您不再拥有或需要它之后仍然存在。<br>垃圾回收器定期扫描对象，并计算引用了每个对象的其他对象的数量。如果一个对象的引用数量为 0（没有其他对象引用过该对象），或对该对象的惟一引用是循环的，那么该对象的内存即可回收。<br>setTimeout 的第一个参数使用字符串而非函数的话，会引发内存泄漏。<br>闭包、控制台日志、循环（在两个对象彼此引用且彼此保留时，就会产生一个循环）。</p>\n<h4 id=\"5-线程与进程的区别\"><a href=\"#5-线程与进程的区别\" class=\"headerlink\" title=\"5. 线程与进程的区别\"></a>5. 线程与进程的区别</h4><p>一个程序至少有一个进程,一个进程至少有一个线程。<br>线程的划分尺度小于进程，使得多线程程序的并发性高。<br>另外，进程在执行过程中拥有独立的内存单元，而多个线程共享内存，从而极大地提高了程序的运行效率。<br>线程在执行过程中与进程还是有区别的。每个独立的线程有一个程序运行的入口、顺序执行序列和程序的出口。但是线程不能够独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制。<br>从逻辑角度来看，多线程的意义在于一个应用程序中，有多个执行部分可以同时执行。但操作系统并没有将多个线程看做多个独立的应用，来实现进程的调度和管理以及资源分配。这就是进程和线程的重要区别</p>\n","excerpt":"<h4 id=\"1-常用那几种浏览器测试？有哪些内核-Layout-Engine\"><a href=\"#1-常用那几种浏览器测试？有哪些内核-Layout-Engine\" class=\"headerlink\" title=\"1. 常用那几种浏览器测试？有哪些内核(Layout Engine)?\"></a>1. 常用那几种浏览器测试？有哪些内核(Layout Engine)?</h4><p>(Q1) 浏览器：IE，Chrome，FireFox，Safari，Opera。<br>(Q2) 内核：Trident，Gecko，Presto，Webkit。<br>","more":"</p>\n<h4 id=\"2-说下行内元素和块级元素的区别？行内块元素的兼容性使用？（IE8-以下）\"><a href=\"#2-说下行内元素和块级元素的区别？行内块元素的兼容性使用？（IE8-以下）\" class=\"headerlink\" title=\"2. 说下行内元素和块级元素的区别？行内块元素的兼容性使用？（IE8 以下）\"></a>2. 说下行内元素和块级元素的区别？行内块元素的兼容性使用？（IE8 以下）</h4><p>(Q1) <code>行内元素</code>：会在水平方向排列，不能包含块级元素，设置width无效，height无效(可以设置line-height)，margin上下无效，padding上下无效。</p>\n<p><code>块级元素</code>：各占据一行，垂直方向排列。从新行开始结束接着一个断行。</p>\n<p>(Q2)<code>兼容性</code>：display:inline-block;<em>display:inline;</em>zoom:1;</p>\n<h4 id=\"3-清除浮动有哪些方式？比较好的方式是哪一种？\"><a href=\"#3-清除浮动有哪些方式？比较好的方式是哪一种？\" class=\"headerlink\" title=\"3. 清除浮动有哪些方式？比较好的方式是哪一种？\"></a>3. 清除浮动有哪些方式？比较好的方式是哪一种？</h4><p>(Q1)<br>（1）父级div定义height。<br>（2）结尾处加空div标签clear:both。<br>（3）父级div定义伪类:after和zoom。<br>（4）父级div定义overflow:hidden。<br>（5）父级div定义overflow:auto。<br>（6）父级div也浮动，需要定义宽度。<br>（7）父级div定义display:table。<br>（8）结尾处加br标签clear:both。</p>\n<p>(Q2) 比较好的是第3种方式，好多网站都这么用。</p>\n<h4 id=\"4-box-sizing常用的属性有哪些？分别有什么作用？\"><a href=\"#4-box-sizing常用的属性有哪些？分别有什么作用？\" class=\"headerlink\" title=\"4. box-sizing常用的属性有哪些？分别有什么作用？\"></a>4. box-sizing常用的属性有哪些？分别有什么作用？</h4><p>(Q1)box-sizing: content-box|border-box|inherit;</p>\n<p>(Q2)content-box:宽度和高度分别应用到元素的内容框。在宽度和高度之外绘制元素的内边距和边框(元素默认效果)。<br>border-box:元素指定的任何内边距和边框都将在已设定的宽度和高度内进行绘制。通过从已设定的宽度和高度分别减去边框和内边距才能得到内容的宽度和高度。</p>\n<h4 id=\"5-Doctype作用？标准模式与兼容模式各有什么区别\"><a href=\"#5-Doctype作用？标准模式与兼容模式各有什么区别\" class=\"headerlink\" title=\"5. Doctype作用？标准模式与兼容模式各有什么区别?\"></a>5. Doctype作用？标准模式与兼容模式各有什么区别?</h4><p>(Q1) &lt;!DOCTYPE&gt;告知浏览器的解析器用什么文档标准解析这个文档。DOCTYPE不存在或格式不正确会导致文档以兼容模式呈现。</p>\n<p>(Q2) 标准模式的排版和JS运作模式都是以该浏览器支持的最高标准运行。在兼容模式中，页面以宽松的向后兼容的方式显示,模拟老式浏览器的行为以防止站点无法工作。</p>\n<h4 id=\"6-HTML5-为什么只需要写-lt-DOCTYPE-HTML-gt-？\"><a href=\"#6-HTML5-为什么只需要写-lt-DOCTYPE-HTML-gt-？\" class=\"headerlink\" title=\"6. HTML5 为什么只需要写 &lt;!DOCTYPE HTML&gt;？\"></a>6. HTML5 为什么只需要写 &lt;!DOCTYPE HTML&gt;？</h4><p>HTML5不基于 SGML，因此不需要对DTD进行引用，但是需要doctype来规范浏览器的行为（让浏览器按照它们应该的方式来运行）。</p>\n<p>而HTML4.01基于SGML,所以需要对DTD进行引用，才能告知浏览器文档所使用的文档类型。</p>\n<h4 id=\"7-页面导入样式时，使用link和-import有什么区别？\"><a href=\"#7-页面导入样式时，使用link和-import有什么区别？\" class=\"headerlink\" title=\"7. 页面导入样式时，使用link和@import有什么区别？\"></a>7. 页面导入样式时，使用link和@import有什么区别？</h4><p>（1）link属于XHTML标签，除了加载CSS外，还能用于定义RSS, 定义rel连接属性等作用；而@import是CSS提供的，只能用于加载CSS;<br>（2）页面被加载的时，link会同时被加载，而@import引用的CSS会等到页面被加载完再加载;<br>（3）import是CSS2.1 提出的，只在IE5以上才能被识别，而link是XHTML标签，无兼容问题。</p>\n<h4 id=\"8-介绍一下你对浏览器内核的理解？\"><a href=\"#8-介绍一下你对浏览器内核的理解？\" class=\"headerlink\" title=\"8. 介绍一下你对浏览器内核的理解？\"></a>8. 介绍一下你对浏览器内核的理解？</h4><p>主要分成两部分：渲染引擎(layout engineer或Rendering Engine)和JS引擎。</p>\n<p>渲染引擎：负责取得网页的内容（HTML、XML、图像等等）、我们组建一大牛裙前面是4七一，整理讯息（例如加入CSS等），中间是零2七，以及计算网页的显示方式，后面是壹武四，是学习的就加，不是学习的请勿打扰。然后会输出至显示器或打印机。浏览器的内核的不同对于网页的语法解释会有不同，所以渲染的效果也不相同。所有网页浏览器、电子邮件客户端以及其它需要编辑、显示网络内容的应用程序都需要内核。</p>\n<p>JS引擎则：解析和执行javascript来实现网页的动态效果。</p>\n<p>最开始渲染引擎和JS引擎并没有区分的很明确，后来JS引擎越来越独立，内核就倾向于只指渲染引擎。</p>\n<h4 id=\"9-html5有哪些新特性？如何处理HTML5新标签的浏览器兼容问题？如何区分-HTML-和-HTML5？\"><a href=\"#9-html5有哪些新特性？如何处理HTML5新标签的浏览器兼容问题？如何区分-HTML-和-HTML5？\" class=\"headerlink\" title=\"9. html5有哪些新特性？如何处理HTML5新标签的浏览器兼容问题？如何区分 HTML 和 HTML5？\"></a>9. html5有哪些新特性？如何处理HTML5新标签的浏览器兼容问题？如何区分 HTML 和 HTML5？</h4><p>(Q1)<br>HTML5 现在已经不是 SGML 的子集，主要是关于图像，位置，存储，多任务等功能的增加。<br>(1)绘画 canvas;<br>(2)用于媒介回放的 video 和 audio 元素;<br>(3)本地离线存储 localStorage 长期存储数据，浏览器关闭后数据不丢失;<br>(4)sessionStorage 的数据在浏览器关闭后自动删除;<br>(5)语意化更好的内容元素，比如 article、footer、header、nav、section;<br>(6)表单控件，calendar、date、time、email、url、search;<br>(7)新的技术webworker, websocket, Geolocation;</p>\n<p>(Q2)<br>IE8/IE7/IE6支持通过document.createElement方法产生的标签，<br>可以利用这一特性让这些浏览器支持HTML5新标签，<br>浏览器支持新标签后，还需要添加标签默认的样式。<br>当然也可以直接使用成熟的框架、比如html5shim，</p>\n<p>&lt; !–[if lt IE 9]&gt;<br>&lt; ![endif]–&gt;</p>\n<h4 id=\"10-简述一下你对HTML语义化的理解？\"><a href=\"#10-简述一下你对HTML语义化的理解？\" class=\"headerlink\" title=\"10. 简述一下你对HTML语义化的理解？\"></a>10. 简述一下你对HTML语义化的理解？</h4><p>用正确的标签做正确的事情。</p>\n<p>html语义化让页面的内容结构化，结构更清晰，便于对浏览器、搜索引擎解析;<br>即使在没有样式CSS情况下也以一种文档格式显示，并且是容易阅读的;<br>搜索引擎的爬虫也依赖于HTML标记来确定上下文和各个关键字的权重，利于SEO;<br>使阅读源代码的人对网站更容易将网站分块，便于阅读维护理解。</p>\n<h2 id=\"JavaScript\"><a href=\"#JavaScript\" class=\"headerlink\" title=\"JavaScript\"></a>JavaScript</h2><h4 id=\"1-介绍js的基本数据类型\"><a href=\"#1-介绍js的基本数据类型\" class=\"headerlink\" title=\"1. 介绍js的基本数据类型\"></a>1. 介绍js的基本数据类型</h4><p><code>Undefined、Null、Boolean、Number、String</code></p>\n<h4 id=\"2-js有哪些内置对象？\"><a href=\"#2-js有哪些内置对象？\" class=\"headerlink\" title=\"2. js有哪些内置对象？\"></a>2. js有哪些内置对象？</h4><p>数据封装类对象：<code>Object、Array、Boolean、Number 和 String</code><br>其他对象：<code>Function、Arguments、Math、Date、RegExp、Error</code></p>\n<h4 id=\"3-this对象的理解\"><a href=\"#3-this对象的理解\" class=\"headerlink\" title=\"3. this对象的理解\"></a>3. this对象的理解</h4><p>this总是指向函数的直接调用者（而非间接调用者）；<br>如果有new关键字，this指向new出来的那个对象；<br>在事件中，this指向触发这个事件的对象，特殊的是，IE中的attachEvent中的this总是指向全局对象Window。</p>\n<h4 id=\"4-eval是做什么的？\"><a href=\"#4-eval是做什么的？\" class=\"headerlink\" title=\"4. eval是做什么的？\"></a>4. eval是做什么的？</h4><p>它的功能是把对应的字符串解析成JS代码并运行；<br>应该避免使用eval，不安全，非常耗性能（2次，一次解析成js语句，一次执行）。<br>由JSON字符串转换为JSON对象的时候可以用eval，var obj =eval(‘(‘+ str +’)’)。</p>\n<h4 id=\"5-DOM怎样添加、移除、移动、复制、创建和查找节点\"><a href=\"#5-DOM怎样添加、移除、移动、复制、创建和查找节点\" class=\"headerlink\" title=\"5. DOM怎样添加、移除、移动、复制、创建和查找节点\"></a>5. DOM怎样添加、移除、移动、复制、创建和查找节点</h4><p>// 创建新节点<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">createDocumentFragment()    //创建一个DOM片段</div><div class=\"line\">createElement()   //创建一个具体的元素</div><div class=\"line\">createTextNode()   //创建一个文本节点</div></pre></td></tr></table></figure></p>\n<p>// 添加、移除、替换、插入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">appendChild()</div><div class=\"line\">removeChild()</div><div class=\"line\">replaceChild()</div><div class=\"line\">insertBefore() //在已有的子节点前插入一个新的子节点</div></pre></td></tr></table></figure></p>\n<p>// 查找<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">getElementsByTagName()    //通过标签名称</div><div class=\"line\">getElementsByName()    //通过元素的Name属性的值(IE容错能力较强，会得到一个数组，其中包括id等于name值的)</div><div class=\"line\">getElementById()    //通过元素Id，唯一性</div></pre></td></tr></table></figure></p>\n<h4 id=\"6-null和undefined的区别？\"><a href=\"#6-null和undefined的区别？\" class=\"headerlink\" title=\"6. null和undefined的区别？\"></a>6. null和undefined的区别？</h4><p>null是一个表示”无”的对象，转为数值时为0；undefined是一个表示”无”的原始值，转为数值时为NaN。<br>undefined：<br>（1）变量被声明了，但没有赋值时，就等于undefined。<br>（2) 调用函数时，应该提供的参数没有提供，该参数等于undefined。<br>（3）对象没有赋值的属性，该属性的值为undefined。<br>（4）函数没有返回值时，默认返回undefined。<br>null：<br>（1） 作为函数的参数，表示该函数的参数不是对象。<br>（2） 作为对象原型链的终点。</p>\n<h4 id=\"7-new操作符具体干了什么呢\"><a href=\"#7-new操作符具体干了什么呢\" class=\"headerlink\" title=\"7. new操作符具体干了什么呢?\"></a>7. new操作符具体干了什么呢?</h4><p>（1）创建一个空对象，并且 this 变量引用该对象，同时还继承了该函数的原型。<br>（2）属性和方法被加入到 this 引用的对象中。<br>（3）新创建的对象由 this 所引用，并且最后隐式的返回 this 。</p>\n<h4 id=\"8-JSON-的了解？\"><a href=\"#8-JSON-的了解？\" class=\"headerlink\" title=\"8. JSON 的了解？\"></a>8. JSON 的了解？</h4><p>JSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。它是基于JavaScript的一个子集。数据格式简单, 易于读写, 占用带宽小。<br>格式：采用键值对，例如：{‘age’:’12’, ‘name’:’back’}</p>\n<h4 id=\"9-call-和-apply-的区别和作用？\"><a href=\"#9-call-和-apply-的区别和作用？\" class=\"headerlink\" title=\"9. call() 和 apply() 的区别和作用？\"></a>9. call() 和 apply() 的区别和作用？</h4><p><code>apply()</code>函数有两个参数：第一个参数是上下文，第二个参数是参数组成的数组。如果上下文是null，则使用全局对象代替。<br>如：function.apply(this,[1,2,3]);<br><code>call()</code>的第一个参数是上下文，后续是实例传入的参数序列。<br>如：function.call(this,1,2,3);</p>\n<h4 id=\"10-如何获取UA？\"><a href=\"#10-如何获取UA？\" class=\"headerlink\" title=\"10. 如何获取UA？\"></a>10. 如何获取UA？</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">function whatBrowser() &#123;  </div><div class=\"line\">    document.Browser.Name.value=navigator.appName;  </div><div class=\"line\">    document.Browser.Version.value=navigator.appVersion;  </div><div class=\"line\">    document.Browser.Code.value=navigator.appCodeName;  </div><div class=\"line\">    document.Browser.Agent.value=navigator.userAgent;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><h4 id=\"1-HTTP状态码知道哪些？\"><a href=\"#1-HTTP状态码知道哪些？\" class=\"headerlink\" title=\"1. HTTP状态码知道哪些？\"></a>1. HTTP状态码知道哪些？</h4><p>100  Continue  继续，一般在发送post请求时，已发送了http header之后服务端将返回此信息，表示确认，之后发送具体参数信息<br>200  OK   正常返回信息<br>201  Created  请求成功并且服务器创建了新的资源<br>202  Accepted  服务器已接受请求，但尚未处理<br>301  Moved Permanently  请求的网页已永久移动到新位置。<br>302 Found  临时性重定向。<br>303 See Other  临时性重定向，且总是使用 GET 请求新的 URI。<br>304  Not Modified  自从上次请求后，请求的网页未修改过。<br>400 Bad Request  服务器无法理解请求的格式，客户端不应当尝试再次使用相同的内容发起请求。<br>401 Unauthorized  请求未授权。<br>403 Forbidden  禁止访问。<br>404 Not Found  找不到如何与 URI 相匹配的资源。<br>500 Internal Server Error  最常见的服务器端错误。<br>503 Service Unavailable 服务器端暂时无法处理请求（可能是过载或维护）。</p>\n<h4 id=\"2-你有哪些性能优化的方法？\"><a href=\"#2-你有哪些性能优化的方法？\" class=\"headerlink\" title=\"2. 你有哪些性能优化的方法？\"></a>2. 你有哪些性能优化的方法？</h4><p>（1） 减少http请求次数：CSS Sprites, JS、CSS源码压缩、图片大小控制合适；网页Gzip，CDN托管，data缓存 ，图片服务器。<br>（2） 前端模板 JS+数据，减少由于HTML标签导致的带宽浪费，前端用变量保存AJAX请求结果，每次操作本地变量，不用请求，减少请求次数<br>（3） 用innerHTML代替DOM操作，减少DOM操作次数，优化javascript性能。<br>（4） 当需要设置的样式很多时设置className而不是直接操作style。<br>（5） 少用全局变量、缓存DOM节点查找的结果。减少IO读取操作。<br>（6） 避免使用CSS Expression（css表达式)又称Dynamic properties(动态属性)。<br>（7） 图片预加载，将样式表放在顶部，将脚本放在底部  加上时间戳。</p>\n<h4 id=\"3-什么叫优雅降级和渐进增强？\"><a href=\"#3-什么叫优雅降级和渐进增强？\" class=\"headerlink\" title=\"3. 什么叫优雅降级和渐进增强？\"></a>3. 什么叫优雅降级和渐进增强？</h4><p><code>优雅降级</code>：Web站点在所有新式浏览器中都能正常工作，如果用户使用的是老式浏览器，则代码会检查以确认它们是否能正常工作。由于IE独特的盒模型布局问题，针对不同版本的IE的hack实践过优雅降级了,为那些无法支持功能的浏览器增加候选方案，使之在旧式浏览器上以某种形式降级体验却不至于完全失效。<br><code>渐进增强</code>：从被所有浏览器支持的基本功能开始，逐步地添加那些只有新式浏览器才支持的功能,向页面增加无害于基础浏览器的额外样式和功能的。当浏览器支持时，它们会自动地呈现出来并发挥作用。</p>\n<h4 id=\"4-哪些常见操作会造成内存泄漏？\"><a href=\"#4-哪些常见操作会造成内存泄漏？\" class=\"headerlink\" title=\"4. 哪些常见操作会造成内存泄漏？\"></a>4. 哪些常见操作会造成内存泄漏？</h4><p>内存泄漏指任何对象在您不再拥有或需要它之后仍然存在。<br>垃圾回收器定期扫描对象，并计算引用了每个对象的其他对象的数量。如果一个对象的引用数量为 0（没有其他对象引用过该对象），或对该对象的惟一引用是循环的，那么该对象的内存即可回收。<br>setTimeout 的第一个参数使用字符串而非函数的话，会引发内存泄漏。<br>闭包、控制台日志、循环（在两个对象彼此引用且彼此保留时，就会产生一个循环）。</p>\n<h4 id=\"5-线程与进程的区别\"><a href=\"#5-线程与进程的区别\" class=\"headerlink\" title=\"5. 线程与进程的区别\"></a>5. 线程与进程的区别</h4><p>一个程序至少有一个进程,一个进程至少有一个线程。<br>线程的划分尺度小于进程，使得多线程程序的并发性高。<br>另外，进程在执行过程中拥有独立的内存单元，而多个线程共享内存，从而极大地提高了程序的运行效率。<br>线程在执行过程中与进程还是有区别的。每个独立的线程有一个程序运行的入口、顺序执行序列和程序的出口。但是线程不能够独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制。<br>从逻辑角度来看，多线程的意义在于一个应用程序中，有多个执行部分可以同时执行。但操作系统并没有将多个线程看做多个独立的应用，来实现进程的调度和管理以及资源分配。这就是进程和线程的重要区别</p>"},{"title":"前端知识点2","date":"2017-04-07T06:58:52.000Z","_content":"#### 1,将url的查询参数解析成字典对象\n\n这个题目不约而同的出现在了多家公司的面试题中，当然也是因为太过于典型，解决方案无非就是拆字符或者用正则匹配来解决，我个人强烈建议用正则匹配，因为url允许用户随意输入，如果用拆字符的方式，有任何一处没有考虑到容错，就会导致整个js都报错。而正则就没有这个问题，他只匹配出正确的配对，非法的全部过滤掉，简单，方便。\n<!--more-->\n实现代码：\n```\nfunction getQueryObject(url) {\n    url = url == null ? window.location.href : url;\n    var search = url.substring(url.lastIndexOf(\"?\") + 1);\n    var obj = {};\n    var reg = /([^?&=]+)=([^?&=]*)/g;\n    search.replace(reg, function (rs, $1, $2) {\n        var name = decodeURIComponent($1);\n        var val = decodeURIComponent($2);               \n        val = String(val);\n        obj[name] = val;\n        return rs;\n    });\n    return obj;\n}\ngetQueryObject(\"http://www.cnblogs.com/leee/p/4456840.html?name=1&dd=ddd**\")\n```\n`Object {name: \"1\", dd: \"ddd**\"}`\n\n#### 2.console.log(1+ +\"2\");输出的是3\n等同于: 1+(+'2')：\n+'2' 的 + 是一元操作符，对 '2' 进行Number()操作，转为数字的2，所以等于3\n```\nconsole.log(\"A\"-\"B\"+\"2\")   NaN2\nconsole.log(\"A\"-\"B\"+2)    NaN\n```\n#### 3. 算法\n```\n   function test(a,b){\n        console.log(b);\n        return{\n            test:function(x){\n                return test(x,a);\n            }\n        }\n    }\n    var a=test(0);a.test(1);a.test(2);a.test(3);       \n    // underfined  0  0  0\n```\n#### 4. 三次握手\n##### 第一次\n第一次握手：建立连接时，客户端发送syn包（syn=j）到服务器，并进入SYN_SENT状态，等待服务器确认；SYN：同步序列编号（Synchronize Sequence Numbers）。\n##### 第二次\n第二次握手：服务器收到syn包，必须确认客户的SYN（ack=j+1），同时自己也发送一个SYN包（syn=k），即SYN+ACK包，此时服务器进入SYN_RECV状态；\n##### 第三次\n第三次握手：客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK(ack=k+1），此包发送完毕，客户端和服务器进入ESTABLISHED（TCP连接成功）状态，完成三次握手。\n完成三次握手，客户端与服务器开始传送数据，在上述过程中，还有一些重要的概念：\n\n#### 5. http 状态码\n##### 一、HTTP状态码\n\n如果某项请求发送到您的服务器要求显示您网站上的某个网页（例如，用户通过浏览器访问您的网页或 Googlebot 抓取网页时），服务器将会返回 HTTP 状态代码以响应请求。\n\n此状态代码提供关于请求状态的信息， 告诉 Googlebot 关于您的网站和请求的网页的信息。\n一些常见的状态代码包括：\n200 – 服务器成功返回网页\n404 – 请求的网页不存在\n503 – 服务器暂时不可用\n\n下面提供 HTTP 状态代码的完整列表。 点击链接可了解详情。 您也可以访问有关 HTTP 状态代码的 W3C 网页以获得更多信息 。\n\n1xx：请求收到，继续处理\n2xx：操作成功收到，分析、接受\n3xx：完成此请求必须进一步处理\n4xx：请求包含一个错误语法或不能完成\n5xx：服务器执行一个完全有效请求失败\n1xx （临时响应）\n表示临时响应并需要请求者继续执行操作的状态代码。\n\n\n代码 说明\n100（继续）\t请求者应当继续提出请求。 服务器返回此代码表示已收到请求的第一部分，正在等待其余部分。\n101（切换协议）\t请求者已要求服务器切换协议，服务器已确认并准备切换。\n\n\n2xx （成功）\n表示服务器成功处理了请求的状态代码。\n\n\n代码 说明\n200（成功）\t服务器已成功处理了请求。 通常，这表示服务器提供了请求的网页。 如果针对您的 robots.txt 文件显示此状态，则表示 Googlebot 已成功检索到该文件。\n201（已创建）\t请求成功并且服务器创建了新的资源。\n202（已接受）\t服务器已接受请求，但尚未处理。\n203（非授权信息）\t服务器已成功处理了请求，但返回的信息可能来自另一来源。\n204（无内容）\t服务器成功处理了请求，但没有返回任何内容。\n205（重置内容）\t服务器成功处理了请求，但没有返回任何内容。 与 204 响应不同，此响应要求请求者重置文档视图（例如，清除表单内容以输入新内容）。\n206（部分内容）\t服务器成功处理了部分 GET 请求。\n\n\n3xx （重定向）\n要完成请求，需要进一步操作。 通常，这些状态代码用来重定向。 Google 建议您在每次请求中使用重定向不要超过 5 次。 您可以使用网站管理员工具查看一下 Googlebot 在抓取重定向网页时是否遇到问题。 诊断 下的网 络抓取 页面列出了由于重定向错误而导致 Googlebot 无法抓取的网址。\n\n\n代码 说明\n300（多种选择）\t针对请求，服务器可执行多种操作。 服务器可根据请求者（用户代理）选择一项操作，或提供操作列表供请求者选择。\n301（永久移动）\t请求的网页已永久移动到新位置。 服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置。 您应使用此代码告诉 Googlebot 某个网页或网站已永久移动到新位置。\n302（暂时移动）\t服 务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。 此代码与响应 GET 或 HEAD 请求的 301 代码类似，会自动将请求者转到不同的位置，但您不应使用此代码来告诉 Googlebot 某个网页或网站已经移动，因为 Googlebot 会继续抓取原有位置并编入索引。\n303（查看其他位置）\t请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码。 对于除 HEAD 之外的所有请求，服务器会自动转到其他位置。\n304（未修改）\t自从上次请求后，请求的网页未修改过。服务器返回此响应时，不会返回网页内容。如果网页自请求者上次请求后再也没有更改 过，您应当将服务器配置为返回此响应（称为 If-Modified-Since HTTP 标头）。 由于服务器可以告诉 Googlebot 自从上次抓取后网页没有更改过，因此可节省带宽和开销\n。\n305（使用代理）\t请求者只能使用代理访问请求的网页。 如果服务器返回此响应，还表示请求者应使用代理。\n307（暂时重定向）\t服 务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。 此代码与响应 GET 和 HEAD 请求的 301 代码类似，会自动将请求者转到不同的位置，但您不应使用此代码来告诉 Googlebot 某个页面或网站已经移动，因为 Googlebot 会继续抓取原有位置并编入索引。\n\n\n4xx（请求错误）\n这些状态代码表示请求可能出错，妨碍了服务器的处理。\n\n\n代码 说明\n400（错误请求）\t服务器不理解请求的语法。\n401（未授权）\t请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应。\n403（禁止）\t服务器拒绝请求。 如果您看到 Googlebot 在尝试抓取您网站上的有效网页时收到此状态代码（可以在 Google 网站管理员工具诊 断 下的网络抓取 页面上看到此信息），可能是您的服务器或主机拒绝 Googlebot 访问。\n404（未找到）\t服务器找不到请求的网页。 例如，如果请求服务器上不存在的网页，服务器通常会返回此代码。如果您的网站上没有 robots.txt 文件，而您在 Google 网站管理员工具”诊断”标签的 robots.txt 页 上看到此状态，那么这是正确的状态。 但是，如果您有 robots.txt 文件而又看到此状态，则说明您的 robots.txt 文件可能命名错误或位于错误的位置 （该文件应当位于顶级域名，名为 robots.txt）。\n如果您看到有关 Googlebot 尝试抓取的网址的此状态（在”诊断”标签的 HTTP 错误页上），则表示 Googlebot 追踪的可能是另一个页面的无效链接（是旧链接或输入有误的链接）。\n405（禁用的方法）\t禁用请求中指定的方法。\n406（不可接受）\t无法使用请求的内容特性响应请求的网页。\n407（需要代理授权）\t此状态代码与 401（未授权）类似，但指定请求者应当授权使用代理。 如果服务器返回此响应，还会指明请求者应当使用的代理。\n408（请求超时）\t服务器等候请求时发生超时。\n409（冲突）\t服务器在完成请求时发生冲突。 服务器必须在响应中包含有关冲突的信息。 服务器在响应与前一个请求相冲突的 PUT 请求时可能会返回此代码，同时会附上两个请求的差异列表。\n410（已删除）\t如果请求的资源已永久删除，服务器就会返回此响应。 该代码与 404（未找到）代码相似，但在资源以前存在而现在不存在的情况下，有时会用来替代 404 代码。 如果资源已永久删除，您应当使用 301 指定资源的新位置。\n411（需要有效长度）\t服务器不接受不含有效内容长度标头字段的请求。\n412（未满足前提条件）\t服务器未满足请求者在请求中设置的其中一个前提条件。\n413（请求实体过大）\t服务器无法处理请求，因为请求实体过大，超出服务器的处理能力。\n414（请求的 URI 过长）\t请求的 URI（通常为网址）过长，服务器无法处理。\n415（不支持的媒体类型）\t请求的格式不受请求页面的支持。\n416（请求范围不符合要求）\t如果页面无法提供请求的范围，则服务器会返回此状态代码。\n417（未满足期望要求）\t服务器未满足”期望”请求标头字段的要求。\n\n\n5xx （服务器错误）\n这些状态代码表示服务器在尝试处理请求时发生内部错误。 这些错误可能是服务器本身的错误，而不是请求出错。\n\n\n代码 说明\n500（服务器内部错误）\t服务器遇到错误，无法完成请求。\n501（尚未实施）\t服务器不具备完成请求的功能。 例如，服务器无法识别请求方法时可能会返回此代码。\n502（错误网关）\t服务器充当网关或代理，从上游服务器收到无效响应。\n503（服务不可用）\t服务器目前无法使用（由于超载或停机维护）。 通常，这只是暂时状态。\n504（网关超时）\t服务器充当网关或代理，但没有及时从上游服务器收到请求。\n505（HTTP 版本不受支持）\t服务器不支持请求中所用的 HTTP 协议版本。\n\n\n## HTML+CSS\n##### 1.对WEB标准以及W3C的理解与认识\n标签闭合、标签小写、不乱嵌套、提高搜索机器人搜索几率、使用外 链css和js脚本、结构行为表现的分离、文件下载与页面速度更快、内容能被更多的用户所访问、内容能被更广泛的设备所访问、更少的代码和组件，容易维 护、改版方便，不需要变动页面内容、提供打印版本而不需要复制内容、提高网站易用性；\n\n#### 2.xhtml和html有什么区别\nHTML是一种基本的WEB网页设计语言，XHTML是一个基于XML的置标语言\n最主要的不同：\nXHTML 元素必须被正确地嵌套。\nXHTML 元素必须被关闭。\n标签名必须用小写字母。\nXHTML 文档必须拥有根元素。\n\n#### 3.Doctype? 严格模式与混杂模式-如何触发这两种模式，区分它们有何意义?\n用于声明文档使用那种规范（html/Xhtml）一般为 严格 过度 基于框架的html文档\n加入XMl声明可触发，解析方式更改为IE5.5 拥有IE5.5的bug\n\n#### 4.行内元素有哪些?块级元素有哪些?CSS的盒模型?\n块级元素：div p h1 h2 h3 h4 form ul\n行内元素: a b br i span input select\nCss盒模型:内容，border ,margin，padding\n\n#### 5.CSS引入的方式有哪些? link和@import的区别是?\n内联 内嵌 外链 导入\n区别 ：同时加载\n前者无兼容性，后者CSS2.1以下浏览器不支持\nLink 支持使用javascript改变样式，后者不可\n\n#### 6.CSS选择符有哪些?哪些属性可以继承?优先级算法如何计算?内联和important哪个优先级高?\n标签选择符 类选择符 id选择符\n继承不如指定 Id>class>标签选择\n后者优先级高\n\n#### 7.前端页面有哪三层构成，分别是什么?作用是什么?\n结构层 Html 表示层 CSS 行为层 js\n\n#### 8.css的基本语句构成是?\n选择器{属性1:值1;属性2:值2;……}\n\n#### 9.你做的页面在哪些流览器测试过?这些浏览器的内核分别是什么?\nIe(Ie内核) 火狐（Gecko） 谷歌（webkit） opear(Presto)\n\n#### 10.写出几种IE6 BUG的解决方法\n1.双边距BUG float引起的 使用display\n2.3像素问题 使用float引起的 使用dislpay:inline -3px\n3.超链接hover 点击后失效 使用正确的书写顺序 link visited hover active\n4.Ie z-index问题 给父级添加position:relative\n5.Png 透明 使用js代码 改\n6.Min-height 最小高度 ！Important 解决’\n7.select 在ie6下遮盖 使用iframe嵌套\n8.为什么没有办法定义1px左右的宽度容器（IE6默认的行高造成的，使用over:hidden,zoom:0.08 line-height:1px）\n\n#### 11.标签上title与alt属性的区别是什么?\nAlt 当图片不显示是 用文字代表。\nTitle 为该属性提供信息\n\n#### 12.描述css reset的作用和用途。\nReset重置浏览器的css默认属性 浏览器的品种不同，样式不同，然后重置，让他们统一\n\n#### 13.解释css sprites，如何使用。\nCss 精灵 把一堆小的图片整合到一张大的图片上，减轻服务器对图片的请求数量\n\n#### 14.浏览器标准模式和怪异模式之间的区别是什么?\n盒子模型 渲染模式的不同\n使用 window.top.document.compatMode 可显示为什么模式\n\n#### 15.你如何对网站的文件和资源进行优化?期待的解决方案包括：\n文件合并\n文件最小化/文件压缩\n使用CDN托管\n缓存的使用\n\n#### 16.什么是语义化的HTML?\n直观的认识标签 对于搜索引擎的抓取有好处\n\n#### 17.清除浮动的几种方式，各自的优缺点\n1.使用空标签清除浮动 clear:both（理论上能清楚任何标签，，，增加无意义的标签）\n2.使用overflow:auto（空标签元素清除浮动而不得不增加无意代码的弊端,,使用zoom:1用于兼容IE）\n3.是用afert伪元素清除浮动(用于非IE浏览器)\n\n## Javascript\n#### 1.javascript的typeof返回哪些数据类型\nObject number function boolean underfind\n\n#### 2.例举3种强制类型转换和2种隐式类型转换?\n强制（parseInt,parseFloat,number）\n隐式（== – ===）\n\n#### 3.split() join() 的区别\n前者是切割成数组的形式，后者是将数组转换成字符串\n\n#### 4.数组方法pop() push() unshift() shift()\nPush()尾部添加 pop()尾部删除\nUnshift()头部添加 shift()头部删除\n\n#### 5.事件绑定和普通事件有什么区别\n\n#### 6.IE和DOM事件流的区别\n1.执行顺序不一样、\n2.参数不一样\n3.事件加不加on\n4.this指向问题\n\n#### 7.IE和标准下有哪些兼容性的写法\nVar ev = ev || window.event\ndocument.documentElement.clientWidth || document.body.clientWidth\nVar target = ev.srcElement||ev.target\n\n#### 8.ajax请求的时候get 和post方式的区别\n一个在url后面 一个放在虚拟载体里面\n有大小限制\n安全问题\n应用不同 一个是论坛等只需要请求的，一个是类似修改密码的\n\n#### 9.call和apply的区别\nObject.call(this,obj1,obj2,obj3)\nObject.apply(this,arguments)\nobj.call(thisObj, arg1, arg2, ...);\nobj.apply(thisObj, [arg1, arg2, ...]);\n两者作用一致，都是把obj(即this)绑定到thisObj，这时候thisObj具备了obj的属性和方法。或者说thisObj『继承』了obj的属性和方法。\n唯一区别是apply接受的是数组参数，call接受的是连续参数。\n```\nfunction add(j, k){\n    return j+k;\n}\n\nfunction sub(j, k){\n    return j-k;\n}\n```\n我们在控制台运行：\n```\nadd(5,3); //8\nadd.call(sub, 5, 3); //8\nadd.apply(sub, [5, 3]); //8\n\nsub(5, 3); //2\nsub.call(add, 5, 3); //2\nsub.apply(add, [5, 3]); //2\n\n```\n\n\n#### 10.ajax请求时，如何解释json数据\n使用eval parse 鉴于安全性考虑 使用parse更靠谱\n11.b继承a的方法\n\n12.写一个获取非行间样式的函数\n```\nfunction getStyle(obj,attr,value)\n{\nif(!value)\n{\nif(obj.currentStyle)\n{\nreturn obj.currentStyle(attr)\n}\nelse\n{\nobj.getComputedStyle(attr,false)\n}\n}\nelse\n{\nobj.style[attr]=value\n}\n}\n```\n#### 13.事件委托是什么\n让利用事件冒泡的原理，让自己的所触发的事件，让他的父元素代替执行！\nhttp://www.webasily.com/?p=78 例子可见此链接\n\n#### 14.闭包是什么，有什么特性，对页面有什么影响\n闭包就是能够读取其他函数内部变量的函数。\nhttp://blog.csdn.net/gaoshanwudi/article/details/7355794 此链接可查看（问这个问题的不是一个公司）\n\n15.如何阻止事件冒泡和默认事件\ncanceBubble return false\n\n#### 16.添加 删除 替换 插入到某个接点的方法\nobj.appendChidl()\nobj.innersetBefore\nobj.replaceChild\nobj.removeChild\n\n#### 17.解释jsonp的原理，以及为什么不是真正的ajax\n动态创建script标签，回调函数\nAjax是页面无刷新请求数据操作\n\n#### 18.javascript的本地对象，内置对象和宿主对象\n本地对象为array obj regexp等可以new实例化\n内置对象为gload Math 等不可以实例化的\n宿主为浏览器自带的document,window 等\n\n#### 19.document load 和document ready的区别\nDocument.onload 是在结构和样式加载完才执行js\nDocument.ready原生种没有这个方法，jquery中有 $().ready(function)\n\n#### 20.”==”和“===”的不同\n前者会自动转换类型\n后者不会\n\n#### 21.javascript的同源策略\n一段脚本只能读取来自于同一来源的窗口和文档的属性，这里的同一来源指的是主机名、协议和端口号的组合\n\n#### 22.编写一个数组去重的方法\nfunction oSort(arr)\n{\n      var result ={};\n      var newArr=[];\nfor(var i=0;i<arr.length;i++)\n{\n      if(!result[arr])\n     {\n         newArr.push(arr)\n          result[arr]=1\n      }\n}\nreturn newArr\n}\n#### 23.cookie  sessionstorage  localstorage\ncookie数据始终在同源的http请求中携带（即使不需要），即cookie在浏览器和服务器间来回传递。而sessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存。cookie数据还有路径（path）的概念，可以限制cookie只属于某个路径下。存储大小限制也不同，cookie数据不能超过4k，同时因为每次http请求都会携带cookie，所以cookie只适合保存很小的数据，如会话标识。sessionStorage和localStorage 虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大。数据有效期不同，sessionStorage：仅在当前浏览器窗口关闭前有效，自然也就不可能持久保持；localStorage：始终有效，窗口或浏览器关闭也一直保存，因此用作持久数据；cookie只在设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭。作用域不同，sessionStorage不在不同的浏览器窗口中共享，即使是同一个页面；localStorage 在所有同源窗口中都是共享的；cookie也是在所有同源窗口中都是共享的。Web Storage 支持事件通知机制，可以将数据更新的通知发送给监听者。Web Storage 的 api 接口使用更方便。\n24.split\n<script type=\"text/javascript\">\n\nvar str=\"How are you doing today?\"\n\ndocument.write(str.split(\" \") + \"<br />\")\ndocument.write(str.split(\"\") + \"<br />\")\ndocument.write(str.split(\" \",3))\n\n</script>\n输出：\nHow,are,you,doing,today?\nH,o,w, ,a,r,e, ,y,o,u, ,d,o,i,n,g, ,t,o,d,a,y,?\nHow,are,you\n\n#### 25. 对象创建过程\n1.分配空间。要注意的是，分配空间不光是分配子类的空间，子类对象中包含的父类对象所需要的空间，一样在这一步统一分配。在分配的空间的时候，会把所有的属性设置为默认值。\n\n2.递归的构造父类对象。\n\n3.初始化本类属性。\n\n4.调用本类的构造方法。\n\n总结一下，创建B类对象的步骤一共有5步\n\n1.分配空间\n\n2.初始化A类属性。\n\n3.调用A类的构造方法.\n\n4.初始化B的属性。\n\n5.调用B的构造方法。\n","source":"_posts/前端知识点2.md","raw":"---\ntitle: 前端知识点2\ndate: 2017-04-07 14:58:52\ntags: \"前端知识点\"\ncategories: [\"前端\",\"知识点\"]\n---\n#### 1,将url的查询参数解析成字典对象\n\n这个题目不约而同的出现在了多家公司的面试题中，当然也是因为太过于典型，解决方案无非就是拆字符或者用正则匹配来解决，我个人强烈建议用正则匹配，因为url允许用户随意输入，如果用拆字符的方式，有任何一处没有考虑到容错，就会导致整个js都报错。而正则就没有这个问题，他只匹配出正确的配对，非法的全部过滤掉，简单，方便。\n<!--more-->\n实现代码：\n```\nfunction getQueryObject(url) {\n    url = url == null ? window.location.href : url;\n    var search = url.substring(url.lastIndexOf(\"?\") + 1);\n    var obj = {};\n    var reg = /([^?&=]+)=([^?&=]*)/g;\n    search.replace(reg, function (rs, $1, $2) {\n        var name = decodeURIComponent($1);\n        var val = decodeURIComponent($2);               \n        val = String(val);\n        obj[name] = val;\n        return rs;\n    });\n    return obj;\n}\ngetQueryObject(\"http://www.cnblogs.com/leee/p/4456840.html?name=1&dd=ddd**\")\n```\n`Object {name: \"1\", dd: \"ddd**\"}`\n\n#### 2.console.log(1+ +\"2\");输出的是3\n等同于: 1+(+'2')：\n+'2' 的 + 是一元操作符，对 '2' 进行Number()操作，转为数字的2，所以等于3\n```\nconsole.log(\"A\"-\"B\"+\"2\")   NaN2\nconsole.log(\"A\"-\"B\"+2)    NaN\n```\n#### 3. 算法\n```\n   function test(a,b){\n        console.log(b);\n        return{\n            test:function(x){\n                return test(x,a);\n            }\n        }\n    }\n    var a=test(0);a.test(1);a.test(2);a.test(3);       \n    // underfined  0  0  0\n```\n#### 4. 三次握手\n##### 第一次\n第一次握手：建立连接时，客户端发送syn包（syn=j）到服务器，并进入SYN_SENT状态，等待服务器确认；SYN：同步序列编号（Synchronize Sequence Numbers）。\n##### 第二次\n第二次握手：服务器收到syn包，必须确认客户的SYN（ack=j+1），同时自己也发送一个SYN包（syn=k），即SYN+ACK包，此时服务器进入SYN_RECV状态；\n##### 第三次\n第三次握手：客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK(ack=k+1），此包发送完毕，客户端和服务器进入ESTABLISHED（TCP连接成功）状态，完成三次握手。\n完成三次握手，客户端与服务器开始传送数据，在上述过程中，还有一些重要的概念：\n\n#### 5. http 状态码\n##### 一、HTTP状态码\n\n如果某项请求发送到您的服务器要求显示您网站上的某个网页（例如，用户通过浏览器访问您的网页或 Googlebot 抓取网页时），服务器将会返回 HTTP 状态代码以响应请求。\n\n此状态代码提供关于请求状态的信息， 告诉 Googlebot 关于您的网站和请求的网页的信息。\n一些常见的状态代码包括：\n200 – 服务器成功返回网页\n404 – 请求的网页不存在\n503 – 服务器暂时不可用\n\n下面提供 HTTP 状态代码的完整列表。 点击链接可了解详情。 您也可以访问有关 HTTP 状态代码的 W3C 网页以获得更多信息 。\n\n1xx：请求收到，继续处理\n2xx：操作成功收到，分析、接受\n3xx：完成此请求必须进一步处理\n4xx：请求包含一个错误语法或不能完成\n5xx：服务器执行一个完全有效请求失败\n1xx （临时响应）\n表示临时响应并需要请求者继续执行操作的状态代码。\n\n\n代码 说明\n100（继续）\t请求者应当继续提出请求。 服务器返回此代码表示已收到请求的第一部分，正在等待其余部分。\n101（切换协议）\t请求者已要求服务器切换协议，服务器已确认并准备切换。\n\n\n2xx （成功）\n表示服务器成功处理了请求的状态代码。\n\n\n代码 说明\n200（成功）\t服务器已成功处理了请求。 通常，这表示服务器提供了请求的网页。 如果针对您的 robots.txt 文件显示此状态，则表示 Googlebot 已成功检索到该文件。\n201（已创建）\t请求成功并且服务器创建了新的资源。\n202（已接受）\t服务器已接受请求，但尚未处理。\n203（非授权信息）\t服务器已成功处理了请求，但返回的信息可能来自另一来源。\n204（无内容）\t服务器成功处理了请求，但没有返回任何内容。\n205（重置内容）\t服务器成功处理了请求，但没有返回任何内容。 与 204 响应不同，此响应要求请求者重置文档视图（例如，清除表单内容以输入新内容）。\n206（部分内容）\t服务器成功处理了部分 GET 请求。\n\n\n3xx （重定向）\n要完成请求，需要进一步操作。 通常，这些状态代码用来重定向。 Google 建议您在每次请求中使用重定向不要超过 5 次。 您可以使用网站管理员工具查看一下 Googlebot 在抓取重定向网页时是否遇到问题。 诊断 下的网 络抓取 页面列出了由于重定向错误而导致 Googlebot 无法抓取的网址。\n\n\n代码 说明\n300（多种选择）\t针对请求，服务器可执行多种操作。 服务器可根据请求者（用户代理）选择一项操作，或提供操作列表供请求者选择。\n301（永久移动）\t请求的网页已永久移动到新位置。 服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置。 您应使用此代码告诉 Googlebot 某个网页或网站已永久移动到新位置。\n302（暂时移动）\t服 务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。 此代码与响应 GET 或 HEAD 请求的 301 代码类似，会自动将请求者转到不同的位置，但您不应使用此代码来告诉 Googlebot 某个网页或网站已经移动，因为 Googlebot 会继续抓取原有位置并编入索引。\n303（查看其他位置）\t请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码。 对于除 HEAD 之外的所有请求，服务器会自动转到其他位置。\n304（未修改）\t自从上次请求后，请求的网页未修改过。服务器返回此响应时，不会返回网页内容。如果网页自请求者上次请求后再也没有更改 过，您应当将服务器配置为返回此响应（称为 If-Modified-Since HTTP 标头）。 由于服务器可以告诉 Googlebot 自从上次抓取后网页没有更改过，因此可节省带宽和开销\n。\n305（使用代理）\t请求者只能使用代理访问请求的网页。 如果服务器返回此响应，还表示请求者应使用代理。\n307（暂时重定向）\t服 务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。 此代码与响应 GET 和 HEAD 请求的 301 代码类似，会自动将请求者转到不同的位置，但您不应使用此代码来告诉 Googlebot 某个页面或网站已经移动，因为 Googlebot 会继续抓取原有位置并编入索引。\n\n\n4xx（请求错误）\n这些状态代码表示请求可能出错，妨碍了服务器的处理。\n\n\n代码 说明\n400（错误请求）\t服务器不理解请求的语法。\n401（未授权）\t请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应。\n403（禁止）\t服务器拒绝请求。 如果您看到 Googlebot 在尝试抓取您网站上的有效网页时收到此状态代码（可以在 Google 网站管理员工具诊 断 下的网络抓取 页面上看到此信息），可能是您的服务器或主机拒绝 Googlebot 访问。\n404（未找到）\t服务器找不到请求的网页。 例如，如果请求服务器上不存在的网页，服务器通常会返回此代码。如果您的网站上没有 robots.txt 文件，而您在 Google 网站管理员工具”诊断”标签的 robots.txt 页 上看到此状态，那么这是正确的状态。 但是，如果您有 robots.txt 文件而又看到此状态，则说明您的 robots.txt 文件可能命名错误或位于错误的位置 （该文件应当位于顶级域名，名为 robots.txt）。\n如果您看到有关 Googlebot 尝试抓取的网址的此状态（在”诊断”标签的 HTTP 错误页上），则表示 Googlebot 追踪的可能是另一个页面的无效链接（是旧链接或输入有误的链接）。\n405（禁用的方法）\t禁用请求中指定的方法。\n406（不可接受）\t无法使用请求的内容特性响应请求的网页。\n407（需要代理授权）\t此状态代码与 401（未授权）类似，但指定请求者应当授权使用代理。 如果服务器返回此响应，还会指明请求者应当使用的代理。\n408（请求超时）\t服务器等候请求时发生超时。\n409（冲突）\t服务器在完成请求时发生冲突。 服务器必须在响应中包含有关冲突的信息。 服务器在响应与前一个请求相冲突的 PUT 请求时可能会返回此代码，同时会附上两个请求的差异列表。\n410（已删除）\t如果请求的资源已永久删除，服务器就会返回此响应。 该代码与 404（未找到）代码相似，但在资源以前存在而现在不存在的情况下，有时会用来替代 404 代码。 如果资源已永久删除，您应当使用 301 指定资源的新位置。\n411（需要有效长度）\t服务器不接受不含有效内容长度标头字段的请求。\n412（未满足前提条件）\t服务器未满足请求者在请求中设置的其中一个前提条件。\n413（请求实体过大）\t服务器无法处理请求，因为请求实体过大，超出服务器的处理能力。\n414（请求的 URI 过长）\t请求的 URI（通常为网址）过长，服务器无法处理。\n415（不支持的媒体类型）\t请求的格式不受请求页面的支持。\n416（请求范围不符合要求）\t如果页面无法提供请求的范围，则服务器会返回此状态代码。\n417（未满足期望要求）\t服务器未满足”期望”请求标头字段的要求。\n\n\n5xx （服务器错误）\n这些状态代码表示服务器在尝试处理请求时发生内部错误。 这些错误可能是服务器本身的错误，而不是请求出错。\n\n\n代码 说明\n500（服务器内部错误）\t服务器遇到错误，无法完成请求。\n501（尚未实施）\t服务器不具备完成请求的功能。 例如，服务器无法识别请求方法时可能会返回此代码。\n502（错误网关）\t服务器充当网关或代理，从上游服务器收到无效响应。\n503（服务不可用）\t服务器目前无法使用（由于超载或停机维护）。 通常，这只是暂时状态。\n504（网关超时）\t服务器充当网关或代理，但没有及时从上游服务器收到请求。\n505（HTTP 版本不受支持）\t服务器不支持请求中所用的 HTTP 协议版本。\n\n\n## HTML+CSS\n##### 1.对WEB标准以及W3C的理解与认识\n标签闭合、标签小写、不乱嵌套、提高搜索机器人搜索几率、使用外 链css和js脚本、结构行为表现的分离、文件下载与页面速度更快、内容能被更多的用户所访问、内容能被更广泛的设备所访问、更少的代码和组件，容易维 护、改版方便，不需要变动页面内容、提供打印版本而不需要复制内容、提高网站易用性；\n\n#### 2.xhtml和html有什么区别\nHTML是一种基本的WEB网页设计语言，XHTML是一个基于XML的置标语言\n最主要的不同：\nXHTML 元素必须被正确地嵌套。\nXHTML 元素必须被关闭。\n标签名必须用小写字母。\nXHTML 文档必须拥有根元素。\n\n#### 3.Doctype? 严格模式与混杂模式-如何触发这两种模式，区分它们有何意义?\n用于声明文档使用那种规范（html/Xhtml）一般为 严格 过度 基于框架的html文档\n加入XMl声明可触发，解析方式更改为IE5.5 拥有IE5.5的bug\n\n#### 4.行内元素有哪些?块级元素有哪些?CSS的盒模型?\n块级元素：div p h1 h2 h3 h4 form ul\n行内元素: a b br i span input select\nCss盒模型:内容，border ,margin，padding\n\n#### 5.CSS引入的方式有哪些? link和@import的区别是?\n内联 内嵌 外链 导入\n区别 ：同时加载\n前者无兼容性，后者CSS2.1以下浏览器不支持\nLink 支持使用javascript改变样式，后者不可\n\n#### 6.CSS选择符有哪些?哪些属性可以继承?优先级算法如何计算?内联和important哪个优先级高?\n标签选择符 类选择符 id选择符\n继承不如指定 Id>class>标签选择\n后者优先级高\n\n#### 7.前端页面有哪三层构成，分别是什么?作用是什么?\n结构层 Html 表示层 CSS 行为层 js\n\n#### 8.css的基本语句构成是?\n选择器{属性1:值1;属性2:值2;……}\n\n#### 9.你做的页面在哪些流览器测试过?这些浏览器的内核分别是什么?\nIe(Ie内核) 火狐（Gecko） 谷歌（webkit） opear(Presto)\n\n#### 10.写出几种IE6 BUG的解决方法\n1.双边距BUG float引起的 使用display\n2.3像素问题 使用float引起的 使用dislpay:inline -3px\n3.超链接hover 点击后失效 使用正确的书写顺序 link visited hover active\n4.Ie z-index问题 给父级添加position:relative\n5.Png 透明 使用js代码 改\n6.Min-height 最小高度 ！Important 解决’\n7.select 在ie6下遮盖 使用iframe嵌套\n8.为什么没有办法定义1px左右的宽度容器（IE6默认的行高造成的，使用over:hidden,zoom:0.08 line-height:1px）\n\n#### 11.标签上title与alt属性的区别是什么?\nAlt 当图片不显示是 用文字代表。\nTitle 为该属性提供信息\n\n#### 12.描述css reset的作用和用途。\nReset重置浏览器的css默认属性 浏览器的品种不同，样式不同，然后重置，让他们统一\n\n#### 13.解释css sprites，如何使用。\nCss 精灵 把一堆小的图片整合到一张大的图片上，减轻服务器对图片的请求数量\n\n#### 14.浏览器标准模式和怪异模式之间的区别是什么?\n盒子模型 渲染模式的不同\n使用 window.top.document.compatMode 可显示为什么模式\n\n#### 15.你如何对网站的文件和资源进行优化?期待的解决方案包括：\n文件合并\n文件最小化/文件压缩\n使用CDN托管\n缓存的使用\n\n#### 16.什么是语义化的HTML?\n直观的认识标签 对于搜索引擎的抓取有好处\n\n#### 17.清除浮动的几种方式，各自的优缺点\n1.使用空标签清除浮动 clear:both（理论上能清楚任何标签，，，增加无意义的标签）\n2.使用overflow:auto（空标签元素清除浮动而不得不增加无意代码的弊端,,使用zoom:1用于兼容IE）\n3.是用afert伪元素清除浮动(用于非IE浏览器)\n\n## Javascript\n#### 1.javascript的typeof返回哪些数据类型\nObject number function boolean underfind\n\n#### 2.例举3种强制类型转换和2种隐式类型转换?\n强制（parseInt,parseFloat,number）\n隐式（== – ===）\n\n#### 3.split() join() 的区别\n前者是切割成数组的形式，后者是将数组转换成字符串\n\n#### 4.数组方法pop() push() unshift() shift()\nPush()尾部添加 pop()尾部删除\nUnshift()头部添加 shift()头部删除\n\n#### 5.事件绑定和普通事件有什么区别\n\n#### 6.IE和DOM事件流的区别\n1.执行顺序不一样、\n2.参数不一样\n3.事件加不加on\n4.this指向问题\n\n#### 7.IE和标准下有哪些兼容性的写法\nVar ev = ev || window.event\ndocument.documentElement.clientWidth || document.body.clientWidth\nVar target = ev.srcElement||ev.target\n\n#### 8.ajax请求的时候get 和post方式的区别\n一个在url后面 一个放在虚拟载体里面\n有大小限制\n安全问题\n应用不同 一个是论坛等只需要请求的，一个是类似修改密码的\n\n#### 9.call和apply的区别\nObject.call(this,obj1,obj2,obj3)\nObject.apply(this,arguments)\nobj.call(thisObj, arg1, arg2, ...);\nobj.apply(thisObj, [arg1, arg2, ...]);\n两者作用一致，都是把obj(即this)绑定到thisObj，这时候thisObj具备了obj的属性和方法。或者说thisObj『继承』了obj的属性和方法。\n唯一区别是apply接受的是数组参数，call接受的是连续参数。\n```\nfunction add(j, k){\n    return j+k;\n}\n\nfunction sub(j, k){\n    return j-k;\n}\n```\n我们在控制台运行：\n```\nadd(5,3); //8\nadd.call(sub, 5, 3); //8\nadd.apply(sub, [5, 3]); //8\n\nsub(5, 3); //2\nsub.call(add, 5, 3); //2\nsub.apply(add, [5, 3]); //2\n\n```\n\n\n#### 10.ajax请求时，如何解释json数据\n使用eval parse 鉴于安全性考虑 使用parse更靠谱\n11.b继承a的方法\n\n12.写一个获取非行间样式的函数\n```\nfunction getStyle(obj,attr,value)\n{\nif(!value)\n{\nif(obj.currentStyle)\n{\nreturn obj.currentStyle(attr)\n}\nelse\n{\nobj.getComputedStyle(attr,false)\n}\n}\nelse\n{\nobj.style[attr]=value\n}\n}\n```\n#### 13.事件委托是什么\n让利用事件冒泡的原理，让自己的所触发的事件，让他的父元素代替执行！\nhttp://www.webasily.com/?p=78 例子可见此链接\n\n#### 14.闭包是什么，有什么特性，对页面有什么影响\n闭包就是能够读取其他函数内部变量的函数。\nhttp://blog.csdn.net/gaoshanwudi/article/details/7355794 此链接可查看（问这个问题的不是一个公司）\n\n15.如何阻止事件冒泡和默认事件\ncanceBubble return false\n\n#### 16.添加 删除 替换 插入到某个接点的方法\nobj.appendChidl()\nobj.innersetBefore\nobj.replaceChild\nobj.removeChild\n\n#### 17.解释jsonp的原理，以及为什么不是真正的ajax\n动态创建script标签，回调函数\nAjax是页面无刷新请求数据操作\n\n#### 18.javascript的本地对象，内置对象和宿主对象\n本地对象为array obj regexp等可以new实例化\n内置对象为gload Math 等不可以实例化的\n宿主为浏览器自带的document,window 等\n\n#### 19.document load 和document ready的区别\nDocument.onload 是在结构和样式加载完才执行js\nDocument.ready原生种没有这个方法，jquery中有 $().ready(function)\n\n#### 20.”==”和“===”的不同\n前者会自动转换类型\n后者不会\n\n#### 21.javascript的同源策略\n一段脚本只能读取来自于同一来源的窗口和文档的属性，这里的同一来源指的是主机名、协议和端口号的组合\n\n#### 22.编写一个数组去重的方法\nfunction oSort(arr)\n{\n      var result ={};\n      var newArr=[];\nfor(var i=0;i<arr.length;i++)\n{\n      if(!result[arr])\n     {\n         newArr.push(arr)\n          result[arr]=1\n      }\n}\nreturn newArr\n}\n#### 23.cookie  sessionstorage  localstorage\ncookie数据始终在同源的http请求中携带（即使不需要），即cookie在浏览器和服务器间来回传递。而sessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存。cookie数据还有路径（path）的概念，可以限制cookie只属于某个路径下。存储大小限制也不同，cookie数据不能超过4k，同时因为每次http请求都会携带cookie，所以cookie只适合保存很小的数据，如会话标识。sessionStorage和localStorage 虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大。数据有效期不同，sessionStorage：仅在当前浏览器窗口关闭前有效，自然也就不可能持久保持；localStorage：始终有效，窗口或浏览器关闭也一直保存，因此用作持久数据；cookie只在设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭。作用域不同，sessionStorage不在不同的浏览器窗口中共享，即使是同一个页面；localStorage 在所有同源窗口中都是共享的；cookie也是在所有同源窗口中都是共享的。Web Storage 支持事件通知机制，可以将数据更新的通知发送给监听者。Web Storage 的 api 接口使用更方便。\n24.split\n<script type=\"text/javascript\">\n\nvar str=\"How are you doing today?\"\n\ndocument.write(str.split(\" \") + \"<br />\")\ndocument.write(str.split(\"\") + \"<br />\")\ndocument.write(str.split(\" \",3))\n\n</script>\n输出：\nHow,are,you,doing,today?\nH,o,w, ,a,r,e, ,y,o,u, ,d,o,i,n,g, ,t,o,d,a,y,?\nHow,are,you\n\n#### 25. 对象创建过程\n1.分配空间。要注意的是，分配空间不光是分配子类的空间，子类对象中包含的父类对象所需要的空间，一样在这一步统一分配。在分配的空间的时候，会把所有的属性设置为默认值。\n\n2.递归的构造父类对象。\n\n3.初始化本类属性。\n\n4.调用本类的构造方法。\n\n总结一下，创建B类对象的步骤一共有5步\n\n1.分配空间\n\n2.初始化A类属性。\n\n3.调用A类的构造方法.\n\n4.初始化B的属性。\n\n5.调用B的构造方法。\n","slug":"前端知识点2","published":1,"updated":"2017-04-10T10:29:55.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5naxw53001hfcxe8s3doxwn","content":"<h4 id=\"1-将url的查询参数解析成字典对象\"><a href=\"#1-将url的查询参数解析成字典对象\" class=\"headerlink\" title=\"1,将url的查询参数解析成字典对象\"></a>1,将url的查询参数解析成字典对象</h4><p>这个题目不约而同的出现在了多家公司的面试题中，当然也是因为太过于典型，解决方案无非就是拆字符或者用正则匹配来解决，我个人强烈建议用正则匹配，因为url允许用户随意输入，如果用拆字符的方式，有任何一处没有考虑到容错，就会导致整个js都报错。而正则就没有这个问题，他只匹配出正确的配对，非法的全部过滤掉，简单，方便。<br><a id=\"more\"></a><br>实现代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">function getQueryObject(url) &#123;</div><div class=\"line\">    url = url == null ? window.location.href : url;</div><div class=\"line\">    var search = url.substring(url.lastIndexOf(&quot;?&quot;) + 1);</div><div class=\"line\">    var obj = &#123;&#125;;</div><div class=\"line\">    var reg = /([^?&amp;=]+)=([^?&amp;=]*)/g;</div><div class=\"line\">    search.replace(reg, function (rs, $1, $2) &#123;</div><div class=\"line\">        var name = decodeURIComponent($1);</div><div class=\"line\">        var val = decodeURIComponent($2);               </div><div class=\"line\">        val = String(val);</div><div class=\"line\">        obj[name] = val;</div><div class=\"line\">        return rs;</div><div class=\"line\">    &#125;);</div><div class=\"line\">    return obj;</div><div class=\"line\">&#125;</div><div class=\"line\">getQueryObject(&quot;http://www.cnblogs.com/leee/p/4456840.html?name=1&amp;dd=ddd**&quot;)</div></pre></td></tr></table></figure></p>\n<p><code>Object {name: &quot;1&quot;, dd: &quot;ddd**&quot;}</code></p>\n<h4 id=\"2-console-log-1-”2”-输出的是3\"><a href=\"#2-console-log-1-”2”-输出的是3\" class=\"headerlink\" title=\"2.console.log(1+ +”2”);输出的是3\"></a>2.console.log(1+ +”2”);输出的是3</h4><p>等同于: 1+(+’2’)：<br>+’2’ 的 + 是一元操作符，对 ‘2’ 进行Number()操作，转为数字的2，所以等于3<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">console.log(&quot;A&quot;-&quot;B&quot;+&quot;2&quot;)   NaN2</div><div class=\"line\">console.log(&quot;A&quot;-&quot;B&quot;+2)    NaN</div></pre></td></tr></table></figure></p>\n<h4 id=\"3-算法\"><a href=\"#3-算法\" class=\"headerlink\" title=\"3. 算法\"></a>3. 算法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">function test(a,b)&#123;</div><div class=\"line\">     console.log(b);</div><div class=\"line\">     return&#123;</div><div class=\"line\">         test:function(x)&#123;</div><div class=\"line\">             return test(x,a);</div><div class=\"line\">         &#125;</div><div class=\"line\">     &#125;</div><div class=\"line\"> &#125;</div><div class=\"line\"> var a=test(0);a.test(1);a.test(2);a.test(3);       </div><div class=\"line\"> // underfined  0  0  0</div></pre></td></tr></table></figure>\n<h4 id=\"4-三次握手\"><a href=\"#4-三次握手\" class=\"headerlink\" title=\"4. 三次握手\"></a>4. 三次握手</h4><h5 id=\"第一次\"><a href=\"#第一次\" class=\"headerlink\" title=\"第一次\"></a>第一次</h5><p>第一次握手：建立连接时，客户端发送syn包（syn=j）到服务器，并进入SYN_SENT状态，等待服务器确认；SYN：同步序列编号（Synchronize Sequence Numbers）。</p>\n<h5 id=\"第二次\"><a href=\"#第二次\" class=\"headerlink\" title=\"第二次\"></a>第二次</h5><p>第二次握手：服务器收到syn包，必须确认客户的SYN（ack=j+1），同时自己也发送一个SYN包（syn=k），即SYN+ACK包，此时服务器进入SYN_RECV状态；</p>\n<h5 id=\"第三次\"><a href=\"#第三次\" class=\"headerlink\" title=\"第三次\"></a>第三次</h5><p>第三次握手：客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK(ack=k+1），此包发送完毕，客户端和服务器进入ESTABLISHED（TCP连接成功）状态，完成三次握手。<br>完成三次握手，客户端与服务器开始传送数据，在上述过程中，还有一些重要的概念：</p>\n<h4 id=\"5-http-状态码\"><a href=\"#5-http-状态码\" class=\"headerlink\" title=\"5. http 状态码\"></a>5. http 状态码</h4><h5 id=\"一、HTTP状态码\"><a href=\"#一、HTTP状态码\" class=\"headerlink\" title=\"一、HTTP状态码\"></a>一、HTTP状态码</h5><p>如果某项请求发送到您的服务器要求显示您网站上的某个网页（例如，用户通过浏览器访问您的网页或 Googlebot 抓取网页时），服务器将会返回 HTTP 状态代码以响应请求。</p>\n<p>此状态代码提供关于请求状态的信息， 告诉 Googlebot 关于您的网站和请求的网页的信息。<br>一些常见的状态代码包括：<br>200 – 服务器成功返回网页<br>404 – 请求的网页不存在<br>503 – 服务器暂时不可用</p>\n<p>下面提供 HTTP 状态代码的完整列表。 点击链接可了解详情。 您也可以访问有关 HTTP 状态代码的 W3C 网页以获得更多信息 。</p>\n<p>1xx：请求收到，继续处理<br>2xx：操作成功收到，分析、接受<br>3xx：完成此请求必须进一步处理<br>4xx：请求包含一个错误语法或不能完成<br>5xx：服务器执行一个完全有效请求失败<br>1xx （临时响应）<br>表示临时响应并需要请求者继续执行操作的状态代码。</p>\n<p>代码 说明<br>100（继续）    请求者应当继续提出请求。 服务器返回此代码表示已收到请求的第一部分，正在等待其余部分。<br>101（切换协议）    请求者已要求服务器切换协议，服务器已确认并准备切换。</p>\n<p>2xx （成功）<br>表示服务器成功处理了请求的状态代码。</p>\n<p>代码 说明<br>200（成功）    服务器已成功处理了请求。 通常，这表示服务器提供了请求的网页。 如果针对您的 robots.txt 文件显示此状态，则表示 Googlebot 已成功检索到该文件。<br>201（已创建）    请求成功并且服务器创建了新的资源。<br>202（已接受）    服务器已接受请求，但尚未处理。<br>203（非授权信息）    服务器已成功处理了请求，但返回的信息可能来自另一来源。<br>204（无内容）    服务器成功处理了请求，但没有返回任何内容。<br>205（重置内容）    服务器成功处理了请求，但没有返回任何内容。 与 204 响应不同，此响应要求请求者重置文档视图（例如，清除表单内容以输入新内容）。<br>206（部分内容）    服务器成功处理了部分 GET 请求。</p>\n<p>3xx （重定向）<br>要完成请求，需要进一步操作。 通常，这些状态代码用来重定向。 Google 建议您在每次请求中使用重定向不要超过 5 次。 您可以使用网站管理员工具查看一下 Googlebot 在抓取重定向网页时是否遇到问题。 诊断 下的网 络抓取 页面列出了由于重定向错误而导致 Googlebot 无法抓取的网址。</p>\n<p>代码 说明<br>300（多种选择）    针对请求，服务器可执行多种操作。 服务器可根据请求者（用户代理）选择一项操作，或提供操作列表供请求者选择。<br>301（永久移动）    请求的网页已永久移动到新位置。 服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置。 您应使用此代码告诉 Googlebot 某个网页或网站已永久移动到新位置。<br>302（暂时移动）    服 务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。 此代码与响应 GET 或 HEAD 请求的 301 代码类似，会自动将请求者转到不同的位置，但您不应使用此代码来告诉 Googlebot 某个网页或网站已经移动，因为 Googlebot 会继续抓取原有位置并编入索引。<br>303（查看其他位置）    请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码。 对于除 HEAD 之外的所有请求，服务器会自动转到其他位置。<br>304（未修改）    自从上次请求后，请求的网页未修改过。服务器返回此响应时，不会返回网页内容。如果网页自请求者上次请求后再也没有更改 过，您应当将服务器配置为返回此响应（称为 If-Modified-Since HTTP 标头）。 由于服务器可以告诉 Googlebot 自从上次抓取后网页没有更改过，因此可节省带宽和开销<br>。<br>305（使用代理）    请求者只能使用代理访问请求的网页。 如果服务器返回此响应，还表示请求者应使用代理。<br>307（暂时重定向）    服 务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。 此代码与响应 GET 和 HEAD 请求的 301 代码类似，会自动将请求者转到不同的位置，但您不应使用此代码来告诉 Googlebot 某个页面或网站已经移动，因为 Googlebot 会继续抓取原有位置并编入索引。</p>\n<p>4xx（请求错误）<br>这些状态代码表示请求可能出错，妨碍了服务器的处理。</p>\n<p>代码 说明<br>400（错误请求）    服务器不理解请求的语法。<br>401（未授权）    请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应。<br>403（禁止）    服务器拒绝请求。 如果您看到 Googlebot 在尝试抓取您网站上的有效网页时收到此状态代码（可以在 Google 网站管理员工具诊 断 下的网络抓取 页面上看到此信息），可能是您的服务器或主机拒绝 Googlebot 访问。<br>404（未找到）    服务器找不到请求的网页。 例如，如果请求服务器上不存在的网页，服务器通常会返回此代码。如果您的网站上没有 robots.txt 文件，而您在 Google 网站管理员工具”诊断”标签的 robots.txt 页 上看到此状态，那么这是正确的状态。 但是，如果您有 robots.txt 文件而又看到此状态，则说明您的 robots.txt 文件可能命名错误或位于错误的位置 （该文件应当位于顶级域名，名为 robots.txt）。<br>如果您看到有关 Googlebot 尝试抓取的网址的此状态（在”诊断”标签的 HTTP 错误页上），则表示 Googlebot 追踪的可能是另一个页面的无效链接（是旧链接或输入有误的链接）。<br>405（禁用的方法）    禁用请求中指定的方法。<br>406（不可接受）    无法使用请求的内容特性响应请求的网页。<br>407（需要代理授权）    此状态代码与 401（未授权）类似，但指定请求者应当授权使用代理。 如果服务器返回此响应，还会指明请求者应当使用的代理。<br>408（请求超时）    服务器等候请求时发生超时。<br>409（冲突）    服务器在完成请求时发生冲突。 服务器必须在响应中包含有关冲突的信息。 服务器在响应与前一个请求相冲突的 PUT 请求时可能会返回此代码，同时会附上两个请求的差异列表。<br>410（已删除）    如果请求的资源已永久删除，服务器就会返回此响应。 该代码与 404（未找到）代码相似，但在资源以前存在而现在不存在的情况下，有时会用来替代 404 代码。 如果资源已永久删除，您应当使用 301 指定资源的新位置。<br>411（需要有效长度）    服务器不接受不含有效内容长度标头字段的请求。<br>412（未满足前提条件）    服务器未满足请求者在请求中设置的其中一个前提条件。<br>413（请求实体过大）    服务器无法处理请求，因为请求实体过大，超出服务器的处理能力。<br>414（请求的 URI 过长）    请求的 URI（通常为网址）过长，服务器无法处理。<br>415（不支持的媒体类型）    请求的格式不受请求页面的支持。<br>416（请求范围不符合要求）    如果页面无法提供请求的范围，则服务器会返回此状态代码。<br>417（未满足期望要求）    服务器未满足”期望”请求标头字段的要求。</p>\n<p>5xx （服务器错误）<br>这些状态代码表示服务器在尝试处理请求时发生内部错误。 这些错误可能是服务器本身的错误，而不是请求出错。</p>\n<p>代码 说明<br>500（服务器内部错误）    服务器遇到错误，无法完成请求。<br>501（尚未实施）    服务器不具备完成请求的功能。 例如，服务器无法识别请求方法时可能会返回此代码。<br>502（错误网关）    服务器充当网关或代理，从上游服务器收到无效响应。<br>503（服务不可用）    服务器目前无法使用（由于超载或停机维护）。 通常，这只是暂时状态。<br>504（网关超时）    服务器充当网关或代理，但没有及时从上游服务器收到请求。<br>505（HTTP 版本不受支持）    服务器不支持请求中所用的 HTTP 协议版本。</p>\n<h2 id=\"HTML-CSS\"><a href=\"#HTML-CSS\" class=\"headerlink\" title=\"HTML+CSS\"></a>HTML+CSS</h2><h5 id=\"1-对WEB标准以及W3C的理解与认识\"><a href=\"#1-对WEB标准以及W3C的理解与认识\" class=\"headerlink\" title=\"1.对WEB标准以及W3C的理解与认识\"></a>1.对WEB标准以及W3C的理解与认识</h5><p>标签闭合、标签小写、不乱嵌套、提高搜索机器人搜索几率、使用外 链css和js脚本、结构行为表现的分离、文件下载与页面速度更快、内容能被更多的用户所访问、内容能被更广泛的设备所访问、更少的代码和组件，容易维 护、改版方便，不需要变动页面内容、提供打印版本而不需要复制内容、提高网站易用性；</p>\n<h4 id=\"2-xhtml和html有什么区别\"><a href=\"#2-xhtml和html有什么区别\" class=\"headerlink\" title=\"2.xhtml和html有什么区别\"></a>2.xhtml和html有什么区别</h4><p>HTML是一种基本的WEB网页设计语言，XHTML是一个基于XML的置标语言<br>最主要的不同：<br>XHTML 元素必须被正确地嵌套。<br>XHTML 元素必须被关闭。<br>标签名必须用小写字母。<br>XHTML 文档必须拥有根元素。</p>\n<h4 id=\"3-Doctype-严格模式与混杂模式-如何触发这两种模式，区分它们有何意义\"><a href=\"#3-Doctype-严格模式与混杂模式-如何触发这两种模式，区分它们有何意义\" class=\"headerlink\" title=\"3.Doctype? 严格模式与混杂模式-如何触发这两种模式，区分它们有何意义?\"></a>3.Doctype? 严格模式与混杂模式-如何触发这两种模式，区分它们有何意义?</h4><p>用于声明文档使用那种规范（html/Xhtml）一般为 严格 过度 基于框架的html文档<br>加入XMl声明可触发，解析方式更改为IE5.5 拥有IE5.5的bug</p>\n<h4 id=\"4-行内元素有哪些-块级元素有哪些-CSS的盒模型\"><a href=\"#4-行内元素有哪些-块级元素有哪些-CSS的盒模型\" class=\"headerlink\" title=\"4.行内元素有哪些?块级元素有哪些?CSS的盒模型?\"></a>4.行内元素有哪些?块级元素有哪些?CSS的盒模型?</h4><p>块级元素：div p h1 h2 h3 h4 form ul<br>行内元素: a b br i span input select<br>Css盒模型:内容，border ,margin，padding</p>\n<h4 id=\"5-CSS引入的方式有哪些-link和-import的区别是\"><a href=\"#5-CSS引入的方式有哪些-link和-import的区别是\" class=\"headerlink\" title=\"5.CSS引入的方式有哪些? link和@import的区别是?\"></a>5.CSS引入的方式有哪些? link和@import的区别是?</h4><p>内联 内嵌 外链 导入<br>区别 ：同时加载<br>前者无兼容性，后者CSS2.1以下浏览器不支持<br>Link 支持使用javascript改变样式，后者不可</p>\n<h4 id=\"6-CSS选择符有哪些-哪些属性可以继承-优先级算法如何计算-内联和important哪个优先级高\"><a href=\"#6-CSS选择符有哪些-哪些属性可以继承-优先级算法如何计算-内联和important哪个优先级高\" class=\"headerlink\" title=\"6.CSS选择符有哪些?哪些属性可以继承?优先级算法如何计算?内联和important哪个优先级高?\"></a>6.CSS选择符有哪些?哪些属性可以继承?优先级算法如何计算?内联和important哪个优先级高?</h4><p>标签选择符 类选择符 id选择符<br>继承不如指定 Id&gt;class&gt;标签选择<br>后者优先级高</p>\n<h4 id=\"7-前端页面有哪三层构成，分别是什么-作用是什么\"><a href=\"#7-前端页面有哪三层构成，分别是什么-作用是什么\" class=\"headerlink\" title=\"7.前端页面有哪三层构成，分别是什么?作用是什么?\"></a>7.前端页面有哪三层构成，分别是什么?作用是什么?</h4><p>结构层 Html 表示层 CSS 行为层 js</p>\n<h4 id=\"8-css的基本语句构成是\"><a href=\"#8-css的基本语句构成是\" class=\"headerlink\" title=\"8.css的基本语句构成是?\"></a>8.css的基本语句构成是?</h4><p>选择器{属性1:值1;属性2:值2;……}</p>\n<h4 id=\"9-你做的页面在哪些流览器测试过-这些浏览器的内核分别是什么\"><a href=\"#9-你做的页面在哪些流览器测试过-这些浏览器的内核分别是什么\" class=\"headerlink\" title=\"9.你做的页面在哪些流览器测试过?这些浏览器的内核分别是什么?\"></a>9.你做的页面在哪些流览器测试过?这些浏览器的内核分别是什么?</h4><p>Ie(Ie内核) 火狐（Gecko） 谷歌（webkit） opear(Presto)</p>\n<h4 id=\"10-写出几种IE6-BUG的解决方法\"><a href=\"#10-写出几种IE6-BUG的解决方法\" class=\"headerlink\" title=\"10.写出几种IE6 BUG的解决方法\"></a>10.写出几种IE6 BUG的解决方法</h4><p>1.双边距BUG float引起的 使用display<br>2.3像素问题 使用float引起的 使用dislpay:inline -3px<br>3.超链接hover 点击后失效 使用正确的书写顺序 link visited hover active<br>4.Ie z-index问题 给父级添加position:relative<br>5.Png 透明 使用js代码 改<br>6.Min-height 最小高度 ！Important 解决’<br>7.select 在ie6下遮盖 使用iframe嵌套<br>8.为什么没有办法定义1px左右的宽度容器（IE6默认的行高造成的，使用over:hidden,zoom:0.08 line-height:1px）</p>\n<h4 id=\"11-标签上title与alt属性的区别是什么\"><a href=\"#11-标签上title与alt属性的区别是什么\" class=\"headerlink\" title=\"11.标签上title与alt属性的区别是什么?\"></a>11.标签上title与alt属性的区别是什么?</h4><p>Alt 当图片不显示是 用文字代表。<br>Title 为该属性提供信息</p>\n<h4 id=\"12-描述css-reset的作用和用途。\"><a href=\"#12-描述css-reset的作用和用途。\" class=\"headerlink\" title=\"12.描述css reset的作用和用途。\"></a>12.描述css reset的作用和用途。</h4><p>Reset重置浏览器的css默认属性 浏览器的品种不同，样式不同，然后重置，让他们统一</p>\n<h4 id=\"13-解释css-sprites，如何使用。\"><a href=\"#13-解释css-sprites，如何使用。\" class=\"headerlink\" title=\"13.解释css sprites，如何使用。\"></a>13.解释css sprites，如何使用。</h4><p>Css 精灵 把一堆小的图片整合到一张大的图片上，减轻服务器对图片的请求数量</p>\n<h4 id=\"14-浏览器标准模式和怪异模式之间的区别是什么\"><a href=\"#14-浏览器标准模式和怪异模式之间的区别是什么\" class=\"headerlink\" title=\"14.浏览器标准模式和怪异模式之间的区别是什么?\"></a>14.浏览器标准模式和怪异模式之间的区别是什么?</h4><p>盒子模型 渲染模式的不同<br>使用 window.top.document.compatMode 可显示为什么模式</p>\n<h4 id=\"15-你如何对网站的文件和资源进行优化-期待的解决方案包括：\"><a href=\"#15-你如何对网站的文件和资源进行优化-期待的解决方案包括：\" class=\"headerlink\" title=\"15.你如何对网站的文件和资源进行优化?期待的解决方案包括：\"></a>15.你如何对网站的文件和资源进行优化?期待的解决方案包括：</h4><p>文件合并<br>文件最小化/文件压缩<br>使用CDN托管<br>缓存的使用</p>\n<h4 id=\"16-什么是语义化的HTML\"><a href=\"#16-什么是语义化的HTML\" class=\"headerlink\" title=\"16.什么是语义化的HTML?\"></a>16.什么是语义化的HTML?</h4><p>直观的认识标签 对于搜索引擎的抓取有好处</p>\n<h4 id=\"17-清除浮动的几种方式，各自的优缺点\"><a href=\"#17-清除浮动的几种方式，各自的优缺点\" class=\"headerlink\" title=\"17.清除浮动的几种方式，各自的优缺点\"></a>17.清除浮动的几种方式，各自的优缺点</h4><p>1.使用空标签清除浮动 clear:both（理论上能清楚任何标签，，，增加无意义的标签）<br>2.使用overflow:auto（空标签元素清除浮动而不得不增加无意代码的弊端,,使用zoom:1用于兼容IE）<br>3.是用afert伪元素清除浮动(用于非IE浏览器)</p>\n<h2 id=\"Javascript\"><a href=\"#Javascript\" class=\"headerlink\" title=\"Javascript\"></a>Javascript</h2><h4 id=\"1-javascript的typeof返回哪些数据类型\"><a href=\"#1-javascript的typeof返回哪些数据类型\" class=\"headerlink\" title=\"1.javascript的typeof返回哪些数据类型\"></a>1.javascript的typeof返回哪些数据类型</h4><p>Object number function boolean underfind</p>\n<h4 id=\"2-例举3种强制类型转换和2种隐式类型转换\"><a href=\"#2-例举3种强制类型转换和2种隐式类型转换\" class=\"headerlink\" title=\"2.例举3种强制类型转换和2种隐式类型转换?\"></a>2.例举3种强制类型转换和2种隐式类型转换?</h4><p>强制（parseInt,parseFloat,number）<br>隐式（== – ===）</p>\n<h4 id=\"3-split-join-的区别\"><a href=\"#3-split-join-的区别\" class=\"headerlink\" title=\"3.split() join() 的区别\"></a>3.split() join() 的区别</h4><p>前者是切割成数组的形式，后者是将数组转换成字符串</p>\n<h4 id=\"4-数组方法pop-push-unshift-shift\"><a href=\"#4-数组方法pop-push-unshift-shift\" class=\"headerlink\" title=\"4.数组方法pop() push() unshift() shift()\"></a>4.数组方法pop() push() unshift() shift()</h4><p>Push()尾部添加 pop()尾部删除<br>Unshift()头部添加 shift()头部删除</p>\n<h4 id=\"5-事件绑定和普通事件有什么区别\"><a href=\"#5-事件绑定和普通事件有什么区别\" class=\"headerlink\" title=\"5.事件绑定和普通事件有什么区别\"></a>5.事件绑定和普通事件有什么区别</h4><h4 id=\"6-IE和DOM事件流的区别\"><a href=\"#6-IE和DOM事件流的区别\" class=\"headerlink\" title=\"6.IE和DOM事件流的区别\"></a>6.IE和DOM事件流的区别</h4><p>1.执行顺序不一样、<br>2.参数不一样<br>3.事件加不加on<br>4.this指向问题</p>\n<h4 id=\"7-IE和标准下有哪些兼容性的写法\"><a href=\"#7-IE和标准下有哪些兼容性的写法\" class=\"headerlink\" title=\"7.IE和标准下有哪些兼容性的写法\"></a>7.IE和标准下有哪些兼容性的写法</h4><p>Var ev = ev || window.event<br>document.documentElement.clientWidth || document.body.clientWidth<br>Var target = ev.srcElement||ev.target</p>\n<h4 id=\"8-ajax请求的时候get-和post方式的区别\"><a href=\"#8-ajax请求的时候get-和post方式的区别\" class=\"headerlink\" title=\"8.ajax请求的时候get 和post方式的区别\"></a>8.ajax请求的时候get 和post方式的区别</h4><p>一个在url后面 一个放在虚拟载体里面<br>有大小限制<br>安全问题<br>应用不同 一个是论坛等只需要请求的，一个是类似修改密码的</p>\n<h4 id=\"9-call和apply的区别\"><a href=\"#9-call和apply的区别\" class=\"headerlink\" title=\"9.call和apply的区别\"></a>9.call和apply的区别</h4><p>Object.call(this,obj1,obj2,obj3)<br>Object.apply(this,arguments)<br>obj.call(thisObj, arg1, arg2, …);<br>obj.apply(thisObj, [arg1, arg2, …]);<br>两者作用一致，都是把obj(即this)绑定到thisObj，这时候thisObj具备了obj的属性和方法。或者说thisObj『继承』了obj的属性和方法。<br>唯一区别是apply接受的是数组参数，call接受的是连续参数。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">function add(j, k)&#123;</div><div class=\"line\">    return j+k;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function sub(j, k)&#123;</div><div class=\"line\">    return j-k;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>我们在控制台运行：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">add(5,3); //8</div><div class=\"line\">add.call(sub, 5, 3); //8</div><div class=\"line\">add.apply(sub, [5, 3]); //8</div><div class=\"line\"></div><div class=\"line\">sub(5, 3); //2</div><div class=\"line\">sub.call(add, 5, 3); //2</div><div class=\"line\">sub.apply(add, [5, 3]); //2</div></pre></td></tr></table></figure></p>\n<h4 id=\"10-ajax请求时，如何解释json数据\"><a href=\"#10-ajax请求时，如何解释json数据\" class=\"headerlink\" title=\"10.ajax请求时，如何解释json数据\"></a>10.ajax请求时，如何解释json数据</h4><p>使用eval parse 鉴于安全性考虑 使用parse更靠谱<br>11.b继承a的方法</p>\n<p>12.写一个获取非行间样式的函数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">function getStyle(obj,attr,value)</div><div class=\"line\">&#123;</div><div class=\"line\">if(!value)</div><div class=\"line\">&#123;</div><div class=\"line\">if(obj.currentStyle)</div><div class=\"line\">&#123;</div><div class=\"line\">return obj.currentStyle(attr)</div><div class=\"line\">&#125;</div><div class=\"line\">else</div><div class=\"line\">&#123;</div><div class=\"line\">obj.getComputedStyle(attr,false)</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">else</div><div class=\"line\">&#123;</div><div class=\"line\">obj.style[attr]=value</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"13-事件委托是什么\"><a href=\"#13-事件委托是什么\" class=\"headerlink\" title=\"13.事件委托是什么\"></a>13.事件委托是什么</h4><p>让利用事件冒泡的原理，让自己的所触发的事件，让他的父元素代替执行！<br><a href=\"http://www.webasily.com/?p=78\" target=\"_blank\" rel=\"external\">http://www.webasily.com/?p=78</a> 例子可见此链接</p>\n<h4 id=\"14-闭包是什么，有什么特性，对页面有什么影响\"><a href=\"#14-闭包是什么，有什么特性，对页面有什么影响\" class=\"headerlink\" title=\"14.闭包是什么，有什么特性，对页面有什么影响\"></a>14.闭包是什么，有什么特性，对页面有什么影响</h4><p>闭包就是能够读取其他函数内部变量的函数。<br><a href=\"http://blog.csdn.net/gaoshanwudi/article/details/7355794\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/gaoshanwudi/article/details/7355794</a> 此链接可查看（问这个问题的不是一个公司）</p>\n<p>15.如何阻止事件冒泡和默认事件<br>canceBubble return false</p>\n<h4 id=\"16-添加-删除-替换-插入到某个接点的方法\"><a href=\"#16-添加-删除-替换-插入到某个接点的方法\" class=\"headerlink\" title=\"16.添加 删除 替换 插入到某个接点的方法\"></a>16.添加 删除 替换 插入到某个接点的方法</h4><p>obj.appendChidl()<br>obj.innersetBefore<br>obj.replaceChild<br>obj.removeChild</p>\n<h4 id=\"17-解释jsonp的原理，以及为什么不是真正的ajax\"><a href=\"#17-解释jsonp的原理，以及为什么不是真正的ajax\" class=\"headerlink\" title=\"17.解释jsonp的原理，以及为什么不是真正的ajax\"></a>17.解释jsonp的原理，以及为什么不是真正的ajax</h4><p>动态创建script标签，回调函数<br>Ajax是页面无刷新请求数据操作</p>\n<h4 id=\"18-javascript的本地对象，内置对象和宿主对象\"><a href=\"#18-javascript的本地对象，内置对象和宿主对象\" class=\"headerlink\" title=\"18.javascript的本地对象，内置对象和宿主对象\"></a>18.javascript的本地对象，内置对象和宿主对象</h4><p>本地对象为array obj regexp等可以new实例化<br>内置对象为gload Math 等不可以实例化的<br>宿主为浏览器自带的document,window 等</p>\n<h4 id=\"19-document-load-和document-ready的区别\"><a href=\"#19-document-load-和document-ready的区别\" class=\"headerlink\" title=\"19.document load 和document ready的区别\"></a>19.document load 和document ready的区别</h4><p>Document.onload 是在结构和样式加载完才执行js<br>Document.ready原生种没有这个方法，jquery中有 $().ready(function)</p>\n<h4 id=\"20-”-”和“-”的不同\"><a href=\"#20-”-”和“-”的不同\" class=\"headerlink\" title=\"20.”==”和“===”的不同\"></a>20.”==”和“===”的不同</h4><p>前者会自动转换类型<br>后者不会</p>\n<h4 id=\"21-javascript的同源策略\"><a href=\"#21-javascript的同源策略\" class=\"headerlink\" title=\"21.javascript的同源策略\"></a>21.javascript的同源策略</h4><p>一段脚本只能读取来自于同一来源的窗口和文档的属性，这里的同一来源指的是主机名、协议和端口号的组合</p>\n<h4 id=\"22-编写一个数组去重的方法\"><a href=\"#22-编写一个数组去重的方法\" class=\"headerlink\" title=\"22.编写一个数组去重的方法\"></a>22.编写一个数组去重的方法</h4><p>function oSort(arr)<br>{<br>      var result ={};<br>      var newArr=[];<br>for(var i=0;i&lt;arr.length;i++)<br>{<br>      if(!result[arr])<br>     {<br>         newArr.push(arr)<br>          result[arr]=1<br>      }<br>}<br>return newArr<br>}</p>\n<h4 id=\"23-cookie-sessionstorage-localstorage\"><a href=\"#23-cookie-sessionstorage-localstorage\" class=\"headerlink\" title=\"23.cookie  sessionstorage  localstorage\"></a>23.cookie  sessionstorage  localstorage</h4><p>cookie数据始终在同源的http请求中携带（即使不需要），即cookie在浏览器和服务器间来回传递。而sessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存。cookie数据还有路径（path）的概念，可以限制cookie只属于某个路径下。存储大小限制也不同，cookie数据不能超过4k，同时因为每次http请求都会携带cookie，所以cookie只适合保存很小的数据，如会话标识。sessionStorage和localStorage 虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大。数据有效期不同，sessionStorage：仅在当前浏览器窗口关闭前有效，自然也就不可能持久保持；localStorage：始终有效，窗口或浏览器关闭也一直保存，因此用作持久数据；cookie只在设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭。作用域不同，sessionStorage不在不同的浏览器窗口中共享，即使是同一个页面；localStorage 在所有同源窗口中都是共享的；cookie也是在所有同源窗口中都是共享的。Web Storage 支持事件通知机制，可以将数据更新的通知发送给监听者。Web Storage 的 api 接口使用更方便。<br>24.split</p>\n<script type=\"text/javascript\">\n\n<p>var str=”How are you doing today?”</p>\n<p>document.write(str.split(“ “) + “<br />“)<br>document.write(str.split(“”) + “<br />“)<br>document.write(str.split(“ “,3))</p>\n<p></script><br>输出：<br>How,are,you,doing,today?<br>H,o,w, ,a,r,e, ,y,o,u, ,d,o,i,n,g, ,t,o,d,a,y,?<br>How,are,you<p></p>\n<h4 id=\"25-对象创建过程\"><a href=\"#25-对象创建过程\" class=\"headerlink\" title=\"25. 对象创建过程\"></a>25. 对象创建过程</h4><p>1.分配空间。要注意的是，分配空间不光是分配子类的空间，子类对象中包含的父类对象所需要的空间，一样在这一步统一分配。在分配的空间的时候，会把所有的属性设置为默认值。</p>\n<p>2.递归的构造父类对象。</p>\n<p>3.初始化本类属性。</p>\n<p>4.调用本类的构造方法。</p>\n<p>总结一下，创建B类对象的步骤一共有5步</p>\n<p>1.分配空间</p>\n<p>2.初始化A类属性。</p>\n<p>3.调用A类的构造方法.</p>\n<p>4.初始化B的属性。</p>\n<p>5.调用B的构造方法。</p>\n","excerpt":"<h4 id=\"1-将url的查询参数解析成字典对象\"><a href=\"#1-将url的查询参数解析成字典对象\" class=\"headerlink\" title=\"1,将url的查询参数解析成字典对象\"></a>1,将url的查询参数解析成字典对象</h4><p>这个题目不约而同的出现在了多家公司的面试题中，当然也是因为太过于典型，解决方案无非就是拆字符或者用正则匹配来解决，我个人强烈建议用正则匹配，因为url允许用户随意输入，如果用拆字符的方式，有任何一处没有考虑到容错，就会导致整个js都报错。而正则就没有这个问题，他只匹配出正确的配对，非法的全部过滤掉，简单，方便。<br>","more":"<br>实现代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">function getQueryObject(url) &#123;</div><div class=\"line\">    url = url == null ? window.location.href : url;</div><div class=\"line\">    var search = url.substring(url.lastIndexOf(&quot;?&quot;) + 1);</div><div class=\"line\">    var obj = &#123;&#125;;</div><div class=\"line\">    var reg = /([^?&amp;=]+)=([^?&amp;=]*)/g;</div><div class=\"line\">    search.replace(reg, function (rs, $1, $2) &#123;</div><div class=\"line\">        var name = decodeURIComponent($1);</div><div class=\"line\">        var val = decodeURIComponent($2);               </div><div class=\"line\">        val = String(val);</div><div class=\"line\">        obj[name] = val;</div><div class=\"line\">        return rs;</div><div class=\"line\">    &#125;);</div><div class=\"line\">    return obj;</div><div class=\"line\">&#125;</div><div class=\"line\">getQueryObject(&quot;http://www.cnblogs.com/leee/p/4456840.html?name=1&amp;dd=ddd**&quot;)</div></pre></td></tr></table></figure></p>\n<p><code>Object {name: &quot;1&quot;, dd: &quot;ddd**&quot;}</code></p>\n<h4 id=\"2-console-log-1-”2”-输出的是3\"><a href=\"#2-console-log-1-”2”-输出的是3\" class=\"headerlink\" title=\"2.console.log(1+ +”2”);输出的是3\"></a>2.console.log(1+ +”2”);输出的是3</h4><p>等同于: 1+(+’2’)：<br>+’2’ 的 + 是一元操作符，对 ‘2’ 进行Number()操作，转为数字的2，所以等于3<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">console.log(&quot;A&quot;-&quot;B&quot;+&quot;2&quot;)   NaN2</div><div class=\"line\">console.log(&quot;A&quot;-&quot;B&quot;+2)    NaN</div></pre></td></tr></table></figure></p>\n<h4 id=\"3-算法\"><a href=\"#3-算法\" class=\"headerlink\" title=\"3. 算法\"></a>3. 算法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">function test(a,b)&#123;</div><div class=\"line\">     console.log(b);</div><div class=\"line\">     return&#123;</div><div class=\"line\">         test:function(x)&#123;</div><div class=\"line\">             return test(x,a);</div><div class=\"line\">         &#125;</div><div class=\"line\">     &#125;</div><div class=\"line\"> &#125;</div><div class=\"line\"> var a=test(0);a.test(1);a.test(2);a.test(3);       </div><div class=\"line\"> // underfined  0  0  0</div></pre></td></tr></table></figure>\n<h4 id=\"4-三次握手\"><a href=\"#4-三次握手\" class=\"headerlink\" title=\"4. 三次握手\"></a>4. 三次握手</h4><h5 id=\"第一次\"><a href=\"#第一次\" class=\"headerlink\" title=\"第一次\"></a>第一次</h5><p>第一次握手：建立连接时，客户端发送syn包（syn=j）到服务器，并进入SYN_SENT状态，等待服务器确认；SYN：同步序列编号（Synchronize Sequence Numbers）。</p>\n<h5 id=\"第二次\"><a href=\"#第二次\" class=\"headerlink\" title=\"第二次\"></a>第二次</h5><p>第二次握手：服务器收到syn包，必须确认客户的SYN（ack=j+1），同时自己也发送一个SYN包（syn=k），即SYN+ACK包，此时服务器进入SYN_RECV状态；</p>\n<h5 id=\"第三次\"><a href=\"#第三次\" class=\"headerlink\" title=\"第三次\"></a>第三次</h5><p>第三次握手：客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK(ack=k+1），此包发送完毕，客户端和服务器进入ESTABLISHED（TCP连接成功）状态，完成三次握手。<br>完成三次握手，客户端与服务器开始传送数据，在上述过程中，还有一些重要的概念：</p>\n<h4 id=\"5-http-状态码\"><a href=\"#5-http-状态码\" class=\"headerlink\" title=\"5. http 状态码\"></a>5. http 状态码</h4><h5 id=\"一、HTTP状态码\"><a href=\"#一、HTTP状态码\" class=\"headerlink\" title=\"一、HTTP状态码\"></a>一、HTTP状态码</h5><p>如果某项请求发送到您的服务器要求显示您网站上的某个网页（例如，用户通过浏览器访问您的网页或 Googlebot 抓取网页时），服务器将会返回 HTTP 状态代码以响应请求。</p>\n<p>此状态代码提供关于请求状态的信息， 告诉 Googlebot 关于您的网站和请求的网页的信息。<br>一些常见的状态代码包括：<br>200 – 服务器成功返回网页<br>404 – 请求的网页不存在<br>503 – 服务器暂时不可用</p>\n<p>下面提供 HTTP 状态代码的完整列表。 点击链接可了解详情。 您也可以访问有关 HTTP 状态代码的 W3C 网页以获得更多信息 。</p>\n<p>1xx：请求收到，继续处理<br>2xx：操作成功收到，分析、接受<br>3xx：完成此请求必须进一步处理<br>4xx：请求包含一个错误语法或不能完成<br>5xx：服务器执行一个完全有效请求失败<br>1xx （临时响应）<br>表示临时响应并需要请求者继续执行操作的状态代码。</p>\n<p>代码 说明<br>100（继续）    请求者应当继续提出请求。 服务器返回此代码表示已收到请求的第一部分，正在等待其余部分。<br>101（切换协议）    请求者已要求服务器切换协议，服务器已确认并准备切换。</p>\n<p>2xx （成功）<br>表示服务器成功处理了请求的状态代码。</p>\n<p>代码 说明<br>200（成功）    服务器已成功处理了请求。 通常，这表示服务器提供了请求的网页。 如果针对您的 robots.txt 文件显示此状态，则表示 Googlebot 已成功检索到该文件。<br>201（已创建）    请求成功并且服务器创建了新的资源。<br>202（已接受）    服务器已接受请求，但尚未处理。<br>203（非授权信息）    服务器已成功处理了请求，但返回的信息可能来自另一来源。<br>204（无内容）    服务器成功处理了请求，但没有返回任何内容。<br>205（重置内容）    服务器成功处理了请求，但没有返回任何内容。 与 204 响应不同，此响应要求请求者重置文档视图（例如，清除表单内容以输入新内容）。<br>206（部分内容）    服务器成功处理了部分 GET 请求。</p>\n<p>3xx （重定向）<br>要完成请求，需要进一步操作。 通常，这些状态代码用来重定向。 Google 建议您在每次请求中使用重定向不要超过 5 次。 您可以使用网站管理员工具查看一下 Googlebot 在抓取重定向网页时是否遇到问题。 诊断 下的网 络抓取 页面列出了由于重定向错误而导致 Googlebot 无法抓取的网址。</p>\n<p>代码 说明<br>300（多种选择）    针对请求，服务器可执行多种操作。 服务器可根据请求者（用户代理）选择一项操作，或提供操作列表供请求者选择。<br>301（永久移动）    请求的网页已永久移动到新位置。 服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置。 您应使用此代码告诉 Googlebot 某个网页或网站已永久移动到新位置。<br>302（暂时移动）    服 务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。 此代码与响应 GET 或 HEAD 请求的 301 代码类似，会自动将请求者转到不同的位置，但您不应使用此代码来告诉 Googlebot 某个网页或网站已经移动，因为 Googlebot 会继续抓取原有位置并编入索引。<br>303（查看其他位置）    请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码。 对于除 HEAD 之外的所有请求，服务器会自动转到其他位置。<br>304（未修改）    自从上次请求后，请求的网页未修改过。服务器返回此响应时，不会返回网页内容。如果网页自请求者上次请求后再也没有更改 过，您应当将服务器配置为返回此响应（称为 If-Modified-Since HTTP 标头）。 由于服务器可以告诉 Googlebot 自从上次抓取后网页没有更改过，因此可节省带宽和开销<br>。<br>305（使用代理）    请求者只能使用代理访问请求的网页。 如果服务器返回此响应，还表示请求者应使用代理。<br>307（暂时重定向）    服 务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。 此代码与响应 GET 和 HEAD 请求的 301 代码类似，会自动将请求者转到不同的位置，但您不应使用此代码来告诉 Googlebot 某个页面或网站已经移动，因为 Googlebot 会继续抓取原有位置并编入索引。</p>\n<p>4xx（请求错误）<br>这些状态代码表示请求可能出错，妨碍了服务器的处理。</p>\n<p>代码 说明<br>400（错误请求）    服务器不理解请求的语法。<br>401（未授权）    请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应。<br>403（禁止）    服务器拒绝请求。 如果您看到 Googlebot 在尝试抓取您网站上的有效网页时收到此状态代码（可以在 Google 网站管理员工具诊 断 下的网络抓取 页面上看到此信息），可能是您的服务器或主机拒绝 Googlebot 访问。<br>404（未找到）    服务器找不到请求的网页。 例如，如果请求服务器上不存在的网页，服务器通常会返回此代码。如果您的网站上没有 robots.txt 文件，而您在 Google 网站管理员工具”诊断”标签的 robots.txt 页 上看到此状态，那么这是正确的状态。 但是，如果您有 robots.txt 文件而又看到此状态，则说明您的 robots.txt 文件可能命名错误或位于错误的位置 （该文件应当位于顶级域名，名为 robots.txt）。<br>如果您看到有关 Googlebot 尝试抓取的网址的此状态（在”诊断”标签的 HTTP 错误页上），则表示 Googlebot 追踪的可能是另一个页面的无效链接（是旧链接或输入有误的链接）。<br>405（禁用的方法）    禁用请求中指定的方法。<br>406（不可接受）    无法使用请求的内容特性响应请求的网页。<br>407（需要代理授权）    此状态代码与 401（未授权）类似，但指定请求者应当授权使用代理。 如果服务器返回此响应，还会指明请求者应当使用的代理。<br>408（请求超时）    服务器等候请求时发生超时。<br>409（冲突）    服务器在完成请求时发生冲突。 服务器必须在响应中包含有关冲突的信息。 服务器在响应与前一个请求相冲突的 PUT 请求时可能会返回此代码，同时会附上两个请求的差异列表。<br>410（已删除）    如果请求的资源已永久删除，服务器就会返回此响应。 该代码与 404（未找到）代码相似，但在资源以前存在而现在不存在的情况下，有时会用来替代 404 代码。 如果资源已永久删除，您应当使用 301 指定资源的新位置。<br>411（需要有效长度）    服务器不接受不含有效内容长度标头字段的请求。<br>412（未满足前提条件）    服务器未满足请求者在请求中设置的其中一个前提条件。<br>413（请求实体过大）    服务器无法处理请求，因为请求实体过大，超出服务器的处理能力。<br>414（请求的 URI 过长）    请求的 URI（通常为网址）过长，服务器无法处理。<br>415（不支持的媒体类型）    请求的格式不受请求页面的支持。<br>416（请求范围不符合要求）    如果页面无法提供请求的范围，则服务器会返回此状态代码。<br>417（未满足期望要求）    服务器未满足”期望”请求标头字段的要求。</p>\n<p>5xx （服务器错误）<br>这些状态代码表示服务器在尝试处理请求时发生内部错误。 这些错误可能是服务器本身的错误，而不是请求出错。</p>\n<p>代码 说明<br>500（服务器内部错误）    服务器遇到错误，无法完成请求。<br>501（尚未实施）    服务器不具备完成请求的功能。 例如，服务器无法识别请求方法时可能会返回此代码。<br>502（错误网关）    服务器充当网关或代理，从上游服务器收到无效响应。<br>503（服务不可用）    服务器目前无法使用（由于超载或停机维护）。 通常，这只是暂时状态。<br>504（网关超时）    服务器充当网关或代理，但没有及时从上游服务器收到请求。<br>505（HTTP 版本不受支持）    服务器不支持请求中所用的 HTTP 协议版本。</p>\n<h2 id=\"HTML-CSS\"><a href=\"#HTML-CSS\" class=\"headerlink\" title=\"HTML+CSS\"></a>HTML+CSS</h2><h5 id=\"1-对WEB标准以及W3C的理解与认识\"><a href=\"#1-对WEB标准以及W3C的理解与认识\" class=\"headerlink\" title=\"1.对WEB标准以及W3C的理解与认识\"></a>1.对WEB标准以及W3C的理解与认识</h5><p>标签闭合、标签小写、不乱嵌套、提高搜索机器人搜索几率、使用外 链css和js脚本、结构行为表现的分离、文件下载与页面速度更快、内容能被更多的用户所访问、内容能被更广泛的设备所访问、更少的代码和组件，容易维 护、改版方便，不需要变动页面内容、提供打印版本而不需要复制内容、提高网站易用性；</p>\n<h4 id=\"2-xhtml和html有什么区别\"><a href=\"#2-xhtml和html有什么区别\" class=\"headerlink\" title=\"2.xhtml和html有什么区别\"></a>2.xhtml和html有什么区别</h4><p>HTML是一种基本的WEB网页设计语言，XHTML是一个基于XML的置标语言<br>最主要的不同：<br>XHTML 元素必须被正确地嵌套。<br>XHTML 元素必须被关闭。<br>标签名必须用小写字母。<br>XHTML 文档必须拥有根元素。</p>\n<h4 id=\"3-Doctype-严格模式与混杂模式-如何触发这两种模式，区分它们有何意义\"><a href=\"#3-Doctype-严格模式与混杂模式-如何触发这两种模式，区分它们有何意义\" class=\"headerlink\" title=\"3.Doctype? 严格模式与混杂模式-如何触发这两种模式，区分它们有何意义?\"></a>3.Doctype? 严格模式与混杂模式-如何触发这两种模式，区分它们有何意义?</h4><p>用于声明文档使用那种规范（html/Xhtml）一般为 严格 过度 基于框架的html文档<br>加入XMl声明可触发，解析方式更改为IE5.5 拥有IE5.5的bug</p>\n<h4 id=\"4-行内元素有哪些-块级元素有哪些-CSS的盒模型\"><a href=\"#4-行内元素有哪些-块级元素有哪些-CSS的盒模型\" class=\"headerlink\" title=\"4.行内元素有哪些?块级元素有哪些?CSS的盒模型?\"></a>4.行内元素有哪些?块级元素有哪些?CSS的盒模型?</h4><p>块级元素：div p h1 h2 h3 h4 form ul<br>行内元素: a b br i span input select<br>Css盒模型:内容，border ,margin，padding</p>\n<h4 id=\"5-CSS引入的方式有哪些-link和-import的区别是\"><a href=\"#5-CSS引入的方式有哪些-link和-import的区别是\" class=\"headerlink\" title=\"5.CSS引入的方式有哪些? link和@import的区别是?\"></a>5.CSS引入的方式有哪些? link和@import的区别是?</h4><p>内联 内嵌 外链 导入<br>区别 ：同时加载<br>前者无兼容性，后者CSS2.1以下浏览器不支持<br>Link 支持使用javascript改变样式，后者不可</p>\n<h4 id=\"6-CSS选择符有哪些-哪些属性可以继承-优先级算法如何计算-内联和important哪个优先级高\"><a href=\"#6-CSS选择符有哪些-哪些属性可以继承-优先级算法如何计算-内联和important哪个优先级高\" class=\"headerlink\" title=\"6.CSS选择符有哪些?哪些属性可以继承?优先级算法如何计算?内联和important哪个优先级高?\"></a>6.CSS选择符有哪些?哪些属性可以继承?优先级算法如何计算?内联和important哪个优先级高?</h4><p>标签选择符 类选择符 id选择符<br>继承不如指定 Id&gt;class&gt;标签选择<br>后者优先级高</p>\n<h4 id=\"7-前端页面有哪三层构成，分别是什么-作用是什么\"><a href=\"#7-前端页面有哪三层构成，分别是什么-作用是什么\" class=\"headerlink\" title=\"7.前端页面有哪三层构成，分别是什么?作用是什么?\"></a>7.前端页面有哪三层构成，分别是什么?作用是什么?</h4><p>结构层 Html 表示层 CSS 行为层 js</p>\n<h4 id=\"8-css的基本语句构成是\"><a href=\"#8-css的基本语句构成是\" class=\"headerlink\" title=\"8.css的基本语句构成是?\"></a>8.css的基本语句构成是?</h4><p>选择器{属性1:值1;属性2:值2;……}</p>\n<h4 id=\"9-你做的页面在哪些流览器测试过-这些浏览器的内核分别是什么\"><a href=\"#9-你做的页面在哪些流览器测试过-这些浏览器的内核分别是什么\" class=\"headerlink\" title=\"9.你做的页面在哪些流览器测试过?这些浏览器的内核分别是什么?\"></a>9.你做的页面在哪些流览器测试过?这些浏览器的内核分别是什么?</h4><p>Ie(Ie内核) 火狐（Gecko） 谷歌（webkit） opear(Presto)</p>\n<h4 id=\"10-写出几种IE6-BUG的解决方法\"><a href=\"#10-写出几种IE6-BUG的解决方法\" class=\"headerlink\" title=\"10.写出几种IE6 BUG的解决方法\"></a>10.写出几种IE6 BUG的解决方法</h4><p>1.双边距BUG float引起的 使用display<br>2.3像素问题 使用float引起的 使用dislpay:inline -3px<br>3.超链接hover 点击后失效 使用正确的书写顺序 link visited hover active<br>4.Ie z-index问题 给父级添加position:relative<br>5.Png 透明 使用js代码 改<br>6.Min-height 最小高度 ！Important 解决’<br>7.select 在ie6下遮盖 使用iframe嵌套<br>8.为什么没有办法定义1px左右的宽度容器（IE6默认的行高造成的，使用over:hidden,zoom:0.08 line-height:1px）</p>\n<h4 id=\"11-标签上title与alt属性的区别是什么\"><a href=\"#11-标签上title与alt属性的区别是什么\" class=\"headerlink\" title=\"11.标签上title与alt属性的区别是什么?\"></a>11.标签上title与alt属性的区别是什么?</h4><p>Alt 当图片不显示是 用文字代表。<br>Title 为该属性提供信息</p>\n<h4 id=\"12-描述css-reset的作用和用途。\"><a href=\"#12-描述css-reset的作用和用途。\" class=\"headerlink\" title=\"12.描述css reset的作用和用途。\"></a>12.描述css reset的作用和用途。</h4><p>Reset重置浏览器的css默认属性 浏览器的品种不同，样式不同，然后重置，让他们统一</p>\n<h4 id=\"13-解释css-sprites，如何使用。\"><a href=\"#13-解释css-sprites，如何使用。\" class=\"headerlink\" title=\"13.解释css sprites，如何使用。\"></a>13.解释css sprites，如何使用。</h4><p>Css 精灵 把一堆小的图片整合到一张大的图片上，减轻服务器对图片的请求数量</p>\n<h4 id=\"14-浏览器标准模式和怪异模式之间的区别是什么\"><a href=\"#14-浏览器标准模式和怪异模式之间的区别是什么\" class=\"headerlink\" title=\"14.浏览器标准模式和怪异模式之间的区别是什么?\"></a>14.浏览器标准模式和怪异模式之间的区别是什么?</h4><p>盒子模型 渲染模式的不同<br>使用 window.top.document.compatMode 可显示为什么模式</p>\n<h4 id=\"15-你如何对网站的文件和资源进行优化-期待的解决方案包括：\"><a href=\"#15-你如何对网站的文件和资源进行优化-期待的解决方案包括：\" class=\"headerlink\" title=\"15.你如何对网站的文件和资源进行优化?期待的解决方案包括：\"></a>15.你如何对网站的文件和资源进行优化?期待的解决方案包括：</h4><p>文件合并<br>文件最小化/文件压缩<br>使用CDN托管<br>缓存的使用</p>\n<h4 id=\"16-什么是语义化的HTML\"><a href=\"#16-什么是语义化的HTML\" class=\"headerlink\" title=\"16.什么是语义化的HTML?\"></a>16.什么是语义化的HTML?</h4><p>直观的认识标签 对于搜索引擎的抓取有好处</p>\n<h4 id=\"17-清除浮动的几种方式，各自的优缺点\"><a href=\"#17-清除浮动的几种方式，各自的优缺点\" class=\"headerlink\" title=\"17.清除浮动的几种方式，各自的优缺点\"></a>17.清除浮动的几种方式，各自的优缺点</h4><p>1.使用空标签清除浮动 clear:both（理论上能清楚任何标签，，，增加无意义的标签）<br>2.使用overflow:auto（空标签元素清除浮动而不得不增加无意代码的弊端,,使用zoom:1用于兼容IE）<br>3.是用afert伪元素清除浮动(用于非IE浏览器)</p>\n<h2 id=\"Javascript\"><a href=\"#Javascript\" class=\"headerlink\" title=\"Javascript\"></a>Javascript</h2><h4 id=\"1-javascript的typeof返回哪些数据类型\"><a href=\"#1-javascript的typeof返回哪些数据类型\" class=\"headerlink\" title=\"1.javascript的typeof返回哪些数据类型\"></a>1.javascript的typeof返回哪些数据类型</h4><p>Object number function boolean underfind</p>\n<h4 id=\"2-例举3种强制类型转换和2种隐式类型转换\"><a href=\"#2-例举3种强制类型转换和2种隐式类型转换\" class=\"headerlink\" title=\"2.例举3种强制类型转换和2种隐式类型转换?\"></a>2.例举3种强制类型转换和2种隐式类型转换?</h4><p>强制（parseInt,parseFloat,number）<br>隐式（== – ===）</p>\n<h4 id=\"3-split-join-的区别\"><a href=\"#3-split-join-的区别\" class=\"headerlink\" title=\"3.split() join() 的区别\"></a>3.split() join() 的区别</h4><p>前者是切割成数组的形式，后者是将数组转换成字符串</p>\n<h4 id=\"4-数组方法pop-push-unshift-shift\"><a href=\"#4-数组方法pop-push-unshift-shift\" class=\"headerlink\" title=\"4.数组方法pop() push() unshift() shift()\"></a>4.数组方法pop() push() unshift() shift()</h4><p>Push()尾部添加 pop()尾部删除<br>Unshift()头部添加 shift()头部删除</p>\n<h4 id=\"5-事件绑定和普通事件有什么区别\"><a href=\"#5-事件绑定和普通事件有什么区别\" class=\"headerlink\" title=\"5.事件绑定和普通事件有什么区别\"></a>5.事件绑定和普通事件有什么区别</h4><h4 id=\"6-IE和DOM事件流的区别\"><a href=\"#6-IE和DOM事件流的区别\" class=\"headerlink\" title=\"6.IE和DOM事件流的区别\"></a>6.IE和DOM事件流的区别</h4><p>1.执行顺序不一样、<br>2.参数不一样<br>3.事件加不加on<br>4.this指向问题</p>\n<h4 id=\"7-IE和标准下有哪些兼容性的写法\"><a href=\"#7-IE和标准下有哪些兼容性的写法\" class=\"headerlink\" title=\"7.IE和标准下有哪些兼容性的写法\"></a>7.IE和标准下有哪些兼容性的写法</h4><p>Var ev = ev || window.event<br>document.documentElement.clientWidth || document.body.clientWidth<br>Var target = ev.srcElement||ev.target</p>\n<h4 id=\"8-ajax请求的时候get-和post方式的区别\"><a href=\"#8-ajax请求的时候get-和post方式的区别\" class=\"headerlink\" title=\"8.ajax请求的时候get 和post方式的区别\"></a>8.ajax请求的时候get 和post方式的区别</h4><p>一个在url后面 一个放在虚拟载体里面<br>有大小限制<br>安全问题<br>应用不同 一个是论坛等只需要请求的，一个是类似修改密码的</p>\n<h4 id=\"9-call和apply的区别\"><a href=\"#9-call和apply的区别\" class=\"headerlink\" title=\"9.call和apply的区别\"></a>9.call和apply的区别</h4><p>Object.call(this,obj1,obj2,obj3)<br>Object.apply(this,arguments)<br>obj.call(thisObj, arg1, arg2, …);<br>obj.apply(thisObj, [arg1, arg2, …]);<br>两者作用一致，都是把obj(即this)绑定到thisObj，这时候thisObj具备了obj的属性和方法。或者说thisObj『继承』了obj的属性和方法。<br>唯一区别是apply接受的是数组参数，call接受的是连续参数。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">function add(j, k)&#123;</div><div class=\"line\">    return j+k;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function sub(j, k)&#123;</div><div class=\"line\">    return j-k;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>我们在控制台运行：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">add(5,3); //8</div><div class=\"line\">add.call(sub, 5, 3); //8</div><div class=\"line\">add.apply(sub, [5, 3]); //8</div><div class=\"line\"></div><div class=\"line\">sub(5, 3); //2</div><div class=\"line\">sub.call(add, 5, 3); //2</div><div class=\"line\">sub.apply(add, [5, 3]); //2</div></pre></td></tr></table></figure></p>\n<h4 id=\"10-ajax请求时，如何解释json数据\"><a href=\"#10-ajax请求时，如何解释json数据\" class=\"headerlink\" title=\"10.ajax请求时，如何解释json数据\"></a>10.ajax请求时，如何解释json数据</h4><p>使用eval parse 鉴于安全性考虑 使用parse更靠谱<br>11.b继承a的方法</p>\n<p>12.写一个获取非行间样式的函数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">function getStyle(obj,attr,value)</div><div class=\"line\">&#123;</div><div class=\"line\">if(!value)</div><div class=\"line\">&#123;</div><div class=\"line\">if(obj.currentStyle)</div><div class=\"line\">&#123;</div><div class=\"line\">return obj.currentStyle(attr)</div><div class=\"line\">&#125;</div><div class=\"line\">else</div><div class=\"line\">&#123;</div><div class=\"line\">obj.getComputedStyle(attr,false)</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">else</div><div class=\"line\">&#123;</div><div class=\"line\">obj.style[attr]=value</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"13-事件委托是什么\"><a href=\"#13-事件委托是什么\" class=\"headerlink\" title=\"13.事件委托是什么\"></a>13.事件委托是什么</h4><p>让利用事件冒泡的原理，让自己的所触发的事件，让他的父元素代替执行！<br><a href=\"http://www.webasily.com/?p=78\">http://www.webasily.com/?p=78</a> 例子可见此链接</p>\n<h4 id=\"14-闭包是什么，有什么特性，对页面有什么影响\"><a href=\"#14-闭包是什么，有什么特性，对页面有什么影响\" class=\"headerlink\" title=\"14.闭包是什么，有什么特性，对页面有什么影响\"></a>14.闭包是什么，有什么特性，对页面有什么影响</h4><p>闭包就是能够读取其他函数内部变量的函数。<br><a href=\"http://blog.csdn.net/gaoshanwudi/article/details/7355794\">http://blog.csdn.net/gaoshanwudi/article/details/7355794</a> 此链接可查看（问这个问题的不是一个公司）</p>\n<p>15.如何阻止事件冒泡和默认事件<br>canceBubble return false</p>\n<h4 id=\"16-添加-删除-替换-插入到某个接点的方法\"><a href=\"#16-添加-删除-替换-插入到某个接点的方法\" class=\"headerlink\" title=\"16.添加 删除 替换 插入到某个接点的方法\"></a>16.添加 删除 替换 插入到某个接点的方法</h4><p>obj.appendChidl()<br>obj.innersetBefore<br>obj.replaceChild<br>obj.removeChild</p>\n<h4 id=\"17-解释jsonp的原理，以及为什么不是真正的ajax\"><a href=\"#17-解释jsonp的原理，以及为什么不是真正的ajax\" class=\"headerlink\" title=\"17.解释jsonp的原理，以及为什么不是真正的ajax\"></a>17.解释jsonp的原理，以及为什么不是真正的ajax</h4><p>动态创建script标签，回调函数<br>Ajax是页面无刷新请求数据操作</p>\n<h4 id=\"18-javascript的本地对象，内置对象和宿主对象\"><a href=\"#18-javascript的本地对象，内置对象和宿主对象\" class=\"headerlink\" title=\"18.javascript的本地对象，内置对象和宿主对象\"></a>18.javascript的本地对象，内置对象和宿主对象</h4><p>本地对象为array obj regexp等可以new实例化<br>内置对象为gload Math 等不可以实例化的<br>宿主为浏览器自带的document,window 等</p>\n<h4 id=\"19-document-load-和document-ready的区别\"><a href=\"#19-document-load-和document-ready的区别\" class=\"headerlink\" title=\"19.document load 和document ready的区别\"></a>19.document load 和document ready的区别</h4><p>Document.onload 是在结构和样式加载完才执行js<br>Document.ready原生种没有这个方法，jquery中有 $().ready(function)</p>\n<h4 id=\"20-”-”和“-”的不同\"><a href=\"#20-”-”和“-”的不同\" class=\"headerlink\" title=\"20.”==”和“===”的不同\"></a>20.”==”和“===”的不同</h4><p>前者会自动转换类型<br>后者不会</p>\n<h4 id=\"21-javascript的同源策略\"><a href=\"#21-javascript的同源策略\" class=\"headerlink\" title=\"21.javascript的同源策略\"></a>21.javascript的同源策略</h4><p>一段脚本只能读取来自于同一来源的窗口和文档的属性，这里的同一来源指的是主机名、协议和端口号的组合</p>\n<h4 id=\"22-编写一个数组去重的方法\"><a href=\"#22-编写一个数组去重的方法\" class=\"headerlink\" title=\"22.编写一个数组去重的方法\"></a>22.编写一个数组去重的方法</h4><p>function oSort(arr)<br>{<br>      var result ={};<br>      var newArr=[];<br>for(var i=0;i&lt;arr.length;i++)<br>{<br>      if(!result[arr])<br>     {<br>         newArr.push(arr)<br>          result[arr]=1<br>      }<br>}<br>return newArr<br>}</p>\n<h4 id=\"23-cookie-sessionstorage-localstorage\"><a href=\"#23-cookie-sessionstorage-localstorage\" class=\"headerlink\" title=\"23.cookie  sessionstorage  localstorage\"></a>23.cookie  sessionstorage  localstorage</h4><p>cookie数据始终在同源的http请求中携带（即使不需要），即cookie在浏览器和服务器间来回传递。而sessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存。cookie数据还有路径（path）的概念，可以限制cookie只属于某个路径下。存储大小限制也不同，cookie数据不能超过4k，同时因为每次http请求都会携带cookie，所以cookie只适合保存很小的数据，如会话标识。sessionStorage和localStorage 虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大。数据有效期不同，sessionStorage：仅在当前浏览器窗口关闭前有效，自然也就不可能持久保持；localStorage：始终有效，窗口或浏览器关闭也一直保存，因此用作持久数据；cookie只在设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭。作用域不同，sessionStorage不在不同的浏览器窗口中共享，即使是同一个页面；localStorage 在所有同源窗口中都是共享的；cookie也是在所有同源窗口中都是共享的。Web Storage 支持事件通知机制，可以将数据更新的通知发送给监听者。Web Storage 的 api 接口使用更方便。<br>24.split</p>\n<script type=\"text/javascript\">\n\n<p>var str=”How are you doing today?”</p>\n<p>document.write(str.split(“ “) + “<br />“)<br>document.write(str.split(“”) + “<br />“)<br>document.write(str.split(“ “,3))</p>\n<p></script><br>输出：<br>How,are,you,doing,today?<br>H,o,w, ,a,r,e, ,y,o,u, ,d,o,i,n,g, ,t,o,d,a,y,?<br>How,are,you</p>\n<h4 id=\"25-对象创建过程\"><a href=\"#25-对象创建过程\" class=\"headerlink\" title=\"25. 对象创建过程\"></a>25. 对象创建过程</h4><p>1.分配空间。要注意的是，分配空间不光是分配子类的空间，子类对象中包含的父类对象所需要的空间，一样在这一步统一分配。在分配的空间的时候，会把所有的属性设置为默认值。</p>\n<p>2.递归的构造父类对象。</p>\n<p>3.初始化本类属性。</p>\n<p>4.调用本类的构造方法。</p>\n<p>总结一下，创建B类对象的步骤一共有5步</p>\n<p>1.分配空间</p>\n<p>2.初始化A类属性。</p>\n<p>3.调用A类的构造方法.</p>\n<p>4.初始化B的属性。</p>\n<p>5.调用B的构造方法。</p>"},{"title":"手写webpack的plugin","date":"2017-05-08T02:12:42.000Z","_content":"经过上一篇博客分析webpack从命令行到打包完成的整体流程，我们知道了webpage的plugin是基于事件机制工作的，这样最大的好处是易于扩展。社区里很多webpack的plugin，但是具体到我们的项目并不一定适用，这篇博客告诉你如何入手写一个plugin，然后分析源码相关部分告诉你你的plugin是如何工作。知其然且知其所以然。\n该系列博客的所有测试代码。\n<!--more-->\n从黑盒角度学习写一个plugin\n\n所谓黑盒，就是先不管webpack的plugin如何运作，只去看官网介绍。\n\n#### Compiler和Compilation两个类\n\n官网介绍告诉我们，plugin涉及到源码中的Compiler类和Compilation类，并对这两个类进行了简要介绍。\n\nCompiler在开始打包时就进行实例化，实例对象里面装着与打包相关的环境和参数，包括options、plugins和loaders等。\nCompilation在每次文件变化重新打包时都进行一次实例化，它继承自Compiler，其实例对象里装着和modules及chunks相关的信息。\n如果黑盒角度写plugin，知道这些就行了，没必要非去看源码。这两个对象上挂载的具体内容可以自己打印看看，不赘述。\n\n#### 写一个简单的plugin\n\n写plugin大致分为两个步骤：\n\n>* 定义plugin\n>* 在webpack.config.js中引用这个plugin\n##### 定义plugin\n```\nfunction HTMLPlugin(options){\n  // options是配置文件，你可以在这里进行一些与options相关的工作\n}\n\n// 每个plugin都必须定义一个apply方法，webpack会自动调用这个方法\nHTMLPlugin.prototype.apply = function(compiler){\n    // apply方法中会传入Compiler的实例compiler\n    // 'emit'是该插件监听的事件，插件工作的逻辑在回调函数中\n    compiler.plugin('emit', function(compilation, callback){\n        // 回掉函数有两个参数\n        // compilation和下一个回调函数，callback可以不传\n        // 同步事件不传callback\n        compilation.chunks.forEach(function(chunk){\n            console.log('chunk.name', chunk.name);\n            console.log('=====================================');\n            //console.log('chunk.modules', chunk.modules.length);\n\n            chunk.modules.forEach(function(module){\n                console.log('module', module.resource);\n                module.fileDependencies.forEach(function(filepath){\n                    //console.log('filepath', filepath);\n                });\n            });\n\n            chunk.files.forEach(function(filename){\n                let source = compilation.assets[filename].source();\n                //console.log('file', source);\n            })\n        });\n        // 最后调用callback\n        callback();\n    });\n}\n\nmodule.exports = HTMLPlugin;\n```\n\n所有可以监听的事件请查看。\n这里最让人疑惑的是compilation上的modules、chunks、assets，简单解释：\n\n`compilation.modules`，每一个资源文件都会被编译成一个模块， 每个模块module.fileDependencies记录了模块依赖的其它模块\ncompilation.chunks，是entry的每个配置项及调用require.ensure的模块，每个chunk的， chunk.modules为chunk包含的模块以及模块所依赖的模块， chunk.files为每个配置项最后的输出结果文件，这里的值可以从compilation.assets获得\n`compilation.assets`，整个打包流程最终要输出的文件\n这里需要注意，compilation.chunks不仅包括webpack.config.js 中 entry 中配置的模块，还包括模块中使用require.ensure的模块。因为webpack在实现的时候也模仿commonjs规范想实现一个异步加载模块的功能，当使用require.ensure去加载模块时，只有在需要的时候才去下载模块，这可以实现类似懒加载的功能，避免一个页面打包后太大。\n\n例如：\n```\n// webpack.config.js\nentry: {\n         index : './index.js',\n         detail: './detail.js'\n     }\n\n// detail.js\nrequire('./src/bundle_require.js'); //bundle_require.js没有依赖\n\n// index.js\n// testTapable.js 和 temp.js都没有依赖\nrequire('./src/tapable/testTapable.js');\nlet Temp = require.ensure('./src/plugins/temp.js', function(){\n    console.log('temp is loaded');\n}, 'temp');\nlet temp = new Temp();\nconsole.log('temp is resolved');\n```\n使用上面插件打包的结果：\n这里写图片描述\n\n##### 在webpack.config.js中引用这个plugin\n```\nvar HTMLPlugin = require('./src/plugins/HTMLPlugin');\n\n  module.exports = {\n     //插件项\n      plugins:[\n          new HTMLPlugin()\n      ],\n      ...\n  }\n```\n命令行执行webpack就可以打印出上图的结果。\n\n##### 白盒角度看plugin如何工作\n\n从源码分析apply方法到底如何调用，plugin方法到底如何定义一个插件等问题。\n\n##### plugin的apply方法到底如何调用\n\nbin/webapck.js\n```\nvar webpack = require(\"../lib/webpack.js\");\ncompiler = webpack(options);\n```\n没什么好解释，去看lib/webpack.js。\n\nlib/webpack.js\n```\nconst Compiler = require(\"./Compiler\");\ncompiler = new Compiler();\nif(options.plugins && Array.isArray(options.plugins)) {\n    compiler.apply.apply(compiler, options.plugins);\n}\n```\n显然compiler有一个apply方法，这里给其传入的参数是插件数组options.plugins。compiler中的apply方法实际是从Tapable中继承来的，所以移步Tapable，可以npm install一下来查看其源码。\n\nTapable\n```\nTapable.prototype.apply = function apply() {\n    for(var i = 0; i < arguments.length; i++) {\n        arguments[i].apply(this);\n    }\n};\n```\n这个方法就是保证执行环境this的情况下依次执行传入参数中的方法，这些方法就是plugin。\n\nplugin方法到底如何定义一个插件\n\n很明显，这个方法在compiler上是有的，其实plugin方法是通过继承Tapable得到的。\n```\nTapable.prototype.plugin = function plugin(name, fn) {\n    if(Array.isArray(name)) {\n        name.forEach(function(name) {\n            this.plugin(name, fn);\n        }, this);\n        return;\n    }\n    if(!this._plugins[name]) this._plugins[name] = [fn];\n    else this._plugins[name].push(fn);\n};\n```\n这就是观察者模式中的注册观测者。\n\n可用于监听的事件\n\n可以在官方文档中查看，当然也可以仔细研读Compiler和Comilation两类去理解。例如：\n```\nCompiler.prototype.compile = function(callback) {\n    var self = this;\n    var params = self.newCompilationParams();\n    self.applyPluginsAsync(\"before-compile\", params, function(err) {\n        if(err) return callback(err);\n\n        self.applyPlugins(\"compile\", params);\n\n        var compilation = self.newCompilation(params);\n\n        self.applyPluginsParallel(\"make\", compilation, function(err) {\n            if(err) return callback(err);\n\n            compilation.finish();\n\n            compilation.seal(function(err) {\n                if(err) return callback(err);\n\n                self.applyPluginsAsync(\"after-compile\", compilation, function(err) {\n                    if(err) return callback(err);\n\n                    return callback(null, compilation);\n                });\n            });\n        });\n    });\n};\n```\ncompile方法是开始打包的一个重要方法，该方法会首先触发before-compile事件，也就是打包前需要干的事情，由一系列插件完成，然后触发compile事件，然后触发make事件，开始构建依赖关系。\n\n##### 总结\n\n我们了解了webpack的几个重要类及基本事件流程，通过这篇博客查看官网关于如何写plugin的介绍我们从黑盒角度知道了写plugin的基本步骤，对应webpack的工作流程\n就可以轻松从白盒角度总结出plugin的工作原理。\n","source":"_posts/手写webpack的plugin.md","raw":"---\ntitle: 手写webpack的plugin\ntags:\n  - 'webpack'\ncategories:\n  - '前端'\n  - '构建打包'\n  - 'webpack'\ndate: 2017-05-08 10:12:42\n---\n经过上一篇博客分析webpack从命令行到打包完成的整体流程，我们知道了webpage的plugin是基于事件机制工作的，这样最大的好处是易于扩展。社区里很多webpack的plugin，但是具体到我们的项目并不一定适用，这篇博客告诉你如何入手写一个plugin，然后分析源码相关部分告诉你你的plugin是如何工作。知其然且知其所以然。\n该系列博客的所有测试代码。\n<!--more-->\n从黑盒角度学习写一个plugin\n\n所谓黑盒，就是先不管webpack的plugin如何运作，只去看官网介绍。\n\n#### Compiler和Compilation两个类\n\n官网介绍告诉我们，plugin涉及到源码中的Compiler类和Compilation类，并对这两个类进行了简要介绍。\n\nCompiler在开始打包时就进行实例化，实例对象里面装着与打包相关的环境和参数，包括options、plugins和loaders等。\nCompilation在每次文件变化重新打包时都进行一次实例化，它继承自Compiler，其实例对象里装着和modules及chunks相关的信息。\n如果黑盒角度写plugin，知道这些就行了，没必要非去看源码。这两个对象上挂载的具体内容可以自己打印看看，不赘述。\n\n#### 写一个简单的plugin\n\n写plugin大致分为两个步骤：\n\n>* 定义plugin\n>* 在webpack.config.js中引用这个plugin\n##### 定义plugin\n```\nfunction HTMLPlugin(options){\n  // options是配置文件，你可以在这里进行一些与options相关的工作\n}\n\n// 每个plugin都必须定义一个apply方法，webpack会自动调用这个方法\nHTMLPlugin.prototype.apply = function(compiler){\n    // apply方法中会传入Compiler的实例compiler\n    // 'emit'是该插件监听的事件，插件工作的逻辑在回调函数中\n    compiler.plugin('emit', function(compilation, callback){\n        // 回掉函数有两个参数\n        // compilation和下一个回调函数，callback可以不传\n        // 同步事件不传callback\n        compilation.chunks.forEach(function(chunk){\n            console.log('chunk.name', chunk.name);\n            console.log('=====================================');\n            //console.log('chunk.modules', chunk.modules.length);\n\n            chunk.modules.forEach(function(module){\n                console.log('module', module.resource);\n                module.fileDependencies.forEach(function(filepath){\n                    //console.log('filepath', filepath);\n                });\n            });\n\n            chunk.files.forEach(function(filename){\n                let source = compilation.assets[filename].source();\n                //console.log('file', source);\n            })\n        });\n        // 最后调用callback\n        callback();\n    });\n}\n\nmodule.exports = HTMLPlugin;\n```\n\n所有可以监听的事件请查看。\n这里最让人疑惑的是compilation上的modules、chunks、assets，简单解释：\n\n`compilation.modules`，每一个资源文件都会被编译成一个模块， 每个模块module.fileDependencies记录了模块依赖的其它模块\ncompilation.chunks，是entry的每个配置项及调用require.ensure的模块，每个chunk的， chunk.modules为chunk包含的模块以及模块所依赖的模块， chunk.files为每个配置项最后的输出结果文件，这里的值可以从compilation.assets获得\n`compilation.assets`，整个打包流程最终要输出的文件\n这里需要注意，compilation.chunks不仅包括webpack.config.js 中 entry 中配置的模块，还包括模块中使用require.ensure的模块。因为webpack在实现的时候也模仿commonjs规范想实现一个异步加载模块的功能，当使用require.ensure去加载模块时，只有在需要的时候才去下载模块，这可以实现类似懒加载的功能，避免一个页面打包后太大。\n\n例如：\n```\n// webpack.config.js\nentry: {\n         index : './index.js',\n         detail: './detail.js'\n     }\n\n// detail.js\nrequire('./src/bundle_require.js'); //bundle_require.js没有依赖\n\n// index.js\n// testTapable.js 和 temp.js都没有依赖\nrequire('./src/tapable/testTapable.js');\nlet Temp = require.ensure('./src/plugins/temp.js', function(){\n    console.log('temp is loaded');\n}, 'temp');\nlet temp = new Temp();\nconsole.log('temp is resolved');\n```\n使用上面插件打包的结果：\n这里写图片描述\n\n##### 在webpack.config.js中引用这个plugin\n```\nvar HTMLPlugin = require('./src/plugins/HTMLPlugin');\n\n  module.exports = {\n     //插件项\n      plugins:[\n          new HTMLPlugin()\n      ],\n      ...\n  }\n```\n命令行执行webpack就可以打印出上图的结果。\n\n##### 白盒角度看plugin如何工作\n\n从源码分析apply方法到底如何调用，plugin方法到底如何定义一个插件等问题。\n\n##### plugin的apply方法到底如何调用\n\nbin/webapck.js\n```\nvar webpack = require(\"../lib/webpack.js\");\ncompiler = webpack(options);\n```\n没什么好解释，去看lib/webpack.js。\n\nlib/webpack.js\n```\nconst Compiler = require(\"./Compiler\");\ncompiler = new Compiler();\nif(options.plugins && Array.isArray(options.plugins)) {\n    compiler.apply.apply(compiler, options.plugins);\n}\n```\n显然compiler有一个apply方法，这里给其传入的参数是插件数组options.plugins。compiler中的apply方法实际是从Tapable中继承来的，所以移步Tapable，可以npm install一下来查看其源码。\n\nTapable\n```\nTapable.prototype.apply = function apply() {\n    for(var i = 0; i < arguments.length; i++) {\n        arguments[i].apply(this);\n    }\n};\n```\n这个方法就是保证执行环境this的情况下依次执行传入参数中的方法，这些方法就是plugin。\n\nplugin方法到底如何定义一个插件\n\n很明显，这个方法在compiler上是有的，其实plugin方法是通过继承Tapable得到的。\n```\nTapable.prototype.plugin = function plugin(name, fn) {\n    if(Array.isArray(name)) {\n        name.forEach(function(name) {\n            this.plugin(name, fn);\n        }, this);\n        return;\n    }\n    if(!this._plugins[name]) this._plugins[name] = [fn];\n    else this._plugins[name].push(fn);\n};\n```\n这就是观察者模式中的注册观测者。\n\n可用于监听的事件\n\n可以在官方文档中查看，当然也可以仔细研读Compiler和Comilation两类去理解。例如：\n```\nCompiler.prototype.compile = function(callback) {\n    var self = this;\n    var params = self.newCompilationParams();\n    self.applyPluginsAsync(\"before-compile\", params, function(err) {\n        if(err) return callback(err);\n\n        self.applyPlugins(\"compile\", params);\n\n        var compilation = self.newCompilation(params);\n\n        self.applyPluginsParallel(\"make\", compilation, function(err) {\n            if(err) return callback(err);\n\n            compilation.finish();\n\n            compilation.seal(function(err) {\n                if(err) return callback(err);\n\n                self.applyPluginsAsync(\"after-compile\", compilation, function(err) {\n                    if(err) return callback(err);\n\n                    return callback(null, compilation);\n                });\n            });\n        });\n    });\n};\n```\ncompile方法是开始打包的一个重要方法，该方法会首先触发before-compile事件，也就是打包前需要干的事情，由一系列插件完成，然后触发compile事件，然后触发make事件，开始构建依赖关系。\n\n##### 总结\n\n我们了解了webpack的几个重要类及基本事件流程，通过这篇博客查看官网关于如何写plugin的介绍我们从黑盒角度知道了写plugin的基本步骤，对应webpack的工作流程\n就可以轻松从白盒角度总结出plugin的工作原理。\n","slug":"手写webpack的plugin","published":1,"updated":"2017-05-08T02:14:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5naxw55001kfcxee6cu401o","content":"<p>经过上一篇博客分析webpack从命令行到打包完成的整体流程，我们知道了webpage的plugin是基于事件机制工作的，这样最大的好处是易于扩展。社区里很多webpack的plugin，但是具体到我们的项目并不一定适用，这篇博客告诉你如何入手写一个plugin，然后分析源码相关部分告诉你你的plugin是如何工作。知其然且知其所以然。<br>该系列博客的所有测试代码。<br><a id=\"more\"></a><br>从黑盒角度学习写一个plugin</p>\n<p>所谓黑盒，就是先不管webpack的plugin如何运作，只去看官网介绍。</p>\n<h4 id=\"Compiler和Compilation两个类\"><a href=\"#Compiler和Compilation两个类\" class=\"headerlink\" title=\"Compiler和Compilation两个类\"></a>Compiler和Compilation两个类</h4><p>官网介绍告诉我们，plugin涉及到源码中的Compiler类和Compilation类，并对这两个类进行了简要介绍。</p>\n<p>Compiler在开始打包时就进行实例化，实例对象里面装着与打包相关的环境和参数，包括options、plugins和loaders等。<br>Compilation在每次文件变化重新打包时都进行一次实例化，它继承自Compiler，其实例对象里装着和modules及chunks相关的信息。<br>如果黑盒角度写plugin，知道这些就行了，没必要非去看源码。这两个对象上挂载的具体内容可以自己打印看看，不赘述。</p>\n<h4 id=\"写一个简单的plugin\"><a href=\"#写一个简单的plugin\" class=\"headerlink\" title=\"写一个简单的plugin\"></a>写一个简单的plugin</h4><p>写plugin大致分为两个步骤：</p>\n<blockquote>\n<ul>\n<li>定义plugin</li>\n<li>在webpack.config.js中引用这个plugin<h5 id=\"定义plugin\"><a href=\"#定义plugin\" class=\"headerlink\" title=\"定义plugin\"></a>定义plugin</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">function HTMLPlugin(options)&#123;</div><div class=\"line\">  // options是配置文件，你可以在这里进行一些与options相关的工作</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// 每个plugin都必须定义一个apply方法，webpack会自动调用这个方法</div><div class=\"line\">HTMLPlugin.prototype.apply = function(compiler)&#123;</div><div class=\"line\">    // apply方法中会传入Compiler的实例compiler</div><div class=\"line\">    // &apos;emit&apos;是该插件监听的事件，插件工作的逻辑在回调函数中</div><div class=\"line\">    compiler.plugin(&apos;emit&apos;, function(compilation, callback)&#123;</div><div class=\"line\">        // 回掉函数有两个参数</div><div class=\"line\">        // compilation和下一个回调函数，callback可以不传</div><div class=\"line\">        // 同步事件不传callback</div><div class=\"line\">        compilation.chunks.forEach(function(chunk)&#123;</div><div class=\"line\">            console.log(&apos;chunk.name&apos;, chunk.name);</div><div class=\"line\">            console.log(&apos;=====================================&apos;);</div><div class=\"line\">            //console.log(&apos;chunk.modules&apos;, chunk.modules.length);</div><div class=\"line\"></div><div class=\"line\">            chunk.modules.forEach(function(module)&#123;</div><div class=\"line\">                console.log(&apos;module&apos;, module.resource);</div><div class=\"line\">                module.fileDependencies.forEach(function(filepath)&#123;</div><div class=\"line\">                    //console.log(&apos;filepath&apos;, filepath);</div><div class=\"line\">                &#125;);</div><div class=\"line\">            &#125;);</div><div class=\"line\"></div><div class=\"line\">            chunk.files.forEach(function(filename)&#123;</div><div class=\"line\">                let source = compilation.assets[filename].source();</div><div class=\"line\">                //console.log(&apos;file&apos;, source);</div><div class=\"line\">            &#125;)</div><div class=\"line\">        &#125;);</div><div class=\"line\">        // 最后调用callback</div><div class=\"line\">        callback();</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">module.exports = HTMLPlugin;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>所有可以监听的事件请查看。<br>这里最让人疑惑的是compilation上的modules、chunks、assets，简单解释：</p>\n<p><code>compilation.modules</code>，每一个资源文件都会被编译成一个模块， 每个模块module.fileDependencies记录了模块依赖的其它模块<br>compilation.chunks，是entry的每个配置项及调用require.ensure的模块，每个chunk的， chunk.modules为chunk包含的模块以及模块所依赖的模块， chunk.files为每个配置项最后的输出结果文件，这里的值可以从compilation.assets获得<br><code>compilation.assets</code>，整个打包流程最终要输出的文件<br>这里需要注意，compilation.chunks不仅包括webpack.config.js 中 entry 中配置的模块，还包括模块中使用require.ensure的模块。因为webpack在实现的时候也模仿commonjs规范想实现一个异步加载模块的功能，当使用require.ensure去加载模块时，只有在需要的时候才去下载模块，这可以实现类似懒加载的功能，避免一个页面打包后太大。</p>\n<p>例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">// webpack.config.js</div><div class=\"line\">entry: &#123;</div><div class=\"line\">         index : &apos;./index.js&apos;,</div><div class=\"line\">         detail: &apos;./detail.js&apos;</div><div class=\"line\">     &#125;</div><div class=\"line\"></div><div class=\"line\">// detail.js</div><div class=\"line\">require(&apos;./src/bundle_require.js&apos;); //bundle_require.js没有依赖</div><div class=\"line\"></div><div class=\"line\">// index.js</div><div class=\"line\">// testTapable.js 和 temp.js都没有依赖</div><div class=\"line\">require(&apos;./src/tapable/testTapable.js&apos;);</div><div class=\"line\">let Temp = require.ensure(&apos;./src/plugins/temp.js&apos;, function()&#123;</div><div class=\"line\">    console.log(&apos;temp is loaded&apos;);</div><div class=\"line\">&#125;, &apos;temp&apos;);</div><div class=\"line\">let temp = new Temp();</div><div class=\"line\">console.log(&apos;temp is resolved&apos;);</div></pre></td></tr></table></figure></p>\n<p>使用上面插件打包的结果：<br>这里写图片描述</p>\n<h5 id=\"在webpack-config-js中引用这个plugin\"><a href=\"#在webpack-config-js中引用这个plugin\" class=\"headerlink\" title=\"在webpack.config.js中引用这个plugin\"></a>在webpack.config.js中引用这个plugin</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">var HTMLPlugin = require(&apos;./src/plugins/HTMLPlugin&apos;);</div><div class=\"line\"></div><div class=\"line\">  module.exports = &#123;</div><div class=\"line\">     //插件项</div><div class=\"line\">      plugins:[</div><div class=\"line\">          new HTMLPlugin()</div><div class=\"line\">      ],</div><div class=\"line\">      ...</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<p>命令行执行webpack就可以打印出上图的结果。</p>\n<h5 id=\"白盒角度看plugin如何工作\"><a href=\"#白盒角度看plugin如何工作\" class=\"headerlink\" title=\"白盒角度看plugin如何工作\"></a>白盒角度看plugin如何工作</h5><p>从源码分析apply方法到底如何调用，plugin方法到底如何定义一个插件等问题。</p>\n<h5 id=\"plugin的apply方法到底如何调用\"><a href=\"#plugin的apply方法到底如何调用\" class=\"headerlink\" title=\"plugin的apply方法到底如何调用\"></a>plugin的apply方法到底如何调用</h5><p>bin/webapck.js<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">var webpack = require(&quot;../lib/webpack.js&quot;);</div><div class=\"line\">compiler = webpack(options);</div></pre></td></tr></table></figure></p>\n<p>没什么好解释，去看lib/webpack.js。</p>\n<p>lib/webpack.js<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">const Compiler = require(&quot;./Compiler&quot;);</div><div class=\"line\">compiler = new Compiler();</div><div class=\"line\">if(options.plugins &amp;&amp; Array.isArray(options.plugins)) &#123;</div><div class=\"line\">    compiler.apply.apply(compiler, options.plugins);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>显然compiler有一个apply方法，这里给其传入的参数是插件数组options.plugins。compiler中的apply方法实际是从Tapable中继承来的，所以移步Tapable，可以npm install一下来查看其源码。</p>\n<p>Tapable<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Tapable.prototype.apply = function apply() &#123;</div><div class=\"line\">    for(var i = 0; i &lt; arguments.length; i++) &#123;</div><div class=\"line\">        arguments[i].apply(this);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>这个方法就是保证执行环境this的情况下依次执行传入参数中的方法，这些方法就是plugin。</p>\n<p>plugin方法到底如何定义一个插件</p>\n<p>很明显，这个方法在compiler上是有的，其实plugin方法是通过继承Tapable得到的。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">Tapable.prototype.plugin = function plugin(name, fn) &#123;</div><div class=\"line\">    if(Array.isArray(name)) &#123;</div><div class=\"line\">        name.forEach(function(name) &#123;</div><div class=\"line\">            this.plugin(name, fn);</div><div class=\"line\">        &#125;, this);</div><div class=\"line\">        return;</div><div class=\"line\">    &#125;</div><div class=\"line\">    if(!this._plugins[name]) this._plugins[name] = [fn];</div><div class=\"line\">    else this._plugins[name].push(fn);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>这就是观察者模式中的注册观测者。</p>\n<p>可用于监听的事件</p>\n<p>可以在官方文档中查看，当然也可以仔细研读Compiler和Comilation两类去理解。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">Compiler.prototype.compile = function(callback) &#123;</div><div class=\"line\">    var self = this;</div><div class=\"line\">    var params = self.newCompilationParams();</div><div class=\"line\">    self.applyPluginsAsync(&quot;before-compile&quot;, params, function(err) &#123;</div><div class=\"line\">        if(err) return callback(err);</div><div class=\"line\"></div><div class=\"line\">        self.applyPlugins(&quot;compile&quot;, params);</div><div class=\"line\"></div><div class=\"line\">        var compilation = self.newCompilation(params);</div><div class=\"line\"></div><div class=\"line\">        self.applyPluginsParallel(&quot;make&quot;, compilation, function(err) &#123;</div><div class=\"line\">            if(err) return callback(err);</div><div class=\"line\"></div><div class=\"line\">            compilation.finish();</div><div class=\"line\"></div><div class=\"line\">            compilation.seal(function(err) &#123;</div><div class=\"line\">                if(err) return callback(err);</div><div class=\"line\"></div><div class=\"line\">                self.applyPluginsAsync(&quot;after-compile&quot;, compilation, function(err) &#123;</div><div class=\"line\">                    if(err) return callback(err);</div><div class=\"line\"></div><div class=\"line\">                    return callback(null, compilation);</div><div class=\"line\">                &#125;);</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>compile方法是开始打包的一个重要方法，该方法会首先触发before-compile事件，也就是打包前需要干的事情，由一系列插件完成，然后触发compile事件，然后触发make事件，开始构建依赖关系。</p>\n<h5 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h5><p>我们了解了webpack的几个重要类及基本事件流程，通过这篇博客查看官网关于如何写plugin的介绍我们从黑盒角度知道了写plugin的基本步骤，对应webpack的工作流程<br>就可以轻松从白盒角度总结出plugin的工作原理。</p>\n","excerpt":"<p>经过上一篇博客分析webpack从命令行到打包完成的整体流程，我们知道了webpage的plugin是基于事件机制工作的，这样最大的好处是易于扩展。社区里很多webpack的plugin，但是具体到我们的项目并不一定适用，这篇博客告诉你如何入手写一个plugin，然后分析源码相关部分告诉你你的plugin是如何工作。知其然且知其所以然。<br>该系列博客的所有测试代码。<br>","more":"<br>从黑盒角度学习写一个plugin</p>\n<p>所谓黑盒，就是先不管webpack的plugin如何运作，只去看官网介绍。</p>\n<h4 id=\"Compiler和Compilation两个类\"><a href=\"#Compiler和Compilation两个类\" class=\"headerlink\" title=\"Compiler和Compilation两个类\"></a>Compiler和Compilation两个类</h4><p>官网介绍告诉我们，plugin涉及到源码中的Compiler类和Compilation类，并对这两个类进行了简要介绍。</p>\n<p>Compiler在开始打包时就进行实例化，实例对象里面装着与打包相关的环境和参数，包括options、plugins和loaders等。<br>Compilation在每次文件变化重新打包时都进行一次实例化，它继承自Compiler，其实例对象里装着和modules及chunks相关的信息。<br>如果黑盒角度写plugin，知道这些就行了，没必要非去看源码。这两个对象上挂载的具体内容可以自己打印看看，不赘述。</p>\n<h4 id=\"写一个简单的plugin\"><a href=\"#写一个简单的plugin\" class=\"headerlink\" title=\"写一个简单的plugin\"></a>写一个简单的plugin</h4><p>写plugin大致分为两个步骤：</p>\n<blockquote>\n<ul>\n<li>定义plugin</li>\n<li>在webpack.config.js中引用这个plugin<h5 id=\"定义plugin\"><a href=\"#定义plugin\" class=\"headerlink\" title=\"定义plugin\"></a>定义plugin</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">function HTMLPlugin(options)&#123;</div><div class=\"line\">  // options是配置文件，你可以在这里进行一些与options相关的工作</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// 每个plugin都必须定义一个apply方法，webpack会自动调用这个方法</div><div class=\"line\">HTMLPlugin.prototype.apply = function(compiler)&#123;</div><div class=\"line\">    // apply方法中会传入Compiler的实例compiler</div><div class=\"line\">    // &apos;emit&apos;是该插件监听的事件，插件工作的逻辑在回调函数中</div><div class=\"line\">    compiler.plugin(&apos;emit&apos;, function(compilation, callback)&#123;</div><div class=\"line\">        // 回掉函数有两个参数</div><div class=\"line\">        // compilation和下一个回调函数，callback可以不传</div><div class=\"line\">        // 同步事件不传callback</div><div class=\"line\">        compilation.chunks.forEach(function(chunk)&#123;</div><div class=\"line\">            console.log(&apos;chunk.name&apos;, chunk.name);</div><div class=\"line\">            console.log(&apos;=====================================&apos;);</div><div class=\"line\">            //console.log(&apos;chunk.modules&apos;, chunk.modules.length);</div><div class=\"line\"></div><div class=\"line\">            chunk.modules.forEach(function(module)&#123;</div><div class=\"line\">                console.log(&apos;module&apos;, module.resource);</div><div class=\"line\">                module.fileDependencies.forEach(function(filepath)&#123;</div><div class=\"line\">                    //console.log(&apos;filepath&apos;, filepath);</div><div class=\"line\">                &#125;);</div><div class=\"line\">            &#125;);</div><div class=\"line\"></div><div class=\"line\">            chunk.files.forEach(function(filename)&#123;</div><div class=\"line\">                let source = compilation.assets[filename].source();</div><div class=\"line\">                //console.log(&apos;file&apos;, source);</div><div class=\"line\">            &#125;)</div><div class=\"line\">        &#125;);</div><div class=\"line\">        // 最后调用callback</div><div class=\"line\">        callback();</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">module.exports = HTMLPlugin;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>所有可以监听的事件请查看。<br>这里最让人疑惑的是compilation上的modules、chunks、assets，简单解释：</p>\n<p><code>compilation.modules</code>，每一个资源文件都会被编译成一个模块， 每个模块module.fileDependencies记录了模块依赖的其它模块<br>compilation.chunks，是entry的每个配置项及调用require.ensure的模块，每个chunk的， chunk.modules为chunk包含的模块以及模块所依赖的模块， chunk.files为每个配置项最后的输出结果文件，这里的值可以从compilation.assets获得<br><code>compilation.assets</code>，整个打包流程最终要输出的文件<br>这里需要注意，compilation.chunks不仅包括webpack.config.js 中 entry 中配置的模块，还包括模块中使用require.ensure的模块。因为webpack在实现的时候也模仿commonjs规范想实现一个异步加载模块的功能，当使用require.ensure去加载模块时，只有在需要的时候才去下载模块，这可以实现类似懒加载的功能，避免一个页面打包后太大。</p>\n<p>例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">// webpack.config.js</div><div class=\"line\">entry: &#123;</div><div class=\"line\">         index : &apos;./index.js&apos;,</div><div class=\"line\">         detail: &apos;./detail.js&apos;</div><div class=\"line\">     &#125;</div><div class=\"line\"></div><div class=\"line\">// detail.js</div><div class=\"line\">require(&apos;./src/bundle_require.js&apos;); //bundle_require.js没有依赖</div><div class=\"line\"></div><div class=\"line\">// index.js</div><div class=\"line\">// testTapable.js 和 temp.js都没有依赖</div><div class=\"line\">require(&apos;./src/tapable/testTapable.js&apos;);</div><div class=\"line\">let Temp = require.ensure(&apos;./src/plugins/temp.js&apos;, function()&#123;</div><div class=\"line\">    console.log(&apos;temp is loaded&apos;);</div><div class=\"line\">&#125;, &apos;temp&apos;);</div><div class=\"line\">let temp = new Temp();</div><div class=\"line\">console.log(&apos;temp is resolved&apos;);</div></pre></td></tr></table></figure></p>\n<p>使用上面插件打包的结果：<br>这里写图片描述</p>\n<h5 id=\"在webpack-config-js中引用这个plugin\"><a href=\"#在webpack-config-js中引用这个plugin\" class=\"headerlink\" title=\"在webpack.config.js中引用这个plugin\"></a>在webpack.config.js中引用这个plugin</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">var HTMLPlugin = require(&apos;./src/plugins/HTMLPlugin&apos;);</div><div class=\"line\"></div><div class=\"line\">  module.exports = &#123;</div><div class=\"line\">     //插件项</div><div class=\"line\">      plugins:[</div><div class=\"line\">          new HTMLPlugin()</div><div class=\"line\">      ],</div><div class=\"line\">      ...</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<p>命令行执行webpack就可以打印出上图的结果。</p>\n<h5 id=\"白盒角度看plugin如何工作\"><a href=\"#白盒角度看plugin如何工作\" class=\"headerlink\" title=\"白盒角度看plugin如何工作\"></a>白盒角度看plugin如何工作</h5><p>从源码分析apply方法到底如何调用，plugin方法到底如何定义一个插件等问题。</p>\n<h5 id=\"plugin的apply方法到底如何调用\"><a href=\"#plugin的apply方法到底如何调用\" class=\"headerlink\" title=\"plugin的apply方法到底如何调用\"></a>plugin的apply方法到底如何调用</h5><p>bin/webapck.js<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">var webpack = require(&quot;../lib/webpack.js&quot;);</div><div class=\"line\">compiler = webpack(options);</div></pre></td></tr></table></figure></p>\n<p>没什么好解释，去看lib/webpack.js。</p>\n<p>lib/webpack.js<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">const Compiler = require(&quot;./Compiler&quot;);</div><div class=\"line\">compiler = new Compiler();</div><div class=\"line\">if(options.plugins &amp;&amp; Array.isArray(options.plugins)) &#123;</div><div class=\"line\">    compiler.apply.apply(compiler, options.plugins);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>显然compiler有一个apply方法，这里给其传入的参数是插件数组options.plugins。compiler中的apply方法实际是从Tapable中继承来的，所以移步Tapable，可以npm install一下来查看其源码。</p>\n<p>Tapable<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Tapable.prototype.apply = function apply() &#123;</div><div class=\"line\">    for(var i = 0; i &lt; arguments.length; i++) &#123;</div><div class=\"line\">        arguments[i].apply(this);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>这个方法就是保证执行环境this的情况下依次执行传入参数中的方法，这些方法就是plugin。</p>\n<p>plugin方法到底如何定义一个插件</p>\n<p>很明显，这个方法在compiler上是有的，其实plugin方法是通过继承Tapable得到的。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">Tapable.prototype.plugin = function plugin(name, fn) &#123;</div><div class=\"line\">    if(Array.isArray(name)) &#123;</div><div class=\"line\">        name.forEach(function(name) &#123;</div><div class=\"line\">            this.plugin(name, fn);</div><div class=\"line\">        &#125;, this);</div><div class=\"line\">        return;</div><div class=\"line\">    &#125;</div><div class=\"line\">    if(!this._plugins[name]) this._plugins[name] = [fn];</div><div class=\"line\">    else this._plugins[name].push(fn);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>这就是观察者模式中的注册观测者。</p>\n<p>可用于监听的事件</p>\n<p>可以在官方文档中查看，当然也可以仔细研读Compiler和Comilation两类去理解。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">Compiler.prototype.compile = function(callback) &#123;</div><div class=\"line\">    var self = this;</div><div class=\"line\">    var params = self.newCompilationParams();</div><div class=\"line\">    self.applyPluginsAsync(&quot;before-compile&quot;, params, function(err) &#123;</div><div class=\"line\">        if(err) return callback(err);</div><div class=\"line\"></div><div class=\"line\">        self.applyPlugins(&quot;compile&quot;, params);</div><div class=\"line\"></div><div class=\"line\">        var compilation = self.newCompilation(params);</div><div class=\"line\"></div><div class=\"line\">        self.applyPluginsParallel(&quot;make&quot;, compilation, function(err) &#123;</div><div class=\"line\">            if(err) return callback(err);</div><div class=\"line\"></div><div class=\"line\">            compilation.finish();</div><div class=\"line\"></div><div class=\"line\">            compilation.seal(function(err) &#123;</div><div class=\"line\">                if(err) return callback(err);</div><div class=\"line\"></div><div class=\"line\">                self.applyPluginsAsync(&quot;after-compile&quot;, compilation, function(err) &#123;</div><div class=\"line\">                    if(err) return callback(err);</div><div class=\"line\"></div><div class=\"line\">                    return callback(null, compilation);</div><div class=\"line\">                &#125;);</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>compile方法是开始打包的一个重要方法，该方法会首先触发before-compile事件，也就是打包前需要干的事情，由一系列插件完成，然后触发compile事件，然后触发make事件，开始构建依赖关系。</p>\n<h5 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h5><p>我们了解了webpack的几个重要类及基本事件流程，通过这篇博客查看官网关于如何写plugin的介绍我们从黑盒角度知道了写plugin的基本步骤，对应webpack的工作流程<br>就可以轻松从白盒角度总结出plugin的工作原理。</p>"},{"title":"常用设计素材网站","date":"2017-04-20T03:32:11.000Z","from":"原","_content":"\n>* [花瓣](http://huaban.com/)    \n>* [阿里巴巴矢量图标库](http://www.iconfont.cn/)\n>* [pinterest](https://jp.pinterest.com/)\n>* [站酷](http://www.zcool.com.cn/)\n>* [easyicon](http://www.easyicon.net/)\n>* [千图网](http://www.58pic.com/)\n\n<!--more-->\n","source":"_posts/常用设计素材网站.md","raw":"---\ntitle: 常用设计素材网站\ntags:\n  - ''\ncategories:\n  - '设计'\n  - '素材网'\ndate: 2017-04-20 11:32:11\nfrom: '原'\n---\n\n>* [花瓣](http://huaban.com/)    \n>* [阿里巴巴矢量图标库](http://www.iconfont.cn/)\n>* [pinterest](https://jp.pinterest.com/)\n>* [站酷](http://www.zcool.com.cn/)\n>* [easyicon](http://www.easyicon.net/)\n>* [千图网](http://www.58pic.com/)\n\n<!--more-->\n","slug":"常用设计素材网站","published":1,"updated":"2017-07-27T02:09:34.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5naxw58001mfcxedpffyzbf","content":"<blockquote>\n<ul>\n<li><a href=\"http://huaban.com/\" target=\"_blank\" rel=\"external\">花瓣</a>    </li>\n<li><a href=\"http://www.iconfont.cn/\" target=\"_blank\" rel=\"external\">阿里巴巴矢量图标库</a></li>\n<li><a href=\"https://jp.pinterest.com/\" target=\"_blank\" rel=\"external\">pinterest</a></li>\n<li><a href=\"http://www.zcool.com.cn/\" target=\"_blank\" rel=\"external\">站酷</a></li>\n<li><a href=\"http://www.easyicon.net/\" target=\"_blank\" rel=\"external\">easyicon</a></li>\n<li><a href=\"http://www.58pic.com/\" target=\"_blank\" rel=\"external\">千图网</a></li>\n</ul>\n</blockquote>\n<a id=\"more\"></a>\n","excerpt":"<blockquote>\n<ul>\n<li><a href=\"http://huaban.com/\">花瓣</a>    </li>\n<li><a href=\"http://www.iconfont.cn/\">阿里巴巴矢量图标库</a></li>\n<li><a href=\"https://jp.pinterest.com/\">pinterest</a></li>\n<li><a href=\"http://www.zcool.com.cn/\">站酷</a></li>\n<li><a href=\"http://www.easyicon.net/\">easyicon</a></li>\n<li><a href=\"http://www.58pic.com/\">千图网</a></li>\n</ul>\n</blockquote>","more":""},{"layout":"html5","title":"HTML5 标签列表","date":"2017-04-05T03:14:47.000Z","_content":"\n`HTML5 <article> 标签`\narticle 标签是 HTML 5 的新标签, article 标签的内容独立于文档的其余部分。\n`HTML5 <canvas> 标签`\nhtml5 canvas 标签定义图形，比如图表和其他图像。canvas 标签只是图形容器，您必须使用脚本来绘制图形。\n<!--more-->\n`HTML5 <!--...--> 标签`\ncomment 注释标签用于在源文档中插入注释。注释内容不会被浏览器显示。为代码编写注释的好处是，有助于增强代码的可读性。\n`HTML5 <!DOCTYPE> 标签`\n!DOCTYPE 文档声明必须位于 HTML5 文档中的第一行，也就是位于 html 标签之前。该标签告知浏览器文档所使用的 HTML 规范。\n`HTML5 <a> 标签`\nhtml5 a 标签定义超链接，用于从一个页面链接到另一个页面。a 标签最重要的属性是 href 属性，它指定链接的目标 url 。\n`HTML5 <abbr> 标签`\nabbr 标签最初是在 HTML 4.0 中引入的，表示它所包含的文本是一个更长的单词或短语的缩写形式。\n`HTML5 <address> 标签`\naddress 标签定义文档作者或拥有者的联系信息。通常的做法是将 address 元素添加到网页的头部或底部。\n`HTML5 <applet> 标签`\n定义和用法 applet 定义嵌入的 applet。 HTML 5 中不支持 applet 标签 请使用 object 标签代替它。\n`HTML5 <acronym> 标签`\n定义和用法 HTML 5 不支持 acronym 标签。 请使用 abbr 标签代替它。 在 HTML 4.01 中，acronym 标签定义首字母缩略词。 如果首字母缩略词是一个单词，则可以被读出来，例如 NATO、NASA、ASAP、GUI。\n`HTML5 <area> 标签`\narea 元素始终嵌套在 map 标签内部。area 标签定义图像映射内部的区域（图像映射指的是带有可点击区域的图像）。\n`HTML5 <aside> 标签`\nhtml5 aside 标签定义其所处内容之外的内容。aside 标签的内容应该与附近的内容相关。\n`HTML5 <audio> 标签`\naudio 标签是 HTML 5 的新标签, audio 标签想网页中插入声音，比如音乐或其他音频流。\n`HTML5 <b> 标签`\nhtml5 b 标签定义粗体的文本。b 标签用于强调某些文本。如果您希望把文本标记为相比其他文本更为重要，应该使用 strong 标签。\n`HTML5 <base> 标签`\nbase 标签为页面上的所有链接规定默认地址或默认目标。base 标签必须位于 head 元素内部。\n`HTML5 <basefont> 标签`\nHTML5 中不支持 basefont 标签。请用 CSS 代替。\n`HTML5 <bdi> 标签`\nbdi 标签是 HTML5 中的新标签。bdi 标签允许您设置一段文本，使其脱离其父元素的文本方向设置。\n`HTML5 <bdo> 标签`\nbdo 标签覆盖默认的文本方向。通过设置 dir 属性来设置文本的显示方向。\n`HTML5 <big> 标签`\nHTML5 中不支持 big 标签。请用 CSS 代替\n`HTML5 <blockquote> 标签`\nblockquote 标签之间的所有文本都会从常规文本中分离出来，经常会在左、右两边进行缩进，而且有时会使用斜体。\n`HTML5 <body> 标签`\nbody 标签定义文档的主体。 body 标签包含文档的所有内容，比如文本、超链接、图像、表格、列表等。在 HTML 5 中，删除了所有 的特殊属性。\n`HTML5 <br> 标签`\nbr 标签插入简单的换行符。br 标签是一个空标签，意味着它没有结束标签。br 标签常用来输出空行\n`HTML5 <button> 标签`\nbutton 标签定义按钮。您可以在 button 标签内放置内容，比如文本或图像。但是在 form 中通常使用 input 标签创建按钮。\n`HTML5 <caption> 标签`\ncaption 标签定义表格的标题。caption 标签必须直接放置到 table 标签之后。通常标题会居中显示在表格上方。\n`HTML5 <center> 标签`\nHTML5 中不支持该 center 标签。请使用 CSS 代替。\n`HTML5 <cite> 标签`\ncite 标签定义作品（比如书籍、歌曲、电影、电视节目、绘画、雕塑等等）的标题，通常斜体显示。\n`HTML5 <code> 标签`\nem,strong,dfn,code,samp,kbd,var,cite 标签常用来格式话文本，使用 css 样式表可以显示更丰富的效果。\n`HTML5 <col> 标签`\ncol 标签为表格中的一个或多个列定义属性值。通过使用 col 标签，可以向整个列应用样式，而不需要重复为每个单元格或每一行设置样式。\n`HTML5 <colgroup> 标签`\n通过使用 colgroup 标签，可以向整个列应用样式，而不需要重复为每个单元格或每一行设置样式。只能在 table 元素内使用 colgroup 标签。\n`HTML5 <command> 标签`\ncommand 元素表示用户能够调用的命令。可以用它规定键盘快捷键。只有当 command 元素位于 menu 元素内时，该元素才是可见的。\n`HTML5 <datalist> 标签`\ndatalist 标签定义选项列表。请与 input 元素配合使用该元素，来定义 input 可能的值。\n`HTML5 <dd> 标签`\ndd 标签定义一个定义列表中对项目的描述。dt 标签定义列表中的项目，而 dd> 标签描述这些项目。\n`HTML5 <del> 标签`\ndel 标签定义文档中已删除的文本。与 ins 标签一起使用，描述文档中的更新和修正。\n`HTML5 <details> 标签`\ndetails 标签是 HTML 5 中的新标签。details 标签用于描述文档或文档某个部分的细节。目前只有 Chrome 支持 details 标签。\n`HTML5 <dfn> 标签`\n`HTML5 <dir> 标签`\nHTML5 中不支持 dir 标签。请用 CSS 代替。\n`HTML5 <div> 标签`\ndiv 标签常用于组合块级元素，以便通过样式表来对这些元素进行格式化。通常使用 div + css 对网页进行布局。\n`HTML5 <dl> 标签`\ndl 标签定义一个定义列表。dl 标签内部使用 dd 和 dt 定义列表中的项目。\n`HTML5 <dt> 标签`\ndt 标签定义一个定义列表中的一个项目。dd 标签描述这些项目。\n`HTML5 <em> 标签`\n`HTML5 <embed> 标签`\nembed 标签是 HTML 5 中的新标签。embed 标签定义嵌入的内容，比如插件。\n`HTML5 <fieldset> 标签`\nfieldset 标签会在相关表单元素周围绘制边框。fieldset 标签会在相关表单元素周围绘制边框。\n`HTML5 <figcaption> 标签`\nfigcaption 标签是 HTML 5 中的新标签。figcaption 标签定义 figure 元素的标题（caption）。\n`HTML5 <figure> 标签`\nfigure 标签是 HTML 5 中的新标签。figure 标签规定独立的流内容（图像、图表、照片、代码等等）。\n`HTML5 <font> 标签`\n定义和用法 在 HTML 5 中，不支持 font 标签。请用 CSS 代替它。 font 标签规定文本的字体、大小和颜色。\n`HTML5 <footer> 标签`\nfooter 标签是 HTML 5 中的新标签。footer 标签定义 section 或 document 的页脚。\n`HTML5 <form> 标签`\nform 标签标签用于创建供用户输入的 HTML 表单。form 标签包含多个表单元素，如：button,input,keygen,object,output,select,textarea\n`HTML5 <frame> 标签`\n定义和用法 在 HTML 5 中不支持 frame 标签。 frame 标签定义框架集中的子窗口（框架）。 由于该标签对网页可用性的负面影响，在 HTML 5 中 frame 和 frameset 标签没有得到支持。\n`HTML5 <frameset> 标签`\n定义和用法 在 HTML 5 中不支持 frameset 标签。 frameset 标签定义框架集。它用于组织多个窗口（框架）。 由于该标签对网页可用性的负面影响，在 HTML 5 中 frame 和 frameset 标签没有得到支持。\n`HTML5 <h1 - h6> 标签`\nh1,h2,h3,h4,h5,h6 标签用来定义文档中的标题。h1 定义最大的标题。h6 定义最小的标题。\n`HTML5 <head> 标签`\nhead 标签是所有头部元素的容器。位于 head 内部的元素可以包含 title,base,link,meta,script,style等。\n`HTML5 <header> 标签`\nheader 标签是 HTML 5 中的新标签。header 标签定义文档的页眉（介绍信息）。\n`HTML5 <hgroup> 标签`\nhgroup 标签是 HTML 5 中的新标签。hgroup 标签用于对网页或区段（section）的标题进行组合。\n`HTML5 <hr> 标签`\n在 HTML 5 中，hr 标签定义内容中的主题变化，并显示为一条水平线。在 HTML 4.01 中，hr 标签仅仅显示为一条水平线。\n`HTML5 <html> 标签`\nhtml 标签告知浏览器这是一个 HTML 文档。html 元素是 HTML 文档中最外层的根元素。\n`HTML5 <i> 标签`\ni 标签定义的文本在 html 文档中呈现为斜体，以便与文档中其余部分区别开来。\n`HTML5 <iframe> 标签`\niframe 标签创建包含另一个文档的行内框架。在 HTML 5 中，仅仅支持 src 属性。\n`HTML5 <img> 标签`\nimg 标签定义 HTML 页面中的图像。img 标签定义 HTML 页面中的图像。img 标签定义 HTML 页面中的图像。\n`HTML5 <input> 标签`\ninput 标签规定 form 表单中用户可输入数据的输入字段。根据不同的 type 属性，输入字段可以是文本字段、复选框、密码字段、单选按钮、按钮等。\n`HTML5 <ins> 标签`\nins 标签定义文档的其余部分之外的插入文本。通常能够与 del 标签一起使用，来描述对文档的更新和修正。\n`HTML5 <keygen> 标签`\nkeygen 是 HTML5 中的新元素。keygen 标签规定用于表单的密钥对生成器字段。当提交表单时，私钥存储在本地，公钥发送到服务器。\n`HTML5 <kbd> 标签`\n`HTML5 <label> 标签`\nlabel 标签为 input 元素定义文字标识，label 标签的 for 属性应该等于相关元素的 id 元素，以便将它们捆绑起来。\n`HTML5 <legend> 标签`\nlegend 元素为以下元素定义标题（caption）：fieldset、figure、details 。 legend 元素为以下元素定义标题（caption）：fieldset、figure>、details。\n`HTML5 <li> 标签`\nli 标签定义列表项，有序列表 ol 和无序列表 ul 中都使用 li 标签。 HTML 5 中，li 标签不再支持 type 属性。\n`HTML5 <link> 标签`\nlink 标签定义文档与外部资源之间的关系。link 标签大多数时候都用来连接 css 样式表。link 标签只能位于head 标签中。\n`HTML5 <map> 标签`\nmap 标签用于定义图像中可点击的热点区域。map 标签的 name 属性与 img 标签的 usemap 属性相关联，以创建图像与映射之间的关系\n`HTML5 <mark> 标签`\nmark 标签是 HTML 5 中的新标签。mark 标签定义带有记号的文本。请在需要突出显示文本时使用 mark 标签。\n`HTML5 <menu> 标签`\nmenu 标签定义菜单列表。当希望列出表单控件时使用该标签。在 HTML 5 中，重新定义了 menu 元素，且使用用于排列表单控件。\n`HTML5 <meta> 标签`\nmeta 标签位于文档的头部 head 标签中，meta 标签的属性用来定义有关页面的元信息，比如 字符集，关键词，描述，重定向等。\n`HTML5 <meter> 标签`\nmeter 标签是 HTML 5 中的新标签。meter 标签定义度量的范围，既可以在元素的文本中，也可以在 min/max 属性中定义。\n`HTML5 <nav> 标签`\nnav 标签是 HTML 5 中的新标签。nav 标签定义导航链接的部分。\n`HTML5 <noframes> 标签`\n定义和用法 在 HTML 5 中不支持 noframes 标签。 noframes 标签向浏览器显示无法处理框架的提示文本。\n`HTML5` <noscript> 标签\nnoscript 元素用来定义在脚本未被执行时的替代内容（文本）。此标签用于可识别 script 标签但无法支持其中脚本的浏览器。\n`HTML5 <object> 标签`\nobject 定义一个嵌入的对象。请使用此元素向您的 HTML5 页面添加多媒体。\n`HTML5 <ol> 标签`\nol 标签定义有序列表。在 HTML 5 中，不再支持 compact 和 type 这两个属性\n`HTML5 <optgroup> 标签`\noptgroup 标签定义选项组。此元素允许您组合选项。当您使用一个长的选项列表时，对相关的选项进行组合会使处理更加容易。\n`HTML5 <option> 标签`\noption 标签定义下拉列表中的一个选项。在 HTML 5 中，option 标签也用于新元素 datalist 中。\n`HTML5 <output> 标签`\noutput 标签是 HTML 5 中的新标签。output 标签定义不同类型的输出，比如脚本的输出。\n`HTML5 <p> 标签`\np 标签定义段落。在 HTML 5 中不再支持 p 标签的 align 属性。\n`HTML5 <param> 标签`\nparam 标签允许您为插入 XHTML 文档的对象规定 run-time 设置，也就是说，此标签可为包含它的 object 标签提供参数。\n`HTML5 <pre> 标签`\npre 标签可定义预格式化的文本。pre 标签的一个常见应用就是用来表示计算机的源代码。\n`HTML5 <progress> 标签`\nprogress 标签是 HTML 5 中的新标签。progress 标签定义运行中的进度（进程）。\n`HTML5 <q> 标签`\nq 标签定义一个短的引用。浏览器经常会在这种引用的周围插入引号。\n`HTML5 <rp> 标签`\nrp 标签是 HTML 5 的新标签。rp 标签在 ruby 注释中使用，以定义不支持 ruby 元素的浏览器所显示的内容。\n`HTML5 <ruby> 标签`\nruby 标签是 HTML 5 的新标签。ruby 标签定义 ruby 注释（中文注音或字符）。\n`HTML5 <s> 标签`\ns 标签定义加删除线的文本。HTML 5 中不再支持 s 标签。\n`HTML5 <samp> 标签`\n`HTML5 <script> 标签`\nscript 标签用于定义客户端脚本，比如 JavaScript。script 元素既可包含脚本语句，也可以通过 src 属性指向外部脚本文件。\n`HTML5 <select> 标签`\nselect 标签创建下拉列表。请在 form 元素中使用此标签来接受用户的输入\n`HTML5 <small> 标签`\n在 HTML5 中，small 元素定义旁注信息，并显示为更小的文本。对于由 em 元素强调过的或由 strong 元素标记为重要的文本，small 元素不会取消对文本的强调，也不会降低这些文本的重要性。\n`HTML5 <source> 标签`\nsource 标签是 HTML 5 中的新标签。source 标签为媒介元素（比如 video 和 audio）定义媒介资源。\n`HTML5 <span> 标签`\nspan 标签用于对文档中的行内元素进行组合,以便通过样式表 css 对它们进行格式化。\n`HTML5 <strike> 标签`\n定义和用法 在 HTML 5 中不支持 strike 标签。请使用 CSS 代替。 strike 标签定义加删除线的文本。请使用 del 标签代替。\n`HTML5 <strong> 标签`\n`HTML5 <style> 标签`\nstyle 标签定义 HTML 文档的样式信息。scoped 属性是 HTML 5 中的新属性，它允许我们为文档的指定部分定义样式，而不是整个文档。\n`HTML5 <sub> 标签`\nsub 标签可定义下标文本。sup 可定义上标文本。\n`HTML5 <summary> 标签`\nsummary 标签是 HTML 5 中的新标签。是 details 元素的第一个子元素，定义 details 元素的标题。\n`HTML5 <sup> 标签`\n`HTML5 <table> 标签`\ntable 标签定义 HTML 表格。一个简单的 HTML 表格包括 table 元素，一个或多个 tr、th 以及 td 元素。\n`HTML5 <tbody> 标签`\n使用 tbody 标签，可以将表格分为一个单独的部分。tbody 标签可将表格中的一行或几行合成一组。在 HTML 5 中，不支持 tbody 标签的任何属性。\n`HTML5 <td> 标签`\ntd 标签定义 HTML 表格中的标准单元格。thead 元素中只能使用 th 标签按，不允许使用 td 标签。\n`HTML5 <textarea> 标签`\ntextarea 定义一个多行的文本输入区域。文本区中的默认字体是等宽字体 (fixed pitch)。\n`HTML5 <tfoot> 标签`\ntfoot 定义表格的页脚（脚注），tfoot 内部必须拥有 tr 标签！tfoot 表亲必须位于 table 标签内。\n`HTML5 <th> 标签`\nth 标签定义 HTML 表格中的表头单元格。th 元素中的文本呈现为粗体并且居中。th 标签在 tr 标签中定义。\n`HTML5 <thead> 标签`\nthead 标签在 table 标签中使用，定义表格的表头。thead 内部必须拥有 tr 标签！\n`HTML5 <time> 标签`\ntime 标签是 HTML 5 中的新标签。time 标签定义公历的时间（24 小时制）或日期，时间和时区偏移是可选的。\n`HTML5 <title> 标签`\ntitle 位于 head 部分，用来定义文档的标题。title 元素在所有 HTML 文档中是必需且唯一的。\n`HTML5 <tr> 标签`\ntr 标签定义表格中的行，一个 tr 元素包含一个或多个 td 或 th 标签。\n`HTML5 <track> 标签`\ntrack 标签是 HTML 5 中的新标签。track 标签为诸如 video 元素之类的媒介规定外部字幕文件或其他包含的文版文件。\n`HTML5 <tt> 标签`\n定义和用法 在 HTML 5 中不支持 tt 标签。 tt 标签定义打字机文本。\n`HTML5 <u> 标签`\n在 HTML 5 中不支持 u 标签\n`HTML5 <ul> 标签`\nul 标签定义无序列表。请使用 CSS 来定义列表的显示样式。\n`HTML5 <var> 标签`\n`HTML5 <video> 标签`\nvideo 标签是 HTML 5 的新标签。video 标签定义视频，比如电影片段或其他视频流。\n`HTML5 <wbr> 标签`\nwbr 标签是 HTML 5 中的新标签。wbr 规定在文本中的何处适合添加换行符。\n`HTML5 <rt> 标签`\n定义和用法 rt 标签定义字符（中文注音或字符）的解释或发音。 ruby 注释是中文注音或字符。 在东亚使用，显示的是东亚字符的发音。 与 ruby 以及 rt 标签一同使用： ruby 元素由一个或多个字符（需要一个解释/发音）和一个提供该信息的 rt 元素组成，还包括可选的 rp 元素，定义当浏览器不支持 ruby 元素时显示的内容。 实例 一个 ruby 注释： ruby漢 rt ㄏㄢˋ /rt/ruby HTML 4.01 与 HTML 5 之间的差异 rt 标签是 HTML 5 的新标\n`HTML5 <section> 标签`\nsection 标签是 HTML 5 中的新标签。section 标签定义文档中的节（section、区段）。比如章节、页眉、页脚或文档中的其他部分。\n","source":"_posts/标签列表.md","raw":"layout: html5\ntitle: HTML5 标签列表\ndate: 2017-04-05 11:14:47\ntags: \"html5\"\ncategories: [\"前端\",\"html5\"]\n---\n\n`HTML5 <article> 标签`\narticle 标签是 HTML 5 的新标签, article 标签的内容独立于文档的其余部分。\n`HTML5 <canvas> 标签`\nhtml5 canvas 标签定义图形，比如图表和其他图像。canvas 标签只是图形容器，您必须使用脚本来绘制图形。\n<!--more-->\n`HTML5 <!--...--> 标签`\ncomment 注释标签用于在源文档中插入注释。注释内容不会被浏览器显示。为代码编写注释的好处是，有助于增强代码的可读性。\n`HTML5 <!DOCTYPE> 标签`\n!DOCTYPE 文档声明必须位于 HTML5 文档中的第一行，也就是位于 html 标签之前。该标签告知浏览器文档所使用的 HTML 规范。\n`HTML5 <a> 标签`\nhtml5 a 标签定义超链接，用于从一个页面链接到另一个页面。a 标签最重要的属性是 href 属性，它指定链接的目标 url 。\n`HTML5 <abbr> 标签`\nabbr 标签最初是在 HTML 4.0 中引入的，表示它所包含的文本是一个更长的单词或短语的缩写形式。\n`HTML5 <address> 标签`\naddress 标签定义文档作者或拥有者的联系信息。通常的做法是将 address 元素添加到网页的头部或底部。\n`HTML5 <applet> 标签`\n定义和用法 applet 定义嵌入的 applet。 HTML 5 中不支持 applet 标签 请使用 object 标签代替它。\n`HTML5 <acronym> 标签`\n定义和用法 HTML 5 不支持 acronym 标签。 请使用 abbr 标签代替它。 在 HTML 4.01 中，acronym 标签定义首字母缩略词。 如果首字母缩略词是一个单词，则可以被读出来，例如 NATO、NASA、ASAP、GUI。\n`HTML5 <area> 标签`\narea 元素始终嵌套在 map 标签内部。area 标签定义图像映射内部的区域（图像映射指的是带有可点击区域的图像）。\n`HTML5 <aside> 标签`\nhtml5 aside 标签定义其所处内容之外的内容。aside 标签的内容应该与附近的内容相关。\n`HTML5 <audio> 标签`\naudio 标签是 HTML 5 的新标签, audio 标签想网页中插入声音，比如音乐或其他音频流。\n`HTML5 <b> 标签`\nhtml5 b 标签定义粗体的文本。b 标签用于强调某些文本。如果您希望把文本标记为相比其他文本更为重要，应该使用 strong 标签。\n`HTML5 <base> 标签`\nbase 标签为页面上的所有链接规定默认地址或默认目标。base 标签必须位于 head 元素内部。\n`HTML5 <basefont> 标签`\nHTML5 中不支持 basefont 标签。请用 CSS 代替。\n`HTML5 <bdi> 标签`\nbdi 标签是 HTML5 中的新标签。bdi 标签允许您设置一段文本，使其脱离其父元素的文本方向设置。\n`HTML5 <bdo> 标签`\nbdo 标签覆盖默认的文本方向。通过设置 dir 属性来设置文本的显示方向。\n`HTML5 <big> 标签`\nHTML5 中不支持 big 标签。请用 CSS 代替\n`HTML5 <blockquote> 标签`\nblockquote 标签之间的所有文本都会从常规文本中分离出来，经常会在左、右两边进行缩进，而且有时会使用斜体。\n`HTML5 <body> 标签`\nbody 标签定义文档的主体。 body 标签包含文档的所有内容，比如文本、超链接、图像、表格、列表等。在 HTML 5 中，删除了所有 的特殊属性。\n`HTML5 <br> 标签`\nbr 标签插入简单的换行符。br 标签是一个空标签，意味着它没有结束标签。br 标签常用来输出空行\n`HTML5 <button> 标签`\nbutton 标签定义按钮。您可以在 button 标签内放置内容，比如文本或图像。但是在 form 中通常使用 input 标签创建按钮。\n`HTML5 <caption> 标签`\ncaption 标签定义表格的标题。caption 标签必须直接放置到 table 标签之后。通常标题会居中显示在表格上方。\n`HTML5 <center> 标签`\nHTML5 中不支持该 center 标签。请使用 CSS 代替。\n`HTML5 <cite> 标签`\ncite 标签定义作品（比如书籍、歌曲、电影、电视节目、绘画、雕塑等等）的标题，通常斜体显示。\n`HTML5 <code> 标签`\nem,strong,dfn,code,samp,kbd,var,cite 标签常用来格式话文本，使用 css 样式表可以显示更丰富的效果。\n`HTML5 <col> 标签`\ncol 标签为表格中的一个或多个列定义属性值。通过使用 col 标签，可以向整个列应用样式，而不需要重复为每个单元格或每一行设置样式。\n`HTML5 <colgroup> 标签`\n通过使用 colgroup 标签，可以向整个列应用样式，而不需要重复为每个单元格或每一行设置样式。只能在 table 元素内使用 colgroup 标签。\n`HTML5 <command> 标签`\ncommand 元素表示用户能够调用的命令。可以用它规定键盘快捷键。只有当 command 元素位于 menu 元素内时，该元素才是可见的。\n`HTML5 <datalist> 标签`\ndatalist 标签定义选项列表。请与 input 元素配合使用该元素，来定义 input 可能的值。\n`HTML5 <dd> 标签`\ndd 标签定义一个定义列表中对项目的描述。dt 标签定义列表中的项目，而 dd> 标签描述这些项目。\n`HTML5 <del> 标签`\ndel 标签定义文档中已删除的文本。与 ins 标签一起使用，描述文档中的更新和修正。\n`HTML5 <details> 标签`\ndetails 标签是 HTML 5 中的新标签。details 标签用于描述文档或文档某个部分的细节。目前只有 Chrome 支持 details 标签。\n`HTML5 <dfn> 标签`\n`HTML5 <dir> 标签`\nHTML5 中不支持 dir 标签。请用 CSS 代替。\n`HTML5 <div> 标签`\ndiv 标签常用于组合块级元素，以便通过样式表来对这些元素进行格式化。通常使用 div + css 对网页进行布局。\n`HTML5 <dl> 标签`\ndl 标签定义一个定义列表。dl 标签内部使用 dd 和 dt 定义列表中的项目。\n`HTML5 <dt> 标签`\ndt 标签定义一个定义列表中的一个项目。dd 标签描述这些项目。\n`HTML5 <em> 标签`\n`HTML5 <embed> 标签`\nembed 标签是 HTML 5 中的新标签。embed 标签定义嵌入的内容，比如插件。\n`HTML5 <fieldset> 标签`\nfieldset 标签会在相关表单元素周围绘制边框。fieldset 标签会在相关表单元素周围绘制边框。\n`HTML5 <figcaption> 标签`\nfigcaption 标签是 HTML 5 中的新标签。figcaption 标签定义 figure 元素的标题（caption）。\n`HTML5 <figure> 标签`\nfigure 标签是 HTML 5 中的新标签。figure 标签规定独立的流内容（图像、图表、照片、代码等等）。\n`HTML5 <font> 标签`\n定义和用法 在 HTML 5 中，不支持 font 标签。请用 CSS 代替它。 font 标签规定文本的字体、大小和颜色。\n`HTML5 <footer> 标签`\nfooter 标签是 HTML 5 中的新标签。footer 标签定义 section 或 document 的页脚。\n`HTML5 <form> 标签`\nform 标签标签用于创建供用户输入的 HTML 表单。form 标签包含多个表单元素，如：button,input,keygen,object,output,select,textarea\n`HTML5 <frame> 标签`\n定义和用法 在 HTML 5 中不支持 frame 标签。 frame 标签定义框架集中的子窗口（框架）。 由于该标签对网页可用性的负面影响，在 HTML 5 中 frame 和 frameset 标签没有得到支持。\n`HTML5 <frameset> 标签`\n定义和用法 在 HTML 5 中不支持 frameset 标签。 frameset 标签定义框架集。它用于组织多个窗口（框架）。 由于该标签对网页可用性的负面影响，在 HTML 5 中 frame 和 frameset 标签没有得到支持。\n`HTML5 <h1 - h6> 标签`\nh1,h2,h3,h4,h5,h6 标签用来定义文档中的标题。h1 定义最大的标题。h6 定义最小的标题。\n`HTML5 <head> 标签`\nhead 标签是所有头部元素的容器。位于 head 内部的元素可以包含 title,base,link,meta,script,style等。\n`HTML5 <header> 标签`\nheader 标签是 HTML 5 中的新标签。header 标签定义文档的页眉（介绍信息）。\n`HTML5 <hgroup> 标签`\nhgroup 标签是 HTML 5 中的新标签。hgroup 标签用于对网页或区段（section）的标题进行组合。\n`HTML5 <hr> 标签`\n在 HTML 5 中，hr 标签定义内容中的主题变化，并显示为一条水平线。在 HTML 4.01 中，hr 标签仅仅显示为一条水平线。\n`HTML5 <html> 标签`\nhtml 标签告知浏览器这是一个 HTML 文档。html 元素是 HTML 文档中最外层的根元素。\n`HTML5 <i> 标签`\ni 标签定义的文本在 html 文档中呈现为斜体，以便与文档中其余部分区别开来。\n`HTML5 <iframe> 标签`\niframe 标签创建包含另一个文档的行内框架。在 HTML 5 中，仅仅支持 src 属性。\n`HTML5 <img> 标签`\nimg 标签定义 HTML 页面中的图像。img 标签定义 HTML 页面中的图像。img 标签定义 HTML 页面中的图像。\n`HTML5 <input> 标签`\ninput 标签规定 form 表单中用户可输入数据的输入字段。根据不同的 type 属性，输入字段可以是文本字段、复选框、密码字段、单选按钮、按钮等。\n`HTML5 <ins> 标签`\nins 标签定义文档的其余部分之外的插入文本。通常能够与 del 标签一起使用，来描述对文档的更新和修正。\n`HTML5 <keygen> 标签`\nkeygen 是 HTML5 中的新元素。keygen 标签规定用于表单的密钥对生成器字段。当提交表单时，私钥存储在本地，公钥发送到服务器。\n`HTML5 <kbd> 标签`\n`HTML5 <label> 标签`\nlabel 标签为 input 元素定义文字标识，label 标签的 for 属性应该等于相关元素的 id 元素，以便将它们捆绑起来。\n`HTML5 <legend> 标签`\nlegend 元素为以下元素定义标题（caption）：fieldset、figure、details 。 legend 元素为以下元素定义标题（caption）：fieldset、figure>、details。\n`HTML5 <li> 标签`\nli 标签定义列表项，有序列表 ol 和无序列表 ul 中都使用 li 标签。 HTML 5 中，li 标签不再支持 type 属性。\n`HTML5 <link> 标签`\nlink 标签定义文档与外部资源之间的关系。link 标签大多数时候都用来连接 css 样式表。link 标签只能位于head 标签中。\n`HTML5 <map> 标签`\nmap 标签用于定义图像中可点击的热点区域。map 标签的 name 属性与 img 标签的 usemap 属性相关联，以创建图像与映射之间的关系\n`HTML5 <mark> 标签`\nmark 标签是 HTML 5 中的新标签。mark 标签定义带有记号的文本。请在需要突出显示文本时使用 mark 标签。\n`HTML5 <menu> 标签`\nmenu 标签定义菜单列表。当希望列出表单控件时使用该标签。在 HTML 5 中，重新定义了 menu 元素，且使用用于排列表单控件。\n`HTML5 <meta> 标签`\nmeta 标签位于文档的头部 head 标签中，meta 标签的属性用来定义有关页面的元信息，比如 字符集，关键词，描述，重定向等。\n`HTML5 <meter> 标签`\nmeter 标签是 HTML 5 中的新标签。meter 标签定义度量的范围，既可以在元素的文本中，也可以在 min/max 属性中定义。\n`HTML5 <nav> 标签`\nnav 标签是 HTML 5 中的新标签。nav 标签定义导航链接的部分。\n`HTML5 <noframes> 标签`\n定义和用法 在 HTML 5 中不支持 noframes 标签。 noframes 标签向浏览器显示无法处理框架的提示文本。\n`HTML5` <noscript> 标签\nnoscript 元素用来定义在脚本未被执行时的替代内容（文本）。此标签用于可识别 script 标签但无法支持其中脚本的浏览器。\n`HTML5 <object> 标签`\nobject 定义一个嵌入的对象。请使用此元素向您的 HTML5 页面添加多媒体。\n`HTML5 <ol> 标签`\nol 标签定义有序列表。在 HTML 5 中，不再支持 compact 和 type 这两个属性\n`HTML5 <optgroup> 标签`\noptgroup 标签定义选项组。此元素允许您组合选项。当您使用一个长的选项列表时，对相关的选项进行组合会使处理更加容易。\n`HTML5 <option> 标签`\noption 标签定义下拉列表中的一个选项。在 HTML 5 中，option 标签也用于新元素 datalist 中。\n`HTML5 <output> 标签`\noutput 标签是 HTML 5 中的新标签。output 标签定义不同类型的输出，比如脚本的输出。\n`HTML5 <p> 标签`\np 标签定义段落。在 HTML 5 中不再支持 p 标签的 align 属性。\n`HTML5 <param> 标签`\nparam 标签允许您为插入 XHTML 文档的对象规定 run-time 设置，也就是说，此标签可为包含它的 object 标签提供参数。\n`HTML5 <pre> 标签`\npre 标签可定义预格式化的文本。pre 标签的一个常见应用就是用来表示计算机的源代码。\n`HTML5 <progress> 标签`\nprogress 标签是 HTML 5 中的新标签。progress 标签定义运行中的进度（进程）。\n`HTML5 <q> 标签`\nq 标签定义一个短的引用。浏览器经常会在这种引用的周围插入引号。\n`HTML5 <rp> 标签`\nrp 标签是 HTML 5 的新标签。rp 标签在 ruby 注释中使用，以定义不支持 ruby 元素的浏览器所显示的内容。\n`HTML5 <ruby> 标签`\nruby 标签是 HTML 5 的新标签。ruby 标签定义 ruby 注释（中文注音或字符）。\n`HTML5 <s> 标签`\ns 标签定义加删除线的文本。HTML 5 中不再支持 s 标签。\n`HTML5 <samp> 标签`\n`HTML5 <script> 标签`\nscript 标签用于定义客户端脚本，比如 JavaScript。script 元素既可包含脚本语句，也可以通过 src 属性指向外部脚本文件。\n`HTML5 <select> 标签`\nselect 标签创建下拉列表。请在 form 元素中使用此标签来接受用户的输入\n`HTML5 <small> 标签`\n在 HTML5 中，small 元素定义旁注信息，并显示为更小的文本。对于由 em 元素强调过的或由 strong 元素标记为重要的文本，small 元素不会取消对文本的强调，也不会降低这些文本的重要性。\n`HTML5 <source> 标签`\nsource 标签是 HTML 5 中的新标签。source 标签为媒介元素（比如 video 和 audio）定义媒介资源。\n`HTML5 <span> 标签`\nspan 标签用于对文档中的行内元素进行组合,以便通过样式表 css 对它们进行格式化。\n`HTML5 <strike> 标签`\n定义和用法 在 HTML 5 中不支持 strike 标签。请使用 CSS 代替。 strike 标签定义加删除线的文本。请使用 del 标签代替。\n`HTML5 <strong> 标签`\n`HTML5 <style> 标签`\nstyle 标签定义 HTML 文档的样式信息。scoped 属性是 HTML 5 中的新属性，它允许我们为文档的指定部分定义样式，而不是整个文档。\n`HTML5 <sub> 标签`\nsub 标签可定义下标文本。sup 可定义上标文本。\n`HTML5 <summary> 标签`\nsummary 标签是 HTML 5 中的新标签。是 details 元素的第一个子元素，定义 details 元素的标题。\n`HTML5 <sup> 标签`\n`HTML5 <table> 标签`\ntable 标签定义 HTML 表格。一个简单的 HTML 表格包括 table 元素，一个或多个 tr、th 以及 td 元素。\n`HTML5 <tbody> 标签`\n使用 tbody 标签，可以将表格分为一个单独的部分。tbody 标签可将表格中的一行或几行合成一组。在 HTML 5 中，不支持 tbody 标签的任何属性。\n`HTML5 <td> 标签`\ntd 标签定义 HTML 表格中的标准单元格。thead 元素中只能使用 th 标签按，不允许使用 td 标签。\n`HTML5 <textarea> 标签`\ntextarea 定义一个多行的文本输入区域。文本区中的默认字体是等宽字体 (fixed pitch)。\n`HTML5 <tfoot> 标签`\ntfoot 定义表格的页脚（脚注），tfoot 内部必须拥有 tr 标签！tfoot 表亲必须位于 table 标签内。\n`HTML5 <th> 标签`\nth 标签定义 HTML 表格中的表头单元格。th 元素中的文本呈现为粗体并且居中。th 标签在 tr 标签中定义。\n`HTML5 <thead> 标签`\nthead 标签在 table 标签中使用，定义表格的表头。thead 内部必须拥有 tr 标签！\n`HTML5 <time> 标签`\ntime 标签是 HTML 5 中的新标签。time 标签定义公历的时间（24 小时制）或日期，时间和时区偏移是可选的。\n`HTML5 <title> 标签`\ntitle 位于 head 部分，用来定义文档的标题。title 元素在所有 HTML 文档中是必需且唯一的。\n`HTML5 <tr> 标签`\ntr 标签定义表格中的行，一个 tr 元素包含一个或多个 td 或 th 标签。\n`HTML5 <track> 标签`\ntrack 标签是 HTML 5 中的新标签。track 标签为诸如 video 元素之类的媒介规定外部字幕文件或其他包含的文版文件。\n`HTML5 <tt> 标签`\n定义和用法 在 HTML 5 中不支持 tt 标签。 tt 标签定义打字机文本。\n`HTML5 <u> 标签`\n在 HTML 5 中不支持 u 标签\n`HTML5 <ul> 标签`\nul 标签定义无序列表。请使用 CSS 来定义列表的显示样式。\n`HTML5 <var> 标签`\n`HTML5 <video> 标签`\nvideo 标签是 HTML 5 的新标签。video 标签定义视频，比如电影片段或其他视频流。\n`HTML5 <wbr> 标签`\nwbr 标签是 HTML 5 中的新标签。wbr 规定在文本中的何处适合添加换行符。\n`HTML5 <rt> 标签`\n定义和用法 rt 标签定义字符（中文注音或字符）的解释或发音。 ruby 注释是中文注音或字符。 在东亚使用，显示的是东亚字符的发音。 与 ruby 以及 rt 标签一同使用： ruby 元素由一个或多个字符（需要一个解释/发音）和一个提供该信息的 rt 元素组成，还包括可选的 rp 元素，定义当浏览器不支持 ruby 元素时显示的内容。 实例 一个 ruby 注释： ruby漢 rt ㄏㄢˋ /rt/ruby HTML 4.01 与 HTML 5 之间的差异 rt 标签是 HTML 5 的新标\n`HTML5 <section> 标签`\nsection 标签是 HTML 5 中的新标签。section 标签定义文档中的节（section、区段）。比如章节、页眉、页脚或文档中的其他部分。\n","slug":"标签列表","published":1,"updated":"2017-04-10T10:29:57.000Z","comments":1,"photos":[],"link":"","_id":"cj5naxw5a001pfcxe3omb601l","content":"<p><code>HTML5 &lt;article&gt; 标签</code><br>article 标签是 HTML 5 的新标签, article 标签的内容独立于文档的其余部分。<br><code>HTML5 &lt;canvas&gt; 标签</code><br>html5 canvas 标签定义图形，比如图表和其他图像。canvas 标签只是图形容器，您必须使用脚本来绘制图形。<br><a id=\"more\"></a><br><code>HTML5 &lt;!--...--&gt; 标签</code><br>comment 注释标签用于在源文档中插入注释。注释内容不会被浏览器显示。为代码编写注释的好处是，有助于增强代码的可读性。<br><code>HTML5 &lt;!DOCTYPE&gt; 标签</code><br>!DOCTYPE 文档声明必须位于 HTML5 文档中的第一行，也就是位于 html 标签之前。该标签告知浏览器文档所使用的 HTML 规范。<br><code>HTML5 &lt;a&gt; 标签</code><br>html5 a 标签定义超链接，用于从一个页面链接到另一个页面。a 标签最重要的属性是 href 属性，它指定链接的目标 url 。<br><code>HTML5 &lt;abbr&gt; 标签</code><br>abbr 标签最初是在 HTML 4.0 中引入的，表示它所包含的文本是一个更长的单词或短语的缩写形式。<br><code>HTML5 &lt;address&gt; 标签</code><br>address 标签定义文档作者或拥有者的联系信息。通常的做法是将 address 元素添加到网页的头部或底部。<br><code>HTML5 &lt;applet&gt; 标签</code><br>定义和用法 applet 定义嵌入的 applet。 HTML 5 中不支持 applet 标签 请使用 object 标签代替它。<br><code>HTML5 &lt;acronym&gt; 标签</code><br>定义和用法 HTML 5 不支持 acronym 标签。 请使用 abbr 标签代替它。 在 HTML 4.01 中，acronym 标签定义首字母缩略词。 如果首字母缩略词是一个单词，则可以被读出来，例如 NATO、NASA、ASAP、GUI。<br><code>HTML5 &lt;area&gt; 标签</code><br>area 元素始终嵌套在 map 标签内部。area 标签定义图像映射内部的区域（图像映射指的是带有可点击区域的图像）。<br><code>HTML5 &lt;aside&gt; 标签</code><br>html5 aside 标签定义其所处内容之外的内容。aside 标签的内容应该与附近的内容相关。<br><code>HTML5 &lt;audio&gt; 标签</code><br>audio 标签是 HTML 5 的新标签, audio 标签想网页中插入声音，比如音乐或其他音频流。<br><code>HTML5 &lt;b&gt; 标签</code><br>html5 b 标签定义粗体的文本。b 标签用于强调某些文本。如果您希望把文本标记为相比其他文本更为重要，应该使用 strong 标签。<br><code>HTML5 &lt;base&gt; 标签</code><br>base 标签为页面上的所有链接规定默认地址或默认目标。base 标签必须位于 head 元素内部。<br><code>HTML5 &lt;basefont&gt; 标签</code><br>HTML5 中不支持 basefont 标签。请用 CSS 代替。<br><code>HTML5 &lt;bdi&gt; 标签</code><br>bdi 标签是 HTML5 中的新标签。bdi 标签允许您设置一段文本，使其脱离其父元素的文本方向设置。<br><code>HTML5 &lt;bdo&gt; 标签</code><br>bdo 标签覆盖默认的文本方向。通过设置 dir 属性来设置文本的显示方向。<br><code>HTML5 &lt;big&gt; 标签</code><br>HTML5 中不支持 big 标签。请用 CSS 代替<br><code>HTML5 &lt;blockquote&gt; 标签</code><br>blockquote 标签之间的所有文本都会从常规文本中分离出来，经常会在左、右两边进行缩进，而且有时会使用斜体。<br><code>HTML5 &lt;body&gt; 标签</code><br>body 标签定义文档的主体。 body 标签包含文档的所有内容，比如文本、超链接、图像、表格、列表等。在 HTML 5 中，删除了所有 的特殊属性。<br><code>HTML5 &lt;br&gt; 标签</code><br>br 标签插入简单的换行符。br 标签是一个空标签，意味着它没有结束标签。br 标签常用来输出空行<br><code>HTML5 &lt;button&gt; 标签</code><br>button 标签定义按钮。您可以在 button 标签内放置内容，比如文本或图像。但是在 form 中通常使用 input 标签创建按钮。<br><code>HTML5 &lt;caption&gt; 标签</code><br>caption 标签定义表格的标题。caption 标签必须直接放置到 table 标签之后。通常标题会居中显示在表格上方。<br><code>HTML5 &lt;center&gt; 标签</code><br>HTML5 中不支持该 center 标签。请使用 CSS 代替。<br><code>HTML5 &lt;cite&gt; 标签</code><br>cite 标签定义作品（比如书籍、歌曲、电影、电视节目、绘画、雕塑等等）的标题，通常斜体显示。<br><code>HTML5 &lt;code&gt; 标签</code><br>em,strong,dfn,code,samp,kbd,var,cite 标签常用来格式话文本，使用 css 样式表可以显示更丰富的效果。<br><code>HTML5 &lt;col&gt; 标签</code><br>col 标签为表格中的一个或多个列定义属性值。通过使用 col 标签，可以向整个列应用样式，而不需要重复为每个单元格或每一行设置样式。<br><code>HTML5 &lt;colgroup&gt; 标签</code><br>通过使用 colgroup 标签，可以向整个列应用样式，而不需要重复为每个单元格或每一行设置样式。只能在 table 元素内使用 colgroup 标签。<br><code>HTML5 &lt;command&gt; 标签</code><br>command 元素表示用户能够调用的命令。可以用它规定键盘快捷键。只有当 command 元素位于 menu 元素内时，该元素才是可见的。<br><code>HTML5 &lt;datalist&gt; 标签</code><br>datalist 标签定义选项列表。请与 input 元素配合使用该元素，来定义 input 可能的值。<br><code>HTML5 &lt;dd&gt; 标签</code><br>dd 标签定义一个定义列表中对项目的描述。dt 标签定义列表中的项目，而 dd&gt; 标签描述这些项目。<br><code>HTML5 &lt;del&gt; 标签</code><br>del 标签定义文档中已删除的文本。与 ins 标签一起使用，描述文档中的更新和修正。<br><code>HTML5 &lt;details&gt; 标签</code><br>details 标签是 HTML 5 中的新标签。details 标签用于描述文档或文档某个部分的细节。目前只有 Chrome 支持 details 标签。<br><code>HTML5 &lt;dfn&gt; 标签</code><br><code>HTML5 &lt;dir&gt; 标签</code><br>HTML5 中不支持 dir 标签。请用 CSS 代替。<br><code>HTML5 &lt;div&gt; 标签</code><br>div 标签常用于组合块级元素，以便通过样式表来对这些元素进行格式化。通常使用 div + css 对网页进行布局。<br><code>HTML5 &lt;dl&gt; 标签</code><br>dl 标签定义一个定义列表。dl 标签内部使用 dd 和 dt 定义列表中的项目。<br><code>HTML5 &lt;dt&gt; 标签</code><br>dt 标签定义一个定义列表中的一个项目。dd 标签描述这些项目。<br><code>HTML5 &lt;em&gt; 标签</code><br><code>HTML5 &lt;embed&gt; 标签</code><br>embed 标签是 HTML 5 中的新标签。embed 标签定义嵌入的内容，比如插件。<br><code>HTML5 &lt;fieldset&gt; 标签</code><br>fieldset 标签会在相关表单元素周围绘制边框。fieldset 标签会在相关表单元素周围绘制边框。<br><code>HTML5 &lt;figcaption&gt; 标签</code><br>figcaption 标签是 HTML 5 中的新标签。figcaption 标签定义 figure 元素的标题（caption）。<br><code>HTML5 &lt;figure&gt; 标签</code><br>figure 标签是 HTML 5 中的新标签。figure 标签规定独立的流内容（图像、图表、照片、代码等等）。<br><code>HTML5 &lt;font&gt; 标签</code><br>定义和用法 在 HTML 5 中，不支持 font 标签。请用 CSS 代替它。 font 标签规定文本的字体、大小和颜色。<br><code>HTML5 &lt;footer&gt; 标签</code><br>footer 标签是 HTML 5 中的新标签。footer 标签定义 section 或 document 的页脚。<br><code>HTML5 &lt;form&gt; 标签</code><br>form 标签标签用于创建供用户输入的 HTML 表单。form 标签包含多个表单元素，如：button,input,keygen,object,output,select,textarea<br><code>HTML5 &lt;frame&gt; 标签</code><br>定义和用法 在 HTML 5 中不支持 frame 标签。 frame 标签定义框架集中的子窗口（框架）。 由于该标签对网页可用性的负面影响，在 HTML 5 中 frame 和 frameset 标签没有得到支持。<br><code>HTML5 &lt;frameset&gt; 标签</code><br>定义和用法 在 HTML 5 中不支持 frameset 标签。 frameset 标签定义框架集。它用于组织多个窗口（框架）。 由于该标签对网页可用性的负面影响，在 HTML 5 中 frame 和 frameset 标签没有得到支持。<br><code>HTML5 &lt;h1 - h6&gt; 标签</code><br>h1,h2,h3,h4,h5,h6 标签用来定义文档中的标题。h1 定义最大的标题。h6 定义最小的标题。<br><code>HTML5 &lt;head&gt; 标签</code><br>head 标签是所有头部元素的容器。位于 head 内部的元素可以包含 title,base,link,meta,script,style等。<br><code>HTML5 &lt;header&gt; 标签</code><br>header 标签是 HTML 5 中的新标签。header 标签定义文档的页眉（介绍信息）。<br><code>HTML5 &lt;hgroup&gt; 标签</code><br>hgroup 标签是 HTML 5 中的新标签。hgroup 标签用于对网页或区段（section）的标题进行组合。<br><code>HTML5 &lt;hr&gt; 标签</code><br>在 HTML 5 中，hr 标签定义内容中的主题变化，并显示为一条水平线。在 HTML 4.01 中，hr 标签仅仅显示为一条水平线。<br><code>HTML5 &lt;html&gt; 标签</code><br>html 标签告知浏览器这是一个 HTML 文档。html 元素是 HTML 文档中最外层的根元素。<br><code>HTML5 &lt;i&gt; 标签</code><br>i 标签定义的文本在 html 文档中呈现为斜体，以便与文档中其余部分区别开来。<br><code>HTML5 &lt;iframe&gt; 标签</code><br>iframe 标签创建包含另一个文档的行内框架。在 HTML 5 中，仅仅支持 src 属性。<br><code>HTML5 &lt;img&gt; 标签</code><br>img 标签定义 HTML 页面中的图像。img 标签定义 HTML 页面中的图像。img 标签定义 HTML 页面中的图像。<br><code>HTML5 &lt;input&gt; 标签</code><br>input 标签规定 form 表单中用户可输入数据的输入字段。根据不同的 type 属性，输入字段可以是文本字段、复选框、密码字段、单选按钮、按钮等。<br><code>HTML5 &lt;ins&gt; 标签</code><br>ins 标签定义文档的其余部分之外的插入文本。通常能够与 del 标签一起使用，来描述对文档的更新和修正。<br><code>HTML5 &lt;keygen&gt; 标签</code><br>keygen 是 HTML5 中的新元素。keygen 标签规定用于表单的密钥对生成器字段。当提交表单时，私钥存储在本地，公钥发送到服务器。<br><code>HTML5 &lt;kbd&gt; 标签</code><br><code>HTML5 &lt;label&gt; 标签</code><br>label 标签为 input 元素定义文字标识，label 标签的 for 属性应该等于相关元素的 id 元素，以便将它们捆绑起来。<br><code>HTML5 &lt;legend&gt; 标签</code><br>legend 元素为以下元素定义标题（caption）：fieldset、figure、details 。 legend 元素为以下元素定义标题（caption）：fieldset、figure&gt;、details。<br><code>HTML5 &lt;li&gt; 标签</code><br>li 标签定义列表项，有序列表 ol 和无序列表 ul 中都使用 li 标签。 HTML 5 中，li 标签不再支持 type 属性。<br><code>HTML5 &lt;link&gt; 标签</code><br>link 标签定义文档与外部资源之间的关系。link 标签大多数时候都用来连接 css 样式表。link 标签只能位于head 标签中。<br><code>HTML5 &lt;map&gt; 标签</code><br>map 标签用于定义图像中可点击的热点区域。map 标签的 name 属性与 img 标签的 usemap 属性相关联，以创建图像与映射之间的关系<br><code>HTML5 &lt;mark&gt; 标签</code><br>mark 标签是 HTML 5 中的新标签。mark 标签定义带有记号的文本。请在需要突出显示文本时使用 mark 标签。<br><code>HTML5 &lt;menu&gt; 标签</code><br>menu 标签定义菜单列表。当希望列出表单控件时使用该标签。在 HTML 5 中，重新定义了 menu 元素，且使用用于排列表单控件。<br><code>HTML5 &lt;meta&gt; 标签</code><br>meta 标签位于文档的头部 head 标签中，meta 标签的属性用来定义有关页面的元信息，比如 字符集，关键词，描述，重定向等。<br><code>HTML5 &lt;meter&gt; 标签</code><br>meter 标签是 HTML 5 中的新标签。meter 标签定义度量的范围，既可以在元素的文本中，也可以在 min/max 属性中定义。<br><code>HTML5 &lt;nav&gt; 标签</code><br>nav 标签是 HTML 5 中的新标签。nav 标签定义导航链接的部分。<br><code>HTML5 &lt;noframes&gt; 标签</code><br>定义和用法 在 HTML 5 中不支持 noframes 标签。 noframes 标签向浏览器显示无法处理框架的提示文本。<br><code>HTML5</code> <noscript> 标签<br>noscript 元素用来定义在脚本未被执行时的替代内容（文本）。此标签用于可识别 script 标签但无法支持其中脚本的浏览器。<br><code>HTML5 &lt;object&gt; 标签</code><br>object 定义一个嵌入的对象。请使用此元素向您的 HTML5 页面添加多媒体。<br><code>HTML5 &lt;ol&gt; 标签</code><br>ol 标签定义有序列表。在 HTML 5 中，不再支持 compact 和 type 这两个属性<br><code>HTML5 &lt;optgroup&gt; 标签</code><br>optgroup 标签定义选项组。此元素允许您组合选项。当您使用一个长的选项列表时，对相关的选项进行组合会使处理更加容易。<br><code>HTML5 &lt;option&gt; 标签</code><br>option 标签定义下拉列表中的一个选项。在 HTML 5 中，option 标签也用于新元素 datalist 中。<br><code>HTML5 &lt;output&gt; 标签</code><br>output 标签是 HTML 5 中的新标签。output 标签定义不同类型的输出，比如脚本的输出。<br><code>HTML5 &lt;p&gt; 标签</code><br>p 标签定义段落。在 HTML 5 中不再支持 p 标签的 align 属性。<br><code>HTML5 &lt;param&gt; 标签</code><br>param 标签允许您为插入 XHTML 文档的对象规定 run-time 设置，也就是说，此标签可为包含它的 object 标签提供参数。<br><code>HTML5 &lt;pre&gt; 标签</code><br>pre 标签可定义预格式化的文本。pre 标签的一个常见应用就是用来表示计算机的源代码。<br><code>HTML5 &lt;progress&gt; 标签</code><br>progress 标签是 HTML 5 中的新标签。progress 标签定义运行中的进度（进程）。<br><code>HTML5 &lt;q&gt; 标签</code><br>q 标签定义一个短的引用。浏览器经常会在这种引用的周围插入引号。<br><code>HTML5 &lt;rp&gt; 标签</code><br>rp 标签是 HTML 5 的新标签。rp 标签在 ruby 注释中使用，以定义不支持 ruby 元素的浏览器所显示的内容。<br><code>HTML5 &lt;ruby&gt; 标签</code><br>ruby 标签是 HTML 5 的新标签。ruby 标签定义 ruby 注释（中文注音或字符）。<br><code>HTML5 &lt;s&gt; 标签</code><br>s 标签定义加删除线的文本。HTML 5 中不再支持 s 标签。<br><code>HTML5 &lt;samp&gt; 标签</code><br><code>HTML5 &lt;script&gt; 标签</code><br>script 标签用于定义客户端脚本，比如 JavaScript。script 元素既可包含脚本语句，也可以通过 src 属性指向外部脚本文件。<br><code>HTML5 &lt;select&gt; 标签</code><br>select 标签创建下拉列表。请在 form 元素中使用此标签来接受用户的输入<br><code>HTML5 &lt;small&gt; 标签</code><br>在 HTML5 中，small 元素定义旁注信息，并显示为更小的文本。对于由 em 元素强调过的或由 strong 元素标记为重要的文本，small 元素不会取消对文本的强调，也不会降低这些文本的重要性。<br><code>HTML5 &lt;source&gt; 标签</code><br>source 标签是 HTML 5 中的新标签。source 标签为媒介元素（比如 video 和 audio）定义媒介资源。<br><code>HTML5 &lt;span&gt; 标签</code><br>span 标签用于对文档中的行内元素进行组合,以便通过样式表 css 对它们进行格式化。<br><code>HTML5 &lt;strike&gt; 标签</code><br>定义和用法 在 HTML 5 中不支持 strike 标签。请使用 CSS 代替。 strike 标签定义加删除线的文本。请使用 del 标签代替。<br><code>HTML5 &lt;strong&gt; 标签</code><br><code>HTML5 &lt;style&gt; 标签</code><br>style 标签定义 HTML 文档的样式信息。scoped 属性是 HTML 5 中的新属性，它允许我们为文档的指定部分定义样式，而不是整个文档。<br><code>HTML5 &lt;sub&gt; 标签</code><br>sub 标签可定义下标文本。sup 可定义上标文本。<br><code>HTML5 &lt;summary&gt; 标签</code><br>summary 标签是 HTML 5 中的新标签。是 details 元素的第一个子元素，定义 details 元素的标题。<br><code>HTML5 &lt;sup&gt; 标签</code><br><code>HTML5 &lt;table&gt; 标签</code><br>table 标签定义 HTML 表格。一个简单的 HTML 表格包括 table 元素，一个或多个 tr、th 以及 td 元素。<br><code>HTML5 &lt;tbody&gt; 标签</code><br>使用 tbody 标签，可以将表格分为一个单独的部分。tbody 标签可将表格中的一行或几行合成一组。在 HTML 5 中，不支持 tbody 标签的任何属性。<br><code>HTML5 &lt;td&gt; 标签</code><br>td 标签定义 HTML 表格中的标准单元格。thead 元素中只能使用 th 标签按，不允许使用 td 标签。<br><code>HTML5 &lt;textarea&gt; 标签</code><br>textarea 定义一个多行的文本输入区域。文本区中的默认字体是等宽字体 (fixed pitch)。<br><code>HTML5 &lt;tfoot&gt; 标签</code><br>tfoot 定义表格的页脚（脚注），tfoot 内部必须拥有 tr 标签！tfoot 表亲必须位于 table 标签内。<br><code>HTML5 &lt;th&gt; 标签</code><br>th 标签定义 HTML 表格中的表头单元格。th 元素中的文本呈现为粗体并且居中。th 标签在 tr 标签中定义。<br><code>HTML5 &lt;thead&gt; 标签</code><br>thead 标签在 table 标签中使用，定义表格的表头。thead 内部必须拥有 tr 标签！<br><code>HTML5 &lt;time&gt; 标签</code><br>time 标签是 HTML 5 中的新标签。time 标签定义公历的时间（24 小时制）或日期，时间和时区偏移是可选的。<br><code>HTML5 &lt;title&gt; 标签</code><br>title 位于 head 部分，用来定义文档的标题。title 元素在所有 HTML 文档中是必需且唯一的。<br><code>HTML5 &lt;tr&gt; 标签</code><br>tr 标签定义表格中的行，一个 tr 元素包含一个或多个 td 或 th 标签。<br><code>HTML5 &lt;track&gt; 标签</code><br>track 标签是 HTML 5 中的新标签。track 标签为诸如 video 元素之类的媒介规定外部字幕文件或其他包含的文版文件。<br><code>HTML5 &lt;tt&gt; 标签</code><br>定义和用法 在 HTML 5 中不支持 tt 标签。 tt 标签定义打字机文本。<br><code>HTML5 &lt;u&gt; 标签</code><br>在 HTML 5 中不支持 u 标签<br><code>HTML5 &lt;ul&gt; 标签</code><br>ul 标签定义无序列表。请使用 CSS 来定义列表的显示样式。<br><code>HTML5 &lt;var&gt; 标签</code><br><code>HTML5 &lt;video&gt; 标签</code><br>video 标签是 HTML 5 的新标签。video 标签定义视频，比如电影片段或其他视频流。<br><code>HTML5 &lt;wbr&gt; 标签</code><br>wbr 标签是 HTML 5 中的新标签。wbr 规定在文本中的何处适合添加换行符。<br><code>HTML5 &lt;rt&gt; 标签</code><br>定义和用法 rt 标签定义字符（中文注音或字符）的解释或发音。 ruby 注释是中文注音或字符。 在东亚使用，显示的是东亚字符的发音。 与 ruby 以及 rt 标签一同使用： ruby 元素由一个或多个字符（需要一个解释/发音）和一个提供该信息的 rt 元素组成，还包括可选的 rp 元素，定义当浏览器不支持 ruby 元素时显示的内容。 实例 一个 ruby 注释： ruby漢 rt ㄏㄢˋ /rt/ruby HTML 4.01 与 HTML 5 之间的差异 rt 标签是 HTML 5 的新标<br><code>HTML5 &lt;section&gt; 标签</code><br>section 标签是 HTML 5 中的新标签。section 标签定义文档中的节（section、区段）。比如章节、页眉、页脚或文档中的其他部分。</noscript></p>\n","excerpt":"<p><code>HTML5 &lt;article&gt; 标签</code><br>article 标签是 HTML 5 的新标签, article 标签的内容独立于文档的其余部分。<br><code>HTML5 &lt;canvas&gt; 标签</code><br>html5 canvas 标签定义图形，比如图表和其他图像。canvas 标签只是图形容器，您必须使用脚本来绘制图形。<br>","more":"<br><code>HTML5 &lt;!--...--&gt; 标签</code><br>comment 注释标签用于在源文档中插入注释。注释内容不会被浏览器显示。为代码编写注释的好处是，有助于增强代码的可读性。<br><code>HTML5 &lt;!DOCTYPE&gt; 标签</code><br>!DOCTYPE 文档声明必须位于 HTML5 文档中的第一行，也就是位于 html 标签之前。该标签告知浏览器文档所使用的 HTML 规范。<br><code>HTML5 &lt;a&gt; 标签</code><br>html5 a 标签定义超链接，用于从一个页面链接到另一个页面。a 标签最重要的属性是 href 属性，它指定链接的目标 url 。<br><code>HTML5 &lt;abbr&gt; 标签</code><br>abbr 标签最初是在 HTML 4.0 中引入的，表示它所包含的文本是一个更长的单词或短语的缩写形式。<br><code>HTML5 &lt;address&gt; 标签</code><br>address 标签定义文档作者或拥有者的联系信息。通常的做法是将 address 元素添加到网页的头部或底部。<br><code>HTML5 &lt;applet&gt; 标签</code><br>定义和用法 applet 定义嵌入的 applet。 HTML 5 中不支持 applet 标签 请使用 object 标签代替它。<br><code>HTML5 &lt;acronym&gt; 标签</code><br>定义和用法 HTML 5 不支持 acronym 标签。 请使用 abbr 标签代替它。 在 HTML 4.01 中，acronym 标签定义首字母缩略词。 如果首字母缩略词是一个单词，则可以被读出来，例如 NATO、NASA、ASAP、GUI。<br><code>HTML5 &lt;area&gt; 标签</code><br>area 元素始终嵌套在 map 标签内部。area 标签定义图像映射内部的区域（图像映射指的是带有可点击区域的图像）。<br><code>HTML5 &lt;aside&gt; 标签</code><br>html5 aside 标签定义其所处内容之外的内容。aside 标签的内容应该与附近的内容相关。<br><code>HTML5 &lt;audio&gt; 标签</code><br>audio 标签是 HTML 5 的新标签, audio 标签想网页中插入声音，比如音乐或其他音频流。<br><code>HTML5 &lt;b&gt; 标签</code><br>html5 b 标签定义粗体的文本。b 标签用于强调某些文本。如果您希望把文本标记为相比其他文本更为重要，应该使用 strong 标签。<br><code>HTML5 &lt;base&gt; 标签</code><br>base 标签为页面上的所有链接规定默认地址或默认目标。base 标签必须位于 head 元素内部。<br><code>HTML5 &lt;basefont&gt; 标签</code><br>HTML5 中不支持 basefont 标签。请用 CSS 代替。<br><code>HTML5 &lt;bdi&gt; 标签</code><br>bdi 标签是 HTML5 中的新标签。bdi 标签允许您设置一段文本，使其脱离其父元素的文本方向设置。<br><code>HTML5 &lt;bdo&gt; 标签</code><br>bdo 标签覆盖默认的文本方向。通过设置 dir 属性来设置文本的显示方向。<br><code>HTML5 &lt;big&gt; 标签</code><br>HTML5 中不支持 big 标签。请用 CSS 代替<br><code>HTML5 &lt;blockquote&gt; 标签</code><br>blockquote 标签之间的所有文本都会从常规文本中分离出来，经常会在左、右两边进行缩进，而且有时会使用斜体。<br><code>HTML5 &lt;body&gt; 标签</code><br>body 标签定义文档的主体。 body 标签包含文档的所有内容，比如文本、超链接、图像、表格、列表等。在 HTML 5 中，删除了所有 的特殊属性。<br><code>HTML5 &lt;br&gt; 标签</code><br>br 标签插入简单的换行符。br 标签是一个空标签，意味着它没有结束标签。br 标签常用来输出空行<br><code>HTML5 &lt;button&gt; 标签</code><br>button 标签定义按钮。您可以在 button 标签内放置内容，比如文本或图像。但是在 form 中通常使用 input 标签创建按钮。<br><code>HTML5 &lt;caption&gt; 标签</code><br>caption 标签定义表格的标题。caption 标签必须直接放置到 table 标签之后。通常标题会居中显示在表格上方。<br><code>HTML5 &lt;center&gt; 标签</code><br>HTML5 中不支持该 center 标签。请使用 CSS 代替。<br><code>HTML5 &lt;cite&gt; 标签</code><br>cite 标签定义作品（比如书籍、歌曲、电影、电视节目、绘画、雕塑等等）的标题，通常斜体显示。<br><code>HTML5 &lt;code&gt; 标签</code><br>em,strong,dfn,code,samp,kbd,var,cite 标签常用来格式话文本，使用 css 样式表可以显示更丰富的效果。<br><code>HTML5 &lt;col&gt; 标签</code><br>col 标签为表格中的一个或多个列定义属性值。通过使用 col 标签，可以向整个列应用样式，而不需要重复为每个单元格或每一行设置样式。<br><code>HTML5 &lt;colgroup&gt; 标签</code><br>通过使用 colgroup 标签，可以向整个列应用样式，而不需要重复为每个单元格或每一行设置样式。只能在 table 元素内使用 colgroup 标签。<br><code>HTML5 &lt;command&gt; 标签</code><br>command 元素表示用户能够调用的命令。可以用它规定键盘快捷键。只有当 command 元素位于 menu 元素内时，该元素才是可见的。<br><code>HTML5 &lt;datalist&gt; 标签</code><br>datalist 标签定义选项列表。请与 input 元素配合使用该元素，来定义 input 可能的值。<br><code>HTML5 &lt;dd&gt; 标签</code><br>dd 标签定义一个定义列表中对项目的描述。dt 标签定义列表中的项目，而 dd&gt; 标签描述这些项目。<br><code>HTML5 &lt;del&gt; 标签</code><br>del 标签定义文档中已删除的文本。与 ins 标签一起使用，描述文档中的更新和修正。<br><code>HTML5 &lt;details&gt; 标签</code><br>details 标签是 HTML 5 中的新标签。details 标签用于描述文档或文档某个部分的细节。目前只有 Chrome 支持 details 标签。<br><code>HTML5 &lt;dfn&gt; 标签</code><br><code>HTML5 &lt;dir&gt; 标签</code><br>HTML5 中不支持 dir 标签。请用 CSS 代替。<br><code>HTML5 &lt;div&gt; 标签</code><br>div 标签常用于组合块级元素，以便通过样式表来对这些元素进行格式化。通常使用 div + css 对网页进行布局。<br><code>HTML5 &lt;dl&gt; 标签</code><br>dl 标签定义一个定义列表。dl 标签内部使用 dd 和 dt 定义列表中的项目。<br><code>HTML5 &lt;dt&gt; 标签</code><br>dt 标签定义一个定义列表中的一个项目。dd 标签描述这些项目。<br><code>HTML5 &lt;em&gt; 标签</code><br><code>HTML5 &lt;embed&gt; 标签</code><br>embed 标签是 HTML 5 中的新标签。embed 标签定义嵌入的内容，比如插件。<br><code>HTML5 &lt;fieldset&gt; 标签</code><br>fieldset 标签会在相关表单元素周围绘制边框。fieldset 标签会在相关表单元素周围绘制边框。<br><code>HTML5 &lt;figcaption&gt; 标签</code><br>figcaption 标签是 HTML 5 中的新标签。figcaption 标签定义 figure 元素的标题（caption）。<br><code>HTML5 &lt;figure&gt; 标签</code><br>figure 标签是 HTML 5 中的新标签。figure 标签规定独立的流内容（图像、图表、照片、代码等等）。<br><code>HTML5 &lt;font&gt; 标签</code><br>定义和用法 在 HTML 5 中，不支持 font 标签。请用 CSS 代替它。 font 标签规定文本的字体、大小和颜色。<br><code>HTML5 &lt;footer&gt; 标签</code><br>footer 标签是 HTML 5 中的新标签。footer 标签定义 section 或 document 的页脚。<br><code>HTML5 &lt;form&gt; 标签</code><br>form 标签标签用于创建供用户输入的 HTML 表单。form 标签包含多个表单元素，如：button,input,keygen,object,output,select,textarea<br><code>HTML5 &lt;frame&gt; 标签</code><br>定义和用法 在 HTML 5 中不支持 frame 标签。 frame 标签定义框架集中的子窗口（框架）。 由于该标签对网页可用性的负面影响，在 HTML 5 中 frame 和 frameset 标签没有得到支持。<br><code>HTML5 &lt;frameset&gt; 标签</code><br>定义和用法 在 HTML 5 中不支持 frameset 标签。 frameset 标签定义框架集。它用于组织多个窗口（框架）。 由于该标签对网页可用性的负面影响，在 HTML 5 中 frame 和 frameset 标签没有得到支持。<br><code>HTML5 &lt;h1 - h6&gt; 标签</code><br>h1,h2,h3,h4,h5,h6 标签用来定义文档中的标题。h1 定义最大的标题。h6 定义最小的标题。<br><code>HTML5 &lt;head&gt; 标签</code><br>head 标签是所有头部元素的容器。位于 head 内部的元素可以包含 title,base,link,meta,script,style等。<br><code>HTML5 &lt;header&gt; 标签</code><br>header 标签是 HTML 5 中的新标签。header 标签定义文档的页眉（介绍信息）。<br><code>HTML5 &lt;hgroup&gt; 标签</code><br>hgroup 标签是 HTML 5 中的新标签。hgroup 标签用于对网页或区段（section）的标题进行组合。<br><code>HTML5 &lt;hr&gt; 标签</code><br>在 HTML 5 中，hr 标签定义内容中的主题变化，并显示为一条水平线。在 HTML 4.01 中，hr 标签仅仅显示为一条水平线。<br><code>HTML5 &lt;html&gt; 标签</code><br>html 标签告知浏览器这是一个 HTML 文档。html 元素是 HTML 文档中最外层的根元素。<br><code>HTML5 &lt;i&gt; 标签</code><br>i 标签定义的文本在 html 文档中呈现为斜体，以便与文档中其余部分区别开来。<br><code>HTML5 &lt;iframe&gt; 标签</code><br>iframe 标签创建包含另一个文档的行内框架。在 HTML 5 中，仅仅支持 src 属性。<br><code>HTML5 &lt;img&gt; 标签</code><br>img 标签定义 HTML 页面中的图像。img 标签定义 HTML 页面中的图像。img 标签定义 HTML 页面中的图像。<br><code>HTML5 &lt;input&gt; 标签</code><br>input 标签规定 form 表单中用户可输入数据的输入字段。根据不同的 type 属性，输入字段可以是文本字段、复选框、密码字段、单选按钮、按钮等。<br><code>HTML5 &lt;ins&gt; 标签</code><br>ins 标签定义文档的其余部分之外的插入文本。通常能够与 del 标签一起使用，来描述对文档的更新和修正。<br><code>HTML5 &lt;keygen&gt; 标签</code><br>keygen 是 HTML5 中的新元素。keygen 标签规定用于表单的密钥对生成器字段。当提交表单时，私钥存储在本地，公钥发送到服务器。<br><code>HTML5 &lt;kbd&gt; 标签</code><br><code>HTML5 &lt;label&gt; 标签</code><br>label 标签为 input 元素定义文字标识，label 标签的 for 属性应该等于相关元素的 id 元素，以便将它们捆绑起来。<br><code>HTML5 &lt;legend&gt; 标签</code><br>legend 元素为以下元素定义标题（caption）：fieldset、figure、details 。 legend 元素为以下元素定义标题（caption）：fieldset、figure&gt;、details。<br><code>HTML5 &lt;li&gt; 标签</code><br>li 标签定义列表项，有序列表 ol 和无序列表 ul 中都使用 li 标签。 HTML 5 中，li 标签不再支持 type 属性。<br><code>HTML5 &lt;link&gt; 标签</code><br>link 标签定义文档与外部资源之间的关系。link 标签大多数时候都用来连接 css 样式表。link 标签只能位于head 标签中。<br><code>HTML5 &lt;map&gt; 标签</code><br>map 标签用于定义图像中可点击的热点区域。map 标签的 name 属性与 img 标签的 usemap 属性相关联，以创建图像与映射之间的关系<br><code>HTML5 &lt;mark&gt; 标签</code><br>mark 标签是 HTML 5 中的新标签。mark 标签定义带有记号的文本。请在需要突出显示文本时使用 mark 标签。<br><code>HTML5 &lt;menu&gt; 标签</code><br>menu 标签定义菜单列表。当希望列出表单控件时使用该标签。在 HTML 5 中，重新定义了 menu 元素，且使用用于排列表单控件。<br><code>HTML5 &lt;meta&gt; 标签</code><br>meta 标签位于文档的头部 head 标签中，meta 标签的属性用来定义有关页面的元信息，比如 字符集，关键词，描述，重定向等。<br><code>HTML5 &lt;meter&gt; 标签</code><br>meter 标签是 HTML 5 中的新标签。meter 标签定义度量的范围，既可以在元素的文本中，也可以在 min/max 属性中定义。<br><code>HTML5 &lt;nav&gt; 标签</code><br>nav 标签是 HTML 5 中的新标签。nav 标签定义导航链接的部分。<br><code>HTML5 &lt;noframes&gt; 标签</code><br>定义和用法 在 HTML 5 中不支持 noframes 标签。 noframes 标签向浏览器显示无法处理框架的提示文本。<br><code>HTML5</code> <noscript> 标签<br>noscript 元素用来定义在脚本未被执行时的替代内容（文本）。此标签用于可识别 script 标签但无法支持其中脚本的浏览器。<br><code>HTML5 &lt;object&gt; 标签</code><br>object 定义一个嵌入的对象。请使用此元素向您的 HTML5 页面添加多媒体。<br><code>HTML5 &lt;ol&gt; 标签</code><br>ol 标签定义有序列表。在 HTML 5 中，不再支持 compact 和 type 这两个属性<br><code>HTML5 &lt;optgroup&gt; 标签</code><br>optgroup 标签定义选项组。此元素允许您组合选项。当您使用一个长的选项列表时，对相关的选项进行组合会使处理更加容易。<br><code>HTML5 &lt;option&gt; 标签</code><br>option 标签定义下拉列表中的一个选项。在 HTML 5 中，option 标签也用于新元素 datalist 中。<br><code>HTML5 &lt;output&gt; 标签</code><br>output 标签是 HTML 5 中的新标签。output 标签定义不同类型的输出，比如脚本的输出。<br><code>HTML5 &lt;p&gt; 标签</code><br>p 标签定义段落。在 HTML 5 中不再支持 p 标签的 align 属性。<br><code>HTML5 &lt;param&gt; 标签</code><br>param 标签允许您为插入 XHTML 文档的对象规定 run-time 设置，也就是说，此标签可为包含它的 object 标签提供参数。<br><code>HTML5 &lt;pre&gt; 标签</code><br>pre 标签可定义预格式化的文本。pre 标签的一个常见应用就是用来表示计算机的源代码。<br><code>HTML5 &lt;progress&gt; 标签</code><br>progress 标签是 HTML 5 中的新标签。progress 标签定义运行中的进度（进程）。<br><code>HTML5 &lt;q&gt; 标签</code><br>q 标签定义一个短的引用。浏览器经常会在这种引用的周围插入引号。<br><code>HTML5 &lt;rp&gt; 标签</code><br>rp 标签是 HTML 5 的新标签。rp 标签在 ruby 注释中使用，以定义不支持 ruby 元素的浏览器所显示的内容。<br><code>HTML5 &lt;ruby&gt; 标签</code><br>ruby 标签是 HTML 5 的新标签。ruby 标签定义 ruby 注释（中文注音或字符）。<br><code>HTML5 &lt;s&gt; 标签</code><br>s 标签定义加删除线的文本。HTML 5 中不再支持 s 标签。<br><code>HTML5 &lt;samp&gt; 标签</code><br><code>HTML5 &lt;script&gt; 标签</code><br>script 标签用于定义客户端脚本，比如 JavaScript。script 元素既可包含脚本语句，也可以通过 src 属性指向外部脚本文件。<br><code>HTML5 &lt;select&gt; 标签</code><br>select 标签创建下拉列表。请在 form 元素中使用此标签来接受用户的输入<br><code>HTML5 &lt;small&gt; 标签</code><br>在 HTML5 中，small 元素定义旁注信息，并显示为更小的文本。对于由 em 元素强调过的或由 strong 元素标记为重要的文本，small 元素不会取消对文本的强调，也不会降低这些文本的重要性。<br><code>HTML5 &lt;source&gt; 标签</code><br>source 标签是 HTML 5 中的新标签。source 标签为媒介元素（比如 video 和 audio）定义媒介资源。<br><code>HTML5 &lt;span&gt; 标签</code><br>span 标签用于对文档中的行内元素进行组合,以便通过样式表 css 对它们进行格式化。<br><code>HTML5 &lt;strike&gt; 标签</code><br>定义和用法 在 HTML 5 中不支持 strike 标签。请使用 CSS 代替。 strike 标签定义加删除线的文本。请使用 del 标签代替。<br><code>HTML5 &lt;strong&gt; 标签</code><br><code>HTML5 &lt;style&gt; 标签</code><br>style 标签定义 HTML 文档的样式信息。scoped 属性是 HTML 5 中的新属性，它允许我们为文档的指定部分定义样式，而不是整个文档。<br><code>HTML5 &lt;sub&gt; 标签</code><br>sub 标签可定义下标文本。sup 可定义上标文本。<br><code>HTML5 &lt;summary&gt; 标签</code><br>summary 标签是 HTML 5 中的新标签。是 details 元素的第一个子元素，定义 details 元素的标题。<br><code>HTML5 &lt;sup&gt; 标签</code><br><code>HTML5 &lt;table&gt; 标签</code><br>table 标签定义 HTML 表格。一个简单的 HTML 表格包括 table 元素，一个或多个 tr、th 以及 td 元素。<br><code>HTML5 &lt;tbody&gt; 标签</code><br>使用 tbody 标签，可以将表格分为一个单独的部分。tbody 标签可将表格中的一行或几行合成一组。在 HTML 5 中，不支持 tbody 标签的任何属性。<br><code>HTML5 &lt;td&gt; 标签</code><br>td 标签定义 HTML 表格中的标准单元格。thead 元素中只能使用 th 标签按，不允许使用 td 标签。<br><code>HTML5 &lt;textarea&gt; 标签</code><br>textarea 定义一个多行的文本输入区域。文本区中的默认字体是等宽字体 (fixed pitch)。<br><code>HTML5 &lt;tfoot&gt; 标签</code><br>tfoot 定义表格的页脚（脚注），tfoot 内部必须拥有 tr 标签！tfoot 表亲必须位于 table 标签内。<br><code>HTML5 &lt;th&gt; 标签</code><br>th 标签定义 HTML 表格中的表头单元格。th 元素中的文本呈现为粗体并且居中。th 标签在 tr 标签中定义。<br><code>HTML5 &lt;thead&gt; 标签</code><br>thead 标签在 table 标签中使用，定义表格的表头。thead 内部必须拥有 tr 标签！<br><code>HTML5 &lt;time&gt; 标签</code><br>time 标签是 HTML 5 中的新标签。time 标签定义公历的时间（24 小时制）或日期，时间和时区偏移是可选的。<br><code>HTML5 &lt;title&gt; 标签</code><br>title 位于 head 部分，用来定义文档的标题。title 元素在所有 HTML 文档中是必需且唯一的。<br><code>HTML5 &lt;tr&gt; 标签</code><br>tr 标签定义表格中的行，一个 tr 元素包含一个或多个 td 或 th 标签。<br><code>HTML5 &lt;track&gt; 标签</code><br>track 标签是 HTML 5 中的新标签。track 标签为诸如 video 元素之类的媒介规定外部字幕文件或其他包含的文版文件。<br><code>HTML5 &lt;tt&gt; 标签</code><br>定义和用法 在 HTML 5 中不支持 tt 标签。 tt 标签定义打字机文本。<br><code>HTML5 &lt;u&gt; 标签</code><br>在 HTML 5 中不支持 u 标签<br><code>HTML5 &lt;ul&gt; 标签</code><br>ul 标签定义无序列表。请使用 CSS 来定义列表的显示样式。<br><code>HTML5 &lt;var&gt; 标签</code><br><code>HTML5 &lt;video&gt; 标签</code><br>video 标签是 HTML 5 的新标签。video 标签定义视频，比如电影片段或其他视频流。<br><code>HTML5 &lt;wbr&gt; 标签</code><br>wbr 标签是 HTML 5 中的新标签。wbr 规定在文本中的何处适合添加换行符。<br><code>HTML5 &lt;rt&gt; 标签</code><br>定义和用法 rt 标签定义字符（中文注音或字符）的解释或发音。 ruby 注释是中文注音或字符。 在东亚使用，显示的是东亚字符的发音。 与 ruby 以及 rt 标签一同使用： ruby 元素由一个或多个字符（需要一个解释/发音）和一个提供该信息的 rt 元素组成，还包括可选的 rp 元素，定义当浏览器不支持 ruby 元素时显示的内容。 实例 一个 ruby 注释： ruby漢 rt ㄏㄢˋ /rt/ruby HTML 4.01 与 HTML 5 之间的差异 rt 标签是 HTML 5 的新标<br><code>HTML5 &lt;section&gt; 标签</code><br>section 标签是 HTML 5 中的新标签。section 标签定义文档中的节（section、区段）。比如章节、页眉、页脚或文档中的其他部分。</p>"},{"title":"正则","date":"2017-04-17T02:39:40.000Z","_content":"\n#### 1 . 校验密码强度\n\n密码的强度必须是包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间。\n\n^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,10}$\n#### 2. 校验中文\n\n字符串仅能是中文。\n\n^[\\u4e00-\\u9fa5]{0,}$\n<!--more-->\n#### 3. 由数字、26个英文字母或下划线组成的字符串\n\n^\\w+$\n#### 4. 校验E-Mail 地址\n\n同密码一样，下面是E-mail地址合规性的正则检查语句。\n\n[\\w!#$%&'*+/=?^_`{|}~-]+(?:\\.[\\w!#$%&'*+/=?^_`{|}~-]+)*@(?:[\\w](?:[\\w-]*[\\w])?\\.)+[\\w](?:[\\w-]*[\\w])?\n#### 5. 校验身份证号码\n\n下面是身份证号码的正则校验。15 或 18位。\n\n15位：\n\n^[1-9]\\d{7}((0\\d)|(1[0-2]))(([0|1|2]\\d)|3[0-1])\\d{3}$\n18位：\n\n^[1-9]\\d{5}[1-9]\\d{3}((0\\d)|(1[0-2]))(([0|1|2]\\d)|3[0-1])\\d{3}([0-9]|X)$\n#### 6. 校验日期\n\n“yyyy-mm-dd“ 格式的日期校验，已考虑平闰年。\n\n^(?:(?!0000)[0-9]{4}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1[0-9]|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[0-9]{2}(?:0[48]|[2468][048]|[13579][26])|(?:0[48]|[2468][048]|[13579][26])00)-02-29)$\n#### 7. 校验金额\n\n金额校验，精确到2位小数。\n\n^[0-9]+(.[0-9]{2})?$\n#### 8. 校验手机号\n\n下面是国内 13、15、18开头的手机号正则表达式。（可根据目前国内收集号扩展前两位开头号码）\n\n^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\\d{8}$\n#### 9. 判断IE的版本\n\nIE目前还没被完全取代，很多页面还是需要做版本兼容，下面是IE版本检查的表达式。\n\n^.*MSIE [5-8](?:\\.[0-9]+)?(?!.*Trident\\/[5-9]\\.0).*$\n#### 10. 校验IP-v4地址\n\nIP4 正则语句。\n\n\\b(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\b\n#### 11. 校验IP-v6地址\n\nIP6 正则语句。\n\n(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\n#### 12. 检查URL的前缀\n\n应用开发中很多时候需要区分请求是HTTPS还是HTTP，通过下面的表达式可以取出一个url的前缀然后再逻辑判断。\n\nif (!s.match(/^[a-zA-Z]+:\\/\\//))\n{\n    s = 'http://' + s;\n}\n#### 13. 提取URL链接\n\n下面的这个表达式可以筛选出一段文本中的URL。\n\n^(f|ht){1}(tp|tps):\\/\\/([\\w-]+\\.)+[\\w-]+(\\/[\\w- ./?%&=]*)?\n#### 14. 文件路径及扩展名校验\n\n验证windows下文件路径和扩展名（下面的例子中为.txt文件）\n\n^([a-zA-Z]\\:|\\\\)\\\\([^\\\\]+\\\\)*[^\\/:*?\"<>|]+\\.txt(l)?$\n#### 15. 提取Color Hex Codes\n\n有时需要抽取网页中的颜色代码，可以使用下面的表达式。\n\n^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$\n#### 16. 提取网页图片\n\n假若你想提取网页中所有图片信息，可以利用下面的表达式。\n\n\\< *[img][^\\\\>]*[src] *= *[\\\"\\']{0,1}([^\\\"\\'\\ >]*)\n#### 17. 提取页面超链接\n\n提取html中的超链接。\n\n(<a\\s*(?!.*\\brel=)[^>]*)(href=\"https?:\\/\\/)((?!(?:(?:www\\.)?'.implode('|(?:www\\.)?', $follow_list).'))[^\"]+)\"((?!.*\\brel=)[^>]*)(?:[^>]*)>\n#### 18. 查找CSS属性\n\n通过下面的表达式，可以搜索到相匹配的CSS属性。\n\n^\\s*[a-zA-Z\\-]+\\s*[:]{1}\\s[a-zA-Z0-9\\s.#]+[;]{1}\n#### 19. 抽取注释\n\n如果你需要移除HMTL中的注释，可以使用如下的表达式。\n\n<!--(.*?)-->\n#### 20. 匹配HTML标签\n\n通过下面的表达式可以匹配出HTML中的标签属性。\n\n<\\/?\\w+((\\s+\\w+(\\s*=\\s*(?:\".*?\"|'.*?'|[\\^'\">\\s]+))?)+\\s*|\\s*)\\/?>\n\n\n\n| Item      |    Value |\n| :-------- | :--: |\n|元字符|描述|\n|\\|将下一个字符标记符、或一个向后引用、或一个八进制转义符。例如，“\\\\n”匹配\\n。“\\n”匹配换行符。序列“\\\\”匹配“\\”而“\\(”则匹配“(”。即相当于多种编程语言中都有的“转义字符”的概念。|\n|^|匹配输入字符串的开始位置。如果设置了RegExp对象的Multiline属性，^也匹配“\\n”或“\\r”之后的位置。|\n|$|匹配输入字符串的结束位置。如果设置了RegExp对象的Multiline属性，$也匹配“\\n”或“\\r”之前的位置。|\n|*|匹配前面的子表达式任意次。例如，zo*能匹配“z”，“zo”以及“zoo”，但是不匹配“bo”。*等价于{0,}。|\n|+|匹配前面的子表达式一次或多次(大于等于1次）。例如，“zo+”能匹配“zo”以及“zoo”，但不能匹配“z”。+等价于{1,}。|\n|?|匹配前面的子表达式零次或一次。例如，“do(es)?”可以匹配“do”或“does”中的“do”。?等价于{0,1}。|\n|{n}|n是一个非负整数。匹配确定的n次。例如，“o{2}”不能匹配“Bob”中的“o”，但是能匹配“food”中的两个o。|\n|{n,}|n是一个非负整数。至少匹配n次。例如，“o{2,}”不能匹配“Bob”中的“o”，但能匹配“foooood”中的所有o。“o{1,}”等价于“o+”。“o{0,}”则等价于“o*”。|\n|{n,m}|m和n均为非负整数，其中n<=m。最少匹配n次且最多匹配m次。例如，“o{1,3}”将匹配“fooooood”中的前三个o。“o{0,1}”等价于“o?”。请注意在逗号和两个数之间不能有空格。|\n|?|当该字符紧跟在任何一个其他限制符（*,+,?，{n}，{n,}，{n,m}）后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串“oooo”，“o+?”将匹配单个“o”，而“o+”将匹配所有“o”。|\n|.点|匹配除“\\r\\n”之外的任何单个字符。要匹配包括“\\r\\n”在内的任何字符，请使用像“[\\s\\S]”的模式。|\n|(pattern)|匹配pattern并获取这一匹配。所获取的匹配可以从产生的Matches集合得到，在VBScript中使用SubMatches集合，在JScript中则使用$0…$9属性。要匹配圆括号字符，请使用“\\(”或“\\)”。|\n|(?:pattern)|非获取匹配，匹配pattern但不获取匹配结果，不进行存储供以后使用。这在使用或字符“(丨)”来组合一个模式的各个部分是很有用。例如“industr(?:y丨ies)”就是一个比“industry丨industries”更简略的表达式。|\n|(?=pattern)|非获取匹配，正向肯定预查，在任何匹配pattern的字符串开始处匹配查找字符串，该匹配不需要获取供以后使用。例如，“Windows(?=95丨98丨NT丨2000)”能匹配“Windows2000”中的“Windows”，但不能匹配“Windows3.1”中的“Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。\n|(?!pattern)|非获取匹配，正向否定预查，在任何不匹配pattern的字符串开始处匹配查找字符串，该匹配不需要获取供以后使用。例如“Windows(?!95丨98丨NT丨2000)”能匹配“Windows3.1”中的“Windows”，但不能匹配“Windows2000”中的“Windows”。|\n|(?<=pattern)|非获取匹配，反向肯定预查，与正向肯定预查类似，只是方向相反。例如，“(?<=95丨98丨NT丨2000)Windows”能匹配“2000Windows”中的“Windows”，但不能匹配“3.1Windows”中的“Windows”。|\n|(?<!pattern)|非获取匹配，反向否定预查，与正向否定预查类似，只是方向相反。例如“(?<!95丨98丨NT丨2000)Windows”能匹配“3.1Windows”中的“Windows”，但不能匹配“2000Windows”中的“Windows”。这个地方不正确，有问题|\n|x丨y|匹配x或y。例如，“z丨food”能匹配“z”或“food”(此处请谨慎)。“(z丨f)ood”则匹配“zood”或“food”。|\n|[xyz]|字符集合。匹配所包含的任意一个字符。例如，“[abc]”可以匹配“plain”中的“a”。|\n|[^xyz]|负值字符集合。匹配未包含的任意字符。例如，“[^abc]”可以匹配“plain”中的“plin”。|\n|[a-z]|字符范围。匹配指定范围内的任意字符。例如，“[a-z]”可以匹配“a”到“z”范围内的任意小写字母字符。注意:只有连字符在字符组内部时,并且出现在两个字符之间时,才能表示字符的范围; 如果出字符组的开头,则只能表示连字符本身.|\n|[^a-z]|负值字符范围。匹配任何不在指定范围内的任意字符。例如，“[^a-z]”可以匹配任何不在“a”到“z”范围内的任意字符。|\n|\\b|匹配一个单词边界，也就是指单词和空格间的位置（即正则表达式的“匹配”有两种概念，一种是匹配字符，一种是匹配位置，这里的\\b就是匹配位置的）。例如，“er\\b”可以匹配“never”中的“er”，但不能匹配“verb”中的“er”。|\n|\\B|匹配非单词边界。“er\\B”能匹配“verb”中的“er”，但不能匹配“never”中的“er”。|\n|\\cx|匹配由x指明的控制字符。例如，\\cM匹配一个Control-M或回车符。x的值必须为A-Z或a-z之一。否则，将c视为一个原义的“c”字符。|\n|\\d|匹配一个数字字符。等价于[0-9]。|\n|\\D|匹配一个非数字字符。等价于[^0-9]。|\n|\\f|匹配一个换页符。等价于\\x0c和\\cL。|\n|\\n|匹配一个换行符。等价于\\x0a和\\cJ。|\n|\\r|匹配一个回车符。等价于\\x0d和\\cM。|\n|\\s|匹配任何不可见字符，包括空格、制表符、换页符等等。等价于[ \\f\\n\\r\\t\\v]。|\n|\\S|匹配任何可见字符。等价于[^ \\f\\n\\r\\t\\v]。|\n|\\t|匹配一个制表符。等价于\\x09和\\cI。|\n|\\v|匹配一个垂直制表符。等价于\\x0b和\\cK。|\n|\\w|匹配包括下划线的任何单词字符。类似但不等价于“[A-Za-z0-9_]”，这里的\"单词\"字符使用Unicode字符集。|\n|\\W|匹配任何非单词字符。等价于“[^A-Za-z0-9_]”。|\n|\\xn|匹配n，其中n为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，“\\x41”匹配“A”。“\\x041”则等价于“\\x04&1”。正则表达式中可以使用ASCII编码。|\n|\\num|匹配num，其中num是一个正整数。对所获取的匹配的引用。例如，“(.)\\1”匹配两个连续的相同字符。|\n|\\n|标识一个八进制转义值或一个向后引用。如果\\n之前至少n个获取的子表达式，则n为向后引用。否则，如果n为八进制数字（0-7），则n为一个八进制转义值。|\n|\\nm|标识一个八进制转义值或一个向后引用。如果\\nm之前至少有nm个获得子表达式，则nm为向后引用。如果\\nm之前至少有n个获取，则n为一个后跟文字m的向后引用。如果前面的条件都不满足，若n和m均为八进制数字（0-7），则\\nm将匹配八进制转义值nm。|\n|\\nml|如果n为八进制数字（0-7），且m和l均为八进制数字（0-7），则匹配八进制转义值nml。|\n|\\un|匹配n，其中n是一个用四个十六进制数字表示的Unicode字符。例如，\\u00A9匹配版权符号（&copy;）。|\n|\\p{P}|小写 p 是 property 的意思，表示 Unicode 属性，用于 Unicode 正表达式的前缀。中括号内的“P”表示Unicode 字符集七个字符属性之一：标点字符。|\n\n\n其他六个属性：\nL：字母；\nM：标记符号（一般不会单独出现）；\nZ：分隔符（比如空格、换行等）；\nS：符号（比如数学符号、货币符号等）；\nN：数字（比如阿拉伯数字、罗马数字等）；\nC：其他字符。\n*注：此语法部分语言不支持，例：javascript。\n< >\t匹配词（word）的开始（<）和结束（>）。例如正则表达式<the>能够匹配字符串\"for the wise\"中的\"the\"，但是不能匹配字符串\"otherwise\"中的\"the\"。注意：这个元字符不是所有的软件都支持的。\n( )\t将( 和 ) 之间的表达式定义为“组”（group），并且将匹配这个表达式的字符保存到一个临时区域（一个正则表达式中最多可以保存9个），它们可以用 \\1 到\\9 的符号来引用。\n|\t将两个匹配条件进行逻辑“或”（Or）运算。例如正则表达式(him|her) 匹配\"it belongs to him\"和\"it belongs to her\"，但是不能匹配\"it belongs to them.\"。注意：这个元字符不是所有的软件都支持的。\n+\t匹配1或多个正好在它之前的那个字符。例如正则表达式9+匹配9、99、999等。注意：这个元字符不是所有的软件都支持的。\n?\t匹配0或1个正好在它之前的那个字符。注意：这个元字符不是所有的软件都支持的。\n{i} {i,j}\t匹配指定数目的字符，这些字符是在它之前的表达式定义的。例如正则表达式A[0-9]{3} 能够匹配字符\"A\"后面跟着正好3个数字字符的串，例如A123、A348等，但是不匹配A1234。而正则表达式[0-9]{4,6} 匹配连续的任意4个、5个或者6个数字\n","source":"_posts/正则.md","raw":"---\ntitle: 正则\ntags:\n  - '正则'\ncategories:\n  - '前端'\n  - '正则'\ndate: 2017-04-17 10:39:40\n---\n\n#### 1 . 校验密码强度\n\n密码的强度必须是包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间。\n\n^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,10}$\n#### 2. 校验中文\n\n字符串仅能是中文。\n\n^[\\u4e00-\\u9fa5]{0,}$\n<!--more-->\n#### 3. 由数字、26个英文字母或下划线组成的字符串\n\n^\\w+$\n#### 4. 校验E-Mail 地址\n\n同密码一样，下面是E-mail地址合规性的正则检查语句。\n\n[\\w!#$%&'*+/=?^_`{|}~-]+(?:\\.[\\w!#$%&'*+/=?^_`{|}~-]+)*@(?:[\\w](?:[\\w-]*[\\w])?\\.)+[\\w](?:[\\w-]*[\\w])?\n#### 5. 校验身份证号码\n\n下面是身份证号码的正则校验。15 或 18位。\n\n15位：\n\n^[1-9]\\d{7}((0\\d)|(1[0-2]))(([0|1|2]\\d)|3[0-1])\\d{3}$\n18位：\n\n^[1-9]\\d{5}[1-9]\\d{3}((0\\d)|(1[0-2]))(([0|1|2]\\d)|3[0-1])\\d{3}([0-9]|X)$\n#### 6. 校验日期\n\n“yyyy-mm-dd“ 格式的日期校验，已考虑平闰年。\n\n^(?:(?!0000)[0-9]{4}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1[0-9]|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[0-9]{2}(?:0[48]|[2468][048]|[13579][26])|(?:0[48]|[2468][048]|[13579][26])00)-02-29)$\n#### 7. 校验金额\n\n金额校验，精确到2位小数。\n\n^[0-9]+(.[0-9]{2})?$\n#### 8. 校验手机号\n\n下面是国内 13、15、18开头的手机号正则表达式。（可根据目前国内收集号扩展前两位开头号码）\n\n^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\\d{8}$\n#### 9. 判断IE的版本\n\nIE目前还没被完全取代，很多页面还是需要做版本兼容，下面是IE版本检查的表达式。\n\n^.*MSIE [5-8](?:\\.[0-9]+)?(?!.*Trident\\/[5-9]\\.0).*$\n#### 10. 校验IP-v4地址\n\nIP4 正则语句。\n\n\\b(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\b\n#### 11. 校验IP-v6地址\n\nIP6 正则语句。\n\n(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\n#### 12. 检查URL的前缀\n\n应用开发中很多时候需要区分请求是HTTPS还是HTTP，通过下面的表达式可以取出一个url的前缀然后再逻辑判断。\n\nif (!s.match(/^[a-zA-Z]+:\\/\\//))\n{\n    s = 'http://' + s;\n}\n#### 13. 提取URL链接\n\n下面的这个表达式可以筛选出一段文本中的URL。\n\n^(f|ht){1}(tp|tps):\\/\\/([\\w-]+\\.)+[\\w-]+(\\/[\\w- ./?%&=]*)?\n#### 14. 文件路径及扩展名校验\n\n验证windows下文件路径和扩展名（下面的例子中为.txt文件）\n\n^([a-zA-Z]\\:|\\\\)\\\\([^\\\\]+\\\\)*[^\\/:*?\"<>|]+\\.txt(l)?$\n#### 15. 提取Color Hex Codes\n\n有时需要抽取网页中的颜色代码，可以使用下面的表达式。\n\n^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$\n#### 16. 提取网页图片\n\n假若你想提取网页中所有图片信息，可以利用下面的表达式。\n\n\\< *[img][^\\\\>]*[src] *= *[\\\"\\']{0,1}([^\\\"\\'\\ >]*)\n#### 17. 提取页面超链接\n\n提取html中的超链接。\n\n(<a\\s*(?!.*\\brel=)[^>]*)(href=\"https?:\\/\\/)((?!(?:(?:www\\.)?'.implode('|(?:www\\.)?', $follow_list).'))[^\"]+)\"((?!.*\\brel=)[^>]*)(?:[^>]*)>\n#### 18. 查找CSS属性\n\n通过下面的表达式，可以搜索到相匹配的CSS属性。\n\n^\\s*[a-zA-Z\\-]+\\s*[:]{1}\\s[a-zA-Z0-9\\s.#]+[;]{1}\n#### 19. 抽取注释\n\n如果你需要移除HMTL中的注释，可以使用如下的表达式。\n\n<!--(.*?)-->\n#### 20. 匹配HTML标签\n\n通过下面的表达式可以匹配出HTML中的标签属性。\n\n<\\/?\\w+((\\s+\\w+(\\s*=\\s*(?:\".*?\"|'.*?'|[\\^'\">\\s]+))?)+\\s*|\\s*)\\/?>\n\n\n\n| Item      |    Value |\n| :-------- | :--: |\n|元字符|描述|\n|\\|将下一个字符标记符、或一个向后引用、或一个八进制转义符。例如，“\\\\n”匹配\\n。“\\n”匹配换行符。序列“\\\\”匹配“\\”而“\\(”则匹配“(”。即相当于多种编程语言中都有的“转义字符”的概念。|\n|^|匹配输入字符串的开始位置。如果设置了RegExp对象的Multiline属性，^也匹配“\\n”或“\\r”之后的位置。|\n|$|匹配输入字符串的结束位置。如果设置了RegExp对象的Multiline属性，$也匹配“\\n”或“\\r”之前的位置。|\n|*|匹配前面的子表达式任意次。例如，zo*能匹配“z”，“zo”以及“zoo”，但是不匹配“bo”。*等价于{0,}。|\n|+|匹配前面的子表达式一次或多次(大于等于1次）。例如，“zo+”能匹配“zo”以及“zoo”，但不能匹配“z”。+等价于{1,}。|\n|?|匹配前面的子表达式零次或一次。例如，“do(es)?”可以匹配“do”或“does”中的“do”。?等价于{0,1}。|\n|{n}|n是一个非负整数。匹配确定的n次。例如，“o{2}”不能匹配“Bob”中的“o”，但是能匹配“food”中的两个o。|\n|{n,}|n是一个非负整数。至少匹配n次。例如，“o{2,}”不能匹配“Bob”中的“o”，但能匹配“foooood”中的所有o。“o{1,}”等价于“o+”。“o{0,}”则等价于“o*”。|\n|{n,m}|m和n均为非负整数，其中n<=m。最少匹配n次且最多匹配m次。例如，“o{1,3}”将匹配“fooooood”中的前三个o。“o{0,1}”等价于“o?”。请注意在逗号和两个数之间不能有空格。|\n|?|当该字符紧跟在任何一个其他限制符（*,+,?，{n}，{n,}，{n,m}）后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串“oooo”，“o+?”将匹配单个“o”，而“o+”将匹配所有“o”。|\n|.点|匹配除“\\r\\n”之外的任何单个字符。要匹配包括“\\r\\n”在内的任何字符，请使用像“[\\s\\S]”的模式。|\n|(pattern)|匹配pattern并获取这一匹配。所获取的匹配可以从产生的Matches集合得到，在VBScript中使用SubMatches集合，在JScript中则使用$0…$9属性。要匹配圆括号字符，请使用“\\(”或“\\)”。|\n|(?:pattern)|非获取匹配，匹配pattern但不获取匹配结果，不进行存储供以后使用。这在使用或字符“(丨)”来组合一个模式的各个部分是很有用。例如“industr(?:y丨ies)”就是一个比“industry丨industries”更简略的表达式。|\n|(?=pattern)|非获取匹配，正向肯定预查，在任何匹配pattern的字符串开始处匹配查找字符串，该匹配不需要获取供以后使用。例如，“Windows(?=95丨98丨NT丨2000)”能匹配“Windows2000”中的“Windows”，但不能匹配“Windows3.1”中的“Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。\n|(?!pattern)|非获取匹配，正向否定预查，在任何不匹配pattern的字符串开始处匹配查找字符串，该匹配不需要获取供以后使用。例如“Windows(?!95丨98丨NT丨2000)”能匹配“Windows3.1”中的“Windows”，但不能匹配“Windows2000”中的“Windows”。|\n|(?<=pattern)|非获取匹配，反向肯定预查，与正向肯定预查类似，只是方向相反。例如，“(?<=95丨98丨NT丨2000)Windows”能匹配“2000Windows”中的“Windows”，但不能匹配“3.1Windows”中的“Windows”。|\n|(?<!pattern)|非获取匹配，反向否定预查，与正向否定预查类似，只是方向相反。例如“(?<!95丨98丨NT丨2000)Windows”能匹配“3.1Windows”中的“Windows”，但不能匹配“2000Windows”中的“Windows”。这个地方不正确，有问题|\n|x丨y|匹配x或y。例如，“z丨food”能匹配“z”或“food”(此处请谨慎)。“(z丨f)ood”则匹配“zood”或“food”。|\n|[xyz]|字符集合。匹配所包含的任意一个字符。例如，“[abc]”可以匹配“plain”中的“a”。|\n|[^xyz]|负值字符集合。匹配未包含的任意字符。例如，“[^abc]”可以匹配“plain”中的“plin”。|\n|[a-z]|字符范围。匹配指定范围内的任意字符。例如，“[a-z]”可以匹配“a”到“z”范围内的任意小写字母字符。注意:只有连字符在字符组内部时,并且出现在两个字符之间时,才能表示字符的范围; 如果出字符组的开头,则只能表示连字符本身.|\n|[^a-z]|负值字符范围。匹配任何不在指定范围内的任意字符。例如，“[^a-z]”可以匹配任何不在“a”到“z”范围内的任意字符。|\n|\\b|匹配一个单词边界，也就是指单词和空格间的位置（即正则表达式的“匹配”有两种概念，一种是匹配字符，一种是匹配位置，这里的\\b就是匹配位置的）。例如，“er\\b”可以匹配“never”中的“er”，但不能匹配“verb”中的“er”。|\n|\\B|匹配非单词边界。“er\\B”能匹配“verb”中的“er”，但不能匹配“never”中的“er”。|\n|\\cx|匹配由x指明的控制字符。例如，\\cM匹配一个Control-M或回车符。x的值必须为A-Z或a-z之一。否则，将c视为一个原义的“c”字符。|\n|\\d|匹配一个数字字符。等价于[0-9]。|\n|\\D|匹配一个非数字字符。等价于[^0-9]。|\n|\\f|匹配一个换页符。等价于\\x0c和\\cL。|\n|\\n|匹配一个换行符。等价于\\x0a和\\cJ。|\n|\\r|匹配一个回车符。等价于\\x0d和\\cM。|\n|\\s|匹配任何不可见字符，包括空格、制表符、换页符等等。等价于[ \\f\\n\\r\\t\\v]。|\n|\\S|匹配任何可见字符。等价于[^ \\f\\n\\r\\t\\v]。|\n|\\t|匹配一个制表符。等价于\\x09和\\cI。|\n|\\v|匹配一个垂直制表符。等价于\\x0b和\\cK。|\n|\\w|匹配包括下划线的任何单词字符。类似但不等价于“[A-Za-z0-9_]”，这里的\"单词\"字符使用Unicode字符集。|\n|\\W|匹配任何非单词字符。等价于“[^A-Za-z0-9_]”。|\n|\\xn|匹配n，其中n为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，“\\x41”匹配“A”。“\\x041”则等价于“\\x04&1”。正则表达式中可以使用ASCII编码。|\n|\\num|匹配num，其中num是一个正整数。对所获取的匹配的引用。例如，“(.)\\1”匹配两个连续的相同字符。|\n|\\n|标识一个八进制转义值或一个向后引用。如果\\n之前至少n个获取的子表达式，则n为向后引用。否则，如果n为八进制数字（0-7），则n为一个八进制转义值。|\n|\\nm|标识一个八进制转义值或一个向后引用。如果\\nm之前至少有nm个获得子表达式，则nm为向后引用。如果\\nm之前至少有n个获取，则n为一个后跟文字m的向后引用。如果前面的条件都不满足，若n和m均为八进制数字（0-7），则\\nm将匹配八进制转义值nm。|\n|\\nml|如果n为八进制数字（0-7），且m和l均为八进制数字（0-7），则匹配八进制转义值nml。|\n|\\un|匹配n，其中n是一个用四个十六进制数字表示的Unicode字符。例如，\\u00A9匹配版权符号（&copy;）。|\n|\\p{P}|小写 p 是 property 的意思，表示 Unicode 属性，用于 Unicode 正表达式的前缀。中括号内的“P”表示Unicode 字符集七个字符属性之一：标点字符。|\n\n\n其他六个属性：\nL：字母；\nM：标记符号（一般不会单独出现）；\nZ：分隔符（比如空格、换行等）；\nS：符号（比如数学符号、货币符号等）；\nN：数字（比如阿拉伯数字、罗马数字等）；\nC：其他字符。\n*注：此语法部分语言不支持，例：javascript。\n< >\t匹配词（word）的开始（<）和结束（>）。例如正则表达式<the>能够匹配字符串\"for the wise\"中的\"the\"，但是不能匹配字符串\"otherwise\"中的\"the\"。注意：这个元字符不是所有的软件都支持的。\n( )\t将( 和 ) 之间的表达式定义为“组”（group），并且将匹配这个表达式的字符保存到一个临时区域（一个正则表达式中最多可以保存9个），它们可以用 \\1 到\\9 的符号来引用。\n|\t将两个匹配条件进行逻辑“或”（Or）运算。例如正则表达式(him|her) 匹配\"it belongs to him\"和\"it belongs to her\"，但是不能匹配\"it belongs to them.\"。注意：这个元字符不是所有的软件都支持的。\n+\t匹配1或多个正好在它之前的那个字符。例如正则表达式9+匹配9、99、999等。注意：这个元字符不是所有的软件都支持的。\n?\t匹配0或1个正好在它之前的那个字符。注意：这个元字符不是所有的软件都支持的。\n{i} {i,j}\t匹配指定数目的字符，这些字符是在它之前的表达式定义的。例如正则表达式A[0-9]{3} 能够匹配字符\"A\"后面跟着正好3个数字字符的串，例如A123、A348等，但是不匹配A1234。而正则表达式[0-9]{4,6} 匹配连续的任意4个、5个或者6个数字\n","slug":"正则","published":1,"updated":"2017-04-17T09:30:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5naxw5b001rfcxetq7bviti","content":"<h4 id=\"1-校验密码强度\"><a href=\"#1-校验密码强度\" class=\"headerlink\" title=\"1 . 校验密码强度\"></a>1 . 校验密码强度</h4><p>密码的强度必须是包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间。</p>\n<p>^(?=.<em>\\d)(?=.</em>[a-z])(?=.*[A-Z]).{8,10}$</p>\n<h4 id=\"2-校验中文\"><a href=\"#2-校验中文\" class=\"headerlink\" title=\"2. 校验中文\"></a>2. 校验中文</h4><p>字符串仅能是中文。</p>\n<p>^[\\u4e00-\\u9fa5]{0,}$<br><a id=\"more\"></a></p>\n<h4 id=\"3-由数字、26个英文字母或下划线组成的字符串\"><a href=\"#3-由数字、26个英文字母或下划线组成的字符串\" class=\"headerlink\" title=\"3. 由数字、26个英文字母或下划线组成的字符串\"></a>3. 由数字、26个英文字母或下划线组成的字符串</h4><p>^\\w+$</p>\n<h4 id=\"4-校验E-Mail-地址\"><a href=\"#4-校验E-Mail-地址\" class=\"headerlink\" title=\"4. 校验E-Mail 地址\"></a>4. 校验E-Mail 地址</h4><p>同密码一样，下面是E-mail地址合规性的正则检查语句。</p>\n<p>[\\w!#$%&amp;’<em>+/=?^_`{|}~-]+(?:.[\\w!#$%&amp;’</em>+/=?^_`{|}~-]+)<em>@(?:[\\w](?:[\\w-]</em>[\\w])?.)+<a href=\"?:[\\w-]*[\\w]\">\\w</a>?</p>\n<h4 id=\"5-校验身份证号码\"><a href=\"#5-校验身份证号码\" class=\"headerlink\" title=\"5. 校验身份证号码\"></a>5. 校验身份证号码</h4><p>下面是身份证号码的正则校验。15 或 18位。</p>\n<p>15位：</p>\n<p>^[1-9]\\d{7}((0\\d)|(1[0-2]))(([0|1|2]\\d)|3[0-1])\\d{3}$<br>18位：</p>\n<p>^[1-9]\\d{5}[1-9]\\d{3}((0\\d)|(1[0-2]))(([0|1|2]\\d)|3[0-1])\\d{3}([0-9]|X)$</p>\n<h4 id=\"6-校验日期\"><a href=\"#6-校验日期\" class=\"headerlink\" title=\"6. 校验日期\"></a>6. 校验日期</h4><p>“yyyy-mm-dd“ 格式的日期校验，已考虑平闰年。</p>\n<p>^(?:(?!0000)[0-9]{4}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1[0-9]|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[0-9]{2}(?:0[48]|[2468][048]|[13579][26])|(?:0[48]|[2468][048]|[13579][26])00)-02-29)$</p>\n<h4 id=\"7-校验金额\"><a href=\"#7-校验金额\" class=\"headerlink\" title=\"7. 校验金额\"></a>7. 校验金额</h4><p>金额校验，精确到2位小数。</p>\n<p>^[0-9]+(.[0-9]{2})?$</p>\n<h4 id=\"8-校验手机号\"><a href=\"#8-校验手机号\" class=\"headerlink\" title=\"8. 校验手机号\"></a>8. 校验手机号</h4><p>下面是国内 13、15、18开头的手机号正则表达式。（可根据目前国内收集号扩展前两位开头号码）</p>\n<p>^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\\d{8}$</p>\n<h4 id=\"9-判断IE的版本\"><a href=\"#9-判断IE的版本\" class=\"headerlink\" title=\"9. 判断IE的版本\"></a>9. 判断IE的版本</h4><p>IE目前还没被完全取代，很多页面还是需要做版本兼容，下面是IE版本检查的表达式。</p>\n<p>^.<em>MSIE <a href=\"?:\\.[0-9]+\">5-8</a>?(?!.</em>Trident\\/[5-9].0).*$</p>\n<h4 id=\"10-校验IP-v4地址\"><a href=\"#10-校验IP-v4地址\" class=\"headerlink\" title=\"10. 校验IP-v4地址\"></a>10. 校验IP-v4地址</h4><p>IP4 正则语句。</p>\n<p>\\b(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\b</p>\n<h4 id=\"11-校验IP-v6地址\"><a href=\"#11-校验IP-v6地址\" class=\"headerlink\" title=\"11. 校验IP-v6地址\"></a>11. 校验IP-v6地址</h4><p>IP6 正则语句。</p>\n<p>(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]).){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]).){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))</p>\n<h4 id=\"12-检查URL的前缀\"><a href=\"#12-检查URL的前缀\" class=\"headerlink\" title=\"12. 检查URL的前缀\"></a>12. 检查URL的前缀</h4><p>应用开发中很多时候需要区分请求是HTTPS还是HTTP，通过下面的表达式可以取出一个url的前缀然后再逻辑判断。</p>\n<p>if (!s.match(/^[a-zA-Z]+:\\/\\//))<br>{<br>    s = ‘http://‘ + s;<br>}</p>\n<h4 id=\"13-提取URL链接\"><a href=\"#13-提取URL链接\" class=\"headerlink\" title=\"13. 提取URL链接\"></a>13. 提取URL链接</h4><p>下面的这个表达式可以筛选出一段文本中的URL。</p>\n<p>^(f|ht){1}(tp|tps):\\/\\/([\\w-]+.)+[\\w-]+(\\/[\\w- ./?%&amp;=]*)?</p>\n<h4 id=\"14-文件路径及扩展名校验\"><a href=\"#14-文件路径及扩展名校验\" class=\"headerlink\" title=\"14. 文件路径及扩展名校验\"></a>14. 文件路径及扩展名校验</h4><p>验证windows下文件路径和扩展名（下面的例子中为.txt文件）</p>\n<p>^([a-zA-Z]\\:|\\)\\([^\\]+\\)<em>[^\\/:</em>?”&lt;&gt;|]+.txt(l)?$</p>\n<h4 id=\"15-提取Color-Hex-Codes\"><a href=\"#15-提取Color-Hex-Codes\" class=\"headerlink\" title=\"15. 提取Color Hex Codes\"></a>15. 提取Color Hex Codes</h4><p>有时需要抽取网页中的颜色代码，可以使用下面的表达式。</p>\n<p>^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$</p>\n<h4 id=\"16-提取网页图片\"><a href=\"#16-提取网页图片\" class=\"headerlink\" title=\"16. 提取网页图片\"></a>16. 提取网页图片</h4><p>假若你想提取网页中所有图片信息，可以利用下面的表达式。</p>\n<p>\\&lt; <em>[img][^\\&gt;]</em>[src] <em>= </em>[\\”\\’]{0,1}([^\\”\\’\\ &gt;]*)</p>\n<h4 id=\"17-提取页面超链接\"><a href=\"#17-提取页面超链接\" class=\"headerlink\" title=\"17. 提取页面超链接\"></a>17. 提取页面超链接</h4><p>提取html中的超链接。</p>\n<p>(<a\\s*(?!.*\\brel=)[^>]<em>)(href=”https?:\\/\\/)((?!(?:(?:www.)?’.implode(‘|(?:www.)?’, $follow_list).’))[^”]+)”((?!.</em>\\brel=)[^&gt;]<em>)(?:[^&gt;]</em>)&gt;</a\\s*(?!.*\\brel=)[^></p>\n<h4 id=\"18-查找CSS属性\"><a href=\"#18-查找CSS属性\" class=\"headerlink\" title=\"18. 查找CSS属性\"></a>18. 查找CSS属性</h4><p>通过下面的表达式，可以搜索到相匹配的CSS属性。</p>\n<p>^\\s<em>[a-zA-Z-]+\\s</em>[:]{1}\\s[a-zA-Z0-9\\s.#]+[;]{1}</p>\n<h4 id=\"19-抽取注释\"><a href=\"#19-抽取注释\" class=\"headerlink\" title=\"19. 抽取注释\"></a>19. 抽取注释</h4><p>如果你需要移除HMTL中的注释，可以使用如下的表达式。</p>\n<!--(.*?)-->\n<h4 id=\"20-匹配HTML标签\"><a href=\"#20-匹配HTML标签\" class=\"headerlink\" title=\"20. 匹配HTML标签\"></a>20. 匹配HTML标签</h4><p>通过下面的表达式可以匹配出HTML中的标签属性。</p>\n<p>&lt;\\/?\\w+((\\s+\\w+(\\s<em>=\\s</em>(?:”.<em>?”|’.</em>?’|[\\^’”&gt;\\s]+))?)+\\s<em>|\\s</em>)\\/?&gt;</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Item</th>\n<th style=\"text-align:center\">Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">元字符</td>\n<td style=\"text-align:center\">描述</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\</td>\n<td style=\"text-align:center\">将下一个字符标记符、或一个向后引用、或一个八进制转义符。例如，“\\n”匹配\\n。“\\n”匹配换行符。序列“\\”匹配“\\”而“(”则匹配“(”。即相当于多种编程语言中都有的“转义字符”的概念。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">^</td>\n<td style=\"text-align:center\">匹配输入字符串的开始位置。如果设置了RegExp对象的Multiline属性，^也匹配“\\n”或“\\r”之后的位置。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">$</td>\n<td style=\"text-align:center\">匹配输入字符串的结束位置。如果设置了RegExp对象的Multiline属性，$也匹配“\\n”或“\\r”之前的位置。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">*</td>\n<td style=\"text-align:center\">匹配前面的子表达式任意次。例如，zo<em>能匹配“z”，“zo”以及“zoo”，但是不匹配“bo”。</em>等价于{0,}。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">+</td>\n<td style=\"text-align:center\">匹配前面的子表达式一次或多次(大于等于1次）。例如，“zo+”能匹配“zo”以及“zoo”，但不能匹配“z”。+等价于{1,}。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">?</td>\n<td style=\"text-align:center\">匹配前面的子表达式零次或一次。例如，“do(es)?”可以匹配“do”或“does”中的“do”。?等价于{0,1}。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">{n}</td>\n<td style=\"text-align:center\">n是一个非负整数。匹配确定的n次。例如，“o{2}”不能匹配“Bob”中的“o”，但是能匹配“food”中的两个o。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">{n,}</td>\n<td style=\"text-align:center\">n是一个非负整数。至少匹配n次。例如，“o{2,}”不能匹配“Bob”中的“o”，但能匹配“foooood”中的所有o。“o{1,}”等价于“o+”。“o{0,}”则等价于“o*”。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">{n,m}</td>\n<td style=\"text-align:center\">m和n均为非负整数，其中n&lt;=m。最少匹配n次且最多匹配m次。例如，“o{1,3}”将匹配“fooooood”中的前三个o。“o{0,1}”等价于“o?”。请注意在逗号和两个数之间不能有空格。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">?</td>\n<td style=\"text-align:center\">当该字符紧跟在任何一个其他限制符（*,+,?，{n}，{n,}，{n,m}）后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串“oooo”，“o+?”将匹配单个“o”，而“o+”将匹配所有“o”。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">.点</td>\n<td style=\"text-align:center\">匹配除“\\r\\n”之外的任何单个字符。要匹配包括“\\r\\n”在内的任何字符，请使用像“[\\s\\S]”的模式。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">(pattern)</td>\n<td style=\"text-align:center\">匹配pattern并获取这一匹配。所获取的匹配可以从产生的Matches集合得到，在VBScript中使用SubMatches集合，在JScript中则使用$0…$9属性。要匹配圆括号字符，请使用“(”或“)”。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">(?:pattern)</td>\n<td style=\"text-align:center\">非获取匹配，匹配pattern但不获取匹配结果，不进行存储供以后使用。这在使用或字符“(丨)”来组合一个模式的各个部分是很有用。例如“industr(?:y丨ies)”就是一个比“industry丨industries”更简略的表达式。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">(?=pattern)</td>\n<td style=\"text-align:center\">非获取匹配，正向肯定预查，在任何匹配pattern的字符串开始处匹配查找字符串，该匹配不需要获取供以后使用。例如，“Windows(?=95丨98丨NT丨2000)”能匹配“Windows2000”中的“Windows”，但不能匹配“Windows3.1”中的“Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">(?!pattern)</td>\n<td style=\"text-align:center\">非获取匹配，正向否定预查，在任何不匹配pattern的字符串开始处匹配查找字符串，该匹配不需要获取供以后使用。例如“Windows(?!95丨98丨NT丨2000)”能匹配“Windows3.1”中的“Windows”，但不能匹配“Windows2000”中的“Windows”。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">(?&lt;=pattern)</td>\n<td style=\"text-align:center\">非获取匹配，反向肯定预查，与正向肯定预查类似，只是方向相反。例如，“(?&lt;=95丨98丨NT丨2000)Windows”能匹配“2000Windows”中的“Windows”，但不能匹配“3.1Windows”中的“Windows”。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">(?&lt;!pattern)</td>\n<td style=\"text-align:center\">非获取匹配，反向否定预查，与正向否定预查类似，只是方向相反。例如“(?&lt;!95丨98丨NT丨2000)Windows”能匹配“3.1Windows”中的“Windows”，但不能匹配“2000Windows”中的“Windows”。这个地方不正确，有问题</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">x丨y</td>\n<td style=\"text-align:center\">匹配x或y。例如，“z丨food”能匹配“z”或“food”(此处请谨慎)。“(z丨f)ood”则匹配“zood”或“food”。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">[xyz]</td>\n<td style=\"text-align:center\">字符集合。匹配所包含的任意一个字符。例如，“[abc]”可以匹配“plain”中的“a”。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">[^xyz]</td>\n<td style=\"text-align:center\">负值字符集合。匹配未包含的任意字符。例如，“[^abc]”可以匹配“plain”中的“plin”。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">[a-z]</td>\n<td style=\"text-align:center\">字符范围。匹配指定范围内的任意字符。例如，“[a-z]”可以匹配“a”到“z”范围内的任意小写字母字符。注意:只有连字符在字符组内部时,并且出现在两个字符之间时,才能表示字符的范围; 如果出字符组的开头,则只能表示连字符本身.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">[^a-z]</td>\n<td style=\"text-align:center\">负值字符范围。匹配任何不在指定范围内的任意字符。例如，“[^a-z]”可以匹配任何不在“a”到“z”范围内的任意字符。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\b</td>\n<td style=\"text-align:center\">匹配一个单词边界，也就是指单词和空格间的位置（即正则表达式的“匹配”有两种概念，一种是匹配字符，一种是匹配位置，这里的\\b就是匹配位置的）。例如，“er\\b”可以匹配“never”中的“er”，但不能匹配“verb”中的“er”。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\B</td>\n<td style=\"text-align:center\">匹配非单词边界。“er\\B”能匹配“verb”中的“er”，但不能匹配“never”中的“er”。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\cx</td>\n<td style=\"text-align:center\">匹配由x指明的控制字符。例如，\\cM匹配一个Control-M或回车符。x的值必须为A-Z或a-z之一。否则，将c视为一个原义的“c”字符。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\d</td>\n<td style=\"text-align:center\">匹配一个数字字符。等价于[0-9]。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\D</td>\n<td style=\"text-align:center\">匹配一个非数字字符。等价于[^0-9]。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\f</td>\n<td style=\"text-align:center\">匹配一个换页符。等价于\\x0c和\\cL。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\n</td>\n<td style=\"text-align:center\">匹配一个换行符。等价于\\x0a和\\cJ。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\r</td>\n<td style=\"text-align:center\">匹配一个回车符。等价于\\x0d和\\cM。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\s</td>\n<td style=\"text-align:center\">匹配任何不可见字符，包括空格、制表符、换页符等等。等价于[ \\f\\n\\r\\t\\v]。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\S</td>\n<td style=\"text-align:center\">匹配任何可见字符。等价于[^ \\f\\n\\r\\t\\v]。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\t</td>\n<td style=\"text-align:center\">匹配一个制表符。等价于\\x09和\\cI。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\v</td>\n<td style=\"text-align:center\">匹配一个垂直制表符。等价于\\x0b和\\cK。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\w</td>\n<td style=\"text-align:center\">匹配包括下划线的任何单词字符。类似但不等价于“[A-Za-z0-9_]”，这里的”单词”字符使用Unicode字符集。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\W</td>\n<td style=\"text-align:center\">匹配任何非单词字符。等价于“[^A-Za-z0-9_]”。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\xn</td>\n<td style=\"text-align:center\">匹配n，其中n为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，“\\x41”匹配“A”。“\\x041”则等价于“\\x04&amp;1”。正则表达式中可以使用ASCII编码。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\num</td>\n<td style=\"text-align:center\">匹配num，其中num是一个正整数。对所获取的匹配的引用。例如，“(.)\\1”匹配两个连续的相同字符。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\n</td>\n<td style=\"text-align:center\">标识一个八进制转义值或一个向后引用。如果\\n之前至少n个获取的子表达式，则n为向后引用。否则，如果n为八进制数字（0-7），则n为一个八进制转义值。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\nm</td>\n<td style=\"text-align:center\">标识一个八进制转义值或一个向后引用。如果\\nm之前至少有nm个获得子表达式，则nm为向后引用。如果\\nm之前至少有n个获取，则n为一个后跟文字m的向后引用。如果前面的条件都不满足，若n和m均为八进制数字（0-7），则\\nm将匹配八进制转义值nm。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\nml</td>\n<td style=\"text-align:center\">如果n为八进制数字（0-7），且m和l均为八进制数字（0-7），则匹配八进制转义值nml。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\un</td>\n<td style=\"text-align:center\">匹配n，其中n是一个用四个十六进制数字表示的Unicode字符。例如，\\u00A9匹配版权符号（&copy;）。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\p{P}</td>\n<td style=\"text-align:center\">小写 p 是 property 的意思，表示 Unicode 属性，用于 Unicode 正表达式的前缀。中括号内的“P”表示Unicode 字符集七个字符属性之一：标点字符。</td>\n</tr>\n</tbody>\n</table>\n<p>其他六个属性：<br>L：字母；<br>M：标记符号（一般不会单独出现）；<br>Z：分隔符（比如空格、换行等）；<br>S：符号（比如数学符号、货币符号等）；<br>N：数字（比如阿拉伯数字、罗马数字等）；<br>C：其他字符。<br>*注：此语法部分语言不支持，例：javascript。<br>&lt; &gt;    匹配词（word）的开始（&lt;）和结束（&gt;）。例如正则表达式<the>能够匹配字符串”for the wise”中的”the”，但是不能匹配字符串”otherwise”中的”the”。注意：这个元字符不是所有的软件都支持的。<br>( )    将( 和 ) 之间的表达式定义为“组”（group），并且将匹配这个表达式的字符保存到一个临时区域（一个正则表达式中最多可以保存9个），它们可以用 \\1 到\\9 的符号来引用。<br>|    将两个匹配条件进行逻辑“或”（Or）运算。例如正则表达式(him|her) 匹配”it belongs to him”和”it belongs to her”，但是不能匹配”it belongs to them.”。注意：这个元字符不是所有的软件都支持的。</the></p>\n<ul>\n<li>匹配1或多个正好在它之前的那个字符。例如正则表达式9+匹配9、99、999等。注意：这个元字符不是所有的软件都支持的。<br>?    匹配0或1个正好在它之前的那个字符。注意：这个元字符不是所有的软件都支持的。<br>{i} {i,j}    匹配指定数目的字符，这些字符是在它之前的表达式定义的。例如正则表达式A[0-9]{3} 能够匹配字符”A”后面跟着正好3个数字字符的串，例如A123、A348等，但是不匹配A1234。而正则表达式[0-9]{4,6} 匹配连续的任意4个、5个或者6个数字</li>\n</ul>\n","excerpt":"<h4 id=\"1-校验密码强度\"><a href=\"#1-校验密码强度\" class=\"headerlink\" title=\"1 . 校验密码强度\"></a>1 . 校验密码强度</h4><p>密码的强度必须是包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间。</p>\n<p>^(?=.<em>\\d)(?=.</em>[a-z])(?=.*[A-Z]).{8,10}$</p>\n<h4 id=\"2-校验中文\"><a href=\"#2-校验中文\" class=\"headerlink\" title=\"2. 校验中文\"></a>2. 校验中文</h4><p>字符串仅能是中文。</p>\n<p>^[\\u4e00-\\u9fa5]{0,}$<br>","more":"</p>\n<h4 id=\"3-由数字、26个英文字母或下划线组成的字符串\"><a href=\"#3-由数字、26个英文字母或下划线组成的字符串\" class=\"headerlink\" title=\"3. 由数字、26个英文字母或下划线组成的字符串\"></a>3. 由数字、26个英文字母或下划线组成的字符串</h4><p>^\\w+$</p>\n<h4 id=\"4-校验E-Mail-地址\"><a href=\"#4-校验E-Mail-地址\" class=\"headerlink\" title=\"4. 校验E-Mail 地址\"></a>4. 校验E-Mail 地址</h4><p>同密码一样，下面是E-mail地址合规性的正则检查语句。</p>\n<p>[\\w!#$%&amp;’<em>+/=?^_`{|}~-]+(?:.[\\w!#$%&amp;’</em>+/=?^_`{|}~-]+)<em>@(?:[\\w](?:[\\w-]</em>[\\w])?.)+<a href=\"?:[\\w-]*[\\w]\">\\w</a>?</p>\n<h4 id=\"5-校验身份证号码\"><a href=\"#5-校验身份证号码\" class=\"headerlink\" title=\"5. 校验身份证号码\"></a>5. 校验身份证号码</h4><p>下面是身份证号码的正则校验。15 或 18位。</p>\n<p>15位：</p>\n<p>^[1-9]\\d{7}((0\\d)|(1[0-2]))(([0|1|2]\\d)|3[0-1])\\d{3}$<br>18位：</p>\n<p>^[1-9]\\d{5}[1-9]\\d{3}((0\\d)|(1[0-2]))(([0|1|2]\\d)|3[0-1])\\d{3}([0-9]|X)$</p>\n<h4 id=\"6-校验日期\"><a href=\"#6-校验日期\" class=\"headerlink\" title=\"6. 校验日期\"></a>6. 校验日期</h4><p>“yyyy-mm-dd“ 格式的日期校验，已考虑平闰年。</p>\n<p>^(?:(?!0000)[0-9]{4}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1[0-9]|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[0-9]{2}(?:0[48]|[2468][048]|[13579][26])|(?:0[48]|[2468][048]|[13579][26])00)-02-29)$</p>\n<h4 id=\"7-校验金额\"><a href=\"#7-校验金额\" class=\"headerlink\" title=\"7. 校验金额\"></a>7. 校验金额</h4><p>金额校验，精确到2位小数。</p>\n<p>^[0-9]+(.[0-9]{2})?$</p>\n<h4 id=\"8-校验手机号\"><a href=\"#8-校验手机号\" class=\"headerlink\" title=\"8. 校验手机号\"></a>8. 校验手机号</h4><p>下面是国内 13、15、18开头的手机号正则表达式。（可根据目前国内收集号扩展前两位开头号码）</p>\n<p>^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\\d{8}$</p>\n<h4 id=\"9-判断IE的版本\"><a href=\"#9-判断IE的版本\" class=\"headerlink\" title=\"9. 判断IE的版本\"></a>9. 判断IE的版本</h4><p>IE目前还没被完全取代，很多页面还是需要做版本兼容，下面是IE版本检查的表达式。</p>\n<p>^.<em>MSIE <a href=\"?:\\.[0-9]+\">5-8</a>?(?!.</em>Trident\\/[5-9].0).*$</p>\n<h4 id=\"10-校验IP-v4地址\"><a href=\"#10-校验IP-v4地址\" class=\"headerlink\" title=\"10. 校验IP-v4地址\"></a>10. 校验IP-v4地址</h4><p>IP4 正则语句。</p>\n<p>\\b(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\b</p>\n<h4 id=\"11-校验IP-v6地址\"><a href=\"#11-校验IP-v6地址\" class=\"headerlink\" title=\"11. 校验IP-v6地址\"></a>11. 校验IP-v6地址</h4><p>IP6 正则语句。</p>\n<p>(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]).){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]).){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))</p>\n<h4 id=\"12-检查URL的前缀\"><a href=\"#12-检查URL的前缀\" class=\"headerlink\" title=\"12. 检查URL的前缀\"></a>12. 检查URL的前缀</h4><p>应用开发中很多时候需要区分请求是HTTPS还是HTTP，通过下面的表达式可以取出一个url的前缀然后再逻辑判断。</p>\n<p>if (!s.match(/^[a-zA-Z]+:\\/\\//))<br>{<br>    s = ‘http://‘ + s;<br>}</p>\n<h4 id=\"13-提取URL链接\"><a href=\"#13-提取URL链接\" class=\"headerlink\" title=\"13. 提取URL链接\"></a>13. 提取URL链接</h4><p>下面的这个表达式可以筛选出一段文本中的URL。</p>\n<p>^(f|ht){1}(tp|tps):\\/\\/([\\w-]+.)+[\\w-]+(\\/[\\w- ./?%&amp;=]*)?</p>\n<h4 id=\"14-文件路径及扩展名校验\"><a href=\"#14-文件路径及扩展名校验\" class=\"headerlink\" title=\"14. 文件路径及扩展名校验\"></a>14. 文件路径及扩展名校验</h4><p>验证windows下文件路径和扩展名（下面的例子中为.txt文件）</p>\n<p>^([a-zA-Z]\\:|\\)\\([^\\]+\\)<em>[^\\/:</em>?”&lt;&gt;|]+.txt(l)?$</p>\n<h4 id=\"15-提取Color-Hex-Codes\"><a href=\"#15-提取Color-Hex-Codes\" class=\"headerlink\" title=\"15. 提取Color Hex Codes\"></a>15. 提取Color Hex Codes</h4><p>有时需要抽取网页中的颜色代码，可以使用下面的表达式。</p>\n<p>^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$</p>\n<h4 id=\"16-提取网页图片\"><a href=\"#16-提取网页图片\" class=\"headerlink\" title=\"16. 提取网页图片\"></a>16. 提取网页图片</h4><p>假若你想提取网页中所有图片信息，可以利用下面的表达式。</p>\n<p>\\&lt; <em>[img][^\\&gt;]</em>[src] <em>= </em>[\\”\\’]{0,1}([^\\”\\’\\ &gt;]*)</p>\n<h4 id=\"17-提取页面超链接\"><a href=\"#17-提取页面超链接\" class=\"headerlink\" title=\"17. 提取页面超链接\"></a>17. 提取页面超链接</h4><p>提取html中的超链接。</p>\n<p>(<a\\s*(?!.*\\brel=)[^>]<em>)(href=”https?:\\/\\/)((?!(?:(?:www.)?’.implode(‘|(?:www.)?’, $follow_list).’))[^”]+)”((?!.</em>\\brel=)[^&gt;]<em>)(?:[^&gt;]</em>)&gt;</p>\n<h4 id=\"18-查找CSS属性\"><a href=\"#18-查找CSS属性\" class=\"headerlink\" title=\"18. 查找CSS属性\"></a>18. 查找CSS属性</h4><p>通过下面的表达式，可以搜索到相匹配的CSS属性。</p>\n<p>^\\s<em>[a-zA-Z-]+\\s</em>[:]{1}\\s[a-zA-Z0-9\\s.#]+[;]{1}</p>\n<h4 id=\"19-抽取注释\"><a href=\"#19-抽取注释\" class=\"headerlink\" title=\"19. 抽取注释\"></a>19. 抽取注释</h4><p>如果你需要移除HMTL中的注释，可以使用如下的表达式。</p>\n<!--(.*?)-->\n<h4 id=\"20-匹配HTML标签\"><a href=\"#20-匹配HTML标签\" class=\"headerlink\" title=\"20. 匹配HTML标签\"></a>20. 匹配HTML标签</h4><p>通过下面的表达式可以匹配出HTML中的标签属性。</p>\n<p>&lt;\\/?\\w+((\\s+\\w+(\\s<em>=\\s</em>(?:”.<em>?”|’.</em>?’|[\\^’”&gt;\\s]+))?)+\\s<em>|\\s</em>)\\/?&gt;</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Item</th>\n<th style=\"text-align:center\">Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">元字符</td>\n<td style=\"text-align:center\">描述</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\</td>\n<td style=\"text-align:center\">将下一个字符标记符、或一个向后引用、或一个八进制转义符。例如，“\\n”匹配\\n。“\\n”匹配换行符。序列“\\”匹配“\\”而“(”则匹配“(”。即相当于多种编程语言中都有的“转义字符”的概念。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">^</td>\n<td style=\"text-align:center\">匹配输入字符串的开始位置。如果设置了RegExp对象的Multiline属性，^也匹配“\\n”或“\\r”之后的位置。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">$</td>\n<td style=\"text-align:center\">匹配输入字符串的结束位置。如果设置了RegExp对象的Multiline属性，$也匹配“\\n”或“\\r”之前的位置。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">*</td>\n<td style=\"text-align:center\">匹配前面的子表达式任意次。例如，zo<em>能匹配“z”，“zo”以及“zoo”，但是不匹配“bo”。</em>等价于{0,}。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">+</td>\n<td style=\"text-align:center\">匹配前面的子表达式一次或多次(大于等于1次）。例如，“zo+”能匹配“zo”以及“zoo”，但不能匹配“z”。+等价于{1,}。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">?</td>\n<td style=\"text-align:center\">匹配前面的子表达式零次或一次。例如，“do(es)?”可以匹配“do”或“does”中的“do”。?等价于{0,1}。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">{n}</td>\n<td style=\"text-align:center\">n是一个非负整数。匹配确定的n次。例如，“o{2}”不能匹配“Bob”中的“o”，但是能匹配“food”中的两个o。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">{n,}</td>\n<td style=\"text-align:center\">n是一个非负整数。至少匹配n次。例如，“o{2,}”不能匹配“Bob”中的“o”，但能匹配“foooood”中的所有o。“o{1,}”等价于“o+”。“o{0,}”则等价于“o*”。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">{n,m}</td>\n<td style=\"text-align:center\">m和n均为非负整数，其中n&lt;=m。最少匹配n次且最多匹配m次。例如，“o{1,3}”将匹配“fooooood”中的前三个o。“o{0,1}”等价于“o?”。请注意在逗号和两个数之间不能有空格。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">?</td>\n<td style=\"text-align:center\">当该字符紧跟在任何一个其他限制符（*,+,?，{n}，{n,}，{n,m}）后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串“oooo”，“o+?”将匹配单个“o”，而“o+”将匹配所有“o”。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">.点</td>\n<td style=\"text-align:center\">匹配除“\\r\\n”之外的任何单个字符。要匹配包括“\\r\\n”在内的任何字符，请使用像“[\\s\\S]”的模式。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">(pattern)</td>\n<td style=\"text-align:center\">匹配pattern并获取这一匹配。所获取的匹配可以从产生的Matches集合得到，在VBScript中使用SubMatches集合，在JScript中则使用$0…$9属性。要匹配圆括号字符，请使用“(”或“)”。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">(?:pattern)</td>\n<td style=\"text-align:center\">非获取匹配，匹配pattern但不获取匹配结果，不进行存储供以后使用。这在使用或字符“(丨)”来组合一个模式的各个部分是很有用。例如“industr(?:y丨ies)”就是一个比“industry丨industries”更简略的表达式。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">(?=pattern)</td>\n<td style=\"text-align:center\">非获取匹配，正向肯定预查，在任何匹配pattern的字符串开始处匹配查找字符串，该匹配不需要获取供以后使用。例如，“Windows(?=95丨98丨NT丨2000)”能匹配“Windows2000”中的“Windows”，但不能匹配“Windows3.1”中的“Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">(?!pattern)</td>\n<td style=\"text-align:center\">非获取匹配，正向否定预查，在任何不匹配pattern的字符串开始处匹配查找字符串，该匹配不需要获取供以后使用。例如“Windows(?!95丨98丨NT丨2000)”能匹配“Windows3.1”中的“Windows”，但不能匹配“Windows2000”中的“Windows”。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">(?&lt;=pattern)</td>\n<td style=\"text-align:center\">非获取匹配，反向肯定预查，与正向肯定预查类似，只是方向相反。例如，“(?&lt;=95丨98丨NT丨2000)Windows”能匹配“2000Windows”中的“Windows”，但不能匹配“3.1Windows”中的“Windows”。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">(?&lt;!pattern)</td>\n<td style=\"text-align:center\">非获取匹配，反向否定预查，与正向否定预查类似，只是方向相反。例如“(?&lt;!95丨98丨NT丨2000)Windows”能匹配“3.1Windows”中的“Windows”，但不能匹配“2000Windows”中的“Windows”。这个地方不正确，有问题</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">x丨y</td>\n<td style=\"text-align:center\">匹配x或y。例如，“z丨food”能匹配“z”或“food”(此处请谨慎)。“(z丨f)ood”则匹配“zood”或“food”。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">[xyz]</td>\n<td style=\"text-align:center\">字符集合。匹配所包含的任意一个字符。例如，“[abc]”可以匹配“plain”中的“a”。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">[^xyz]</td>\n<td style=\"text-align:center\">负值字符集合。匹配未包含的任意字符。例如，“[^abc]”可以匹配“plain”中的“plin”。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">[a-z]</td>\n<td style=\"text-align:center\">字符范围。匹配指定范围内的任意字符。例如，“[a-z]”可以匹配“a”到“z”范围内的任意小写字母字符。注意:只有连字符在字符组内部时,并且出现在两个字符之间时,才能表示字符的范围; 如果出字符组的开头,则只能表示连字符本身.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">[^a-z]</td>\n<td style=\"text-align:center\">负值字符范围。匹配任何不在指定范围内的任意字符。例如，“[^a-z]”可以匹配任何不在“a”到“z”范围内的任意字符。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\b</td>\n<td style=\"text-align:center\">匹配一个单词边界，也就是指单词和空格间的位置（即正则表达式的“匹配”有两种概念，一种是匹配字符，一种是匹配位置，这里的\\b就是匹配位置的）。例如，“er\\b”可以匹配“never”中的“er”，但不能匹配“verb”中的“er”。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\B</td>\n<td style=\"text-align:center\">匹配非单词边界。“er\\B”能匹配“verb”中的“er”，但不能匹配“never”中的“er”。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\cx</td>\n<td style=\"text-align:center\">匹配由x指明的控制字符。例如，\\cM匹配一个Control-M或回车符。x的值必须为A-Z或a-z之一。否则，将c视为一个原义的“c”字符。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\d</td>\n<td style=\"text-align:center\">匹配一个数字字符。等价于[0-9]。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\D</td>\n<td style=\"text-align:center\">匹配一个非数字字符。等价于[^0-9]。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\f</td>\n<td style=\"text-align:center\">匹配一个换页符。等价于\\x0c和\\cL。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\n</td>\n<td style=\"text-align:center\">匹配一个换行符。等价于\\x0a和\\cJ。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\r</td>\n<td style=\"text-align:center\">匹配一个回车符。等价于\\x0d和\\cM。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\s</td>\n<td style=\"text-align:center\">匹配任何不可见字符，包括空格、制表符、换页符等等。等价于[ \\f\\n\\r\\t\\v]。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\S</td>\n<td style=\"text-align:center\">匹配任何可见字符。等价于[^ \\f\\n\\r\\t\\v]。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\t</td>\n<td style=\"text-align:center\">匹配一个制表符。等价于\\x09和\\cI。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\v</td>\n<td style=\"text-align:center\">匹配一个垂直制表符。等价于\\x0b和\\cK。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\w</td>\n<td style=\"text-align:center\">匹配包括下划线的任何单词字符。类似但不等价于“[A-Za-z0-9_]”，这里的”单词”字符使用Unicode字符集。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\W</td>\n<td style=\"text-align:center\">匹配任何非单词字符。等价于“[^A-Za-z0-9_]”。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\xn</td>\n<td style=\"text-align:center\">匹配n，其中n为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，“\\x41”匹配“A”。“\\x041”则等价于“\\x04&amp;1”。正则表达式中可以使用ASCII编码。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\num</td>\n<td style=\"text-align:center\">匹配num，其中num是一个正整数。对所获取的匹配的引用。例如，“(.)\\1”匹配两个连续的相同字符。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\n</td>\n<td style=\"text-align:center\">标识一个八进制转义值或一个向后引用。如果\\n之前至少n个获取的子表达式，则n为向后引用。否则，如果n为八进制数字（0-7），则n为一个八进制转义值。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\nm</td>\n<td style=\"text-align:center\">标识一个八进制转义值或一个向后引用。如果\\nm之前至少有nm个获得子表达式，则nm为向后引用。如果\\nm之前至少有n个获取，则n为一个后跟文字m的向后引用。如果前面的条件都不满足，若n和m均为八进制数字（0-7），则\\nm将匹配八进制转义值nm。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\nml</td>\n<td style=\"text-align:center\">如果n为八进制数字（0-7），且m和l均为八进制数字（0-7），则匹配八进制转义值nml。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\un</td>\n<td style=\"text-align:center\">匹配n，其中n是一个用四个十六进制数字表示的Unicode字符。例如，\\u00A9匹配版权符号（&copy;）。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\p{P}</td>\n<td style=\"text-align:center\">小写 p 是 property 的意思，表示 Unicode 属性，用于 Unicode 正表达式的前缀。中括号内的“P”表示Unicode 字符集七个字符属性之一：标点字符。</td>\n</tr>\n</tbody>\n</table>\n<p>其他六个属性：<br>L：字母；<br>M：标记符号（一般不会单独出现）；<br>Z：分隔符（比如空格、换行等）；<br>S：符号（比如数学符号、货币符号等）；<br>N：数字（比如阿拉伯数字、罗马数字等）；<br>C：其他字符。<br>*注：此语法部分语言不支持，例：javascript。<br>&lt; &gt;    匹配词（word）的开始（&lt;）和结束（&gt;）。例如正则表达式<the>能够匹配字符串”for the wise”中的”the”，但是不能匹配字符串”otherwise”中的”the”。注意：这个元字符不是所有的软件都支持的。<br>( )    将( 和 ) 之间的表达式定义为“组”（group），并且将匹配这个表达式的字符保存到一个临时区域（一个正则表达式中最多可以保存9个），它们可以用 \\1 到\\9 的符号来引用。<br>|    将两个匹配条件进行逻辑“或”（Or）运算。例如正则表达式(him|her) 匹配”it belongs to him”和”it belongs to her”，但是不能匹配”it belongs to them.”。注意：这个元字符不是所有的软件都支持的。</p>\n<ul>\n<li>匹配1或多个正好在它之前的那个字符。例如正则表达式9+匹配9、99、999等。注意：这个元字符不是所有的软件都支持的。<br>?    匹配0或1个正好在它之前的那个字符。注意：这个元字符不是所有的软件都支持的。<br>{i} {i,j}    匹配指定数目的字符，这些字符是在它之前的表达式定义的。例如正则表达式A[0-9]{3} 能够匹配字符”A”后面跟着正好3个数字字符的串，例如A123、A348等，但是不匹配A1234。而正则表达式[0-9]{4,6} 匹配连续的任意4个、5个或者6个数字</li>\n</ul>"},{"title":"浅析前端渲染机制","date":"2017-04-10T09:40:08.000Z","_content":"\n作为一个前端开发，最常见的运行环境应该是浏览器吧，为了更好的通过浏览器把优秀的产品带给用户，也为了更好的发展自己的前端职业之路，有必要了解从我们在浏览器地址栏输入网址到看到页面这期间浏览器是如何进行工作的,进而了解如何更好的优化实践，本篇主要围绕这两点展开阐述。前端页面渲染机制可谓是老生常谈，但又很有必要再谈的话题，于是还是决定写一篇，即是对知识的回顾总结，又能与大家分享，何乐而不为。网上相关类型的文章也很多，有兴趣的可以多学习一下。\n<!--more-->\n### 浏览器\n在介绍浏览器工作流程之前，先了解一下主流浏览器的基础结构，本文所介绍的浏览器主要为开源的Chrome，FireFox及部分开源的Safari，这也是目前市场占比最高的几大浏览器，以本人博客网站为例，可以大致看出各浏览器使用比例：\n![](http://blog.codingplayboy.com/wp-content/uploads/2017/03/browser-percent.png)\n##### 浏览器占比\n\n浏览器基础结构\n\n浏览器基础结构主要包括如下7部分：\n\n>* 1.用户界面（User Interface）:用户所看到及与之交互的功能组件，如地址栏，返回，前进按钮等；\n>* 2.浏览器引擎（Browser engine）:负责控制和管理下一级的渲染引擎；\n>* 3.渲染引擎（Rendering engine）:负责解析用户请求的内容（如HTML或XML，渲染引擎会解析HTML或XML，以及相关CSS，然后返回解析后的内容）；\n>* 4.网络（Networking）:负责处理网络相关的事务，如HTTP请求等；\n>* 5.UI后端（UI backend）:负责绘制提示框等浏览器组件，其底层使用的是操作系统的用户接口；\n>* 6.JavaScript解释器（JavaScript interpreter）:负责解析和执行JavaScript代码；\n>* 7.数据存储（Data storage）:负责持久存储诸如cookie和缓存等应用数据。\n浏览器基础结构\n![](http://blog.codingplayboy.com/wp-content/uploads/2017/03/browser-structure.png)\n#### 浏览器内核\n\n各大主要浏览器使用内核也是有差别的，大致可以分为以下几类：\n\n`Trident内核： IE`\n`Webkit内核：Chrome,Safari`\n`Gecko内核：FireFox`\n#### 网络\n当用户访问页面时，浏览器需要获取用户请求内容，这个过程主要涉及浏览器网络模块：\n\n1.用户在地址栏输入域名，如baidu.com，DNS（Domain Name System，域名解析系统）服务器根据输入的域名查找对应IP，然后向该IP地址发起请求；\nDNS\n\n2.浏览器获得并解析服务器的返回内容(HTTP response)；\n3.浏览器加载HTML文件及文件内包含的外部引用文件及图片，多媒体等资源。\nDNS预解析（DNS PREFETCH）\n\n浏览器DNS解析大多时候较快，且会缓存常用域名的解析值，但是如果网站涉及多域名，在对每一个域名访问时都需要先解析出IP地址，而我们希望在跳转或者请求其他域名资源时尽量快，则可以开启域名预解析，浏览器会在空闲时提前解析声明需要预解析的域名，如：\n![](http://blog.codingplayboy.com/wp-content/uploads/2017/03/dns-prefetch.png)\n#### 域名预解析\n\n多进程\n\n我们通常说JavaScript执行是单进程的，但是浏览器网络部分通常是有几个平行进程同时开启，但是也会有\n限制，一般为2-6个。\n\n##### 渲染引擎及关键渲染路径（Critical Rendering Path）\n渲染引擎所做的事是将请求内容展现给我们，默认支持HTML,XML和图片类型，对于其他诸如PDF等类型的内容则需要安装相应插件，但浏览器的展示工作流程基本是一样的。\n\n通过网络模块加载到HTML文件后渲染引擎渲染流程如下，这也通常被称作关键渲染路径（Critical Rendering Path）：\n\n>* 1.构建DOM树(DOM tree)：从上到下解析HTML文档生成DOM节点树（DOM tree），也叫内容树（content tree）；\n>* 2.构建CSSOM(CSS Object Model)树：加载解析样式生成CSSOM树；\n>* 3.执行JavaScript：加载并执行JavaScript代码（包括内联代码或外联JavaScript文件）；\n>* 4.构建渲染树(render tree)：根据DOM树和CSSOM树,生成渲染树(render tree)；`渲染树：按顺序展示在屏幕上的一系列矩形，这些矩形带有字体，颜色和尺寸等视觉属性。`\n\n>* 5.布局（layout）：根据渲染树将节点树的每一个节点布局在屏幕上的正确位置；\n\n>* 6.绘制（painting）：遍历渲染树绘制所有节点，为每一个节点适用对应的样式，这一过程是通过UI后端模块完成；\n关键渲染路径\n![](http://blog.codingplayboy.com/wp-content/uploads/2017/03/critical-rendering-path.png)\n为了更友好的用户体验，浏览器会尽可能快的展现内容，而不会等到文档所有内容到达才开始解析和构建/布局渲染树，而是每次处理一部分，并展现在屏幕上，这也是为什么我们经常可以看到页面加载的时候内容是从上到下一点一点展现的。\n\n##### 流程图\n\n###### Webkit渲染引擎流程如下图：\n![](http://blog.codingplayboy.com/wp-content/uploads/2017/03/webkit-render-flow.png)\n###### Gecko渲染引擎流程如下图：\n\n\n\n![](http://blog.codingplayboy.com/wp-content/uploads/2017/03/gecko-render-flow.jpg)\n\n如上图，Webkit浏览器和Gecko浏览器渲染流程大致相同,`不同`的是：\n```\n1.Webkit浏览器中的渲染树(render tree)，在Gecko浏览器中对应的则是框架树（frame tree）,渲染对象(render object)对应的是框架（frame）;\n2.Webkit中的布局（Layout）过程，在Gecko中称为回流（Reflow）,本质是一样的，后文会解释回流的另一层含义–重新布局；\n3.Gecko中HTML和DOM树中间多了一层内容池（Content sink）,可以理解成生成DOM元素的工厂。\n```\n##### 单进程\n\n不同于网络部分的多进程渲染引擎是单线程工作的，意味着渲染流程是一步一步渐进完成的。\n\n##### 解析文档(PARSER HTML)\n\n在详细介绍浏览器渲染文档之前，先应该理解浏览器如何解析文档：解析文档的顺序，对于CSS和JavaScript如何处理等。\n\n##### 解析顺序\n浏览器按从上到下的顺序扫描解析文档；\n\n##### 解析样式和脚本\n脚本\n\n或许是由于通常会在JavaScript脚本中改变文档DOM结构，于是浏览器以同步方式解析，加载和执行脚本，浏览器在解析文档时，当解析到<script>标签时，会解析其中的脚本（对于外链的JavaScript文件，需要先加载该文件内容，再进行解析），然后立即执行，这整个过程都会阻塞文档解析，直到脚本执行完才会继续解析文档。就是说由于脚本是同步加载和执行的，它会阻塞文档解析，这也解释了为什么现在通常建议将<script>标签放在标签前面，而不是放在<head>标签里。现在HTML5提供defer和async两个属性支持延迟和异步加载JavaScript文件，如：\n```\n<script defer src=\"script.js\">  \n```\n>* 改进\n\n针对上文说的脚本阻塞文档解析，主流浏览器如Chrome和FireFox等都有一些优化，比如在执行脚本时，开启另一个进程解析剩余的文档以找出并加载其他的待下载外部资源（不改变主进程的DOM树，仅优化加载外部资源）。\n\n>* 样式\n\n不同于脚本，浏览器对样式的处理并不会阻塞文档解析，大概是因为样式表并不会改变DOM结构。\n\n>* 样式表与脚本\n\n你可能想问样式是否会阻塞脚本文件的加载执行呢？正常情况是不会的，但是存在一个问题是通常我们会在脚本中请求样式信息，但是在文档解析时，如果样式尚未加载或解析，将会得到错误信息，对于这一问题，FireFox浏览器和Webkit浏览器处理策略不同：\n\n当存在有样式文件未被加载和解析时，FireFox浏览器会阻塞所有脚本；\n而Webkit浏览器只会阻塞操作了改文件内声明的样式属性的脚本。\n构建DOM树\n\nDOM，即文档对象模型（Document Object Model）,DOM树，即文档内所有节点构成的一个树形结构。\n\n假设浏览器获取返回的如下HTML文档：\n\n```\n    <!doctype html>\n    <html>\n    <head>\n      <link rel=\"stylesheet\" href=\"./theme.css\"></link>\n      <script src=\"./config.js\"></script>\n      <title>关键渲染路径</title>\n    </head>\n    <body>\n      <h1 class=\"title\">关键渲染路径</h1>\n      <p>关键渲染路径介绍</p>\n      <footer>@copyright2017</footer>\n    </body>\n    </html>\n```\n首先浏览器从上到下依次解析文档构建DOM树，如下：\n\n![](http://blog.codingplayboy.com/wp-content/uploads/2017/03/dom-tree.png)\n\n构建CSSOM树\n\nCSSOM，即CSS对象模型（CSS Object Model），CSSOM树，与DOM树结构相似，只是另外为每一个节点关联了样式信息。\n\ntheme.css样式内容如下：\n\n```\n    html, body {\n    width: 100%;\n    height: 100%;\n    background-color: #fcfcfc;\n    }\n    .title {\n    font-size: 20px;\n    }\n    .footer {\n    font-size: 12px;\n    color: #aaa;\n    }\n    ```\n构建CSSOM树如图：\n![](http://blog.codingplayboy.com/wp-content/uploads/2017/03/cssom-tree.png)\n\n执行JAVASCRIPT\n\n上文已经阐述了文档解析时对脚本的处理，我们得知脚本加载，解析和执行会阻塞文档解析，而在特殊情况下样式的加载和解析也会阻塞脚本，所以现在推荐的实践是<script>标签放在</body>标签前面。\n\n构建渲染树(RENDER TREE)\n\nDOM树和CSSOM树都构建完了，接着浏览器会构建渲染树：\n\n渲染树，代表一个文档的视觉展示，浏览器通过它将文档内容绘制在浏览器窗口，展示给用户，它由按顺序展示在屏幕上的一系列矩形对象组成，这些矩形对象都带有字体，颜色和尺寸，位置等视觉样式属性。对于这些矩对象，FireFox称之为框架（frame）,Webkit浏览器称之为渲染对象（render object, renderer），后文统称为渲染对象。\n这里把渲染树节点称为矩形对象，是因为，每一个渲染对象都代表着其对应DOM节点的CSS盒子,该盒子包含了尺寸，位置等几何信息，同时它指向一个样式对象包含其他视觉样式信息。\n\n渲染树与DOM树\n每一个渲染对象都对应着DOM节点，但是非视觉（隐藏，不占位）DOM元素不会插入渲染树，如<head>元素或声明display: none;的元素，渲染对象与DOM节点不是简单的一对一的关系，一个DOM可以对应一个渲染对象，但一个DOM元素也可能对应多个渲染对象，因为有很多元素不止包含一个CSS盒子，如当文本被折行时，会产生多个行盒，这些行会生成多个渲染对象；又如行内元素同时包含块元素和行内元素，则会创建一个匿名块级盒包含内部行内元素，此时一个DOM对应多个矩形对象（渲染对象）。\n\n渲染树及其对应DOM树如图：\n![](http://blog.codingplayboy.com/wp-content/uploads/2017/03/render-tree.png)\n\n图中渲染树viewport即视口，是文档的初始包含块，scroll代表滚动区域，详见CSS之视觉格式化模型(Visual Formatting Model)\n渲染树并不会包含显式或隐式地display：none;的标签元素。\n布局（LAYOUT）或回流（REFLOW，RELAYOUT）\n\n创建渲染树后，下一步就是布局（Layout）,或者叫回流（reflow,relayout），这个过程就是通过渲染树中渲染对象的信息，计算出每一个渲染对象的位置和尺寸，将其安置在浏览器窗口的正确位置，而有些时候我们会在文档布局完成后对DOM进行修改，这时候可能需要重新进行布局，也可称其为回流，本质上还是一个布局的过程，每一个渲染对象都有一个布局或者回流方法，实现其布局或回流。\n\n流（flow）\nHTML采用的是基于流的方式定位布局，其按照从左到右，从上到下的顺序进行排列，详见CSS定位机制。\n\n全局布局与局部布局\n对渲染树的布局可以分为全局和局部的，全局即对整个渲染树进行重新布局，如当我们改变了窗口尺寸或方向或者是修改了根元素的尺寸或者字体大小等；而局部布局可以是对渲染树的某部分或某一个渲染对象进行重新布局。\n\n脏位系统（dirty bit system）\n大多数web应用对DOM的操作都是比较频繁，这意味着经常需要对DOM进行布局和回流，而如果仅仅是一些小改变，就触发整个渲染树的回流，这显然是不好的，为了避免这种情况，浏览器使用了脏位系统，只有一个渲染对象改变了或者某渲染对象及其子渲染对象脏位值为”dirty”时，说明需要回流。\n\n表示需要布局的脏位值有两种：\n\n“dirty”–自身改变，需要回流\n“children are dirty”–子节点改变，需要回流\n布局过程\n布局是一个从上到下，从外到内进行的递归过程，从根渲染对象，即对应着HTML文档根元素<html>，然后下一级渲染对象，如对应着<body>元素，如此层层递归，依次计算每一个渲染对象的几何信息（位置和尺寸）。\n\n几何信息-位置和尺寸，即相对于窗口的坐标和尺寸，如根渲染对象，其坐标为（0， 0），尺寸即是视口\n尺寸（浏览器窗口的可视区域）。\n\n每一个渲染对象的布局流程基本如：\n\n1.计算此渲染对象的宽度（width）；\n2.遍历此渲染对象的所有子级，依次：\n2.1设置子级渲染对象的坐标\n2.2判断是否需要触发子渲染对象的布局或回流方法，计算子渲染对象的高度（height）\n3.设置此渲染对象的高度：根据子渲染对象的累积高，margin和padding的高度设置其高度；\n4.设置此渲染对象脏位值为false。\n强制回流\n在渲染树布局完成后，再次操作文档，改变文档的内容或结构，或者元素定位时，会触发回流，即需要重新布局，如请求某DOM的”offsetHeight”样式信息等诸多情况：\n\nDOM操作，如增加，删除，修改或移动；\n变更内容；\n激活伪类；\n访问或改变某些CSS属性（包括修改样式表或元素类名或使用JavaScript操作等方式）；\n浏览器窗口变化（滚动或尺寸变化）\n\n    $('body').css('padding'); // reflow\n\n有过CSS3动画开发经验的同学可能会有经历，如下入场动画：\n\n\n    .slide-left {\n        -webkit-transition: margin-left 1s ease-out;\n            -moz-transition: margin-left 1s ease-out;\n            -o-transition: margin-left 1s ease-out;\n            transition: margin-left 1s ease-out;\n    }\n\n然后执行如下脚本：\n\n    var $slide = $('.slide-left');\n    $slide.css({\n        \"margin-left\": \"100px\"\n    }).addClass('slide-left');\n    $slide.css({\n        \"margin-left\": \"10px\"\n    });\n\n我们会发现并没有效果，为什么呢？因为对margin-left的修改并没有触发回流，元素margin-left值的改变被缓存，如果我们在中间强制触发回流：\n\n    var $slide = $('.slide-left');\n    $slide.css({\n        \"margin-left\": \"100px\"\n    });\n    console.log($slide.css('padding');\n    $slide.addClass('slide-left');\n    $slide.css({\n        \"margin-left\": \"10px\"\n    });\n\n再看就达到了预期效果。\n\n>*  绘制（PAINTING）\n\n最后是绘制(paint)阶段或重绘（repaint）阶段，浏览器UI组件将遍历渲染树并调用渲染对象的绘制（paint）方法，将内容展现在屏幕上，也有可能在之后对DOM进行修改，需要重新绘制渲染对象，也就是重绘，绘制和重绘的关系可以参考布局和回流的关系。\n\n>* 全局与局部绘制\n与布局相似，绘制也分为全局和局部绘制，即对整个渲染树或某些渲染对象进行绘制。\n\n>* 触发重绘\n我们已经知道很多操作可能会触发回流，那么什么时候可能触发重绘呢，通常，当改变元素的视觉样式，如background-color,visibility，margin，padding或字体颜色时会触发全局或局部重绘，如：\n\n\n    $('body').css('color', 'red'); // repaint\n    $('body').css('margin', '2px'); // reflow, repaint\n>* 页面渲染优化\n浏览器对上文介绍的关键渲染路径进行了很多优化，针对每一次变化产生尽量少的操作，还有优化判断重新绘制或布局的方式等等。\n\n在改变文档根元素的字体颜色等视觉性信息时，会触发整个文档的重绘，而改变某元素的字体颜色则只触发特定元素的重绘；改变元素的位置信息会同时触发此元素（可能还包括其兄弟元素或子级元素）的布局和重绘。某些重大改变，如更改文档根元素<html>的字体尺寸，则会触发整个文档的重新布局和重绘，据此及上文所述，推荐以下优化和实践：\n`\n>* 1.HTML文档结构层次尽量少，最好不深于六层；\n>* 2.脚本尽量后放，放在</body>前即可；\n>* 3.少量首屏样式内联放在<head>标签内；\n>* 4.样式结构层次尽量简单；\n>* 5.在脚本中尽量减少DOM操作，尽量缓存访问DOM的样式信息，避免过度触发回流；\n>* 6.减少通过JavaScript代码修改元素样式，尽量使用修改class名方式操作样式或动画；\n>* 7.动画尽量使用在绝对定位或固定定位的元素上；\n>* 8.隐藏在屏幕外，或在页面滚动时，尽量停止动画；\n>* 9.尽量缓存DOM查找，查找器尽量简洁；\n>* 10.涉及多域名的网站，可以开启域名预解析\n`\n\n实例\n当我们访问一个页面时，浏览器渲染事件详细日志图如下：\n![](http://blog.codingplayboy.com/wp-content/uploads/2017/03/browser-workflow.png)\n浏览器渲染事件日志\n\n`1.发起请求；`\n`2.解析HTML；`\n`3.解析样式；`\n`4.执行JavaScript；`\n`5.布局；`\n`6.绘制`\n","source":"_posts/浅析前端渲染机制.md","raw":"---\ntitle: 浅析前端渲染机制\ndate: 2017-04-10 17:40:08\ntags: \"渲染机制\"\ncategories:\n    - '前端'\n    - '知识点'\n---\n\n作为一个前端开发，最常见的运行环境应该是浏览器吧，为了更好的通过浏览器把优秀的产品带给用户，也为了更好的发展自己的前端职业之路，有必要了解从我们在浏览器地址栏输入网址到看到页面这期间浏览器是如何进行工作的,进而了解如何更好的优化实践，本篇主要围绕这两点展开阐述。前端页面渲染机制可谓是老生常谈，但又很有必要再谈的话题，于是还是决定写一篇，即是对知识的回顾总结，又能与大家分享，何乐而不为。网上相关类型的文章也很多，有兴趣的可以多学习一下。\n<!--more-->\n### 浏览器\n在介绍浏览器工作流程之前，先了解一下主流浏览器的基础结构，本文所介绍的浏览器主要为开源的Chrome，FireFox及部分开源的Safari，这也是目前市场占比最高的几大浏览器，以本人博客网站为例，可以大致看出各浏览器使用比例：\n![](http://blog.codingplayboy.com/wp-content/uploads/2017/03/browser-percent.png)\n##### 浏览器占比\n\n浏览器基础结构\n\n浏览器基础结构主要包括如下7部分：\n\n>* 1.用户界面（User Interface）:用户所看到及与之交互的功能组件，如地址栏，返回，前进按钮等；\n>* 2.浏览器引擎（Browser engine）:负责控制和管理下一级的渲染引擎；\n>* 3.渲染引擎（Rendering engine）:负责解析用户请求的内容（如HTML或XML，渲染引擎会解析HTML或XML，以及相关CSS，然后返回解析后的内容）；\n>* 4.网络（Networking）:负责处理网络相关的事务，如HTTP请求等；\n>* 5.UI后端（UI backend）:负责绘制提示框等浏览器组件，其底层使用的是操作系统的用户接口；\n>* 6.JavaScript解释器（JavaScript interpreter）:负责解析和执行JavaScript代码；\n>* 7.数据存储（Data storage）:负责持久存储诸如cookie和缓存等应用数据。\n浏览器基础结构\n![](http://blog.codingplayboy.com/wp-content/uploads/2017/03/browser-structure.png)\n#### 浏览器内核\n\n各大主要浏览器使用内核也是有差别的，大致可以分为以下几类：\n\n`Trident内核： IE`\n`Webkit内核：Chrome,Safari`\n`Gecko内核：FireFox`\n#### 网络\n当用户访问页面时，浏览器需要获取用户请求内容，这个过程主要涉及浏览器网络模块：\n\n1.用户在地址栏输入域名，如baidu.com，DNS（Domain Name System，域名解析系统）服务器根据输入的域名查找对应IP，然后向该IP地址发起请求；\nDNS\n\n2.浏览器获得并解析服务器的返回内容(HTTP response)；\n3.浏览器加载HTML文件及文件内包含的外部引用文件及图片，多媒体等资源。\nDNS预解析（DNS PREFETCH）\n\n浏览器DNS解析大多时候较快，且会缓存常用域名的解析值，但是如果网站涉及多域名，在对每一个域名访问时都需要先解析出IP地址，而我们希望在跳转或者请求其他域名资源时尽量快，则可以开启域名预解析，浏览器会在空闲时提前解析声明需要预解析的域名，如：\n![](http://blog.codingplayboy.com/wp-content/uploads/2017/03/dns-prefetch.png)\n#### 域名预解析\n\n多进程\n\n我们通常说JavaScript执行是单进程的，但是浏览器网络部分通常是有几个平行进程同时开启，但是也会有\n限制，一般为2-6个。\n\n##### 渲染引擎及关键渲染路径（Critical Rendering Path）\n渲染引擎所做的事是将请求内容展现给我们，默认支持HTML,XML和图片类型，对于其他诸如PDF等类型的内容则需要安装相应插件，但浏览器的展示工作流程基本是一样的。\n\n通过网络模块加载到HTML文件后渲染引擎渲染流程如下，这也通常被称作关键渲染路径（Critical Rendering Path）：\n\n>* 1.构建DOM树(DOM tree)：从上到下解析HTML文档生成DOM节点树（DOM tree），也叫内容树（content tree）；\n>* 2.构建CSSOM(CSS Object Model)树：加载解析样式生成CSSOM树；\n>* 3.执行JavaScript：加载并执行JavaScript代码（包括内联代码或外联JavaScript文件）；\n>* 4.构建渲染树(render tree)：根据DOM树和CSSOM树,生成渲染树(render tree)；`渲染树：按顺序展示在屏幕上的一系列矩形，这些矩形带有字体，颜色和尺寸等视觉属性。`\n\n>* 5.布局（layout）：根据渲染树将节点树的每一个节点布局在屏幕上的正确位置；\n\n>* 6.绘制（painting）：遍历渲染树绘制所有节点，为每一个节点适用对应的样式，这一过程是通过UI后端模块完成；\n关键渲染路径\n![](http://blog.codingplayboy.com/wp-content/uploads/2017/03/critical-rendering-path.png)\n为了更友好的用户体验，浏览器会尽可能快的展现内容，而不会等到文档所有内容到达才开始解析和构建/布局渲染树，而是每次处理一部分，并展现在屏幕上，这也是为什么我们经常可以看到页面加载的时候内容是从上到下一点一点展现的。\n\n##### 流程图\n\n###### Webkit渲染引擎流程如下图：\n![](http://blog.codingplayboy.com/wp-content/uploads/2017/03/webkit-render-flow.png)\n###### Gecko渲染引擎流程如下图：\n\n\n\n![](http://blog.codingplayboy.com/wp-content/uploads/2017/03/gecko-render-flow.jpg)\n\n如上图，Webkit浏览器和Gecko浏览器渲染流程大致相同,`不同`的是：\n```\n1.Webkit浏览器中的渲染树(render tree)，在Gecko浏览器中对应的则是框架树（frame tree）,渲染对象(render object)对应的是框架（frame）;\n2.Webkit中的布局（Layout）过程，在Gecko中称为回流（Reflow）,本质是一样的，后文会解释回流的另一层含义–重新布局；\n3.Gecko中HTML和DOM树中间多了一层内容池（Content sink）,可以理解成生成DOM元素的工厂。\n```\n##### 单进程\n\n不同于网络部分的多进程渲染引擎是单线程工作的，意味着渲染流程是一步一步渐进完成的。\n\n##### 解析文档(PARSER HTML)\n\n在详细介绍浏览器渲染文档之前，先应该理解浏览器如何解析文档：解析文档的顺序，对于CSS和JavaScript如何处理等。\n\n##### 解析顺序\n浏览器按从上到下的顺序扫描解析文档；\n\n##### 解析样式和脚本\n脚本\n\n或许是由于通常会在JavaScript脚本中改变文档DOM结构，于是浏览器以同步方式解析，加载和执行脚本，浏览器在解析文档时，当解析到<script>标签时，会解析其中的脚本（对于外链的JavaScript文件，需要先加载该文件内容，再进行解析），然后立即执行，这整个过程都会阻塞文档解析，直到脚本执行完才会继续解析文档。就是说由于脚本是同步加载和执行的，它会阻塞文档解析，这也解释了为什么现在通常建议将<script>标签放在标签前面，而不是放在<head>标签里。现在HTML5提供defer和async两个属性支持延迟和异步加载JavaScript文件，如：\n```\n<script defer src=\"script.js\">  \n```\n>* 改进\n\n针对上文说的脚本阻塞文档解析，主流浏览器如Chrome和FireFox等都有一些优化，比如在执行脚本时，开启另一个进程解析剩余的文档以找出并加载其他的待下载外部资源（不改变主进程的DOM树，仅优化加载外部资源）。\n\n>* 样式\n\n不同于脚本，浏览器对样式的处理并不会阻塞文档解析，大概是因为样式表并不会改变DOM结构。\n\n>* 样式表与脚本\n\n你可能想问样式是否会阻塞脚本文件的加载执行呢？正常情况是不会的，但是存在一个问题是通常我们会在脚本中请求样式信息，但是在文档解析时，如果样式尚未加载或解析，将会得到错误信息，对于这一问题，FireFox浏览器和Webkit浏览器处理策略不同：\n\n当存在有样式文件未被加载和解析时，FireFox浏览器会阻塞所有脚本；\n而Webkit浏览器只会阻塞操作了改文件内声明的样式属性的脚本。\n构建DOM树\n\nDOM，即文档对象模型（Document Object Model）,DOM树，即文档内所有节点构成的一个树形结构。\n\n假设浏览器获取返回的如下HTML文档：\n\n```\n    <!doctype html>\n    <html>\n    <head>\n      <link rel=\"stylesheet\" href=\"./theme.css\"></link>\n      <script src=\"./config.js\"></script>\n      <title>关键渲染路径</title>\n    </head>\n    <body>\n      <h1 class=\"title\">关键渲染路径</h1>\n      <p>关键渲染路径介绍</p>\n      <footer>@copyright2017</footer>\n    </body>\n    </html>\n```\n首先浏览器从上到下依次解析文档构建DOM树，如下：\n\n![](http://blog.codingplayboy.com/wp-content/uploads/2017/03/dom-tree.png)\n\n构建CSSOM树\n\nCSSOM，即CSS对象模型（CSS Object Model），CSSOM树，与DOM树结构相似，只是另外为每一个节点关联了样式信息。\n\ntheme.css样式内容如下：\n\n```\n    html, body {\n    width: 100%;\n    height: 100%;\n    background-color: #fcfcfc;\n    }\n    .title {\n    font-size: 20px;\n    }\n    .footer {\n    font-size: 12px;\n    color: #aaa;\n    }\n    ```\n构建CSSOM树如图：\n![](http://blog.codingplayboy.com/wp-content/uploads/2017/03/cssom-tree.png)\n\n执行JAVASCRIPT\n\n上文已经阐述了文档解析时对脚本的处理，我们得知脚本加载，解析和执行会阻塞文档解析，而在特殊情况下样式的加载和解析也会阻塞脚本，所以现在推荐的实践是<script>标签放在</body>标签前面。\n\n构建渲染树(RENDER TREE)\n\nDOM树和CSSOM树都构建完了，接着浏览器会构建渲染树：\n\n渲染树，代表一个文档的视觉展示，浏览器通过它将文档内容绘制在浏览器窗口，展示给用户，它由按顺序展示在屏幕上的一系列矩形对象组成，这些矩形对象都带有字体，颜色和尺寸，位置等视觉样式属性。对于这些矩对象，FireFox称之为框架（frame）,Webkit浏览器称之为渲染对象（render object, renderer），后文统称为渲染对象。\n这里把渲染树节点称为矩形对象，是因为，每一个渲染对象都代表着其对应DOM节点的CSS盒子,该盒子包含了尺寸，位置等几何信息，同时它指向一个样式对象包含其他视觉样式信息。\n\n渲染树与DOM树\n每一个渲染对象都对应着DOM节点，但是非视觉（隐藏，不占位）DOM元素不会插入渲染树，如<head>元素或声明display: none;的元素，渲染对象与DOM节点不是简单的一对一的关系，一个DOM可以对应一个渲染对象，但一个DOM元素也可能对应多个渲染对象，因为有很多元素不止包含一个CSS盒子，如当文本被折行时，会产生多个行盒，这些行会生成多个渲染对象；又如行内元素同时包含块元素和行内元素，则会创建一个匿名块级盒包含内部行内元素，此时一个DOM对应多个矩形对象（渲染对象）。\n\n渲染树及其对应DOM树如图：\n![](http://blog.codingplayboy.com/wp-content/uploads/2017/03/render-tree.png)\n\n图中渲染树viewport即视口，是文档的初始包含块，scroll代表滚动区域，详见CSS之视觉格式化模型(Visual Formatting Model)\n渲染树并不会包含显式或隐式地display：none;的标签元素。\n布局（LAYOUT）或回流（REFLOW，RELAYOUT）\n\n创建渲染树后，下一步就是布局（Layout）,或者叫回流（reflow,relayout），这个过程就是通过渲染树中渲染对象的信息，计算出每一个渲染对象的位置和尺寸，将其安置在浏览器窗口的正确位置，而有些时候我们会在文档布局完成后对DOM进行修改，这时候可能需要重新进行布局，也可称其为回流，本质上还是一个布局的过程，每一个渲染对象都有一个布局或者回流方法，实现其布局或回流。\n\n流（flow）\nHTML采用的是基于流的方式定位布局，其按照从左到右，从上到下的顺序进行排列，详见CSS定位机制。\n\n全局布局与局部布局\n对渲染树的布局可以分为全局和局部的，全局即对整个渲染树进行重新布局，如当我们改变了窗口尺寸或方向或者是修改了根元素的尺寸或者字体大小等；而局部布局可以是对渲染树的某部分或某一个渲染对象进行重新布局。\n\n脏位系统（dirty bit system）\n大多数web应用对DOM的操作都是比较频繁，这意味着经常需要对DOM进行布局和回流，而如果仅仅是一些小改变，就触发整个渲染树的回流，这显然是不好的，为了避免这种情况，浏览器使用了脏位系统，只有一个渲染对象改变了或者某渲染对象及其子渲染对象脏位值为”dirty”时，说明需要回流。\n\n表示需要布局的脏位值有两种：\n\n“dirty”–自身改变，需要回流\n“children are dirty”–子节点改变，需要回流\n布局过程\n布局是一个从上到下，从外到内进行的递归过程，从根渲染对象，即对应着HTML文档根元素<html>，然后下一级渲染对象，如对应着<body>元素，如此层层递归，依次计算每一个渲染对象的几何信息（位置和尺寸）。\n\n几何信息-位置和尺寸，即相对于窗口的坐标和尺寸，如根渲染对象，其坐标为（0， 0），尺寸即是视口\n尺寸（浏览器窗口的可视区域）。\n\n每一个渲染对象的布局流程基本如：\n\n1.计算此渲染对象的宽度（width）；\n2.遍历此渲染对象的所有子级，依次：\n2.1设置子级渲染对象的坐标\n2.2判断是否需要触发子渲染对象的布局或回流方法，计算子渲染对象的高度（height）\n3.设置此渲染对象的高度：根据子渲染对象的累积高，margin和padding的高度设置其高度；\n4.设置此渲染对象脏位值为false。\n强制回流\n在渲染树布局完成后，再次操作文档，改变文档的内容或结构，或者元素定位时，会触发回流，即需要重新布局，如请求某DOM的”offsetHeight”样式信息等诸多情况：\n\nDOM操作，如增加，删除，修改或移动；\n变更内容；\n激活伪类；\n访问或改变某些CSS属性（包括修改样式表或元素类名或使用JavaScript操作等方式）；\n浏览器窗口变化（滚动或尺寸变化）\n\n    $('body').css('padding'); // reflow\n\n有过CSS3动画开发经验的同学可能会有经历，如下入场动画：\n\n\n    .slide-left {\n        -webkit-transition: margin-left 1s ease-out;\n            -moz-transition: margin-left 1s ease-out;\n            -o-transition: margin-left 1s ease-out;\n            transition: margin-left 1s ease-out;\n    }\n\n然后执行如下脚本：\n\n    var $slide = $('.slide-left');\n    $slide.css({\n        \"margin-left\": \"100px\"\n    }).addClass('slide-left');\n    $slide.css({\n        \"margin-left\": \"10px\"\n    });\n\n我们会发现并没有效果，为什么呢？因为对margin-left的修改并没有触发回流，元素margin-left值的改变被缓存，如果我们在中间强制触发回流：\n\n    var $slide = $('.slide-left');\n    $slide.css({\n        \"margin-left\": \"100px\"\n    });\n    console.log($slide.css('padding');\n    $slide.addClass('slide-left');\n    $slide.css({\n        \"margin-left\": \"10px\"\n    });\n\n再看就达到了预期效果。\n\n>*  绘制（PAINTING）\n\n最后是绘制(paint)阶段或重绘（repaint）阶段，浏览器UI组件将遍历渲染树并调用渲染对象的绘制（paint）方法，将内容展现在屏幕上，也有可能在之后对DOM进行修改，需要重新绘制渲染对象，也就是重绘，绘制和重绘的关系可以参考布局和回流的关系。\n\n>* 全局与局部绘制\n与布局相似，绘制也分为全局和局部绘制，即对整个渲染树或某些渲染对象进行绘制。\n\n>* 触发重绘\n我们已经知道很多操作可能会触发回流，那么什么时候可能触发重绘呢，通常，当改变元素的视觉样式，如background-color,visibility，margin，padding或字体颜色时会触发全局或局部重绘，如：\n\n\n    $('body').css('color', 'red'); // repaint\n    $('body').css('margin', '2px'); // reflow, repaint\n>* 页面渲染优化\n浏览器对上文介绍的关键渲染路径进行了很多优化，针对每一次变化产生尽量少的操作，还有优化判断重新绘制或布局的方式等等。\n\n在改变文档根元素的字体颜色等视觉性信息时，会触发整个文档的重绘，而改变某元素的字体颜色则只触发特定元素的重绘；改变元素的位置信息会同时触发此元素（可能还包括其兄弟元素或子级元素）的布局和重绘。某些重大改变，如更改文档根元素<html>的字体尺寸，则会触发整个文档的重新布局和重绘，据此及上文所述，推荐以下优化和实践：\n`\n>* 1.HTML文档结构层次尽量少，最好不深于六层；\n>* 2.脚本尽量后放，放在</body>前即可；\n>* 3.少量首屏样式内联放在<head>标签内；\n>* 4.样式结构层次尽量简单；\n>* 5.在脚本中尽量减少DOM操作，尽量缓存访问DOM的样式信息，避免过度触发回流；\n>* 6.减少通过JavaScript代码修改元素样式，尽量使用修改class名方式操作样式或动画；\n>* 7.动画尽量使用在绝对定位或固定定位的元素上；\n>* 8.隐藏在屏幕外，或在页面滚动时，尽量停止动画；\n>* 9.尽量缓存DOM查找，查找器尽量简洁；\n>* 10.涉及多域名的网站，可以开启域名预解析\n`\n\n实例\n当我们访问一个页面时，浏览器渲染事件详细日志图如下：\n![](http://blog.codingplayboy.com/wp-content/uploads/2017/03/browser-workflow.png)\n浏览器渲染事件日志\n\n`1.发起请求；`\n`2.解析HTML；`\n`3.解析样式；`\n`4.执行JavaScript；`\n`5.布局；`\n`6.绘制`\n","slug":"浅析前端渲染机制","published":1,"updated":"2017-04-15T03:29:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5naxw5d001ufcxeu3ejbpbu","content":"<p>作为一个前端开发，最常见的运行环境应该是浏览器吧，为了更好的通过浏览器把优秀的产品带给用户，也为了更好的发展自己的前端职业之路，有必要了解从我们在浏览器地址栏输入网址到看到页面这期间浏览器是如何进行工作的,进而了解如何更好的优化实践，本篇主要围绕这两点展开阐述。前端页面渲染机制可谓是老生常谈，但又很有必要再谈的话题，于是还是决定写一篇，即是对知识的回顾总结，又能与大家分享，何乐而不为。网上相关类型的文章也很多，有兴趣的可以多学习一下。<br><a id=\"more\"></a></p>\n<h3 id=\"浏览器\"><a href=\"#浏览器\" class=\"headerlink\" title=\"浏览器\"></a>浏览器</h3><p>在介绍浏览器工作流程之前，先了解一下主流浏览器的基础结构，本文所介绍的浏览器主要为开源的Chrome，FireFox及部分开源的Safari，这也是目前市场占比最高的几大浏览器，以本人博客网站为例，可以大致看出各浏览器使用比例：<br><img src=\"http://blog.codingplayboy.com/wp-content/uploads/2017/03/browser-percent.png\" alt=\"\"></p>\n<h5 id=\"浏览器占比\"><a href=\"#浏览器占比\" class=\"headerlink\" title=\"浏览器占比\"></a>浏览器占比</h5><p>浏览器基础结构</p>\n<p>浏览器基础结构主要包括如下7部分：</p>\n<blockquote>\n<ul>\n<li>1.用户界面（User Interface）:用户所看到及与之交互的功能组件，如地址栏，返回，前进按钮等；</li>\n<li>2.浏览器引擎（Browser engine）:负责控制和管理下一级的渲染引擎；</li>\n<li>3.渲染引擎（Rendering engine）:负责解析用户请求的内容（如HTML或XML，渲染引擎会解析HTML或XML，以及相关CSS，然后返回解析后的内容）；</li>\n<li>4.网络（Networking）:负责处理网络相关的事务，如HTTP请求等；</li>\n<li>5.UI后端（UI backend）:负责绘制提示框等浏览器组件，其底层使用的是操作系统的用户接口；</li>\n<li>6.JavaScript解释器（JavaScript interpreter）:负责解析和执行JavaScript代码；</li>\n<li>7.数据存储（Data storage）:负责持久存储诸如cookie和缓存等应用数据。<br>浏览器基础结构<br><img src=\"http://blog.codingplayboy.com/wp-content/uploads/2017/03/browser-structure.png\" alt=\"\"><h4 id=\"浏览器内核\"><a href=\"#浏览器内核\" class=\"headerlink\" title=\"浏览器内核\"></a>浏览器内核</h4></li>\n</ul>\n</blockquote>\n<p>各大主要浏览器使用内核也是有差别的，大致可以分为以下几类：</p>\n<p><code>Trident内核： IE</code><br><code>Webkit内核：Chrome,Safari</code><br><code>Gecko内核：FireFox</code></p>\n<h4 id=\"网络\"><a href=\"#网络\" class=\"headerlink\" title=\"网络\"></a>网络</h4><p>当用户访问页面时，浏览器需要获取用户请求内容，这个过程主要涉及浏览器网络模块：</p>\n<p>1.用户在地址栏输入域名，如baidu.com，DNS（Domain Name System，域名解析系统）服务器根据输入的域名查找对应IP，然后向该IP地址发起请求；<br>DNS</p>\n<p>2.浏览器获得并解析服务器的返回内容(HTTP response)；<br>3.浏览器加载HTML文件及文件内包含的外部引用文件及图片，多媒体等资源。<br>DNS预解析（DNS PREFETCH）</p>\n<p>浏览器DNS解析大多时候较快，且会缓存常用域名的解析值，但是如果网站涉及多域名，在对每一个域名访问时都需要先解析出IP地址，而我们希望在跳转或者请求其他域名资源时尽量快，则可以开启域名预解析，浏览器会在空闲时提前解析声明需要预解析的域名，如：<br><img src=\"http://blog.codingplayboy.com/wp-content/uploads/2017/03/dns-prefetch.png\" alt=\"\"></p>\n<h4 id=\"域名预解析\"><a href=\"#域名预解析\" class=\"headerlink\" title=\"域名预解析\"></a>域名预解析</h4><p>多进程</p>\n<p>我们通常说JavaScript执行是单进程的，但是浏览器网络部分通常是有几个平行进程同时开启，但是也会有<br>限制，一般为2-6个。</p>\n<h5 id=\"渲染引擎及关键渲染路径（Critical-Rendering-Path）\"><a href=\"#渲染引擎及关键渲染路径（Critical-Rendering-Path）\" class=\"headerlink\" title=\"渲染引擎及关键渲染路径（Critical Rendering Path）\"></a>渲染引擎及关键渲染路径（Critical Rendering Path）</h5><p>渲染引擎所做的事是将请求内容展现给我们，默认支持HTML,XML和图片类型，对于其他诸如PDF等类型的内容则需要安装相应插件，但浏览器的展示工作流程基本是一样的。</p>\n<p>通过网络模块加载到HTML文件后渲染引擎渲染流程如下，这也通常被称作关键渲染路径（Critical Rendering Path）：</p>\n<blockquote>\n<ul>\n<li>1.构建DOM树(DOM tree)：从上到下解析HTML文档生成DOM节点树（DOM tree），也叫内容树（content tree）；</li>\n<li>2.构建CSSOM(CSS Object Model)树：加载解析样式生成CSSOM树；</li>\n<li>3.执行JavaScript：加载并执行JavaScript代码（包括内联代码或外联JavaScript文件）；</li>\n<li><p>4.构建渲染树(render tree)：根据DOM树和CSSOM树,生成渲染树(render tree)；<code>渲染树：按顺序展示在屏幕上的一系列矩形，这些矩形带有字体，颜色和尺寸等视觉属性。</code></p>\n</li>\n<li><p>5.布局（layout）：根据渲染树将节点树的每一个节点布局在屏幕上的正确位置；</p>\n</li>\n<li><p>6.绘制（painting）：遍历渲染树绘制所有节点，为每一个节点适用对应的样式，这一过程是通过UI后端模块完成；<br>关键渲染路径<br><img src=\"http://blog.codingplayboy.com/wp-content/uploads/2017/03/critical-rendering-path.png\" alt=\"\"><br>为了更友好的用户体验，浏览器会尽可能快的展现内容，而不会等到文档所有内容到达才开始解析和构建/布局渲染树，而是每次处理一部分，并展现在屏幕上，这也是为什么我们经常可以看到页面加载的时候内容是从上到下一点一点展现的。</p>\n</li>\n</ul>\n</blockquote>\n<h5 id=\"流程图\"><a href=\"#流程图\" class=\"headerlink\" title=\"流程图\"></a>流程图</h5><h6 id=\"Webkit渲染引擎流程如下图：\"><a href=\"#Webkit渲染引擎流程如下图：\" class=\"headerlink\" title=\"Webkit渲染引擎流程如下图：\"></a>Webkit渲染引擎流程如下图：</h6><p><img src=\"http://blog.codingplayboy.com/wp-content/uploads/2017/03/webkit-render-flow.png\" alt=\"\"></p>\n<h6 id=\"Gecko渲染引擎流程如下图：\"><a href=\"#Gecko渲染引擎流程如下图：\" class=\"headerlink\" title=\"Gecko渲染引擎流程如下图：\"></a>Gecko渲染引擎流程如下图：</h6><p><img src=\"http://blog.codingplayboy.com/wp-content/uploads/2017/03/gecko-render-flow.jpg\" alt=\"\"></p>\n<p>如上图，Webkit浏览器和Gecko浏览器渲染流程大致相同,<code>不同</code>的是：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">1.Webkit浏览器中的渲染树(render tree)，在Gecko浏览器中对应的则是框架树（frame tree）,渲染对象(render object)对应的是框架（frame）;</div><div class=\"line\">2.Webkit中的布局（Layout）过程，在Gecko中称为回流（Reflow）,本质是一样的，后文会解释回流的另一层含义–重新布局；</div><div class=\"line\">3.Gecko中HTML和DOM树中间多了一层内容池（Content sink）,可以理解成生成DOM元素的工厂。</div></pre></td></tr></table></figure></p>\n<h5 id=\"单进程\"><a href=\"#单进程\" class=\"headerlink\" title=\"单进程\"></a>单进程</h5><p>不同于网络部分的多进程渲染引擎是单线程工作的，意味着渲染流程是一步一步渐进完成的。</p>\n<h5 id=\"解析文档-PARSER-HTML\"><a href=\"#解析文档-PARSER-HTML\" class=\"headerlink\" title=\"解析文档(PARSER HTML)\"></a>解析文档(PARSER HTML)</h5><p>在详细介绍浏览器渲染文档之前，先应该理解浏览器如何解析文档：解析文档的顺序，对于CSS和JavaScript如何处理等。</p>\n<h5 id=\"解析顺序\"><a href=\"#解析顺序\" class=\"headerlink\" title=\"解析顺序\"></a>解析顺序</h5><p>浏览器按从上到下的顺序扫描解析文档；</p>\n<h5 id=\"解析样式和脚本\"><a href=\"#解析样式和脚本\" class=\"headerlink\" title=\"解析样式和脚本\"></a>解析样式和脚本</h5><p>脚本</p>\n<p>或许是由于通常会在JavaScript脚本中改变文档DOM结构，于是浏览器以同步方式解析，加载和执行脚本，浏览器在解析文档时，当解析到<script>标签时，会解析其中的脚本（对于外链的JavaScript文件，需要先加载该文件内容，再进行解析），然后立即执行，这整个过程都会阻塞文档解析，直到脚本执行完才会继续解析文档。就是说由于脚本是同步加载和执行的，它会阻塞文档解析，这也解释了为什么现在通常建议将<script>标签放在标签前面，而不是放在<head>标签里。现在HTML5提供defer和async两个属性支持延迟和异步加载JavaScript文件，如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script defer src=&quot;script.js&quot;&gt;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<ul>\n<li>改进</li>\n</ul>\n</blockquote>\n<p>针对上文说的脚本阻塞文档解析，主流浏览器如Chrome和FireFox等都有一些优化，比如在执行脚本时，开启另一个进程解析剩余的文档以找出并加载其他的待下载外部资源（不改变主进程的DOM树，仅优化加载外部资源）。</p>\n<blockquote>\n<ul>\n<li>样式</li>\n</ul>\n</blockquote>\n<p>不同于脚本，浏览器对样式的处理并不会阻塞文档解析，大概是因为样式表并不会改变DOM结构。</p>\n<blockquote>\n<ul>\n<li>样式表与脚本</li>\n</ul>\n</blockquote>\n<p>你可能想问样式是否会阻塞脚本文件的加载执行呢？正常情况是不会的，但是存在一个问题是通常我们会在脚本中请求样式信息，但是在文档解析时，如果样式尚未加载或解析，将会得到错误信息，对于这一问题，FireFox浏览器和Webkit浏览器处理策略不同：</p>\n<p>当存在有样式文件未被加载和解析时，FireFox浏览器会阻塞所有脚本；<br>而Webkit浏览器只会阻塞操作了改文件内声明的样式属性的脚本。<br>构建DOM树</p>\n<p>DOM，即文档对象模型（Document Object Model）,DOM树，即文档内所有节点构成的一个树形结构。</p>\n<p>假设浏览器获取返回的如下HTML文档：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!doctype html&gt;</div><div class=\"line\">&lt;html&gt;</div><div class=\"line\">&lt;head&gt;</div><div class=\"line\">  &lt;link rel=&quot;stylesheet&quot; href=&quot;./theme.css&quot;&gt;&lt;/link&gt;</div><div class=\"line\">  &lt;script src=&quot;./config.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">  &lt;title&gt;关键渲染路径&lt;/title&gt;</div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\">  &lt;h1 class=&quot;title&quot;&gt;关键渲染路径&lt;/h1&gt;</div><div class=\"line\">  &lt;p&gt;关键渲染路径介绍&lt;/p&gt;</div><div class=\"line\">  &lt;footer&gt;@copyright2017&lt;/footer&gt;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure>\n<p>首先浏览器从上到下依次解析文档构建DOM树，如下：</p>\n<p><img src=\"http://blog.codingplayboy.com/wp-content/uploads/2017/03/dom-tree.png\" alt=\"\"></p>\n<p>构建CSSOM树</p>\n<p>CSSOM，即CSS对象模型（CSS Object Model），CSSOM树，与DOM树结构相似，只是另外为每一个节点关联了样式信息。</p>\n<p>theme.css样式内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">html, body &#123;</div><div class=\"line\">width: 100%;</div><div class=\"line\">height: 100%;</div><div class=\"line\">background-color: #fcfcfc;</div><div class=\"line\">&#125;</div><div class=\"line\">.title &#123;</div><div class=\"line\">font-size: 20px;</div><div class=\"line\">&#125;</div><div class=\"line\">.footer &#123;</div><div class=\"line\">font-size: 12px;</div><div class=\"line\">color: #aaa;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>构建CSSOM树如图：<br><img src=\"http://blog.codingplayboy.com/wp-content/uploads/2017/03/cssom-tree.png\" alt=\"\"></p>\n<p>执行JAVASCRIPT</p>\n<p>上文已经阐述了文档解析时对脚本的处理，我们得知脚本加载，解析和执行会阻塞文档解析，而在特殊情况下样式的加载和解析也会阻塞脚本，所以现在推荐的实践是<script>标签放在</body>标签前面。</p>\n<p>构建渲染树(RENDER TREE)</p>\n<p>DOM树和CSSOM树都构建完了，接着浏览器会构建渲染树：</p>\n<p>渲染树，代表一个文档的视觉展示，浏览器通过它将文档内容绘制在浏览器窗口，展示给用户，它由按顺序展示在屏幕上的一系列矩形对象组成，这些矩形对象都带有字体，颜色和尺寸，位置等视觉样式属性。对于这些矩对象，FireFox称之为框架（frame）,Webkit浏览器称之为渲染对象（render object, renderer），后文统称为渲染对象。<br>这里把渲染树节点称为矩形对象，是因为，每一个渲染对象都代表着其对应DOM节点的CSS盒子,该盒子包含了尺寸，位置等几何信息，同时它指向一个样式对象包含其他视觉样式信息。</p>\n<p>渲染树与DOM树<br>每一个渲染对象都对应着DOM节点，但是非视觉（隐藏，不占位）DOM元素不会插入渲染树，如<head>元素或声明display: none;的元素，渲染对象与DOM节点不是简单的一对一的关系，一个DOM可以对应一个渲染对象，但一个DOM元素也可能对应多个渲染对象，因为有很多元素不止包含一个CSS盒子，如当文本被折行时，会产生多个行盒，这些行会生成多个渲染对象；又如行内元素同时包含块元素和行内元素，则会创建一个匿名块级盒包含内部行内元素，此时一个DOM对应多个矩形对象（渲染对象）。</p>\n<p>渲染树及其对应DOM树如图：<br><img src=\"http://blog.codingplayboy.com/wp-content/uploads/2017/03/render-tree.png\" alt=\"\"></p>\n<p>图中渲染树viewport即视口，是文档的初始包含块，scroll代表滚动区域，详见CSS之视觉格式化模型(Visual Formatting Model)<br>渲染树并不会包含显式或隐式地display：none;的标签元素。<br>布局（LAYOUT）或回流（REFLOW，RELAYOUT）</p>\n<p>创建渲染树后，下一步就是布局（Layout）,或者叫回流（reflow,relayout），这个过程就是通过渲染树中渲染对象的信息，计算出每一个渲染对象的位置和尺寸，将其安置在浏览器窗口的正确位置，而有些时候我们会在文档布局完成后对DOM进行修改，这时候可能需要重新进行布局，也可称其为回流，本质上还是一个布局的过程，每一个渲染对象都有一个布局或者回流方法，实现其布局或回流。</p>\n<p>流（flow）<br>HTML采用的是基于流的方式定位布局，其按照从左到右，从上到下的顺序进行排列，详见CSS定位机制。</p>\n<p>全局布局与局部布局<br>对渲染树的布局可以分为全局和局部的，全局即对整个渲染树进行重新布局，如当我们改变了窗口尺寸或方向或者是修改了根元素的尺寸或者字体大小等；而局部布局可以是对渲染树的某部分或某一个渲染对象进行重新布局。</p>\n<p>脏位系统（dirty bit system）<br>大多数web应用对DOM的操作都是比较频繁，这意味着经常需要对DOM进行布局和回流，而如果仅仅是一些小改变，就触发整个渲染树的回流，这显然是不好的，为了避免这种情况，浏览器使用了脏位系统，只有一个渲染对象改变了或者某渲染对象及其子渲染对象脏位值为”dirty”时，说明需要回流。</p>\n<p>表示需要布局的脏位值有两种：</p>\n<p>“dirty”–自身改变，需要回流<br>“children are dirty”–子节点改变，需要回流<br>布局过程<br>布局是一个从上到下，从外到内进行的递归过程，从根渲染对象，即对应着HTML文档根元素<html>，然后下一级渲染对象，如对应着<body>元素，如此层层递归，依次计算每一个渲染对象的几何信息（位置和尺寸）。</p>\n<p>几何信息-位置和尺寸，即相对于窗口的坐标和尺寸，如根渲染对象，其坐标为（0， 0），尺寸即是视口<br>尺寸（浏览器窗口的可视区域）。</p>\n<p>每一个渲染对象的布局流程基本如：</p>\n<p>1.计算此渲染对象的宽度（width）；<br>2.遍历此渲染对象的所有子级，依次：<br>2.1设置子级渲染对象的坐标<br>2.2判断是否需要触发子渲染对象的布局或回流方法，计算子渲染对象的高度（height）<br>3.设置此渲染对象的高度：根据子渲染对象的累积高，margin和padding的高度设置其高度；<br>4.设置此渲染对象脏位值为false。<br>强制回流<br>在渲染树布局完成后，再次操作文档，改变文档的内容或结构，或者元素定位时，会触发回流，即需要重新布局，如请求某DOM的”offsetHeight”样式信息等诸多情况：</p>\n<p>DOM操作，如增加，删除，修改或移动；<br>变更内容；<br>激活伪类；<br>访问或改变某些CSS属性（包括修改样式表或元素类名或使用JavaScript操作等方式）；<br>浏览器窗口变化（滚动或尺寸变化）</p>\n<pre><code>$(&apos;body&apos;).css(&apos;padding&apos;); // reflow\n</code></pre><p>有过CSS3动画开发经验的同学可能会有经历，如下入场动画：</p>\n<pre><code>.slide-left {\n    -webkit-transition: margin-left 1s ease-out;\n        -moz-transition: margin-left 1s ease-out;\n        -o-transition: margin-left 1s ease-out;\n        transition: margin-left 1s ease-out;\n}\n</code></pre><p>然后执行如下脚本：</p>\n<pre><code>var $slide = $(&apos;.slide-left&apos;);\n$slide.css({\n    &quot;margin-left&quot;: &quot;100px&quot;\n}).addClass(&apos;slide-left&apos;);\n$slide.css({\n    &quot;margin-left&quot;: &quot;10px&quot;\n});\n</code></pre><p>我们会发现并没有效果，为什么呢？因为对margin-left的修改并没有触发回流，元素margin-left值的改变被缓存，如果我们在中间强制触发回流：</p>\n<pre><code>var $slide = $(&apos;.slide-left&apos;);\n$slide.css({\n    &quot;margin-left&quot;: &quot;100px&quot;\n});\nconsole.log($slide.css(&apos;padding&apos;);\n$slide.addClass(&apos;slide-left&apos;);\n$slide.css({\n    &quot;margin-left&quot;: &quot;10px&quot;\n});\n</code></pre><p>再看就达到了预期效果。</p>\n<blockquote>\n<ul>\n<li>绘制（PAINTING）</li>\n</ul>\n</blockquote>\n<p>最后是绘制(paint)阶段或重绘（repaint）阶段，浏览器UI组件将遍历渲染树并调用渲染对象的绘制（paint）方法，将内容展现在屏幕上，也有可能在之后对DOM进行修改，需要重新绘制渲染对象，也就是重绘，绘制和重绘的关系可以参考布局和回流的关系。</p>\n<blockquote>\n<ul>\n<li><p>全局与局部绘制<br>与布局相似，绘制也分为全局和局部绘制，即对整个渲染树或某些渲染对象进行绘制。</p>\n</li>\n<li><p>触发重绘<br>我们已经知道很多操作可能会触发回流，那么什么时候可能触发重绘呢，通常，当改变元素的视觉样式，如background-color,visibility，margin，padding或字体颜色时会触发全局或局部重绘，如：</p>\n</li>\n</ul>\n</blockquote>\n<pre><code>$(&apos;body&apos;).css(&apos;color&apos;, &apos;red&apos;); // repaint\n$(&apos;body&apos;).css(&apos;margin&apos;, &apos;2px&apos;); // reflow, repaint\n</code></pre><blockquote>\n<ul>\n<li>页面渲染优化<br>浏览器对上文介绍的关键渲染路径进行了很多优化，针对每一次变化产生尽量少的操作，还有优化判断重新绘制或布局的方式等等。</li>\n</ul>\n</blockquote>\n<p>在改变文档根元素的字体颜色等视觉性信息时，会触发整个文档的重绘，而改变某元素的字体颜色则只触发特定元素的重绘；改变元素的位置信息会同时触发此元素（可能还包括其兄弟元素或子级元素）的布局和重绘。某些重大改变，如更改文档根元素<html>的字体尺寸，则会触发整个文档的重新布局和重绘，据此及上文所述，推荐以下优化和实践：<br>`</p>\n<blockquote>\n<ul>\n<li>1.HTML文档结构层次尽量少，最好不深于六层；</li>\n<li>2.脚本尽量后放，放在</body>前即可；</li>\n<li>3.少量首屏样式内联放在<head>标签内；</li>\n<li>4.样式结构层次尽量简单；</li>\n<li>5.在脚本中尽量减少DOM操作，尽量缓存访问DOM的样式信息，避免过度触发回流；</li>\n<li>6.减少通过JavaScript代码修改元素样式，尽量使用修改class名方式操作样式或动画；</li>\n<li>7.动画尽量使用在绝对定位或固定定位的元素上；</li>\n<li>8.隐藏在屏幕外，或在页面滚动时，尽量停止动画；</li>\n<li>9.尽量缓存DOM查找，查找器尽量简洁；</li>\n<li>10.涉及多域名的网站，可以开启域名预解析<br>`</li>\n</ul>\n</blockquote>\n<p>实例<br>当我们访问一个页面时，浏览器渲染事件详细日志图如下：<br><img src=\"http://blog.codingplayboy.com/wp-content/uploads/2017/03/browser-workflow.png\" alt=\"\"><br>浏览器渲染事件日志</p>\n<p><code>1.发起请求；</code><br><code>2.解析HTML；</code><br><code>3.解析样式；</code><br><code>4.执行JavaScript；</code><br><code>5.布局；</code><br><code>6.绘制</code></p>\n</script></p>","excerpt":"<p>作为一个前端开发，最常见的运行环境应该是浏览器吧，为了更好的通过浏览器把优秀的产品带给用户，也为了更好的发展自己的前端职业之路，有必要了解从我们在浏览器地址栏输入网址到看到页面这期间浏览器是如何进行工作的,进而了解如何更好的优化实践，本篇主要围绕这两点展开阐述。前端页面渲染机制可谓是老生常谈，但又很有必要再谈的话题，于是还是决定写一篇，即是对知识的回顾总结，又能与大家分享，何乐而不为。网上相关类型的文章也很多，有兴趣的可以多学习一下。<br>","more":"</p>\n<h3 id=\"浏览器\"><a href=\"#浏览器\" class=\"headerlink\" title=\"浏览器\"></a>浏览器</h3><p>在介绍浏览器工作流程之前，先了解一下主流浏览器的基础结构，本文所介绍的浏览器主要为开源的Chrome，FireFox及部分开源的Safari，这也是目前市场占比最高的几大浏览器，以本人博客网站为例，可以大致看出各浏览器使用比例：<br><img src=\"http://blog.codingplayboy.com/wp-content/uploads/2017/03/browser-percent.png\" alt=\"\"></p>\n<h5 id=\"浏览器占比\"><a href=\"#浏览器占比\" class=\"headerlink\" title=\"浏览器占比\"></a>浏览器占比</h5><p>浏览器基础结构</p>\n<p>浏览器基础结构主要包括如下7部分：</p>\n<blockquote>\n<ul>\n<li>1.用户界面（User Interface）:用户所看到及与之交互的功能组件，如地址栏，返回，前进按钮等；</li>\n<li>2.浏览器引擎（Browser engine）:负责控制和管理下一级的渲染引擎；</li>\n<li>3.渲染引擎（Rendering engine）:负责解析用户请求的内容（如HTML或XML，渲染引擎会解析HTML或XML，以及相关CSS，然后返回解析后的内容）；</li>\n<li>4.网络（Networking）:负责处理网络相关的事务，如HTTP请求等；</li>\n<li>5.UI后端（UI backend）:负责绘制提示框等浏览器组件，其底层使用的是操作系统的用户接口；</li>\n<li>6.JavaScript解释器（JavaScript interpreter）:负责解析和执行JavaScript代码；</li>\n<li>7.数据存储（Data storage）:负责持久存储诸如cookie和缓存等应用数据。<br>浏览器基础结构<br><img src=\"http://blog.codingplayboy.com/wp-content/uploads/2017/03/browser-structure.png\" alt=\"\"><h4 id=\"浏览器内核\"><a href=\"#浏览器内核\" class=\"headerlink\" title=\"浏览器内核\"></a>浏览器内核</h4></li>\n</ul>\n</blockquote>\n<p>各大主要浏览器使用内核也是有差别的，大致可以分为以下几类：</p>\n<p><code>Trident内核： IE</code><br><code>Webkit内核：Chrome,Safari</code><br><code>Gecko内核：FireFox</code></p>\n<h4 id=\"网络\"><a href=\"#网络\" class=\"headerlink\" title=\"网络\"></a>网络</h4><p>当用户访问页面时，浏览器需要获取用户请求内容，这个过程主要涉及浏览器网络模块：</p>\n<p>1.用户在地址栏输入域名，如baidu.com，DNS（Domain Name System，域名解析系统）服务器根据输入的域名查找对应IP，然后向该IP地址发起请求；<br>DNS</p>\n<p>2.浏览器获得并解析服务器的返回内容(HTTP response)；<br>3.浏览器加载HTML文件及文件内包含的外部引用文件及图片，多媒体等资源。<br>DNS预解析（DNS PREFETCH）</p>\n<p>浏览器DNS解析大多时候较快，且会缓存常用域名的解析值，但是如果网站涉及多域名，在对每一个域名访问时都需要先解析出IP地址，而我们希望在跳转或者请求其他域名资源时尽量快，则可以开启域名预解析，浏览器会在空闲时提前解析声明需要预解析的域名，如：<br><img src=\"http://blog.codingplayboy.com/wp-content/uploads/2017/03/dns-prefetch.png\" alt=\"\"></p>\n<h4 id=\"域名预解析\"><a href=\"#域名预解析\" class=\"headerlink\" title=\"域名预解析\"></a>域名预解析</h4><p>多进程</p>\n<p>我们通常说JavaScript执行是单进程的，但是浏览器网络部分通常是有几个平行进程同时开启，但是也会有<br>限制，一般为2-6个。</p>\n<h5 id=\"渲染引擎及关键渲染路径（Critical-Rendering-Path）\"><a href=\"#渲染引擎及关键渲染路径（Critical-Rendering-Path）\" class=\"headerlink\" title=\"渲染引擎及关键渲染路径（Critical Rendering Path）\"></a>渲染引擎及关键渲染路径（Critical Rendering Path）</h5><p>渲染引擎所做的事是将请求内容展现给我们，默认支持HTML,XML和图片类型，对于其他诸如PDF等类型的内容则需要安装相应插件，但浏览器的展示工作流程基本是一样的。</p>\n<p>通过网络模块加载到HTML文件后渲染引擎渲染流程如下，这也通常被称作关键渲染路径（Critical Rendering Path）：</p>\n<blockquote>\n<ul>\n<li>1.构建DOM树(DOM tree)：从上到下解析HTML文档生成DOM节点树（DOM tree），也叫内容树（content tree）；</li>\n<li>2.构建CSSOM(CSS Object Model)树：加载解析样式生成CSSOM树；</li>\n<li>3.执行JavaScript：加载并执行JavaScript代码（包括内联代码或外联JavaScript文件）；</li>\n<li><p>4.构建渲染树(render tree)：根据DOM树和CSSOM树,生成渲染树(render tree)；<code>渲染树：按顺序展示在屏幕上的一系列矩形，这些矩形带有字体，颜色和尺寸等视觉属性。</code></p>\n</li>\n<li><p>5.布局（layout）：根据渲染树将节点树的每一个节点布局在屏幕上的正确位置；</p>\n</li>\n<li><p>6.绘制（painting）：遍历渲染树绘制所有节点，为每一个节点适用对应的样式，这一过程是通过UI后端模块完成；<br>关键渲染路径<br><img src=\"http://blog.codingplayboy.com/wp-content/uploads/2017/03/critical-rendering-path.png\" alt=\"\"><br>为了更友好的用户体验，浏览器会尽可能快的展现内容，而不会等到文档所有内容到达才开始解析和构建/布局渲染树，而是每次处理一部分，并展现在屏幕上，这也是为什么我们经常可以看到页面加载的时候内容是从上到下一点一点展现的。</p>\n</li>\n</ul>\n</blockquote>\n<h5 id=\"流程图\"><a href=\"#流程图\" class=\"headerlink\" title=\"流程图\"></a>流程图</h5><h6 id=\"Webkit渲染引擎流程如下图：\"><a href=\"#Webkit渲染引擎流程如下图：\" class=\"headerlink\" title=\"Webkit渲染引擎流程如下图：\"></a>Webkit渲染引擎流程如下图：</h6><p><img src=\"http://blog.codingplayboy.com/wp-content/uploads/2017/03/webkit-render-flow.png\" alt=\"\"></p>\n<h6 id=\"Gecko渲染引擎流程如下图：\"><a href=\"#Gecko渲染引擎流程如下图：\" class=\"headerlink\" title=\"Gecko渲染引擎流程如下图：\"></a>Gecko渲染引擎流程如下图：</h6><p><img src=\"http://blog.codingplayboy.com/wp-content/uploads/2017/03/gecko-render-flow.jpg\" alt=\"\"></p>\n<p>如上图，Webkit浏览器和Gecko浏览器渲染流程大致相同,<code>不同</code>的是：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">1.Webkit浏览器中的渲染树(render tree)，在Gecko浏览器中对应的则是框架树（frame tree）,渲染对象(render object)对应的是框架（frame）;</div><div class=\"line\">2.Webkit中的布局（Layout）过程，在Gecko中称为回流（Reflow）,本质是一样的，后文会解释回流的另一层含义–重新布局；</div><div class=\"line\">3.Gecko中HTML和DOM树中间多了一层内容池（Content sink）,可以理解成生成DOM元素的工厂。</div></pre></td></tr></table></figure></p>\n<h5 id=\"单进程\"><a href=\"#单进程\" class=\"headerlink\" title=\"单进程\"></a>单进程</h5><p>不同于网络部分的多进程渲染引擎是单线程工作的，意味着渲染流程是一步一步渐进完成的。</p>\n<h5 id=\"解析文档-PARSER-HTML\"><a href=\"#解析文档-PARSER-HTML\" class=\"headerlink\" title=\"解析文档(PARSER HTML)\"></a>解析文档(PARSER HTML)</h5><p>在详细介绍浏览器渲染文档之前，先应该理解浏览器如何解析文档：解析文档的顺序，对于CSS和JavaScript如何处理等。</p>\n<h5 id=\"解析顺序\"><a href=\"#解析顺序\" class=\"headerlink\" title=\"解析顺序\"></a>解析顺序</h5><p>浏览器按从上到下的顺序扫描解析文档；</p>\n<h5 id=\"解析样式和脚本\"><a href=\"#解析样式和脚本\" class=\"headerlink\" title=\"解析样式和脚本\"></a>解析样式和脚本</h5><p>脚本</p>\n<p>或许是由于通常会在JavaScript脚本中改变文档DOM结构，于是浏览器以同步方式解析，加载和执行脚本，浏览器在解析文档时，当解析到<script>标签时，会解析其中的脚本（对于外链的JavaScript文件，需要先加载该文件内容，再进行解析），然后立即执行，这整个过程都会阻塞文档解析，直到脚本执行完才会继续解析文档。就是说由于脚本是同步加载和执行的，它会阻塞文档解析，这也解释了为什么现在通常建议将<script>标签放在标签前面，而不是放在<head>标签里。现在HTML5提供defer和async两个属性支持延迟和异步加载JavaScript文件，如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script defer src=&quot;script.js&quot;&gt;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<ul>\n<li>改进</li>\n</ul>\n</blockquote>\n<p>针对上文说的脚本阻塞文档解析，主流浏览器如Chrome和FireFox等都有一些优化，比如在执行脚本时，开启另一个进程解析剩余的文档以找出并加载其他的待下载外部资源（不改变主进程的DOM树，仅优化加载外部资源）。</p>\n<blockquote>\n<ul>\n<li>样式</li>\n</ul>\n</blockquote>\n<p>不同于脚本，浏览器对样式的处理并不会阻塞文档解析，大概是因为样式表并不会改变DOM结构。</p>\n<blockquote>\n<ul>\n<li>样式表与脚本</li>\n</ul>\n</blockquote>\n<p>你可能想问样式是否会阻塞脚本文件的加载执行呢？正常情况是不会的，但是存在一个问题是通常我们会在脚本中请求样式信息，但是在文档解析时，如果样式尚未加载或解析，将会得到错误信息，对于这一问题，FireFox浏览器和Webkit浏览器处理策略不同：</p>\n<p>当存在有样式文件未被加载和解析时，FireFox浏览器会阻塞所有脚本；<br>而Webkit浏览器只会阻塞操作了改文件内声明的样式属性的脚本。<br>构建DOM树</p>\n<p>DOM，即文档对象模型（Document Object Model）,DOM树，即文档内所有节点构成的一个树形结构。</p>\n<p>假设浏览器获取返回的如下HTML文档：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!doctype html&gt;</div><div class=\"line\">&lt;html&gt;</div><div class=\"line\">&lt;head&gt;</div><div class=\"line\">  &lt;link rel=&quot;stylesheet&quot; href=&quot;./theme.css&quot;&gt;&lt;/link&gt;</div><div class=\"line\">  &lt;script src=&quot;./config.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">  &lt;title&gt;关键渲染路径&lt;/title&gt;</div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\">  &lt;h1 class=&quot;title&quot;&gt;关键渲染路径&lt;/h1&gt;</div><div class=\"line\">  &lt;p&gt;关键渲染路径介绍&lt;/p&gt;</div><div class=\"line\">  &lt;footer&gt;@copyright2017&lt;/footer&gt;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure>\n<p>首先浏览器从上到下依次解析文档构建DOM树，如下：</p>\n<p><img src=\"http://blog.codingplayboy.com/wp-content/uploads/2017/03/dom-tree.png\" alt=\"\"></p>\n<p>构建CSSOM树</p>\n<p>CSSOM，即CSS对象模型（CSS Object Model），CSSOM树，与DOM树结构相似，只是另外为每一个节点关联了样式信息。</p>\n<p>theme.css样式内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">html, body &#123;</div><div class=\"line\">width: 100%;</div><div class=\"line\">height: 100%;</div><div class=\"line\">background-color: #fcfcfc;</div><div class=\"line\">&#125;</div><div class=\"line\">.title &#123;</div><div class=\"line\">font-size: 20px;</div><div class=\"line\">&#125;</div><div class=\"line\">.footer &#123;</div><div class=\"line\">font-size: 12px;</div><div class=\"line\">color: #aaa;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>构建CSSOM树如图：<br><img src=\"http://blog.codingplayboy.com/wp-content/uploads/2017/03/cssom-tree.png\" alt=\"\"></p>\n<p>执行JAVASCRIPT</p>\n<p>上文已经阐述了文档解析时对脚本的处理，我们得知脚本加载，解析和执行会阻塞文档解析，而在特殊情况下样式的加载和解析也会阻塞脚本，所以现在推荐的实践是<script>标签放在</body>标签前面。</p>\n<p>构建渲染树(RENDER TREE)</p>\n<p>DOM树和CSSOM树都构建完了，接着浏览器会构建渲染树：</p>\n<p>渲染树，代表一个文档的视觉展示，浏览器通过它将文档内容绘制在浏览器窗口，展示给用户，它由按顺序展示在屏幕上的一系列矩形对象组成，这些矩形对象都带有字体，颜色和尺寸，位置等视觉样式属性。对于这些矩对象，FireFox称之为框架（frame）,Webkit浏览器称之为渲染对象（render object, renderer），后文统称为渲染对象。<br>这里把渲染树节点称为矩形对象，是因为，每一个渲染对象都代表着其对应DOM节点的CSS盒子,该盒子包含了尺寸，位置等几何信息，同时它指向一个样式对象包含其他视觉样式信息。</p>\n<p>渲染树与DOM树<br>每一个渲染对象都对应着DOM节点，但是非视觉（隐藏，不占位）DOM元素不会插入渲染树，如<head>元素或声明display: none;的元素，渲染对象与DOM节点不是简单的一对一的关系，一个DOM可以对应一个渲染对象，但一个DOM元素也可能对应多个渲染对象，因为有很多元素不止包含一个CSS盒子，如当文本被折行时，会产生多个行盒，这些行会生成多个渲染对象；又如行内元素同时包含块元素和行内元素，则会创建一个匿名块级盒包含内部行内元素，此时一个DOM对应多个矩形对象（渲染对象）。</p>\n<p>渲染树及其对应DOM树如图：<br><img src=\"http://blog.codingplayboy.com/wp-content/uploads/2017/03/render-tree.png\" alt=\"\"></p>\n<p>图中渲染树viewport即视口，是文档的初始包含块，scroll代表滚动区域，详见CSS之视觉格式化模型(Visual Formatting Model)<br>渲染树并不会包含显式或隐式地display：none;的标签元素。<br>布局（LAYOUT）或回流（REFLOW，RELAYOUT）</p>\n<p>创建渲染树后，下一步就是布局（Layout）,或者叫回流（reflow,relayout），这个过程就是通过渲染树中渲染对象的信息，计算出每一个渲染对象的位置和尺寸，将其安置在浏览器窗口的正确位置，而有些时候我们会在文档布局完成后对DOM进行修改，这时候可能需要重新进行布局，也可称其为回流，本质上还是一个布局的过程，每一个渲染对象都有一个布局或者回流方法，实现其布局或回流。</p>\n<p>流（flow）<br>HTML采用的是基于流的方式定位布局，其按照从左到右，从上到下的顺序进行排列，详见CSS定位机制。</p>\n<p>全局布局与局部布局<br>对渲染树的布局可以分为全局和局部的，全局即对整个渲染树进行重新布局，如当我们改变了窗口尺寸或方向或者是修改了根元素的尺寸或者字体大小等；而局部布局可以是对渲染树的某部分或某一个渲染对象进行重新布局。</p>\n<p>脏位系统（dirty bit system）<br>大多数web应用对DOM的操作都是比较频繁，这意味着经常需要对DOM进行布局和回流，而如果仅仅是一些小改变，就触发整个渲染树的回流，这显然是不好的，为了避免这种情况，浏览器使用了脏位系统，只有一个渲染对象改变了或者某渲染对象及其子渲染对象脏位值为”dirty”时，说明需要回流。</p>\n<p>表示需要布局的脏位值有两种：</p>\n<p>“dirty”–自身改变，需要回流<br>“children are dirty”–子节点改变，需要回流<br>布局过程<br>布局是一个从上到下，从外到内进行的递归过程，从根渲染对象，即对应着HTML文档根元素<html>，然后下一级渲染对象，如对应着<body>元素，如此层层递归，依次计算每一个渲染对象的几何信息（位置和尺寸）。</p>\n<p>几何信息-位置和尺寸，即相对于窗口的坐标和尺寸，如根渲染对象，其坐标为（0， 0），尺寸即是视口<br>尺寸（浏览器窗口的可视区域）。</p>\n<p>每一个渲染对象的布局流程基本如：</p>\n<p>1.计算此渲染对象的宽度（width）；<br>2.遍历此渲染对象的所有子级，依次：<br>2.1设置子级渲染对象的坐标<br>2.2判断是否需要触发子渲染对象的布局或回流方法，计算子渲染对象的高度（height）<br>3.设置此渲染对象的高度：根据子渲染对象的累积高，margin和padding的高度设置其高度；<br>4.设置此渲染对象脏位值为false。<br>强制回流<br>在渲染树布局完成后，再次操作文档，改变文档的内容或结构，或者元素定位时，会触发回流，即需要重新布局，如请求某DOM的”offsetHeight”样式信息等诸多情况：</p>\n<p>DOM操作，如增加，删除，修改或移动；<br>变更内容；<br>激活伪类；<br>访问或改变某些CSS属性（包括修改样式表或元素类名或使用JavaScript操作等方式）；<br>浏览器窗口变化（滚动或尺寸变化）</p>\n<pre><code>$(&apos;body&apos;).css(&apos;padding&apos;); // reflow\n</code></pre><p>有过CSS3动画开发经验的同学可能会有经历，如下入场动画：</p>\n<pre><code>.slide-left {\n    -webkit-transition: margin-left 1s ease-out;\n        -moz-transition: margin-left 1s ease-out;\n        -o-transition: margin-left 1s ease-out;\n        transition: margin-left 1s ease-out;\n}\n</code></pre><p>然后执行如下脚本：</p>\n<pre><code>var $slide = $(&apos;.slide-left&apos;);\n$slide.css({\n    &quot;margin-left&quot;: &quot;100px&quot;\n}).addClass(&apos;slide-left&apos;);\n$slide.css({\n    &quot;margin-left&quot;: &quot;10px&quot;\n});\n</code></pre><p>我们会发现并没有效果，为什么呢？因为对margin-left的修改并没有触发回流，元素margin-left值的改变被缓存，如果我们在中间强制触发回流：</p>\n<pre><code>var $slide = $(&apos;.slide-left&apos;);\n$slide.css({\n    &quot;margin-left&quot;: &quot;100px&quot;\n});\nconsole.log($slide.css(&apos;padding&apos;);\n$slide.addClass(&apos;slide-left&apos;);\n$slide.css({\n    &quot;margin-left&quot;: &quot;10px&quot;\n});\n</code></pre><p>再看就达到了预期效果。</p>\n<blockquote>\n<ul>\n<li>绘制（PAINTING）</li>\n</ul>\n</blockquote>\n<p>最后是绘制(paint)阶段或重绘（repaint）阶段，浏览器UI组件将遍历渲染树并调用渲染对象的绘制（paint）方法，将内容展现在屏幕上，也有可能在之后对DOM进行修改，需要重新绘制渲染对象，也就是重绘，绘制和重绘的关系可以参考布局和回流的关系。</p>\n<blockquote>\n<ul>\n<li><p>全局与局部绘制<br>与布局相似，绘制也分为全局和局部绘制，即对整个渲染树或某些渲染对象进行绘制。</p>\n</li>\n<li><p>触发重绘<br>我们已经知道很多操作可能会触发回流，那么什么时候可能触发重绘呢，通常，当改变元素的视觉样式，如background-color,visibility，margin，padding或字体颜色时会触发全局或局部重绘，如：</p>\n</li>\n</ul>\n</blockquote>\n<pre><code>$(&apos;body&apos;).css(&apos;color&apos;, &apos;red&apos;); // repaint\n$(&apos;body&apos;).css(&apos;margin&apos;, &apos;2px&apos;); // reflow, repaint\n</code></pre><blockquote>\n<ul>\n<li>页面渲染优化<br>浏览器对上文介绍的关键渲染路径进行了很多优化，针对每一次变化产生尽量少的操作，还有优化判断重新绘制或布局的方式等等。</li>\n</ul>\n</blockquote>\n<p>在改变文档根元素的字体颜色等视觉性信息时，会触发整个文档的重绘，而改变某元素的字体颜色则只触发特定元素的重绘；改变元素的位置信息会同时触发此元素（可能还包括其兄弟元素或子级元素）的布局和重绘。某些重大改变，如更改文档根元素<html>的字体尺寸，则会触发整个文档的重新布局和重绘，据此及上文所述，推荐以下优化和实践：<br>`</p>\n<blockquote>\n<ul>\n<li>1.HTML文档结构层次尽量少，最好不深于六层；</li>\n<li>2.脚本尽量后放，放在</body>前即可；</li>\n<li>3.少量首屏样式内联放在<head>标签内；</li>\n<li>4.样式结构层次尽量简单；</li>\n<li>5.在脚本中尽量减少DOM操作，尽量缓存访问DOM的样式信息，避免过度触发回流；</li>\n<li>6.减少通过JavaScript代码修改元素样式，尽量使用修改class名方式操作样式或动画；</li>\n<li>7.动画尽量使用在绝对定位或固定定位的元素上；</li>\n<li>8.隐藏在屏幕外，或在页面滚动时，尽量停止动画；</li>\n<li>9.尽量缓存DOM查找，查找器尽量简洁；</li>\n<li>10.涉及多域名的网站，可以开启域名预解析<br>`</li>\n</ul>\n</blockquote>\n<p>实例<br>当我们访问一个页面时，浏览器渲染事件详细日志图如下：<br><img src=\"http://blog.codingplayboy.com/wp-content/uploads/2017/03/browser-workflow.png\" alt=\"\"><br>浏览器渲染事件日志</p>\n<p><code>1.发起请求；</code><br><code>2.解析HTML；</code><br><code>3.解析样式；</code><br><code>4.执行JavaScript；</code><br><code>5.布局；</code><br><code>6.绘制</code></p>"},{"title":"浅谈csrf攻击方式","date":"2017-06-01T06:35:08.000Z","_content":"#### 一.CSRF是什么？\n\n　　CSRF（Cross-site request forgery），中文名称：跨站请求伪造，也被称为：one click attack/session riding，缩写为：CSRF/XSRF。\n\n#### 二.CSRF可以做什么？\n\n　　你这可以这么理解CSRF攻击：攻击者盗用了你的身份，以你的名义发送恶意请求。CSRF能够做的事情包括：以你名义发送邮件，发消息，盗取你的账号，甚至于购买商品，虚拟货币转账......造成的问题包括：个人隐私泄露以及财产安全。\n\n<!--more-->\n#### 三.CSRF漏洞现状\n\n　　CSRF这种攻击方式在2000年已经被国外的安全人员提出，但在国内，直到06年才开始被关注，08年，国内外的多个大型社区和交互网站分别爆出CSRF漏洞，如：NYTimes.com（纽约时报）、Metafilter（一个大型的BLOG网站），YouTube和百度HI......而现在，互联网上的许多站点仍对此毫无防备，以至于安全业界称CSRF为“沉睡的巨人”。\n\n#### 四.CSRF的原理\n\n　　下图简单阐述了CSRF攻击的思想：\n    ![](http://pic002.cnblogs.com/img/hyddd/200904/2009040916453171.jpg)\n　　\n\n　　从上图可以看出，要完成一次CSRF攻击，受害者必须依次完成两个步骤：\n\n　　1.登录受信任网站A，并在本地生成Cookie。\n\n　　2.在不登出A的情况下，访问危险网站B。\n\n　　看到这里，你也许会说：“如果我不满足以上两个条件中的一个，我就不会受到CSRF的攻击”。是的，确实如此，但你不能保证以下情况不会发生：\n\n　　1.你不能保证你登录了一个网站后，不再打开一个tab页面并访问另外的网站。\n\n　　2.你不能保证你关闭浏览器了后，你本地的Cookie立刻过期，你上次的会话已经结束。（事实上，关闭浏览器不能结束一个会话，但大多数人都会错误的认为关闭浏览器就等于退出登录/结束会话了......）\n\n　　3.上图中所谓的攻击网站，可能是一个存在其他漏洞的可信任的经常被人访问的网站。\n\n\n\n　　上面大概地讲了一下CSRF攻击的思想，下面我将用几个例子详细说说具体的CSRF攻击，这里我以一个银行转账的操作作为例子（仅仅是例子，真实的银行网站没这么傻:>）\n\n　　示例1：\n\n　　银行网站A，它以GET请求来完成银行转账的操作，如：`http://www.mybank.com/Transfer.php?toBankId=11&money=1000`\n\n　　危险网站B，它里面有一段HTML的代码如下：\n```\n　　<img src=http://www.mybank.com/Transfer.php?toBankId=11&money=1000>\n```\n　　首先，你登录了银行网站A，然后访问危险网站B，噢，这时你会发现你的银行账户少了1000块......\n\n　　为什么会这样呢？原因是银行网站A违反了HTTP规范，使用GET请求更新资源。在访问危险网站B的之前，你已经登录了银行网站A，而B中的<img>以GET的方式请求第三方资源（这里的第三方就是指银行网站了，原本这是一个合法的请求，但这里被不法分子利用了），所以你的浏览器会带上你的银行网站A的Cookie发出Get请求，去获取资源“http://www.mybank.com/Transfer.php?toBankId=11&money=1000”，结果银行网站服务器收到请求后，认为这是一个更新资源操作（转账操作），所以就立刻进行转账操作......\n\n　　示例2：\n\n　　为了杜绝上面的问题，银行决定改用POST请求完成转账操作。\n\n　　银行网站A的WEB表单如下：　　\n```\n　　<form action=\"Transfer.php\" method=\"POST\">\n　　　　<p>ToBankId: <input type=\"text\" name=\"toBankId\" /></p>\n　　　　<p>Money: <input type=\"text\" name=\"money\" /></p>\n　　　　<p><input type=\"submit\" value=\"Transfer\" /></p>\n　　</form>\n```\n　　后台处理页面Transfer.php如下：\n\n```\n　　<?php\n　　　　session_start();\n　　　　if (isset($_REQUEST['toBankId'] &&　isset($_REQUEST['money']))\n　　　　{\n　　　　    buy_stocks($_REQUEST['toBankId'],　$_REQUEST['money']);\n　　　　}\n　　?>\n```\n\n　　危险网站B，仍然只是包含那句HTML代码：\n```\n　　<img src=http://www.mybank.com/Transfer.php?toBankId=11&money=1000>\n```\n　　和示例1中的操作一样，你首先登录了银行网站A，然后访问危险网站B，结果.....和示例1一样，你再次没了1000块～T_T，这次事故的原因是：银行后台使用了$_REQUEST去获取请求的数据，而$_REQUEST既可以获取GET请求的数据，也可以获取POST请求的数据，这就造成了在后台处理程序无法区分这到底是GET请求的数据还是POST请求的数据。在PHP中，可以使用$_GET和$_POST分别获取GET请求和POST请求的数据。在JAVA中，用于获取请求数据request一样存在不能区分GET请求数据和POST数据的问题。\n\n　　示例3：\n\n　　经过前面2个惨痛的教训，银行决定把获取请求数据的方法也改了，改用$_POST，只获取POST请求的数据，后台处理页面Transfer.php代码如下：\n\n```\n　　<?php\n　　　　session_start();\n　　　　if (isset($_POST['toBankId'] &&　isset($_POST['money']))\n　　　　{\n　　　　    buy_stocks($_POST['toBankId'],　$_POST['money']);\n　　　　}\n　　?>\n```\n\n　　然而，危险网站B与时俱进，它改了一下代码：\n\n```\n<html>\n　　<head>\n　　　　<script type=\"text/javascript\">\n　　　　　　function steal()\n　　　　　　{\n          　　　　 iframe = document.frames[\"steal\"];\n　　     　　      iframe.document.Submit(\"transfer\");\n　　　　　　}\n　　　　</script>\n　　</head>\n\n　　<body onload=\"steal()\">\n　　　　<iframe name=\"steal\" display=\"none\">\n　　　　　　<form method=\"POST\" name=\"transfer\"　action=\"http://www.myBank.com/Transfer.php\">\n　　　　　　　　<input type=\"hidden\" name=\"toBankId\" value=\"11\">\n　　　　　　　　<input type=\"hidden\" name=\"money\" value=\"1000\">\n　　　　　　</form>\n　　　　</iframe>\n　　</body>\n</html>\n```\n如果用户仍是继续上面的操作，很不幸，结果将会是再次不见1000块......因为这里危险网站B暗地里发送了POST请求到银行!\n\n　　总结一下上面3个例子，CSRF主要的攻击模式基本上是以上的3种，其中以第1,2种最为严重，因为触发条件很简单，一个<img>就可以了，而第3种比较麻烦，需要使用JavaScript，所以使用的机会会比前面的少很多，但无论是哪种情况，只要触发了CSRF攻击，后果都有可能很严重。\n\n　　理解上面的3种攻击模式，其实可以看出，CSRF攻击是源于WEB的隐式身份验证机制！WEB的身份验证机制虽然可以保证一个请求是来自于某个用户的浏览器，但却无法保证该请求是用户批准发送的！\n\n#### 五.CSRF的防御\n\n　　我总结了一下看到的资料，CSRF的防御可以从服务端和客户端两方面着手，防御效果是从服务端着手效果比较好，现在一般的CSRF防御也都在服务端进行。\n\n　　1.服务端进行CSRF防御\n\n　　服务端的CSRF方式方法很多样，但总的思想都是一致的，就是在客户端页面增加伪随机数。\n\n　　(1).Cookie Hashing(所有表单都包含同一个伪随机值)：\n\n　　这可能是最简单的解决方案了，因为攻击者不能获得第三方的Cookie(理论上)，所以表单中的数据也就构造失败了:>\n```\n　　<?php\n　　　　//构造加密的Cookie信息\n　　　　$value = “DefenseSCRF”;\n　　　　setcookie(”cookie”, $value, time()+3600);\n　　?>\n```\n　　在表单里增加Hash值，以认证这确实是用户发送的请求。\n\n```\n　　<?php\n　　　　$hash = md5($_COOKIE['cookie']);\n　　?>\n　　<form method=”POST” action=”transfer.php”>\n　　　　<input type=”text” name=”toBankId”>\n　　　　<input type=”text” name=”money”>\n　　　　<input type=”hidden” name=”hash” value=”<?=$hash;?>”>\n　　　　<input type=”submit” name=”submit” value=”Submit”>\n　　</form>\n```\n　　然后在服务器端进行Hash值验证\n\n```\n      <?php\n　　      if(isset($_POST['check'])) {\n     　　      $hash = md5($_COOKIE['cookie']);\n          　　 if($_POST['check'] == $hash) {\n               　　 doJob();\n　　           } else {\n　　　　　　　　//...\n          　　 }\n　　      } else {\n　　　　　　//...\n　　      }\n      ?>\n```\n　　这个方法个人觉得已经可以杜绝99%的CSRF攻击了，那还有1%呢....由于用户的Cookie很容易由于网站的XSS漏洞而被盗取，这就另外的1%。一般的攻击者看到有需要算Hash值，基本都会放弃了，某些除外，所以如果需要100%的杜绝，这个不是最好的方法。\n　　(2).验证码\n\n　　这个方案的思路是：每次的用户提交都需要用户在表单中填写一个图片上的随机字符串，厄....这个方案可以完全解决CSRF，但个人觉得在易用性方面似乎不是太好，还有听闻是验证码图片的使用涉及了一个被称为MHTML的Bug，可能在某些版本的微软IE中受影响。\n\n　　(3).One-Time Tokens(不同的表单包含一个不同的伪随机值)\n\n　　在实现One-Time Tokens时，需要注意一点：就是“并行会话的兼容”。如果用户在一个站点上同时打开了两个不同的表单，CSRF保护措施不应该影响到他对任何表单的提交。考虑一下如果每次表单被装入时站点生成一个伪随机值来覆盖以前的伪随机值将会发生什么情况：用户只能成功地提交他最后打开的表单，因为所有其他的表单都含有非法的伪随机值。必须小心操作以确保CSRF保护措施不会影响选项卡式的浏览或者利用多个浏览器窗口浏览一个站点。\n\n　　以下我的实现:\n\n　　1).先是令牌生成函数(gen_token())：\n\n```\n     <?php\n     function gen_token() {\n　　　　//这里我是贪方便，实际上单使用Rand()得出的随机数作为令牌，也是不安全的。\n　　　　//这个可以参考我写的Findbugs笔记中的《Random object created and used only once》\n          $token = md5(uniqid(rand(), true));\n          return $token;\n     }\n```\n　　2).然后是Session令牌生成函数(gen_stoken())：\n\n```\n     <?php\n     　　function gen_stoken() {\n　　　　　　$pToken = \"\";\n　　　　　　if($_SESSION[STOKEN_NAME]  == $pToken){\n　　　　　　　　//没有值，赋新值\n　　　　　　　　$_SESSION[STOKEN_NAME] = gen_token();\n　　　　　　}    \n　　　　　　else{\n　　　　　　　　//继续使用旧的值\n　　　　　　}\n     　　}\n     ?>\n```\n　　3).WEB表单生成隐藏输入域的函数：　　\n\n```\n     <?php\n　　     function gen_input() {\n     　　     gen_stoken();\n　　          echo “<input type=\\”hidden\\” name=\\”\" . FTOKEN_NAME . “\\”\n          　　     value=\\”\" . $_SESSION[STOKEN_NAME] . “\\”> “;\n     　　}\n     ?>\n```\n　　4).WEB表单结构：\n\n```\n     <?php\n          session_start();\n          include(”functions.php”);\n     ?>\n     <form method=”POST” action=”transfer.php”>\n          <input type=”text” name=”toBankId”>\n          <input type=”text” name=”money”>\n          <? gen_input(); ?>\n          <input type=”submit” name=”submit” value=”Submit”>\n     </FORM>\n```\n　　5).服务端核对令牌：\n\n　　这个很简单，这里就不再啰嗦了。\n\n\n\n六.参考文献\n\n[[1].Preventing CSRF](http://www.playhack.net/view.php?id=31)\n\n[[2].Security Corner: Cross-Site Request Forgeries](http://shiflett.org/articles/cross-site-request-forgeries)\n\n[[3].《深入解析跨站请求伪造漏洞：原理剖析》](http://netsecurity.51cto.com/art/200812/102951.htm)\n\n[[4].《Web安全测试之跨站请求伪造（CSRF）》](http://netsecurity.51cto.com/art/200811/97281.htm)\n\n[[5].《深入解析跨站请求伪造漏洞：实例讲解》](http://netsecurity.51cto.com/art/200812/102925.htm)\n\n[6].http://baike.baidu.com/view/1609487.htm\n","source":"_posts/浅谈csrf攻击方式.md","raw":"---\ntitle: 浅谈csrf攻击方式\ntags:\n  - ''\ncategories:\n  - ''\ndate: 2017-06-01 14:35:08\n---\n#### 一.CSRF是什么？\n\n　　CSRF（Cross-site request forgery），中文名称：跨站请求伪造，也被称为：one click attack/session riding，缩写为：CSRF/XSRF。\n\n#### 二.CSRF可以做什么？\n\n　　你这可以这么理解CSRF攻击：攻击者盗用了你的身份，以你的名义发送恶意请求。CSRF能够做的事情包括：以你名义发送邮件，发消息，盗取你的账号，甚至于购买商品，虚拟货币转账......造成的问题包括：个人隐私泄露以及财产安全。\n\n<!--more-->\n#### 三.CSRF漏洞现状\n\n　　CSRF这种攻击方式在2000年已经被国外的安全人员提出，但在国内，直到06年才开始被关注，08年，国内外的多个大型社区和交互网站分别爆出CSRF漏洞，如：NYTimes.com（纽约时报）、Metafilter（一个大型的BLOG网站），YouTube和百度HI......而现在，互联网上的许多站点仍对此毫无防备，以至于安全业界称CSRF为“沉睡的巨人”。\n\n#### 四.CSRF的原理\n\n　　下图简单阐述了CSRF攻击的思想：\n    ![](http://pic002.cnblogs.com/img/hyddd/200904/2009040916453171.jpg)\n　　\n\n　　从上图可以看出，要完成一次CSRF攻击，受害者必须依次完成两个步骤：\n\n　　1.登录受信任网站A，并在本地生成Cookie。\n\n　　2.在不登出A的情况下，访问危险网站B。\n\n　　看到这里，你也许会说：“如果我不满足以上两个条件中的一个，我就不会受到CSRF的攻击”。是的，确实如此，但你不能保证以下情况不会发生：\n\n　　1.你不能保证你登录了一个网站后，不再打开一个tab页面并访问另外的网站。\n\n　　2.你不能保证你关闭浏览器了后，你本地的Cookie立刻过期，你上次的会话已经结束。（事实上，关闭浏览器不能结束一个会话，但大多数人都会错误的认为关闭浏览器就等于退出登录/结束会话了......）\n\n　　3.上图中所谓的攻击网站，可能是一个存在其他漏洞的可信任的经常被人访问的网站。\n\n\n\n　　上面大概地讲了一下CSRF攻击的思想，下面我将用几个例子详细说说具体的CSRF攻击，这里我以一个银行转账的操作作为例子（仅仅是例子，真实的银行网站没这么傻:>）\n\n　　示例1：\n\n　　银行网站A，它以GET请求来完成银行转账的操作，如：`http://www.mybank.com/Transfer.php?toBankId=11&money=1000`\n\n　　危险网站B，它里面有一段HTML的代码如下：\n```\n　　<img src=http://www.mybank.com/Transfer.php?toBankId=11&money=1000>\n```\n　　首先，你登录了银行网站A，然后访问危险网站B，噢，这时你会发现你的银行账户少了1000块......\n\n　　为什么会这样呢？原因是银行网站A违反了HTTP规范，使用GET请求更新资源。在访问危险网站B的之前，你已经登录了银行网站A，而B中的<img>以GET的方式请求第三方资源（这里的第三方就是指银行网站了，原本这是一个合法的请求，但这里被不法分子利用了），所以你的浏览器会带上你的银行网站A的Cookie发出Get请求，去获取资源“http://www.mybank.com/Transfer.php?toBankId=11&money=1000”，结果银行网站服务器收到请求后，认为这是一个更新资源操作（转账操作），所以就立刻进行转账操作......\n\n　　示例2：\n\n　　为了杜绝上面的问题，银行决定改用POST请求完成转账操作。\n\n　　银行网站A的WEB表单如下：　　\n```\n　　<form action=\"Transfer.php\" method=\"POST\">\n　　　　<p>ToBankId: <input type=\"text\" name=\"toBankId\" /></p>\n　　　　<p>Money: <input type=\"text\" name=\"money\" /></p>\n　　　　<p><input type=\"submit\" value=\"Transfer\" /></p>\n　　</form>\n```\n　　后台处理页面Transfer.php如下：\n\n```\n　　<?php\n　　　　session_start();\n　　　　if (isset($_REQUEST['toBankId'] &&　isset($_REQUEST['money']))\n　　　　{\n　　　　    buy_stocks($_REQUEST['toBankId'],　$_REQUEST['money']);\n　　　　}\n　　?>\n```\n\n　　危险网站B，仍然只是包含那句HTML代码：\n```\n　　<img src=http://www.mybank.com/Transfer.php?toBankId=11&money=1000>\n```\n　　和示例1中的操作一样，你首先登录了银行网站A，然后访问危险网站B，结果.....和示例1一样，你再次没了1000块～T_T，这次事故的原因是：银行后台使用了$_REQUEST去获取请求的数据，而$_REQUEST既可以获取GET请求的数据，也可以获取POST请求的数据，这就造成了在后台处理程序无法区分这到底是GET请求的数据还是POST请求的数据。在PHP中，可以使用$_GET和$_POST分别获取GET请求和POST请求的数据。在JAVA中，用于获取请求数据request一样存在不能区分GET请求数据和POST数据的问题。\n\n　　示例3：\n\n　　经过前面2个惨痛的教训，银行决定把获取请求数据的方法也改了，改用$_POST，只获取POST请求的数据，后台处理页面Transfer.php代码如下：\n\n```\n　　<?php\n　　　　session_start();\n　　　　if (isset($_POST['toBankId'] &&　isset($_POST['money']))\n　　　　{\n　　　　    buy_stocks($_POST['toBankId'],　$_POST['money']);\n　　　　}\n　　?>\n```\n\n　　然而，危险网站B与时俱进，它改了一下代码：\n\n```\n<html>\n　　<head>\n　　　　<script type=\"text/javascript\">\n　　　　　　function steal()\n　　　　　　{\n          　　　　 iframe = document.frames[\"steal\"];\n　　     　　      iframe.document.Submit(\"transfer\");\n　　　　　　}\n　　　　</script>\n　　</head>\n\n　　<body onload=\"steal()\">\n　　　　<iframe name=\"steal\" display=\"none\">\n　　　　　　<form method=\"POST\" name=\"transfer\"　action=\"http://www.myBank.com/Transfer.php\">\n　　　　　　　　<input type=\"hidden\" name=\"toBankId\" value=\"11\">\n　　　　　　　　<input type=\"hidden\" name=\"money\" value=\"1000\">\n　　　　　　</form>\n　　　　</iframe>\n　　</body>\n</html>\n```\n如果用户仍是继续上面的操作，很不幸，结果将会是再次不见1000块......因为这里危险网站B暗地里发送了POST请求到银行!\n\n　　总结一下上面3个例子，CSRF主要的攻击模式基本上是以上的3种，其中以第1,2种最为严重，因为触发条件很简单，一个<img>就可以了，而第3种比较麻烦，需要使用JavaScript，所以使用的机会会比前面的少很多，但无论是哪种情况，只要触发了CSRF攻击，后果都有可能很严重。\n\n　　理解上面的3种攻击模式，其实可以看出，CSRF攻击是源于WEB的隐式身份验证机制！WEB的身份验证机制虽然可以保证一个请求是来自于某个用户的浏览器，但却无法保证该请求是用户批准发送的！\n\n#### 五.CSRF的防御\n\n　　我总结了一下看到的资料，CSRF的防御可以从服务端和客户端两方面着手，防御效果是从服务端着手效果比较好，现在一般的CSRF防御也都在服务端进行。\n\n　　1.服务端进行CSRF防御\n\n　　服务端的CSRF方式方法很多样，但总的思想都是一致的，就是在客户端页面增加伪随机数。\n\n　　(1).Cookie Hashing(所有表单都包含同一个伪随机值)：\n\n　　这可能是最简单的解决方案了，因为攻击者不能获得第三方的Cookie(理论上)，所以表单中的数据也就构造失败了:>\n```\n　　<?php\n　　　　//构造加密的Cookie信息\n　　　　$value = “DefenseSCRF”;\n　　　　setcookie(”cookie”, $value, time()+3600);\n　　?>\n```\n　　在表单里增加Hash值，以认证这确实是用户发送的请求。\n\n```\n　　<?php\n　　　　$hash = md5($_COOKIE['cookie']);\n　　?>\n　　<form method=”POST” action=”transfer.php”>\n　　　　<input type=”text” name=”toBankId”>\n　　　　<input type=”text” name=”money”>\n　　　　<input type=”hidden” name=”hash” value=”<?=$hash;?>”>\n　　　　<input type=”submit” name=”submit” value=”Submit”>\n　　</form>\n```\n　　然后在服务器端进行Hash值验证\n\n```\n      <?php\n　　      if(isset($_POST['check'])) {\n     　　      $hash = md5($_COOKIE['cookie']);\n          　　 if($_POST['check'] == $hash) {\n               　　 doJob();\n　　           } else {\n　　　　　　　　//...\n          　　 }\n　　      } else {\n　　　　　　//...\n　　      }\n      ?>\n```\n　　这个方法个人觉得已经可以杜绝99%的CSRF攻击了，那还有1%呢....由于用户的Cookie很容易由于网站的XSS漏洞而被盗取，这就另外的1%。一般的攻击者看到有需要算Hash值，基本都会放弃了，某些除外，所以如果需要100%的杜绝，这个不是最好的方法。\n　　(2).验证码\n\n　　这个方案的思路是：每次的用户提交都需要用户在表单中填写一个图片上的随机字符串，厄....这个方案可以完全解决CSRF，但个人觉得在易用性方面似乎不是太好，还有听闻是验证码图片的使用涉及了一个被称为MHTML的Bug，可能在某些版本的微软IE中受影响。\n\n　　(3).One-Time Tokens(不同的表单包含一个不同的伪随机值)\n\n　　在实现One-Time Tokens时，需要注意一点：就是“并行会话的兼容”。如果用户在一个站点上同时打开了两个不同的表单，CSRF保护措施不应该影响到他对任何表单的提交。考虑一下如果每次表单被装入时站点生成一个伪随机值来覆盖以前的伪随机值将会发生什么情况：用户只能成功地提交他最后打开的表单，因为所有其他的表单都含有非法的伪随机值。必须小心操作以确保CSRF保护措施不会影响选项卡式的浏览或者利用多个浏览器窗口浏览一个站点。\n\n　　以下我的实现:\n\n　　1).先是令牌生成函数(gen_token())：\n\n```\n     <?php\n     function gen_token() {\n　　　　//这里我是贪方便，实际上单使用Rand()得出的随机数作为令牌，也是不安全的。\n　　　　//这个可以参考我写的Findbugs笔记中的《Random object created and used only once》\n          $token = md5(uniqid(rand(), true));\n          return $token;\n     }\n```\n　　2).然后是Session令牌生成函数(gen_stoken())：\n\n```\n     <?php\n     　　function gen_stoken() {\n　　　　　　$pToken = \"\";\n　　　　　　if($_SESSION[STOKEN_NAME]  == $pToken){\n　　　　　　　　//没有值，赋新值\n　　　　　　　　$_SESSION[STOKEN_NAME] = gen_token();\n　　　　　　}    \n　　　　　　else{\n　　　　　　　　//继续使用旧的值\n　　　　　　}\n     　　}\n     ?>\n```\n　　3).WEB表单生成隐藏输入域的函数：　　\n\n```\n     <?php\n　　     function gen_input() {\n     　　     gen_stoken();\n　　          echo “<input type=\\”hidden\\” name=\\”\" . FTOKEN_NAME . “\\”\n          　　     value=\\”\" . $_SESSION[STOKEN_NAME] . “\\”> “;\n     　　}\n     ?>\n```\n　　4).WEB表单结构：\n\n```\n     <?php\n          session_start();\n          include(”functions.php”);\n     ?>\n     <form method=”POST” action=”transfer.php”>\n          <input type=”text” name=”toBankId”>\n          <input type=”text” name=”money”>\n          <? gen_input(); ?>\n          <input type=”submit” name=”submit” value=”Submit”>\n     </FORM>\n```\n　　5).服务端核对令牌：\n\n　　这个很简单，这里就不再啰嗦了。\n\n\n\n六.参考文献\n\n[[1].Preventing CSRF](http://www.playhack.net/view.php?id=31)\n\n[[2].Security Corner: Cross-Site Request Forgeries](http://shiflett.org/articles/cross-site-request-forgeries)\n\n[[3].《深入解析跨站请求伪造漏洞：原理剖析》](http://netsecurity.51cto.com/art/200812/102951.htm)\n\n[[4].《Web安全测试之跨站请求伪造（CSRF）》](http://netsecurity.51cto.com/art/200811/97281.htm)\n\n[[5].《深入解析跨站请求伪造漏洞：实例讲解》](http://netsecurity.51cto.com/art/200812/102925.htm)\n\n[6].http://baike.baidu.com/view/1609487.htm\n","slug":"浅谈csrf攻击方式","published":1,"updated":"2017-06-01T06:42:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5naxw5g001xfcxenvzg1ljf","content":"<h4 id=\"一-CSRF是什么？\"><a href=\"#一-CSRF是什么？\" class=\"headerlink\" title=\"一.CSRF是什么？\"></a>一.CSRF是什么？</h4><p>　　CSRF（Cross-site request forgery），中文名称：跨站请求伪造，也被称为：one click attack/session riding，缩写为：CSRF/XSRF。</p>\n<h4 id=\"二-CSRF可以做什么？\"><a href=\"#二-CSRF可以做什么？\" class=\"headerlink\" title=\"二.CSRF可以做什么？\"></a>二.CSRF可以做什么？</h4><p>　　你这可以这么理解CSRF攻击：攻击者盗用了你的身份，以你的名义发送恶意请求。CSRF能够做的事情包括：以你名义发送邮件，发消息，盗取你的账号，甚至于购买商品，虚拟货币转账……造成的问题包括：个人隐私泄露以及财产安全。</p>\n<a id=\"more\"></a>\n<h4 id=\"三-CSRF漏洞现状\"><a href=\"#三-CSRF漏洞现状\" class=\"headerlink\" title=\"三.CSRF漏洞现状\"></a>三.CSRF漏洞现状</h4><p>　　CSRF这种攻击方式在2000年已经被国外的安全人员提出，但在国内，直到06年才开始被关注，08年，国内外的多个大型社区和交互网站分别爆出CSRF漏洞，如：NYTimes.com（纽约时报）、Metafilter（一个大型的BLOG网站），YouTube和百度HI……而现在，互联网上的许多站点仍对此毫无防备，以至于安全业界称CSRF为“沉睡的巨人”。</p>\n<h4 id=\"四-CSRF的原理\"><a href=\"#四-CSRF的原理\" class=\"headerlink\" title=\"四.CSRF的原理\"></a>四.CSRF的原理</h4><p>　　下图简单阐述了CSRF攻击的思想：<br>    <img src=\"http://pic002.cnblogs.com/img/hyddd/200904/2009040916453171.jpg\" alt=\"\">\n　　</p>\n<p>　　从上图可以看出，要完成一次CSRF攻击，受害者必须依次完成两个步骤：</p>\n<p>　　1.登录受信任网站A，并在本地生成Cookie。</p>\n<p>　　2.在不登出A的情况下，访问危险网站B。</p>\n<p>　　看到这里，你也许会说：“如果我不满足以上两个条件中的一个，我就不会受到CSRF的攻击”。是的，确实如此，但你不能保证以下情况不会发生：</p>\n<p>　　1.你不能保证你登录了一个网站后，不再打开一个tab页面并访问另外的网站。</p>\n<p>　　2.你不能保证你关闭浏览器了后，你本地的Cookie立刻过期，你上次的会话已经结束。（事实上，关闭浏览器不能结束一个会话，但大多数人都会错误的认为关闭浏览器就等于退出登录/结束会话了……）</p>\n<p>　　3.上图中所谓的攻击网站，可能是一个存在其他漏洞的可信任的经常被人访问的网站。</p>\n<p>　　上面大概地讲了一下CSRF攻击的思想，下面我将用几个例子详细说说具体的CSRF攻击，这里我以一个银行转账的操作作为例子（仅仅是例子，真实的银行网站没这么傻:&gt;）</p>\n<p>　　示例1：</p>\n<p>　　银行网站A，它以GET请求来完成银行转账的操作，如：<code>http://www.mybank.com/Transfer.php?toBankId=11&amp;money=1000</code></p>\n<p>　　危险网站B，它里面有一段HTML的代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">　　&lt;img src=http://www.mybank.com/Transfer.php?toBankId=11&amp;money=1000&gt;</div></pre></td></tr></table></figure></p>\n<p>　　首先，你登录了银行网站A，然后访问危险网站B，噢，这时你会发现你的银行账户少了1000块……</p>\n<p>　　为什么会这样呢？原因是银行网站A违反了HTTP规范，使用GET请求更新资源。在访问危险网站B的之前，你已经登录了银行网站A，而B中的<img>以GET的方式请求第三方资源（这里的第三方就是指银行网站了，原本这是一个合法的请求，但这里被不法分子利用了），所以你的浏览器会带上你的银行网站A的Cookie发出Get请求，去获取资源“<a href=\"http://www.mybank.com/Transfer.php?toBankId=11&amp;money=1000”，结果银行网站服务器收到请求后，认为这是一个更新资源操作（转账操作），所以就立刻进行转账操作\" target=\"_blank\" rel=\"external\">http://www.mybank.com/Transfer.php?toBankId=11&amp;money=1000”，结果银行网站服务器收到请求后，认为这是一个更新资源操作（转账操作），所以就立刻进行转账操作</a>……</p>\n<p>　　示例2：</p>\n<p>　　为了杜绝上面的问题，银行决定改用POST请求完成转账操作。</p>\n<p>　　银行网站A的WEB表单如下：　　<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">　　&lt;form action=&quot;Transfer.php&quot; method=&quot;POST&quot;&gt;</div><div class=\"line\">　　　　&lt;p&gt;ToBankId: &lt;input type=&quot;text&quot; name=&quot;toBankId&quot; /&gt;&lt;/p&gt;</div><div class=\"line\">　　　　&lt;p&gt;Money: &lt;input type=&quot;text&quot; name=&quot;money&quot; /&gt;&lt;/p&gt;</div><div class=\"line\">　　　　&lt;p&gt;&lt;input type=&quot;submit&quot; value=&quot;Transfer&quot; /&gt;&lt;/p&gt;</div><div class=\"line\">　　&lt;/form&gt;</div></pre></td></tr></table></figure></p>\n<p>　　后台处理页面Transfer.php如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">　　&lt;?php</div><div class=\"line\">　　　　session_start();</div><div class=\"line\">　　　　if (isset($_REQUEST[&apos;toBankId&apos;] &amp;&amp;　isset($_REQUEST[&apos;money&apos;]))</div><div class=\"line\">　　　　&#123;</div><div class=\"line\">　　　　    buy_stocks($_REQUEST[&apos;toBankId&apos;],　$_REQUEST[&apos;money&apos;]);</div><div class=\"line\">　　　　&#125;</div><div class=\"line\">　　?&gt;</div></pre></td></tr></table></figure>\n<p>　　危险网站B，仍然只是包含那句HTML代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">　　&lt;img src=http://www.mybank.com/Transfer.php?toBankId=11&amp;money=1000&gt;</div></pre></td></tr></table></figure></p>\n<p>　　和示例1中的操作一样，你首先登录了银行网站A，然后访问危险网站B，结果…..和示例1一样，你再次没了1000块～T_T，这次事故的原因是：银行后台使用了$_REQUEST去获取请求的数据，而$_REQUEST既可以获取GET请求的数据，也可以获取POST请求的数据，这就造成了在后台处理程序无法区分这到底是GET请求的数据还是POST请求的数据。在PHP中，可以使用$_GET和$_POST分别获取GET请求和POST请求的数据。在JAVA中，用于获取请求数据request一样存在不能区分GET请求数据和POST数据的问题。</p>\n<p>　　示例3：</p>\n<p>　　经过前面2个惨痛的教训，银行决定把获取请求数据的方法也改了，改用$_POST，只获取POST请求的数据，后台处理页面Transfer.php代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">　　&lt;?php</div><div class=\"line\">　　　　session_start();</div><div class=\"line\">　　　　if (isset($_POST[&apos;toBankId&apos;] &amp;&amp;　isset($_POST[&apos;money&apos;]))</div><div class=\"line\">　　　　&#123;</div><div class=\"line\">　　　　    buy_stocks($_POST[&apos;toBankId&apos;],　$_POST[&apos;money&apos;]);</div><div class=\"line\">　　　　&#125;</div><div class=\"line\">　　?&gt;</div></pre></td></tr></table></figure>\n<p>　　然而，危险网站B与时俱进，它改了一下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;html&gt;</div><div class=\"line\">　　&lt;head&gt;</div><div class=\"line\">　　　　&lt;script type=&quot;text/javascript&quot;&gt;</div><div class=\"line\">　　　　　　function steal()</div><div class=\"line\">　　　　　　&#123;</div><div class=\"line\">          　　　　 iframe = document.frames[&quot;steal&quot;];</div><div class=\"line\">　　     　　      iframe.document.Submit(&quot;transfer&quot;);</div><div class=\"line\">　　　　　　&#125;</div><div class=\"line\">　　　　&lt;/script&gt;</div><div class=\"line\">　　&lt;/head&gt;</div><div class=\"line\"></div><div class=\"line\">　　&lt;body onload=&quot;steal()&quot;&gt;</div><div class=\"line\">　　　　&lt;iframe name=&quot;steal&quot; display=&quot;none&quot;&gt;</div><div class=\"line\">　　　　　　&lt;form method=&quot;POST&quot; name=&quot;transfer&quot;　action=&quot;http://www.myBank.com/Transfer.php&quot;&gt;</div><div class=\"line\">　　　　　　　　&lt;input type=&quot;hidden&quot; name=&quot;toBankId&quot; value=&quot;11&quot;&gt;</div><div class=\"line\">　　　　　　　　&lt;input type=&quot;hidden&quot; name=&quot;money&quot; value=&quot;1000&quot;&gt;</div><div class=\"line\">　　　　　　&lt;/form&gt;</div><div class=\"line\">　　　　&lt;/iframe&gt;</div><div class=\"line\">　　&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure>\n<p>如果用户仍是继续上面的操作，很不幸，结果将会是再次不见1000块……因为这里危险网站B暗地里发送了POST请求到银行!</p>\n<p>　　总结一下上面3个例子，CSRF主要的攻击模式基本上是以上的3种，其中以第1,2种最为严重，因为触发条件很简单，一个<img>就可以了，而第3种比较麻烦，需要使用JavaScript，所以使用的机会会比前面的少很多，但无论是哪种情况，只要触发了CSRF攻击，后果都有可能很严重。</p>\n<p>　　理解上面的3种攻击模式，其实可以看出，CSRF攻击是源于WEB的隐式身份验证机制！WEB的身份验证机制虽然可以保证一个请求是来自于某个用户的浏览器，但却无法保证该请求是用户批准发送的！</p>\n<h4 id=\"五-CSRF的防御\"><a href=\"#五-CSRF的防御\" class=\"headerlink\" title=\"五.CSRF的防御\"></a>五.CSRF的防御</h4><p>　　我总结了一下看到的资料，CSRF的防御可以从服务端和客户端两方面着手，防御效果是从服务端着手效果比较好，现在一般的CSRF防御也都在服务端进行。</p>\n<p>　　1.服务端进行CSRF防御</p>\n<p>　　服务端的CSRF方式方法很多样，但总的思想都是一致的，就是在客户端页面增加伪随机数。</p>\n<p>　　(1).Cookie Hashing(所有表单都包含同一个伪随机值)：</p>\n<p>　　这可能是最简单的解决方案了，因为攻击者不能获得第三方的Cookie(理论上)，所以表单中的数据也就构造失败了:&gt;<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">　　&lt;?php</div><div class=\"line\">　　　　//构造加密的Cookie信息</div><div class=\"line\">　　　　$value = “DefenseSCRF”;</div><div class=\"line\">　　　　setcookie(”cookie”, $value, time()+3600);</div><div class=\"line\">　　?&gt;</div></pre></td></tr></table></figure></p>\n<p>　　在表单里增加Hash值，以认证这确实是用户发送的请求。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">　　&lt;?php</div><div class=\"line\">　　　　$hash = md5($_COOKIE[&apos;cookie&apos;]);</div><div class=\"line\">　　?&gt;</div><div class=\"line\">　　&lt;form method=”POST” action=”transfer.php”&gt;</div><div class=\"line\">　　　　&lt;input type=”text” name=”toBankId”&gt;</div><div class=\"line\">　　　　&lt;input type=”text” name=”money”&gt;</div><div class=\"line\">　　　　&lt;input type=”hidden” name=”hash” value=”&lt;?=$hash;?&gt;”&gt;</div><div class=\"line\">　　　　&lt;input type=”submit” name=”submit” value=”Submit”&gt;</div><div class=\"line\">　　&lt;/form&gt;</div></pre></td></tr></table></figure>\n<p>　　然后在服务器端进行Hash值验证</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?php</div><div class=\"line\">　　      if(isset($_POST[&apos;check&apos;])) &#123;</div><div class=\"line\">     　　      $hash = md5($_COOKIE[&apos;cookie&apos;]);</div><div class=\"line\">    　　 if($_POST[&apos;check&apos;] == $hash) &#123;</div><div class=\"line\">         　　 doJob();</div><div class=\"line\">　　           &#125; else &#123;</div><div class=\"line\">　　　　　　　　//...</div><div class=\"line\">    　　 &#125;</div><div class=\"line\">　　      &#125; else &#123;</div><div class=\"line\">　　　　　　//...</div><div class=\"line\">　　      &#125;</div><div class=\"line\">?&gt;</div></pre></td></tr></table></figure>\n<p>　　这个方法个人觉得已经可以杜绝99%的CSRF攻击了，那还有1%呢….由于用户的Cookie很容易由于网站的XSS漏洞而被盗取，这就另外的1%。一般的攻击者看到有需要算Hash值，基本都会放弃了，某些除外，所以如果需要100%的杜绝，这个不是最好的方法。<br>　　(2).验证码</p>\n<p>　　这个方案的思路是：每次的用户提交都需要用户在表单中填写一个图片上的随机字符串，厄….这个方案可以完全解决CSRF，但个人觉得在易用性方面似乎不是太好，还有听闻是验证码图片的使用涉及了一个被称为MHTML的Bug，可能在某些版本的微软IE中受影响。</p>\n<p>　　(3).One-Time Tokens(不同的表单包含一个不同的伪随机值)</p>\n<p>　　在实现One-Time Tokens时，需要注意一点：就是“并行会话的兼容”。如果用户在一个站点上同时打开了两个不同的表单，CSRF保护措施不应该影响到他对任何表单的提交。考虑一下如果每次表单被装入时站点生成一个伪随机值来覆盖以前的伪随机值将会发生什么情况：用户只能成功地提交他最后打开的表单，因为所有其他的表单都含有非法的伪随机值。必须小心操作以确保CSRF保护措施不会影响选项卡式的浏览或者利用多个浏览器窗口浏览一个站点。</p>\n<p>　　以下我的实现:</p>\n<p>　　1).先是令牌生成函数(gen_token())：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?php</div><div class=\"line\">function gen_token() &#123;</div><div class=\"line\">　　　　//这里我是贪方便，实际上单使用Rand()得出的随机数作为令牌，也是不安全的。</div><div class=\"line\">　　　　//这个可以参考我写的Findbugs笔记中的《Random object created and used only once》</div><div class=\"line\">     $token = md5(uniqid(rand(), true));</div><div class=\"line\">     return $token;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>　　2).然后是Session令牌生成函数(gen_stoken())：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?php</div><div class=\"line\">　　function gen_stoken() &#123;</div><div class=\"line\">　　　　　　$pToken = &quot;&quot;;</div><div class=\"line\">　　　　　　if($_SESSION[STOKEN_NAME]  == $pToken)&#123;</div><div class=\"line\">　　　　　　　　//没有值，赋新值</div><div class=\"line\">　　　　　　　　$_SESSION[STOKEN_NAME] = gen_token();</div><div class=\"line\">　　　　　　&#125;    </div><div class=\"line\">　　　　　　else&#123;</div><div class=\"line\">　　　　　　　　//继续使用旧的值</div><div class=\"line\">　　　　　　&#125;</div><div class=\"line\">　　&#125;</div><div class=\"line\">?&gt;</div></pre></td></tr></table></figure>\n<p>　　3).WEB表单生成隐藏输入域的函数：　　</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?php</div><div class=\"line\">　　     function gen_input() &#123;</div><div class=\"line\">　　     gen_stoken();</div><div class=\"line\">　　          echo “&lt;input type=\\”hidden\\” name=\\”&quot; . FTOKEN_NAME . “\\”</div><div class=\"line\">     　　     value=\\”&quot; . $_SESSION[STOKEN_NAME] . “\\”&gt; “;</div><div class=\"line\">　　&#125;</div><div class=\"line\">?&gt;</div></pre></td></tr></table></figure>\n<p>　　4).WEB表单结构：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?php</div><div class=\"line\">     session_start();</div><div class=\"line\">     include(”functions.php”);</div><div class=\"line\">?&gt;</div><div class=\"line\">&lt;form method=”POST” action=”transfer.php”&gt;</div><div class=\"line\">     &lt;input type=”text” name=”toBankId”&gt;</div><div class=\"line\">     &lt;input type=”text” name=”money”&gt;</div><div class=\"line\">     &lt;? gen_input(); ?&gt;</div><div class=\"line\">     &lt;input type=”submit” name=”submit” value=”Submit”&gt;</div><div class=\"line\">&lt;/FORM&gt;</div></pre></td></tr></table></figure>\n<p>　　5).服务端核对令牌：</p>\n<p>　　这个很简单，这里就不再啰嗦了。</p>\n<p>六.参考文献</p>\n<p><a href=\"http://www.playhack.net/view.php?id=31\" target=\"_blank\" rel=\"external\">[1].Preventing CSRF</a></p>\n<p><a href=\"http://shiflett.org/articles/cross-site-request-forgeries\" target=\"_blank\" rel=\"external\">[2].Security Corner: Cross-Site Request Forgeries</a></p>\n<p><a href=\"http://netsecurity.51cto.com/art/200812/102951.htm\" target=\"_blank\" rel=\"external\">[3].《深入解析跨站请求伪造漏洞：原理剖析》</a></p>\n<p><a href=\"http://netsecurity.51cto.com/art/200811/97281.htm\" target=\"_blank\" rel=\"external\">[4].《Web安全测试之跨站请求伪造（CSRF）》</a></p>\n<p><a href=\"http://netsecurity.51cto.com/art/200812/102925.htm\" target=\"_blank\" rel=\"external\">[5].《深入解析跨站请求伪造漏洞：实例讲解》</a></p>\n<p>[6].<a href=\"http://baike.baidu.com/view/1609487.htm\" target=\"_blank\" rel=\"external\">http://baike.baidu.com/view/1609487.htm</a></p>\n","excerpt":"<h4 id=\"一-CSRF是什么？\"><a href=\"#一-CSRF是什么？\" class=\"headerlink\" title=\"一.CSRF是什么？\"></a>一.CSRF是什么？</h4><p>　　CSRF（Cross-site request forgery），中文名称：跨站请求伪造，也被称为：one click attack/session riding，缩写为：CSRF/XSRF。</p>\n<h4 id=\"二-CSRF可以做什么？\"><a href=\"#二-CSRF可以做什么？\" class=\"headerlink\" title=\"二.CSRF可以做什么？\"></a>二.CSRF可以做什么？</h4><p>　　你这可以这么理解CSRF攻击：攻击者盗用了你的身份，以你的名义发送恶意请求。CSRF能够做的事情包括：以你名义发送邮件，发消息，盗取你的账号，甚至于购买商品，虚拟货币转账……造成的问题包括：个人隐私泄露以及财产安全。</p>","more":"<h4 id=\"三-CSRF漏洞现状\"><a href=\"#三-CSRF漏洞现状\" class=\"headerlink\" title=\"三.CSRF漏洞现状\"></a>三.CSRF漏洞现状</h4><p>　　CSRF这种攻击方式在2000年已经被国外的安全人员提出，但在国内，直到06年才开始被关注，08年，国内外的多个大型社区和交互网站分别爆出CSRF漏洞，如：NYTimes.com（纽约时报）、Metafilter（一个大型的BLOG网站），YouTube和百度HI……而现在，互联网上的许多站点仍对此毫无防备，以至于安全业界称CSRF为“沉睡的巨人”。</p>\n<h4 id=\"四-CSRF的原理\"><a href=\"#四-CSRF的原理\" class=\"headerlink\" title=\"四.CSRF的原理\"></a>四.CSRF的原理</h4><p>　　下图简单阐述了CSRF攻击的思想：<br>    <img src=\"http://pic002.cnblogs.com/img/hyddd/200904/2009040916453171.jpg\" alt=\"\">\n　　</p>\n<p>　　从上图可以看出，要完成一次CSRF攻击，受害者必须依次完成两个步骤：</p>\n<p>　　1.登录受信任网站A，并在本地生成Cookie。</p>\n<p>　　2.在不登出A的情况下，访问危险网站B。</p>\n<p>　　看到这里，你也许会说：“如果我不满足以上两个条件中的一个，我就不会受到CSRF的攻击”。是的，确实如此，但你不能保证以下情况不会发生：</p>\n<p>　　1.你不能保证你登录了一个网站后，不再打开一个tab页面并访问另外的网站。</p>\n<p>　　2.你不能保证你关闭浏览器了后，你本地的Cookie立刻过期，你上次的会话已经结束。（事实上，关闭浏览器不能结束一个会话，但大多数人都会错误的认为关闭浏览器就等于退出登录/结束会话了……）</p>\n<p>　　3.上图中所谓的攻击网站，可能是一个存在其他漏洞的可信任的经常被人访问的网站。</p>\n<p>　　上面大概地讲了一下CSRF攻击的思想，下面我将用几个例子详细说说具体的CSRF攻击，这里我以一个银行转账的操作作为例子（仅仅是例子，真实的银行网站没这么傻:&gt;）</p>\n<p>　　示例1：</p>\n<p>　　银行网站A，它以GET请求来完成银行转账的操作，如：<code>http://www.mybank.com/Transfer.php?toBankId=11&amp;money=1000</code></p>\n<p>　　危险网站B，它里面有一段HTML的代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">　　&lt;img src=http://www.mybank.com/Transfer.php?toBankId=11&amp;money=1000&gt;</div></pre></td></tr></table></figure></p>\n<p>　　首先，你登录了银行网站A，然后访问危险网站B，噢，这时你会发现你的银行账户少了1000块……</p>\n<p>　　为什么会这样呢？原因是银行网站A违反了HTTP规范，使用GET请求更新资源。在访问危险网站B的之前，你已经登录了银行网站A，而B中的<img>以GET的方式请求第三方资源（这里的第三方就是指银行网站了，原本这是一个合法的请求，但这里被不法分子利用了），所以你的浏览器会带上你的银行网站A的Cookie发出Get请求，去获取资源“<a href=\"http://www.mybank.com/Transfer.php?toBankId=11&amp;money=1000”，结果银行网站服务器收到请求后，认为这是一个更新资源操作（转账操作），所以就立刻进行转账操作\">http://www.mybank.com/Transfer.php?toBankId=11&amp;money=1000”，结果银行网站服务器收到请求后，认为这是一个更新资源操作（转账操作），所以就立刻进行转账操作</a>……</p>\n<p>　　示例2：</p>\n<p>　　为了杜绝上面的问题，银行决定改用POST请求完成转账操作。</p>\n<p>　　银行网站A的WEB表单如下：　　<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">　　&lt;form action=&quot;Transfer.php&quot; method=&quot;POST&quot;&gt;</div><div class=\"line\">　　　　&lt;p&gt;ToBankId: &lt;input type=&quot;text&quot; name=&quot;toBankId&quot; /&gt;&lt;/p&gt;</div><div class=\"line\">　　　　&lt;p&gt;Money: &lt;input type=&quot;text&quot; name=&quot;money&quot; /&gt;&lt;/p&gt;</div><div class=\"line\">　　　　&lt;p&gt;&lt;input type=&quot;submit&quot; value=&quot;Transfer&quot; /&gt;&lt;/p&gt;</div><div class=\"line\">　　&lt;/form&gt;</div></pre></td></tr></table></figure></p>\n<p>　　后台处理页面Transfer.php如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">　　&lt;?php</div><div class=\"line\">　　　　session_start();</div><div class=\"line\">　　　　if (isset($_REQUEST[&apos;toBankId&apos;] &amp;&amp;　isset($_REQUEST[&apos;money&apos;]))</div><div class=\"line\">　　　　&#123;</div><div class=\"line\">　　　　    buy_stocks($_REQUEST[&apos;toBankId&apos;],　$_REQUEST[&apos;money&apos;]);</div><div class=\"line\">　　　　&#125;</div><div class=\"line\">　　?&gt;</div></pre></td></tr></table></figure>\n<p>　　危险网站B，仍然只是包含那句HTML代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">　　&lt;img src=http://www.mybank.com/Transfer.php?toBankId=11&amp;money=1000&gt;</div></pre></td></tr></table></figure></p>\n<p>　　和示例1中的操作一样，你首先登录了银行网站A，然后访问危险网站B，结果…..和示例1一样，你再次没了1000块～T_T，这次事故的原因是：银行后台使用了$_REQUEST去获取请求的数据，而$_REQUEST既可以获取GET请求的数据，也可以获取POST请求的数据，这就造成了在后台处理程序无法区分这到底是GET请求的数据还是POST请求的数据。在PHP中，可以使用$_GET和$_POST分别获取GET请求和POST请求的数据。在JAVA中，用于获取请求数据request一样存在不能区分GET请求数据和POST数据的问题。</p>\n<p>　　示例3：</p>\n<p>　　经过前面2个惨痛的教训，银行决定把获取请求数据的方法也改了，改用$_POST，只获取POST请求的数据，后台处理页面Transfer.php代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">　　&lt;?php</div><div class=\"line\">　　　　session_start();</div><div class=\"line\">　　　　if (isset($_POST[&apos;toBankId&apos;] &amp;&amp;　isset($_POST[&apos;money&apos;]))</div><div class=\"line\">　　　　&#123;</div><div class=\"line\">　　　　    buy_stocks($_POST[&apos;toBankId&apos;],　$_POST[&apos;money&apos;]);</div><div class=\"line\">　　　　&#125;</div><div class=\"line\">　　?&gt;</div></pre></td></tr></table></figure>\n<p>　　然而，危险网站B与时俱进，它改了一下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;html&gt;</div><div class=\"line\">　　&lt;head&gt;</div><div class=\"line\">　　　　&lt;script type=&quot;text/javascript&quot;&gt;</div><div class=\"line\">　　　　　　function steal()</div><div class=\"line\">　　　　　　&#123;</div><div class=\"line\">          　　　　 iframe = document.frames[&quot;steal&quot;];</div><div class=\"line\">　　     　　      iframe.document.Submit(&quot;transfer&quot;);</div><div class=\"line\">　　　　　　&#125;</div><div class=\"line\">　　　　&lt;/script&gt;</div><div class=\"line\">　　&lt;/head&gt;</div><div class=\"line\"></div><div class=\"line\">　　&lt;body onload=&quot;steal()&quot;&gt;</div><div class=\"line\">　　　　&lt;iframe name=&quot;steal&quot; display=&quot;none&quot;&gt;</div><div class=\"line\">　　　　　　&lt;form method=&quot;POST&quot; name=&quot;transfer&quot;　action=&quot;http://www.myBank.com/Transfer.php&quot;&gt;</div><div class=\"line\">　　　　　　　　&lt;input type=&quot;hidden&quot; name=&quot;toBankId&quot; value=&quot;11&quot;&gt;</div><div class=\"line\">　　　　　　　　&lt;input type=&quot;hidden&quot; name=&quot;money&quot; value=&quot;1000&quot;&gt;</div><div class=\"line\">　　　　　　&lt;/form&gt;</div><div class=\"line\">　　　　&lt;/iframe&gt;</div><div class=\"line\">　　&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure>\n<p>如果用户仍是继续上面的操作，很不幸，结果将会是再次不见1000块……因为这里危险网站B暗地里发送了POST请求到银行!</p>\n<p>　　总结一下上面3个例子，CSRF主要的攻击模式基本上是以上的3种，其中以第1,2种最为严重，因为触发条件很简单，一个<img>就可以了，而第3种比较麻烦，需要使用JavaScript，所以使用的机会会比前面的少很多，但无论是哪种情况，只要触发了CSRF攻击，后果都有可能很严重。</p>\n<p>　　理解上面的3种攻击模式，其实可以看出，CSRF攻击是源于WEB的隐式身份验证机制！WEB的身份验证机制虽然可以保证一个请求是来自于某个用户的浏览器，但却无法保证该请求是用户批准发送的！</p>\n<h4 id=\"五-CSRF的防御\"><a href=\"#五-CSRF的防御\" class=\"headerlink\" title=\"五.CSRF的防御\"></a>五.CSRF的防御</h4><p>　　我总结了一下看到的资料，CSRF的防御可以从服务端和客户端两方面着手，防御效果是从服务端着手效果比较好，现在一般的CSRF防御也都在服务端进行。</p>\n<p>　　1.服务端进行CSRF防御</p>\n<p>　　服务端的CSRF方式方法很多样，但总的思想都是一致的，就是在客户端页面增加伪随机数。</p>\n<p>　　(1).Cookie Hashing(所有表单都包含同一个伪随机值)：</p>\n<p>　　这可能是最简单的解决方案了，因为攻击者不能获得第三方的Cookie(理论上)，所以表单中的数据也就构造失败了:&gt;<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">　　&lt;?php</div><div class=\"line\">　　　　//构造加密的Cookie信息</div><div class=\"line\">　　　　$value = “DefenseSCRF”;</div><div class=\"line\">　　　　setcookie(”cookie”, $value, time()+3600);</div><div class=\"line\">　　?&gt;</div></pre></td></tr></table></figure></p>\n<p>　　在表单里增加Hash值，以认证这确实是用户发送的请求。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">　　&lt;?php</div><div class=\"line\">　　　　$hash = md5($_COOKIE[&apos;cookie&apos;]);</div><div class=\"line\">　　?&gt;</div><div class=\"line\">　　&lt;form method=”POST” action=”transfer.php”&gt;</div><div class=\"line\">　　　　&lt;input type=”text” name=”toBankId”&gt;</div><div class=\"line\">　　　　&lt;input type=”text” name=”money”&gt;</div><div class=\"line\">　　　　&lt;input type=”hidden” name=”hash” value=”&lt;?=$hash;?&gt;”&gt;</div><div class=\"line\">　　　　&lt;input type=”submit” name=”submit” value=”Submit”&gt;</div><div class=\"line\">　　&lt;/form&gt;</div></pre></td></tr></table></figure>\n<p>　　然后在服务器端进行Hash值验证</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?php</div><div class=\"line\">　　      if(isset($_POST[&apos;check&apos;])) &#123;</div><div class=\"line\">     　　      $hash = md5($_COOKIE[&apos;cookie&apos;]);</div><div class=\"line\">    　　 if($_POST[&apos;check&apos;] == $hash) &#123;</div><div class=\"line\">         　　 doJob();</div><div class=\"line\">　　           &#125; else &#123;</div><div class=\"line\">　　　　　　　　//...</div><div class=\"line\">    　　 &#125;</div><div class=\"line\">　　      &#125; else &#123;</div><div class=\"line\">　　　　　　//...</div><div class=\"line\">　　      &#125;</div><div class=\"line\">?&gt;</div></pre></td></tr></table></figure>\n<p>　　这个方法个人觉得已经可以杜绝99%的CSRF攻击了，那还有1%呢….由于用户的Cookie很容易由于网站的XSS漏洞而被盗取，这就另外的1%。一般的攻击者看到有需要算Hash值，基本都会放弃了，某些除外，所以如果需要100%的杜绝，这个不是最好的方法。<br>　　(2).验证码</p>\n<p>　　这个方案的思路是：每次的用户提交都需要用户在表单中填写一个图片上的随机字符串，厄….这个方案可以完全解决CSRF，但个人觉得在易用性方面似乎不是太好，还有听闻是验证码图片的使用涉及了一个被称为MHTML的Bug，可能在某些版本的微软IE中受影响。</p>\n<p>　　(3).One-Time Tokens(不同的表单包含一个不同的伪随机值)</p>\n<p>　　在实现One-Time Tokens时，需要注意一点：就是“并行会话的兼容”。如果用户在一个站点上同时打开了两个不同的表单，CSRF保护措施不应该影响到他对任何表单的提交。考虑一下如果每次表单被装入时站点生成一个伪随机值来覆盖以前的伪随机值将会发生什么情况：用户只能成功地提交他最后打开的表单，因为所有其他的表单都含有非法的伪随机值。必须小心操作以确保CSRF保护措施不会影响选项卡式的浏览或者利用多个浏览器窗口浏览一个站点。</p>\n<p>　　以下我的实现:</p>\n<p>　　1).先是令牌生成函数(gen_token())：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?php</div><div class=\"line\">function gen_token() &#123;</div><div class=\"line\">　　　　//这里我是贪方便，实际上单使用Rand()得出的随机数作为令牌，也是不安全的。</div><div class=\"line\">　　　　//这个可以参考我写的Findbugs笔记中的《Random object created and used only once》</div><div class=\"line\">     $token = md5(uniqid(rand(), true));</div><div class=\"line\">     return $token;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>　　2).然后是Session令牌生成函数(gen_stoken())：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?php</div><div class=\"line\">　　function gen_stoken() &#123;</div><div class=\"line\">　　　　　　$pToken = &quot;&quot;;</div><div class=\"line\">　　　　　　if($_SESSION[STOKEN_NAME]  == $pToken)&#123;</div><div class=\"line\">　　　　　　　　//没有值，赋新值</div><div class=\"line\">　　　　　　　　$_SESSION[STOKEN_NAME] = gen_token();</div><div class=\"line\">　　　　　　&#125;    </div><div class=\"line\">　　　　　　else&#123;</div><div class=\"line\">　　　　　　　　//继续使用旧的值</div><div class=\"line\">　　　　　　&#125;</div><div class=\"line\">　　&#125;</div><div class=\"line\">?&gt;</div></pre></td></tr></table></figure>\n<p>　　3).WEB表单生成隐藏输入域的函数：　　</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?php</div><div class=\"line\">　　     function gen_input() &#123;</div><div class=\"line\">　　     gen_stoken();</div><div class=\"line\">　　          echo “&lt;input type=\\”hidden\\” name=\\”&quot; . FTOKEN_NAME . “\\”</div><div class=\"line\">     　　     value=\\”&quot; . $_SESSION[STOKEN_NAME] . “\\”&gt; “;</div><div class=\"line\">　　&#125;</div><div class=\"line\">?&gt;</div></pre></td></tr></table></figure>\n<p>　　4).WEB表单结构：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?php</div><div class=\"line\">     session_start();</div><div class=\"line\">     include(”functions.php”);</div><div class=\"line\">?&gt;</div><div class=\"line\">&lt;form method=”POST” action=”transfer.php”&gt;</div><div class=\"line\">     &lt;input type=”text” name=”toBankId”&gt;</div><div class=\"line\">     &lt;input type=”text” name=”money”&gt;</div><div class=\"line\">     &lt;? gen_input(); ?&gt;</div><div class=\"line\">     &lt;input type=”submit” name=”submit” value=”Submit”&gt;</div><div class=\"line\">&lt;/FORM&gt;</div></pre></td></tr></table></figure>\n<p>　　5).服务端核对令牌：</p>\n<p>　　这个很简单，这里就不再啰嗦了。</p>\n<p>六.参考文献</p>\n<p><a href=\"http://www.playhack.net/view.php?id=31\">[1].Preventing CSRF</a></p>\n<p><a href=\"http://shiflett.org/articles/cross-site-request-forgeries\">[2].Security Corner: Cross-Site Request Forgeries</a></p>\n<p><a href=\"http://netsecurity.51cto.com/art/200812/102951.htm\">[3].《深入解析跨站请求伪造漏洞：原理剖析》</a></p>\n<p><a href=\"http://netsecurity.51cto.com/art/200811/97281.htm\">[4].《Web安全测试之跨站请求伪造（CSRF）》</a></p>\n<p><a href=\"http://netsecurity.51cto.com/art/200812/102925.htm\">[5].《深入解析跨站请求伪造漏洞：实例讲解》</a></p>\n<p>[6].<a href=\"http://baike.baidu.com/view/1609487.htm\">http://baike.baidu.com/view/1609487.htm</a></p>"},{"title":"用户体验设计","date":"2017-04-20T03:11:59.000Z","from":"原","_content":"\n### 用户体验设计\n\n>* [腾讯用户体验设计](http://idesign.qq.com/#!index/site)\n>* [网易用户体验设计](http://uedc.163.com/)\n>* [网易游戏设计中心](http://egdc.163.com/category/work)\n\n<!--more-->\n","source":"_posts/用户体验设计.md","raw":"---\ntitle: 用户体验设计\ntags:\n  - '用户体验设计'\ncategories:\n  - '设计'\n  - '用户体验设计'\ndate: 2017-04-20 11:11:59\nfrom: '原'\n---\n\n### 用户体验设计\n\n>* [腾讯用户体验设计](http://idesign.qq.com/#!index/site)\n>* [网易用户体验设计](http://uedc.163.com/)\n>* [网易游戏设计中心](http://egdc.163.com/category/work)\n\n<!--more-->\n","slug":"用户体验设计","published":1,"updated":"2017-07-27T02:10:01.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5naxw5k0020fcxeauubqnx9","content":"<h3 id=\"用户体验设计\"><a href=\"#用户体验设计\" class=\"headerlink\" title=\"用户体验设计\"></a>用户体验设计</h3><blockquote>\n<ul>\n<li><a href=\"http://idesign.qq.com/#!index/site\" target=\"_blank\" rel=\"external\">腾讯用户体验设计</a></li>\n<li><a href=\"http://uedc.163.com/\" target=\"_blank\" rel=\"external\">网易用户体验设计</a></li>\n<li><a href=\"http://egdc.163.com/category/work\" target=\"_blank\" rel=\"external\">网易游戏设计中心</a></li>\n</ul>\n</blockquote>\n<a id=\"more\"></a>\n","excerpt":"<h3 id=\"用户体验设计\"><a href=\"#用户体验设计\" class=\"headerlink\" title=\"用户体验设计\"></a>用户体验设计</h3><blockquote>\n<ul>\n<li><a href=\"http://idesign.qq.com/#!index/site\">腾讯用户体验设计</a></li>\n<li><a href=\"http://uedc.163.com/\">网易用户体验设计</a></li>\n<li><a href=\"http://egdc.163.com/category/work\">网易游戏设计中心</a></li>\n</ul>\n</blockquote>","more":""},{"title":"排序算法整理","date":"2017-04-08T08:03:23.000Z","_content":"#### 插入排序\n插入排序的基本操作是将一个记录插入到已经排好序的有序表中，从而得到一个新的、记录数增1的有序表\n排序过程大概如下：\n从第一个元素开始，该元素可以认为已经被排序；\n取出下一个元素，在已经排序的元素序列中从后向前扫描；\n如果该元素（已排序）大于新元素，将该元素移到下一位置；\n重复步骤3，直到找到已排序的元素小于或者等于新元素的位置；\n将新元素插入到该位置后；\n重复步骤2~5。\n<!--more-->\n        /**\n         * 插入排序算法\n         * @param  {Array} arr 需要排序的数组\n         * @return {Array}     从小到大排序好的数组\n         */\n        function insertSort(arr){\n            var len = arr.length;\n             for (var i = 1; i < len; i++) {\n              var key = arr[i];\n             var j = i - 1;\n              while (j >= 0 && arr[j] > key) {\n                  arr[j + 1] = arr[j];\n                  j--;\n              }\n             arr[j + 1] = key;\n         }\n        return arr;\n        }\n算法分析\n\n最佳情况：输入数组按升序排列。T(n) = O(n)\n最坏情况：输入数组按降序排列。T(n) = O(n2)\n平均情况：T(n) = O(n2)\n\n#### 二分插入排序\n\n从第一个元素开始，该元素可以认为已经被排序；\n取出下一个元素，在已经排序的元素序列中二分查找到第一个比它大的数的位置；\n将新元素插入到该位置后；\n重复上述两步\n\n        /**\n         * 二分法插入排序\n         * @param  {array} arr 需要排序的数组\n         * @return {array}     排序后悔的数组\n         */\n        function binaryInsertSort(arr){\n            for (var i = 1; i < arr.length; i++) {\n        var key = arr[i], left = 0, right = i - 1;\n        while (left <= right) {\n          var middle = parseInt((left + right) / 2);\n          if (key < arr[middle]) {\n            right = middle - 1;\n          } else {\n            left = middle + 1;\n          }\n        }\n        for (var j = i - 1; j >= left; j--) {\n          arr[j + 1] = arr[j];\n        }\n        arr[left] = key;\n      }\n    return arr;\n    }\n算法分析\n\n最佳情况：T(n) = O(nlogn)\n最差情况：T(n) = O(n2)\n平均情况：T(n) = O(n2)\n\n#### 选择排序\n\n选择排序就是通过n-i次关键字间的比较，从n-i-1个记录中选出关键字最小的记录，并和第i个记录进行交换。选择排序(Selection-sort)是一种简单直观的排序算法。它的工作原理：首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。\n```\nfunction selectSort(arr){\n        for(var i = 0; i < arr.length - 1; i++){\n            var min = arr[i];\n            for(var j = i + 1; j < arr.length - 1; j++){\n                if(min > arr[j]){\n                    var temp = min;\n                    min = arr[j];\n                    arr[j] = temp;\n                }\n            }\n            arr[i] = min;\n        }\n        return arr;\n    }\n```\n算法分析\n\n最佳情况：T(n) = O(n2)\n最差情况：T(n) = O(n2)\n平均情况：T(n) = O(n2)\n\n#### 冒泡排序\n\n冒泡排序是一种交换排序，它的基本思想是：两两比较相邻记录的关键字，如果反序则交换，直到没有反序的记录为止。。它重复地走访过要排序的数列，一次比较两个元素，如果它们的顺序错误就把它们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。\n\n\tfunction bubbleSort(arr) {\n\t        var len = arr.length;\n\n        for (var i = 0; i < len - 1; i++) {\n            var n = 0;\n            for (var j = 0; j < len - i ; j++) {\n\n                if(arr[j] < arr[j-1]){\n                    n++;\n                    console.log(n);\n                    var temp = arr[j];\n                    arr[j] = arr[j-1];\n                    arr[j-1] = temp;\n                }\n\n            }\n            if( n < 1){\n\n                break;\n            }\n        }\n        return arr;\n    }\n最佳情况：T(n) = O(n)\n最差情况：T(n) = O(n2)\n平均情况：T(n) = O(n2)\n\n#### 快速排序\n\n（1）在数据集之中，选择一个元素作为”基准”（pivot）。\n（2）所有小于”基准”的元素，都移到”基准”的左边；所有大于”基准”的元素，都移到”基准”的右边。\n（3）对”基准”左边和右边的两个子集，不断重复第一步和第二步，直到所有子集只剩下一个元素为止。\n\n\t\tfunction quickSort(arr){\n\t\t        if (arr.length <= 1){return arr};\n\t\t        var pivotIndex = Math.floor(arr.length / 2);\n\t\t        var pivot = arr.splice(pivotIndex,1)[0];\n\t\t        var left = [];\n\t\t        var right = [];\n\t\t        for (var i = 0; i < arr.length; i++){\n\t\t            if(arr[i] < pivot) {\n\t\t                left.push(arr[i]);\n\t\t            }else{\n\t\t                right.push(arr[i]);\n\t\t            }\n\t\t        }\n\t\t        return quickSort(left).concat([pivot],quickSort(right));\n\t\t    }\n算法分析\n\n最佳情况：T(n) = O(nlogn)\n最差情况：T(n) = O(n2)\n平均情况：T(n) = O(nlogn)\n\n#### 希尔排序\n\n希尔排序的实质是分组插入排序，该方法又称缩小增量排序。该方法的基本思想是：先将整个待排元素序列分割为若干个子序列（由相隔某个‘增量’的元素组成的）分别进行直接插入排序，然后依次缩减增量再进行排序，带这个序列中的元素基本有序（增量足够小）时，再对全体元素进行一次直接插入排序。因为直接插入排序在元素基本有序的情况下（接近最好情况）效率是很高的，因此希尔排序在时间效率上有较大的提高。\n希尔排序算法实现\n\n\t\tfunction shallSort(array) {\n\t\t var increment = array.length;\n\t\t var i\n\t\t var temp; //暂存\n\t\t var count = 0;\n\t\t do {\n\t\t    //设置增量\n\t\t   increment = Math.floor(increment / 3) + 1;\n\t\t   for (i = increment ; i < array.length; i++) {\n\t\t    console.log(increment);\n\t\t     if (array[i] < array[i - increment]) {\n\t\t       temp = array[i];\n\t\t       for (var j = i - increment; j >= 0 && temp < array[j]; j -= increment) {\n\t\t           array[j + increment] = array[j];\n\t\t       }\n\t\t       array[j + increment] = temp;\n\t\t     }\n\t\t   }\n\t\t }\n\t\t while (increment > 1)\n\t\t return array;\n\t\t}\n","source":"_posts/排序算法整理.md","raw":"---\ntitle: 排序算法整理\ndate: 2017-04-08 16:03:23\ntags: \"算法\"\ncategories:\n    - '前端'\n    - '知识点'\n---\n#### 插入排序\n插入排序的基本操作是将一个记录插入到已经排好序的有序表中，从而得到一个新的、记录数增1的有序表\n排序过程大概如下：\n从第一个元素开始，该元素可以认为已经被排序；\n取出下一个元素，在已经排序的元素序列中从后向前扫描；\n如果该元素（已排序）大于新元素，将该元素移到下一位置；\n重复步骤3，直到找到已排序的元素小于或者等于新元素的位置；\n将新元素插入到该位置后；\n重复步骤2~5。\n<!--more-->\n        /**\n         * 插入排序算法\n         * @param  {Array} arr 需要排序的数组\n         * @return {Array}     从小到大排序好的数组\n         */\n        function insertSort(arr){\n            var len = arr.length;\n             for (var i = 1; i < len; i++) {\n              var key = arr[i];\n             var j = i - 1;\n              while (j >= 0 && arr[j] > key) {\n                  arr[j + 1] = arr[j];\n                  j--;\n              }\n             arr[j + 1] = key;\n         }\n        return arr;\n        }\n算法分析\n\n最佳情况：输入数组按升序排列。T(n) = O(n)\n最坏情况：输入数组按降序排列。T(n) = O(n2)\n平均情况：T(n) = O(n2)\n\n#### 二分插入排序\n\n从第一个元素开始，该元素可以认为已经被排序；\n取出下一个元素，在已经排序的元素序列中二分查找到第一个比它大的数的位置；\n将新元素插入到该位置后；\n重复上述两步\n\n        /**\n         * 二分法插入排序\n         * @param  {array} arr 需要排序的数组\n         * @return {array}     排序后悔的数组\n         */\n        function binaryInsertSort(arr){\n            for (var i = 1; i < arr.length; i++) {\n        var key = arr[i], left = 0, right = i - 1;\n        while (left <= right) {\n          var middle = parseInt((left + right) / 2);\n          if (key < arr[middle]) {\n            right = middle - 1;\n          } else {\n            left = middle + 1;\n          }\n        }\n        for (var j = i - 1; j >= left; j--) {\n          arr[j + 1] = arr[j];\n        }\n        arr[left] = key;\n      }\n    return arr;\n    }\n算法分析\n\n最佳情况：T(n) = O(nlogn)\n最差情况：T(n) = O(n2)\n平均情况：T(n) = O(n2)\n\n#### 选择排序\n\n选择排序就是通过n-i次关键字间的比较，从n-i-1个记录中选出关键字最小的记录，并和第i个记录进行交换。选择排序(Selection-sort)是一种简单直观的排序算法。它的工作原理：首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。\n```\nfunction selectSort(arr){\n        for(var i = 0; i < arr.length - 1; i++){\n            var min = arr[i];\n            for(var j = i + 1; j < arr.length - 1; j++){\n                if(min > arr[j]){\n                    var temp = min;\n                    min = arr[j];\n                    arr[j] = temp;\n                }\n            }\n            arr[i] = min;\n        }\n        return arr;\n    }\n```\n算法分析\n\n最佳情况：T(n) = O(n2)\n最差情况：T(n) = O(n2)\n平均情况：T(n) = O(n2)\n\n#### 冒泡排序\n\n冒泡排序是一种交换排序，它的基本思想是：两两比较相邻记录的关键字，如果反序则交换，直到没有反序的记录为止。。它重复地走访过要排序的数列，一次比较两个元素，如果它们的顺序错误就把它们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。\n\n\tfunction bubbleSort(arr) {\n\t        var len = arr.length;\n\n        for (var i = 0; i < len - 1; i++) {\n            var n = 0;\n            for (var j = 0; j < len - i ; j++) {\n\n                if(arr[j] < arr[j-1]){\n                    n++;\n                    console.log(n);\n                    var temp = arr[j];\n                    arr[j] = arr[j-1];\n                    arr[j-1] = temp;\n                }\n\n            }\n            if( n < 1){\n\n                break;\n            }\n        }\n        return arr;\n    }\n最佳情况：T(n) = O(n)\n最差情况：T(n) = O(n2)\n平均情况：T(n) = O(n2)\n\n#### 快速排序\n\n（1）在数据集之中，选择一个元素作为”基准”（pivot）。\n（2）所有小于”基准”的元素，都移到”基准”的左边；所有大于”基准”的元素，都移到”基准”的右边。\n（3）对”基准”左边和右边的两个子集，不断重复第一步和第二步，直到所有子集只剩下一个元素为止。\n\n\t\tfunction quickSort(arr){\n\t\t        if (arr.length <= 1){return arr};\n\t\t        var pivotIndex = Math.floor(arr.length / 2);\n\t\t        var pivot = arr.splice(pivotIndex,1)[0];\n\t\t        var left = [];\n\t\t        var right = [];\n\t\t        for (var i = 0; i < arr.length; i++){\n\t\t            if(arr[i] < pivot) {\n\t\t                left.push(arr[i]);\n\t\t            }else{\n\t\t                right.push(arr[i]);\n\t\t            }\n\t\t        }\n\t\t        return quickSort(left).concat([pivot],quickSort(right));\n\t\t    }\n算法分析\n\n最佳情况：T(n) = O(nlogn)\n最差情况：T(n) = O(n2)\n平均情况：T(n) = O(nlogn)\n\n#### 希尔排序\n\n希尔排序的实质是分组插入排序，该方法又称缩小增量排序。该方法的基本思想是：先将整个待排元素序列分割为若干个子序列（由相隔某个‘增量’的元素组成的）分别进行直接插入排序，然后依次缩减增量再进行排序，带这个序列中的元素基本有序（增量足够小）时，再对全体元素进行一次直接插入排序。因为直接插入排序在元素基本有序的情况下（接近最好情况）效率是很高的，因此希尔排序在时间效率上有较大的提高。\n希尔排序算法实现\n\n\t\tfunction shallSort(array) {\n\t\t var increment = array.length;\n\t\t var i\n\t\t var temp; //暂存\n\t\t var count = 0;\n\t\t do {\n\t\t    //设置增量\n\t\t   increment = Math.floor(increment / 3) + 1;\n\t\t   for (i = increment ; i < array.length; i++) {\n\t\t    console.log(increment);\n\t\t     if (array[i] < array[i - increment]) {\n\t\t       temp = array[i];\n\t\t       for (var j = i - increment; j >= 0 && temp < array[j]; j -= increment) {\n\t\t           array[j + increment] = array[j];\n\t\t       }\n\t\t       array[j + increment] = temp;\n\t\t     }\n\t\t   }\n\t\t }\n\t\t while (increment > 1)\n\t\t return array;\n\t\t}\n","slug":"排序算法整理","published":1,"updated":"2017-04-15T03:23:13.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5naxw5o0025fcxewmqxufn8","content":"<h4 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h4><p>插入排序的基本操作是将一个记录插入到已经排好序的有序表中，从而得到一个新的、记录数增1的有序表<br>排序过程大概如下：<br>从第一个元素开始，该元素可以认为已经被排序；<br>取出下一个元素，在已经排序的元素序列中从后向前扫描；<br>如果该元素（已排序）大于新元素，将该元素移到下一位置；<br>重复步骤3，直到找到已排序的元素小于或者等于新元素的位置；<br>将新元素插入到该位置后；<br>重复步骤2~5。<br><a id=\"more\"></a><br>        /**</p>\n<pre><code> * 插入排序算法\n * @param  {Array} arr 需要排序的数组\n * @return {Array}     从小到大排序好的数组\n */\nfunction insertSort(arr){\n    var len = arr.length;\n     for (var i = 1; i &lt; len; i++) {\n      var key = arr[i];\n     var j = i - 1;\n      while (j &gt;= 0 &amp;&amp; arr[j] &gt; key) {\n          arr[j + 1] = arr[j];\n          j--;\n      }\n     arr[j + 1] = key;\n }\nreturn arr;\n}\n</code></pre><p>算法分析</p>\n<p>最佳情况：输入数组按升序排列。T(n) = O(n)<br>最坏情况：输入数组按降序排列。T(n) = O(n2)<br>平均情况：T(n) = O(n2)</p>\n<h4 id=\"二分插入排序\"><a href=\"#二分插入排序\" class=\"headerlink\" title=\"二分插入排序\"></a>二分插入排序</h4><p>从第一个元素开始，该元素可以认为已经被排序；<br>取出下一个元素，在已经排序的元素序列中二分查找到第一个比它大的数的位置；<br>将新元素插入到该位置后；<br>重复上述两步</p>\n<pre><code>    /**\n     * 二分法插入排序\n     * @param  {array} arr 需要排序的数组\n     * @return {array}     排序后悔的数组\n     */\n    function binaryInsertSort(arr){\n        for (var i = 1; i &lt; arr.length; i++) {\n    var key = arr[i], left = 0, right = i - 1;\n    while (left &lt;= right) {\n      var middle = parseInt((left + right) / 2);\n      if (key &lt; arr[middle]) {\n        right = middle - 1;\n      } else {\n        left = middle + 1;\n      }\n    }\n    for (var j = i - 1; j &gt;= left; j--) {\n      arr[j + 1] = arr[j];\n    }\n    arr[left] = key;\n  }\nreturn arr;\n}\n</code></pre><p>算法分析</p>\n<p>最佳情况：T(n) = O(nlogn)<br>最差情况：T(n) = O(n2)<br>平均情况：T(n) = O(n2)</p>\n<h4 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h4><p>选择排序就是通过n-i次关键字间的比较，从n-i-1个记录中选出关键字最小的记录，并和第i个记录进行交换。选择排序(Selection-sort)是一种简单直观的排序算法。它的工作原理：首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">function selectSort(arr)&#123;</div><div class=\"line\">        for(var i = 0; i &lt; arr.length - 1; i++)&#123;</div><div class=\"line\">            var min = arr[i];</div><div class=\"line\">            for(var j = i + 1; j &lt; arr.length - 1; j++)&#123;</div><div class=\"line\">                if(min &gt; arr[j])&#123;</div><div class=\"line\">                    var temp = min;</div><div class=\"line\">                    min = arr[j];</div><div class=\"line\">                    arr[j] = temp;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            arr[i] = min;</div><div class=\"line\">        &#125;</div><div class=\"line\">        return arr;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>算法分析</p>\n<p>最佳情况：T(n) = O(n2)<br>最差情况：T(n) = O(n2)<br>平均情况：T(n) = O(n2)</p>\n<h4 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h4><p>冒泡排序是一种交换排序，它的基本思想是：两两比较相邻记录的关键字，如果反序则交换，直到没有反序的记录为止。。它重复地走访过要排序的数列，一次比较两个元素，如果它们的顺序错误就把它们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。</p>\n<pre><code>function bubbleSort(arr) {\n        var len = arr.length;\n\n    for (var i = 0; i &lt; len - 1; i++) {\n        var n = 0;\n        for (var j = 0; j &lt; len - i ; j++) {\n\n            if(arr[j] &lt; arr[j-1]){\n                n++;\n                console.log(n);\n                var temp = arr[j];\n                arr[j] = arr[j-1];\n                arr[j-1] = temp;\n            }\n\n        }\n        if( n &lt; 1){\n\n            break;\n        }\n    }\n    return arr;\n}\n</code></pre><p>最佳情况：T(n) = O(n)<br>最差情况：T(n) = O(n2)<br>平均情况：T(n) = O(n2)</p>\n<h4 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h4><p>（1）在数据集之中，选择一个元素作为”基准”（pivot）。<br>（2）所有小于”基准”的元素，都移到”基准”的左边；所有大于”基准”的元素，都移到”基准”的右边。<br>（3）对”基准”左边和右边的两个子集，不断重复第一步和第二步，直到所有子集只剩下一个元素为止。</p>\n<pre><code>function quickSort(arr){\n        if (arr.length &lt;= 1){return arr};\n        var pivotIndex = Math.floor(arr.length / 2);\n        var pivot = arr.splice(pivotIndex,1)[0];\n        var left = [];\n        var right = [];\n        for (var i = 0; i &lt; arr.length; i++){\n            if(arr[i] &lt; pivot) {\n                left.push(arr[i]);\n            }else{\n                right.push(arr[i]);\n            }\n        }\n        return quickSort(left).concat([pivot],quickSort(right));\n    }\n</code></pre><p>算法分析</p>\n<p>最佳情况：T(n) = O(nlogn)<br>最差情况：T(n) = O(n2)<br>平均情况：T(n) = O(nlogn)</p>\n<h4 id=\"希尔排序\"><a href=\"#希尔排序\" class=\"headerlink\" title=\"希尔排序\"></a>希尔排序</h4><p>希尔排序的实质是分组插入排序，该方法又称缩小增量排序。该方法的基本思想是：先将整个待排元素序列分割为若干个子序列（由相隔某个‘增量’的元素组成的）分别进行直接插入排序，然后依次缩减增量再进行排序，带这个序列中的元素基本有序（增量足够小）时，再对全体元素进行一次直接插入排序。因为直接插入排序在元素基本有序的情况下（接近最好情况）效率是很高的，因此希尔排序在时间效率上有较大的提高。<br>希尔排序算法实现</p>\n<pre><code>function shallSort(array) {\n var increment = array.length;\n var i\n var temp; //暂存\n var count = 0;\n do {\n    //设置增量\n   increment = Math.floor(increment / 3) + 1;\n   for (i = increment ; i &lt; array.length; i++) {\n    console.log(increment);\n     if (array[i] &lt; array[i - increment]) {\n       temp = array[i];\n       for (var j = i - increment; j &gt;= 0 &amp;&amp; temp &lt; array[j]; j -= increment) {\n           array[j + increment] = array[j];\n       }\n       array[j + increment] = temp;\n     }\n   }\n }\n while (increment &gt; 1)\n return array;\n}\n</code></pre>","excerpt":"<h4 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h4><p>插入排序的基本操作是将一个记录插入到已经排好序的有序表中，从而得到一个新的、记录数增1的有序表<br>排序过程大概如下：<br>从第一个元素开始，该元素可以认为已经被排序；<br>取出下一个元素，在已经排序的元素序列中从后向前扫描；<br>如果该元素（已排序）大于新元素，将该元素移到下一位置；<br>重复步骤3，直到找到已排序的元素小于或者等于新元素的位置；<br>将新元素插入到该位置后；<br>重复步骤2~5。<br>","more":"<br>        /**</p>\n<pre><code> * 插入排序算法\n * @param  {Array} arr 需要排序的数组\n * @return {Array}     从小到大排序好的数组\n */\nfunction insertSort(arr){\n    var len = arr.length;\n     for (var i = 1; i &lt; len; i++) {\n      var key = arr[i];\n     var j = i - 1;\n      while (j &gt;= 0 &amp;&amp; arr[j] &gt; key) {\n          arr[j + 1] = arr[j];\n          j--;\n      }\n     arr[j + 1] = key;\n }\nreturn arr;\n}\n</code></pre><p>算法分析</p>\n<p>最佳情况：输入数组按升序排列。T(n) = O(n)<br>最坏情况：输入数组按降序排列。T(n) = O(n2)<br>平均情况：T(n) = O(n2)</p>\n<h4 id=\"二分插入排序\"><a href=\"#二分插入排序\" class=\"headerlink\" title=\"二分插入排序\"></a>二分插入排序</h4><p>从第一个元素开始，该元素可以认为已经被排序；<br>取出下一个元素，在已经排序的元素序列中二分查找到第一个比它大的数的位置；<br>将新元素插入到该位置后；<br>重复上述两步</p>\n<pre><code>    /**\n     * 二分法插入排序\n     * @param  {array} arr 需要排序的数组\n     * @return {array}     排序后悔的数组\n     */\n    function binaryInsertSort(arr){\n        for (var i = 1; i &lt; arr.length; i++) {\n    var key = arr[i], left = 0, right = i - 1;\n    while (left &lt;= right) {\n      var middle = parseInt((left + right) / 2);\n      if (key &lt; arr[middle]) {\n        right = middle - 1;\n      } else {\n        left = middle + 1;\n      }\n    }\n    for (var j = i - 1; j &gt;= left; j--) {\n      arr[j + 1] = arr[j];\n    }\n    arr[left] = key;\n  }\nreturn arr;\n}\n</code></pre><p>算法分析</p>\n<p>最佳情况：T(n) = O(nlogn)<br>最差情况：T(n) = O(n2)<br>平均情况：T(n) = O(n2)</p>\n<h4 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h4><p>选择排序就是通过n-i次关键字间的比较，从n-i-1个记录中选出关键字最小的记录，并和第i个记录进行交换。选择排序(Selection-sort)是一种简单直观的排序算法。它的工作原理：首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">function selectSort(arr)&#123;</div><div class=\"line\">        for(var i = 0; i &lt; arr.length - 1; i++)&#123;</div><div class=\"line\">            var min = arr[i];</div><div class=\"line\">            for(var j = i + 1; j &lt; arr.length - 1; j++)&#123;</div><div class=\"line\">                if(min &gt; arr[j])&#123;</div><div class=\"line\">                    var temp = min;</div><div class=\"line\">                    min = arr[j];</div><div class=\"line\">                    arr[j] = temp;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            arr[i] = min;</div><div class=\"line\">        &#125;</div><div class=\"line\">        return arr;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>算法分析</p>\n<p>最佳情况：T(n) = O(n2)<br>最差情况：T(n) = O(n2)<br>平均情况：T(n) = O(n2)</p>\n<h4 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h4><p>冒泡排序是一种交换排序，它的基本思想是：两两比较相邻记录的关键字，如果反序则交换，直到没有反序的记录为止。。它重复地走访过要排序的数列，一次比较两个元素，如果它们的顺序错误就把它们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。</p>\n<pre><code>function bubbleSort(arr) {\n        var len = arr.length;\n\n    for (var i = 0; i &lt; len - 1; i++) {\n        var n = 0;\n        for (var j = 0; j &lt; len - i ; j++) {\n\n            if(arr[j] &lt; arr[j-1]){\n                n++;\n                console.log(n);\n                var temp = arr[j];\n                arr[j] = arr[j-1];\n                arr[j-1] = temp;\n            }\n\n        }\n        if( n &lt; 1){\n\n            break;\n        }\n    }\n    return arr;\n}\n</code></pre><p>最佳情况：T(n) = O(n)<br>最差情况：T(n) = O(n2)<br>平均情况：T(n) = O(n2)</p>\n<h4 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h4><p>（1）在数据集之中，选择一个元素作为”基准”（pivot）。<br>（2）所有小于”基准”的元素，都移到”基准”的左边；所有大于”基准”的元素，都移到”基准”的右边。<br>（3）对”基准”左边和右边的两个子集，不断重复第一步和第二步，直到所有子集只剩下一个元素为止。</p>\n<pre><code>function quickSort(arr){\n        if (arr.length &lt;= 1){return arr};\n        var pivotIndex = Math.floor(arr.length / 2);\n        var pivot = arr.splice(pivotIndex,1)[0];\n        var left = [];\n        var right = [];\n        for (var i = 0; i &lt; arr.length; i++){\n            if(arr[i] &lt; pivot) {\n                left.push(arr[i]);\n            }else{\n                right.push(arr[i]);\n            }\n        }\n        return quickSort(left).concat([pivot],quickSort(right));\n    }\n</code></pre><p>算法分析</p>\n<p>最佳情况：T(n) = O(nlogn)<br>最差情况：T(n) = O(n2)<br>平均情况：T(n) = O(nlogn)</p>\n<h4 id=\"希尔排序\"><a href=\"#希尔排序\" class=\"headerlink\" title=\"希尔排序\"></a>希尔排序</h4><p>希尔排序的实质是分组插入排序，该方法又称缩小增量排序。该方法的基本思想是：先将整个待排元素序列分割为若干个子序列（由相隔某个‘增量’的元素组成的）分别进行直接插入排序，然后依次缩减增量再进行排序，带这个序列中的元素基本有序（增量足够小）时，再对全体元素进行一次直接插入排序。因为直接插入排序在元素基本有序的情况下（接近最好情况）效率是很高的，因此希尔排序在时间效率上有较大的提高。<br>希尔排序算法实现</p>\n<pre><code>function shallSort(array) {\n var increment = array.length;\n var i\n var temp; //暂存\n var count = 0;\n do {\n    //设置增量\n   increment = Math.floor(increment / 3) + 1;\n   for (i = increment ; i &lt; array.length; i++) {\n    console.log(increment);\n     if (array[i] &lt; array[i - increment]) {\n       temp = array[i];\n       for (var j = i - increment; j &gt;= 0 &amp;&amp; temp &lt; array[j]; j -= increment) {\n           array[j + increment] = array[j];\n       }\n       array[j + increment] = temp;\n     }\n   }\n }\n while (increment &gt; 1)\n return array;\n}\n</code></pre>"},{"title":"跨域","date":"2017-04-06T09:54:07.000Z","_content":"\n#### 什么是跨域\n\nJavaScript出于安全方面的考虑，不允许跨域调用其他页面的对象。但在安全限制的同时也给注入iframe或是ajax应用上带来了不少麻烦。这里把涉及到跨域的一些问题简单地整理一下：\n<!--more-->\n首先什么是跨域，简单地理解就是因为JavaScript同源策略的限制，a.com 域名下的js无法操作b.com或是c.a.com域名下的对象。更详细的说明可以看下表：\n\n\n\n特别注意两点：\n\n第一，如果是协议和端口造成的跨域问题“前台”是无能为力的，\n第二：在跨域问题上，域仅仅是通过“URL的首部”来识别而不会去尝试判断相同的ip地址对应着两个域或两个域是否在同一个ip上。\n“URL的首部”指window.location.protocol +window.location.host，也可以理解为“Domains, protocols and ports must match”。\n接下来简单地总结一下在“前台”一般处理跨域的办法，后台proxy这种方案牵涉到后台配置，这里就不阐述了，有兴趣的可以看看yahoo的这篇文章：《JavaScript: Use a Web Proxy for Cross-Domain XMLHttpRequest Calls》\n\n#### 1、document.domain+iframe的设置\n\n对于主域相同而子域不同的例子，可以通过设置document.domain的办法来解决。 具体的做法是可以在http://www.a.com/a.html和http://script.a.com/b.html两个文件中分别加上 document.domain = ‘a.com’；然后通过a.html文件中创建一个iframe，去控制iframe的contentDocument，这样两个js文件之间就可以 “交互”了。当然这种办法只能解决主域相同而二级域名不同的情况，如果你异想天开的把script.a.com的domian设为alibaba.com 那显然是会报错地！代码如下：\n\nwww.a.com上的a.html\n```\ndocument.domain = 'a.com';\nvar ifr = document.createElement('iframe');\nifr.src = 'http://script.a.com/b.html';\nifr.style.display = 'none';\ndocument.body.appendChild(ifr);\nifr.onload = function(){\n    var doc = ifr.contentDocument || ifr.contentWindow.document;\n    // 在这里操纵b.html\n    alert(doc.getElementsByTagName(\"h1\")[0].childNodes[0].nodeValue);\n};\n```\nscript.a.com上的b.html\ndocument.domain = 'a.com';\n\n这种方式适用于{www.kuqin.com, kuqin.com, script.kuqin.com, css.kuqin.com}中的任何页面相互通信。\n\n备注：某一页面的domain默认等于window.location.hostname。主域名是不带www的域名，例如a.com，主域名前面带前缀的通常都为二级域名或多级域名，例如www.a.com其实是二级域名。 domain只能设置为主域名，不可以在b.a.com中将domain设置为c.a.com。\n\n问题：\n\n1、安全性，当一个站点（b.a.com）被攻击后，另一个站点（c.a.com）会引起安全漏洞。\n2、如果一个页面中引入多个iframe，要想能够操作所有iframe，必须都得设置相同domain。\n\n#### 2、动态创建script\n\n虽然浏览器默认禁止了跨域访问，但并不禁止在页面中引用其他域的JS文件，并可以自由执行引入的JS文件中的function（包括操作cookie、Dom等等）。根据这一点，可以方便地通过创建script节点的方法来实现完全跨域的通信。具体的做法可以参考YUI的Get Utility\n\n这里判断script节点加载完毕还是蛮有意思的：ie只能通过script的readystatechange属性，其它浏览器是script的load事件。以下是部分判断script加载完毕的方法。\n```\njs.onload = js.onreadystatechange = function() {\n    if (!this.readyState || this.readyState === 'loaded' || this.readyState === 'complete') {\n        // callback在此处执行\n        js.onload = js.onreadystatechange = null;\n    }\n};\n```\n#### 3、利用iframe和location.hash\n\n这个办法比较绕，但是可以解决完全跨域情况下的脚步置换问题。原理是利用location.hash来进行传值。在url： http://a.com#helloword中的‘#helloworld’就是location.hash，改变hash并不会导致页面刷新，所以可 以利用hash值来进行数据传递，当然数据容量是有限的。假设域名a.com下的文件cs1.html要和cnblogs.com域名下的 cs2.html传递信息，cs1.html首先创建自动创建一个隐藏的iframe，iframe的src指向cnblogs.com域名下的 cs2.html页面，这时的hash值可以做参数传递用。cs2.html响应请求后再将通过修改cs1.html的hash值来传递数据（由于两个页面不在同一个域下IE、Chrome不允许修改parent.location.hash的值，所以要借助于a.com域名下的一个代理iframe；Firefox可以修改）。同时在cs1.html上加一个定时器，隔一段时间来判断location.hash的值有没有变化，一点有变化则获取获取hash值。代码如下：\n\n先是a.com下的文件cs1.html文件：\n```\nfunction startRequest(){\n    var ifr = document.createElement('iframe');\n    ifr.style.display = 'none';\n    ifr.src = 'http://www.cnblogs.com/lab/cscript/cs2.html#paramdo';\n    document.body.appendChild(ifr);\n}\n\nfunction checkHash() {\n    try {\n        var data = location.hash ? location.hash.substring(1) : '';\n        if (console.log) {\n            console.log('Now the data is '+data);\n        }\n    } catch(e) {};\n}\nsetInterval(checkHash, 2000);\n```\ncnblogs.com域名下的cs2.html:\n```\n//模拟一个简单的参数处理操作\nswitch(location.hash){\n    case '#paramdo':\n        callBack();\n        break;\n    case '#paramset':\n        //do something……\n        break;\n}\n\nfunction callBack(){\n    try {\n        parent.location.hash = 'somedata';\n    } catch (e) {\n        // ie、chrome的安全机制无法修改parent.location.hash，\n        // 所以要利用一个中间的cnblogs域下的代理iframe\n        var ifrproxy = document.createElement('iframe');\n        ifrproxy.style.display = 'none';\n        ifrproxy.src = 'http://a.com/test/cscript/cs3.html#somedata';    // 注意该文件在\"a.com\"域下\n        document.body.appendChild(ifrproxy);\n    }\n}\n```\na.com下的域名cs3.html\n\n//因为parent.parent和自身属于同一个域，所以可以改变其location.hash的值\n`parent.parent.location.hash = self.location.hash.substring(1);`\n\n当然这样做也存在很多缺点，诸如数据直接暴露在了url中，数据容量和类型都有限等……\n\n#### 4、window.name实现的跨域数据传输\n\n文章较长列在此处不便于阅读，详细请看 window.name实现的跨域数据传输（http://www.cnblogs.com/rainman/archive/2011/02/21/1960044.html）。\n\n#### 5、使用HTML5 postMessage\n\nHTML5中最酷的新功能之一就是 跨文档消息传输Cross Document Messaging。 下一代浏览器都将支持这个功能：Chrome 2.0+、Internet Explorer 8.0+, Firefox 3.0+, Opera 9.6+, 和 Safari 4.0+ 。 Facebook已经使用了这个功能，用postMessage支持基于web的实时消息传递。\n\notherWindow.postMessage(message, targetOrigin);\notherWindow: 对接收信息页面的window的引用。可以是页面中iframe的contentWindow属性；window.open的返回值；通过name或下标从window.frames取到的值。\nmessage: 所要发送的数据，string类型。\ntargetOrigin: 用于限制otherWindow，“*”表示不作限制\na.com/index.html中的代码：\n```\n<iframe id=\"ifr\" src=\"b.com/index.html\"></iframe>\n<script type=\"text/javascript\">\nwindow.onload = function() {\n    var ifr = document.getElementById('ifr');\n    var targetOrigin = 'http://b.com';  // 若写成'http://b.com/c/proxy.html'效果一样\n                                        // 若写成'http://c.com'就不会执行postMessage了\n    ifr.contentWindow.postMessage('I was there!', targetOrigin);\n};\n</script>\n\nb.co```m/index.html中的代码：\n```\n```\n<script type=\"text/javascript\">\n    window.addEventListener('message', function(event){\n        // 通过origin属性判断消息来源地址\n        if (event.origin == 'http://a.com') {\n            alert(event.data);    // 弹出\"I was there!\"\n            alert(event.source);  // 对a.com、index.html中window对象的引用\n                                  // 但由于同源策略，这里event.source不可以访问window对象\n        }\n    }, false);\n</script>\n```\n参考文章：《精通HTML5编程》第五章——跨文档消息机制、https://developer.mozilla.org/en/dom/window.postmessage\n\n\n#### 6、利用flash\n\n这是从YUI3的IO组件中看到的办法，具体可见http://developer.yahoo.com/yui/3/io/。\n可以看在Adobe Developer Connection看到更多的跨域代理文件规范：ross-Domain Policy File Specifications、HTTP Headers Blacklist。\n","source":"_posts/跨域.md","raw":"---\ntitle: 跨域\ndate: 2017-04-06 17:54:07\ncategories:\n    - '前端'\n    - '知识点'\n---\n\n#### 什么是跨域\n\nJavaScript出于安全方面的考虑，不允许跨域调用其他页面的对象。但在安全限制的同时也给注入iframe或是ajax应用上带来了不少麻烦。这里把涉及到跨域的一些问题简单地整理一下：\n<!--more-->\n首先什么是跨域，简单地理解就是因为JavaScript同源策略的限制，a.com 域名下的js无法操作b.com或是c.a.com域名下的对象。更详细的说明可以看下表：\n\n\n\n特别注意两点：\n\n第一，如果是协议和端口造成的跨域问题“前台”是无能为力的，\n第二：在跨域问题上，域仅仅是通过“URL的首部”来识别而不会去尝试判断相同的ip地址对应着两个域或两个域是否在同一个ip上。\n“URL的首部”指window.location.protocol +window.location.host，也可以理解为“Domains, protocols and ports must match”。\n接下来简单地总结一下在“前台”一般处理跨域的办法，后台proxy这种方案牵涉到后台配置，这里就不阐述了，有兴趣的可以看看yahoo的这篇文章：《JavaScript: Use a Web Proxy for Cross-Domain XMLHttpRequest Calls》\n\n#### 1、document.domain+iframe的设置\n\n对于主域相同而子域不同的例子，可以通过设置document.domain的办法来解决。 具体的做法是可以在http://www.a.com/a.html和http://script.a.com/b.html两个文件中分别加上 document.domain = ‘a.com’；然后通过a.html文件中创建一个iframe，去控制iframe的contentDocument，这样两个js文件之间就可以 “交互”了。当然这种办法只能解决主域相同而二级域名不同的情况，如果你异想天开的把script.a.com的domian设为alibaba.com 那显然是会报错地！代码如下：\n\nwww.a.com上的a.html\n```\ndocument.domain = 'a.com';\nvar ifr = document.createElement('iframe');\nifr.src = 'http://script.a.com/b.html';\nifr.style.display = 'none';\ndocument.body.appendChild(ifr);\nifr.onload = function(){\n    var doc = ifr.contentDocument || ifr.contentWindow.document;\n    // 在这里操纵b.html\n    alert(doc.getElementsByTagName(\"h1\")[0].childNodes[0].nodeValue);\n};\n```\nscript.a.com上的b.html\ndocument.domain = 'a.com';\n\n这种方式适用于{www.kuqin.com, kuqin.com, script.kuqin.com, css.kuqin.com}中的任何页面相互通信。\n\n备注：某一页面的domain默认等于window.location.hostname。主域名是不带www的域名，例如a.com，主域名前面带前缀的通常都为二级域名或多级域名，例如www.a.com其实是二级域名。 domain只能设置为主域名，不可以在b.a.com中将domain设置为c.a.com。\n\n问题：\n\n1、安全性，当一个站点（b.a.com）被攻击后，另一个站点（c.a.com）会引起安全漏洞。\n2、如果一个页面中引入多个iframe，要想能够操作所有iframe，必须都得设置相同domain。\n\n#### 2、动态创建script\n\n虽然浏览器默认禁止了跨域访问，但并不禁止在页面中引用其他域的JS文件，并可以自由执行引入的JS文件中的function（包括操作cookie、Dom等等）。根据这一点，可以方便地通过创建script节点的方法来实现完全跨域的通信。具体的做法可以参考YUI的Get Utility\n\n这里判断script节点加载完毕还是蛮有意思的：ie只能通过script的readystatechange属性，其它浏览器是script的load事件。以下是部分判断script加载完毕的方法。\n```\njs.onload = js.onreadystatechange = function() {\n    if (!this.readyState || this.readyState === 'loaded' || this.readyState === 'complete') {\n        // callback在此处执行\n        js.onload = js.onreadystatechange = null;\n    }\n};\n```\n#### 3、利用iframe和location.hash\n\n这个办法比较绕，但是可以解决完全跨域情况下的脚步置换问题。原理是利用location.hash来进行传值。在url： http://a.com#helloword中的‘#helloworld’就是location.hash，改变hash并不会导致页面刷新，所以可 以利用hash值来进行数据传递，当然数据容量是有限的。假设域名a.com下的文件cs1.html要和cnblogs.com域名下的 cs2.html传递信息，cs1.html首先创建自动创建一个隐藏的iframe，iframe的src指向cnblogs.com域名下的 cs2.html页面，这时的hash值可以做参数传递用。cs2.html响应请求后再将通过修改cs1.html的hash值来传递数据（由于两个页面不在同一个域下IE、Chrome不允许修改parent.location.hash的值，所以要借助于a.com域名下的一个代理iframe；Firefox可以修改）。同时在cs1.html上加一个定时器，隔一段时间来判断location.hash的值有没有变化，一点有变化则获取获取hash值。代码如下：\n\n先是a.com下的文件cs1.html文件：\n```\nfunction startRequest(){\n    var ifr = document.createElement('iframe');\n    ifr.style.display = 'none';\n    ifr.src = 'http://www.cnblogs.com/lab/cscript/cs2.html#paramdo';\n    document.body.appendChild(ifr);\n}\n\nfunction checkHash() {\n    try {\n        var data = location.hash ? location.hash.substring(1) : '';\n        if (console.log) {\n            console.log('Now the data is '+data);\n        }\n    } catch(e) {};\n}\nsetInterval(checkHash, 2000);\n```\ncnblogs.com域名下的cs2.html:\n```\n//模拟一个简单的参数处理操作\nswitch(location.hash){\n    case '#paramdo':\n        callBack();\n        break;\n    case '#paramset':\n        //do something……\n        break;\n}\n\nfunction callBack(){\n    try {\n        parent.location.hash = 'somedata';\n    } catch (e) {\n        // ie、chrome的安全机制无法修改parent.location.hash，\n        // 所以要利用一个中间的cnblogs域下的代理iframe\n        var ifrproxy = document.createElement('iframe');\n        ifrproxy.style.display = 'none';\n        ifrproxy.src = 'http://a.com/test/cscript/cs3.html#somedata';    // 注意该文件在\"a.com\"域下\n        document.body.appendChild(ifrproxy);\n    }\n}\n```\na.com下的域名cs3.html\n\n//因为parent.parent和自身属于同一个域，所以可以改变其location.hash的值\n`parent.parent.location.hash = self.location.hash.substring(1);`\n\n当然这样做也存在很多缺点，诸如数据直接暴露在了url中，数据容量和类型都有限等……\n\n#### 4、window.name实现的跨域数据传输\n\n文章较长列在此处不便于阅读，详细请看 window.name实现的跨域数据传输（http://www.cnblogs.com/rainman/archive/2011/02/21/1960044.html）。\n\n#### 5、使用HTML5 postMessage\n\nHTML5中最酷的新功能之一就是 跨文档消息传输Cross Document Messaging。 下一代浏览器都将支持这个功能：Chrome 2.0+、Internet Explorer 8.0+, Firefox 3.0+, Opera 9.6+, 和 Safari 4.0+ 。 Facebook已经使用了这个功能，用postMessage支持基于web的实时消息传递。\n\notherWindow.postMessage(message, targetOrigin);\notherWindow: 对接收信息页面的window的引用。可以是页面中iframe的contentWindow属性；window.open的返回值；通过name或下标从window.frames取到的值。\nmessage: 所要发送的数据，string类型。\ntargetOrigin: 用于限制otherWindow，“*”表示不作限制\na.com/index.html中的代码：\n```\n<iframe id=\"ifr\" src=\"b.com/index.html\"></iframe>\n<script type=\"text/javascript\">\nwindow.onload = function() {\n    var ifr = document.getElementById('ifr');\n    var targetOrigin = 'http://b.com';  // 若写成'http://b.com/c/proxy.html'效果一样\n                                        // 若写成'http://c.com'就不会执行postMessage了\n    ifr.contentWindow.postMessage('I was there!', targetOrigin);\n};\n</script>\n\nb.co```m/index.html中的代码：\n```\n```\n<script type=\"text/javascript\">\n    window.addEventListener('message', function(event){\n        // 通过origin属性判断消息来源地址\n        if (event.origin == 'http://a.com') {\n            alert(event.data);    // 弹出\"I was there!\"\n            alert(event.source);  // 对a.com、index.html中window对象的引用\n                                  // 但由于同源策略，这里event.source不可以访问window对象\n        }\n    }, false);\n</script>\n```\n参考文章：《精通HTML5编程》第五章——跨文档消息机制、https://developer.mozilla.org/en/dom/window.postmessage\n\n\n#### 6、利用flash\n\n这是从YUI3的IO组件中看到的办法，具体可见http://developer.yahoo.com/yui/3/io/。\n可以看在Adobe Developer Connection看到更多的跨域代理文件规范：ross-Domain Policy File Specifications、HTTP Headers Blacklist。\n","slug":"跨域","published":1,"updated":"2017-04-15T03:23:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5naxw5p0027fcxewsu5dtn5","content":"<h4 id=\"什么是跨域\"><a href=\"#什么是跨域\" class=\"headerlink\" title=\"什么是跨域\"></a>什么是跨域</h4><p>JavaScript出于安全方面的考虑，不允许跨域调用其他页面的对象。但在安全限制的同时也给注入iframe或是ajax应用上带来了不少麻烦。这里把涉及到跨域的一些问题简单地整理一下：<br><a id=\"more\"></a><br>首先什么是跨域，简单地理解就是因为JavaScript同源策略的限制，a.com 域名下的js无法操作b.com或是c.a.com域名下的对象。更详细的说明可以看下表：</p>\n<p>特别注意两点：</p>\n<p>第一，如果是协议和端口造成的跨域问题“前台”是无能为力的，<br>第二：在跨域问题上，域仅仅是通过“URL的首部”来识别而不会去尝试判断相同的ip地址对应着两个域或两个域是否在同一个ip上。<br>“URL的首部”指window.location.protocol +window.location.host，也可以理解为“Domains, protocols and ports must match”。<br>接下来简单地总结一下在“前台”一般处理跨域的办法，后台proxy这种方案牵涉到后台配置，这里就不阐述了，有兴趣的可以看看yahoo的这篇文章：《JavaScript: Use a Web Proxy for Cross-Domain XMLHttpRequest Calls》</p>\n<h4 id=\"1、document-domain-iframe的设置\"><a href=\"#1、document-domain-iframe的设置\" class=\"headerlink\" title=\"1、document.domain+iframe的设置\"></a>1、document.domain+iframe的设置</h4><p>对于主域相同而子域不同的例子，可以通过设置document.domain的办法来解决。 具体的做法是可以在<a href=\"http://www.a.com/a.html和http://script.a.com/b.html两个文件中分别加上\" target=\"_blank\" rel=\"external\">http://www.a.com/a.html和http://script.a.com/b.html两个文件中分别加上</a> document.domain = ‘a.com’；然后通过a.html文件中创建一个iframe，去控制iframe的contentDocument，这样两个js文件之间就可以 “交互”了。当然这种办法只能解决主域相同而二级域名不同的情况，如果你异想天开的把script.a.com的domian设为alibaba.com 那显然是会报错地！代码如下：</p>\n<p>www.a.com上的a.html<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">document.domain = &apos;a.com&apos;;</div><div class=\"line\">var ifr = document.createElement(&apos;iframe&apos;);</div><div class=\"line\">ifr.src = &apos;http://script.a.com/b.html&apos;;</div><div class=\"line\">ifr.style.display = &apos;none&apos;;</div><div class=\"line\">document.body.appendChild(ifr);</div><div class=\"line\">ifr.onload = function()&#123;</div><div class=\"line\">    var doc = ifr.contentDocument || ifr.contentWindow.document;</div><div class=\"line\">    // 在这里操纵b.html</div><div class=\"line\">    alert(doc.getElementsByTagName(&quot;h1&quot;)[0].childNodes[0].nodeValue);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>script.a.com上的b.html<br>document.domain = ‘a.com’;</p>\n<p>这种方式适用于{www.kuqin.com, kuqin.com, script.kuqin.com, css.kuqin.com}中的任何页面相互通信。</p>\n<p>备注：某一页面的domain默认等于window.location.hostname。主域名是不带www的域名，例如a.com，主域名前面带前缀的通常都为二级域名或多级域名，例如www.a.com其实是二级域名。 domain只能设置为主域名，不可以在b.a.com中将domain设置为c.a.com。</p>\n<p>问题：</p>\n<p>1、安全性，当一个站点（b.a.com）被攻击后，另一个站点（c.a.com）会引起安全漏洞。<br>2、如果一个页面中引入多个iframe，要想能够操作所有iframe，必须都得设置相同domain。</p>\n<h4 id=\"2、动态创建script\"><a href=\"#2、动态创建script\" class=\"headerlink\" title=\"2、动态创建script\"></a>2、动态创建script</h4><p>虽然浏览器默认禁止了跨域访问，但并不禁止在页面中引用其他域的JS文件，并可以自由执行引入的JS文件中的function（包括操作cookie、Dom等等）。根据这一点，可以方便地通过创建script节点的方法来实现完全跨域的通信。具体的做法可以参考YUI的Get Utility</p>\n<p>这里判断script节点加载完毕还是蛮有意思的：ie只能通过script的readystatechange属性，其它浏览器是script的load事件。以下是部分判断script加载完毕的方法。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">js.onload = js.onreadystatechange = function() &#123;</div><div class=\"line\">    if (!this.readyState || this.readyState === &apos;loaded&apos; || this.readyState === &apos;complete&apos;) &#123;</div><div class=\"line\">        // callback在此处执行</div><div class=\"line\">        js.onload = js.onreadystatechange = null;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<h4 id=\"3、利用iframe和location-hash\"><a href=\"#3、利用iframe和location-hash\" class=\"headerlink\" title=\"3、利用iframe和location.hash\"></a>3、利用iframe和location.hash</h4><p>这个办法比较绕，但是可以解决完全跨域情况下的脚步置换问题。原理是利用location.hash来进行传值。在url： <a href=\"http://a.com#helloword中的‘#helloworld’就是location.hash，改变hash并不会导致页面刷新，所以可\" target=\"_blank\" rel=\"external\">http://a.com#helloword中的‘#helloworld’就是location.hash，改变hash并不会导致页面刷新，所以可</a> 以利用hash值来进行数据传递，当然数据容量是有限的。假设域名a.com下的文件cs1.html要和cnblogs.com域名下的 cs2.html传递信息，cs1.html首先创建自动创建一个隐藏的iframe，iframe的src指向cnblogs.com域名下的 cs2.html页面，这时的hash值可以做参数传递用。cs2.html响应请求后再将通过修改cs1.html的hash值来传递数据（由于两个页面不在同一个域下IE、Chrome不允许修改parent.location.hash的值，所以要借助于a.com域名下的一个代理iframe；Firefox可以修改）。同时在cs1.html上加一个定时器，隔一段时间来判断location.hash的值有没有变化，一点有变化则获取获取hash值。代码如下：</p>\n<p>先是a.com下的文件cs1.html文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">function startRequest()&#123;</div><div class=\"line\">    var ifr = document.createElement(&apos;iframe&apos;);</div><div class=\"line\">    ifr.style.display = &apos;none&apos;;</div><div class=\"line\">    ifr.src = &apos;http://www.cnblogs.com/lab/cscript/cs2.html#paramdo&apos;;</div><div class=\"line\">    document.body.appendChild(ifr);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function checkHash() &#123;</div><div class=\"line\">    try &#123;</div><div class=\"line\">        var data = location.hash ? location.hash.substring(1) : &apos;&apos;;</div><div class=\"line\">        if (console.log) &#123;</div><div class=\"line\">            console.log(&apos;Now the data is &apos;+data);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; catch(e) &#123;&#125;;</div><div class=\"line\">&#125;</div><div class=\"line\">setInterval(checkHash, 2000);</div></pre></td></tr></table></figure></p>\n<p>cnblogs.com域名下的cs2.html:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">//模拟一个简单的参数处理操作</div><div class=\"line\">switch(location.hash)&#123;</div><div class=\"line\">    case &apos;#paramdo&apos;:</div><div class=\"line\">        callBack();</div><div class=\"line\">        break;</div><div class=\"line\">    case &apos;#paramset&apos;:</div><div class=\"line\">        //do something……</div><div class=\"line\">        break;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function callBack()&#123;</div><div class=\"line\">    try &#123;</div><div class=\"line\">        parent.location.hash = &apos;somedata&apos;;</div><div class=\"line\">    &#125; catch (e) &#123;</div><div class=\"line\">        // ie、chrome的安全机制无法修改parent.location.hash，</div><div class=\"line\">        // 所以要利用一个中间的cnblogs域下的代理iframe</div><div class=\"line\">        var ifrproxy = document.createElement(&apos;iframe&apos;);</div><div class=\"line\">        ifrproxy.style.display = &apos;none&apos;;</div><div class=\"line\">        ifrproxy.src = &apos;http://a.com/test/cscript/cs3.html#somedata&apos;;    // 注意该文件在&quot;a.com&quot;域下</div><div class=\"line\">        document.body.appendChild(ifrproxy);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>a.com下的域名cs3.html</p>\n<p>//因为parent.parent和自身属于同一个域，所以可以改变其location.hash的值<br><code>parent.parent.location.hash = self.location.hash.substring(1);</code></p>\n<p>当然这样做也存在很多缺点，诸如数据直接暴露在了url中，数据容量和类型都有限等……</p>\n<h4 id=\"4、window-name实现的跨域数据传输\"><a href=\"#4、window-name实现的跨域数据传输\" class=\"headerlink\" title=\"4、window.name实现的跨域数据传输\"></a>4、window.name实现的跨域数据传输</h4><p>文章较长列在此处不便于阅读，详细请看 window.name实现的跨域数据传输（<a href=\"http://www.cnblogs.com/rainman/archive/2011/02/21/1960044.html）。\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/rainman/archive/2011/02/21/1960044.html）。</a></p>\n<h4 id=\"5、使用HTML5-postMessage\"><a href=\"#5、使用HTML5-postMessage\" class=\"headerlink\" title=\"5、使用HTML5 postMessage\"></a>5、使用HTML5 postMessage</h4><p>HTML5中最酷的新功能之一就是 跨文档消息传输Cross Document Messaging。 下一代浏览器都将支持这个功能：Chrome 2.0+、Internet Explorer 8.0+, Firefox 3.0+, Opera 9.6+, 和 Safari 4.0+ 。 Facebook已经使用了这个功能，用postMessage支持基于web的实时消息传递。</p>\n<p>otherWindow.postMessage(message, targetOrigin);<br>otherWindow: 对接收信息页面的window的引用。可以是页面中iframe的contentWindow属性；window.open的返回值；通过name或下标从window.frames取到的值。<br>message: 所要发送的数据，string类型。<br>targetOrigin: 用于限制otherWindow，“*”表示不作限制<br>a.com/index.html中的代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;iframe id=&quot;ifr&quot; src=&quot;b.com/index.html&quot;&gt;&lt;/iframe&gt;</div><div class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class=\"line\">window.onload = function() &#123;</div><div class=\"line\">    var ifr = document.getElementById(&apos;ifr&apos;);</div><div class=\"line\">    var targetOrigin = &apos;http://b.com&apos;;  // 若写成&apos;http://b.com/c/proxy.html&apos;效果一样</div><div class=\"line\">                                        // 若写成&apos;http://c.com&apos;就不会执行postMessage了</div><div class=\"line\">    ifr.contentWindow.postMessage(&apos;I was there!&apos;, targetOrigin);</div><div class=\"line\">&#125;;</div><div class=\"line\">&lt;/script&gt;</div><div class=\"line\"></div><div class=\"line\">b.co```m/index.html中的代码：</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class=\"line\">    window.addEventListener(&apos;message&apos;, function(event)&#123;</div><div class=\"line\">        // 通过origin属性判断消息来源地址</div><div class=\"line\">        if (event.origin == &apos;http://a.com&apos;) &#123;</div><div class=\"line\">            alert(event.data);    // 弹出&quot;I was there!&quot;</div><div class=\"line\">            alert(event.source);  // 对a.com、index.html中window对象的引用</div><div class=\"line\">                                  // 但由于同源策略，这里event.source不可以访问window对象</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;, false);</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure>\n<p>参考文章：《精通HTML5编程》第五章——跨文档消息机制、<a href=\"https://developer.mozilla.org/en/dom/window.postmessage\" target=\"_blank\" rel=\"external\">https://developer.mozilla.org/en/dom/window.postmessage</a></p>\n<h4 id=\"6、利用flash\"><a href=\"#6、利用flash\" class=\"headerlink\" title=\"6、利用flash\"></a>6、利用flash</h4><p>这是从YUI3的IO组件中看到的办法，具体可见<a href=\"http://developer.yahoo.com/yui/3/io/。\" target=\"_blank\" rel=\"external\">http://developer.yahoo.com/yui/3/io/。</a><br>可以看在Adobe Developer Connection看到更多的跨域代理文件规范：ross-Domain Policy File Specifications、HTTP Headers Blacklist。</p>\n","excerpt":"<h4 id=\"什么是跨域\"><a href=\"#什么是跨域\" class=\"headerlink\" title=\"什么是跨域\"></a>什么是跨域</h4><p>JavaScript出于安全方面的考虑，不允许跨域调用其他页面的对象。但在安全限制的同时也给注入iframe或是ajax应用上带来了不少麻烦。这里把涉及到跨域的一些问题简单地整理一下：<br>","more":"<br>首先什么是跨域，简单地理解就是因为JavaScript同源策略的限制，a.com 域名下的js无法操作b.com或是c.a.com域名下的对象。更详细的说明可以看下表：</p>\n<p>特别注意两点：</p>\n<p>第一，如果是协议和端口造成的跨域问题“前台”是无能为力的，<br>第二：在跨域问题上，域仅仅是通过“URL的首部”来识别而不会去尝试判断相同的ip地址对应着两个域或两个域是否在同一个ip上。<br>“URL的首部”指window.location.protocol +window.location.host，也可以理解为“Domains, protocols and ports must match”。<br>接下来简单地总结一下在“前台”一般处理跨域的办法，后台proxy这种方案牵涉到后台配置，这里就不阐述了，有兴趣的可以看看yahoo的这篇文章：《JavaScript: Use a Web Proxy for Cross-Domain XMLHttpRequest Calls》</p>\n<h4 id=\"1、document-domain-iframe的设置\"><a href=\"#1、document-domain-iframe的设置\" class=\"headerlink\" title=\"1、document.domain+iframe的设置\"></a>1、document.domain+iframe的设置</h4><p>对于主域相同而子域不同的例子，可以通过设置document.domain的办法来解决。 具体的做法是可以在<a href=\"http://www.a.com/a.html和http://script.a.com/b.html两个文件中分别加上\">http://www.a.com/a.html和http://script.a.com/b.html两个文件中分别加上</a> document.domain = ‘a.com’；然后通过a.html文件中创建一个iframe，去控制iframe的contentDocument，这样两个js文件之间就可以 “交互”了。当然这种办法只能解决主域相同而二级域名不同的情况，如果你异想天开的把script.a.com的domian设为alibaba.com 那显然是会报错地！代码如下：</p>\n<p>www.a.com上的a.html<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">document.domain = &apos;a.com&apos;;</div><div class=\"line\">var ifr = document.createElement(&apos;iframe&apos;);</div><div class=\"line\">ifr.src = &apos;http://script.a.com/b.html&apos;;</div><div class=\"line\">ifr.style.display = &apos;none&apos;;</div><div class=\"line\">document.body.appendChild(ifr);</div><div class=\"line\">ifr.onload = function()&#123;</div><div class=\"line\">    var doc = ifr.contentDocument || ifr.contentWindow.document;</div><div class=\"line\">    // 在这里操纵b.html</div><div class=\"line\">    alert(doc.getElementsByTagName(&quot;h1&quot;)[0].childNodes[0].nodeValue);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>script.a.com上的b.html<br>document.domain = ‘a.com’;</p>\n<p>这种方式适用于{www.kuqin.com, kuqin.com, script.kuqin.com, css.kuqin.com}中的任何页面相互通信。</p>\n<p>备注：某一页面的domain默认等于window.location.hostname。主域名是不带www的域名，例如a.com，主域名前面带前缀的通常都为二级域名或多级域名，例如www.a.com其实是二级域名。 domain只能设置为主域名，不可以在b.a.com中将domain设置为c.a.com。</p>\n<p>问题：</p>\n<p>1、安全性，当一个站点（b.a.com）被攻击后，另一个站点（c.a.com）会引起安全漏洞。<br>2、如果一个页面中引入多个iframe，要想能够操作所有iframe，必须都得设置相同domain。</p>\n<h4 id=\"2、动态创建script\"><a href=\"#2、动态创建script\" class=\"headerlink\" title=\"2、动态创建script\"></a>2、动态创建script</h4><p>虽然浏览器默认禁止了跨域访问，但并不禁止在页面中引用其他域的JS文件，并可以自由执行引入的JS文件中的function（包括操作cookie、Dom等等）。根据这一点，可以方便地通过创建script节点的方法来实现完全跨域的通信。具体的做法可以参考YUI的Get Utility</p>\n<p>这里判断script节点加载完毕还是蛮有意思的：ie只能通过script的readystatechange属性，其它浏览器是script的load事件。以下是部分判断script加载完毕的方法。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">js.onload = js.onreadystatechange = function() &#123;</div><div class=\"line\">    if (!this.readyState || this.readyState === &apos;loaded&apos; || this.readyState === &apos;complete&apos;) &#123;</div><div class=\"line\">        // callback在此处执行</div><div class=\"line\">        js.onload = js.onreadystatechange = null;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<h4 id=\"3、利用iframe和location-hash\"><a href=\"#3、利用iframe和location-hash\" class=\"headerlink\" title=\"3、利用iframe和location.hash\"></a>3、利用iframe和location.hash</h4><p>这个办法比较绕，但是可以解决完全跨域情况下的脚步置换问题。原理是利用location.hash来进行传值。在url： <a href=\"http://a.com#helloword中的‘#helloworld’就是location.hash，改变hash并不会导致页面刷新，所以可\">http://a.com#helloword中的‘#helloworld’就是location.hash，改变hash并不会导致页面刷新，所以可</a> 以利用hash值来进行数据传递，当然数据容量是有限的。假设域名a.com下的文件cs1.html要和cnblogs.com域名下的 cs2.html传递信息，cs1.html首先创建自动创建一个隐藏的iframe，iframe的src指向cnblogs.com域名下的 cs2.html页面，这时的hash值可以做参数传递用。cs2.html响应请求后再将通过修改cs1.html的hash值来传递数据（由于两个页面不在同一个域下IE、Chrome不允许修改parent.location.hash的值，所以要借助于a.com域名下的一个代理iframe；Firefox可以修改）。同时在cs1.html上加一个定时器，隔一段时间来判断location.hash的值有没有变化，一点有变化则获取获取hash值。代码如下：</p>\n<p>先是a.com下的文件cs1.html文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">function startRequest()&#123;</div><div class=\"line\">    var ifr = document.createElement(&apos;iframe&apos;);</div><div class=\"line\">    ifr.style.display = &apos;none&apos;;</div><div class=\"line\">    ifr.src = &apos;http://www.cnblogs.com/lab/cscript/cs2.html#paramdo&apos;;</div><div class=\"line\">    document.body.appendChild(ifr);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function checkHash() &#123;</div><div class=\"line\">    try &#123;</div><div class=\"line\">        var data = location.hash ? location.hash.substring(1) : &apos;&apos;;</div><div class=\"line\">        if (console.log) &#123;</div><div class=\"line\">            console.log(&apos;Now the data is &apos;+data);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; catch(e) &#123;&#125;;</div><div class=\"line\">&#125;</div><div class=\"line\">setInterval(checkHash, 2000);</div></pre></td></tr></table></figure></p>\n<p>cnblogs.com域名下的cs2.html:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">//模拟一个简单的参数处理操作</div><div class=\"line\">switch(location.hash)&#123;</div><div class=\"line\">    case &apos;#paramdo&apos;:</div><div class=\"line\">        callBack();</div><div class=\"line\">        break;</div><div class=\"line\">    case &apos;#paramset&apos;:</div><div class=\"line\">        //do something……</div><div class=\"line\">        break;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function callBack()&#123;</div><div class=\"line\">    try &#123;</div><div class=\"line\">        parent.location.hash = &apos;somedata&apos;;</div><div class=\"line\">    &#125; catch (e) &#123;</div><div class=\"line\">        // ie、chrome的安全机制无法修改parent.location.hash，</div><div class=\"line\">        // 所以要利用一个中间的cnblogs域下的代理iframe</div><div class=\"line\">        var ifrproxy = document.createElement(&apos;iframe&apos;);</div><div class=\"line\">        ifrproxy.style.display = &apos;none&apos;;</div><div class=\"line\">        ifrproxy.src = &apos;http://a.com/test/cscript/cs3.html#somedata&apos;;    // 注意该文件在&quot;a.com&quot;域下</div><div class=\"line\">        document.body.appendChild(ifrproxy);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>a.com下的域名cs3.html</p>\n<p>//因为parent.parent和自身属于同一个域，所以可以改变其location.hash的值<br><code>parent.parent.location.hash = self.location.hash.substring(1);</code></p>\n<p>当然这样做也存在很多缺点，诸如数据直接暴露在了url中，数据容量和类型都有限等……</p>\n<h4 id=\"4、window-name实现的跨域数据传输\"><a href=\"#4、window-name实现的跨域数据传输\" class=\"headerlink\" title=\"4、window.name实现的跨域数据传输\"></a>4、window.name实现的跨域数据传输</h4><p>文章较长列在此处不便于阅读，详细请看 window.name实现的跨域数据传输（<a href=\"http://www.cnblogs.com/rainman/archive/2011/02/21/1960044.html）。\">http://www.cnblogs.com/rainman/archive/2011/02/21/1960044.html）。</a></p>\n<h4 id=\"5、使用HTML5-postMessage\"><a href=\"#5、使用HTML5-postMessage\" class=\"headerlink\" title=\"5、使用HTML5 postMessage\"></a>5、使用HTML5 postMessage</h4><p>HTML5中最酷的新功能之一就是 跨文档消息传输Cross Document Messaging。 下一代浏览器都将支持这个功能：Chrome 2.0+、Internet Explorer 8.0+, Firefox 3.0+, Opera 9.6+, 和 Safari 4.0+ 。 Facebook已经使用了这个功能，用postMessage支持基于web的实时消息传递。</p>\n<p>otherWindow.postMessage(message, targetOrigin);<br>otherWindow: 对接收信息页面的window的引用。可以是页面中iframe的contentWindow属性；window.open的返回值；通过name或下标从window.frames取到的值。<br>message: 所要发送的数据，string类型。<br>targetOrigin: 用于限制otherWindow，“*”表示不作限制<br>a.com/index.html中的代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;iframe id=&quot;ifr&quot; src=&quot;b.com/index.html&quot;&gt;&lt;/iframe&gt;</div><div class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class=\"line\">window.onload = function() &#123;</div><div class=\"line\">    var ifr = document.getElementById(&apos;ifr&apos;);</div><div class=\"line\">    var targetOrigin = &apos;http://b.com&apos;;  // 若写成&apos;http://b.com/c/proxy.html&apos;效果一样</div><div class=\"line\">                                        // 若写成&apos;http://c.com&apos;就不会执行postMessage了</div><div class=\"line\">    ifr.contentWindow.postMessage(&apos;I was there!&apos;, targetOrigin);</div><div class=\"line\">&#125;;</div><div class=\"line\">&lt;/script&gt;</div><div class=\"line\"></div><div class=\"line\">b.co```m/index.html中的代码：</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class=\"line\">    window.addEventListener(&apos;message&apos;, function(event)&#123;</div><div class=\"line\">        // 通过origin属性判断消息来源地址</div><div class=\"line\">        if (event.origin == &apos;http://a.com&apos;) &#123;</div><div class=\"line\">            alert(event.data);    // 弹出&quot;I was there!&quot;</div><div class=\"line\">            alert(event.source);  // 对a.com、index.html中window对象的引用</div><div class=\"line\">                                  // 但由于同源策略，这里event.source不可以访问window对象</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;, false);</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure>\n<p>参考文章：《精通HTML5编程》第五章——跨文档消息机制、<a href=\"https://developer.mozilla.org/en/dom/window.postmessage\">https://developer.mozilla.org/en/dom/window.postmessage</a></p>\n<h4 id=\"6、利用flash\"><a href=\"#6、利用flash\" class=\"headerlink\" title=\"6、利用flash\"></a>6、利用flash</h4><p>这是从YUI3的IO组件中看到的办法，具体可见<a href=\"http://developer.yahoo.com/yui/3/io/。\">http://developer.yahoo.com/yui/3/io/。</a><br>可以看在Adobe Developer Connection看到更多的跨域代理文件规范：ross-Domain Policy File Specifications、HTTP Headers Blacklist。</p>"},{"title":"移动端知识点整理","date":"2017-04-08T09:18:10.000Z","_content":"<h2><span style=\"background-color:rgb(238, 236, 225); color:rgb(255, 0, 0)\"><strong>meta基础知识</strong></span></h2>\n\n<h3>H5页面窗口自动调整到设备宽度，并禁止用户缩放页面</h3>\n\n<pre>\n<code>&lt;meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no\" /&gt;</code></pre>\n<!--more-->\n<h3>忽略将页面中的数字识别为电话号码</h3>\n\n<pre>\n<code>&lt;meta name=\"format-detection\" content=\"telephone=no\" /&gt;</code></pre>\n\n<h3>忽略Android平台中对邮箱地址的识别</h3>\n\n<pre>\n<code>&lt;meta name=\"format-detection\" content=\"email=no\" /&gt;</code></pre>\n\n<h3>当网站添加到主屏幕快速启动方式，可隐藏地址栏，仅针对ios的safari</h3>\n\n<pre>\n<code>&lt;meta name=\"apple-mobile-web-app-capable\" content=\"yes\" /&gt; &lt;!-- ios7.0版本以后，safari上已看不到效果 --&gt;</code></pre>\n\n<p>将网站添加到主屏幕快速启动方式，仅针对ios的safari顶端状态条的样式</p>\n\n<pre>\n<code>&lt;meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black\" /&gt; &lt;!-- 可选default、black、black-translucent --&gt;</code></pre>\n\n<h3>viewport模板</h3>\n\n<p>viewport模板&mdash;&mdash;通用</p>\n\n<pre>\n<code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;meta content=\"width=device-width,initial-scale=1.0,maximum-scale=1.0,user-scalable=no\" name=\"viewport\"&gt;\n    &lt;meta content=\"yes\" name=\"apple-mobile-web-app-capable\"&gt;\n    &lt;meta content=\"black\" name=\"apple-mobile-web-app-status-bar-style\"&gt;\n    &lt;meta content=\"telephone=no\" name=\"format-detection\"&gt;\n    &lt;meta content=\"email=no\" name=\"format-detection\"&gt;\n    &lt;title&gt;标题&lt;/title&gt;\n    &lt;link rel=\"stylesheet\" href=\"index.css\"&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        这里开始内容\n    &lt;/body&gt;\n&lt;/html&gt;</code></pre>\n\n<p>&nbsp;</p>\n\n<p><span style=\"color:rgb(0, 0, 0)\">viewport模板 -&nbsp;target-densitydpi=device-dpi，android 2.3.5以下版本不支持</span></p>\n\n<pre>\n<code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=750, user-scalable=no, target-densitydpi=device-dpi\"&gt;&lt;!-- width取值与页面定义的宽度一致 --&gt;\n    &lt;meta content=\"yes\" name=\"apple-mobile-web-app-capable\"&gt;\n    &lt;meta content=\"black\" name=\"apple-mobile-web-app-status-bar-style\"&gt;\n    &lt;meta content=\"telephone=no\" name=\"format-detection\"&gt;\n    &lt;meta content=\"email=no\" name=\"format-detection\"&gt;\n    &lt;title&gt;标题&lt;/title&gt;\n    &lt;link rel=\"stylesheet\" href=\"index.css\"&gt;\n&lt;/head&gt;\n    &lt;body&gt; 这里开始内容 &lt;/body&gt;\n&lt;/html&gt;</code></pre>\n\n<p>&nbsp;</p>\n\n<h2><span style=\"color:rgb(255, 0, 0)\">常见问题</span></h2>\n\n<h3>移动端如何定义字体font-family</h3>\n\n<p>中文字体使用系统默认即可，英文用Helvetica</p>\n\n<pre>\n<code>/* 移动端定义字体的代码 */ body{font-family:Helvetica;}</code></pre>\n\n<p>参考《<a href=\"http://www.cnblogs.com/PeunZhang/p/3592096.html\" target=\"_blank\">移动端使用字体的思考</a>》</p>\n\n<h3>移动端字体单位font-size选择px还是rem</h3>\n\n<p>对于只需要适配少部分手机设备，且分辨率对页面影响不大的，使用px即可</p>\n\n<p>对于需要适配各种移动设备，使用rem，例如只需要适配iPhone和iPad等分辨率差别比较挺大的设备</p>\n\n<p>rem配置参考：</p>\n\n<pre>\n<code>html{font-size:10px}\n @media screen and (min-width:321px) and (max-width:375px){html{font-size:11px}}\n @media screen and (min-width:376px) and (max-width:414px){html{font-size:12px}}\n @media screen and (min-width:415px) and (max-width:639px){html{font-size:15px}}\n @media screen and (min-width:640px) and (max-width:719px){html{font-size:20px}}\n @media screen and (min-width:720px) and (max-width:749px){html{font-size:22.5px}}\n @media screen and (min-width:750px) and (max-width:799px){html{font-size:23.5px}}\n @media screen and (min-width:800px){html{font-size:25px}}</code></pre>\n\n<p><span style=\"color:rgb(0, 0, 0)\">体验demo：</span><a href=\"http://1.peunzhang.sinaapp.com/demo/rem/index.html\" target=\"_blank\">http://1.peunzhang.sinaapp.com/demo/rem/index.html</a></p>\n\n<h3>移动端touch事件(区分webkit 和 winphone)</h3>\n\n<p>当用户手指放在移动设备在屏幕上滑动会触发的touch事件</p>\n\n<p><strong>以下支持webkit</strong></p>\n\n<ul>\n\t<li>\n\t<p>touchstart&mdash;&mdash;当手指触碰屏幕时候发生。不管当前有多少只手指</p>\n\t</li>\n\t<li>\n\t<p>touchmove&mdash;&mdash;当手指在屏幕上滑动时连续触发。通常我们再滑屏页面，会调用event的preventDefault()可以阻止默认情况的发生：阻止页面滚动</p>\n\t</li>\n\t<li>\n\t<p>touchend&mdash;&mdash;当手指离开屏幕时触发</p>\n\t</li>\n\t<li>\n\t<p>touchcancel&mdash;&mdash;系统停止跟踪触摸时候会触发。例如在触摸过程中突然页面alert()一个提示框，此时会触发该事件，这个事件比较少用</p>\n\t</li>\n</ul>\n\n<p>TouchEvent</p>\n\n<ul>\n\t<li>\n\t<p>touches：屏幕上所有手指的信息</p>\n\t</li>\n\t<li>\n\t<p>targetTouches：手指在目标区域的手指信息</p>\n\t</li>\n\t<li>\n\t<p>changedTouches：最近一次触发该事件的手指信息</p>\n\t</li>\n\t<li>\n\t<p>touchend时，touches与targetTouches信息会被删除，changedTouches保存的最后一次的信息，最好用于计算手指信息</p>\n\t</li>\n</ul>\n\n<p><span style=\"color:rgb(255, 0, 0)\"><span style=\"color:rgb(0, 0, 0)\">参数信息(changedTouches[0])</span></span></p>\n\n<ul>\n\t<li>\n\t<p>clientX、clientY在显示区的坐标</p>\n\t</li>\n\t<li>\n\t<p>target：当前元素</p>\n\t</li>\n</ul>\n\n<p>参考：<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent\" target=\"_blank\">https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent</a></p>\n\n<p><strong>以下支持winphone 8</strong></p>\n\n<ul>\n\t<li>\n\t<p>MSPointerDown&mdash;&mdash;当手指触碰屏幕时候发生。不管当前有多少只手指</p>\n\t</li>\n\t<li>\n\t<p>MSPointerMove&mdash;&mdash;当手指在屏幕上滑动时连续触发。通常我们再滑屏页面，会调用css的html{-ms-touch-action: none;}可以阻止默认情况的发生：阻止页面滚动</p>\n\t</li>\n\t<li>\n\t<p>MSPointerUp&mdash;&mdash;当手指离开屏幕时触发</p>\n\t</li>\n</ul>\n\n<h3>移动端click屏幕产生200-300 ms的延迟响应</h3>\n\n<p>移动设备上的web网页是有300ms延迟的，玩玩会造成按钮点击延迟甚至是点击失效。</p>\n\n<p>以下是历史原因，来源一个公司内一个同事的分享：</p>\n\n<p>2007年苹果发布首款iphone上IOS系统搭载的safari为了将适用于PC端上大屏幕的网页能比较好的展示在手机端上，使用了双击缩放(double tap to zoom)的方案，比如你在手机上用浏览器打开一个PC上的网页，你可能在看到页面内容虽然可以撑满整个屏幕，但是字体、图片都很小看不清，此时可以快速双击屏幕上的某一部分，你就能看清该部分放大后的内容，再次双击后能回到原始状态。</p>\n\n<p>双击缩放是指用手指在屏幕上快速点击两次，iOS 自带的 Safari 浏览器会将网页缩放至原始比例。</p>\n\n<p>原因就出在浏览器需要如何判断快速点击上，当用户在屏幕上单击某一个元素时候，例如跳转链接&lt;a href=&quot;#&quot;&gt;&lt;/a&gt;，此处浏览器会先捕获该次单击，但浏览器不能决定用户是单纯要点击链接还是要双击该部分区域进行缩放操作，所以，捕获第一次单击后，浏览器会先Hold一段时间t，如果在t时间区间里用户未进行下一次点击，则浏览器会做单击跳转链接的处理，如果t时间里用户进行了第二次单击操作，则浏览器会禁止跳转，转而进行对该部分区域页面的缩放操作。那么这个时间区间t有多少呢？在IOS safari下，大概为300毫秒。这就是延迟的由来。造成的后果用户纯粹单击页面，页面需要过一段时间才响应，给用户慢体验感觉，对于web开发者来说是，页面js捕获click事件的回调函数处理，需要300ms后才生效，也就间接导致影响其他业务逻辑的处理。</p>\n\n<p>解决方案：</p>\n\n<ul>\n\t<li>\n\t<p>fastclick可以解决在手机上点击事件的300ms延迟</p>\n\t</li>\n\t<li>\n\t<p>zepto的touch模块，tap事件也是为了解决在click的延迟问题</p>\n\t</li>\n</ul>\n\n<h3>触摸事件的响应顺序</h3>\n\n<pre>\n<code>1、ontouchstart  2、ontouchmove  3、ontouchend  4、onclick</code></pre>\n\n<p>解决300ms延迟的问题，也可以通过绑定ontouchstart事件，加快对事件的响应</p>\n\n<h3>什么是Retina 显示屏，带来了什么问题</h3>\n\n<p>retina：一种具备超高像素密度的液晶屏，同样大小的屏幕上显示的像素点由1个变为多个，如在同样带下的屏幕上，苹果设备的retina显示屏中，像素点1个变为4个</p>\n\n<p>在高清显示屏中的位图被放大，图片会变得模糊，<span style=\"color:rgb(255, 0, 0)\">因此移动端的视觉稿通常会设计为传统PC的2倍</span></p>\n\n<p>那么，前端的应对方案是：</p>\n\n<p>设计稿切出来的图片长宽保证为偶数，并使用backgroud-size把图片缩小为原来的1/2</p>\n\n<pre>\n<code>//例如图片宽高为：200px*200px，那么写法如下 .css{width:100px;height:100px;background-size:100px 100px;}</code></pre>\n\n<p>其它元素的取值为原来的1/2，例如视觉稿40px的字体，使用样式的写法为20px</p>\n\n<pre>\n<code>.css{font-size:20px}</code></pre>\n\n<p>参考《<a href=\"http://www.cnblogs.com/PeunZhang/p/3441110.html\" target=\"_blank\">高清显示屏原理及设计方案</a>》</p>\n\n<h3>ios系统中元素被触摸时产生的半透明灰色遮罩怎么去掉</h3>\n\n<p>ios用户点击一个链接，会出现一个半透明灰色遮罩,&nbsp;如果想要禁用，可设置-webkit-tap-highlight-color的alpha值为0，也就是属性值的最后一位设置为0就可以去除半透明灰色遮罩</p>\n\n<pre>\n<code>a,button,input,textarea{-webkit-tap-highlight-color: rgba(0,0,0,0;)}</code></pre>\n\n<h3>部分android系统中元素被点击时产生的边框怎么去掉</h3>\n\n<p>android用户点击一个链接，会出现一个边框或者半透明灰色遮罩,&nbsp;不同生产商定义出来额效果不一样，可设置-webkit-tap-highlight-color的alpha值为0去除部分机器自带的效果</p>\n\n<pre>\n<code>a,button,input,textarea{ -webkit-tap-highlight-color: rgba(0,0,0,0;) -webkit-user-modify:read-write-plaintext-only;  }</code></pre>\n\n<p>-webkit-user-modify有个副作用，就是输入法不再能够输入多个字符</p>\n\n<p>另外，有些机型去除不了，如小米2</p>\n\n<p>对于按钮类还有个办法，不使用a或者input标签，直接用div标签</p>\n\n<p>参考《<a href=\"http://www.cnblogs.com/PeunZhang/archive/2013/02/28/2907708.html\" target=\"_blank\">如何去除android上a标签产生的边框</a>》</p>\n\n<h3>winphone系统a、input标签被点击时产生的半透明灰色背景怎么去掉</h3>\n\n<pre>\n<code>&lt;meta name=\"msapplication-tap-highlight\" content=\"no\"&gt;</code></pre>\n\n<h3>webkit表单元素的默认外观怎么重置</h3>\n\n<pre>\n<code>.css{-webkit-appearance:none;}</code></pre>\n\n<h3>webkit表单输入框placeholder的颜色值能改变么</h3>\n\n<pre>\n<code>input::-webkit-input-placeholder{color:#AAAAAA;} input:focus::-webkit-input-placeholder{color:#EEEEEE;}</code></pre>\n\n<h3>webkit表单输入框placeholder的文字能换行么</h3>\n\n<p>ios可以，android不行~</p>\n\n<p>在textarea标签下都可以换行~</p>\n\n<h3>IE10（winphone8）表单元素默认外观如何重置</h3>\n\n<p><strong>禁用&nbsp;select&nbsp;</strong><strong>默认下拉箭头</strong></p>\n\n<p>::-ms-expand&nbsp;适用于表单选择控件下拉箭头的修改，有多个属性值，设置它隐藏&nbsp;(display:none)&nbsp;并使用背景图片来修饰可得到我们想要的效果。</p>\n\n<pre>\n<code>select::-ms-expand { display: none; }</code></pre>\n\n<p><strong>禁用&nbsp;radio&nbsp;</strong><strong>和&nbsp;checkbox&nbsp;</strong><strong>默认样式</strong></p>\n\n<p>::-ms-check&nbsp;适用于表单复选框或单选按钮默认图标的修改，同样有多个属性值，设置它隐藏&nbsp;(display:none)&nbsp;并使用背景图片来修饰可得到我们想要的效果。</p>\n\n<pre>\n<code>input[type=radio]::-ms-check,input[type=checkbox]::-ms-check{ display: none; }</code></pre>\n\n<p><strong>禁用PC</strong><strong>端表单输入框默认清除按钮</strong></p>\n\n<p>当表单文本输入框输入内容后会显示文本清除按钮，::-ms-clear&nbsp;适用于该清除按钮的修改，同样设置使它隐藏&nbsp;(display:none)&nbsp;并使用背景图片来修饰可得到我们想要的效果。</p>\n\n<pre>\n<code>input[type=text]::-ms-clear,input[type=tel]::-ms-clear,input[type=number]::-ms-clear{ display: none; }</code></pre>\n\n<h3>禁止ios 长按时不触发系统的菜单，禁止ios&amp;android长按时下载图片</h3>\n\n<pre>\n<code>.css{-webkit-touch-callout: none}</code></pre>\n\n<h3>禁止ios和android用户选中文字</h3>\n\n<pre>\n<code>.css{-webkit-user-select:none}</code></pre>\n\n<p>参考《<a href=\"http://www.cnblogs.com/PeunZhang/p/3522603.html\" target=\"_blank\">如何改变表单元素的外观(for Webkit and IE10)</a>》</p>\n\n<h3>打电话发短信写邮件怎么实现</h3>\n\n<p>打电话</p>\n\n<pre>\n<code>&lt;a href=\"tel:0755-10086\"&gt;打电话给:0755-10086&lt;/a&gt;</code></pre>\n\n<p>发短信，winphone系统无效</p>\n\n<pre>\n<code>&lt;a href=\"sms:10086\"&gt;发短信给: 10086&lt;/a&gt;</code></pre>\n\n<p>写邮件，可参考《<a href=\"http://www.cnblogs.com/PeunZhang/p/4952783.html\" target=\"_blank\">移动web页面给用户发送邮件的方法</a>》</p>\n\n<pre>\n<code>&lt;a href=\"mailto:peun@foxmail.com\"&gt;peun@foxmail.com&lt;/a&gt;</code></pre>\n\n<h3>模拟按钮hover效果</h3>\n\n<p>移动端触摸按钮的效果，可明示用户有些事情正要发生，是一个比较好体验，但是移动设备中并没有鼠标指针，使用css的hover并不能满足我们的需求，还好国外有个激活css的active效果，代码如下，</p>\n\n<pre>\n<code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;meta content=\"width=device-width,initial-scale=1.0,maximum-scale=1.0,user-scalable=no\" name=\"viewport\"&gt;\n    &lt;meta content=\"yes\" name=\"apple-mobile-web-app-capable\"&gt;\n    &lt;meta content=\"black\" name=\"apple-mobile-web-app-status-bar-style\"&gt;\n    &lt;meta content=\"telephone=no\" name=\"format-detection\"&gt;\n    &lt;meta content=\"email=no\" name=\"format-detection\"&gt;\n    &lt;style type=\"text/css\"&gt;\n        a{-webkit-tap-highlight-color: rgba(0,0,0,0);}\n        .btn-blue{display:block;height:42px;line-height:42px;text-align:center;border-radius:4px;font-size:18px;color:#FFFFFF;background-color: #4185F3;}\n        .btn-blue:active{background-color: #357AE8;}\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=\"btn-blue\"&gt;按钮&lt;/div&gt;\n    &lt;script type=\"text/javascript\"&gt;\n        document.addEventListener(\"touchstart\", function(){}, true)\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n\n<p>兼容性ios5+、部分android 4+、winphone 8</p>\n\n<p>要做到全兼容的办法，可通过绑定ontouchstart和ontouchend来控制按钮的类名</p>\n\n<pre>\n<code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;meta content=\"width=device-width,initial-scale=1.0,maximum-scale=1.0,user-scalable=no\" name=\"viewport\"&gt;\n    &lt;meta content=\"yes\" name=\"apple-mobile-web-app-capable\"&gt;\n    &lt;meta content=\"black\" name=\"apple-mobile-web-app-status-bar-style\"&gt;\n    &lt;meta content=\"telephone=no\" name=\"format-detection\"&gt;\n    &lt;meta content=\"email=no\" name=\"format-detection\"&gt;\n    &lt;style type=\"text/css\"&gt;\n        a{-webkit-tap-highlight-color: rgba(0,0,0,0);}\n        .btn-blue{display:block;height:42px;line-height:42px;text-align:center;border-radius:4px;font-size:18px;color:#FFFFFF;background-color: #4185F3;}\n        .btn-blue-on{background-color: #357AE8;}\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=\"btn-blue\"&gt;按钮&lt;/div&gt;\n    &lt;script type=\"text/javascript\"&gt;\n        var btnBlue = document.querySelector(\".btn-blue\");\n        btnBlue.ontouchstart = function(){this.className = \"btn-blue btn-blue-on\" } btnBlue.ontouchend = function(){this.className = \"btn-blue\" }\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n\n<h3>屏幕旋转的事件和样式</h3>\n\n<h4>事件</h4>\n\n<p>window.orientation，取值：正负90表示横屏模式、0和180表现为竖屏模式；</p>\n\n<pre>\n<code>window.onorientationchange = function(){     switch(window.orientation){         case -90:         case 90:         alert(\"横屏:\" + window.orientation);         case 0:         case 180:         alert(\"竖屏:\" + window.orientation);         break;     } }</code></pre>\n\n<h4>样式</h4>\n\n<pre>\n<code>//竖屏时使用的样式 @media all and (orientation:portrait) { .css{} } //横屏时使用的样式 @media all and (orientation:landscape) { .css{} }</code></pre>\n\n<h3>audio元素和video元素在ios和andriod中无法自动播放</h3>\n\n<p>应对方案：触屏即播</p>\n\n<pre>\n<code>$('html').one('touchstart',function(){audio.play() })</code></pre>\n\n<p>可参考《<a href=\"http://www.cnblogs.com/PeunZhang/archive/2013/02/05/2893093.html\" target=\"_blank\">无法自动播放的audio元素</a>》</p>\n\n<h3>摇一摇功能</h3>\n\n<p>HTML5 deviceMotion：封装了运动传感器数据的事件，可以获取手机运动状态下的运动加速度等数据。</p>\n\n<pre>\n<code>var SHAKE_THRESHOLD = 2000;  \nvar last_update = 0;  \nvar x = y = z = last_x = last_y = last_z = 0;  \nfunction init() {  \n    if (window.DeviceMotionEvent) {  \n       window.addEventListener('devicemotion', deviceMotionHandler, false);  \n    } else {  \n        alert('not support mobile event');  \n    }  \n}  \nfunction deviceMotionHandler(eventData) {  \n    var acceleration = eventData.accelerationIncludingGravity;  \n    var curTime = new Date().getTime();  \n    if ((curTime - last_update) &gt; 100) {  \n        var diffTime = curTime - last_update;  \n        last_update = curTime;  \n        x = acceleration.x;  \n        y = acceleration.y;  \n        z = acceleration.z;  \n        var speed = Math.abs(x + y + z - last_x - last_y - last_z) / diffTime * 10000;  \n        if (speed &gt; SHAKE_THRESHOLD) {  \n            //alert(\"摇动了\"+SHAKE_THRESHOLD);\n        }  \n        last_x = x;  \n        last_y = y;  \n        last_z = z;  \n    }  \n}</code></pre>\n\n<p>&nbsp;</p>\n\n<h3>手机拍照和上传图片</h3>\n\n<p>&lt;input type=&quot;file&quot;&gt;的accept 属性</p>\n\n<pre>\n<code>&lt;!-- 选择照片 --&gt; &lt;input type=file accept=\"image/*\"&gt; &lt;!-- 选择视频 --&gt; &lt;input type=file accept=\"video/*\"&gt;</code></pre>\n\n<p>使用总结：</p>\n\n<ul>\n\t<li>\n\t<p>ios 有拍照、录像、选取本地图片功能</p>\n\t</li>\n\t<li>\n\t<p>部分android只有选取本地图片功能</p>\n\t</li>\n\t<li>\n\t<p>winphone不支持</p>\n\t</li>\n\t<li>\n\t<p>input控件默认外观丑陋</p>\n\t</li>\n</ul>\n\n<h3>微信浏览器用户调整字体大小后页面矬了，怎么阻止用户调整</h3>\n\n<p>原因</p>\n\n<ul>\n\t<li>\n\t<p>android侧是复写了layoutinflater 对textview做了统一处理</p>\n\t</li>\n\t<li>\n\t<p>ios侧是修改了body.style.webkitTextSizeAdjust值</p>\n\t</li>\n</ul>\n\n<p>解决方案：</p>\n\n<ul>\n\t<li>\n\t<p>android使用以下代码，该接口只在微信浏览器下有效(感谢jationhuang同学提供)</p>\n\t</li>\n</ul>\n\n<p><img alt=\"复制代码\" src=\"http://static.oschina.net/uploads/img/201602/22125528_gb2w.gif\" /></p>\n\n<pre>\n<code>/**  * 页面加入这段代码可使Android机器页面不再受到用户字体缩放强制改变大小  * 但是会有一个1秒左右的延迟，期间可以考虑通过loading展示  * 仅供参考  */\n(function(){     \n    if (typeof(WeixinJSBridge) == \"undefined\") {                                              document.addEventListener(\"WeixinJSBridgeReady\", function (e) {\n            setTimeout(function(){\n              WeixinJSBridge.invoke('setFontSizeCallback',{\"fontSize\":0}, function(res) {                       alert(JSON.stringify(res));\n              });\n            },0);  \n        });\n    } else {\n        setTimeout(function(){\n           WeixinJSBridge.invoke('setFontSizeCallback',{\"fontSize\":0}, function(res) {                         alert(JSON.stringify(res));\n           });\n         },0);\n      }\n   })();</code></pre>\n\n<p>&nbsp;</p>\n\n<ul>\n\t<li>\n\t<p>ios使用-webkit-text-size-adjust禁止调整字体大小</p>\n\t</li>\n</ul>\n\n<pre>\n<code>body{-webkit-text-size-adjust: 100%!important;}</code></pre>\n\n<p>最好的解决方案：</p>\n\n<ul>\n\t<li>\n\t<p>整个页面用rem或者百分比布局</p>\n\t</li>\n</ul>\n\n<h3>消除transition闪屏</h3>\n\n<p>网络都是这么写的，但我并没有测试出来</p>\n\n<pre>\n<code>.css{ /*设置内嵌的元素在 3D 空间如何呈现：保留 3D*/ -webkit-transform-style: preserve-3d; /*（设置进行转换的元素的背面在面对用户时是否可见：隐藏）*/ -webkit-backface-visibility: hidden; }</code></pre>\n\n<h3>开启硬件加速</h3>\n\n<ul>\n\t<li>\n\t<p>解决页面闪白</p>\n\t</li>\n\t<li>\n\t<p>保证动画流畅</p>\n\t</li>\n</ul>\n\n<pre>\n<code>.css {    -webkit-transform: translate3d(0, 0, 0);    -moz-transform: translate3d(0, 0, 0);    -ms-transform: translate3d(0, 0, 0);    transform: translate3d(0, 0, 0); }</code></pre>\n\n<p>参考《<a href=\"http://www.cnblogs.com/PeunZhang/p/3510083.html\" target=\"_blank\">用CSS开启硬件加速来提高网站性能</a>》</p>\n\n<h3>取消input在ios下，输入的时候英文首字母的默认大写</h3>\n\n<pre>\n<code>&lt;input autocapitalize=\"off\" autocorrect=\"off\" /&gt;</code></pre>\n\n<h3>android 上去掉语音输入按钮</h3>\n\n<pre>\n<code>input::-webkit-input-speech-button {display: none}</code></pre>\n\n<h3>android 2.3 bug</h3>\n\n<ul>\n\t<li>\n\t<p>@-webkit-keyframes 需要以0%开始100%结束，0%的百分号不能去掉</p>\n\t</li>\n\t<li>\n\t<p><span style=\"color:rgb(255, 0, 0)\">after和before伪类无法使用动画animation</span></p>\n\t</li>\n\t<li>\n\t<p>border-radius不支持%单位</p>\n\t</li>\n\t<li>\n\t<p>translate百分比的写法和scale在一起会导致失效，例如-webkit-transform: translate(-50%,-50%) scale(-0.5, 1)</p>\n\t</li>\n</ul>\n\n<h3>android 4.x bug</h3>\n\n<ul>\n\t<li>\n\t<p>三星 Galaxy S4中自带浏览器不支持border-radius缩写</p>\n\t</li>\n\t<li>\n\t<p>同时设置border-radius和背景色的时候，背景色会溢出到圆角以外部分</p>\n\t</li>\n\t<li>\n\t<p>部分手机(如三星)，a链接支持鼠标:visited事件，也就是说链接访问后文字变为紫色</p>\n\t</li>\n\t<li>\n\t<p><span style=\"color:rgb(255, 0, 0)\">android无法同时播放多音频audio</span></p>\n\t</li>\n</ul>\n\n<p>参考《<a href=\"https://github.com/yisibl/blog/issues/2\" target=\"_blank\">border-radius 移动之伤</a>》</p>\n\n<h3>设计高性能CSS3动画的几个要素</h3>\n\n<ul>\n\t<li>\n\t<p>尽可能地使用合成属性transform和opacity来设计CSS3动画，不使用position的left和top来定位</p>\n\t</li>\n\t<li>\n\t<p>利用translate3D开启GPU加速</p>\n\t</li>\n</ul>\n\n<p>参考《<a href=\"http://www.html5rocks.com/en/tutorials/speed/high-performance-animations/\" target=\"_blank\">High Performance Animations</a>》</p>\n\n<h3>fixed bug</h3>\n\n<ul>\n\t<li>\n\t<p>ios下fixed元素容易定位出错，软键盘弹出时，影响fixed元素定位</p>\n\t</li>\n\t<li>\n\t<p>android下fixed表现要比iOS更好，软键盘弹出时，不会影响fixed元素定位</p>\n\t</li>\n\t<li>\n\t<p>ios4下不支持position:fixed</p>\n\t</li>\n</ul>\n\n<p>解决方案</p>\n\n<ul>\n\t<li>\n\t<p>可用isroll.js，暂无完美方案</p>\n\t</li>\n</ul>\n\n<p>参考</p>\n\n<p>《<a href=\"https://github.com/maxzhang/maxzhang.github.com/issues/2\" target=\"_blank\">移动端web页面使用position:fixed问题总结</a>》</p>\n\n<p>《<a href=\"http://www.cnblogs.com/PeunZhang/archive/2013/06/14/3117589.html\" target=\"_blank\">使用iScroll.js解决ios4下不支持position:fixed的问题</a>》</p>\n\n<h3>&nbsp;如何阻止windows Phone的默认触摸事件</h3>\n\n<p>winphone下默认触摸事件事件使用e.preventDefault是无效的</p>\n\n<p>目前解决方法是使用样式来禁用</p>\n\n<pre>\n<code>html{-ms-touch-action: none;}/* 禁止winphone默认触摸事件 */</code></pre>\n\n<p>参考</p>\n\n<p>《<a href=\"http://stackoverflow.com/questions/13396297/windows-phone-8-touch-support\" target=\"_blank\">Windows phone 8 touch support</a>》</p>\n\n<h3>播放视频不全屏</h3>\n\n<pre>\n<code>&lt;!-- 1.目前只有ios7+、winphone8+支持自动播放 2.支持Airplay的设备（如：音箱、Apple TV)播放 x-webkit-airplay=\"true\"  3.播放视频不全屏，ios7+、winphone8+支持，部分android4+支持（含华为、小米、魅族） webkit-playsinline=\"true\"  --&gt; &lt;video x-webkit-airplay=\"true\" webkit-playsinline=\"true\" preload=\"auto\" autoplay src=\"http://\"&gt;&lt;/video&gt;</code></pre>\n\n<p><span style=\"color:rgb(0, 0, 0)\">体验demo：</span><span style=\"color:rgb(153, 204, 0)\"><a href=\"http://1.peunzhang.sinaapp.com/demo/video/index.html\" target=\"_blank\">http://1.peunzhang.sinaapp.com/demo/video/index.html</a></span></p>\n\n<h2><span style=\"color:rgb(153, 204, 0)\">常用的移动端框架</span></h2>\n\n<h3>zepto.js</h3>\n\n<p>语法与jquery几乎一样，会jquery基本会zepto~</p>\n\n<p>最新版本已经更新到1.16</p>\n\n<p>官网：<a href=\"http://zeptojs.com/\" target=\"_blank\">http://zeptojs.com/</a></p>\n\n<p>中文(非官网)：<a href=\"http://www.css88.com/doc/zeptojs_api/\" target=\"_blank\">http://www.css88.com/doc/zeptojs_api/</a></p>\n\n<p>常使用的扩展模块：</p>\n\n<p>浏览器检测：<a href=\"https://github.com/madrobby/zepto/blob/master/src/detect.js\" target=\"_blank\">https://github.com/madrobby/zepto/blob/master/src/detect.js</a></p>\n\n<p>tap事件：<a href=\"https://github.com/madrobby/zepto/blob/master/src/touch.js\" target=\"_blank\">https://github.com/madrobby/zepto/blob/master/src/touch.js</a></p>\n\n<h3>iscroll.js</h3>\n\n<p>解决页面不支持弹性滚动，不支持fixed引起的问题~</p>\n\n<p>实现下拉刷新，滑屏，缩放等功能~</p>\n\n<p>最新版本已经更新到5.0</p>\n\n<p>官网：<a href=\"http://cubiq.org/iscroll-5\" target=\"_blank\">http://cubiq.org/iscroll-5</a></p>\n\n<h3>underscore.js</h3>\n\n<p>笔者没用过，不过听说好用，推荐给大家~</p>\n\n<p>该库提供了一整套函数式编程的实用功能，但是没有扩展任何JavaScript内置对象。</p>\n\n<p>最新版本已经更新到1.8.2</p>\n\n<p>官网：<a href=\"http://underscorejs.org/\" target=\"_blank\">http://underscorejs.org/</a></p>\n\n<h3>滑屏框架</h3>\n\n<p>适合上下滑屏、左右滑屏等滑屏切换页面的效果</p>\n\n<p><a href=\"https://github.com/peunzhang/slip.js\" target=\"_blank\">slip.js</a></p>\n\n<p><a href=\"https://github.com/peunzhang/iSlider\" target=\"_blank\">iSlider.js</a></p>\n\n<p><a href=\"https://github.com/peunzhang/fullpage\" target=\"_blank\">fullpage.js</a></p>\n\n<p><a href=\"http://www.swiper.com.cn/\" target=\"_blank\">swiper.js</a></p>\n\n<h3>flex布局</h3>\n\n<p><span style=\"color:rgb(255, 0, 0)\">使用注意：</span></p>\n\n<ul>\n\t<li>\n\t<p><span style=\"color:rgb(255, 0, 0)\">flex下的子元素必须为块级元素，非块级元素在android2.3机器下flex失效</span></p>\n\t</li>\n\t<li>\n\t<p><span style=\"color:rgb(255, 0, 0)\">flex下的子元素宽度和高度不能超过父元素，否则会导致子元素定位错误，例如水平垂直居中</span></p>\n\t</li>\n</ul>\n\n<h3>FastClick</h3>\n\n<p>消除在移动浏览器上触发click事件与一个物理Tap(敲击)之间的300延迟</p>\n\n<p>参考《<a href=\"https://github.com/ftlabs/fastclick\" target=\"_blank\">FastClick</a>》</p>\n\n<h3>Sea.js&nbsp;</h3>\n\n<p>提供简单、极致的模块化开发体验</p>\n\n<ul>\n\t<li>\n\t<p><strong>简单友好的模块定义规范</strong>：Sea.js 遵循&nbsp;<a href=\"https://github.com/cmdjs/specification/blob/master/draft/module.md\" target=\"_blank\">CMD</a>&nbsp;规范，可以像&nbsp;<a href=\"http://nodejs.org/\" target=\"_blank\">Node.js</a>&nbsp;一般书写模块代码。</p>\n\t</li>\n\t<li>\n\t<p><strong>自然直观的代码组织方式</strong>：依赖的自动加载、配置的简洁清晰，可以让我们更多地享受编码的乐趣。</p>\n\t</li>\n</ul>\n\n<p>地址：<a href=\"http://seajs.org/docs/\" target=\"_blank\">http://seajs.org/docs/</a></p>\n\n<p>&nbsp;</p>\n","source":"_posts/移动端资源整理.md","raw":"---\ntitle: 移动端知识点整理\ndate: 2017-04-08 17:18:10\ntags: \"移动端\"\ncategories:\n    - '前端'\n    - '知识点'\n---\n<h2><span style=\"background-color:rgb(238, 236, 225); color:rgb(255, 0, 0)\"><strong>meta基础知识</strong></span></h2>\n\n<h3>H5页面窗口自动调整到设备宽度，并禁止用户缩放页面</h3>\n\n<pre>\n<code>&lt;meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no\" /&gt;</code></pre>\n<!--more-->\n<h3>忽略将页面中的数字识别为电话号码</h3>\n\n<pre>\n<code>&lt;meta name=\"format-detection\" content=\"telephone=no\" /&gt;</code></pre>\n\n<h3>忽略Android平台中对邮箱地址的识别</h3>\n\n<pre>\n<code>&lt;meta name=\"format-detection\" content=\"email=no\" /&gt;</code></pre>\n\n<h3>当网站添加到主屏幕快速启动方式，可隐藏地址栏，仅针对ios的safari</h3>\n\n<pre>\n<code>&lt;meta name=\"apple-mobile-web-app-capable\" content=\"yes\" /&gt; &lt;!-- ios7.0版本以后，safari上已看不到效果 --&gt;</code></pre>\n\n<p>将网站添加到主屏幕快速启动方式，仅针对ios的safari顶端状态条的样式</p>\n\n<pre>\n<code>&lt;meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black\" /&gt; &lt;!-- 可选default、black、black-translucent --&gt;</code></pre>\n\n<h3>viewport模板</h3>\n\n<p>viewport模板&mdash;&mdash;通用</p>\n\n<pre>\n<code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;meta content=\"width=device-width,initial-scale=1.0,maximum-scale=1.0,user-scalable=no\" name=\"viewport\"&gt;\n    &lt;meta content=\"yes\" name=\"apple-mobile-web-app-capable\"&gt;\n    &lt;meta content=\"black\" name=\"apple-mobile-web-app-status-bar-style\"&gt;\n    &lt;meta content=\"telephone=no\" name=\"format-detection\"&gt;\n    &lt;meta content=\"email=no\" name=\"format-detection\"&gt;\n    &lt;title&gt;标题&lt;/title&gt;\n    &lt;link rel=\"stylesheet\" href=\"index.css\"&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        这里开始内容\n    &lt;/body&gt;\n&lt;/html&gt;</code></pre>\n\n<p>&nbsp;</p>\n\n<p><span style=\"color:rgb(0, 0, 0)\">viewport模板 -&nbsp;target-densitydpi=device-dpi，android 2.3.5以下版本不支持</span></p>\n\n<pre>\n<code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=750, user-scalable=no, target-densitydpi=device-dpi\"&gt;&lt;!-- width取值与页面定义的宽度一致 --&gt;\n    &lt;meta content=\"yes\" name=\"apple-mobile-web-app-capable\"&gt;\n    &lt;meta content=\"black\" name=\"apple-mobile-web-app-status-bar-style\"&gt;\n    &lt;meta content=\"telephone=no\" name=\"format-detection\"&gt;\n    &lt;meta content=\"email=no\" name=\"format-detection\"&gt;\n    &lt;title&gt;标题&lt;/title&gt;\n    &lt;link rel=\"stylesheet\" href=\"index.css\"&gt;\n&lt;/head&gt;\n    &lt;body&gt; 这里开始内容 &lt;/body&gt;\n&lt;/html&gt;</code></pre>\n\n<p>&nbsp;</p>\n\n<h2><span style=\"color:rgb(255, 0, 0)\">常见问题</span></h2>\n\n<h3>移动端如何定义字体font-family</h3>\n\n<p>中文字体使用系统默认即可，英文用Helvetica</p>\n\n<pre>\n<code>/* 移动端定义字体的代码 */ body{font-family:Helvetica;}</code></pre>\n\n<p>参考《<a href=\"http://www.cnblogs.com/PeunZhang/p/3592096.html\" target=\"_blank\">移动端使用字体的思考</a>》</p>\n\n<h3>移动端字体单位font-size选择px还是rem</h3>\n\n<p>对于只需要适配少部分手机设备，且分辨率对页面影响不大的，使用px即可</p>\n\n<p>对于需要适配各种移动设备，使用rem，例如只需要适配iPhone和iPad等分辨率差别比较挺大的设备</p>\n\n<p>rem配置参考：</p>\n\n<pre>\n<code>html{font-size:10px}\n @media screen and (min-width:321px) and (max-width:375px){html{font-size:11px}}\n @media screen and (min-width:376px) and (max-width:414px){html{font-size:12px}}\n @media screen and (min-width:415px) and (max-width:639px){html{font-size:15px}}\n @media screen and (min-width:640px) and (max-width:719px){html{font-size:20px}}\n @media screen and (min-width:720px) and (max-width:749px){html{font-size:22.5px}}\n @media screen and (min-width:750px) and (max-width:799px){html{font-size:23.5px}}\n @media screen and (min-width:800px){html{font-size:25px}}</code></pre>\n\n<p><span style=\"color:rgb(0, 0, 0)\">体验demo：</span><a href=\"http://1.peunzhang.sinaapp.com/demo/rem/index.html\" target=\"_blank\">http://1.peunzhang.sinaapp.com/demo/rem/index.html</a></p>\n\n<h3>移动端touch事件(区分webkit 和 winphone)</h3>\n\n<p>当用户手指放在移动设备在屏幕上滑动会触发的touch事件</p>\n\n<p><strong>以下支持webkit</strong></p>\n\n<ul>\n\t<li>\n\t<p>touchstart&mdash;&mdash;当手指触碰屏幕时候发生。不管当前有多少只手指</p>\n\t</li>\n\t<li>\n\t<p>touchmove&mdash;&mdash;当手指在屏幕上滑动时连续触发。通常我们再滑屏页面，会调用event的preventDefault()可以阻止默认情况的发生：阻止页面滚动</p>\n\t</li>\n\t<li>\n\t<p>touchend&mdash;&mdash;当手指离开屏幕时触发</p>\n\t</li>\n\t<li>\n\t<p>touchcancel&mdash;&mdash;系统停止跟踪触摸时候会触发。例如在触摸过程中突然页面alert()一个提示框，此时会触发该事件，这个事件比较少用</p>\n\t</li>\n</ul>\n\n<p>TouchEvent</p>\n\n<ul>\n\t<li>\n\t<p>touches：屏幕上所有手指的信息</p>\n\t</li>\n\t<li>\n\t<p>targetTouches：手指在目标区域的手指信息</p>\n\t</li>\n\t<li>\n\t<p>changedTouches：最近一次触发该事件的手指信息</p>\n\t</li>\n\t<li>\n\t<p>touchend时，touches与targetTouches信息会被删除，changedTouches保存的最后一次的信息，最好用于计算手指信息</p>\n\t</li>\n</ul>\n\n<p><span style=\"color:rgb(255, 0, 0)\"><span style=\"color:rgb(0, 0, 0)\">参数信息(changedTouches[0])</span></span></p>\n\n<ul>\n\t<li>\n\t<p>clientX、clientY在显示区的坐标</p>\n\t</li>\n\t<li>\n\t<p>target：当前元素</p>\n\t</li>\n</ul>\n\n<p>参考：<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent\" target=\"_blank\">https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent</a></p>\n\n<p><strong>以下支持winphone 8</strong></p>\n\n<ul>\n\t<li>\n\t<p>MSPointerDown&mdash;&mdash;当手指触碰屏幕时候发生。不管当前有多少只手指</p>\n\t</li>\n\t<li>\n\t<p>MSPointerMove&mdash;&mdash;当手指在屏幕上滑动时连续触发。通常我们再滑屏页面，会调用css的html{-ms-touch-action: none;}可以阻止默认情况的发生：阻止页面滚动</p>\n\t</li>\n\t<li>\n\t<p>MSPointerUp&mdash;&mdash;当手指离开屏幕时触发</p>\n\t</li>\n</ul>\n\n<h3>移动端click屏幕产生200-300 ms的延迟响应</h3>\n\n<p>移动设备上的web网页是有300ms延迟的，玩玩会造成按钮点击延迟甚至是点击失效。</p>\n\n<p>以下是历史原因，来源一个公司内一个同事的分享：</p>\n\n<p>2007年苹果发布首款iphone上IOS系统搭载的safari为了将适用于PC端上大屏幕的网页能比较好的展示在手机端上，使用了双击缩放(double tap to zoom)的方案，比如你在手机上用浏览器打开一个PC上的网页，你可能在看到页面内容虽然可以撑满整个屏幕，但是字体、图片都很小看不清，此时可以快速双击屏幕上的某一部分，你就能看清该部分放大后的内容，再次双击后能回到原始状态。</p>\n\n<p>双击缩放是指用手指在屏幕上快速点击两次，iOS 自带的 Safari 浏览器会将网页缩放至原始比例。</p>\n\n<p>原因就出在浏览器需要如何判断快速点击上，当用户在屏幕上单击某一个元素时候，例如跳转链接&lt;a href=&quot;#&quot;&gt;&lt;/a&gt;，此处浏览器会先捕获该次单击，但浏览器不能决定用户是单纯要点击链接还是要双击该部分区域进行缩放操作，所以，捕获第一次单击后，浏览器会先Hold一段时间t，如果在t时间区间里用户未进行下一次点击，则浏览器会做单击跳转链接的处理，如果t时间里用户进行了第二次单击操作，则浏览器会禁止跳转，转而进行对该部分区域页面的缩放操作。那么这个时间区间t有多少呢？在IOS safari下，大概为300毫秒。这就是延迟的由来。造成的后果用户纯粹单击页面，页面需要过一段时间才响应，给用户慢体验感觉，对于web开发者来说是，页面js捕获click事件的回调函数处理，需要300ms后才生效，也就间接导致影响其他业务逻辑的处理。</p>\n\n<p>解决方案：</p>\n\n<ul>\n\t<li>\n\t<p>fastclick可以解决在手机上点击事件的300ms延迟</p>\n\t</li>\n\t<li>\n\t<p>zepto的touch模块，tap事件也是为了解决在click的延迟问题</p>\n\t</li>\n</ul>\n\n<h3>触摸事件的响应顺序</h3>\n\n<pre>\n<code>1、ontouchstart  2、ontouchmove  3、ontouchend  4、onclick</code></pre>\n\n<p>解决300ms延迟的问题，也可以通过绑定ontouchstart事件，加快对事件的响应</p>\n\n<h3>什么是Retina 显示屏，带来了什么问题</h3>\n\n<p>retina：一种具备超高像素密度的液晶屏，同样大小的屏幕上显示的像素点由1个变为多个，如在同样带下的屏幕上，苹果设备的retina显示屏中，像素点1个变为4个</p>\n\n<p>在高清显示屏中的位图被放大，图片会变得模糊，<span style=\"color:rgb(255, 0, 0)\">因此移动端的视觉稿通常会设计为传统PC的2倍</span></p>\n\n<p>那么，前端的应对方案是：</p>\n\n<p>设计稿切出来的图片长宽保证为偶数，并使用backgroud-size把图片缩小为原来的1/2</p>\n\n<pre>\n<code>//例如图片宽高为：200px*200px，那么写法如下 .css{width:100px;height:100px;background-size:100px 100px;}</code></pre>\n\n<p>其它元素的取值为原来的1/2，例如视觉稿40px的字体，使用样式的写法为20px</p>\n\n<pre>\n<code>.css{font-size:20px}</code></pre>\n\n<p>参考《<a href=\"http://www.cnblogs.com/PeunZhang/p/3441110.html\" target=\"_blank\">高清显示屏原理及设计方案</a>》</p>\n\n<h3>ios系统中元素被触摸时产生的半透明灰色遮罩怎么去掉</h3>\n\n<p>ios用户点击一个链接，会出现一个半透明灰色遮罩,&nbsp;如果想要禁用，可设置-webkit-tap-highlight-color的alpha值为0，也就是属性值的最后一位设置为0就可以去除半透明灰色遮罩</p>\n\n<pre>\n<code>a,button,input,textarea{-webkit-tap-highlight-color: rgba(0,0,0,0;)}</code></pre>\n\n<h3>部分android系统中元素被点击时产生的边框怎么去掉</h3>\n\n<p>android用户点击一个链接，会出现一个边框或者半透明灰色遮罩,&nbsp;不同生产商定义出来额效果不一样，可设置-webkit-tap-highlight-color的alpha值为0去除部分机器自带的效果</p>\n\n<pre>\n<code>a,button,input,textarea{ -webkit-tap-highlight-color: rgba(0,0,0,0;) -webkit-user-modify:read-write-plaintext-only;  }</code></pre>\n\n<p>-webkit-user-modify有个副作用，就是输入法不再能够输入多个字符</p>\n\n<p>另外，有些机型去除不了，如小米2</p>\n\n<p>对于按钮类还有个办法，不使用a或者input标签，直接用div标签</p>\n\n<p>参考《<a href=\"http://www.cnblogs.com/PeunZhang/archive/2013/02/28/2907708.html\" target=\"_blank\">如何去除android上a标签产生的边框</a>》</p>\n\n<h3>winphone系统a、input标签被点击时产生的半透明灰色背景怎么去掉</h3>\n\n<pre>\n<code>&lt;meta name=\"msapplication-tap-highlight\" content=\"no\"&gt;</code></pre>\n\n<h3>webkit表单元素的默认外观怎么重置</h3>\n\n<pre>\n<code>.css{-webkit-appearance:none;}</code></pre>\n\n<h3>webkit表单输入框placeholder的颜色值能改变么</h3>\n\n<pre>\n<code>input::-webkit-input-placeholder{color:#AAAAAA;} input:focus::-webkit-input-placeholder{color:#EEEEEE;}</code></pre>\n\n<h3>webkit表单输入框placeholder的文字能换行么</h3>\n\n<p>ios可以，android不行~</p>\n\n<p>在textarea标签下都可以换行~</p>\n\n<h3>IE10（winphone8）表单元素默认外观如何重置</h3>\n\n<p><strong>禁用&nbsp;select&nbsp;</strong><strong>默认下拉箭头</strong></p>\n\n<p>::-ms-expand&nbsp;适用于表单选择控件下拉箭头的修改，有多个属性值，设置它隐藏&nbsp;(display:none)&nbsp;并使用背景图片来修饰可得到我们想要的效果。</p>\n\n<pre>\n<code>select::-ms-expand { display: none; }</code></pre>\n\n<p><strong>禁用&nbsp;radio&nbsp;</strong><strong>和&nbsp;checkbox&nbsp;</strong><strong>默认样式</strong></p>\n\n<p>::-ms-check&nbsp;适用于表单复选框或单选按钮默认图标的修改，同样有多个属性值，设置它隐藏&nbsp;(display:none)&nbsp;并使用背景图片来修饰可得到我们想要的效果。</p>\n\n<pre>\n<code>input[type=radio]::-ms-check,input[type=checkbox]::-ms-check{ display: none; }</code></pre>\n\n<p><strong>禁用PC</strong><strong>端表单输入框默认清除按钮</strong></p>\n\n<p>当表单文本输入框输入内容后会显示文本清除按钮，::-ms-clear&nbsp;适用于该清除按钮的修改，同样设置使它隐藏&nbsp;(display:none)&nbsp;并使用背景图片来修饰可得到我们想要的效果。</p>\n\n<pre>\n<code>input[type=text]::-ms-clear,input[type=tel]::-ms-clear,input[type=number]::-ms-clear{ display: none; }</code></pre>\n\n<h3>禁止ios 长按时不触发系统的菜单，禁止ios&amp;android长按时下载图片</h3>\n\n<pre>\n<code>.css{-webkit-touch-callout: none}</code></pre>\n\n<h3>禁止ios和android用户选中文字</h3>\n\n<pre>\n<code>.css{-webkit-user-select:none}</code></pre>\n\n<p>参考《<a href=\"http://www.cnblogs.com/PeunZhang/p/3522603.html\" target=\"_blank\">如何改变表单元素的外观(for Webkit and IE10)</a>》</p>\n\n<h3>打电话发短信写邮件怎么实现</h3>\n\n<p>打电话</p>\n\n<pre>\n<code>&lt;a href=\"tel:0755-10086\"&gt;打电话给:0755-10086&lt;/a&gt;</code></pre>\n\n<p>发短信，winphone系统无效</p>\n\n<pre>\n<code>&lt;a href=\"sms:10086\"&gt;发短信给: 10086&lt;/a&gt;</code></pre>\n\n<p>写邮件，可参考《<a href=\"http://www.cnblogs.com/PeunZhang/p/4952783.html\" target=\"_blank\">移动web页面给用户发送邮件的方法</a>》</p>\n\n<pre>\n<code>&lt;a href=\"mailto:peun@foxmail.com\"&gt;peun@foxmail.com&lt;/a&gt;</code></pre>\n\n<h3>模拟按钮hover效果</h3>\n\n<p>移动端触摸按钮的效果，可明示用户有些事情正要发生，是一个比较好体验，但是移动设备中并没有鼠标指针，使用css的hover并不能满足我们的需求，还好国外有个激活css的active效果，代码如下，</p>\n\n<pre>\n<code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;meta content=\"width=device-width,initial-scale=1.0,maximum-scale=1.0,user-scalable=no\" name=\"viewport\"&gt;\n    &lt;meta content=\"yes\" name=\"apple-mobile-web-app-capable\"&gt;\n    &lt;meta content=\"black\" name=\"apple-mobile-web-app-status-bar-style\"&gt;\n    &lt;meta content=\"telephone=no\" name=\"format-detection\"&gt;\n    &lt;meta content=\"email=no\" name=\"format-detection\"&gt;\n    &lt;style type=\"text/css\"&gt;\n        a{-webkit-tap-highlight-color: rgba(0,0,0,0);}\n        .btn-blue{display:block;height:42px;line-height:42px;text-align:center;border-radius:4px;font-size:18px;color:#FFFFFF;background-color: #4185F3;}\n        .btn-blue:active{background-color: #357AE8;}\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=\"btn-blue\"&gt;按钮&lt;/div&gt;\n    &lt;script type=\"text/javascript\"&gt;\n        document.addEventListener(\"touchstart\", function(){}, true)\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n\n<p>兼容性ios5+、部分android 4+、winphone 8</p>\n\n<p>要做到全兼容的办法，可通过绑定ontouchstart和ontouchend来控制按钮的类名</p>\n\n<pre>\n<code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;meta content=\"width=device-width,initial-scale=1.0,maximum-scale=1.0,user-scalable=no\" name=\"viewport\"&gt;\n    &lt;meta content=\"yes\" name=\"apple-mobile-web-app-capable\"&gt;\n    &lt;meta content=\"black\" name=\"apple-mobile-web-app-status-bar-style\"&gt;\n    &lt;meta content=\"telephone=no\" name=\"format-detection\"&gt;\n    &lt;meta content=\"email=no\" name=\"format-detection\"&gt;\n    &lt;style type=\"text/css\"&gt;\n        a{-webkit-tap-highlight-color: rgba(0,0,0,0);}\n        .btn-blue{display:block;height:42px;line-height:42px;text-align:center;border-radius:4px;font-size:18px;color:#FFFFFF;background-color: #4185F3;}\n        .btn-blue-on{background-color: #357AE8;}\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=\"btn-blue\"&gt;按钮&lt;/div&gt;\n    &lt;script type=\"text/javascript\"&gt;\n        var btnBlue = document.querySelector(\".btn-blue\");\n        btnBlue.ontouchstart = function(){this.className = \"btn-blue btn-blue-on\" } btnBlue.ontouchend = function(){this.className = \"btn-blue\" }\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n\n<h3>屏幕旋转的事件和样式</h3>\n\n<h4>事件</h4>\n\n<p>window.orientation，取值：正负90表示横屏模式、0和180表现为竖屏模式；</p>\n\n<pre>\n<code>window.onorientationchange = function(){     switch(window.orientation){         case -90:         case 90:         alert(\"横屏:\" + window.orientation);         case 0:         case 180:         alert(\"竖屏:\" + window.orientation);         break;     } }</code></pre>\n\n<h4>样式</h4>\n\n<pre>\n<code>//竖屏时使用的样式 @media all and (orientation:portrait) { .css{} } //横屏时使用的样式 @media all and (orientation:landscape) { .css{} }</code></pre>\n\n<h3>audio元素和video元素在ios和andriod中无法自动播放</h3>\n\n<p>应对方案：触屏即播</p>\n\n<pre>\n<code>$('html').one('touchstart',function(){audio.play() })</code></pre>\n\n<p>可参考《<a href=\"http://www.cnblogs.com/PeunZhang/archive/2013/02/05/2893093.html\" target=\"_blank\">无法自动播放的audio元素</a>》</p>\n\n<h3>摇一摇功能</h3>\n\n<p>HTML5 deviceMotion：封装了运动传感器数据的事件，可以获取手机运动状态下的运动加速度等数据。</p>\n\n<pre>\n<code>var SHAKE_THRESHOLD = 2000;  \nvar last_update = 0;  \nvar x = y = z = last_x = last_y = last_z = 0;  \nfunction init() {  \n    if (window.DeviceMotionEvent) {  \n       window.addEventListener('devicemotion', deviceMotionHandler, false);  \n    } else {  \n        alert('not support mobile event');  \n    }  \n}  \nfunction deviceMotionHandler(eventData) {  \n    var acceleration = eventData.accelerationIncludingGravity;  \n    var curTime = new Date().getTime();  \n    if ((curTime - last_update) &gt; 100) {  \n        var diffTime = curTime - last_update;  \n        last_update = curTime;  \n        x = acceleration.x;  \n        y = acceleration.y;  \n        z = acceleration.z;  \n        var speed = Math.abs(x + y + z - last_x - last_y - last_z) / diffTime * 10000;  \n        if (speed &gt; SHAKE_THRESHOLD) {  \n            //alert(\"摇动了\"+SHAKE_THRESHOLD);\n        }  \n        last_x = x;  \n        last_y = y;  \n        last_z = z;  \n    }  \n}</code></pre>\n\n<p>&nbsp;</p>\n\n<h3>手机拍照和上传图片</h3>\n\n<p>&lt;input type=&quot;file&quot;&gt;的accept 属性</p>\n\n<pre>\n<code>&lt;!-- 选择照片 --&gt; &lt;input type=file accept=\"image/*\"&gt; &lt;!-- 选择视频 --&gt; &lt;input type=file accept=\"video/*\"&gt;</code></pre>\n\n<p>使用总结：</p>\n\n<ul>\n\t<li>\n\t<p>ios 有拍照、录像、选取本地图片功能</p>\n\t</li>\n\t<li>\n\t<p>部分android只有选取本地图片功能</p>\n\t</li>\n\t<li>\n\t<p>winphone不支持</p>\n\t</li>\n\t<li>\n\t<p>input控件默认外观丑陋</p>\n\t</li>\n</ul>\n\n<h3>微信浏览器用户调整字体大小后页面矬了，怎么阻止用户调整</h3>\n\n<p>原因</p>\n\n<ul>\n\t<li>\n\t<p>android侧是复写了layoutinflater 对textview做了统一处理</p>\n\t</li>\n\t<li>\n\t<p>ios侧是修改了body.style.webkitTextSizeAdjust值</p>\n\t</li>\n</ul>\n\n<p>解决方案：</p>\n\n<ul>\n\t<li>\n\t<p>android使用以下代码，该接口只在微信浏览器下有效(感谢jationhuang同学提供)</p>\n\t</li>\n</ul>\n\n<p><img alt=\"复制代码\" src=\"http://static.oschina.net/uploads/img/201602/22125528_gb2w.gif\" /></p>\n\n<pre>\n<code>/**  * 页面加入这段代码可使Android机器页面不再受到用户字体缩放强制改变大小  * 但是会有一个1秒左右的延迟，期间可以考虑通过loading展示  * 仅供参考  */\n(function(){     \n    if (typeof(WeixinJSBridge) == \"undefined\") {                                              document.addEventListener(\"WeixinJSBridgeReady\", function (e) {\n            setTimeout(function(){\n              WeixinJSBridge.invoke('setFontSizeCallback',{\"fontSize\":0}, function(res) {                       alert(JSON.stringify(res));\n              });\n            },0);  \n        });\n    } else {\n        setTimeout(function(){\n           WeixinJSBridge.invoke('setFontSizeCallback',{\"fontSize\":0}, function(res) {                         alert(JSON.stringify(res));\n           });\n         },0);\n      }\n   })();</code></pre>\n\n<p>&nbsp;</p>\n\n<ul>\n\t<li>\n\t<p>ios使用-webkit-text-size-adjust禁止调整字体大小</p>\n\t</li>\n</ul>\n\n<pre>\n<code>body{-webkit-text-size-adjust: 100%!important;}</code></pre>\n\n<p>最好的解决方案：</p>\n\n<ul>\n\t<li>\n\t<p>整个页面用rem或者百分比布局</p>\n\t</li>\n</ul>\n\n<h3>消除transition闪屏</h3>\n\n<p>网络都是这么写的，但我并没有测试出来</p>\n\n<pre>\n<code>.css{ /*设置内嵌的元素在 3D 空间如何呈现：保留 3D*/ -webkit-transform-style: preserve-3d; /*（设置进行转换的元素的背面在面对用户时是否可见：隐藏）*/ -webkit-backface-visibility: hidden; }</code></pre>\n\n<h3>开启硬件加速</h3>\n\n<ul>\n\t<li>\n\t<p>解决页面闪白</p>\n\t</li>\n\t<li>\n\t<p>保证动画流畅</p>\n\t</li>\n</ul>\n\n<pre>\n<code>.css {    -webkit-transform: translate3d(0, 0, 0);    -moz-transform: translate3d(0, 0, 0);    -ms-transform: translate3d(0, 0, 0);    transform: translate3d(0, 0, 0); }</code></pre>\n\n<p>参考《<a href=\"http://www.cnblogs.com/PeunZhang/p/3510083.html\" target=\"_blank\">用CSS开启硬件加速来提高网站性能</a>》</p>\n\n<h3>取消input在ios下，输入的时候英文首字母的默认大写</h3>\n\n<pre>\n<code>&lt;input autocapitalize=\"off\" autocorrect=\"off\" /&gt;</code></pre>\n\n<h3>android 上去掉语音输入按钮</h3>\n\n<pre>\n<code>input::-webkit-input-speech-button {display: none}</code></pre>\n\n<h3>android 2.3 bug</h3>\n\n<ul>\n\t<li>\n\t<p>@-webkit-keyframes 需要以0%开始100%结束，0%的百分号不能去掉</p>\n\t</li>\n\t<li>\n\t<p><span style=\"color:rgb(255, 0, 0)\">after和before伪类无法使用动画animation</span></p>\n\t</li>\n\t<li>\n\t<p>border-radius不支持%单位</p>\n\t</li>\n\t<li>\n\t<p>translate百分比的写法和scale在一起会导致失效，例如-webkit-transform: translate(-50%,-50%) scale(-0.5, 1)</p>\n\t</li>\n</ul>\n\n<h3>android 4.x bug</h3>\n\n<ul>\n\t<li>\n\t<p>三星 Galaxy S4中自带浏览器不支持border-radius缩写</p>\n\t</li>\n\t<li>\n\t<p>同时设置border-radius和背景色的时候，背景色会溢出到圆角以外部分</p>\n\t</li>\n\t<li>\n\t<p>部分手机(如三星)，a链接支持鼠标:visited事件，也就是说链接访问后文字变为紫色</p>\n\t</li>\n\t<li>\n\t<p><span style=\"color:rgb(255, 0, 0)\">android无法同时播放多音频audio</span></p>\n\t</li>\n</ul>\n\n<p>参考《<a href=\"https://github.com/yisibl/blog/issues/2\" target=\"_blank\">border-radius 移动之伤</a>》</p>\n\n<h3>设计高性能CSS3动画的几个要素</h3>\n\n<ul>\n\t<li>\n\t<p>尽可能地使用合成属性transform和opacity来设计CSS3动画，不使用position的left和top来定位</p>\n\t</li>\n\t<li>\n\t<p>利用translate3D开启GPU加速</p>\n\t</li>\n</ul>\n\n<p>参考《<a href=\"http://www.html5rocks.com/en/tutorials/speed/high-performance-animations/\" target=\"_blank\">High Performance Animations</a>》</p>\n\n<h3>fixed bug</h3>\n\n<ul>\n\t<li>\n\t<p>ios下fixed元素容易定位出错，软键盘弹出时，影响fixed元素定位</p>\n\t</li>\n\t<li>\n\t<p>android下fixed表现要比iOS更好，软键盘弹出时，不会影响fixed元素定位</p>\n\t</li>\n\t<li>\n\t<p>ios4下不支持position:fixed</p>\n\t</li>\n</ul>\n\n<p>解决方案</p>\n\n<ul>\n\t<li>\n\t<p>可用isroll.js，暂无完美方案</p>\n\t</li>\n</ul>\n\n<p>参考</p>\n\n<p>《<a href=\"https://github.com/maxzhang/maxzhang.github.com/issues/2\" target=\"_blank\">移动端web页面使用position:fixed问题总结</a>》</p>\n\n<p>《<a href=\"http://www.cnblogs.com/PeunZhang/archive/2013/06/14/3117589.html\" target=\"_blank\">使用iScroll.js解决ios4下不支持position:fixed的问题</a>》</p>\n\n<h3>&nbsp;如何阻止windows Phone的默认触摸事件</h3>\n\n<p>winphone下默认触摸事件事件使用e.preventDefault是无效的</p>\n\n<p>目前解决方法是使用样式来禁用</p>\n\n<pre>\n<code>html{-ms-touch-action: none;}/* 禁止winphone默认触摸事件 */</code></pre>\n\n<p>参考</p>\n\n<p>《<a href=\"http://stackoverflow.com/questions/13396297/windows-phone-8-touch-support\" target=\"_blank\">Windows phone 8 touch support</a>》</p>\n\n<h3>播放视频不全屏</h3>\n\n<pre>\n<code>&lt;!-- 1.目前只有ios7+、winphone8+支持自动播放 2.支持Airplay的设备（如：音箱、Apple TV)播放 x-webkit-airplay=\"true\"  3.播放视频不全屏，ios7+、winphone8+支持，部分android4+支持（含华为、小米、魅族） webkit-playsinline=\"true\"  --&gt; &lt;video x-webkit-airplay=\"true\" webkit-playsinline=\"true\" preload=\"auto\" autoplay src=\"http://\"&gt;&lt;/video&gt;</code></pre>\n\n<p><span style=\"color:rgb(0, 0, 0)\">体验demo：</span><span style=\"color:rgb(153, 204, 0)\"><a href=\"http://1.peunzhang.sinaapp.com/demo/video/index.html\" target=\"_blank\">http://1.peunzhang.sinaapp.com/demo/video/index.html</a></span></p>\n\n<h2><span style=\"color:rgb(153, 204, 0)\">常用的移动端框架</span></h2>\n\n<h3>zepto.js</h3>\n\n<p>语法与jquery几乎一样，会jquery基本会zepto~</p>\n\n<p>最新版本已经更新到1.16</p>\n\n<p>官网：<a href=\"http://zeptojs.com/\" target=\"_blank\">http://zeptojs.com/</a></p>\n\n<p>中文(非官网)：<a href=\"http://www.css88.com/doc/zeptojs_api/\" target=\"_blank\">http://www.css88.com/doc/zeptojs_api/</a></p>\n\n<p>常使用的扩展模块：</p>\n\n<p>浏览器检测：<a href=\"https://github.com/madrobby/zepto/blob/master/src/detect.js\" target=\"_blank\">https://github.com/madrobby/zepto/blob/master/src/detect.js</a></p>\n\n<p>tap事件：<a href=\"https://github.com/madrobby/zepto/blob/master/src/touch.js\" target=\"_blank\">https://github.com/madrobby/zepto/blob/master/src/touch.js</a></p>\n\n<h3>iscroll.js</h3>\n\n<p>解决页面不支持弹性滚动，不支持fixed引起的问题~</p>\n\n<p>实现下拉刷新，滑屏，缩放等功能~</p>\n\n<p>最新版本已经更新到5.0</p>\n\n<p>官网：<a href=\"http://cubiq.org/iscroll-5\" target=\"_blank\">http://cubiq.org/iscroll-5</a></p>\n\n<h3>underscore.js</h3>\n\n<p>笔者没用过，不过听说好用，推荐给大家~</p>\n\n<p>该库提供了一整套函数式编程的实用功能，但是没有扩展任何JavaScript内置对象。</p>\n\n<p>最新版本已经更新到1.8.2</p>\n\n<p>官网：<a href=\"http://underscorejs.org/\" target=\"_blank\">http://underscorejs.org/</a></p>\n\n<h3>滑屏框架</h3>\n\n<p>适合上下滑屏、左右滑屏等滑屏切换页面的效果</p>\n\n<p><a href=\"https://github.com/peunzhang/slip.js\" target=\"_blank\">slip.js</a></p>\n\n<p><a href=\"https://github.com/peunzhang/iSlider\" target=\"_blank\">iSlider.js</a></p>\n\n<p><a href=\"https://github.com/peunzhang/fullpage\" target=\"_blank\">fullpage.js</a></p>\n\n<p><a href=\"http://www.swiper.com.cn/\" target=\"_blank\">swiper.js</a></p>\n\n<h3>flex布局</h3>\n\n<p><span style=\"color:rgb(255, 0, 0)\">使用注意：</span></p>\n\n<ul>\n\t<li>\n\t<p><span style=\"color:rgb(255, 0, 0)\">flex下的子元素必须为块级元素，非块级元素在android2.3机器下flex失效</span></p>\n\t</li>\n\t<li>\n\t<p><span style=\"color:rgb(255, 0, 0)\">flex下的子元素宽度和高度不能超过父元素，否则会导致子元素定位错误，例如水平垂直居中</span></p>\n\t</li>\n</ul>\n\n<h3>FastClick</h3>\n\n<p>消除在移动浏览器上触发click事件与一个物理Tap(敲击)之间的300延迟</p>\n\n<p>参考《<a href=\"https://github.com/ftlabs/fastclick\" target=\"_blank\">FastClick</a>》</p>\n\n<h3>Sea.js&nbsp;</h3>\n\n<p>提供简单、极致的模块化开发体验</p>\n\n<ul>\n\t<li>\n\t<p><strong>简单友好的模块定义规范</strong>：Sea.js 遵循&nbsp;<a href=\"https://github.com/cmdjs/specification/blob/master/draft/module.md\" target=\"_blank\">CMD</a>&nbsp;规范，可以像&nbsp;<a href=\"http://nodejs.org/\" target=\"_blank\">Node.js</a>&nbsp;一般书写模块代码。</p>\n\t</li>\n\t<li>\n\t<p><strong>自然直观的代码组织方式</strong>：依赖的自动加载、配置的简洁清晰，可以让我们更多地享受编码的乐趣。</p>\n\t</li>\n</ul>\n\n<p>地址：<a href=\"http://seajs.org/docs/\" target=\"_blank\">http://seajs.org/docs/</a></p>\n\n<p>&nbsp;</p>\n","slug":"移动端资源整理","published":1,"updated":"2017-04-15T03:28:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5naxw5r002bfcxeyftgezyc","content":"<h2><span style=\"background-color:rgb(238, 236, 225); color:rgb(255, 0, 0)\"><strong>meta基础知识</strong></span></h2>\n\n<h3>H5页面窗口自动调整到设备宽度，并禁止用户缩放页面</h3>\n\n<pre>\n<code>&lt;meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no\" /&gt;</code></pre>\n<a id=\"more\"></a>\n<h3>忽略将页面中的数字识别为电话号码</h3>\n\n<pre>\n<code>&lt;meta name=\"format-detection\" content=\"telephone=no\" /&gt;</code></pre>\n\n<h3>忽略Android平台中对邮箱地址的识别</h3>\n\n<pre>\n<code>&lt;meta name=\"format-detection\" content=\"email=no\" /&gt;</code></pre>\n\n<h3>当网站添加到主屏幕快速启动方式，可隐藏地址栏，仅针对ios的safari</h3>\n\n<pre>\n<code>&lt;meta name=\"apple-mobile-web-app-capable\" content=\"yes\" /&gt; &lt;!-- ios7.0版本以后，safari上已看不到效果 --&gt;</code></pre>\n\n<p>将网站添加到主屏幕快速启动方式，仅针对ios的safari顶端状态条的样式</p>\n\n<pre>\n<code>&lt;meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black\" /&gt; &lt;!-- 可选default、black、black-translucent --&gt;</code></pre>\n\n<h3>viewport模板</h3>\n\n<p>viewport模板&mdash;&mdash;通用</p>\n\n<pre>\n<code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;meta content=\"width=device-width,initial-scale=1.0,maximum-scale=1.0,user-scalable=no\" name=\"viewport\"&gt;\n    &lt;meta content=\"yes\" name=\"apple-mobile-web-app-capable\"&gt;\n    &lt;meta content=\"black\" name=\"apple-mobile-web-app-status-bar-style\"&gt;\n    &lt;meta content=\"telephone=no\" name=\"format-detection\"&gt;\n    &lt;meta content=\"email=no\" name=\"format-detection\"&gt;\n    &lt;title&gt;标题&lt;/title&gt;\n    &lt;link rel=\"stylesheet\" href=\"index.css\"&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        这里开始内容\n    &lt;/body&gt;\n&lt;/html&gt;</code></pre>\n\n<p>&nbsp;</p>\n\n<p><span style=\"color:rgb(0, 0, 0)\">viewport模板 -&nbsp;target-densitydpi=device-dpi，android 2.3.5以下版本不支持</span></p>\n\n<pre>\n<code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=750, user-scalable=no, target-densitydpi=device-dpi\"&gt;&lt;!-- width取值与页面定义的宽度一致 --&gt;\n    &lt;meta content=\"yes\" name=\"apple-mobile-web-app-capable\"&gt;\n    &lt;meta content=\"black\" name=\"apple-mobile-web-app-status-bar-style\"&gt;\n    &lt;meta content=\"telephone=no\" name=\"format-detection\"&gt;\n    &lt;meta content=\"email=no\" name=\"format-detection\"&gt;\n    &lt;title&gt;标题&lt;/title&gt;\n    &lt;link rel=\"stylesheet\" href=\"index.css\"&gt;\n&lt;/head&gt;\n    &lt;body&gt; 这里开始内容 &lt;/body&gt;\n&lt;/html&gt;</code></pre>\n\n<p>&nbsp;</p>\n\n<h2><span style=\"color:rgb(255, 0, 0)\">常见问题</span></h2>\n\n<h3>移动端如何定义字体font-family</h3>\n\n<p>中文字体使用系统默认即可，英文用Helvetica</p>\n\n<pre>\n<code>/* 移动端定义字体的代码 */ body{font-family:Helvetica;}</code></pre>\n\n<p>参考《<a href=\"http://www.cnblogs.com/PeunZhang/p/3592096.html\" target=\"_blank\">移动端使用字体的思考</a>》</p>\n\n<h3>移动端字体单位font-size选择px还是rem</h3>\n\n<p>对于只需要适配少部分手机设备，且分辨率对页面影响不大的，使用px即可</p>\n\n<p>对于需要适配各种移动设备，使用rem，例如只需要适配iPhone和iPad等分辨率差别比较挺大的设备</p>\n\n<p>rem配置参考：</p>\n\n<pre>\n<code>html{font-size:10px}\n @media screen and (min-width:321px) and (max-width:375px){html{font-size:11px}}\n @media screen and (min-width:376px) and (max-width:414px){html{font-size:12px}}\n @media screen and (min-width:415px) and (max-width:639px){html{font-size:15px}}\n @media screen and (min-width:640px) and (max-width:719px){html{font-size:20px}}\n @media screen and (min-width:720px) and (max-width:749px){html{font-size:22.5px}}\n @media screen and (min-width:750px) and (max-width:799px){html{font-size:23.5px}}\n @media screen and (min-width:800px){html{font-size:25px}}</code></pre>\n\n<p><span style=\"color:rgb(0, 0, 0)\">体验demo：</span><a href=\"http://1.peunzhang.sinaapp.com/demo/rem/index.html\" target=\"_blank\">http://1.peunzhang.sinaapp.com/demo/rem/index.html</a></p>\n\n<h3>移动端touch事件(区分webkit 和 winphone)</h3>\n\n<p>当用户手指放在移动设备在屏幕上滑动会触发的touch事件</p>\n\n<p><strong>以下支持webkit</strong></p>\n\n<ul><br>    <li><br>    <p>touchstart&mdash;&mdash;当手指触碰屏幕时候发生。不管当前有多少只手指</p><br>    </li><br>    <li><br>    <p>touchmove&mdash;&mdash;当手指在屏幕上滑动时连续触发。通常我们再滑屏页面，会调用event的preventDefault()可以阻止默认情况的发生：阻止页面滚动</p><br>    </li><br>    <li><br>    <p>touchend&mdash;&mdash;当手指离开屏幕时触发</p><br>    </li><br>    <li><br>    <p>touchcancel&mdash;&mdash;系统停止跟踪触摸时候会触发。例如在触摸过程中突然页面alert()一个提示框，此时会触发该事件，这个事件比较少用</p><br>    </li><br></ul>\n\n<p>TouchEvent</p>\n\n<ul><br>    <li><br>    <p>touches：屏幕上所有手指的信息</p><br>    </li><br>    <li><br>    <p>targetTouches：手指在目标区域的手指信息</p><br>    </li><br>    <li><br>    <p>changedTouches：最近一次触发该事件的手指信息</p><br>    </li><br>    <li><br>    <p>touchend时，touches与targetTouches信息会被删除，changedTouches保存的最后一次的信息，最好用于计算手指信息</p><br>    </li><br></ul>\n\n<p><span style=\"color:rgb(255, 0, 0)\"><span style=\"color:rgb(0, 0, 0)\">参数信息(changedTouches[0])</span></span></p>\n\n<ul><br>    <li><br>    <p>clientX、clientY在显示区的坐标</p><br>    </li><br>    <li><br>    <p>target：当前元素</p><br>    </li><br></ul>\n\n<p>参考：<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent\" target=\"_blank\">https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent</a></p>\n\n<p><strong>以下支持winphone 8</strong></p>\n\n<ul><br>    <li><br>    <p>MSPointerDown&mdash;&mdash;当手指触碰屏幕时候发生。不管当前有多少只手指</p><br>    </li><br>    <li><br>    <p>MSPointerMove&mdash;&mdash;当手指在屏幕上滑动时连续触发。通常我们再滑屏页面，会调用css的html{-ms-touch-action: none;}可以阻止默认情况的发生：阻止页面滚动</p><br>    </li><br>    <li><br>    <p>MSPointerUp&mdash;&mdash;当手指离开屏幕时触发</p><br>    </li><br></ul>\n\n<h3>移动端click屏幕产生200-300 ms的延迟响应</h3>\n\n<p>移动设备上的web网页是有300ms延迟的，玩玩会造成按钮点击延迟甚至是点击失效。</p>\n\n<p>以下是历史原因，来源一个公司内一个同事的分享：</p>\n\n<p>2007年苹果发布首款iphone上IOS系统搭载的safari为了将适用于PC端上大屏幕的网页能比较好的展示在手机端上，使用了双击缩放(double tap to zoom)的方案，比如你在手机上用浏览器打开一个PC上的网页，你可能在看到页面内容虽然可以撑满整个屏幕，但是字体、图片都很小看不清，此时可以快速双击屏幕上的某一部分，你就能看清该部分放大后的内容，再次双击后能回到原始状态。</p>\n\n<p>双击缩放是指用手指在屏幕上快速点击两次，iOS 自带的 Safari 浏览器会将网页缩放至原始比例。</p>\n\n<p>原因就出在浏览器需要如何判断快速点击上，当用户在屏幕上单击某一个元素时候，例如跳转链接&lt;a href=&quot;#&quot;&gt;&lt;/a&gt;，此处浏览器会先捕获该次单击，但浏览器不能决定用户是单纯要点击链接还是要双击该部分区域进行缩放操作，所以，捕获第一次单击后，浏览器会先Hold一段时间t，如果在t时间区间里用户未进行下一次点击，则浏览器会做单击跳转链接的处理，如果t时间里用户进行了第二次单击操作，则浏览器会禁止跳转，转而进行对该部分区域页面的缩放操作。那么这个时间区间t有多少呢？在IOS safari下，大概为300毫秒。这就是延迟的由来。造成的后果用户纯粹单击页面，页面需要过一段时间才响应，给用户慢体验感觉，对于web开发者来说是，页面js捕获click事件的回调函数处理，需要300ms后才生效，也就间接导致影响其他业务逻辑的处理。</p>\n\n<p>解决方案：</p>\n\n<ul><br>    <li><br>    <p>fastclick可以解决在手机上点击事件的300ms延迟</p><br>    </li><br>    <li><br>    <p>zepto的touch模块，tap事件也是为了解决在click的延迟问题</p><br>    </li><br></ul>\n\n<h3>触摸事件的响应顺序</h3>\n\n<pre>\n<code>1、ontouchstart  2、ontouchmove  3、ontouchend  4、onclick</code></pre>\n\n<p>解决300ms延迟的问题，也可以通过绑定ontouchstart事件，加快对事件的响应</p>\n\n<h3>什么是Retina 显示屏，带来了什么问题</h3>\n\n<p>retina：一种具备超高像素密度的液晶屏，同样大小的屏幕上显示的像素点由1个变为多个，如在同样带下的屏幕上，苹果设备的retina显示屏中，像素点1个变为4个</p>\n\n<p>在高清显示屏中的位图被放大，图片会变得模糊，<span style=\"color:rgb(255, 0, 0)\">因此移动端的视觉稿通常会设计为传统PC的2倍</span></p>\n\n<p>那么，前端的应对方案是：</p>\n\n<p>设计稿切出来的图片长宽保证为偶数，并使用backgroud-size把图片缩小为原来的1/2</p>\n\n<pre>\n<code>//例如图片宽高为：200px*200px，那么写法如下 .css{width:100px;height:100px;background-size:100px 100px;}</code></pre>\n\n<p>其它元素的取值为原来的1/2，例如视觉稿40px的字体，使用样式的写法为20px</p>\n\n<pre>\n<code>.css{font-size:20px}</code></pre>\n\n<p>参考《<a href=\"http://www.cnblogs.com/PeunZhang/p/3441110.html\" target=\"_blank\">高清显示屏原理及设计方案</a>》</p>\n\n<h3>ios系统中元素被触摸时产生的半透明灰色遮罩怎么去掉</h3>\n\n<p>ios用户点击一个链接，会出现一个半透明灰色遮罩,&nbsp;如果想要禁用，可设置-webkit-tap-highlight-color的alpha值为0，也就是属性值的最后一位设置为0就可以去除半透明灰色遮罩</p>\n\n<pre>\n<code>a,button,input,textarea{-webkit-tap-highlight-color: rgba(0,0,0,0;)}</code></pre>\n\n<h3>部分android系统中元素被点击时产生的边框怎么去掉</h3>\n\n<p>android用户点击一个链接，会出现一个边框或者半透明灰色遮罩,&nbsp;不同生产商定义出来额效果不一样，可设置-webkit-tap-highlight-color的alpha值为0去除部分机器自带的效果</p>\n\n<pre>\n<code>a,button,input,textarea{ -webkit-tap-highlight-color: rgba(0,0,0,0;) -webkit-user-modify:read-write-plaintext-only;  }</code></pre>\n\n<p>-webkit-user-modify有个副作用，就是输入法不再能够输入多个字符</p>\n\n<p>另外，有些机型去除不了，如小米2</p>\n\n<p>对于按钮类还有个办法，不使用a或者input标签，直接用div标签</p>\n\n<p>参考《<a href=\"http://www.cnblogs.com/PeunZhang/archive/2013/02/28/2907708.html\" target=\"_blank\">如何去除android上a标签产生的边框</a>》</p>\n\n<h3>winphone系统a、input标签被点击时产生的半透明灰色背景怎么去掉</h3>\n\n<pre>\n<code>&lt;meta name=\"msapplication-tap-highlight\" content=\"no\"&gt;</code></pre>\n\n<h3>webkit表单元素的默认外观怎么重置</h3>\n\n<pre>\n<code>.css{-webkit-appearance:none;}</code></pre>\n\n<h3>webkit表单输入框placeholder的颜色值能改变么</h3>\n\n<pre>\n<code>input::-webkit-input-placeholder{color:#AAAAAA;} input:focus::-webkit-input-placeholder{color:#EEEEEE;}</code></pre>\n\n<h3>webkit表单输入框placeholder的文字能换行么</h3>\n\n<p>ios可以，android不行~</p>\n\n<p>在textarea标签下都可以换行~</p>\n\n<h3>IE10（winphone8）表单元素默认外观如何重置</h3>\n\n<p><strong>禁用&nbsp;select&nbsp;</strong><strong>默认下拉箭头</strong></p>\n\n<p>::-ms-expand&nbsp;适用于表单选择控件下拉箭头的修改，有多个属性值，设置它隐藏&nbsp;(display:none)&nbsp;并使用背景图片来修饰可得到我们想要的效果。</p>\n\n<pre>\n<code>select::-ms-expand { display: none; }</code></pre>\n\n<p><strong>禁用&nbsp;radio&nbsp;</strong><strong>和&nbsp;checkbox&nbsp;</strong><strong>默认样式</strong></p>\n\n<p>::-ms-check&nbsp;适用于表单复选框或单选按钮默认图标的修改，同样有多个属性值，设置它隐藏&nbsp;(display:none)&nbsp;并使用背景图片来修饰可得到我们想要的效果。</p>\n\n<pre>\n<code>input[type=radio]::-ms-check,input[type=checkbox]::-ms-check{ display: none; }</code></pre>\n\n<p><strong>禁用PC</strong><strong>端表单输入框默认清除按钮</strong></p>\n\n<p>当表单文本输入框输入内容后会显示文本清除按钮，::-ms-clear&nbsp;适用于该清除按钮的修改，同样设置使它隐藏&nbsp;(display:none)&nbsp;并使用背景图片来修饰可得到我们想要的效果。</p>\n\n<pre>\n<code>input[type=text]::-ms-clear,input[type=tel]::-ms-clear,input[type=number]::-ms-clear{ display: none; }</code></pre>\n\n<h3>禁止ios 长按时不触发系统的菜单，禁止ios&amp;android长按时下载图片</h3>\n\n<pre>\n<code>.css{-webkit-touch-callout: none}</code></pre>\n\n<h3>禁止ios和android用户选中文字</h3>\n\n<pre>\n<code>.css{-webkit-user-select:none}</code></pre>\n\n<p>参考《<a href=\"http://www.cnblogs.com/PeunZhang/p/3522603.html\" target=\"_blank\">如何改变表单元素的外观(for Webkit and IE10)</a>》</p>\n\n<h3>打电话发短信写邮件怎么实现</h3>\n\n<p>打电话</p>\n\n<pre>\n<code>&lt;a href=\"tel:0755-10086\"&gt;打电话给:0755-10086&lt;/a&gt;</code></pre>\n\n<p>发短信，winphone系统无效</p>\n\n<pre>\n<code>&lt;a href=\"sms:10086\"&gt;发短信给: 10086&lt;/a&gt;</code></pre>\n\n<p>写邮件，可参考《<a href=\"http://www.cnblogs.com/PeunZhang/p/4952783.html\" target=\"_blank\">移动web页面给用户发送邮件的方法</a>》</p>\n\n<pre>\n<code>&lt;a href=\"mailto:peun@foxmail.com\"&gt;peun@foxmail.com&lt;/a&gt;</code></pre>\n\n<h3>模拟按钮hover效果</h3>\n\n<p>移动端触摸按钮的效果，可明示用户有些事情正要发生，是一个比较好体验，但是移动设备中并没有鼠标指针，使用css的hover并不能满足我们的需求，还好国外有个激活css的active效果，代码如下，</p>\n\n<pre>\n<code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;meta content=\"width=device-width,initial-scale=1.0,maximum-scale=1.0,user-scalable=no\" name=\"viewport\"&gt;\n    &lt;meta content=\"yes\" name=\"apple-mobile-web-app-capable\"&gt;\n    &lt;meta content=\"black\" name=\"apple-mobile-web-app-status-bar-style\"&gt;\n    &lt;meta content=\"telephone=no\" name=\"format-detection\"&gt;\n    &lt;meta content=\"email=no\" name=\"format-detection\"&gt;\n    &lt;style type=\"text/css\"&gt;\n        a{-webkit-tap-highlight-color: rgba(0,0,0,0);}\n        .btn-blue{display:block;height:42px;line-height:42px;text-align:center;border-radius:4px;font-size:18px;color:#FFFFFF;background-color: #4185F3;}\n        .btn-blue:active{background-color: #357AE8;}\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=\"btn-blue\"&gt;按钮&lt;/div&gt;\n    &lt;script type=\"text/javascript\"&gt;\n        document.addEventListener(\"touchstart\", function(){}, true)\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n\n<p>兼容性ios5+、部分android 4+、winphone 8</p>\n\n<p>要做到全兼容的办法，可通过绑定ontouchstart和ontouchend来控制按钮的类名</p>\n\n<pre>\n<code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;meta content=\"width=device-width,initial-scale=1.0,maximum-scale=1.0,user-scalable=no\" name=\"viewport\"&gt;\n    &lt;meta content=\"yes\" name=\"apple-mobile-web-app-capable\"&gt;\n    &lt;meta content=\"black\" name=\"apple-mobile-web-app-status-bar-style\"&gt;\n    &lt;meta content=\"telephone=no\" name=\"format-detection\"&gt;\n    &lt;meta content=\"email=no\" name=\"format-detection\"&gt;\n    &lt;style type=\"text/css\"&gt;\n        a{-webkit-tap-highlight-color: rgba(0,0,0,0);}\n        .btn-blue{display:block;height:42px;line-height:42px;text-align:center;border-radius:4px;font-size:18px;color:#FFFFFF;background-color: #4185F3;}\n        .btn-blue-on{background-color: #357AE8;}\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=\"btn-blue\"&gt;按钮&lt;/div&gt;\n    &lt;script type=\"text/javascript\"&gt;\n        var btnBlue = document.querySelector(\".btn-blue\");\n        btnBlue.ontouchstart = function(){this.className = \"btn-blue btn-blue-on\" } btnBlue.ontouchend = function(){this.className = \"btn-blue\" }\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n\n<h3>屏幕旋转的事件和样式</h3>\n\n<h4>事件</h4>\n\n<p>window.orientation，取值：正负90表示横屏模式、0和180表现为竖屏模式；</p>\n\n<pre>\n<code>window.onorientationchange = function(){     switch(window.orientation){         case -90:         case 90:         alert(\"横屏:\" + window.orientation);         case 0:         case 180:         alert(\"竖屏:\" + window.orientation);         break;     } }</code></pre>\n\n<h4>样式</h4>\n\n<pre>\n<code>//竖屏时使用的样式 @media all and (orientation:portrait) { .css{} } //横屏时使用的样式 @media all and (orientation:landscape) { .css{} }</code></pre>\n\n<h3>audio元素和video元素在ios和andriod中无法自动播放</h3>\n\n<p>应对方案：触屏即播</p>\n\n<pre>\n<code>$('html').one('touchstart',function(){audio.play() })</code></pre>\n\n<p>可参考《<a href=\"http://www.cnblogs.com/PeunZhang/archive/2013/02/05/2893093.html\" target=\"_blank\">无法自动播放的audio元素</a>》</p>\n\n<h3>摇一摇功能</h3>\n\n<p>HTML5 deviceMotion：封装了运动传感器数据的事件，可以获取手机运动状态下的运动加速度等数据。</p>\n\n<pre>\n<code>var SHAKE_THRESHOLD = 2000;  \nvar last_update = 0;  \nvar x = y = z = last_x = last_y = last_z = 0;  \nfunction init() {  \n    if (window.DeviceMotionEvent) {  \n       window.addEventListener('devicemotion', deviceMotionHandler, false);  \n    } else {  \n        alert('not support mobile event');  \n    }  \n}  \nfunction deviceMotionHandler(eventData) {  \n    var acceleration = eventData.accelerationIncludingGravity;  \n    var curTime = new Date().getTime();  \n    if ((curTime - last_update) &gt; 100) {  \n        var diffTime = curTime - last_update;  \n        last_update = curTime;  \n        x = acceleration.x;  \n        y = acceleration.y;  \n        z = acceleration.z;  \n        var speed = Math.abs(x + y + z - last_x - last_y - last_z) / diffTime * 10000;  \n        if (speed &gt; SHAKE_THRESHOLD) {  \n            //alert(\"摇动了\"+SHAKE_THRESHOLD);\n        }  \n        last_x = x;  \n        last_y = y;  \n        last_z = z;  \n    }  \n}</code></pre>\n\n<p>&nbsp;</p>\n\n<h3>手机拍照和上传图片</h3>\n\n<p>&lt;input type=&quot;file&quot;&gt;的accept 属性</p>\n\n<pre>\n<code>&lt;!-- 选择照片 --&gt; &lt;input type=file accept=\"image/*\"&gt; &lt;!-- 选择视频 --&gt; &lt;input type=file accept=\"video/*\"&gt;</code></pre>\n\n<p>使用总结：</p>\n\n<ul><br>    <li><br>    <p>ios 有拍照、录像、选取本地图片功能</p><br>    </li><br>    <li><br>    <p>部分android只有选取本地图片功能</p><br>    </li><br>    <li><br>    <p>winphone不支持</p><br>    </li><br>    <li><br>    <p>input控件默认外观丑陋</p><br>    </li><br></ul>\n\n<h3>微信浏览器用户调整字体大小后页面矬了，怎么阻止用户调整</h3>\n\n<p>原因</p>\n\n<ul><br>    <li><br>    <p>android侧是复写了layoutinflater 对textview做了统一处理</p><br>    </li><br>    <li><br>    <p>ios侧是修改了body.style.webkitTextSizeAdjust值</p><br>    </li><br></ul>\n\n<p>解决方案：</p>\n\n<ul><br>    <li><br>    <p>android使用以下代码，该接口只在微信浏览器下有效(感谢jationhuang同学提供)</p><br>    </li><br></ul>\n\n<p><img alt=\"复制代码\" src=\"http://static.oschina.net/uploads/img/201602/22125528_gb2w.gif\"></p>\n\n<pre>\n<code>/**  * 页面加入这段代码可使Android机器页面不再受到用户字体缩放强制改变大小  * 但是会有一个1秒左右的延迟，期间可以考虑通过loading展示  * 仅供参考  */\n(function(){     \n    if (typeof(WeixinJSBridge) == \"undefined\") {                                              document.addEventListener(\"WeixinJSBridgeReady\", function (e) {\n            setTimeout(function(){\n              WeixinJSBridge.invoke('setFontSizeCallback',{\"fontSize\":0}, function(res) {                       alert(JSON.stringify(res));\n              });\n            },0);  \n        });\n    } else {\n        setTimeout(function(){\n           WeixinJSBridge.invoke('setFontSizeCallback',{\"fontSize\":0}, function(res) {                         alert(JSON.stringify(res));\n           });\n         },0);\n      }\n   })();</code></pre>\n\n<p>&nbsp;</p>\n\n<ul><br>    <li><br>    <p>ios使用-webkit-text-size-adjust禁止调整字体大小</p><br>    </li><br></ul>\n\n<pre>\n<code>body{-webkit-text-size-adjust: 100%!important;}</code></pre>\n\n<p>最好的解决方案：</p>\n\n<ul><br>    <li><br>    <p>整个页面用rem或者百分比布局</p><br>    </li><br></ul>\n\n<h3>消除transition闪屏</h3>\n\n<p>网络都是这么写的，但我并没有测试出来</p>\n\n<pre>\n<code>.css{ /*设置内嵌的元素在 3D 空间如何呈现：保留 3D*/ -webkit-transform-style: preserve-3d; /*（设置进行转换的元素的背面在面对用户时是否可见：隐藏）*/ -webkit-backface-visibility: hidden; }</code></pre>\n\n<h3>开启硬件加速</h3>\n\n<ul><br>    <li><br>    <p>解决页面闪白</p><br>    </li><br>    <li><br>    <p>保证动画流畅</p><br>    </li><br></ul>\n\n<pre>\n<code>.css {    -webkit-transform: translate3d(0, 0, 0);    -moz-transform: translate3d(0, 0, 0);    -ms-transform: translate3d(0, 0, 0);    transform: translate3d(0, 0, 0); }</code></pre>\n\n<p>参考《<a href=\"http://www.cnblogs.com/PeunZhang/p/3510083.html\" target=\"_blank\">用CSS开启硬件加速来提高网站性能</a>》</p>\n\n<h3>取消input在ios下，输入的时候英文首字母的默认大写</h3>\n\n<pre>\n<code>&lt;input autocapitalize=\"off\" autocorrect=\"off\" /&gt;</code></pre>\n\n<h3>android 上去掉语音输入按钮</h3>\n\n<pre>\n<code>input::-webkit-input-speech-button {display: none}</code></pre>\n\n<h3>android 2.3 bug</h3>\n\n<ul><br>    <li><br>    <p>@-webkit-keyframes 需要以0%开始100%结束，0%的百分号不能去掉</p><br>    </li><br>    <li><br>    <p><span style=\"color:rgb(255, 0, 0)\">after和before伪类无法使用动画animation</span></p><br>    </li><br>    <li><br>    <p>border-radius不支持%单位</p><br>    </li><br>    <li><br>    <p>translate百分比的写法和scale在一起会导致失效，例如-webkit-transform: translate(-50%,-50%) scale(-0.5, 1)</p><br>    </li><br></ul>\n\n<h3>android 4.x bug</h3>\n\n<ul><br>    <li><br>    <p>三星 Galaxy S4中自带浏览器不支持border-radius缩写</p><br>    </li><br>    <li><br>    <p>同时设置border-radius和背景色的时候，背景色会溢出到圆角以外部分</p><br>    </li><br>    <li><br>    <p>部分手机(如三星)，a链接支持鼠标:visited事件，也就是说链接访问后文字变为紫色</p><br>    </li><br>    <li><br>    <p><span style=\"color:rgb(255, 0, 0)\">android无法同时播放多音频audio</span></p><br>    </li><br></ul>\n\n<p>参考《<a href=\"https://github.com/yisibl/blog/issues/2\" target=\"_blank\">border-radius 移动之伤</a>》</p>\n\n<h3>设计高性能CSS3动画的几个要素</h3>\n\n<ul><br>    <li><br>    <p>尽可能地使用合成属性transform和opacity来设计CSS3动画，不使用position的left和top来定位</p><br>    </li><br>    <li><br>    <p>利用translate3D开启GPU加速</p><br>    </li><br></ul>\n\n<p>参考《<a href=\"http://www.html5rocks.com/en/tutorials/speed/high-performance-animations/\" target=\"_blank\">High Performance Animations</a>》</p>\n\n<h3>fixed bug</h3>\n\n<ul><br>    <li><br>    <p>ios下fixed元素容易定位出错，软键盘弹出时，影响fixed元素定位</p><br>    </li><br>    <li><br>    <p>android下fixed表现要比iOS更好，软键盘弹出时，不会影响fixed元素定位</p><br>    </li><br>    <li><br>    <p>ios4下不支持position:fixed</p><br>    </li><br></ul>\n\n<p>解决方案</p>\n\n<ul><br>    <li><br>    <p>可用isroll.js，暂无完美方案</p><br>    </li><br></ul>\n\n<p>参考</p>\n\n<p>《<a href=\"https://github.com/maxzhang/maxzhang.github.com/issues/2\" target=\"_blank\">移动端web页面使用position:fixed问题总结</a>》</p>\n\n<p>《<a href=\"http://www.cnblogs.com/PeunZhang/archive/2013/06/14/3117589.html\" target=\"_blank\">使用iScroll.js解决ios4下不支持position:fixed的问题</a>》</p>\n\n<h3>&nbsp;如何阻止windows Phone的默认触摸事件</h3>\n\n<p>winphone下默认触摸事件事件使用e.preventDefault是无效的</p>\n\n<p>目前解决方法是使用样式来禁用</p>\n\n<pre>\n<code>html{-ms-touch-action: none;}/* 禁止winphone默认触摸事件 */</code></pre>\n\n<p>参考</p>\n\n<p>《<a href=\"http://stackoverflow.com/questions/13396297/windows-phone-8-touch-support\" target=\"_blank\">Windows phone 8 touch support</a>》</p>\n\n<h3>播放视频不全屏</h3>\n\n<pre>\n<code>&lt;!-- 1.目前只有ios7+、winphone8+支持自动播放 2.支持Airplay的设备（如：音箱、Apple TV)播放 x-webkit-airplay=\"true\"  3.播放视频不全屏，ios7+、winphone8+支持，部分android4+支持（含华为、小米、魅族） webkit-playsinline=\"true\"  --&gt; &lt;video x-webkit-airplay=\"true\" webkit-playsinline=\"true\" preload=\"auto\" autoplay src=\"http://\"&gt;&lt;/video&gt;</code></pre>\n\n<p><span style=\"color:rgb(0, 0, 0)\">体验demo：</span><span style=\"color:rgb(153, 204, 0)\"><a href=\"http://1.peunzhang.sinaapp.com/demo/video/index.html\" target=\"_blank\">http://1.peunzhang.sinaapp.com/demo/video/index.html</a></span></p>\n\n<h2><span style=\"color:rgb(153, 204, 0)\">常用的移动端框架</span></h2>\n\n<h3>zepto.js</h3>\n\n<p>语法与jquery几乎一样，会jquery基本会zepto~</p>\n\n<p>最新版本已经更新到1.16</p>\n\n<p>官网：<a href=\"http://zeptojs.com/\" target=\"_blank\">http://zeptojs.com/</a></p>\n\n<p>中文(非官网)：<a href=\"http://www.css88.com/doc/zeptojs_api/\" target=\"_blank\">http://www.css88.com/doc/zeptojs_api/</a></p>\n\n<p>常使用的扩展模块：</p>\n\n<p>浏览器检测：<a href=\"https://github.com/madrobby/zepto/blob/master/src/detect.js\" target=\"_blank\">https://github.com/madrobby/zepto/blob/master/src/detect.js</a></p>\n\n<p>tap事件：<a href=\"https://github.com/madrobby/zepto/blob/master/src/touch.js\" target=\"_blank\">https://github.com/madrobby/zepto/blob/master/src/touch.js</a></p>\n\n<h3>iscroll.js</h3>\n\n<p>解决页面不支持弹性滚动，不支持fixed引起的问题~</p>\n\n<p>实现下拉刷新，滑屏，缩放等功能~</p>\n\n<p>最新版本已经更新到5.0</p>\n\n<p>官网：<a href=\"http://cubiq.org/iscroll-5\" target=\"_blank\">http://cubiq.org/iscroll-5</a></p>\n\n<h3>underscore.js</h3>\n\n<p>笔者没用过，不过听说好用，推荐给大家~</p>\n\n<p>该库提供了一整套函数式编程的实用功能，但是没有扩展任何JavaScript内置对象。</p>\n\n<p>最新版本已经更新到1.8.2</p>\n\n<p>官网：<a href=\"http://underscorejs.org/\" target=\"_blank\">http://underscorejs.org/</a></p>\n\n<h3>滑屏框架</h3>\n\n<p>适合上下滑屏、左右滑屏等滑屏切换页面的效果</p>\n\n<p><a href=\"https://github.com/peunzhang/slip.js\" target=\"_blank\">slip.js</a></p>\n\n<p><a href=\"https://github.com/peunzhang/iSlider\" target=\"_blank\">iSlider.js</a></p>\n\n<p><a href=\"https://github.com/peunzhang/fullpage\" target=\"_blank\">fullpage.js</a></p>\n\n<p><a href=\"http://www.swiper.com.cn/\" target=\"_blank\">swiper.js</a></p>\n\n<h3>flex布局</h3>\n\n<p><span style=\"color:rgb(255, 0, 0)\">使用注意：</span></p>\n\n<ul><br>    <li><br>    <p><span style=\"color:rgb(255, 0, 0)\">flex下的子元素必须为块级元素，非块级元素在android2.3机器下flex失效</span></p><br>    </li><br>    <li><br>    <p><span style=\"color:rgb(255, 0, 0)\">flex下的子元素宽度和高度不能超过父元素，否则会导致子元素定位错误，例如水平垂直居中</span></p><br>    </li><br></ul>\n\n<h3>FastClick</h3>\n\n<p>消除在移动浏览器上触发click事件与一个物理Tap(敲击)之间的300延迟</p>\n\n<p>参考《<a href=\"https://github.com/ftlabs/fastclick\" target=\"_blank\">FastClick</a>》</p>\n\n<h3>Sea.js&nbsp;</h3>\n\n<p>提供简单、极致的模块化开发体验</p>\n\n<ul><br>    <li><br>    <p><strong>简单友好的模块定义规范</strong>：Sea.js 遵循&nbsp;<a href=\"https://github.com/cmdjs/specification/blob/master/draft/module.md\" target=\"_blank\">CMD</a>&nbsp;规范，可以像&nbsp;<a href=\"http://nodejs.org/\" target=\"_blank\">Node.js</a>&nbsp;一般书写模块代码。</p><br>    </li><br>    <li><br>    <p><strong>自然直观的代码组织方式</strong>：依赖的自动加载、配置的简洁清晰，可以让我们更多地享受编码的乐趣。</p><br>    </li><br></ul>\n\n<p>地址：<a href=\"http://seajs.org/docs/\" target=\"_blank\">http://seajs.org/docs/</a></p>\n\n<p>&nbsp;</p>\n","excerpt":"<h2><span style=\"background-color:rgb(238, 236, 225); color:rgb(255, 0, 0)\"><strong>meta基础知识</strong></span></h2>\n\n<h3>H5页面窗口自动调整到设备宽度，并禁止用户缩放页面</h3>\n\n<pre>\n<code>&lt;meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no\" /&gt;</code></pre>","more":"<h3>忽略将页面中的数字识别为电话号码</h3>\n\n<pre>\n<code>&lt;meta name=\"format-detection\" content=\"telephone=no\" /&gt;</code></pre>\n\n<h3>忽略Android平台中对邮箱地址的识别</h3>\n\n<pre>\n<code>&lt;meta name=\"format-detection\" content=\"email=no\" /&gt;</code></pre>\n\n<h3>当网站添加到主屏幕快速启动方式，可隐藏地址栏，仅针对ios的safari</h3>\n\n<pre>\n<code>&lt;meta name=\"apple-mobile-web-app-capable\" content=\"yes\" /&gt; &lt;!-- ios7.0版本以后，safari上已看不到效果 --&gt;</code></pre>\n\n<p>将网站添加到主屏幕快速启动方式，仅针对ios的safari顶端状态条的样式</p>\n\n<pre>\n<code>&lt;meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black\" /&gt; &lt;!-- 可选default、black、black-translucent --&gt;</code></pre>\n\n<h3>viewport模板</h3>\n\n<p>viewport模板&mdash;&mdash;通用</p>\n\n<pre>\n<code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;meta content=\"width=device-width,initial-scale=1.0,maximum-scale=1.0,user-scalable=no\" name=\"viewport\"&gt;\n    &lt;meta content=\"yes\" name=\"apple-mobile-web-app-capable\"&gt;\n    &lt;meta content=\"black\" name=\"apple-mobile-web-app-status-bar-style\"&gt;\n    &lt;meta content=\"telephone=no\" name=\"format-detection\"&gt;\n    &lt;meta content=\"email=no\" name=\"format-detection\"&gt;\n    &lt;title&gt;标题&lt;/title&gt;\n    &lt;link rel=\"stylesheet\" href=\"index.css\"&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        这里开始内容\n    &lt;/body&gt;\n&lt;/html&gt;</code></pre>\n\n<p>&nbsp;</p>\n\n<p><span style=\"color:rgb(0, 0, 0)\">viewport模板 -&nbsp;target-densitydpi=device-dpi，android 2.3.5以下版本不支持</span></p>\n\n<pre>\n<code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=750, user-scalable=no, target-densitydpi=device-dpi\"&gt;&lt;!-- width取值与页面定义的宽度一致 --&gt;\n    &lt;meta content=\"yes\" name=\"apple-mobile-web-app-capable\"&gt;\n    &lt;meta content=\"black\" name=\"apple-mobile-web-app-status-bar-style\"&gt;\n    &lt;meta content=\"telephone=no\" name=\"format-detection\"&gt;\n    &lt;meta content=\"email=no\" name=\"format-detection\"&gt;\n    &lt;title&gt;标题&lt;/title&gt;\n    &lt;link rel=\"stylesheet\" href=\"index.css\"&gt;\n&lt;/head&gt;\n    &lt;body&gt; 这里开始内容 &lt;/body&gt;\n&lt;/html&gt;</code></pre>\n\n<p>&nbsp;</p>\n\n<h2><span style=\"color:rgb(255, 0, 0)\">常见问题</span></h2>\n\n<h3>移动端如何定义字体font-family</h3>\n\n<p>中文字体使用系统默认即可，英文用Helvetica</p>\n\n<pre>\n<code>/* 移动端定义字体的代码 */ body{font-family:Helvetica;}</code></pre>\n\n<p>参考《<a href=\"http://www.cnblogs.com/PeunZhang/p/3592096.html\" target=\"_blank\">移动端使用字体的思考</a>》</p>\n\n<h3>移动端字体单位font-size选择px还是rem</h3>\n\n<p>对于只需要适配少部分手机设备，且分辨率对页面影响不大的，使用px即可</p>\n\n<p>对于需要适配各种移动设备，使用rem，例如只需要适配iPhone和iPad等分辨率差别比较挺大的设备</p>\n\n<p>rem配置参考：</p>\n\n<pre>\n<code>html{font-size:10px}\n @media screen and (min-width:321px) and (max-width:375px){html{font-size:11px}}\n @media screen and (min-width:376px) and (max-width:414px){html{font-size:12px}}\n @media screen and (min-width:415px) and (max-width:639px){html{font-size:15px}}\n @media screen and (min-width:640px) and (max-width:719px){html{font-size:20px}}\n @media screen and (min-width:720px) and (max-width:749px){html{font-size:22.5px}}\n @media screen and (min-width:750px) and (max-width:799px){html{font-size:23.5px}}\n @media screen and (min-width:800px){html{font-size:25px}}</code></pre>\n\n<p><span style=\"color:rgb(0, 0, 0)\">体验demo：</span><a href=\"http://1.peunzhang.sinaapp.com/demo/rem/index.html\" target=\"_blank\">http://1.peunzhang.sinaapp.com/demo/rem/index.html</a></p>\n\n<h3>移动端touch事件(区分webkit 和 winphone)</h3>\n\n<p>当用户手指放在移动设备在屏幕上滑动会触发的touch事件</p>\n\n<p><strong>以下支持webkit</strong></p>\n\n<ul><br>    <li><br>    <p>touchstart&mdash;&mdash;当手指触碰屏幕时候发生。不管当前有多少只手指</p><br>    </li><br>    <li><br>    <p>touchmove&mdash;&mdash;当手指在屏幕上滑动时连续触发。通常我们再滑屏页面，会调用event的preventDefault()可以阻止默认情况的发生：阻止页面滚动</p><br>    </li><br>    <li><br>    <p>touchend&mdash;&mdash;当手指离开屏幕时触发</p><br>    </li><br>    <li><br>    <p>touchcancel&mdash;&mdash;系统停止跟踪触摸时候会触发。例如在触摸过程中突然页面alert()一个提示框，此时会触发该事件，这个事件比较少用</p><br>    </li><br></ul>\n\n<p>TouchEvent</p>\n\n<ul><br>    <li><br>    <p>touches：屏幕上所有手指的信息</p><br>    </li><br>    <li><br>    <p>targetTouches：手指在目标区域的手指信息</p><br>    </li><br>    <li><br>    <p>changedTouches：最近一次触发该事件的手指信息</p><br>    </li><br>    <li><br>    <p>touchend时，touches与targetTouches信息会被删除，changedTouches保存的最后一次的信息，最好用于计算手指信息</p><br>    </li><br></ul>\n\n<p><span style=\"color:rgb(255, 0, 0)\"><span style=\"color:rgb(0, 0, 0)\">参数信息(changedTouches[0])</span></span></p>\n\n<ul><br>    <li><br>    <p>clientX、clientY在显示区的坐标</p><br>    </li><br>    <li><br>    <p>target：当前元素</p><br>    </li><br></ul>\n\n<p>参考：<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent\" target=\"_blank\">https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent</a></p>\n\n<p><strong>以下支持winphone 8</strong></p>\n\n<ul><br>    <li><br>    <p>MSPointerDown&mdash;&mdash;当手指触碰屏幕时候发生。不管当前有多少只手指</p><br>    </li><br>    <li><br>    <p>MSPointerMove&mdash;&mdash;当手指在屏幕上滑动时连续触发。通常我们再滑屏页面，会调用css的html{-ms-touch-action: none;}可以阻止默认情况的发生：阻止页面滚动</p><br>    </li><br>    <li><br>    <p>MSPointerUp&mdash;&mdash;当手指离开屏幕时触发</p><br>    </li><br></ul>\n\n<h3>移动端click屏幕产生200-300 ms的延迟响应</h3>\n\n<p>移动设备上的web网页是有300ms延迟的，玩玩会造成按钮点击延迟甚至是点击失效。</p>\n\n<p>以下是历史原因，来源一个公司内一个同事的分享：</p>\n\n<p>2007年苹果发布首款iphone上IOS系统搭载的safari为了将适用于PC端上大屏幕的网页能比较好的展示在手机端上，使用了双击缩放(double tap to zoom)的方案，比如你在手机上用浏览器打开一个PC上的网页，你可能在看到页面内容虽然可以撑满整个屏幕，但是字体、图片都很小看不清，此时可以快速双击屏幕上的某一部分，你就能看清该部分放大后的内容，再次双击后能回到原始状态。</p>\n\n<p>双击缩放是指用手指在屏幕上快速点击两次，iOS 自带的 Safari 浏览器会将网页缩放至原始比例。</p>\n\n<p>原因就出在浏览器需要如何判断快速点击上，当用户在屏幕上单击某一个元素时候，例如跳转链接&lt;a href=&quot;#&quot;&gt;&lt;/a&gt;，此处浏览器会先捕获该次单击，但浏览器不能决定用户是单纯要点击链接还是要双击该部分区域进行缩放操作，所以，捕获第一次单击后，浏览器会先Hold一段时间t，如果在t时间区间里用户未进行下一次点击，则浏览器会做单击跳转链接的处理，如果t时间里用户进行了第二次单击操作，则浏览器会禁止跳转，转而进行对该部分区域页面的缩放操作。那么这个时间区间t有多少呢？在IOS safari下，大概为300毫秒。这就是延迟的由来。造成的后果用户纯粹单击页面，页面需要过一段时间才响应，给用户慢体验感觉，对于web开发者来说是，页面js捕获click事件的回调函数处理，需要300ms后才生效，也就间接导致影响其他业务逻辑的处理。</p>\n\n<p>解决方案：</p>\n\n<ul><br>    <li><br>    <p>fastclick可以解决在手机上点击事件的300ms延迟</p><br>    </li><br>    <li><br>    <p>zepto的touch模块，tap事件也是为了解决在click的延迟问题</p><br>    </li><br></ul>\n\n<h3>触摸事件的响应顺序</h3>\n\n<pre>\n<code>1、ontouchstart  2、ontouchmove  3、ontouchend  4、onclick</code></pre>\n\n<p>解决300ms延迟的问题，也可以通过绑定ontouchstart事件，加快对事件的响应</p>\n\n<h3>什么是Retina 显示屏，带来了什么问题</h3>\n\n<p>retina：一种具备超高像素密度的液晶屏，同样大小的屏幕上显示的像素点由1个变为多个，如在同样带下的屏幕上，苹果设备的retina显示屏中，像素点1个变为4个</p>\n\n<p>在高清显示屏中的位图被放大，图片会变得模糊，<span style=\"color:rgb(255, 0, 0)\">因此移动端的视觉稿通常会设计为传统PC的2倍</span></p>\n\n<p>那么，前端的应对方案是：</p>\n\n<p>设计稿切出来的图片长宽保证为偶数，并使用backgroud-size把图片缩小为原来的1/2</p>\n\n<pre>\n<code>//例如图片宽高为：200px*200px，那么写法如下 .css{width:100px;height:100px;background-size:100px 100px;}</code></pre>\n\n<p>其它元素的取值为原来的1/2，例如视觉稿40px的字体，使用样式的写法为20px</p>\n\n<pre>\n<code>.css{font-size:20px}</code></pre>\n\n<p>参考《<a href=\"http://www.cnblogs.com/PeunZhang/p/3441110.html\" target=\"_blank\">高清显示屏原理及设计方案</a>》</p>\n\n<h3>ios系统中元素被触摸时产生的半透明灰色遮罩怎么去掉</h3>\n\n<p>ios用户点击一个链接，会出现一个半透明灰色遮罩,&nbsp;如果想要禁用，可设置-webkit-tap-highlight-color的alpha值为0，也就是属性值的最后一位设置为0就可以去除半透明灰色遮罩</p>\n\n<pre>\n<code>a,button,input,textarea{-webkit-tap-highlight-color: rgba(0,0,0,0;)}</code></pre>\n\n<h3>部分android系统中元素被点击时产生的边框怎么去掉</h3>\n\n<p>android用户点击一个链接，会出现一个边框或者半透明灰色遮罩,&nbsp;不同生产商定义出来额效果不一样，可设置-webkit-tap-highlight-color的alpha值为0去除部分机器自带的效果</p>\n\n<pre>\n<code>a,button,input,textarea{ -webkit-tap-highlight-color: rgba(0,0,0,0;) -webkit-user-modify:read-write-plaintext-only;  }</code></pre>\n\n<p>-webkit-user-modify有个副作用，就是输入法不再能够输入多个字符</p>\n\n<p>另外，有些机型去除不了，如小米2</p>\n\n<p>对于按钮类还有个办法，不使用a或者input标签，直接用div标签</p>\n\n<p>参考《<a href=\"http://www.cnblogs.com/PeunZhang/archive/2013/02/28/2907708.html\" target=\"_blank\">如何去除android上a标签产生的边框</a>》</p>\n\n<h3>winphone系统a、input标签被点击时产生的半透明灰色背景怎么去掉</h3>\n\n<pre>\n<code>&lt;meta name=\"msapplication-tap-highlight\" content=\"no\"&gt;</code></pre>\n\n<h3>webkit表单元素的默认外观怎么重置</h3>\n\n<pre>\n<code>.css{-webkit-appearance:none;}</code></pre>\n\n<h3>webkit表单输入框placeholder的颜色值能改变么</h3>\n\n<pre>\n<code>input::-webkit-input-placeholder{color:#AAAAAA;} input:focus::-webkit-input-placeholder{color:#EEEEEE;}</code></pre>\n\n<h3>webkit表单输入框placeholder的文字能换行么</h3>\n\n<p>ios可以，android不行~</p>\n\n<p>在textarea标签下都可以换行~</p>\n\n<h3>IE10（winphone8）表单元素默认外观如何重置</h3>\n\n<p><strong>禁用&nbsp;select&nbsp;</strong><strong>默认下拉箭头</strong></p>\n\n<p>::-ms-expand&nbsp;适用于表单选择控件下拉箭头的修改，有多个属性值，设置它隐藏&nbsp;(display:none)&nbsp;并使用背景图片来修饰可得到我们想要的效果。</p>\n\n<pre>\n<code>select::-ms-expand { display: none; }</code></pre>\n\n<p><strong>禁用&nbsp;radio&nbsp;</strong><strong>和&nbsp;checkbox&nbsp;</strong><strong>默认样式</strong></p>\n\n<p>::-ms-check&nbsp;适用于表单复选框或单选按钮默认图标的修改，同样有多个属性值，设置它隐藏&nbsp;(display:none)&nbsp;并使用背景图片来修饰可得到我们想要的效果。</p>\n\n<pre>\n<code>input[type=radio]::-ms-check,input[type=checkbox]::-ms-check{ display: none; }</code></pre>\n\n<p><strong>禁用PC</strong><strong>端表单输入框默认清除按钮</strong></p>\n\n<p>当表单文本输入框输入内容后会显示文本清除按钮，::-ms-clear&nbsp;适用于该清除按钮的修改，同样设置使它隐藏&nbsp;(display:none)&nbsp;并使用背景图片来修饰可得到我们想要的效果。</p>\n\n<pre>\n<code>input[type=text]::-ms-clear,input[type=tel]::-ms-clear,input[type=number]::-ms-clear{ display: none; }</code></pre>\n\n<h3>禁止ios 长按时不触发系统的菜单，禁止ios&amp;android长按时下载图片</h3>\n\n<pre>\n<code>.css{-webkit-touch-callout: none}</code></pre>\n\n<h3>禁止ios和android用户选中文字</h3>\n\n<pre>\n<code>.css{-webkit-user-select:none}</code></pre>\n\n<p>参考《<a href=\"http://www.cnblogs.com/PeunZhang/p/3522603.html\" target=\"_blank\">如何改变表单元素的外观(for Webkit and IE10)</a>》</p>\n\n<h3>打电话发短信写邮件怎么实现</h3>\n\n<p>打电话</p>\n\n<pre>\n<code>&lt;a href=\"tel:0755-10086\"&gt;打电话给:0755-10086&lt;/a&gt;</code></pre>\n\n<p>发短信，winphone系统无效</p>\n\n<pre>\n<code>&lt;a href=\"sms:10086\"&gt;发短信给: 10086&lt;/a&gt;</code></pre>\n\n<p>写邮件，可参考《<a href=\"http://www.cnblogs.com/PeunZhang/p/4952783.html\" target=\"_blank\">移动web页面给用户发送邮件的方法</a>》</p>\n\n<pre>\n<code>&lt;a href=\"mailto:peun@foxmail.com\"&gt;peun@foxmail.com&lt;/a&gt;</code></pre>\n\n<h3>模拟按钮hover效果</h3>\n\n<p>移动端触摸按钮的效果，可明示用户有些事情正要发生，是一个比较好体验，但是移动设备中并没有鼠标指针，使用css的hover并不能满足我们的需求，还好国外有个激活css的active效果，代码如下，</p>\n\n<pre>\n<code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;meta content=\"width=device-width,initial-scale=1.0,maximum-scale=1.0,user-scalable=no\" name=\"viewport\"&gt;\n    &lt;meta content=\"yes\" name=\"apple-mobile-web-app-capable\"&gt;\n    &lt;meta content=\"black\" name=\"apple-mobile-web-app-status-bar-style\"&gt;\n    &lt;meta content=\"telephone=no\" name=\"format-detection\"&gt;\n    &lt;meta content=\"email=no\" name=\"format-detection\"&gt;\n    &lt;style type=\"text/css\"&gt;\n        a{-webkit-tap-highlight-color: rgba(0,0,0,0);}\n        .btn-blue{display:block;height:42px;line-height:42px;text-align:center;border-radius:4px;font-size:18px;color:#FFFFFF;background-color: #4185F3;}\n        .btn-blue:active{background-color: #357AE8;}\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=\"btn-blue\"&gt;按钮&lt;/div&gt;\n    &lt;script type=\"text/javascript\"&gt;\n        document.addEventListener(\"touchstart\", function(){}, true)\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n\n<p>兼容性ios5+、部分android 4+、winphone 8</p>\n\n<p>要做到全兼容的办法，可通过绑定ontouchstart和ontouchend来控制按钮的类名</p>\n\n<pre>\n<code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;meta content=\"width=device-width,initial-scale=1.0,maximum-scale=1.0,user-scalable=no\" name=\"viewport\"&gt;\n    &lt;meta content=\"yes\" name=\"apple-mobile-web-app-capable\"&gt;\n    &lt;meta content=\"black\" name=\"apple-mobile-web-app-status-bar-style\"&gt;\n    &lt;meta content=\"telephone=no\" name=\"format-detection\"&gt;\n    &lt;meta content=\"email=no\" name=\"format-detection\"&gt;\n    &lt;style type=\"text/css\"&gt;\n        a{-webkit-tap-highlight-color: rgba(0,0,0,0);}\n        .btn-blue{display:block;height:42px;line-height:42px;text-align:center;border-radius:4px;font-size:18px;color:#FFFFFF;background-color: #4185F3;}\n        .btn-blue-on{background-color: #357AE8;}\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=\"btn-blue\"&gt;按钮&lt;/div&gt;\n    &lt;script type=\"text/javascript\"&gt;\n        var btnBlue = document.querySelector(\".btn-blue\");\n        btnBlue.ontouchstart = function(){this.className = \"btn-blue btn-blue-on\" } btnBlue.ontouchend = function(){this.className = \"btn-blue\" }\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n\n<h3>屏幕旋转的事件和样式</h3>\n\n<h4>事件</h4>\n\n<p>window.orientation，取值：正负90表示横屏模式、0和180表现为竖屏模式；</p>\n\n<pre>\n<code>window.onorientationchange = function(){     switch(window.orientation){         case -90:         case 90:         alert(\"横屏:\" + window.orientation);         case 0:         case 180:         alert(\"竖屏:\" + window.orientation);         break;     } }</code></pre>\n\n<h4>样式</h4>\n\n<pre>\n<code>//竖屏时使用的样式 @media all and (orientation:portrait) { .css{} } //横屏时使用的样式 @media all and (orientation:landscape) { .css{} }</code></pre>\n\n<h3>audio元素和video元素在ios和andriod中无法自动播放</h3>\n\n<p>应对方案：触屏即播</p>\n\n<pre>\n<code>$('html').one('touchstart',function(){audio.play() })</code></pre>\n\n<p>可参考《<a href=\"http://www.cnblogs.com/PeunZhang/archive/2013/02/05/2893093.html\" target=\"_blank\">无法自动播放的audio元素</a>》</p>\n\n<h3>摇一摇功能</h3>\n\n<p>HTML5 deviceMotion：封装了运动传感器数据的事件，可以获取手机运动状态下的运动加速度等数据。</p>\n\n<pre>\n<code>var SHAKE_THRESHOLD = 2000;  \nvar last_update = 0;  \nvar x = y = z = last_x = last_y = last_z = 0;  \nfunction init() {  \n    if (window.DeviceMotionEvent) {  \n       window.addEventListener('devicemotion', deviceMotionHandler, false);  \n    } else {  \n        alert('not support mobile event');  \n    }  \n}  \nfunction deviceMotionHandler(eventData) {  \n    var acceleration = eventData.accelerationIncludingGravity;  \n    var curTime = new Date().getTime();  \n    if ((curTime - last_update) &gt; 100) {  \n        var diffTime = curTime - last_update;  \n        last_update = curTime;  \n        x = acceleration.x;  \n        y = acceleration.y;  \n        z = acceleration.z;  \n        var speed = Math.abs(x + y + z - last_x - last_y - last_z) / diffTime * 10000;  \n        if (speed &gt; SHAKE_THRESHOLD) {  \n            //alert(\"摇动了\"+SHAKE_THRESHOLD);\n        }  \n        last_x = x;  \n        last_y = y;  \n        last_z = z;  \n    }  \n}</code></pre>\n\n<p>&nbsp;</p>\n\n<h3>手机拍照和上传图片</h3>\n\n<p>&lt;input type=&quot;file&quot;&gt;的accept 属性</p>\n\n<pre>\n<code>&lt;!-- 选择照片 --&gt; &lt;input type=file accept=\"image/*\"&gt; &lt;!-- 选择视频 --&gt; &lt;input type=file accept=\"video/*\"&gt;</code></pre>\n\n<p>使用总结：</p>\n\n<ul><br>    <li><br>    <p>ios 有拍照、录像、选取本地图片功能</p><br>    </li><br>    <li><br>    <p>部分android只有选取本地图片功能</p><br>    </li><br>    <li><br>    <p>winphone不支持</p><br>    </li><br>    <li><br>    <p>input控件默认外观丑陋</p><br>    </li><br></ul>\n\n<h3>微信浏览器用户调整字体大小后页面矬了，怎么阻止用户调整</h3>\n\n<p>原因</p>\n\n<ul><br>    <li><br>    <p>android侧是复写了layoutinflater 对textview做了统一处理</p><br>    </li><br>    <li><br>    <p>ios侧是修改了body.style.webkitTextSizeAdjust值</p><br>    </li><br></ul>\n\n<p>解决方案：</p>\n\n<ul><br>    <li><br>    <p>android使用以下代码，该接口只在微信浏览器下有效(感谢jationhuang同学提供)</p><br>    </li><br></ul>\n\n<p><img alt=\"复制代码\" src=\"http://static.oschina.net/uploads/img/201602/22125528_gb2w.gif\" /></p>\n\n<pre>\n<code>/**  * 页面加入这段代码可使Android机器页面不再受到用户字体缩放强制改变大小  * 但是会有一个1秒左右的延迟，期间可以考虑通过loading展示  * 仅供参考  */\n(function(){     \n    if (typeof(WeixinJSBridge) == \"undefined\") {                                              document.addEventListener(\"WeixinJSBridgeReady\", function (e) {\n            setTimeout(function(){\n              WeixinJSBridge.invoke('setFontSizeCallback',{\"fontSize\":0}, function(res) {                       alert(JSON.stringify(res));\n              });\n            },0);  \n        });\n    } else {\n        setTimeout(function(){\n           WeixinJSBridge.invoke('setFontSizeCallback',{\"fontSize\":0}, function(res) {                         alert(JSON.stringify(res));\n           });\n         },0);\n      }\n   })();</code></pre>\n\n<p>&nbsp;</p>\n\n<ul><br>    <li><br>    <p>ios使用-webkit-text-size-adjust禁止调整字体大小</p><br>    </li><br></ul>\n\n<pre>\n<code>body{-webkit-text-size-adjust: 100%!important;}</code></pre>\n\n<p>最好的解决方案：</p>\n\n<ul><br>    <li><br>    <p>整个页面用rem或者百分比布局</p><br>    </li><br></ul>\n\n<h3>消除transition闪屏</h3>\n\n<p>网络都是这么写的，但我并没有测试出来</p>\n\n<pre>\n<code>.css{ /*设置内嵌的元素在 3D 空间如何呈现：保留 3D*/ -webkit-transform-style: preserve-3d; /*（设置进行转换的元素的背面在面对用户时是否可见：隐藏）*/ -webkit-backface-visibility: hidden; }</code></pre>\n\n<h3>开启硬件加速</h3>\n\n<ul><br>    <li><br>    <p>解决页面闪白</p><br>    </li><br>    <li><br>    <p>保证动画流畅</p><br>    </li><br></ul>\n\n<pre>\n<code>.css {    -webkit-transform: translate3d(0, 0, 0);    -moz-transform: translate3d(0, 0, 0);    -ms-transform: translate3d(0, 0, 0);    transform: translate3d(0, 0, 0); }</code></pre>\n\n<p>参考《<a href=\"http://www.cnblogs.com/PeunZhang/p/3510083.html\" target=\"_blank\">用CSS开启硬件加速来提高网站性能</a>》</p>\n\n<h3>取消input在ios下，输入的时候英文首字母的默认大写</h3>\n\n<pre>\n<code>&lt;input autocapitalize=\"off\" autocorrect=\"off\" /&gt;</code></pre>\n\n<h3>android 上去掉语音输入按钮</h3>\n\n<pre>\n<code>input::-webkit-input-speech-button {display: none}</code></pre>\n\n<h3>android 2.3 bug</h3>\n\n<ul><br>    <li><br>    <p>@-webkit-keyframes 需要以0%开始100%结束，0%的百分号不能去掉</p><br>    </li><br>    <li><br>    <p><span style=\"color:rgb(255, 0, 0)\">after和before伪类无法使用动画animation</span></p><br>    </li><br>    <li><br>    <p>border-radius不支持%单位</p><br>    </li><br>    <li><br>    <p>translate百分比的写法和scale在一起会导致失效，例如-webkit-transform: translate(-50%,-50%) scale(-0.5, 1)</p><br>    </li><br></ul>\n\n<h3>android 4.x bug</h3>\n\n<ul><br>    <li><br>    <p>三星 Galaxy S4中自带浏览器不支持border-radius缩写</p><br>    </li><br>    <li><br>    <p>同时设置border-radius和背景色的时候，背景色会溢出到圆角以外部分</p><br>    </li><br>    <li><br>    <p>部分手机(如三星)，a链接支持鼠标:visited事件，也就是说链接访问后文字变为紫色</p><br>    </li><br>    <li><br>    <p><span style=\"color:rgb(255, 0, 0)\">android无法同时播放多音频audio</span></p><br>    </li><br></ul>\n\n<p>参考《<a href=\"https://github.com/yisibl/blog/issues/2\" target=\"_blank\">border-radius 移动之伤</a>》</p>\n\n<h3>设计高性能CSS3动画的几个要素</h3>\n\n<ul><br>    <li><br>    <p>尽可能地使用合成属性transform和opacity来设计CSS3动画，不使用position的left和top来定位</p><br>    </li><br>    <li><br>    <p>利用translate3D开启GPU加速</p><br>    </li><br></ul>\n\n<p>参考《<a href=\"http://www.html5rocks.com/en/tutorials/speed/high-performance-animations/\" target=\"_blank\">High Performance Animations</a>》</p>\n\n<h3>fixed bug</h3>\n\n<ul><br>    <li><br>    <p>ios下fixed元素容易定位出错，软键盘弹出时，影响fixed元素定位</p><br>    </li><br>    <li><br>    <p>android下fixed表现要比iOS更好，软键盘弹出时，不会影响fixed元素定位</p><br>    </li><br>    <li><br>    <p>ios4下不支持position:fixed</p><br>    </li><br></ul>\n\n<p>解决方案</p>\n\n<ul><br>    <li><br>    <p>可用isroll.js，暂无完美方案</p><br>    </li><br></ul>\n\n<p>参考</p>\n\n<p>《<a href=\"https://github.com/maxzhang/maxzhang.github.com/issues/2\" target=\"_blank\">移动端web页面使用position:fixed问题总结</a>》</p>\n\n<p>《<a href=\"http://www.cnblogs.com/PeunZhang/archive/2013/06/14/3117589.html\" target=\"_blank\">使用iScroll.js解决ios4下不支持position:fixed的问题</a>》</p>\n\n<h3>&nbsp;如何阻止windows Phone的默认触摸事件</h3>\n\n<p>winphone下默认触摸事件事件使用e.preventDefault是无效的</p>\n\n<p>目前解决方法是使用样式来禁用</p>\n\n<pre>\n<code>html{-ms-touch-action: none;}/* 禁止winphone默认触摸事件 */</code></pre>\n\n<p>参考</p>\n\n<p>《<a href=\"http://stackoverflow.com/questions/13396297/windows-phone-8-touch-support\" target=\"_blank\">Windows phone 8 touch support</a>》</p>\n\n<h3>播放视频不全屏</h3>\n\n<pre>\n<code>&lt;!-- 1.目前只有ios7+、winphone8+支持自动播放 2.支持Airplay的设备（如：音箱、Apple TV)播放 x-webkit-airplay=\"true\"  3.播放视频不全屏，ios7+、winphone8+支持，部分android4+支持（含华为、小米、魅族） webkit-playsinline=\"true\"  --&gt; &lt;video x-webkit-airplay=\"true\" webkit-playsinline=\"true\" preload=\"auto\" autoplay src=\"http://\"&gt;&lt;/video&gt;</code></pre>\n\n<p><span style=\"color:rgb(0, 0, 0)\">体验demo：</span><span style=\"color:rgb(153, 204, 0)\"><a href=\"http://1.peunzhang.sinaapp.com/demo/video/index.html\" target=\"_blank\">http://1.peunzhang.sinaapp.com/demo/video/index.html</a></span></p>\n\n<h2><span style=\"color:rgb(153, 204, 0)\">常用的移动端框架</span></h2>\n\n<h3>zepto.js</h3>\n\n<p>语法与jquery几乎一样，会jquery基本会zepto~</p>\n\n<p>最新版本已经更新到1.16</p>\n\n<p>官网：<a href=\"http://zeptojs.com/\" target=\"_blank\">http://zeptojs.com/</a></p>\n\n<p>中文(非官网)：<a href=\"http://www.css88.com/doc/zeptojs_api/\" target=\"_blank\">http://www.css88.com/doc/zeptojs_api/</a></p>\n\n<p>常使用的扩展模块：</p>\n\n<p>浏览器检测：<a href=\"https://github.com/madrobby/zepto/blob/master/src/detect.js\" target=\"_blank\">https://github.com/madrobby/zepto/blob/master/src/detect.js</a></p>\n\n<p>tap事件：<a href=\"https://github.com/madrobby/zepto/blob/master/src/touch.js\" target=\"_blank\">https://github.com/madrobby/zepto/blob/master/src/touch.js</a></p>\n\n<h3>iscroll.js</h3>\n\n<p>解决页面不支持弹性滚动，不支持fixed引起的问题~</p>\n\n<p>实现下拉刷新，滑屏，缩放等功能~</p>\n\n<p>最新版本已经更新到5.0</p>\n\n<p>官网：<a href=\"http://cubiq.org/iscroll-5\" target=\"_blank\">http://cubiq.org/iscroll-5</a></p>\n\n<h3>underscore.js</h3>\n\n<p>笔者没用过，不过听说好用，推荐给大家~</p>\n\n<p>该库提供了一整套函数式编程的实用功能，但是没有扩展任何JavaScript内置对象。</p>\n\n<p>最新版本已经更新到1.8.2</p>\n\n<p>官网：<a href=\"http://underscorejs.org/\" target=\"_blank\">http://underscorejs.org/</a></p>\n\n<h3>滑屏框架</h3>\n\n<p>适合上下滑屏、左右滑屏等滑屏切换页面的效果</p>\n\n<p><a href=\"https://github.com/peunzhang/slip.js\" target=\"_blank\">slip.js</a></p>\n\n<p><a href=\"https://github.com/peunzhang/iSlider\" target=\"_blank\">iSlider.js</a></p>\n\n<p><a href=\"https://github.com/peunzhang/fullpage\" target=\"_blank\">fullpage.js</a></p>\n\n<p><a href=\"http://www.swiper.com.cn/\" target=\"_blank\">swiper.js</a></p>\n\n<h3>flex布局</h3>\n\n<p><span style=\"color:rgb(255, 0, 0)\">使用注意：</span></p>\n\n<ul><br>    <li><br>    <p><span style=\"color:rgb(255, 0, 0)\">flex下的子元素必须为块级元素，非块级元素在android2.3机器下flex失效</span></p><br>    </li><br>    <li><br>    <p><span style=\"color:rgb(255, 0, 0)\">flex下的子元素宽度和高度不能超过父元素，否则会导致子元素定位错误，例如水平垂直居中</span></p><br>    </li><br></ul>\n\n<h3>FastClick</h3>\n\n<p>消除在移动浏览器上触发click事件与一个物理Tap(敲击)之间的300延迟</p>\n\n<p>参考《<a href=\"https://github.com/ftlabs/fastclick\" target=\"_blank\">FastClick</a>》</p>\n\n<h3>Sea.js&nbsp;</h3>\n\n<p>提供简单、极致的模块化开发体验</p>\n\n<ul><br>    <li><br>    <p><strong>简单友好的模块定义规范</strong>：Sea.js 遵循&nbsp;<a href=\"https://github.com/cmdjs/specification/blob/master/draft/module.md\" target=\"_blank\">CMD</a>&nbsp;规范，可以像&nbsp;<a href=\"http://nodejs.org/\" target=\"_blank\">Node.js</a>&nbsp;一般书写模块代码。</p><br>    </li><br>    <li><br>    <p><strong>自然直观的代码组织方式</strong>：依赖的自动加载、配置的简洁清晰，可以让我们更多地享受编码的乐趣。</p><br>    </li><br></ul>\n\n<p>地址：<a href=\"http://seajs.org/docs/\" target=\"_blank\">http://seajs.org/docs/</a></p>\n\n<p>&nbsp;</p>"},{"title":"浏览器缓存机制","date":"2017-07-04T06:13:23.000Z","_content":"\n\n#### 浏览器缓存机制\n<div id=\"article_content\" class=\"article_content tracking-ad\" data-mod=\"popu_307\" data-dsm=\"post\">\n<p style=\" margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\">\n浏览器缓存的知识是前端工程师必须要掌握的，因为这些知识直接影响到你的页面的用户体验，影响到你的页面的加载策略。接下来将要详细的讲述浏览器缓存的概 念和原理，新人要仔细阅读，甚至要多次反刍，缓存的知识除了和浏览器有关，还涉及到HTTP协议，所以这也是比较难于掌握的内容。</p>\n<!--more-->\n<p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\">\n一般在硬件中，缓存在硬件中分一级缓存，二级缓存。但在软件中的缓存却不一样。</p>\n<p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\">\n狭义上讲缓存就叫高速缓存，严格讲就是将数据暂时存放到某个地方。先要声明下，我的定义可能不严格，但这是我的理解，通俗易懂。</p>\n<p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\">\n至于存到什么地方就有很多方式，可放到文件，内存中（如session），还有cache（高速缓存），还有 cookie，session，viewstate，这些是我们经常用到的，但可以认为他们是缓存数据。其实cache跟session有相似功能，但 cache可在代码中设置过期时间，依赖项。所谓依赖项（例如：微软的类cachedependcy sqlCacheDependency）当依赖项变动了，系统会通知cache过期，无效。以上只是说缓存，缓存可是有服务器缓存，客户端缓存啊。</p>\n\n<p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\">\n近些天研究了下客户端缓存（即浏览器缓存），我想跟大家分享，有什么不同意见可评论。</p>\n<p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\">\n估计大多数人很少说客户端缓存，包括我在内。那是因为我们编程时基本不考虑客户端缓存，书上也写得少。其实浏览器自动会管理缓存，但了解它至少知道有这么回事，有事编程还要控制客户端缓存。</p>\n<p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\">\n浏览器缓存就是当你打开一个网页，浏览器会自动下载副本到你电脑上，就相当于你另存为网页到某个地方而已，只不过这里是自动而已。当然不是浏览器能把各种 网页都能下载到本地电脑上，它是有特殊情况。一般html，后者request是get请求，而post一般不缓存。（这个后面会说到）</p>\n<p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\">\n当然客户端缓存是否需要是可以在服务端代码上控制的。那就是响应头。</p>\n<p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\">\n响应头告诉缓存器不要保留缓存，缓存器就不会缓存相应内容；</p>\n<p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\">\n如果请求信息是需要认证或者安全加密的，相应内容也不会被缓存；</p>\n<p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\">\n校验参数非常重要，如果回应中1个参数都不存在，并且没有任何信息说明保鲜期（Expires或Cache-Control）的情况下，缓存将不会存储任何副本； 最常见的校验参数是文档的最后修改时间，通过最后Last-Modified头信息可以，当一份缓存包含Last-Modified信息，他基于此信息，通过添加一个If-Modified-Since请求参数，向服务器查询：这个副本从上次查看后是否被修改了。&nbsp;<acronym title=\"Hyper Text Transfer Protocol\" style=\"border:0px\">HTTP</acronym>&nbsp;1.1介绍了另外一个校验参数：\n ETag，服务器是服务器生成的唯一标识符ETag，每次副本的标签都会变化。由于服务器控制了ETag如何生成，缓存服务器可以通过If-None-Match请求的返回没变则当前副本和原件完全一致。 所有的缓存服务器都使用Last-Modified时间来确定副本是否够新，而ETag校验正变得越来越流行。</p>\n<p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\">\n响应头如果是POST模式递交数据，则返回的页面大部分不会被浏览器缓存，如果你发送内容通过URL和查询（通过GET模式），则返回的内容可以缓存下来供以后使用。</p>\n<p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\">\nHTTP协议中关于缓存的信息头关键字包括Cache-Control(HTTP1.1)，Pragma(HTTP1.0)，last-Modified，Expires等。</p>\n<h3 style=\"margin:10px 0px; padding:0px; font-size:15px; font-family:arial\"><a name=\"t1\" target=\"_blank\"></a>缓存控制头 Cache-Control</h3>\n<p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\">\nCache-Control 是最重要的规则。这个字段用于指定所有缓存机制在整个请求/响应链中必须服从的指令。这些指令指定用于阻止缓存对请求或响应造成不利干扰的行为。这些指令 通常覆盖默认缓存<a href=\"http://lib.csdn.net/base/datastructure\" class=\"replace_word\" title=\"算法与数据结构知识库\" target=\"_blank\" style=\"color:#df3434; font-weight:bold;\">算法</a>。缓存指令是单向的，即请求中存在一个指令并不意味着响应中将存在同一个指令。</p>\n<p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\">\ncache-control 定义是：Cache-Control = “Cache-Control” “:” cache-directive。表 1 展示了适用的值。</p>\n<p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\">\n表 1. 常用 cache-directive 值</p>\n<table style=\"border-collapse:collapse; border-spacing:0px; border:1px solid rgb(255,142,66); margin:10px 0px; color:rgb(0,0,0); font-family:arial; font-size:13px; line-height:19.5px; background:rgb(255,255,144)\">\n<tbody>\n<tr>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Cache-directive</th>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">说明</th>\n</tr>\n<tr>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">public</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">所有内容都将被缓存</td>\n</tr>\n<tr>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">private</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">内容只缓存到私有缓存中</td>\n</tr>\n<tr>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">no-cache</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">所有内容都不会被缓存</td>\n</tr>\n<tr>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">no-store</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">所有内容都不会被缓存到缓存或 Internet 临时文件中</td>\n</tr>\n<tr>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">must-revalidation/proxy-revalidation</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">如果缓存的内容失效，请求必须发送到服务器/代理以进行重新验证</td>\n</tr>\n<tr>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">max-age=xxx (xxx is numeric)</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">缓存的内容将在 xxx 秒后失效, 这个选项只在HTTP 1.1可用, 并如果和Last-Modified一起使用时, 优先级较高</td>\n</tr>\n</tbody>\n</table>\n<p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\">\n表 2 表明在不同的情形下，浏览器是将请求重新发送到服务器还是使用缓存的内容。</p>\n<p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\">\n表 2. 对 cache-directive 值的浏览器响应</p>\n<table style=\"border-collapse:collapse; border-spacing:0px; border:1px solid rgb(255,142,66); margin:10px 0px; color:rgb(0,0,0); font-family:arial; font-size:13px; line-height:19.5px; background:rgb(255,255,144)\">\n<tbody>\n<tr>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Cache-directive</th>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">打开一个新的浏览器窗口</th>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">在原窗口中单击 Enter 按钮</th>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">刷新</th>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">单击 Back 按钮</th>\n</tr>\n<tr>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">public</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td>\n</tr>\n<tr>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">private</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">第一次，浏览器重新发送请求到服务器；此后，浏览器呈现来自缓存的页面</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td>\n</tr>\n<tr>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">no-cache/no-store</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器</td>\n</tr>\n<tr>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">must-revalidation/proxy-revalidation</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">第一次，浏览器重新发送请求到服务器；此后，浏览器呈现来自缓存的页面</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td>\n</tr>\n<tr>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">max-age=xxx (xxx is numeric)</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">在 xxx 秒后，浏览器重新发送请求到服务器</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">在 xxx 秒后，浏览器重新发送请求到服务器</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">在 xxx 秒后，浏览器重新发送请求到服务器</td>\n</tr>\n</tbody>\n</table>\n<p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\">\nCache-Control是关于浏览器缓存的最重要的设置，因为它覆盖其他设置，比如 Expires 和 Last-Modified。另外，由于浏览器的行为基本相同，这个属性是处理跨浏览器缓存问题的最有效的方法。</p>\n<h3 style=\"margin:10px 0px; padding:0px; font-size:15px; font-family:arial\"><a name=\"t2\" target=\"_blank\"></a>过期头 (Expires)</h3>\n<p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\">\nExpires 头部字段提供一个日期和时间，响应在该日期和时间后被认为失效。失效的缓存条目通常不会被缓存（无论是代理缓存还是用户代理缓存）返回，除非首先通过原始 服务器（或者拥有该实体的最新副本的中介缓存）验证。（注意：cache-control max-age 和 s-maxage 将覆盖 Expires 头部。）</p>\n<p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\">\nExpires 字段接收以下格式的值：“Expires: Sun, 08 Nov 2009 03:37:26 GMT”。如果查看内容时的日期在给定的日期之前，则认为该内容没有失效并从缓存中提取出来。反之，则认为该内容失效，缓存将采取一些措施。表 3-6 表明针对不同用户操作的不同浏览器的行为。</p>\n<p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\">\n表 3. 当用户打开一个新的浏览器窗口时的失效操作</p>\n<table style=\"border-collapse:collapse; border-spacing:0px; border:1px solid rgb(255,142,66); margin:10px 0px; color:rgb(0,0,0); font-family:arial; font-size:13px; line-height:19.5px; background:rgb(255,255,144)\">\n<tbody>\n<tr>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">&nbsp;</th>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Firefox 3.5</th>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\"><acronym title=\"Internet Explorer\" style=\"border:0px\">IE</acronym>&nbsp;8</th>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Chrome 3</th>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Safari 4</th>\n</tr>\n<tr>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">内容没有失效</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td>\n</tr>\n<tr>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">内容失效</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td>\n</tr>\n</tbody>\n</table>\n<p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\">\n表 4. 当用户在原始浏览器窗口中单击 Enter 按钮时的失效操作</p>\n<table style=\"border-collapse:collapse; border-spacing:0px; border:1px solid rgb(255,142,66); margin:10px 0px; color:rgb(0,0,0); font-family:arial; font-size:13px; line-height:19.5px; background:rgb(255,255,144)\">\n<tbody>\n<tr>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">&nbsp;</th>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Firefox 3.5</th>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\"><acronym title=\"Internet Explorer\" style=\"border:0px\">IE</acronym>&nbsp;8</th>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Chrome 3</th>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Safari 4</th>\n</tr>\n<tr>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">内容没有失效</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 304</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 304</td>\n</tr>\n<tr>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">内容失效</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td>\n</tr>\n</tbody>\n</table>\n<p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\">\n表 5. 当用户按 F5 键刷新页面时的失效操作</p>\n<table style=\"border-collapse:collapse; border-spacing:0px; border:1px solid rgb(255,142,66); margin:10px 0px; color:rgb(0,0,0); font-family:arial; font-size:13px; line-height:19.5px; background:rgb(255,255,144)\">\n<tbody>\n<tr>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">&nbsp;</th>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Firefox 3.5</th>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\"><acronym title=\"Internet Explorer\" style=\"border:0px\">IE</acronym>&nbsp;8</th>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Chrome 3</th>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Safari 4</th>\n</tr>\n<tr>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">内容没有失效</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 304</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 304</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 304</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 304</td>\n</tr>\n<tr>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">内容失效</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td>\n</tr>\n</tbody>\n</table>\n<p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\">\n表 6. 当用户单击 Back 或 Forward 按钮时的失效操作</p>\n<table style=\"border-collapse:collapse; border-spacing:0px; border:1px solid rgb(255,142,66); margin:10px 0px; color:rgb(0,0,0); font-family:arial; font-size:13px; line-height:19.5px; background:rgb(255,255,144)\">\n<tbody>\n<tr>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">&nbsp;</th>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Firefox 3.5</th>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\"><acronym title=\"Internet Explorer\" style=\"border:0px\">IE</acronym>&nbsp;8</th>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Chrome 3</th>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Safari 4</th>\n</tr>\n<tr>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">内容没有失效</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td>\n</tr>\n<tr>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">内容失效</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td>\n</tr>\n</tbody>\n</table>\n<p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\">\n注意：所有浏览器都假定为使用默认设置运行。</p>\n<h3 style=\"margin:10px 0px; padding:0px; font-size:15px; font-family:arial\"><a name=\"t3\" target=\"_blank\"></a>控制文件是否有修改 Last-Modified/E-Tag</h3>\n<p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\">\nLast-Modified 实体头部字段值通常用作一个缓存验证器。简单来说，如果实体值在 Last-Modified 值之后没有被更改，则认为该缓存条目有效。ETag 响应头部字段值是一个实体标记，它提供一个 “不透明” 的缓存验证器。这可能在以下几种情况下提供更可靠的验证：不方便存储修改日期；HTTP 日期值的 one-second 解决方案不够用；或者原始服务器希望避免由于使用修改日期而导致的某些冲突。</p>\n<p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\">\n不同的浏览器有不同的配置行为。表 7-10 表明针对不同用户操作的不同浏览器的行为。</p>\n<p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\">\n表 7. 当用户打开一个新的浏览器窗口时的 Last-Modified E-Tag 操作</p>\n<table style=\"border-collapse:collapse; border-spacing:0px; border:1px solid rgb(255,142,66); margin:10px 0px; color:rgb(0,0,0); font-family:arial; font-size:13px; line-height:19.5px; background:rgb(255,255,144)\">\n<tbody>\n<tr>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">&nbsp;</th>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Firefox 3.5</th>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\"><acronym title=\"Internet Explorer\" style=\"border:0px\">IE</acronym>&nbsp;8</th>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Chrome 3</th>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Safari 4</th>\n</tr>\n<tr>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">内容自上次访问以来没有被修改</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 304</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 304</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 304</td>\n</tr>\n<tr>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">内容自上次访问以来已经被修改</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td>\n</tr>\n</tbody>\n</table>\n<p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\">\n表 8. 当用户在原始浏览器窗口中单击 Enter 按钮时的 Last-Modified E-Tag 操作</p>\n<table style=\"border-collapse:collapse; border-spacing:0px; border:1px solid rgb(255,142,66); margin:10px 0px; color:rgb(0,0,0); font-family:arial; font-size:13px; line-height:19.5px; background:rgb(255,255,144)\">\n<tbody>\n<tr>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">&nbsp;</th>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Firefox 3.5</th>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\"><acronym title=\"Internet Explorer\" style=\"border:0px\">IE</acronym>&nbsp;8</th>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Chrome 3</th>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Safari 4</th>\n</tr>\n<tr>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">内容自上次访问以来没有被修改</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 304</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 304</td>\n</tr>\n<tr>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">内容自上次访问以来已经被修改</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td>\n</tr>\n</tbody>\n</table>\n<p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\">\n表 9. 当用户按 F5 键刷新页面时的 Last-Modified E-Tag 操作</p>\n<table style=\"border-collapse:collapse; border-spacing:0px; border:1px solid rgb(255,142,66); margin:10px 0px; color:rgb(0,0,0); font-family:arial; font-size:13px; line-height:19.5px; background:rgb(255,255,144)\">\n<tbody>\n<tr>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">&nbsp;</th>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Firefox 3.5</th>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\"><acronym title=\"Internet Explorer\" style=\"border:0px\">IE</acronym>&nbsp;8</th>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Chrome 3</th>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Safari 4</th>\n</tr>\n<tr>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">内容自上次访问以来没有被修改</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 304</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 304</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 304</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 304</td>\n</tr>\n<tr>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">内容自上次访问以来已经被修改</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td>\n</tr>\n</tbody>\n</table>\n<p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\">\n表 10. 没有缓存设置且用户单击 Back 或 Forward 按钮</p>\n<table style=\"border-collapse:collapse; border-spacing:0px; border:1px solid rgb(255,142,66); margin:10px 0px; color:rgb(0,0,0); font-family:arial; font-size:13px; line-height:19.5px; background:rgb(255,255,144)\">\n<tbody>\n<tr>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">&nbsp;</th>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Firefox 3.5</th>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\"><acronym title=\"Internet Explorer\" style=\"border:0px\">IE</acronym>&nbsp;8</th>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Chrome 3</th>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Safari 4</th>\n</tr>\n<tr>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">内容自上次访问以来没有被修改</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td>\n</tr>\n<tr>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">内容自上次访问以来已经被修改</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td>\n</tr>\n</tbody>\n</table>\n<p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\">\n注意：所有浏览器都假定使用默认设置运行。</p>\n<h3 style=\"margin:10px 0px; padding:0px; font-size:15px; font-family:arial\"><a name=\"t4\" target=\"_blank\"></a>不进行任何缓存相关设置</h3>\n<p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\">\n如果您不定义任何缓存相关设置，则不同的浏览器有不同的行为。有时，同一个浏览器在相同的情形下每次运行时的行为都是不同的。情况可能很复杂。另外，有些不该缓存的内容如果被缓存，将会导致安全问题。 不同的浏览器有不同的行为。表 11 展示了不同的浏览器行为。</p>\n<p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\">\n表 11. 没有缓存设置且用户打开一个新的浏览器窗口</p>\n<table style=\"border-collapse:collapse; border-spacing:0px; border:1px solid rgb(255,142,66); margin:10px 0px; color:rgb(0,0,0); font-family:arial; font-size:13px; line-height:19.5px; background:rgb(255,255,144)\">\n<tbody>\n<tr>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">&nbsp;</th>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Firefox 3.5</th>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\"><acronym title=\"Internet Explorer\" style=\"border:0px\">IE</acronym>&nbsp;8</th>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Chrome 3</th>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Safari 4</th>\n</tr>\n<tr>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">打开一个新页面</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td>\n</tr>\n<tr>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">在原始窗口中单击 Enter 按钮</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面。</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td>\n</tr>\n<tr>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">按 F5 键刷新</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td>\n</tr>\n<tr>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">单击 Back 或 Forward 按钮</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面。</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面。</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td>\n</tr>\n</tbody>\n</table>\n\n注意：所有浏览器都假定使用默认设置运行。\n<h3 style=\"margin:10px 0px; padding:0px; font-size:15px; font-family:arial\"><a name=\"t5\" target=\"_blank\"></a>关键结论</h3>\n\n最后, 概括下关键的结论\n<table style=\"border-collapse:collapse; border-spacing:0px; border:1px solid rgb(255,142,66); color:rgb(0,0,0); font-family:arial; font-size:13px; line-height:19.5px; background:rgb(255,255,144)\">\n<tbody>\n<tr>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">操作</th>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">行为</th>\n</tr>\n<tr>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">打开新窗口</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">如果指定cache- control的值为private、no-cache、must-revalidate,那么打开新窗口访问时都会重新访问服务器。而如果指定了 max-age值,那么在此值内的时间里就不会重新访问服务器,例如：Cache-control: max-age=5 表示当访问此网页后的5秒内再次访问不会去服务器.</td>\n</tr>\n<tr>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">在地址栏回车</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">如果值为private或must-revalidate,则只有第一次访问时会访问服务器,以后就不再访问。如果值为no-cache,那么每次都会访问。如果值为max-age,则在过期之前不会重复访问。</td>\n</tr>\n<tr>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">按后退按扭</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">如果值为private、must-revalidate、max-age,则不会重访问,而如果为no-cache,则每次都重复访问.</td>\n</tr>\n<tr>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">按刷新按扭</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\"><span style=\"font-family:arial; font-size:13px; line-height:19.5px; background-color:rgb(255,255,144)\">无论为何值,都会重复访问.</span></td>\n</tr>\n</tbody>\n</table>\n<br>\n\n</div>\n\n<style>\nbr{\ndisplay:none;\n}\n</style>\n","source":"_posts/浏览器缓存机制.md","raw":"---\ntitle: 浏览器缓存机制\ntags:\n  - '缓存机制'\ncategories:\n  - '前端'\n  - '知识点'\ndate: 2017-07-04 14:13:23\n---\n\n\n#### 浏览器缓存机制\n<div id=\"article_content\" class=\"article_content tracking-ad\" data-mod=\"popu_307\" data-dsm=\"post\">\n<p style=\" margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\">\n浏览器缓存的知识是前端工程师必须要掌握的，因为这些知识直接影响到你的页面的用户体验，影响到你的页面的加载策略。接下来将要详细的讲述浏览器缓存的概 念和原理，新人要仔细阅读，甚至要多次反刍，缓存的知识除了和浏览器有关，还涉及到HTTP协议，所以这也是比较难于掌握的内容。</p>\n<!--more-->\n<p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\">\n一般在硬件中，缓存在硬件中分一级缓存，二级缓存。但在软件中的缓存却不一样。</p>\n<p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\">\n狭义上讲缓存就叫高速缓存，严格讲就是将数据暂时存放到某个地方。先要声明下，我的定义可能不严格，但这是我的理解，通俗易懂。</p>\n<p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\">\n至于存到什么地方就有很多方式，可放到文件，内存中（如session），还有cache（高速缓存），还有 cookie，session，viewstate，这些是我们经常用到的，但可以认为他们是缓存数据。其实cache跟session有相似功能，但 cache可在代码中设置过期时间，依赖项。所谓依赖项（例如：微软的类cachedependcy sqlCacheDependency）当依赖项变动了，系统会通知cache过期，无效。以上只是说缓存，缓存可是有服务器缓存，客户端缓存啊。</p>\n\n<p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\">\n近些天研究了下客户端缓存（即浏览器缓存），我想跟大家分享，有什么不同意见可评论。</p>\n<p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\">\n估计大多数人很少说客户端缓存，包括我在内。那是因为我们编程时基本不考虑客户端缓存，书上也写得少。其实浏览器自动会管理缓存，但了解它至少知道有这么回事，有事编程还要控制客户端缓存。</p>\n<p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\">\n浏览器缓存就是当你打开一个网页，浏览器会自动下载副本到你电脑上，就相当于你另存为网页到某个地方而已，只不过这里是自动而已。当然不是浏览器能把各种 网页都能下载到本地电脑上，它是有特殊情况。一般html，后者request是get请求，而post一般不缓存。（这个后面会说到）</p>\n<p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\">\n当然客户端缓存是否需要是可以在服务端代码上控制的。那就是响应头。</p>\n<p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\">\n响应头告诉缓存器不要保留缓存，缓存器就不会缓存相应内容；</p>\n<p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\">\n如果请求信息是需要认证或者安全加密的，相应内容也不会被缓存；</p>\n<p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\">\n校验参数非常重要，如果回应中1个参数都不存在，并且没有任何信息说明保鲜期（Expires或Cache-Control）的情况下，缓存将不会存储任何副本； 最常见的校验参数是文档的最后修改时间，通过最后Last-Modified头信息可以，当一份缓存包含Last-Modified信息，他基于此信息，通过添加一个If-Modified-Since请求参数，向服务器查询：这个副本从上次查看后是否被修改了。&nbsp;<acronym title=\"Hyper Text Transfer Protocol\" style=\"border:0px\">HTTP</acronym>&nbsp;1.1介绍了另外一个校验参数：\n ETag，服务器是服务器生成的唯一标识符ETag，每次副本的标签都会变化。由于服务器控制了ETag如何生成，缓存服务器可以通过If-None-Match请求的返回没变则当前副本和原件完全一致。 所有的缓存服务器都使用Last-Modified时间来确定副本是否够新，而ETag校验正变得越来越流行。</p>\n<p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\">\n响应头如果是POST模式递交数据，则返回的页面大部分不会被浏览器缓存，如果你发送内容通过URL和查询（通过GET模式），则返回的内容可以缓存下来供以后使用。</p>\n<p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\">\nHTTP协议中关于缓存的信息头关键字包括Cache-Control(HTTP1.1)，Pragma(HTTP1.0)，last-Modified，Expires等。</p>\n<h3 style=\"margin:10px 0px; padding:0px; font-size:15px; font-family:arial\"><a name=\"t1\" target=\"_blank\"></a>缓存控制头 Cache-Control</h3>\n<p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\">\nCache-Control 是最重要的规则。这个字段用于指定所有缓存机制在整个请求/响应链中必须服从的指令。这些指令指定用于阻止缓存对请求或响应造成不利干扰的行为。这些指令 通常覆盖默认缓存<a href=\"http://lib.csdn.net/base/datastructure\" class=\"replace_word\" title=\"算法与数据结构知识库\" target=\"_blank\" style=\"color:#df3434; font-weight:bold;\">算法</a>。缓存指令是单向的，即请求中存在一个指令并不意味着响应中将存在同一个指令。</p>\n<p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\">\ncache-control 定义是：Cache-Control = “Cache-Control” “:” cache-directive。表 1 展示了适用的值。</p>\n<p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\">\n表 1. 常用 cache-directive 值</p>\n<table style=\"border-collapse:collapse; border-spacing:0px; border:1px solid rgb(255,142,66); margin:10px 0px; color:rgb(0,0,0); font-family:arial; font-size:13px; line-height:19.5px; background:rgb(255,255,144)\">\n<tbody>\n<tr>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Cache-directive</th>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">说明</th>\n</tr>\n<tr>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">public</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">所有内容都将被缓存</td>\n</tr>\n<tr>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">private</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">内容只缓存到私有缓存中</td>\n</tr>\n<tr>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">no-cache</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">所有内容都不会被缓存</td>\n</tr>\n<tr>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">no-store</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">所有内容都不会被缓存到缓存或 Internet 临时文件中</td>\n</tr>\n<tr>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">must-revalidation/proxy-revalidation</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">如果缓存的内容失效，请求必须发送到服务器/代理以进行重新验证</td>\n</tr>\n<tr>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">max-age=xxx (xxx is numeric)</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">缓存的内容将在 xxx 秒后失效, 这个选项只在HTTP 1.1可用, 并如果和Last-Modified一起使用时, 优先级较高</td>\n</tr>\n</tbody>\n</table>\n<p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\">\n表 2 表明在不同的情形下，浏览器是将请求重新发送到服务器还是使用缓存的内容。</p>\n<p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\">\n表 2. 对 cache-directive 值的浏览器响应</p>\n<table style=\"border-collapse:collapse; border-spacing:0px; border:1px solid rgb(255,142,66); margin:10px 0px; color:rgb(0,0,0); font-family:arial; font-size:13px; line-height:19.5px; background:rgb(255,255,144)\">\n<tbody>\n<tr>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Cache-directive</th>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">打开一个新的浏览器窗口</th>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">在原窗口中单击 Enter 按钮</th>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">刷新</th>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">单击 Back 按钮</th>\n</tr>\n<tr>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">public</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td>\n</tr>\n<tr>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">private</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">第一次，浏览器重新发送请求到服务器；此后，浏览器呈现来自缓存的页面</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td>\n</tr>\n<tr>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">no-cache/no-store</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器</td>\n</tr>\n<tr>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">must-revalidation/proxy-revalidation</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">第一次，浏览器重新发送请求到服务器；此后，浏览器呈现来自缓存的页面</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td>\n</tr>\n<tr>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">max-age=xxx (xxx is numeric)</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">在 xxx 秒后，浏览器重新发送请求到服务器</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">在 xxx 秒后，浏览器重新发送请求到服务器</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">在 xxx 秒后，浏览器重新发送请求到服务器</td>\n</tr>\n</tbody>\n</table>\n<p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\">\nCache-Control是关于浏览器缓存的最重要的设置，因为它覆盖其他设置，比如 Expires 和 Last-Modified。另外，由于浏览器的行为基本相同，这个属性是处理跨浏览器缓存问题的最有效的方法。</p>\n<h3 style=\"margin:10px 0px; padding:0px; font-size:15px; font-family:arial\"><a name=\"t2\" target=\"_blank\"></a>过期头 (Expires)</h3>\n<p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\">\nExpires 头部字段提供一个日期和时间，响应在该日期和时间后被认为失效。失效的缓存条目通常不会被缓存（无论是代理缓存还是用户代理缓存）返回，除非首先通过原始 服务器（或者拥有该实体的最新副本的中介缓存）验证。（注意：cache-control max-age 和 s-maxage 将覆盖 Expires 头部。）</p>\n<p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\">\nExpires 字段接收以下格式的值：“Expires: Sun, 08 Nov 2009 03:37:26 GMT”。如果查看内容时的日期在给定的日期之前，则认为该内容没有失效并从缓存中提取出来。反之，则认为该内容失效，缓存将采取一些措施。表 3-6 表明针对不同用户操作的不同浏览器的行为。</p>\n<p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\">\n表 3. 当用户打开一个新的浏览器窗口时的失效操作</p>\n<table style=\"border-collapse:collapse; border-spacing:0px; border:1px solid rgb(255,142,66); margin:10px 0px; color:rgb(0,0,0); font-family:arial; font-size:13px; line-height:19.5px; background:rgb(255,255,144)\">\n<tbody>\n<tr>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">&nbsp;</th>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Firefox 3.5</th>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\"><acronym title=\"Internet Explorer\" style=\"border:0px\">IE</acronym>&nbsp;8</th>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Chrome 3</th>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Safari 4</th>\n</tr>\n<tr>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">内容没有失效</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td>\n</tr>\n<tr>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">内容失效</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td>\n</tr>\n</tbody>\n</table>\n<p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\">\n表 4. 当用户在原始浏览器窗口中单击 Enter 按钮时的失效操作</p>\n<table style=\"border-collapse:collapse; border-spacing:0px; border:1px solid rgb(255,142,66); margin:10px 0px; color:rgb(0,0,0); font-family:arial; font-size:13px; line-height:19.5px; background:rgb(255,255,144)\">\n<tbody>\n<tr>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">&nbsp;</th>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Firefox 3.5</th>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\"><acronym title=\"Internet Explorer\" style=\"border:0px\">IE</acronym>&nbsp;8</th>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Chrome 3</th>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Safari 4</th>\n</tr>\n<tr>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">内容没有失效</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 304</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 304</td>\n</tr>\n<tr>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">内容失效</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td>\n</tr>\n</tbody>\n</table>\n<p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\">\n表 5. 当用户按 F5 键刷新页面时的失效操作</p>\n<table style=\"border-collapse:collapse; border-spacing:0px; border:1px solid rgb(255,142,66); margin:10px 0px; color:rgb(0,0,0); font-family:arial; font-size:13px; line-height:19.5px; background:rgb(255,255,144)\">\n<tbody>\n<tr>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">&nbsp;</th>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Firefox 3.5</th>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\"><acronym title=\"Internet Explorer\" style=\"border:0px\">IE</acronym>&nbsp;8</th>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Chrome 3</th>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Safari 4</th>\n</tr>\n<tr>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">内容没有失效</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 304</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 304</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 304</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 304</td>\n</tr>\n<tr>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">内容失效</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td>\n</tr>\n</tbody>\n</table>\n<p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\">\n表 6. 当用户单击 Back 或 Forward 按钮时的失效操作</p>\n<table style=\"border-collapse:collapse; border-spacing:0px; border:1px solid rgb(255,142,66); margin:10px 0px; color:rgb(0,0,0); font-family:arial; font-size:13px; line-height:19.5px; background:rgb(255,255,144)\">\n<tbody>\n<tr>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">&nbsp;</th>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Firefox 3.5</th>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\"><acronym title=\"Internet Explorer\" style=\"border:0px\">IE</acronym>&nbsp;8</th>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Chrome 3</th>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Safari 4</th>\n</tr>\n<tr>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">内容没有失效</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td>\n</tr>\n<tr>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">内容失效</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td>\n</tr>\n</tbody>\n</table>\n<p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\">\n注意：所有浏览器都假定为使用默认设置运行。</p>\n<h3 style=\"margin:10px 0px; padding:0px; font-size:15px; font-family:arial\"><a name=\"t3\" target=\"_blank\"></a>控制文件是否有修改 Last-Modified/E-Tag</h3>\n<p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\">\nLast-Modified 实体头部字段值通常用作一个缓存验证器。简单来说，如果实体值在 Last-Modified 值之后没有被更改，则认为该缓存条目有效。ETag 响应头部字段值是一个实体标记，它提供一个 “不透明” 的缓存验证器。这可能在以下几种情况下提供更可靠的验证：不方便存储修改日期；HTTP 日期值的 one-second 解决方案不够用；或者原始服务器希望避免由于使用修改日期而导致的某些冲突。</p>\n<p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\">\n不同的浏览器有不同的配置行为。表 7-10 表明针对不同用户操作的不同浏览器的行为。</p>\n<p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\">\n表 7. 当用户打开一个新的浏览器窗口时的 Last-Modified E-Tag 操作</p>\n<table style=\"border-collapse:collapse; border-spacing:0px; border:1px solid rgb(255,142,66); margin:10px 0px; color:rgb(0,0,0); font-family:arial; font-size:13px; line-height:19.5px; background:rgb(255,255,144)\">\n<tbody>\n<tr>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">&nbsp;</th>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Firefox 3.5</th>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\"><acronym title=\"Internet Explorer\" style=\"border:0px\">IE</acronym>&nbsp;8</th>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Chrome 3</th>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Safari 4</th>\n</tr>\n<tr>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">内容自上次访问以来没有被修改</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 304</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 304</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 304</td>\n</tr>\n<tr>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">内容自上次访问以来已经被修改</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td>\n</tr>\n</tbody>\n</table>\n<p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\">\n表 8. 当用户在原始浏览器窗口中单击 Enter 按钮时的 Last-Modified E-Tag 操作</p>\n<table style=\"border-collapse:collapse; border-spacing:0px; border:1px solid rgb(255,142,66); margin:10px 0px; color:rgb(0,0,0); font-family:arial; font-size:13px; line-height:19.5px; background:rgb(255,255,144)\">\n<tbody>\n<tr>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">&nbsp;</th>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Firefox 3.5</th>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\"><acronym title=\"Internet Explorer\" style=\"border:0px\">IE</acronym>&nbsp;8</th>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Chrome 3</th>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Safari 4</th>\n</tr>\n<tr>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">内容自上次访问以来没有被修改</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 304</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 304</td>\n</tr>\n<tr>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">内容自上次访问以来已经被修改</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td>\n</tr>\n</tbody>\n</table>\n<p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\">\n表 9. 当用户按 F5 键刷新页面时的 Last-Modified E-Tag 操作</p>\n<table style=\"border-collapse:collapse; border-spacing:0px; border:1px solid rgb(255,142,66); margin:10px 0px; color:rgb(0,0,0); font-family:arial; font-size:13px; line-height:19.5px; background:rgb(255,255,144)\">\n<tbody>\n<tr>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">&nbsp;</th>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Firefox 3.5</th>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\"><acronym title=\"Internet Explorer\" style=\"border:0px\">IE</acronym>&nbsp;8</th>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Chrome 3</th>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Safari 4</th>\n</tr>\n<tr>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">内容自上次访问以来没有被修改</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 304</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 304</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 304</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 304</td>\n</tr>\n<tr>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">内容自上次访问以来已经被修改</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td>\n</tr>\n</tbody>\n</table>\n<p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\">\n表 10. 没有缓存设置且用户单击 Back 或 Forward 按钮</p>\n<table style=\"border-collapse:collapse; border-spacing:0px; border:1px solid rgb(255,142,66); margin:10px 0px; color:rgb(0,0,0); font-family:arial; font-size:13px; line-height:19.5px; background:rgb(255,255,144)\">\n<tbody>\n<tr>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">&nbsp;</th>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Firefox 3.5</th>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\"><acronym title=\"Internet Explorer\" style=\"border:0px\">IE</acronym>&nbsp;8</th>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Chrome 3</th>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Safari 4</th>\n</tr>\n<tr>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">内容自上次访问以来没有被修改</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td>\n</tr>\n<tr>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">内容自上次访问以来已经被修改</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td>\n</tr>\n</tbody>\n</table>\n<p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\">\n注意：所有浏览器都假定使用默认设置运行。</p>\n<h3 style=\"margin:10px 0px; padding:0px; font-size:15px; font-family:arial\"><a name=\"t4\" target=\"_blank\"></a>不进行任何缓存相关设置</h3>\n<p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\">\n如果您不定义任何缓存相关设置，则不同的浏览器有不同的行为。有时，同一个浏览器在相同的情形下每次运行时的行为都是不同的。情况可能很复杂。另外，有些不该缓存的内容如果被缓存，将会导致安全问题。 不同的浏览器有不同的行为。表 11 展示了不同的浏览器行为。</p>\n<p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\">\n表 11. 没有缓存设置且用户打开一个新的浏览器窗口</p>\n<table style=\"border-collapse:collapse; border-spacing:0px; border:1px solid rgb(255,142,66); margin:10px 0px; color:rgb(0,0,0); font-family:arial; font-size:13px; line-height:19.5px; background:rgb(255,255,144)\">\n<tbody>\n<tr>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">&nbsp;</th>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Firefox 3.5</th>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\"><acronym title=\"Internet Explorer\" style=\"border:0px\">IE</acronym>&nbsp;8</th>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Chrome 3</th>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Safari 4</th>\n</tr>\n<tr>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">打开一个新页面</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td>\n</tr>\n<tr>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">在原始窗口中单击 Enter 按钮</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面。</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td>\n</tr>\n<tr>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">按 F5 键刷新</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td>\n</tr>\n<tr>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">单击 Back 或 Forward 按钮</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面。</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面。</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td>\n</tr>\n</tbody>\n</table>\n\n注意：所有浏览器都假定使用默认设置运行。\n<h3 style=\"margin:10px 0px; padding:0px; font-size:15px; font-family:arial\"><a name=\"t5\" target=\"_blank\"></a>关键结论</h3>\n\n最后, 概括下关键的结论\n<table style=\"border-collapse:collapse; border-spacing:0px; border:1px solid rgb(255,142,66); color:rgb(0,0,0); font-family:arial; font-size:13px; line-height:19.5px; background:rgb(255,255,144)\">\n<tbody>\n<tr>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">操作</th>\n<th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">行为</th>\n</tr>\n<tr>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">打开新窗口</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">如果指定cache- control的值为private、no-cache、must-revalidate,那么打开新窗口访问时都会重新访问服务器。而如果指定了 max-age值,那么在此值内的时间里就不会重新访问服务器,例如：Cache-control: max-age=5 表示当访问此网页后的5秒内再次访问不会去服务器.</td>\n</tr>\n<tr>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">在地址栏回车</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">如果值为private或must-revalidate,则只有第一次访问时会访问服务器,以后就不再访问。如果值为no-cache,那么每次都会访问。如果值为max-age,则在过期之前不会重复访问。</td>\n</tr>\n<tr>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">按后退按扭</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">如果值为private、must-revalidate、max-age,则不会重访问,而如果为no-cache,则每次都重复访问.</td>\n</tr>\n<tr>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">按刷新按扭</td>\n<td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\"><span style=\"font-family:arial; font-size:13px; line-height:19.5px; background-color:rgb(255,255,144)\">无论为何值,都会重复访问.</span></td>\n</tr>\n</tbody>\n</table>\n<br>\n\n</div>\n\n<style>\nbr{\ndisplay:none;\n}\n</style>\n","slug":"浏览器缓存机制","published":1,"updated":"2017-07-04T06:33:55.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5naxw5s002efcxempxqsqp4","content":"<h4 id=\"浏览器缓存机制\"><a href=\"#浏览器缓存机制\" class=\"headerlink\" title=\"浏览器缓存机制\"></a>浏览器缓存机制</h4><div id=\"article_content\" class=\"article_content tracking-ad\" data-mod=\"popu_307\" data-dsm=\"post\"><br><p style=\" margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\"><br>浏览器缓存的知识是前端工程师必须要掌握的，因为这些知识直接影响到你的页面的用户体验，影响到你的页面的加载策略。接下来将要详细的讲述浏览器缓存的概 念和原理，新人要仔细阅读，甚至要多次反刍，缓存的知识除了和浏览器有关，还涉及到HTTP协议，所以这也是比较难于掌握的内容。</p><br><a id=\"more\"></a><br><p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\"><br>一般在硬件中，缓存在硬件中分一级缓存，二级缓存。但在软件中的缓存却不一样。</p><br><p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\"><br>狭义上讲缓存就叫高速缓存，严格讲就是将数据暂时存放到某个地方。先要声明下，我的定义可能不严格，但这是我的理解，通俗易懂。</p><br><p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\"><br>至于存到什么地方就有很多方式，可放到文件，内存中（如session），还有cache（高速缓存），还有 cookie，session，viewstate，这些是我们经常用到的，但可以认为他们是缓存数据。其实cache跟session有相似功能，但 cache可在代码中设置过期时间，依赖项。所谓依赖项（例如：微软的类cachedependcy sqlCacheDependency）当依赖项变动了，系统会通知cache过期，无效。以上只是说缓存，缓存可是有服务器缓存，客户端缓存啊。</p><br><br><p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\"><br>近些天研究了下客户端缓存（即浏览器缓存），我想跟大家分享，有什么不同意见可评论。</p><br><p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\"><br>估计大多数人很少说客户端缓存，包括我在内。那是因为我们编程时基本不考虑客户端缓存，书上也写得少。其实浏览器自动会管理缓存，但了解它至少知道有这么回事，有事编程还要控制客户端缓存。</p><br><p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\"><br>浏览器缓存就是当你打开一个网页，浏览器会自动下载副本到你电脑上，就相当于你另存为网页到某个地方而已，只不过这里是自动而已。当然不是浏览器能把各种 网页都能下载到本地电脑上，它是有特殊情况。一般html，后者request是get请求，而post一般不缓存。（这个后面会说到）</p><br><p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\"><br>当然客户端缓存是否需要是可以在服务端代码上控制的。那就是响应头。</p><br><p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\"><br>响应头告诉缓存器不要保留缓存，缓存器就不会缓存相应内容；</p><br><p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\"><br>如果请求信息是需要认证或者安全加密的，相应内容也不会被缓存；</p><br><p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\"><br>校验参数非常重要，如果回应中1个参数都不存在，并且没有任何信息说明保鲜期（Expires或Cache-Control）的情况下，缓存将不会存储任何副本； 最常见的校验参数是文档的最后修改时间，通过最后Last-Modified头信息可以，当一份缓存包含Last-Modified信息，他基于此信息，通过添加一个If-Modified-Since请求参数，向服务器查询：这个副本从上次查看后是否被修改了。&nbsp;<acronym title=\"Hyper Text Transfer Protocol\" style=\"border:0px\">HTTP</acronym>&nbsp;1.1介绍了另外一个校验参数：<br> ETag，服务器是服务器生成的唯一标识符ETag，每次副本的标签都会变化。由于服务器控制了ETag如何生成，缓存服务器可以通过If-None-Match请求的返回没变则当前副本和原件完全一致。 所有的缓存服务器都使用Last-Modified时间来确定副本是否够新，而ETag校验正变得越来越流行。</p><br><p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\"><br>响应头如果是POST模式递交数据，则返回的页面大部分不会被浏览器缓存，如果你发送内容通过URL和查询（通过GET模式），则返回的内容可以缓存下来供以后使用。</p><br><p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\"><br>HTTP协议中关于缓存的信息头关键字包括Cache-Control(HTTP1.1)，Pragma(HTTP1.0)，last-Modified，Expires等。</p><br><h3 style=\"margin:10px 0px; padding:0px; font-size:15px; font-family:arial\"><a name=\"t1\" target=\"_blank\"></a>缓存控制头 Cache-Control</h3><br><p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\"><br>Cache-Control 是最重要的规则。这个字段用于指定所有缓存机制在整个请求/响应链中必须服从的指令。这些指令指定用于阻止缓存对请求或响应造成不利干扰的行为。这些指令 通常覆盖默认缓存<a href=\"http://lib.csdn.net/base/datastructure\" class=\"replace_word\" title=\"算法与数据结构知识库\" target=\"_blank\" style=\"color:#df3434; font-weight:bold;\">算法</a>。缓存指令是单向的，即请求中存在一个指令并不意味着响应中将存在同一个指令。</p><br><p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\"><br>cache-control 定义是：Cache-Control = “Cache-Control” “:” cache-directive。表 1 展示了适用的值。</p><br><p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\"><br>表 1. 常用 cache-directive 值</p><br><table style=\"border-collapse:collapse; border-spacing:0px; border:1px solid rgb(255,142,66); margin:10px 0px; color:rgb(0,0,0); font-family:arial; font-size:13px; line-height:19.5px; background:rgb(255,255,144)\"><br><tbody><br><tr><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Cache-directive</th><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">说明</th><br></tr><br><tr><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">public</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">所有内容都将被缓存</td><br></tr><br><tr><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">private</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">内容只缓存到私有缓存中</td><br></tr><br><tr><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">no-cache</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">所有内容都不会被缓存</td><br></tr><br><tr><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">no-store</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">所有内容都不会被缓存到缓存或 Internet 临时文件中</td><br></tr><br><tr><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">must-revalidation/proxy-revalidation</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">如果缓存的内容失效，请求必须发送到服务器/代理以进行重新验证</td><br></tr><br><tr><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">max-age=xxx (xxx is numeric)</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">缓存的内容将在 xxx 秒后失效, 这个选项只在HTTP 1.1可用, 并如果和Last-Modified一起使用时, 优先级较高</td><br></tr><br></tbody><br></table><br><p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\"><br>表 2 表明在不同的情形下，浏览器是将请求重新发送到服务器还是使用缓存的内容。</p><br><p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\"><br>表 2. 对 cache-directive 值的浏览器响应</p><br><table style=\"border-collapse:collapse; border-spacing:0px; border:1px solid rgb(255,142,66); margin:10px 0px; color:rgb(0,0,0); font-family:arial; font-size:13px; line-height:19.5px; background:rgb(255,255,144)\"><br><tbody><br><tr><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Cache-directive</th><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">打开一个新的浏览器窗口</th><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">在原窗口中单击 Enter 按钮</th><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">刷新</th><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">单击 Back 按钮</th><br></tr><br><tr><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">public</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td><br></tr><br><tr><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">private</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">第一次，浏览器重新发送请求到服务器；此后，浏览器呈现来自缓存的页面</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td><br></tr><br><tr><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">no-cache/no-store</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器</td><br></tr><br><tr><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">must-revalidation/proxy-revalidation</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">第一次，浏览器重新发送请求到服务器；此后，浏览器呈现来自缓存的页面</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td><br></tr><br><tr><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">max-age=xxx (xxx is numeric)</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">在 xxx 秒后，浏览器重新发送请求到服务器</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">在 xxx 秒后，浏览器重新发送请求到服务器</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">在 xxx 秒后，浏览器重新发送请求到服务器</td><br></tr><br></tbody><br></table><br><p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\"><br>Cache-Control是关于浏览器缓存的最重要的设置，因为它覆盖其他设置，比如 Expires 和 Last-Modified。另外，由于浏览器的行为基本相同，这个属性是处理跨浏览器缓存问题的最有效的方法。</p><br><h3 style=\"margin:10px 0px; padding:0px; font-size:15px; font-family:arial\"><a name=\"t2\" target=\"_blank\"></a>过期头 (Expires)</h3><br><p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\"><br>Expires 头部字段提供一个日期和时间，响应在该日期和时间后被认为失效。失效的缓存条目通常不会被缓存（无论是代理缓存还是用户代理缓存）返回，除非首先通过原始 服务器（或者拥有该实体的最新副本的中介缓存）验证。（注意：cache-control max-age 和 s-maxage 将覆盖 Expires 头部。）</p><br><p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\"><br>Expires 字段接收以下格式的值：“Expires: Sun, 08 Nov 2009 03:37:26 GMT”。如果查看内容时的日期在给定的日期之前，则认为该内容没有失效并从缓存中提取出来。反之，则认为该内容失效，缓存将采取一些措施。表 3-6 表明针对不同用户操作的不同浏览器的行为。</p><br><p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\"><br>表 3. 当用户打开一个新的浏览器窗口时的失效操作</p><br><table style=\"border-collapse:collapse; border-spacing:0px; border:1px solid rgb(255,142,66); margin:10px 0px; color:rgb(0,0,0); font-family:arial; font-size:13px; line-height:19.5px; background:rgb(255,255,144)\"><br><tbody><br><tr><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">&nbsp;</th><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Firefox 3.5</th><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\"><acronym title=\"Internet Explorer\" style=\"border:0px\">IE</acronym>&nbsp;8</th><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Chrome 3</th><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Safari 4</th><br></tr><br><tr><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">内容没有失效</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td><br></tr><br><tr><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">内容失效</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td><br></tr><br></tbody><br></table><br><p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\"><br>表 4. 当用户在原始浏览器窗口中单击 Enter 按钮时的失效操作</p><br><table style=\"border-collapse:collapse; border-spacing:0px; border:1px solid rgb(255,142,66); margin:10px 0px; color:rgb(0,0,0); font-family:arial; font-size:13px; line-height:19.5px; background:rgb(255,255,144)\"><br><tbody><br><tr><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">&nbsp;</th><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Firefox 3.5</th><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\"><acronym title=\"Internet Explorer\" style=\"border:0px\">IE</acronym>&nbsp;8</th><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Chrome 3</th><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Safari 4</th><br></tr><br><tr><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">内容没有失效</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 304</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 304</td><br></tr><br><tr><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">内容失效</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td><br></tr><br></tbody><br></table><br><p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\"><br>表 5. 当用户按 F5 键刷新页面时的失效操作</p><br><table style=\"border-collapse:collapse; border-spacing:0px; border:1px solid rgb(255,142,66); margin:10px 0px; color:rgb(0,0,0); font-family:arial; font-size:13px; line-height:19.5px; background:rgb(255,255,144)\"><br><tbody><br><tr><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">&nbsp;</th><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Firefox 3.5</th><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\"><acronym title=\"Internet Explorer\" style=\"border:0px\">IE</acronym>&nbsp;8</th><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Chrome 3</th><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Safari 4</th><br></tr><br><tr><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">内容没有失效</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 304</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 304</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 304</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 304</td><br></tr><br><tr><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">内容失效</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td><br></tr><br></tbody><br></table><br><p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\"><br>表 6. 当用户单击 Back 或 Forward 按钮时的失效操作</p><br><table style=\"border-collapse:collapse; border-spacing:0px; border:1px solid rgb(255,142,66); margin:10px 0px; color:rgb(0,0,0); font-family:arial; font-size:13px; line-height:19.5px; background:rgb(255,255,144)\"><br><tbody><br><tr><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">&nbsp;</th><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Firefox 3.5</th><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\"><acronym title=\"Internet Explorer\" style=\"border:0px\">IE</acronym>&nbsp;8</th><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Chrome 3</th><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Safari 4</th><br></tr><br><tr><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">内容没有失效</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td><br></tr><br><tr><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">内容失效</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td><br></tr><br></tbody><br></table><br><p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\"><br>注意：所有浏览器都假定为使用默认设置运行。</p><br><h3 style=\"margin:10px 0px; padding:0px; font-size:15px; font-family:arial\"><a name=\"t3\" target=\"_blank\"></a>控制文件是否有修改 Last-Modified/E-Tag</h3><br><p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\"><br>Last-Modified 实体头部字段值通常用作一个缓存验证器。简单来说，如果实体值在 Last-Modified 值之后没有被更改，则认为该缓存条目有效。ETag 响应头部字段值是一个实体标记，它提供一个 “不透明” 的缓存验证器。这可能在以下几种情况下提供更可靠的验证：不方便存储修改日期；HTTP 日期值的 one-second 解决方案不够用；或者原始服务器希望避免由于使用修改日期而导致的某些冲突。</p><br><p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\"><br>不同的浏览器有不同的配置行为。表 7-10 表明针对不同用户操作的不同浏览器的行为。</p><br><p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\"><br>表 7. 当用户打开一个新的浏览器窗口时的 Last-Modified E-Tag 操作</p><br><table style=\"border-collapse:collapse; border-spacing:0px; border:1px solid rgb(255,142,66); margin:10px 0px; color:rgb(0,0,0); font-family:arial; font-size:13px; line-height:19.5px; background:rgb(255,255,144)\"><br><tbody><br><tr><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">&nbsp;</th><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Firefox 3.5</th><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\"><acronym title=\"Internet Explorer\" style=\"border:0px\">IE</acronym>&nbsp;8</th><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Chrome 3</th><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Safari 4</th><br></tr><br><tr><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">内容自上次访问以来没有被修改</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 304</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 304</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 304</td><br></tr><br><tr><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">内容自上次访问以来已经被修改</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td><br></tr><br></tbody><br></table><br><p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\"><br>表 8. 当用户在原始浏览器窗口中单击 Enter 按钮时的 Last-Modified E-Tag 操作</p><br><table style=\"border-collapse:collapse; border-spacing:0px; border:1px solid rgb(255,142,66); margin:10px 0px; color:rgb(0,0,0); font-family:arial; font-size:13px; line-height:19.5px; background:rgb(255,255,144)\"><br><tbody><br><tr><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">&nbsp;</th><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Firefox 3.5</th><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\"><acronym title=\"Internet Explorer\" style=\"border:0px\">IE</acronym>&nbsp;8</th><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Chrome 3</th><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Safari 4</th><br></tr><br><tr><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">内容自上次访问以来没有被修改</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 304</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 304</td><br></tr><br><tr><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">内容自上次访问以来已经被修改</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td><br></tr><br></tbody><br></table><br><p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\"><br>表 9. 当用户按 F5 键刷新页面时的 Last-Modified E-Tag 操作</p><br><table style=\"border-collapse:collapse; border-spacing:0px; border:1px solid rgb(255,142,66); margin:10px 0px; color:rgb(0,0,0); font-family:arial; font-size:13px; line-height:19.5px; background:rgb(255,255,144)\"><br><tbody><br><tr><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">&nbsp;</th><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Firefox 3.5</th><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\"><acronym title=\"Internet Explorer\" style=\"border:0px\">IE</acronym>&nbsp;8</th><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Chrome 3</th><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Safari 4</th><br></tr><br><tr><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">内容自上次访问以来没有被修改</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 304</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 304</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 304</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 304</td><br></tr><br><tr><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">内容自上次访问以来已经被修改</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td><br></tr><br></tbody><br></table><br><p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\"><br>表 10. 没有缓存设置且用户单击 Back 或 Forward 按钮</p><br><table style=\"border-collapse:collapse; border-spacing:0px; border:1px solid rgb(255,142,66); margin:10px 0px; color:rgb(0,0,0); font-family:arial; font-size:13px; line-height:19.5px; background:rgb(255,255,144)\"><br><tbody><br><tr><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">&nbsp;</th><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Firefox 3.5</th><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\"><acronym title=\"Internet Explorer\" style=\"border:0px\">IE</acronym>&nbsp;8</th><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Chrome 3</th><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Safari 4</th><br></tr><br><tr><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">内容自上次访问以来没有被修改</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td><br></tr><br><tr><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">内容自上次访问以来已经被修改</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td><br></tr><br></tbody><br></table><br><p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\"><br>注意：所有浏览器都假定使用默认设置运行。</p><br><h3 style=\"margin:10px 0px; padding:0px; font-size:15px; font-family:arial\"><a name=\"t4\" target=\"_blank\"></a>不进行任何缓存相关设置</h3><br><p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\"><br>如果您不定义任何缓存相关设置，则不同的浏览器有不同的行为。有时，同一个浏览器在相同的情形下每次运行时的行为都是不同的。情况可能很复杂。另外，有些不该缓存的内容如果被缓存，将会导致安全问题。 不同的浏览器有不同的行为。表 11 展示了不同的浏览器行为。</p><br><p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\"><br>表 11. 没有缓存设置且用户打开一个新的浏览器窗口</p><br><table style=\"border-collapse:collapse; border-spacing:0px; border:1px solid rgb(255,142,66); margin:10px 0px; color:rgb(0,0,0); font-family:arial; font-size:13px; line-height:19.5px; background:rgb(255,255,144)\"><br><tbody><br><tr><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">&nbsp;</th><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Firefox 3.5</th><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\"><acronym title=\"Internet Explorer\" style=\"border:0px\">IE</acronym>&nbsp;8</th><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Chrome 3</th><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Safari 4</th><br></tr><br><tr><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">打开一个新页面</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td><br></tr><br><tr><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">在原始窗口中单击 Enter 按钮</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面。</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td><br></tr><br><tr><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">按 F5 键刷新</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td><br></tr><br><tr><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">单击 Back 或 Forward 按钮</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面。</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面。</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td><br></tr><br></tbody><br></table><br><br>注意：所有浏览器都假定使用默认设置运行。<br><h3 style=\"margin:10px 0px; padding:0px; font-size:15px; font-family:arial\"><a name=\"t5\" target=\"_blank\"></a>关键结论</h3><br><br>最后, 概括下关键的结论<br><table style=\"border-collapse:collapse; border-spacing:0px; border:1px solid rgb(255,142,66); color:rgb(0,0,0); font-family:arial; font-size:13px; line-height:19.5px; background:rgb(255,255,144)\"><br><tbody><br><tr><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">操作</th><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">行为</th><br></tr><br><tr><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">打开新窗口</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">如果指定cache- control的值为private、no-cache、must-revalidate,那么打开新窗口访问时都会重新访问服务器。而如果指定了 max-age值,那么在此值内的时间里就不会重新访问服务器,例如：Cache-control: max-age=5 表示当访问此网页后的5秒内再次访问不会去服务器.</td><br></tr><br><tr><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">在地址栏回车</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">如果值为private或must-revalidate,则只有第一次访问时会访问服务器,以后就不再访问。如果值为no-cache,那么每次都会访问。如果值为max-age,则在过期之前不会重复访问。</td><br></tr><br><tr><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">按后退按扭</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">如果值为private、must-revalidate、max-age,则不会重访问,而如果为no-cache,则每次都重复访问.</td><br></tr><br><tr><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">按刷新按扭</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\"><span style=\"font-family:arial; font-size:13px; line-height:19.5px; background-color:rgb(255,255,144)\">无论为何值,都会重复访问.</span></td><br></tr><br></tbody><br></table><br><br><br><br></div>\n\n<style>\nbr{\ndisplay:none;\n}\n</style>\n","excerpt":"<h4 id=\"浏览器缓存机制\"><a href=\"#浏览器缓存机制\" class=\"headerlink\" title=\"浏览器缓存机制\"></a>浏览器缓存机制</h4><div id=\"article_content\" class=\"article_content tracking-ad\" data-mod=\"popu_307\" data-dsm=\"post\"><br><p style=\" margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\"><br>浏览器缓存的知识是前端工程师必须要掌握的，因为这些知识直接影响到你的页面的用户体验，影响到你的页面的加载策略。接下来将要详细的讲述浏览器缓存的概 念和原理，新人要仔细阅读，甚至要多次反刍，缓存的知识除了和浏览器有关，还涉及到HTTP协议，所以这也是比较难于掌握的内容。</p><br>","more":"<br><p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\"><br>一般在硬件中，缓存在硬件中分一级缓存，二级缓存。但在软件中的缓存却不一样。</p><br><p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\"><br>狭义上讲缓存就叫高速缓存，严格讲就是将数据暂时存放到某个地方。先要声明下，我的定义可能不严格，但这是我的理解，通俗易懂。</p><br><p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\"><br>至于存到什么地方就有很多方式，可放到文件，内存中（如session），还有cache（高速缓存），还有 cookie，session，viewstate，这些是我们经常用到的，但可以认为他们是缓存数据。其实cache跟session有相似功能，但 cache可在代码中设置过期时间，依赖项。所谓依赖项（例如：微软的类cachedependcy sqlCacheDependency）当依赖项变动了，系统会通知cache过期，无效。以上只是说缓存，缓存可是有服务器缓存，客户端缓存啊。</p><br><br><p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\"><br>近些天研究了下客户端缓存（即浏览器缓存），我想跟大家分享，有什么不同意见可评论。</p><br><p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\"><br>估计大多数人很少说客户端缓存，包括我在内。那是因为我们编程时基本不考虑客户端缓存，书上也写得少。其实浏览器自动会管理缓存，但了解它至少知道有这么回事，有事编程还要控制客户端缓存。</p><br><p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\"><br>浏览器缓存就是当你打开一个网页，浏览器会自动下载副本到你电脑上，就相当于你另存为网页到某个地方而已，只不过这里是自动而已。当然不是浏览器能把各种 网页都能下载到本地电脑上，它是有特殊情况。一般html，后者request是get请求，而post一般不缓存。（这个后面会说到）</p><br><p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\"><br>当然客户端缓存是否需要是可以在服务端代码上控制的。那就是响应头。</p><br><p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\"><br>响应头告诉缓存器不要保留缓存，缓存器就不会缓存相应内容；</p><br><p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\"><br>如果请求信息是需要认证或者安全加密的，相应内容也不会被缓存；</p><br><p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\"><br>校验参数非常重要，如果回应中1个参数都不存在，并且没有任何信息说明保鲜期（Expires或Cache-Control）的情况下，缓存将不会存储任何副本； 最常见的校验参数是文档的最后修改时间，通过最后Last-Modified头信息可以，当一份缓存包含Last-Modified信息，他基于此信息，通过添加一个If-Modified-Since请求参数，向服务器查询：这个副本从上次查看后是否被修改了。&nbsp;<acronym title=\"Hyper Text Transfer Protocol\" style=\"border:0px\">HTTP</acronym>&nbsp;1.1介绍了另外一个校验参数：<br> ETag，服务器是服务器生成的唯一标识符ETag，每次副本的标签都会变化。由于服务器控制了ETag如何生成，缓存服务器可以通过If-None-Match请求的返回没变则当前副本和原件完全一致。 所有的缓存服务器都使用Last-Modified时间来确定副本是否够新，而ETag校验正变得越来越流行。</p><br><p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\"><br>响应头如果是POST模式递交数据，则返回的页面大部分不会被浏览器缓存，如果你发送内容通过URL和查询（通过GET模式），则返回的内容可以缓存下来供以后使用。</p><br><p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\"><br>HTTP协议中关于缓存的信息头关键字包括Cache-Control(HTTP1.1)，Pragma(HTTP1.0)，last-Modified，Expires等。</p><br><h3 style=\"margin:10px 0px; padding:0px; font-size:15px; font-family:arial\"><a name=\"t1\" target=\"_blank\"></a>缓存控制头 Cache-Control</h3><br><p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\"><br>Cache-Control 是最重要的规则。这个字段用于指定所有缓存机制在整个请求/响应链中必须服从的指令。这些指令指定用于阻止缓存对请求或响应造成不利干扰的行为。这些指令 通常覆盖默认缓存<a href=\"http://lib.csdn.net/base/datastructure\" class=\"replace_word\" title=\"算法与数据结构知识库\" target=\"_blank\" style=\"color:#df3434; font-weight:bold;\">算法</a>。缓存指令是单向的，即请求中存在一个指令并不意味着响应中将存在同一个指令。</p><br><p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\"><br>cache-control 定义是：Cache-Control = “Cache-Control” “:” cache-directive。表 1 展示了适用的值。</p><br><p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\"><br>表 1. 常用 cache-directive 值</p><br><table style=\"border-collapse:collapse; border-spacing:0px; border:1px solid rgb(255,142,66); margin:10px 0px; color:rgb(0,0,0); font-family:arial; font-size:13px; line-height:19.5px; background:rgb(255,255,144)\"><br><tbody><br><tr><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Cache-directive</th><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">说明</th><br></tr><br><tr><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">public</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">所有内容都将被缓存</td><br></tr><br><tr><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">private</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">内容只缓存到私有缓存中</td><br></tr><br><tr><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">no-cache</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">所有内容都不会被缓存</td><br></tr><br><tr><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">no-store</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">所有内容都不会被缓存到缓存或 Internet 临时文件中</td><br></tr><br><tr><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">must-revalidation/proxy-revalidation</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">如果缓存的内容失效，请求必须发送到服务器/代理以进行重新验证</td><br></tr><br><tr><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">max-age=xxx (xxx is numeric)</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">缓存的内容将在 xxx 秒后失效, 这个选项只在HTTP 1.1可用, 并如果和Last-Modified一起使用时, 优先级较高</td><br></tr><br></tbody><br></table><br><p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\"><br>表 2 表明在不同的情形下，浏览器是将请求重新发送到服务器还是使用缓存的内容。</p><br><p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\"><br>表 2. 对 cache-directive 值的浏览器响应</p><br><table style=\"border-collapse:collapse; border-spacing:0px; border:1px solid rgb(255,142,66); margin:10px 0px; color:rgb(0,0,0); font-family:arial; font-size:13px; line-height:19.5px; background:rgb(255,255,144)\"><br><tbody><br><tr><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Cache-directive</th><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">打开一个新的浏览器窗口</th><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">在原窗口中单击 Enter 按钮</th><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">刷新</th><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">单击 Back 按钮</th><br></tr><br><tr><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">public</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td><br></tr><br><tr><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">private</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">第一次，浏览器重新发送请求到服务器；此后，浏览器呈现来自缓存的页面</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td><br></tr><br><tr><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">no-cache/no-store</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器</td><br></tr><br><tr><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">must-revalidation/proxy-revalidation</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">第一次，浏览器重新发送请求到服务器；此后，浏览器呈现来自缓存的页面</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td><br></tr><br><tr><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">max-age=xxx (xxx is numeric)</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">在 xxx 秒后，浏览器重新发送请求到服务器</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">在 xxx 秒后，浏览器重新发送请求到服务器</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">在 xxx 秒后，浏览器重新发送请求到服务器</td><br></tr><br></tbody><br></table><br><p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\"><br>Cache-Control是关于浏览器缓存的最重要的设置，因为它覆盖其他设置，比如 Expires 和 Last-Modified。另外，由于浏览器的行为基本相同，这个属性是处理跨浏览器缓存问题的最有效的方法。</p><br><h3 style=\"margin:10px 0px; padding:0px; font-size:15px; font-family:arial\"><a name=\"t2\" target=\"_blank\"></a>过期头 (Expires)</h3><br><p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\"><br>Expires 头部字段提供一个日期和时间，响应在该日期和时间后被认为失效。失效的缓存条目通常不会被缓存（无论是代理缓存还是用户代理缓存）返回，除非首先通过原始 服务器（或者拥有该实体的最新副本的中介缓存）验证。（注意：cache-control max-age 和 s-maxage 将覆盖 Expires 头部。）</p><br><p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\"><br>Expires 字段接收以下格式的值：“Expires: Sun, 08 Nov 2009 03:37:26 GMT”。如果查看内容时的日期在给定的日期之前，则认为该内容没有失效并从缓存中提取出来。反之，则认为该内容失效，缓存将采取一些措施。表 3-6 表明针对不同用户操作的不同浏览器的行为。</p><br><p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\"><br>表 3. 当用户打开一个新的浏览器窗口时的失效操作</p><br><table style=\"border-collapse:collapse; border-spacing:0px; border:1px solid rgb(255,142,66); margin:10px 0px; color:rgb(0,0,0); font-family:arial; font-size:13px; line-height:19.5px; background:rgb(255,255,144)\"><br><tbody><br><tr><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">&nbsp;</th><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Firefox 3.5</th><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\"><acronym title=\"Internet Explorer\" style=\"border:0px\">IE</acronym>&nbsp;8</th><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Chrome 3</th><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Safari 4</th><br></tr><br><tr><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">内容没有失效</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td><br></tr><br><tr><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">内容失效</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td><br></tr><br></tbody><br></table><br><p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\"><br>表 4. 当用户在原始浏览器窗口中单击 Enter 按钮时的失效操作</p><br><table style=\"border-collapse:collapse; border-spacing:0px; border:1px solid rgb(255,142,66); margin:10px 0px; color:rgb(0,0,0); font-family:arial; font-size:13px; line-height:19.5px; background:rgb(255,255,144)\"><br><tbody><br><tr><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">&nbsp;</th><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Firefox 3.5</th><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\"><acronym title=\"Internet Explorer\" style=\"border:0px\">IE</acronym>&nbsp;8</th><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Chrome 3</th><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Safari 4</th><br></tr><br><tr><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">内容没有失效</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 304</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 304</td><br></tr><br><tr><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">内容失效</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td><br></tr><br></tbody><br></table><br><p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\"><br>表 5. 当用户按 F5 键刷新页面时的失效操作</p><br><table style=\"border-collapse:collapse; border-spacing:0px; border:1px solid rgb(255,142,66); margin:10px 0px; color:rgb(0,0,0); font-family:arial; font-size:13px; line-height:19.5px; background:rgb(255,255,144)\"><br><tbody><br><tr><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">&nbsp;</th><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Firefox 3.5</th><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\"><acronym title=\"Internet Explorer\" style=\"border:0px\">IE</acronym>&nbsp;8</th><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Chrome 3</th><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Safari 4</th><br></tr><br><tr><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">内容没有失效</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 304</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 304</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 304</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 304</td><br></tr><br><tr><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">内容失效</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td><br></tr><br></tbody><br></table><br><p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\"><br>表 6. 当用户单击 Back 或 Forward 按钮时的失效操作</p><br><table style=\"border-collapse:collapse; border-spacing:0px; border:1px solid rgb(255,142,66); margin:10px 0px; color:rgb(0,0,0); font-family:arial; font-size:13px; line-height:19.5px; background:rgb(255,255,144)\"><br><tbody><br><tr><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">&nbsp;</th><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Firefox 3.5</th><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\"><acronym title=\"Internet Explorer\" style=\"border:0px\">IE</acronym>&nbsp;8</th><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Chrome 3</th><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Safari 4</th><br></tr><br><tr><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">内容没有失效</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td><br></tr><br><tr><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">内容失效</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td><br></tr><br></tbody><br></table><br><p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\"><br>注意：所有浏览器都假定为使用默认设置运行。</p><br><h3 style=\"margin:10px 0px; padding:0px; font-size:15px; font-family:arial\"><a name=\"t3\" target=\"_blank\"></a>控制文件是否有修改 Last-Modified/E-Tag</h3><br><p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\"><br>Last-Modified 实体头部字段值通常用作一个缓存验证器。简单来说，如果实体值在 Last-Modified 值之后没有被更改，则认为该缓存条目有效。ETag 响应头部字段值是一个实体标记，它提供一个 “不透明” 的缓存验证器。这可能在以下几种情况下提供更可靠的验证：不方便存储修改日期；HTTP 日期值的 one-second 解决方案不够用；或者原始服务器希望避免由于使用修改日期而导致的某些冲突。</p><br><p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\"><br>不同的浏览器有不同的配置行为。表 7-10 表明针对不同用户操作的不同浏览器的行为。</p><br><p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\"><br>表 7. 当用户打开一个新的浏览器窗口时的 Last-Modified E-Tag 操作</p><br><table style=\"border-collapse:collapse; border-spacing:0px; border:1px solid rgb(255,142,66); margin:10px 0px; color:rgb(0,0,0); font-family:arial; font-size:13px; line-height:19.5px; background:rgb(255,255,144)\"><br><tbody><br><tr><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">&nbsp;</th><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Firefox 3.5</th><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\"><acronym title=\"Internet Explorer\" style=\"border:0px\">IE</acronym>&nbsp;8</th><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Chrome 3</th><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Safari 4</th><br></tr><br><tr><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">内容自上次访问以来没有被修改</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 304</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 304</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 304</td><br></tr><br><tr><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">内容自上次访问以来已经被修改</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td><br></tr><br></tbody><br></table><br><p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\"><br>表 8. 当用户在原始浏览器窗口中单击 Enter 按钮时的 Last-Modified E-Tag 操作</p><br><table style=\"border-collapse:collapse; border-spacing:0px; border:1px solid rgb(255,142,66); margin:10px 0px; color:rgb(0,0,0); font-family:arial; font-size:13px; line-height:19.5px; background:rgb(255,255,144)\"><br><tbody><br><tr><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">&nbsp;</th><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Firefox 3.5</th><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\"><acronym title=\"Internet Explorer\" style=\"border:0px\">IE</acronym>&nbsp;8</th><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Chrome 3</th><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Safari 4</th><br></tr><br><tr><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">内容自上次访问以来没有被修改</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 304</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 304</td><br></tr><br><tr><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">内容自上次访问以来已经被修改</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td><br></tr><br></tbody><br></table><br><p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\"><br>表 9. 当用户按 F5 键刷新页面时的 Last-Modified E-Tag 操作</p><br><table style=\"border-collapse:collapse; border-spacing:0px; border:1px solid rgb(255,142,66); margin:10px 0px; color:rgb(0,0,0); font-family:arial; font-size:13px; line-height:19.5px; background:rgb(255,255,144)\"><br><tbody><br><tr><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">&nbsp;</th><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Firefox 3.5</th><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\"><acronym title=\"Internet Explorer\" style=\"border:0px\">IE</acronym>&nbsp;8</th><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Chrome 3</th><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Safari 4</th><br></tr><br><tr><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">内容自上次访问以来没有被修改</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 304</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 304</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 304</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 304</td><br></tr><br><tr><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">内容自上次访问以来已经被修改</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td><br></tr><br></tbody><br></table><br><p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\"><br>表 10. 没有缓存设置且用户单击 Back 或 Forward 按钮</p><br><table style=\"border-collapse:collapse; border-spacing:0px; border:1px solid rgb(255,142,66); margin:10px 0px; color:rgb(0,0,0); font-family:arial; font-size:13px; line-height:19.5px; background:rgb(255,255,144)\"><br><tbody><br><tr><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">&nbsp;</th><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Firefox 3.5</th><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\"><acronym title=\"Internet Explorer\" style=\"border:0px\">IE</acronym>&nbsp;8</th><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Chrome 3</th><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Safari 4</th><br></tr><br><tr><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">内容自上次访问以来没有被修改</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td><br></tr><br><tr><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">内容自上次访问以来已经被修改</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td><br></tr><br></tbody><br></table><br><p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\"><br>注意：所有浏览器都假定使用默认设置运行。</p><br><h3 style=\"margin:10px 0px; padding:0px; font-size:15px; font-family:arial\"><a name=\"t4\" target=\"_blank\"></a>不进行任何缓存相关设置</h3><br><p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\"><br>如果您不定义任何缓存相关设置，则不同的浏览器有不同的行为。有时，同一个浏览器在相同的情形下每次运行时的行为都是不同的。情况可能很复杂。另外，有些不该缓存的内容如果被缓存，将会导致安全问题。 不同的浏览器有不同的行为。表 11 展示了不同的浏览器行为。</p><br><p style=\"margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:arial; font-size:13px; line-height:19.5px\"><br>表 11. 没有缓存设置且用户打开一个新的浏览器窗口</p><br><table style=\"border-collapse:collapse; border-spacing:0px; border:1px solid rgb(255,142,66); margin:10px 0px; color:rgb(0,0,0); font-family:arial; font-size:13px; line-height:19.5px; background:rgb(255,255,144)\"><br><tbody><br><tr><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">&nbsp;</th><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Firefox 3.5</th><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\"><acronym title=\"Internet Explorer\" style=\"border:0px\">IE</acronym>&nbsp;8</th><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Chrome 3</th><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">Safari 4</th><br></tr><br><tr><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">打开一个新页面</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td><br></tr><br><tr><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">在原始窗口中单击 Enter 按钮</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面。</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td><br></tr><br><tr><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">按 F5 键刷新</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td><br></tr><br><tr><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">单击 Back 或 Forward 按钮</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面。</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器呈现来自缓存的页面。</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">浏览器重新发送请求到服务器。返回代码是 200</td><br></tr><br></tbody><br></table><br><br>注意：所有浏览器都假定使用默认设置运行。<br><h3 style=\"margin:10px 0px; padding:0px; font-size:15px; font-family:arial\"><a name=\"t5\" target=\"_blank\"></a>关键结论</h3><br><br>最后, 概括下关键的结论<br><table style=\"border-collapse:collapse; border-spacing:0px; border:1px solid rgb(255,142,66); color:rgb(0,0,0); font-family:arial; font-size:13px; line-height:19.5px; background:rgb(255,255,144)\"><br><tbody><br><tr><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">操作</th><br><th style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">行为</th><br></tr><br><tr><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">打开新窗口</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">如果指定cache- control的值为private、no-cache、must-revalidate,那么打开新窗口访问时都会重新访问服务器。而如果指定了 max-age值,那么在此值内的时间里就不会重新访问服务器,例如：Cache-control: max-age=5 表示当访问此网页后的5秒内再次访问不会去服务器.</td><br></tr><br><tr><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">在地址栏回车</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">如果值为private或must-revalidate,则只有第一次访问时会访问服务器,以后就不再访问。如果值为no-cache,那么每次都会访问。如果值为max-age,则在过期之前不会重复访问。</td><br></tr><br><tr><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">按后退按扭</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">如果值为private、must-revalidate、max-age,则不会重访问,而如果为no-cache,则每次都重复访问.</td><br></tr><br><tr><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\">按刷新按扭</td><br><td style=\"margin:0px; padding:5px 15px; border:1px solid rgb(255,142,66)\"><span style=\"font-family:arial; font-size:13px; line-height:19.5px; background-color:rgb(255,255,144)\">无论为何值,都会重复访问.</span></td><br></tr><br></tbody><br></table><br><br><br><br></div>\n\n<style>\nbr{\ndisplay:none;\n}\n</style>"},{"title":"前端知识图谱","date":"2017-05-22T03:40:03.000Z","_content":"\n### 综合类\n\n- [前端知识体系](http://www.cnblogs.com/sb19871023/p/3894452.html)\n- [前端知识结构](https://github.com/JacksonTian/fks)\n- [Web前端开发大系概览](https://github.com/unruledboy/WebFrontEndStack)\n- [Web前端开发大系概览-中文版](http://www.cnblogs.com/unruledboy/p/WebFrontEndStack.html)\n- [Web Front-end Stack v2.2](https://raw.githubusercontent.com/unruledboy/WebFrontEndStack/master/Web%20Front%20End%20Stack.png)\n- [免费的编程中文书籍索引](https://github.com/justjavac/free-programming-books-zh_CN)\n- [前端书籍](https://github.com/dypsilon/frontend-dev-bookmarks)\n- [前端免费书籍大全](https://github.com/vhf/free-programming-books)\n- [前端知识体系](http://www.cnblogs.com/sb19871023/p/3894452.html)\n- [免费的编程中文书籍索引](https://github.com/justjavac/free-programming-books-zh_CN)\n- [智能社 - 精通JavaScript开发](http://study.163.com/course/introduction/224014.htm)\n- [重新介绍 JavaScript（JS 教程）](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/A_re-introduction_to_JavaScript)\n- [麻省理工学院公开课：计算机科学及编程导论](http://v.163.com/special/opencourse/bianchengdaolun.html)\n- [JavaScript中的this陷阱的最全收集--没有之一](http://segmentfault.com/a/1190000002640298)\n- [JS函数式编程指南](https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch1.html)\n- [JavaScript Promise迷你书（中文版）](http://liubin.github.io/promises-book/)\n- [腾讯移动Web前端知识库](https://github.com/AlloyTeam/Mars)\n- [Front-End-Develop-Guide 前端开发指南](https://github.com/Front-End-Developers-Hunan/Front-End-Develop-Guide)\n- [前端开发笔记本](https://li-xinyang.gitbooks.io/frontend-notebook/content/)\n- [大前端工具集 - 聂微东](https://github.com/nieweidong/fetool)\n- [前端开发者手册](https://dwqs.gitbooks.io/frontenddevhandbook/content/)\n\n<!--more-->\n\n### 入门类\n- [前端入门教程](http://www.cnblogs.com/jikey/p/3613082.html)\n- [瘳雪峰的Javascript教程](http://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000)\n- [jQuery基础教程](http://www.imooc.com/view/11)\n- [前端工程师必备的PS技能——切图篇](http://www.imooc.com/view/506)\n- [结合个人经历总结的前端入门方法](https://github.com/qiu-deqing/FE-learning)\n\n### 效果类\n\n- [弹出层](http://www.imooc.com/learn/58)\n- [焦点图轮播特效](http://www.imooc.com/learn/18)\n\n\n### 工具类\n\n- [css sprite 雪碧图制作](http://www.imooc.com/learn/93)\n- [版本控制入门 – 搬进 Github](http://www.imooc.com/learn/390)\n- [Grunt-beginner前端自动化工具](http://www.imooc.com/learn/30)\n\n### 慕课专题\n- [张鑫旭 - 慕课系列](http://www.imooc.com/space/teacher/id/197450)\n- [lyn - 慕课系列](http://www.imooc.com/space/teacher/id/104593)\n- [艾伦 - 慕课系列](http://www.imooc.com/space/teacher/id/290139)\n- [碧仔 - Hello，移动WEB](http://www.imooc.com/view/494)\n\n### 周报类\n- [平安科技移动开发二队技术周报](https://github.com/PaicHyperionDev/MobileDevWeekly)\n\n## 六. API:\n### 总目录\n\n#### 开发中心\n\n- [mozilla js参考](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript)\n- [chrome开发中心（chrome的内核已转向blink）](https://developer.chrome.com/extensions/api_index.html)\n- [safari开发中心](https://developer.apple.com/library/safari/navigation)\n- [microsoft js参考](https://msdn.microsoft.com/zh-cn/library/d1et7k7c(v=vs.94).aspx)\n- [js秘密花园](http://sanshi.me/articles/JavaScript-Garden-CN/html/index.html)\n- [js秘密花园](http://bonsaiden.github.io/JavaScript-Garden/zh/)\n- [w3help](http://www.w3help.org/) 综合Bug集合网站\n\n#### 综合搜索\n\n- [javascripting](http://www.javascripting.com/)\n- [各种流行库搜索](http://microjs.com/)\n\n#### 综合API\n- [runoob.com-包含各种API集合](http://www.runoob.com/)\n- [开源中国在线API文档合集](http://tool.oschina.net/apidocs)\n- [devdocs](http://devdocs.io/) 英文综合API网站\n\n#### 2. jQuery\n<ul>\n<li><a href=\"http://www.jquery123.com/?spm=5176.100239.blogcont82041.18.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.18\">jQuery API 中文文档</a></li>\n<li><a href=\"http://hemin.cn/jq/?spm=5176.100239.blogcont82041.19.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.19\">hemin 在线版</a></li>\n<li><a href=\"http://www.css88.com/jqapi-1.9/on/?spm=5176.100239.blogcont82041.20.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.20\">css88 jq api</a></li>\n<li><a href=\"http://www.css88.com/jquery-ui-api/?spm=5176.100239.blogcont82041.21.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.21\">css88 jqui api</a></li>\n<li><a href=\"http://learn.jquery.com/?spm=5176.100239.blogcont82041.22.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.22\">学习jquery</a></li>\n<li><a href=\"http://james.padolsey.com/jquery/?spm=5176.100239.blogcont82041.23.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.23\">jquery 源码查找</a></li>\n</ul>\n<h4 id=\"4\">3. Ecmascript</h4>\n<ul>\n<li><a href=\"https://leanpub.com/understandinges6/read?spm=5176.100239.blogcont82041.24.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.24\">Understanding ECMAScript 6 - Nicholas C. Zakas</a></li>\n<li><a href=\"https://leanpub.com/exploring-es6/read?spm=5176.100239.blogcont82041.25.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.25\">exploring-es6</a></li>\n<li><a href=\"https://github.com/es6-org/exploring-es6?spm=5176.100239.blogcont82041.26.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.26\">exploring-es6翻译</a></li>\n<li><a href=\"http://es6-org.github.io/exploring-es6/?spm=5176.100239.blogcont82041.27.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.27\">exploring-es6翻译后预览</a></li>\n<li><a href=\"http://es6.ruanyifeng.com/?spm=5176.100239.blogcont82041.28.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.28\">阮一峰 es6</a></li>\n<li><a href=\"http://javascript.ruanyifeng.com/?spm=5176.100239.blogcont82041.29.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.29\">阮一峰 Javascript</a></li>\n<li><a href=\"http://yanhaijing.com/es5/?spm=5176.100239.blogcont82041.30.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.30\">ECMA-262，第 5 版</a></li>\n<li><a href=\"http://es5.github.io/?spm=5176.100239.blogcont82041.31.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.31\">es5</a></li>\n</ul>\n<h4 id=\"5\">4. Js template</h4>\n<ul>\n<li><a href=\"http://garann.github.io/template-chooser/?spm=5176.100239.blogcont82041.32.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.32\">template-chooser</a></li>\n<li><a href=\"https://github.com/aui/artTemplate?spm=5176.100239.blogcont82041.33.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.33\">artTemplate</a></li>\n<li><a href=\"https://github.com/aui/tmodjs/blob/master/README.md?spm=5176.100239.blogcont82041.34.jiu0a3&amp;file=README.md\" data-spm-anchor-id=\"5176.100239.blogcont82041.34\">tomdjs</a></li>\n<li><a href=\"http://juicer.name/docs/docs_zh_cn.html?spm=5176.100239.blogcont82041.35.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.35\">淘宝模板juicer模板</a></li>\n<li><a href=\"http://koen301.github.io/fxtpl/?spm=5176.100239.blogcont82041.36.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.36\">Fxtpl v1.0 繁星前端模板引擎</a></li>\n<li><a href=\"http://laytpl.layui.com/?spm=5176.100239.blogcont82041.37.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.37\">laytpl</a></li>\n<li><a href=\"https://github.com/mozilla/nunjucks?spm=5176.100239.blogcont82041.38.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.38\">mozilla - nunjucks</a></li>\n<li><a href=\"https://github.com/PaulGuo/Juicer?spm=5176.100239.blogcont82041.39.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.39\">Juicer</a></li>\n<li><a href=\"http://akdubya.github.io/dustjs/?spm=5176.100239.blogcont82041.40.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.40\">dustjs</a></li>\n<li><a href=\"http://ecomfe.github.io/etpl/?spm=5176.100239.blogcont82041.41.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.41\">etpl</a></li>\n</ul>\n<h4 id=\"6\">5. 弹出层</h4>\n<ul>\n<li><a href=\"https://github.com/aui/artDialog?spm=5176.100239.blogcont82041.42.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.42\">artDialog 最新版</a></li>\n<li><a href=\"http://aui.github.io/artDialog/doc/index.html?spm=5176.100239.blogcont82041.43.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.43\">artDialog 文档</a></li>\n<li><a href=\"https://code.google.com/p/artdialog/downloads/list?spm=5176.100239.blogcont82041.44.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.44\">google code 下载地址</a></li>\n<li><a href=\"http://layer.layui.com/?spm=5176.100239.blogcont82041.45.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.45\">贤心弹出层</a></li>\n<li><a href=\"https://github.com/bh-lay/UI?spm=5176.100239.blogcont82041.46.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.46\">响应式用户交互组件库</a></li>\n<li><a href=\"http://t4t5.github.io/sweetalert/?spm=5176.100239.blogcont82041.47.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.47\">sweetalert-有css3动画弹出层</a></li>\n</ul>\n<h4 id=\"7\">6. CSS</h4>\n<ul>\n<li><a href=\"http://tympanus.net/codrops/css_reference/?spm=5176.100239.blogcont82041.48.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.48\">CSS 语法参考</a></li>\n<li><a href=\"http://isux.tencent.com/css3/index.html?spm=5176.100239.blogcont82041.49.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.49\">CSS3动画手册</a></li>\n<li><a href=\"http://isux.tencent.com/css3/tools.html?spm=5176.100239.blogcont82041.50.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.50\">腾讯css3动画制作工具</a></li>\n<li><a href=\"http://linxz.github.io/tianyizone/?spm=5176.100239.blogcont82041.51.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.51\">志爷css小工具集合</a></li>\n<li><a href=\"http://www.note12.com/category/blog/2014-6-5/538fe0a9f786f1b7019a4dfb?spm=5176.100239.blogcont82041.52.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.52\">css3 js 移动大杂烩</a></li>\n<li><a href=\"http://bouncejs.com/?spm=5176.100239.blogcont82041.53.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.53\">bouncejs 触摸库</a></li>\n<li><a href=\"http://fian.my.id/Waves/?spm=5176.100239.blogcont82041.54.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.54\">css3 按钮动画</a></li>\n<li><a href=\"http://daneden.github.io/animate.css/?spm=5176.100239.blogcont82041.55.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.55\">animate.css</a></li>\n<li><a href=\"http://www.alloyteam.com/2015/10/8536/?spm=5176.100239.blogcont82041.56.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.56\">全局CSS的终结(狗带) [译]</a></li>\n</ul>\n<h4 id=\"8\">7. Angularjs</h4>\n<ul>\n<li><a href=\"https://github.com/dolymood/AngularLearning?spm=5176.100239.blogcont82041.57.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.57\">Angular.js 的一些学习资源</a></li>\n<li><a href=\"http://angularjs.cn/?spm=5176.100239.blogcont82041.58.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.58\">angularjs中文社区</a></li>\n<li><a href=\"http://www.cnblogs.com/xuwenmin888/p/3739096.html?spm=5176.100239.blogcont82041.59.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.59\">Angularjs源码学习</a></li>\n<li><a href=\"http://www.ifeenan.com/?spm=5176.100239.blogcont82041.60.jiu0a3&amp;c=AngularJS\" data-spm-anchor-id=\"5176.100239.blogcont82041.60\">Angularjs源码学习</a></li>\n<li><a href=\"http://angular-ui.github.io/bootstrap/?spm=5176.100239.blogcont82041.61.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.61\">angular对bootstrap的封装</a></li>\n<li><a href=\"https://cnodejs.org/topic/51404e0f069911196d2e3923?spm=5176.100239.blogcont82041.62.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.62\">angularjs + nodejs</a></li>\n<li><a href=\"http://www.cnblogs.com/lvdabao/tag/AngularJs/?spm=5176.100239.blogcont82041.63.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.63\">吕大豹 Angularjs</a></li>\n<li><a href=\"http://www.infoq.com/cn/news/2013/02/angular-web-app?spm=5176.100239.blogcont82041.64.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.64\">AngularJS 最佳实践</a></li>\n<li><a href=\"http://www.lovelucy.info/angularjs-best-practices.html?spm=5176.100239.blogcont82041.65.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.65\">Angular的一些扩展指令</a></li>\n<li><a href=\"https://github.com/Pasvaz/bindonce?spm=5176.100239.blogcont82041.66.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.66\">Angular数据绑定原理</a></li>\n<li><a href=\"https://github.com/angular-ui/?spm=5176.100239.blogcont82041.67.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.67\">一些扩展Angular UI组件</a></li>\n<li><a href=\"http://voidcanvas.com/emberjs-vs-angularjs-performance-testing/?spm=5176.100239.blogcont82041.68.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.68\">Ember和AngularJS的性能测试</a></li>\n<li><a href=\"http://www.cnblogs.com/powertoolsteam/p/angularjs-introdection.html?spm=5176.100239.blogcont82041.69.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.69\">带你走近AngularJS - 基本功能介绍</a></li>\n<li><a href=\"http://angular.duapp.com/docs/guide?spm=5176.100239.blogcont82041.70.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.70\">Angularjs开发指南</a></li>\n<li><a href=\"http://www.cnblogs.com/amosli/p/3710648.html?spm=5176.100239.blogcont82041.71.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.71\">Angularjs学习</a></li>\n<li><a href=\"http://www.rainweb.cn/article/angularjs-jquery.html?spm=5176.100239.blogcont82041.72.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.72\">不要带着jQuery的思维去学习AngularJS</a></li>\n<li><a href=\"http://wangjiatao.diandian.com/?spm=5176.100239.blogcont82041.73.jiu0a3&amp;tag=angularjs\" data-spm-anchor-id=\"5176.100239.blogcont82041.73\">angularjs 学习笔记</a></li>\n<li><a href=\"http://www.angularjs.cn/T008?spm=5176.100239.blogcont82041.74.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.74\">angularjs 开发指南</a></li>\n<li><a href=\"https://github.com/jmcunningham/AngularJS-Learning?spm=5176.100239.blogcont82041.75.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.75\">angularjs 英文资料</a></li>\n<li><a href=\"http://angular-ui.github.io/bootstrap/?spm=5176.100239.blogcont82041.76.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.76\">angular bootstrap</a></li>\n<li><a href=\"https://github.com/opitzconsulting/jquery-mobile-angular-adapter?spm=5176.100239.blogcont82041.77.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.77\">angular jq mobile</a></li>\n<li><a href=\"http://mgcrea.github.io/angular-strap/?spm=5176.100239.blogcont82041.78.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.78\">angular ui</a></li>\n<li><a href=\"http://www.tuicool.com/articles/7ZZVr2?spm=5176.100239.blogcont82041.79.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.79\">整合jQuery Mobile+AngularJS经验谈</a></li>\n<li><a href=\"http://blog.jobbole.com/46589/?spm=5176.100239.blogcont82041.80.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.80\">有jQuery背景，该如何用AngularJS编程思想</a></li>\n<li><a href=\"http://each.sinaapp.com/angular/?spm=5176.100239.blogcont82041.81.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.81\">AngularJS在线教程</a></li>\n<li><a href=\"http://www.zouyesheng.com/angular.html?spm=5176.100239.blogcont82041.82.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.82\">angular学习笔记</a></li>\n</ul>\n<h4 id=\"9\">8. React</h4>\n<ul>\n<li><a href=\"http://www.react-china.org/?spm=5176.100239.blogcont82041.83.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.83\">react.js 中文论坛</a></li>\n<li><a href=\"https://facebook.github.io/react/index.html?spm=5176.100239.blogcont82041.84.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.84\">react.js 官方网址</a></li>\n<li><a href=\"https://facebook.github.io/react/docs/getting-started.html?spm=5176.100239.blogcont82041.85.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.85\">react.js 官方文档</a></li>\n<li><a href=\"http://material-ui.com/?spm=5176.100239.blogcont82041.86.jiu0a3#/\" data-spm-anchor-id=\"5176.100239.blogcont82041.86\">react.js material UI</a></li>\n<li><a href=\"http://touchstonejs.io/?spm=5176.100239.blogcont82041.87.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.87\">react.js TouchstoneJS UI</a></li>\n<li><a href=\"http://amazeui.org/react/?spm=5176.100239.blogcont82041.88.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.88\">react.js amazeui UI</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2015/03/react.html?spm=5176.100239.blogcont82041.89.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.89\">React 入门实例教程 - 阮一峰</a></li>\n<li><a href=\"http://wiki.jikexueyuan.com/project/react-native/?spm=5176.100239.blogcont82041.90.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.90\">React Native 中文版</a></li>\n<li><a href=\"http://www.html-js.com/article/Fakefish%203053?spm=5176.100239.blogcont82041.91.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.91\">Webpack 和 React 小书 - 前端乱炖</a></li>\n<li><a href=\"https://fakefish.github.io/react-webpack-cookbook/?spm=5176.100239.blogcont82041.92.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.92\">Webpack 和 React 小书 - gitbook</a></li>\n<li><a href=\"https://github.com/webpack/webpack?spm=5176.100239.blogcont82041.93.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.93\">webpack</a></li>\n<li><a href=\"http://html-js.com/article/3009?spm=5176.100239.blogcont82041.94.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.94\">Webpack，101入门体验</a></li>\n<li><a href=\"http://html-js.com/article/3113?spm=5176.100239.blogcont82041.95.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.95\">webpack入门教程</a></li>\n<li><a href=\"http://segmentfault.com/a/1190000003499526?spm=5176.100239.blogcont82041.96.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.96\">基于webpack搭建前端工程解决方案探索</a></li>\n<li><a href=\"http://www.piliyu.com/?spm=5176.100239.blogcont82041.97.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.97\">React原创实战视频教程</a></li>\n</ul>\n<h4 id=\"10\">9. 移动端API</h4>\n<ol>\n<li>API<br><ul>\n<li><a href=\"https://github.com/jtyjty99999/mobileTech?spm=5176.100239.blogcont82041.98.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.98\">99移动端知识集合</a></li>\n<li><a href=\"https://github.com/AlloyTeam/Mars?spm=5176.100239.blogcont82041.99.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.99\">移动端前端开发知识库</a></li>\n<li><a href=\"http://caibaojian.com/mobile-web-bug.html?spm=5176.100239.blogcont82041.100.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.100\">移动前端的一些坑和解决方法（外观表现）</a></li>\n<li><a href=\"http://www.cnblogs.com/PeunZhang/p/3407453.html?spm=5176.100239.blogcont82041.101.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.101\">【原】移动web资源整理</a></li>\n<li><a href=\"http://mweb.baidu.com/zeptoapi/?spm=5176.100239.blogcont82041.102.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.102\">zepto 1.0 中文手册</a></li>\n<li><a href=\"http://www.html-5.cn/Manual/Zepto/?spm=5176.100239.blogcont82041.103.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.103\">zepto 1.0 中文手册</a></li>\n<li><a href=\"http://www.css88.com/doc/zeptojs_api/?spm=5176.100239.blogcont82041.104.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.104\">zepto 1.1.2</a></li>\n<li><a href=\"http://www.cnblogs.com/sky000/archive/2013/03/29/2988952.html?spm=5176.100239.blogcont82041.105.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.105\">zepto 中文注释</a></li>\n<li><a href=\"http://app-framework-software.intel.com/api.php?spm=5176.100239.blogcont82041.106.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.106\">jqmobile 手册</a></li>\n<li><a href=\"https://github.com/maxzhang/maxzhang.github.com/issues?spm=5176.100239.blogcont82041.107.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.107\">移动浏览器开发集合</a></li>\n<li><a href=\"https://github.com/hoosin/mobile-web-favorites?spm=5176.100239.blogcont82041.108.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.108\">移动开发大杂烩</a></li>\n<li><a href=\"http://lin-chao.github.io/2014/11/14/%E5%BE%AE%E4%BF%A1webview%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/?spm=5176.100239.blogcont82041.109.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.109\">微信webview中的一些问题</a></li>\n</ul>\n</li>\n#### 框架\n<li><a href=\"http://framework7.taobao.org/?spm=5176.100239.blogcont82041.110.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.110\">特色的HTML框架可以创建精美的iOS应用</a></li>\n<li><a href=\"http://m.sui.taobao.org/?spm=5176.100239.blogcont82041.111.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.111\">淘宝SUI</a></li>\n</ul>\n</li>\n</ol>\n<h4 id=\"11\">10. avalon</h4>\n<ul>\n<li><a href=\"http://avalonjs.github.io/?spm=5176.100239.blogcont82041.112.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.112\">avalonjs</a></li>\n<li><a href=\"http://ued.qunar.com/oniui/index.html?spm=5176.100239.blogcont82041.113.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.113\">Avalon新一代UI库： OniUI</a></li>\n<li><a href=\"https://github.com/RubyLouvre/avalon.oniui?spm=5176.100239.blogcont82041.114.jiu0a3&amp;file=avalon.oniui\" data-spm-anchor-id=\"5176.100239.blogcont82041.114\">avalon.oniui-基于avalon的组件库</a></li>\n</ul>\n<h4 id=\"12\">11. Requriejs</h4>\n<ul>\n<li><a href=\"http://www.ruanyifeng.com/blog/2012/10/javascript_module.html?spm=5176.100239.blogcont82041.115.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.115\">Javascript模块化编程（一）：模块的写法 </a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2012/10/asynchronous_module_definition.html?spm=5176.100239.blogcont82041.116.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.116\">Javascript模块化编程（二）：AMD规范</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2012/11/require_js.html?spm=5176.100239.blogcont82041.117.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.117\">Javascript模块化编程（三）：require.js的用法</a></li>\n<li><a href=\"http://www.cnblogs.com/snandy/archive/2012/05/22/2513652.html?spm=5176.100239.blogcont82041.118.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.118\">RequireJS入门（一）</a></li>\n<li><a href=\"http://www.cnblogs.com/snandy/archive/2012/05/23/2513712.html?spm=5176.100239.blogcont82041.119.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.119\">RequireJS入门（二）</a></li>\n<li><a href=\"http://www.cnblogs.com/snandy/archive/2012/06/08/2538001.html?spm=5176.100239.blogcont82041.120.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.120\">RequireJS进阶（三）</a></li>\n<li><a href=\"http://www.cnblogs.com/yexiaochai/p/3632580.html?spm=5176.100239.blogcont82041.121.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.121\">requrie源码学习</a></li>\n<li><a href=\"http://www.oschina.net/translate/getting-started-with-the-requirejs-library?spm=5176.100239.blogcont82041.122.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.122\">requrie 入门指南</a></li>\n<li><a href=\"http://www.cnblogs.com/yexiaochai/p/3214926.html?spm=5176.100239.blogcont82041.123.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.123\">requrieJS 学习笔记</a></li>\n<li><a href=\"http://cyj.me/why-seajs/requirejs/?spm=5176.100239.blogcont82041.124.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.124\">requriejs 其一 </a></li>\n<li><a href=\"http://www.cnblogs.com/yexiaochai/p/3221081.html?spm=5176.100239.blogcont82041.125.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.125\">require backbone结合</a></li>\n</ul>\n<h4 id=\"13\">12. Seajs</h4>\n<ul>\n<li><a href=\"http://seajs.org/?spm=5176.100239.blogcont82041.126.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.126\">seajs</a></li>\n<li><a href=\"http://cyj.me/why-seajs/zh/?spm=5176.100239.blogcont82041.127.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.127\">seajs 中文手册</a></li>\n</ul>\n<h4 id=\"14\">13. Less,sass</h4>\n<ul>\n<li><a href=\"http://www.w3cplus.com/sassguide/?spm=5176.100239.blogcont82041.128.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.128\">sass</a></li>\n<li><a href=\"http://www.sass.hk/?spm=5176.100239.blogcont82041.129.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.129\">sass教程-sass中国</a></li>\n<li><a href=\"http://sass.bootcss.com/?spm=5176.100239.blogcont82041.130.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.130\">Sass 中文文档</a></li>\n<li><a href=\"http://less.bootcss.com/?spm=5176.100239.blogcont82041.131.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.131\">less</a></li>\n</ul>\n<h4 id=\"15\">14. Markdown</h4>\n<ul>\n<li><a href=\"http://wowubuntu.com/markdown/?spm=5176.100239.blogcont82041.132.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.132\">Markdown 语法说明 (简体中文版)</a></li>\n<li><a href=\"https://github.com/LearnShare/Learning-Markdown/blob/master/README.md?spm=5176.100239.blogcont82041.133.jiu0a3&amp;file=README.md\" data-spm-anchor-id=\"5176.100239.blogcont82041.133\">markdown入门参考</a></li>\n<li><a href=\"https://www.gitbook.com/?spm=5176.100239.blogcont82041.134.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.134\">gitbook国外的在线markdown可编辑成书</a></li>\n<li><a href=\"https://www.zybuluo.com/mdeditor?spm=5176.100239.blogcont82041.135.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.135\">mdeditor  一款国内的在线markdown编辑器</a></li>\n<li><a href=\"https://stackedit.io?spm=5176.100239.blogcont82041.136.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.136\">stackedit国外的在线markdown编辑器，功能强大，同步云盘</a> </li>\n<li><a href=\"http://bh-lay.github.io/mditor/?spm=5176.100239.blogcont82041.137.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.137\">mditor</a> 一款轻量级的markdown编辑器</li>\n<li><a href=\"https://github.com/lepture/editor?spm=5176.100239.blogcont82041.138.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.138\">lepture-editor</a></li>\n<li><a href=\"https://github.com/jbt/markdown-editor?spm=5176.100239.blogcont82041.139.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.139\">markdown-editor</a></li>\n</ul>\n<h4 id=\"16\">15. D3</h4>\n<ul>\n<li><a href=\"https://github.com/mbostock/d3/wiki/Tutorials?spm=5176.100239.blogcont82041.140.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.140\">d3 Tutorials</a></li>\n<li><a href=\"https://github.com/mbostock/d3/wiki/Gallery?spm=5176.100239.blogcont82041.141.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.141\">Gallery</a></li>\n<li><a href=\"http://datavisual.lofter.com/post/40cf3a_188e535?spm=5176.100239.blogcont82041.142.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.142\">lofter</a></li>\n<li><a href=\"http://alanland.iteye.com/blog/1878595?spm=5176.100239.blogcont82041.143.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.143\">iteye</a></li>\n<li><a href=\"http://javascript.ruanyifeng.com/library/d3.html?spm=5176.100239.blogcont82041.144.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.144\">ruanyifeng</a></li>\n</ul>\n<h4 id=\"17\">16. 兼容性</h4>\n<ul>\n<li><a href=\"http://kangax.github.io/compat-table/es6/?spm=5176.100239.blogcont82041.145.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.145\">esma 兼容列表</a></li>\n<li><a href=\"http://jigsaw.w3.org/css-validator/validator.html.zh-cn?spm=5176.100239.blogcont82041.146.jiu0a3&amp;file=validator.html.zh-cn\" data-spm-anchor-id=\"5176.100239.blogcont82041.146\">W3C CSS验证服务</a></li>\n<li><a href=\"http://caniuse.com/?spm=5176.100239.blogcont82041.147.jiu0a3#index\" data-spm-anchor-id=\"5176.100239.blogcont82041.147\">caniuse</a></li>\n<li><a href=\"http://csscreator.com/properties?spm=5176.100239.blogcont82041.148.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.148\">csscreator</a></li>\n<li>\n<a href=\"https://msdn.microsoft.com/zh-cn/library/cc351024(v=vs.85?spm=5176.100239.blogcont82041.149.jiu0a3&amp;file=cc351024(v=vs.85\" data-spm-anchor-id=\"5176.100239.blogcont82041.149\">microsoft</a>.aspx)</li>\n<li><a href=\"http://www.responsinator.com/?spm=5176.100239.blogcont82041.150.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.150\">在线测兼容-移动端</a></li>\n<li><a href=\"https://www.manymo.com/emulators?spm=5176.100239.blogcont82041.151.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.151\">emulators</a></li>\n</ul>\n<h4 id=\"18\">17. UI相关</h4>\n<ul>\n<li><a href=\"http://v3.bootcss.com/?spm=5176.100239.blogcont82041.152.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.152\">bootcss</a></li>\n<li><a href=\"http://www.w3cplus.com/MetroUICSS/?spm=5176.100239.blogcont82041.153.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.153\">MetroUICSS</a></li>\n<li><a href=\"http://semantic-ui.com/?spm=5176.100239.blogcont82041.154.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.154\">semantic</a></li>\n<li><a href=\"http://alexwolfe.github.io/Buttons/?spm=5176.100239.blogcont82041.155.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.155\">Buttons</a></li>\n<li><a href=\"http://hiloki.github.io/kitecss/?spm=5176.100239.blogcont82041.156.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.156\">kitecss</a></li>\n<li><a href=\"http://www.pintuer.com/?spm=5176.100239.blogcont82041.157.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.157\">pintuer</a></li>\n<li><a href=\"http://amazeui.org/?spm=5176.100239.blogcont82041.158.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.158\">amazeui</a></li>\n<li><a href=\"http://www.worldhello.net/gotgithub/index.html?spm=5176.100239.blogcont82041.159.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.159\">worldhello</a></li>\n<li><a href=\"http://igit.linuxtoy.org/contents.html?spm=5176.100239.blogcont82041.160.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.160\">linuxtoy</a></li>\n<li><a href=\"http://www-cs-students.stanford.edu/~blynn/gitmagic/intl/zh_cn/?spm=5176.100239.blogcont82041.161.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.161\">gitmagic</a></li>\n<li><a href=\"http://rogerdudler.github.io/git-guide/index.zh.html?spm=5176.100239.blogcont82041.162.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.162\">rogerdudler</a></li>\n<li><a href=\"http://gitref.justjavac.com/?spm=5176.100239.blogcont82041.163.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.163\">gitref</a></li>\n<li><a href=\"http://git-scm.com/book/zh?spm=5176.100239.blogcont82041.164.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.164\">book</a></li>\n<li><a href=\"http://gogojimmy.net/2012/01/17/how-to-use-git-1-git-basic/?spm=5176.100239.blogcont82041.165.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.165\">gogojimmy</a></li>\n</ul>\n<h4 id=\"19\">18. HTTP</h4>\n<ul>\n<li><a href=\"http://segmentfault.com/bookmark/1230000002521721?spm=5176.100239.blogcont82041.166.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.166\">HTTP API 设计指南</a></li>\n</ul>\n<h4 id=\"20\">19. 其它API</h4>\n<ul>\n<li><a href=\"javascriptoo?spm=5176.100239.blogcont82041.167.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.167\">javascript流行库汇总</a></li>\n<li><a href=\"http://niceue.com/validator/demo/index.php?spm=5176.100239.blogcont82041.168.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.168\">验证api</a></li>\n<li><a href=\"http://www.css88.com/doc/underscore/?spm=5176.100239.blogcont82041.169.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.169\">underscore 中文手册</a></li>\n<li><a href=\"http://www.html-js.com/article/Underscorejs-source-code-analysis-of-underscorejs-source-code-analysis%203031?spm=5176.100239.blogcont82041.170.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.170\">underscore源码分析</a></li>\n<li><a href=\"http://yalishizhude.github.io/tags/underscore/?spm=5176.100239.blogcont82041.171.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.171\">underscore源码分析-亚里士朱德的博客</a></li>\n<li><a href=\"http://underscorejs.org/?spm=5176.100239.blogcont82041.172.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.172\">underscrejs en api</a></li>\n<li><a href=\"https://lodash.com/?spm=5176.100239.blogcont82041.173.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.173\">lodash - underscore的代替品</a></li>\n<li><a href=\"http://extjs-doc-cn.github.io/ext4api/?spm=5176.100239.blogcont82041.174.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.174\">ext4api</a></li>\n<li><a href=\"http://www.csser.com/tools/backbone/backbone.js.html?spm=5176.100239.blogcont82041.175.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.175\">backbone 中文手册</a></li>\n<li><a href=\"http://dev.qwrap.com/resource/js/_docs/_youa/?spm=5176.100239.blogcont82041.176.jiu0a3#/qw/base/loadJs_.htm\" data-spm-anchor-id=\"5176.100239.blogcont82041.176\">qwrap手册</a></li>\n<li><a href=\"http://easings.net/zh-cn?spm=5176.100239.blogcont82041.177.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.177\">缓动函数</a></li>\n<li><a href=\"http://www.w3school.com.cn/svg/svg_reference.asp?spm=5176.100239.blogcont82041.178.jiu0a3&amp;file=svg_reference.asp\" data-spm-anchor-id=\"5176.100239.blogcont82041.178\">svg 中文参考</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/SVG?spm=5176.100239.blogcont82041.179.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.179\">svg mdn参考</a></li>\n<li><a href=\"https://github.com/gabelerner/canvg?spm=5176.100239.blogcont82041.180.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.180\">svg 导出 canvas</a></li>\n<li><a href=\"https://github.com/exupero/saveSvgAsPng?spm=5176.100239.blogcont82041.181.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.181\">svg 导出 png</a></li>\n<li><a href=\"http://www.zamzar.com/convert/ai-to-svg/?spm=5176.100239.blogcont82041.182.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.182\">ai-to-svg</a></li>\n<li><a href=\"https://github.com/machao/localStorage?spm=5176.100239.blogcont82041.183.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.183\">localStorage 库</a></li>\n</ul>\n<h4 id=\"21\">20. 图表类</h4>\n<ul>\n<li><a href=\"http://www.hcharts.cn/api/index.php?spm=5176.100239.blogcont82041.184.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.184\">Highcharts 中文API</a></li>\n<li><a href=\"http://api.highcharts.com/highcharts?spm=5176.100239.blogcont82041.185.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.185\">Highcharts 英文API</a></li>\n<li><a href=\"http://echarts.baidu.com/?spm=5176.100239.blogcont82041.186.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.186\">ECharts 百度的图表软件</a></li>\n<li><a href=\"http://lbs.amap.com/api/?spm=5176.100239.blogcont82041.187.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.187\">高德地图</a></li>\n<li><a href=\"http://paperjs.org/?spm=5176.100239.blogcont82041.188.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.188\">开源的矢量图脚本框架</a></li>\n<li><a href=\"http://jvectormap.com/?spm=5176.100239.blogcont82041.189.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.189\">svg 地图</a></li>\n</ul>\n<h4 id=\"22\">21. vue</h4>\n<ul>\n<li><a href=\"http://cn.vuejs.org/?spm=5176.100239.blogcont82041.190.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.190\">Vue</a></li>\n<li><a href=\"http://forum.vuejs.org/?spm=5176.100239.blogcont82041.191.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.191\">Vue 论坛</a></li>\n<li><a href=\"http://www.cnblogs.com/aaronjs/p/3660102.html?spm=5176.100239.blogcont82041.192.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.192\">Vue 入门指南</a></li>\n<li><a href=\"http://segmentfault.com/a/1190000000411057?spm=5176.100239.blogcont82041.193.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.193\">Vue 的一些资源索引</a></li>\n\n</ul>\n<h4 id=\"23\">21. 正则</h4>\n<ul>\n<li><a href=\"http://segmentfault.com/a/1190000002471140?spm=5176.100239.blogcont82041.194.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.194\">JS正则表达式元字符</a></li>\n<li><a href=\"http://deerchao.net/tutorials/regex/regex.htm?spm=5176.100239.blogcont82041.195.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.195\">正则表达式30分钟入门教程</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions?spm=5176.100239.blogcont82041.196.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.196\">MDN-正则表达式</a></li>\n<li><a href=\"http://javascript.ruanyifeng.com/stdlib/regexp.html?spm=5176.100239.blogcont82041.197.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.197\">ruanyifeng - RegExp对象</a></li>\n<li><a href=\"http://div.io/topic/764?spm=5176.100239.blogcont82041.198.jiu0a3&amp;page=1\" data-spm-anchor-id=\"5176.100239.blogcont82041.198\">小胡子哥 - 进阶正则表达式</a></li>\n<li><a href=\"https://github.com/Cedriking/is.js/blob/master/is.js?spm=5176.100239.blogcont82041.199.jiu0a3&amp;file=is.js\" data-spm-anchor-id=\"5176.100239.blogcont82041.199\">is.js</a></li>\n<li><a href=\"http://regexper.com/?spm=5176.100239.blogcont82041.200.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.200\">正则在线测试</a></li>\n\n</ul>\n<h4 id=\"24\">22. ionic</h4>\n<ul>\n<li><a href=\"https://github.com/ychow/ionic-guide?spm=5176.100239.blogcont82041.201.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.201\">ionic</a></li>\n</ul>\n<h4 id=\"25\">23. 其它</h4>\n<ul>\n<li><a href=\"http://mockjs.com/?spm=5176.100239.blogcont82041.202.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.202\">Mock.js 是一款模拟数据生成器</a></li>\n</ul>\n### 七. 开发规范\n<ol>\n<li>\n<p>前端</p>\n<ul>\n<li><a href=\"http://alloyteam.github.io/CodeGuide?spm=5176.100239.blogcont82041.203.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.203\">通过分析github代码库总结出来的工程师代码书写习惯</a></li>\n<li><a href=\"http://codeguide.bootcss.com/?spm=5176.100239.blogcont82041.204.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.204\">HTML&amp;CSS编码规范 by @mdo</a></li>\n<li><a href=\"http://www.alloyteam.com/2011/10/107/?spm=5176.100239.blogcont82041.205.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.205\">团队合作的css命名规范-腾讯AlloyTeam前端团队</a></li>\n<li><a href=\"http://yuwenhui.github.io/?spm=5176.100239.blogcont82041.206.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.206\">前端编码规范之js - by yuwenhui</a></li>\n<li><a href=\"http://www.cnblogs.com/hustskyking/p/javascript-spec.html?spm=5176.100239.blogcont82041.207.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.207\">前端编码规范之js - by 李靖</a></li>\n<li><a href=\"http://zhibimo.com/read/Ashu/front-end-style-guide/?spm=5176.100239.blogcont82041.208.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.208\">前端开发规范手册</a></li>\n<li><a href=\"https://github.com/yuche/javascript?spm=5176.100239.blogcont82041.209.jiu0a3#table-of-contents\" data-spm-anchor-id=\"5176.100239.blogcont82041.209\">Airbnb JavaScript 编码规范（简体中文版）</a></li>\n<li><a href=\"http://www.zhihu.com/question/20351507?spm=5176.100239.blogcont82041.210.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.210\">AMD与CMD规范的区别</a></li>\n<li><a href=\"http://www.cnblogs.com/tugenhua0707/p/3507957.html?spm=5176.100239.blogcont82041.211.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.211\">AMD与CMD规范的区别</a></li>\n<li><a href=\"http://docs.kissyui.com/1.4/docs/html/tutorials/style-guide/kissy-source-style.html?spm=5176.100239.blogcont82041.212.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.212\">KISSY 源码规范</a></li>\n<li><a href=\"http://codeguide.bootcss.com/?spm=5176.100239.blogcont82041.213.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.213\">bt编码规范</a></li>\n<li><a href=\"https://github.com/Suxiaogang/Code_Guide?spm=5176.100239.blogcont82041.214.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.214\">规范加强版</a></li>\n<li><a href=\"http://blog.jobbole.com/79075/?spm=5176.100239.blogcont82041.215.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.215\">前端代码规范 及 最佳实践</a></li>\n<li><a href=\"http://coderlmn.github.io/code-standards/?spm=5176.100239.blogcont82041.216.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.216\">百度前端规范</a></li>\n<li><a href=\"http://isobar-idev.github.io/code-standards/?spm=5176.100239.blogcont82041.217.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.217\">百度前端规范</a></li>\n<li><a href=\"http://zhuanlan.zhihu.com/fuyun/19884834?spm=5176.100239.blogcont82041.218.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.218\">百度前端规范</a></li>\n<li><a href=\"https://github.com/gf-rd/es6-coding-style?spm=5176.100239.blogcont82041.219.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.219\">ECMAScript6 编码规范--广发证券前端团队</a></li>\n<li><a href=\"http://blog.jobbole.com/79484/?spm=5176.100239.blogcont82041.220.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.220\">JavaScript 风格指南/编码规范（Airbnb公司版）</a></li>\n<li><a href=\"http://nec.netease.com/standard?spm=5176.100239.blogcont82041.221.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.221\">网易前端开发规范</a></li>\n<li><a href=\"http://www.75team.com/archives/1049?spm=5176.100239.blogcont82041.222.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.222\">css模块</a></li>\n<li><a href=\"https://github.com/ecomfe/spec?spm=5176.100239.blogcont82041.223.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.223\">前端规范资源列表</a></li>\n</ul>\n</li>\n#### PHP\n- [最流行的PHP 代码规范](http://segmentfault.com/a/1190000000443795)\n- [最流行的PHP 代码规范](https://github.com/hfcorriez/fig-standards/blob/zh_CN/%E6%8E%A5%E5%8F%97/PSR-2-coding-style-guide.md)\n\n#### Android\n- [【敏捷开发】Android团队开发规范](http://www.cnblogs.com/lcw/p/3619181.html)\n- [Android 开发规范与应用](http://www.jianshu.com/p/4390f4fe19b3)\n## 八. 其它收集\n### 1. 各大公司开源项目\n<ul>\n<li><a href=\"https://code.facebook.com/projects/web/?spm=5176.100239.blogcont82041.224.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.224\">Facebook Projects</a></li>\n<li><a href=\"http://fex.baidu.com/?spm=5176.100239.blogcont82041.225.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.225\">百度web前端研发部</a></li>\n<li><a href=\"http://efe.baidu.com/?spm=5176.100239.blogcont82041.226.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.226\">百度EFE</a></li>\n<li><a href=\"https://github.com/fex-team/?spm=5176.100239.blogcont82041.227.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.227\">百度github</a></li>\n<li><a href=\"http://www.alloyteam.com/?spm=5176.100239.blogcont82041.228.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.228\">alloyteam</a></li>\n<li><a href=\"http://alloyteam.github.io/?spm=5176.100239.blogcont82041.229.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.229\">alloyteam-github</a></li>\n<li><a href=\"https://github.com/AlloyTeam/AlloyGameEngine?spm=5176.100239.blogcont82041.230.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.230\">alloyteam-AlloyGameEngine</a></li>\n<li><a href=\"http://alloyteam.github.io/AlloyDesigner/?spm=5176.100239.blogcont82041.231.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.231\">AlloyDesigner</a> 即时修改，即时保存，设计稿较正，其它开发辅助工具</li>\n<li><a href=\"http://www.alloyteam.com/2015/06/h5-jiao-hu-ye-bian-ji-qi-aeditor-jie-shao/?spm=5176.100239.blogcont82041.232.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.232\">H5交互页编辑器AEditor介绍</a> H5动画交互页开发的工具介绍</li>\n<li><a href=\"http://aeditor.alloyteam.com/?spm=5176.100239.blogcont82041.233.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.233\">AEditor</a> H5动画交互页开发的工具</li>\n<li><a href=\"http://forum.maka.im/wordpress/?spm=5176.100239.blogcont82041.234.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.234\">maka</a></li>\n<li><a href=\"https://github.com/fenbility/weekly-feed?spm=5176.100239.blogcont82041.235.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.235\">值得订阅的weekly</a></li>\n<li><a href=\"http://cube.qq.com/?spm=5176.100239.blogcont82041.236.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.236\">腾讯html5</a></li>\n<li><a href=\"http://75team.github.io/?spm=5176.100239.blogcont82041.237.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.237\">奇舞团开源项目</a></li>\n<li><a href=\"http://ued.qunar.com/?spm=5176.100239.blogcont82041.238.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.238\">Qunar UED</a></li>\n</ul>\n### 2. Javascript\n#### 常用\n- [ieBetter.js-让IE6-IE8拥有IE9+,Chrome等浏览器特性](http://www.zhangxinxu.com/wordpress/2013/12/iebetter-js-make-ie6-ie8-like-modern-browser-ie9-chrome/)\n- [模拟键盘](http://mottie.github.io/Keyboard/)\n- [拼音](https://github.com/hotoo/pinyin)\n- [中国个人身份证号验证](https://github.com/mc-zone/IDValidator)\n#### 算法\n- [数据结构与算法 JavaScript 描述. 章节练习](https://github.com/Ralph-Wang/algorithm.in.js)\n- [常见排序算法（JS版）](https://github.com/twobin/twobinSort)\n- [经典排序](https://github.com/luofei2011/jsAgm/blob/master/js/sort.js)\n- [常见排序算法-js版本](https://github.com/hechangmin/jssort)\n- [JavaScript 算法与数据结构 精华集](https://github.com/lightningtgc/JavaScript-Algorithms)\n- [面试常考算法题精讲](http://www.nowcoder.com/live/courses)\n- []()\n#### 移动端\n- [fastclick](https://github.com/ftlabs/fastclick)\n- [no-click-delay](https://github.com/mmastrac/jquery-noclickdelay)\n#### JSON\n- [模拟生成JSON数据](http://beta.json-generator.com/)\n- [返回跨域JSONAPI](http://jsonp.afeld.me/)\n### 3. Html5\n<ul>\n<li><a href=\"http://www.zhihu.com/question/24398907?spm=5176.100239.blogcont82041.239.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.239\">HTML5 有哪些让你惊艳的 demo？</a></li>\n</ul>\n### 4. CSS\n<ul>\n<li><a href=\"http://browserhacks.com/?spm=5176.100239.blogcont82041.240.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.240\">browserhacks</a></li>\n\n</ul>\n### 5. jQuery\n<ol>\n<li>焦点图</li>\n</ol>\n- [myfocus](https://github.com/koen301/myfocus)\n- [myfocus-官方演示站](http://www.chhua.com/myfocus/)\n- [SuperSlidev2.1 -- 大话主席](http://www.superslide2.com/)\n- [soChange](http://www.bujichong.com/sojs/soChange/index.html)\n### 6. Ext, EasyUI, J-UI 及其它各种UI方案\n#### Ext\n- [extjs](https://www.sencha.com/products/extjs/)\n- [ext4英文api](http://docs.sencha.com/extjs/4.0.7/)\n- [ext4中文api](http://extjs-doc-cn.github.io/ext4api/)\n- []()\n#### EasyUI\n- [jquery easyui 未压缩源代码](http://jquery-easyui.googlecode.com/svn/trunk/src/)\n#### J-UI\n- [J-UI](http://jui.org/)\n#### Other\n- [MUI-最接近原生APP体验的高性能前端框架](http://dcloudio.github.io/mui/)\n- [Amaze UI | 中国首个开源 HTML5 跨屏前端框架](http://amazeui.org/)\n- [淘宝 HTML5 前端框架](http://m.sui.taobao.org/)\n- [KISSY - 阿里前端JavaScript库](http://docs.kissyui.com/)\n- [网易Nej - Nice Easy Javascript](http://nej.netease.com/)\n- [Kendo UI MVVM Demo](http://demos.telerik.com/kendo-ui/mvvm/index)\n- [Bootstrap](http://www.bootcss.com/)\n- [Smart UI](http://smartui.chinamzz.com/)\n- [雅虎UI - CSS UI](http://developer.yahoo.com/yui/grids/)\n### 7. 页面 社会化 分享功能\n<ul>\n<li><a href=\"http://share.baidu.com/?spm=5176.100239.blogcont82041.241.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.241\">百度分享</a> pc端</li>\n<li><a href=\"http://jiathis.com/?spm=5176.100239.blogcont82041.242.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.242\">JiaThis</a> pc端</li>\n<li><a href=\"http://developer.baidu.com/soc/share?spm=5176.100239.blogcont82041.243.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.243\">社会化分享组件</a> 移动端</li>\n<li><a href=\"http://www.mob.com/?spm=5176.100239.blogcont82041.244.jiu0a3#/index\" data-spm-anchor-id=\"5176.100239.blogcont82041.244\">ShareSDK 轻松实现社会化功能</a> 移动端</li>\n<li><a href=\"http://dev.umeng.com/social/android/quick-integration?spm=5176.100239.blogcont82041.245.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.245\">友盟分享</a> 移动端</li>\n</ul>\n<h4 id=\"35\">8. 富文本编辑器</h4>\n<ul>\n<li><a href=\"http://ueditor.baidu.com/website/?spm=5176.100239.blogcont82041.246.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.246\">百度 ueditor</a></li>\n<li><a href=\"http://ckeditor.com/?spm=5176.100239.blogcont82041.247.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.247\">经典的ckeditor</a></li>\n<li><a href=\"http://kindeditor.net/?spm=5176.100239.blogcont82041.248.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.248\">经典的kindeditor</a></li>\n<li><a href=\"http://www.bootcss.com/p/bootstrap-wysiwyg/?spm=5176.100239.blogcont82041.249.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.249\">wysiwyg</a></li>\n<li><a href=\"http://integ.github.io/BachEditor/?spm=5176.100239.blogcont82041.250.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.250\">一个有情怀的编辑器。Bach's Editor</a></li>\n<li><a href=\"https://github.com/mycolorway/simditor?spm=5176.100239.blogcont82041.251.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.251\">tower用的编辑器</a></li>\n<li><a href=\"https://github.com/summernote/summernote?spm=5176.100239.blogcont82041.252.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.252\">summernote 编辑器</a></li>\n<li><a href=\"http://neilj.github.io/Squire/?spm=5176.100239.blogcont82041.253.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.253\">html5编辑器</a></li>\n<li><a href=\"http://lab.hustlzp.com/XEditor/?spm=5176.100239.blogcont82041.254.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.254\">XEditor</a></li>\n<li><a href=\"https://github.com/wangfupeng1988/wangEditor?spm=5176.100239.blogcont82041.255.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.255\">wangEditor</a></li>\n</ul>\n### 9. 日历\n#### pc\n- [经典my97](http://www.my97.net/dp/demo/index.htm)\n- [强大的独立日期选择器](http://www.cnblogs.com/gbin1/archive/2012/04/16/2452105.html)\n- [fullcalendar](http://fullcalendar.io/)\n- [fullcalendar日历控件知识点集合 ](http://blog.csdn.net/francislaw/article/details/7740630)\n- [中文api](http://blog.sina.com.cn/s/blog_9475b1c101012c5f.html)\n- [农历日历](https://github.com/zzyss86/LunarCalendar)\n- [超酷的仿百度带节日日历老黄历控件](http://www.sucaisj.com/jiaoben/date/201509/16856.html)\n- [日期格式化](http://momentjs.com/)\n- [大牛日历控件](https://github.com/Johnqing/QPAYCalendar/)\n- [我群某管理作品](https://github.com/Iamlars/dateMarker)\n- [input按位替换-官网](http://digitalbush.com/projects/masked-input-plugin/)\n- [input按位替换-github](https://github.com/digitalBush/jquery.maskedinput/tree/1.2.2)\n- [bootstrap-daterangepicker](https://github.com/dangrossman/bootstrap-daterangepicker)\n- [国外30个插件集合](http://www.vandelaydesign.com/30-best-free-jquery-plugins/)\n- [JavaScript datepicker](http://dbushell.com/2012/10/09/pikaday-javascript-datepicker/)\n- [Datepair.js](http://jonthornton.github.io/Datepair.js/)\n- [一个风格多样的日历](https://github.com/glad/glDatePicker)\n- [弹出层式的全日历](http://amsul.ca/pickadate.js/date/)\n- [jquery双日历](http://www.daterangepicker.com/)\n#### 移动\n- [大气实用jQuery手机移动端日历日期选择插件](http://www.frankdemo.cn/index.php?c=content&a=show&id=115)\n- [jQuery Mobile 移动开发中的日期插件Mobiscroll ](https://mobiscroll.com/)\n\n#### Date library\n- [Datejs](https://github.com/datejs/Datejs)\n- [sugarjs](http://sugarjs.com/api/Date)\n### 10. 综合效果搜索平台\n<ul>\n<li><a href=\"http://www.jq22.com?spm=5176.100239.blogcont82041.256.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.256\">效果网</a></li>\n<li><a href=\"http://www.17sucai.com/?spm=5176.100239.blogcont82041.257.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.257\">17素材</a></li>\n<li><a href=\"http://microjs.com/?spm=5176.100239.blogcont82041.258.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.258\">常用的JavaScript代码片段</a></li>\n</ul>\n### 11. 前端工程化\n#### 概述\n- [前端工具大全](http://www.awesomes.cn/)\n- [什么是前端工程化](https://github.com/fouber/blog/issues/10?from=timeline&isappinstalled=0#)\n#### Gulp\n- [Gulp官网](http://gulpjs.com/)\n- [Gulp中文网](http://www.gulpjs.com.cn/)\n- [gulp资料收集](https://github.com/Platform-CUF/use-gulp)\n- [Gulp：任务自动管理工具 - ruanyifeng](http://javascript.ruanyifeng.com/tool/gulp.html)\n- [Gulp插件](http://gulpjs.com/plugins/)\n- [Gulp不完全入门教程](http://www.ido321.com/1622.html)\n- [为什么使用gulp?](https://github.com/hjzheng/CUF_meeting_knowledge_share/issues/33)\n- [Gulp安装及配合组件构建前端开发一体化](http://www.dbpoo.com/getting-started-with-gulp/)\n- [Gulp 入门指南](https://github.com/nimojs/gulp-book)\n- [Gulp 入门指南 - nimojs](https://github.com/nimojs/blog/issues/19)\n- [Gulp入门教程](http://markpop.github.io/2014/09/17/Gulp%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/)\n- [Gulp in Action](http://www.imooc.com/video/5692)\n- [Gulp开发教程（翻译）](http://www.w3ctech.com/topic/134)\n- [前端构建工具gulpjs的使用介绍及技巧](http://www.cnblogs.com/2050/p/4198792.html)\n\n#### Grunt\n- [gruntjs](http://gruntjs.com/)\n- [Grunt中文网](http://www.gruntjs.net/)\n\n#### Fis\n- [fis 官网](http://fex-team.github.io/fis-site/index.html)\n- [fis](http://fis.baidu.com/)\n### 12. 轮播图\n#### pc图轮\n- [单屏轮播sochange](http://www.jsfoot.com/jquery/demo/2011-09-20/192.html)\n- [左右按钮多图切换](http://bxslider.com/examples/carousel-demystified)\n- [fullpage全屏轮播](https://github.com/alvarotrigo/fullPage.js/)\n#### 移动端\n- [无缝切换](http://www.swipejs.com/)\n- [滑屏效果](http://www.idangero.us/swiper/)\n- [全屏fullpage](https://github.com/peunzhang/fullpage)\n- [单个图片切换](https://github.com/qiqiboy/touchslider)\n- [单个全屏切换](https://github.com/peunzhang/slip.js)\n- [百度的切换库](http://touch.code.baidu.com/examples.html?qq-pf-to=pcqq.group)\n- [单个全屏切换](https://github.com/peunzhang/iSlider)\n- [滑屏效果](https://github.com/saw/touch-interfaces)\n- [旋转拖动设置](http://baijs.com/tinycircleslider/)\n- [类似于swipe切换](http://touchslider.com/)\n- [支持多种形式的触摸滑动](http://www.swiper.com.cn/demo/index.html)\n- [滑屏效果](https://github.com/joker-ye/main/blob/master/wap/index.html)\n- [大话主席pc移动图片轮换](http://www.superslide2.com/)\n- [滑屏效果](https://github.com/hahnzhu/parallax.js)\n- [基于zepto的fullpage](https://github.com/yanhaijing/zepto.fullpage)\n- [[WebApp]定宽网页设计下，固定宽度布局开发WebApp并实现多终端下WebApp布局自适应](http://www.cnblogs.com/plums/archive/2013/01/10/WebApp-fixed-width-layout-of-multi-terminal-adapter-since.html)\n- [判断微信客户端的那些坑](http://loo2k.com/blog/detecting-wechat-client/)\n- [可以通过javascript直接调用原生分享的工具](https://github.com/JefferyWang/nativeShare.js)\n- [JiaThis 分享到微信代码](http://www.jiathis.com/help/html/weixin-share-code)\n- [聊聊移动端跨平台开发的各种技术](http://fex.baidu.com/blog/2015/05/cross-mobile/)\n- [前端自动化测试](http://www.zhihu.com/question/29922082)\n- [多种轮换图片](http://ajccom.github.io/niceslider/)\n- [滑动侧边栏](https://mango.github.io/slideout/)\n### 13. 文件上传\n<ul>\n<li><a href=\"http://fex.baidu.com/webuploader/?spm=5176.100239.blogcont82041.259.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.259\">百度上传组件</a></li>\n<li><a href=\"https://blueimp.github.io/jQuery-File-Upload/?spm=5176.100239.blogcont82041.260.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.260\">上传</a></li>\n<li><a href=\"http://www.hdfu.net/?spm=5176.100239.blogcont82041.261.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.261\">flash 头像上传</a></li>\n<li><a href=\"http://www.dropzonejs.com/?spm=5176.100239.blogcont82041.262.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.262\">图片上传预览</a></li>\n<li><a href=\"http://elemefe.github.io/image-cropper/?spm=5176.100239.blogcont82041.263.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.263\">图片裁剪</a></li>\n<li><a href=\"http://www.shearphoto.com/?spm=5176.100239.blogcont82041.264.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.264\">图片裁剪-shearphoto</a></li>\n<li><a href=\"http://www.oschina.net/project/tag/284/jquery-image-tools?spm=5176.100239.blogcont82041.265.jiu0a3&amp;lang=0&amp;os=0&amp;sort=view&amp;p=2\" data-spm-anchor-id=\"5176.100239.blogcont82041.265\">jQuery图片处理</a></li>\n<li><a href=\"\"></a></li>\n</ul>\n<h4 id=\"41\">14. 模拟select</h4>\n<ul>\n<li><a href=\"http://aui.github.io/popupjs/doc/selectbox.html?spm=5176.100239.blogcont82041.266.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.266\">糖饼 select</a></li>\n<li><a href=\"https://github.com/rmm5t/jquery-flexselect?spm=5176.100239.blogcont82041.267.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.267\">flexselect</a></li>\n<li><a href=\"http://loudev.com/?spm=5176.100239.blogcont82041.268.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.268\">双select</a></li>\n<li><a href=\"http://select2.github.io/?spm=5176.100239.blogcont82041.269.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.269\">select2</a></li>\n\n</ul>\n<h4 id=\"42\">15. 取色插件</h4>\n<ul>\n<li><a href=\"http://www.jq22.com/plugin/367?spm=5176.100239.blogcont82041.270.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.270\">类似 Photoshop 的界面取色插件</a></li>\n<li><a href=\"https://github.com/jquery/jquery-color/?spm=5176.100239.blogcont82041.271.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.271\">jquery color</a></li>\n<li><a href=\"http://www.oschina.net/project/tag/287/color-picker?spm=5176.100239.blogcont82041.272.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.272\">取色插件集合</a></li>\n<li><a href=\"https://github.com/mattfarina/farbtastic?spm=5176.100239.blogcont82041.273.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.273\">farbtastic 圆环＋正方形</a></li>\n\n</ul>\n<h4 id=\"43\">16. 城市联动</h4>\n<ul>\n<li><a href=\"http://www.ijquery.cn/?spm=5176.100239.blogcont82041.274.jiu0a3&amp;p=360\" data-spm-anchor-id=\"5176.100239.blogcont82041.274\">jquery.cityselect.js基于jQuery+JSON的省市或自定义联动效果</a></li>\n\n</ul>\n<h4 id=\"44\">17. 剪贴板</h4>\n<ul>\n<li><a href=\"https://github.com/zeroclipboard/zeroclipboard?spm=5176.100239.blogcont82041.275.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.275\">剪贴板</a></li>\n<li><a href=\"http://zenorocha.github.io/clipboard.js/?spm=5176.100239.blogcont82041.276.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.276\">clipboard 最新的剪切方案</a></li>\n<li><a href=\"https://github.com/zenorocha/clipboard.js?spm=5176.100239.blogcont82041.277.jiu0a3&amp;file=clipboard.js\" data-spm-anchor-id=\"5176.100239.blogcont82041.277\">不是Flash的剪贴板</a></li>\n</ul>\n<h4 id=\"45\">18. 简繁转换</h4>\n<ul>\n<li><a href=\"https://github.com/BYVoid/OpenCC?spm=5176.100239.blogcont82041.278.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.278\">简繁转换</a></li>\n</ul>\n<h4 id=\"46\">19. 表格 Grid</h4>\n<ul>\n<li><a href=\"http://facebook.github.io/fixed-data-table/?spm=5176.100239.blogcont82041.279.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.279\">facebook表格</a></li>\n<li><a href=\"http://handsontable.com/?spm=5176.100239.blogcont82041.280.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.280\">类似于Excel编辑表格-handsontable</a></li>\n<li><a href=\"http://bootstrap-table.wenzhixin.net.cn/?spm=5176.100239.blogcont82041.281.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.281\">bootstrap-table插件</a></li>\n<li><a href=\"https://www.datatables.net/?spm=5176.100239.blogcont82041.282.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.282\">datatables</a></li>\n</ul>\n<h4 id=\"47\">20. 在线演示</h4>\n<ul>\n<li><a href=\"http://runjs.cn/?spm=5176.100239.blogcont82041.283.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.283\">js 在线编辑 - runjs</a></li>\n<li><a href=\"http://jsbin.com/?spm=5176.100239.blogcont82041.284.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.284\">js 在线编辑 - jsbin</a></li>\n<li><a href=\"http://codepen.io/?spm=5176.100239.blogcont82041.285.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.285\">js 在线编辑 - codepen</a></li>\n<li><a href=\"http://jsfiddle.net/?spm=5176.100239.blogcont82041.286.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.286\">js 在线编辑 - jsfiddle</a></li>\n<li><a href=\"http://ideone.com/?spm=5176.100239.blogcont82041.287.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.287\">java 在线编辑 - runjs</a></li>\n<li><a href=\"http://code.hcharts.cn/?spm=5176.100239.blogcont82041.288.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.288\">js 在线编辑 - hcharts</a></li>\n<li><a href=\"http://jsdm.com/?spm=5176.100239.blogcont82041.289.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.289\">js 在线编辑 - jsdm</a></li>\n<li><a href=\"http://sqlfiddle.com/?spm=5176.100239.blogcont82041.290.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.290\">sql 在线编辑 - sqlfiddle</a></li>\n<li><a href=\"https://thimble.mozilla.org?spm=5176.100239.blogcont82041.291.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.291\">mozilla 在线编辑器</a></li>\n</ul>\n<h4 id=\"48\">21. 播放器</h4>\n<ul>\n<li><a href=\"https://github.com/zmmbreeze/DeadSimpleVideoPlayer?spm=5176.100239.blogcont82041.292.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.292\">Html5 VideoPlayer</a></li>\n</ul>\n<h4 id=\"49\">22. 粒子动画</h4>\n<ul>\n<li><a href=\"http://a-jie.github.io/Proton/?spm=5176.100239.blogcont82041.293.jiu0a3#example\" data-spm-anchor-id=\"5176.100239.blogcont82041.293\">Proton 烟花</a></li>\n</ul>\n<h3 id=\"50\">九. Nodejs</h3>\n<ul>\n<li><a href=\"http://liuqing.pw/?spm=5176.100239.blogcont82041.294.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.294\">nodejs 篇幅比较巨大</a></li>\n<li><a href=\"https://github.com/alsotang/node-lessons?spm=5176.100239.blogcont82041.295.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.295\">Node.js 包教不包会</a></li>\n<li><a href=\"http://www.rainweb.cn/article/category/Nodejs?spm=5176.100239.blogcont82041.296.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.296\">篇幅比较少</a></li>\n<li><a href=\"http://www.w3cfuns.com/article-5598538-1-1.html?spm=5176.100239.blogcont82041.297.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.297\">node express 入门教程</a></li>\n<li><a href=\"http://my.oschina.net/u/568264/blog/193773?spm=5176.100239.blogcont82041.298.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.298\">nodejs定时任务</a></li>\n<li><a href=\"http://60sky.com/?spm=5176.100239.blogcont82041.299.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.299\">一个nodejs博客</a></li>\n<li><a href=\"http://www.cnblogs.com/yexiaochai/p/3536547.html?spm=5176.100239.blogcont82041.300.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.300\">【NodeJS 学习笔记04】新闻发布系统</a></li>\n<li><a href=\"http://www.cnblogs.com/qqloving/p/3541099.html?spm=5176.100239.blogcont82041.301.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.301\">过年7天乐，学nodejs 也快乐</a></li>\n<li><a href=\"https://github.com/nqdeng/7-days-nodejs?spm=5176.100239.blogcont82041.302.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.302\">七天学会NodeJS</a></li>\n<li><a href=\"http://www.cnblogs.com/zhongweiv/p/nodejs_events.html?spm=5176.100239.blogcont82041.303.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.303\">Nodejs学习笔记（二）--- 事件模块</a></li>\n<li><a href=\"http://www.cnblogs.com/liusuqi/p/3735491.html?spm=5176.100239.blogcont82041.304.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.304\">nodejs入门</a></li>\n<li><a href=\"https://github.com/zensh/jsgen?spm=5176.100239.blogcont82041.305.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.305\">angularjs nodejs</a></li>\n<li><a href=\"http://blog.fens.me/series-nodejs/?spm=5176.100239.blogcont82041.306.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.306\">从零开始nodejs系列文章</a></li>\n<li><a href=\"http://debuggable.com/posts/understanding-node-js:4bd98440-45e4-4a9a-8ef7-0f7ecbdd56cb?spm=5176.100239.blogcont82041.307.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.307\">理解nodejs</a></li>\n<li><a href=\"http://blog.mixu.net/2011/02/01/understanding-the-node-js-event-loop/?spm=5176.100239.blogcont82041.308.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.308\">nodejs事件轮询</a></li>\n<li><a href=\"http://www.nodebeginner.org/index-zh-cn.html?spm=5176.100239.blogcont82041.309.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.309\">node入门</a></li>\n<li><a href=\"http://ourjs.com/detail/53e1f281c5910a9806000001?spm=5176.100239.blogcont82041.310.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.310\">nodejs cms</a></li>\n<li><a href=\"http://ourjs.com/detail/529ca5950cb6498814000005?spm=5176.100239.blogcont82041.311.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.311\">Node初学者入门，一本全面的NodeJS教程</a></li>\n<li><a href=\"http://www.barretlee.com/blog/2015/10/07/debug-nodejs-in-command-line/?spm=5176.100239.blogcont82041.312.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.312\">NodeJS的代码调试和性能调优</a></li>\n</ul>\n## 十. 性能优化\n<ol>\n<li>常规优化</li>\n</ol>\n- [Javascript高性能动画与页面渲染](http://www.infoq.com/cn/articles/javascript-high-performance-animation-and-page-rendering)\n- [移动H5前端性能优化指南](http://isux.tencent.com/h5-performance.html)\n- [5173首页前端性能优化实践](http://ued.5173.com/?p=1731)\n- [给网页设计师和前端开发者看的前端性能优化](http://www.uisdc.com/front-end-performance-for-web-designers-and-front-end-developers)\n- [复杂应用的 CSS 性能分析和优化建议](http://www.orzpoint.com/profiling-css-and-optimization-notes/)\n- [张鑫旭——前端性能](http://www.zhangxinxu.com/wordpress/tag/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD/)\n- [前端性能监控总结](http://www.xiaoqiang.org/javascript/font-end-performance-monitor.html)\n- [网站性能优化之CSS无图片技术](http://udc.weibo.com/2013/05/%E7%BD%91%E7%AB%99%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%B9%8Bcss%E6%97%A0%E5%9B%BE%E7%89%87%E6%8A%80%E6%9C%AF/)\n- [web前端性能优化进阶路](http://www.aliued.cn/2013/01/20/web%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E8%BF%9B%E9%98%B6%E8%B7%AF.html)\n- [前端技术：网站性能优化之CSS无图片技术](http://my.eoe.cn/tuwandou/archive/4544.html)\n- [浏览器的加载与页面性能优化](http://www.baiduux.com/blog/2011/02/15/browser-loading/)\n- [页面加载中的图片性能优化](http://www.w3ctech.com/p/1503)\n- [Hey——前端性能](http://www.feelcss.com/tag/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD)\n- [html优化](http://www.baiduux.com/blog/2010/03/15/html%E4%BC%98%E5%8C%96-2/)\n- [99css——性能](http://www.99css.com/tag/%e6%80%a7%e8%83%bd)\n- [Yslow——性能优化](http://www.yslow.net/category.php?cid=20)\n- [YSLOW中文介绍](http://www.cnblogs.com/yslow/)\n- [转一篇Yahoo关于网站性能优化的文章，兼谈本站要做的优化](http://www.360ito.com/article/40.html)\n- [Yahoo!团队实践分享：网站性能](http://www.360doc.com/content/10/0928/09/2588264_56971287.shtml)\n- [网站性能优化指南：什么使我们的网站变慢？](http://blog.jiasule.com/i/153)\n- [网站性能优化实践，减少加载时间，提高用户体验](http://www.powereasy.net/helpyou/knowledge/ecommerce/9593.html)\n- [浅谈网站性能优化 前端篇](http://www.umtry.com/archives/747.html)\n- [前端重构实践之如何对网站性能优化？](http://www.adinnet.cn/blog/designview/2012-7-12/678.html)\n- [前端性能优化：使用媒体查询加载指定大小的背景图片](http://www.gbin1.com/technology/javascript/20130708-front-end-performance-optimization-9/)\n- [网站性能系列博文](http://www.mykuer.com/post/factors-that-affect-the-speed-of-web-site-open.html)\n- [加载，不只是少一点点](http://tgideas.qq.com/webplat/info/news_version3/804/808/811/m579/201109/41355.shtml)\n- [前端性能的测试与优化](http://mzhou.me/article/95310/)\n- [分享网页加载速度优化的一些技巧？](http://www.gbin1.com/technology/html/20130217-tips-for-speed-up-page-loading/)\n- [页面加载中的图片性能优化](http://www.f2es.com/images-bytes-opt/)\n- [web前端优化(基于Yslow)](http://www.tcreator.info/webSchool/website/Front-end-Opt-Yslow.html)\n- [网站性能优化工具大全](https://www.qianduan.net/website-performance-optimization-tool.html)\n- [【高性能前端1】高性能HTML](http://www.alloyteam.com/2012/10/high-performance-html/)\n- [【高性能前端2】高性能CSS](http://www.alloyteam.com/2012/10/high-performance-css/)\n- [由12306谈谈网站前端性能和后端性能优化](http://coolshell.cn/articles/6470.html)\n- [AlloyTeam——前端优化](http://www.alloyteam.com/webfrontend/%E5%89%8D%E7%AB%AF%E4%BC%98%E5%8C%96/)\n- [毫秒必争，前端网页性能最佳实践](http://www.cnblogs.com/developersupport/p/3248695.html)\n- [网站性能工具Yslow的使用方法](http://blog.sina.com.cn/s/blog_6e9d2e0701017kvu.html)\n- [前端工程与性能优化（上）：静态资源版本更新与缓存](http://www.infoq.com/cn/articles/front-end-engineering-and-performance-optimization-part1)\n- [前端工程与性能优化（下）：静态资源管理与模板框架](http://www.infoq.com/cn/articles/front-end-engineering-and-performance-optimization-part2)\n- [HTTPS连接的前几毫秒发生了什么](http://blog.jobbole.com/48369/)\n- [Yslow](http://uicss.cn/yslow/#more-12319)\n- [Essential Web Performance Metrics — A Primer, Part 1](http://blog.smartbear.com/web-performance/essential-web-performance-metrics-a-primer-part-1/)\n- [Essential Web Performance Metrics — Part 2](http://blog.smartbear.com/performance/essential-web-performance-metrics-part-2/)\n- [YUISlide,针对移动设备的动画性能优化](http://jayli.github.io/blog/data/2011/12/23/yuislide.html)\n- [Improving Site Performance](http://joelglovier.com/improving-site-performance/)\n- [让网站提速的最佳前端实践](http://segmentfault.com/a/1190000000367899)\n- [Why Website Speed is Important](http://sixrevisions.com/web-development/why-website-speed-is-important/)\n- [Need for Speed – How to Improve your Website Performance](https://www.devbridge.com/articles/need-for-speed-how-to-improve-your-website-performance/)\n- [阿里无线前端性能优化指南 (Pt.1 加载期优化) ](https://github.com/amfe/article/issues/1)\n- []()\n<ol>\n<li>优化工具</li>\n</ol>\n- [JavaScript 性能分析新工具 OneProfile](http://www.html-js.com/article/3083)\n- [JavaScript 堆内存分析新工具 OneHeap](http://www.html-js.com/article/3091)\n<ol>\n<li>在线工具</li>\n</ol>\n- [google在线工具](https://developers.google.com/speed/pagespeed/insights/)\n- [阿里测](http://www.alibench.com/)\n- [阿里-免费测试服务](http://itest.aliyun.com/)\n- [阿里-F2etest多浏览器兼容性测试解决方案](https://github.com/alibaba/f2etest)\n- [js性能测试](http://jsperf.com/)\n- []()\n<h3 id=\"52\">十一. 前端架构</h3>\n<ul>\n<li><a href=\"http://www.zhihu.com/topic/19612641?spm=5176.100239.blogcont82041.313.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.313\">技术架构</a></li>\n<li><a href=\"http://saito.im/note/The-Architecture-of-F2E/?spm=5176.100239.blogcont82041.314.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.314\">前端架构</a></li>\n<li><a href=\"http://www.zhihu.com/question/24092572?spm=5176.100239.blogcont82041.315.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.315\">如何成为前端架构师</a></li>\n<li><a href=\"http://hikejun.com/sharing/2010webrebuild/?spm=5176.100239.blogcont82041.316.jiu0a3&amp;file=fe-infrastructure.html\" data-spm-anchor-id=\"5176.100239.blogcont82041.316\">关于前端架构-张克军</a></li>\n<li><a href=\"http://www.zhihu.com/question/25583350?spm=5176.100239.blogcont82041.317.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.317\">百度腾讯offer比较（腾讯游戏VS百度基础架构）</a></li>\n\n</ul>\n<h3 id=\"53\">十二. 个人作品</h3>\n<h4 id=\"54\">1. 推荐作品</h4>\n<ul>\n<li><a href=\"https://gist.github.com/wintercn?spm=5176.100239.blogcont82041.318.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.318\">winter代码片段需要翻墙</a></li>\n<li><a href=\"http://www.fgm.cc/learn/?spm=5176.100239.blogcont82041.319.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.319\">fgm</a></li>\n<li><a href=\"https://github.com/hongru/hongru.github.com?spm=5176.100239.blogcont82041.320.jiu0a3&amp;file=hongru.github.com\" data-spm-anchor-id=\"5176.100239.blogcont82041.320\">岑安作品集</a></li>\n<li><a href=\"http://kmdjs.github.io/?spm=5176.100239.blogcont82041.321.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.321\">当耐特demo集合</a></li>\n<li><a href=\"http://www.laoshu133.com/Lab/?spm=5176.100239.blogcont82041.322.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.322\">米空格 js作品</a></li>\n<li><a href=\"http://koen301.github.io/?spm=5176.100239.blogcont82041.323.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.323\">myFocus</a></li>\n<li><a href=\"http://panxuepeng.github.io/seajslib/?spm=5176.100239.blogcont82041.324.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.324\">SeaJS组件库</a></li>\n<li><a href=\"http://yanhaijing.com/myProject/?spm=5176.100239.blogcont82041.325.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.325\">颜海镜作品</a></li>\n<li><a href=\"http://jo2.org/category/myworks/?spm=5176.100239.blogcont82041.326.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.326\">脚儿网作品</a></li>\n<li><a href=\"http://www.cnitblog.com/yemoo/category/3107.html?spm=5176.100239.blogcont82041.327.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.327\">javascript个人作品</a></li>\n<li><a href=\"http://bbs.miaov.com/forum.php?spm=5176.100239.blogcont82041.328.jiu0a3&amp;mod=viewthread&amp;tid=7790\" data-spm-anchor-id=\"5176.100239.blogcont82041.328\">妙味的雷东升游戏作品</a></li>\n<li><a href=\"http://bbs.csdn.net/topics/380227212?spm=5176.100239.blogcont82041.329.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.329\">javascript作品集</a></li>\n<li><a href=\"https://github.com/TooBug/works?spm=5176.100239.blogcont82041.330.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.330\">云五笔，灰度产生生成工具</a></li>\n<li><a href=\"http://koen301.github.io/?spm=5176.100239.blogcont82041.331.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.331\">项目主页</a></li>\n<li><a href=\"http://zaole.net/?spm=5176.100239.blogcont82041.332.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.332\">个性的作品主页</a></li>\n<li><a href=\"http://static.tingall.com/v2/player/?spm=5176.100239.blogcont82041.333.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.333\">播放器</a></li>\n<li><a href=\"http://ucren.com/blog/demos?spm=5176.100239.blogcont82041.334.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.334\">ucren js demos 集</a></li>\n<li><a href=\"http://www.zhinengshe.com/works_list.html?spm=5176.100239.blogcont82041.335.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.335\">智能社</a></li>\n<li><a href=\"http://demos.shizuwu.cn/?spm=5176.100239.blogcont82041.336.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.336\">实例陈列架</a></li>\n<li><a href=\"http://zoye.sinaapp.com/demo?spm=5176.100239.blogcont82041.337.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.337\">zoye demo</a></li>\n<li><a href=\"http://lab.yuanwai.wang/?spm=5176.100239.blogcont82041.338.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.338\">王员外</a></li>\n<li><a href=\"http://pingfan1990.sinaapp.com?spm=5176.100239.blogcont82041.339.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.339\">平凡</a></li>\n<li><a href=\"http://www.lovewebgames.com/?spm=5176.100239.blogcont82041.340.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.340\">jyg 游戏案例</a></li>\n<li><a href=\"http://www.helloweba.com/list.html?spm=5176.100239.blogcont82041.341.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.341\">很多jquery插件</a></li>\n<li><a href=\"http://www.bujichong.com/sojs/api/index.html?spm=5176.100239.blogcont82041.342.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.342\">不羁虫 - soJs 作品系列</a></li>\n<li><a href=\"http://frozenui.github.io/case.html?spm=5176.100239.blogcont82041.343.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.343\">frozenui</a></li>\n<li><a href=\"http://js-game.github.io/othello/?spm=5176.100239.blogcont82041.344.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.344\">黑白棋</a></li>\n<li><a href=\"http://yansm.github.io/fromone/index.html?spm=5176.100239.blogcont82041.345.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.345\">fromone</a></li>\n</ul>\n<h4 id=\"55\">2. 群员作品</h4>\n<ul>\n<li><a href=\"http://demo.webjyh.com/?spm=5176.100239.blogcont82041.346.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.346\">MDialog - [合肥-M.J]</a></li>\n<li><a href=\"http://sandbox.runjs.cn/show/do6zlrrk?spm=5176.100239.blogcont82041.347.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.347\">轮播图 - [上海－冷静]</a></li>\n<li><a href=\"http://www.replace5.com/?spm=5176.100239.blogcont82041.348.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.348\">[广州—坚壳]</a></li>\n<li><a href=\"http://www.seejs.com/demos/?spm=5176.100239.blogcont82041.349.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.349\">[成都 - 无痕]　感恩节专题</a></li>\n<li><a href=\"http://hacke2.github.io/works?spm=5176.100239.blogcont82041.350.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.350\">[球霸天]</a></li>\n<li><a href=\"http://www.cnblogs.com/mcat/?spm=5176.100239.blogcont82041.351.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.351\">[北京-小数]</a></li>\n<li><a href=\"http://thx.github.io/magix/?spm=5176.100239.blogcont82041.352.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.352\">[ptf] Magix 工具</a></li>\n<li><a href=\"http://thx.github.io/magix/?spm=5176.100239.blogcont82041.353.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.353\">[杭州-Pft] Magix 基于 MVC 结构和 Hash 驱动的 OPOA（One Page One Application）应用</a></li>\n<li><a href=\"http://bh-lay.com/labs/?spm=5176.100239.blogcont82041.354.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.354\">[上海-剧中人]-实验室</a></li>\n<li><a href=\"http://jikeytang.github.io?spm=5176.100239.blogcont82041.355.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.355\">[上海-豪情 ] 作品集合</a></li>\n<li><a href=\"http://guoshan.sinaapp.com/?spm=5176.100239.blogcont82041.356.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.356\">[成都-feeling]</a></li>\n<li><a href=\"http://www.cnblogs.com/liyunhua/?spm=5176.100239.blogcont82041.357.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.357\">[上海-angela]</a></li>\n<li><a href=\"http://hcjp.github.io/work/demo/?spm=5176.100239.blogcont82041.358.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.358\">[海南-hank]作品</a></li>\n<li><a href=\"https://github.com/yibuyisheng/blogs/issues?spm=5176.100239.blogcont82041.359.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.359\">[上海-张力]博客</a></li>\n<li><a href=\"http://zkske121.github.io/?spm=5176.100239.blogcont82041.360.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.360\">[上海-zenki]作品</a></li>\n<li><a href=\"http://01google.sinaapp.com/locker.html?spm=5176.100239.blogcont82041.361.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.361\">移动端图案解锁</a></li>\n<li><a href=\"https://github.com/webjyh/MPreview.mobile?spm=5176.100239.blogcont82041.362.jiu0a3&amp;file=MPreview.mobile\" data-spm-anchor-id=\"5176.100239.blogcont82041.362\">[合肥-M.J] - MPreview 移动端图片预览组</a></li>\n<li><a href=\"https://github.com/webjyh/Mexam?spm=5176.100239.blogcont82041.363.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.363\">[合肥-M.J] - Mexam 移动端在线做题组</a></li>\n<li><a href=\"http://letyougo.github.io/dancer/?spm=5176.100239.blogcont82041.364.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.364\">[北京-苏瑞] - dancer小人</a></li>\n<li><a href=\"http://k.swao.cn/js/?spm=5176.100239.blogcont82041.365.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.365\">[上海-玄沐]- 个人网站</a></li>\n<li><a href=\"http://www.meckodo.com/?spm=5176.100239.blogcont82041.366.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.366\">[厦门-二哲]- 个人博客</a></li>\n</ul>\n<h4 id=\"56\">3. 国外大牛精品</h4>\n<ul>\n<li><a href=\"http://pazguille.me/?spm=5176.100239.blogcont82041.367.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.367\">pazguille</a></li>\n</ul>\n<h3 id=\"57\">十三. 简历模板</h3>\n<ul>\n<li><a href=\"http://learnshare.github.io/about/index.html?spm=5176.100239.blogcont82041.368.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.368\">不错的个人简历</a></li>\n<li><a href=\"http://hcy2367.github.io/resume/?spm=5176.100239.blogcont82041.369.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.369\">简历</a></li>\n<li><a href=\"http://ncuey.sinaapp.com/CrispElite/?spm=5176.100239.blogcont82041.370.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.370\">张伦</a></li>\n<li><a href=\"https://github.com/hacke2/ResumeSample?spm=5176.100239.blogcont82041.371.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.371\">简历</a></li>\n<li><a href=\"http://blog.dandyweng.com/2013/07/how-my-website-was-created/?spm=5176.100239.blogcont82041.372.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.372\">翁天信</a></li>\n<li><a href=\"http://www.webhek.com/misc/interactive-resume/?spm=5176.100239.blogcont82041.373.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.373\">动画方式的简历</a></li>\n<li><a href=\"http://www.linqing07.com/resume.html?spm=5176.100239.blogcont82041.374.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.374\">组件丰富简历</a></li>\n<li><a href=\"http://www.mojianli.com/resume/view?spm=5176.100239.blogcont82041.375.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.375\">简历池</a></li>\n<li><a href=\"http://www.haorooms.com/about?spm=5176.100239.blogcont82041.376.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.376\">haorooms博客</a></li>\n<li><a href=\"http://cv.youngdze.com/?spm=5176.100239.blogcont82041.377.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.377\">Justin Young</a></li>\n<li><a href=\"\"></a></li>\n</ul>\n<h3 id=\"58\">十四. 面试题</h3>\n<ul>\n<li><a href=\"http://www.nowcoder.com/discuss/3196?spm=5176.100239.blogcont82041.378.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.378\">那几个月在找工作（百度，网易游戏）</a></li>\n<li><a href=\"http://www.html-js.com/article/1743?spm=5176.100239.blogcont82041.379.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.379\">2014最新面试题</a></li>\n<li><a href=\"http://www.w3cfuns.com/thread-5598563-2-1.html?spm=5176.100239.blogcont82041.380.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.380\">阿里前端面试题</a></li>\n<li><a href=\"http://www.cnblogs.com/imwtr/p/4685546.html?spm=5176.100239.blogcont82041.381.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.381\">2016校招内推 -- 阿里巴巴前端 -- 三面面试经历 </a></li>\n<li><a href=\"http://www.w3cfuns.com/article-5599657-1-1.html?spm=5176.100239.blogcont82041.382.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.382\">腾讯面试题</a></li>\n<li><a href=\"http://www.cnblogs.com/lvdabao/p/3660707.html?spm=5176.100239.blogcont82041.383.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.383\">年后跳槽那点事：乐视+金山+360面试之行</a></li>\n<li><a href=\"http://fatesinger.com/2722.html?spm=5176.100239.blogcont82041.384.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.384\">阿里前端面试题上线</a></li>\n<li><a href=\"http://www.cnblogs.com/52cik/p/js-question-lg.html?spm=5176.100239.blogcont82041.385.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.385\">拉勾网js面试题</a></li>\n<li><a href=\"http://www.cnblogs.com/allenxing/p/3724382.html?spm=5176.100239.blogcont82041.386.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.386\">前端面试</a></li>\n<li><a href=\"http://mianshiti.diandian.com/?spm=5176.100239.blogcont82041.387.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.387\">Web开发笔试面试题 大全</a></li>\n<li><a href=\"http://segmentfault.com/a/1190000000465431?spm=5176.100239.blogcont82041.388.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.388\">前端开发面试题</a></li>\n<li><a href=\"https://github.com/markyun/My-blog/tree/master/Front-end-Developer-Questions?spm=5176.100239.blogcont82041.389.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.389\">2014最新前端面试题</a></li>\n<li><a href=\"https://github.com/fex-team/interview-questions?spm=5176.100239.blogcont82041.390.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.390\">百度面试</a></li>\n<li><a href=\"http://www.w3cfuns.com/forum.php?spm=5176.100239.blogcont82041.391.jiu0a3&amp;mod=forumdisplay&amp;fid=51&amp;filter=typeid&amp;typeid=177\" data-spm-anchor-id=\"5176.100239.blogcont82041.391\">面试题</a></li>\n<li><a href=\"https://github.com/darcyclarke/Front-end-Developer-Interview-Questions/tree/master/Chinese?spm=5176.100239.blogcont82041.392.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.392\">前端工作面试问题</a></li>\n<li><a href=\"http://segmentfault.com/a/1190000000465431?spm=5176.100239.blogcont82041.393.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.393\">前端开发面试题</a></li>\n<li><a href=\"http://ourjs.com/detail/5%E4%B8%AA%E7%BB%8F%E5%85%B8%E7%9A%84%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98?spm=5176.100239.blogcont82041.394.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.394\">5个经典的前端面试问题</a></li>\n<li><a href=\"http://segmentfault.com/a/1190000002562454?spm=5176.100239.blogcont82041.395.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.395\">最全前端面试问题及答案总结 </a></li>\n<li><a href=\"http://www.html-js.com/article/Large-search-front-team-column%202961?spm=5176.100239.blogcont82041.396.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.396\">如何面试一名前端开发工程师？</a></li>\n<li><a href=\"https://github.com/hawx1993/Front-end-Interview-questions?spm=5176.100239.blogcont82041.397.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.397\">史上最全 前端开发面试问题及答案整理</a></li>\n<li><a href=\"http://www.cnblogs.com/xiaoruo/p/4665163.html?spm=5176.100239.blogcont82041.398.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.398\">前端实习生面试总结 </a></li>\n<li><a href=\"https://github.com/hawx1993/Front-end-Interview-questions?spm=5176.100239.blogcont82041.399.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.399\">史上最全 前端开发面试问题及答案整理</a></li>\n<li><a href=\"http://blog.jobbole.com/78738/?spm=5176.100239.blogcont82041.400.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.400\">BAT及各大互联网公司2014前端笔试面试题：JavaScript篇</a></li>\n<li><a href=\"https://github.com/paddingme/Front-end-Web-Development-Interview-Question?spm=5176.100239.blogcont82041.401.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.401\">前端开发面试题大收集</a></li>\n<li><a href=\"https://github.com/qiu-deqing/FE-interview?spm=5176.100239.blogcont82041.402.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.402\">收集的前端面试题和答案</a></li>\n<li><a href=\"http://www.zhihu.com/question/19568008?spm=5176.100239.blogcont82041.403.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.403\">如何面试前端工程师</a></li>\n<li><a href=\"https://github.com/markyun/My-blog/blob/master/Front-end-Developer-Questions/Questions-and-Answers/README.md?spm=5176.100239.blogcont82041.404.jiu0a3&amp;file=README.md\" data-spm-anchor-id=\"5176.100239.blogcont82041.404\">前端开发面试题</a></li>\n<li><a href=\"http://www.nowcoder.com/discuss?spm=5176.100239.blogcont82041.405.jiu0a3&amp;type=2\" data-spm-anchor-id=\"5176.100239.blogcont82041.405\">牛客网-笔试面经</a></li>\n</ul>\n<h3 id=\"59\">十五. iconfont</h3>\n<ul>\n<li><a href=\"http://www.zhihu.com/question/21253343?spm=5176.100239.blogcont82041.406.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.406\">中文字体</a></li>\n<li><a href=\"http://iconfont.cn?spm=5176.100239.blogcont82041.407.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.407\">淘宝字库</a></li>\n<li><a href=\"http://mux.alimama.com/fonts?spm=5176.100239.blogcont82041.408.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.408\">字体</a></li>\n<li><a href=\"http://iconfont.cn/help/platform.html?spm=5176.100239.blogcont82041.409.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.409\">制作教程</a></li>\n<li><a href=\"http://www.zhangxinxu.com/wordpress/?spm=5176.100239.blogcont82041.410.jiu0a3&amp;s=icomoon\" data-spm-anchor-id=\"5176.100239.blogcont82041.410\">zhangxinxu-icommon</a></li>\n<li><a href=\"https://icomoon.io/app/?spm=5176.100239.blogcont82041.411.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.411\">icommon</a></li>\n<li><a href=\"http://imooc.com/learn/243?spm=5176.100239.blogcont82041.412.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.412\">用字体在网页中画ICON图标(推荐教程)</a></li>\n<li><a href=\"http://font-spider.org/?spm=5176.100239.blogcont82041.413.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.413\">字体压缩工具</a> 感谢初级群　[深圳-小鱼] 的推荐</li>\n</ul>\n<h3 id=\"60\">十六. 开发工具类</h3>\n<ol>\n<li>前端开发工具</li>\n</ol>\n- [IntelliJ IDEA 简体中文专题教程](https://github.com/judasn/IntelliJ-IDEA-Tutorial)\n- [Webstorm,InterllIdea,Phpstorm](http://t.cn/8kZZ1Uy)\n- [SublimeText](https://github.com/jikeytang/sublime-text)\n- [Atom](https://atom.io/)\n- [visual studio code](https://code.visualstudio.com/)\n<ol>\n<li>\n<p>Chrome, Firebug, Filddle 调试</p>\n<ol>\n<li>Fiddler\n<ul>\n<li><a href=\"http://www.cnblogs.com/tugenhua0707/p/4623317.html?spm=5176.100239.blogcont82041.414.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.414\">Fiddler调式使用知多少(一)深入研究</a></li>\n<li><a href=\"http://www.cnblogs.com/strick/p/4570006.html?spm=5176.100239.blogcont82041.415.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.415\">微信fiddle</a></li>\n<li><a href=\"http://gaoboy.com/article/26.html?spm=5176.100239.blogcont82041.416.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.416\">微信fiddle</a></li>\n<li><a href=\"\"></a></li>\n</ul>\n</li>\n<li>Chrome\n<ul>\n<li><a href=\"https://developer.chrome.com/devtools?spm=5176.100239.blogcont82041.417.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.417\">Google Chrome 官方</a></li>\n<li><a href=\"http://www.cnblogs.com/constantince/p/4565261.html?spm=5176.100239.blogcont82041.418.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.418\">Chrome - 基础</a></li>\n<li><a href=\"http://www.cnblogs.com/constantince/p/4579121.html?spm=5176.100239.blogcont82041.419.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.419\">Chrome - 进阶</a></li>\n<li><a href=\"http://www.cnblogs.com/constantince/p/4585983.html?spm=5176.100239.blogcont82041.420.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.420\">Chrome - 性能</a></li>\n<li><a href=\"http://www.cnblogs.com/constantince/p/4607497.html?spm=5176.100239.blogcont82041.421.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.421\">Chrome - 性能进阶</a></li>\n<li><a href=\"http://www.cnblogs.com/constantince/p/4624241.html?spm=5176.100239.blogcont82041.422.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.422\">Chrome - 移动</a></li>\n<li><a href=\"http://www.cnblogs.com/liyunhua/p/4544738.html?spm=5176.100239.blogcont82041.423.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.423\">Chrome - 使用技巧</a></li>\n<li><a href=\"http://www.cnblogs.com/Wayou/p/chrome-console-tips-and-tricks.html?spm=5176.100239.blogcont82041.424.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.424\">Chrome - Console控制台不完全指南</a></li>\n<li><a href=\"http://c7sky.com/chrome-devtools-workspace.html?spm=5176.100239.blogcont82041.425.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.425\">Chrome - Workspace使浏览器变成IDE</a></li>\n<li><a href=\"http://www.html-js.com/article/Nothing-blind%202975?spm=5176.100239.blogcont82041.426.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.426\">network面板</a></li>\n<li><a href=\"http://anti-code.com/devtools-cheatsheet/?spm=5176.100239.blogcont82041.427.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.427\">chrome开发工具快捷键</a></li>\n<li><a href=\"http://www.html-js.com/article/2327?spm=5176.100239.blogcont82041.428.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.428\">chrome调试工具常用功能整理</a></li>\n<li><a href=\"http://www.iinterest.net/2014/05/09/chrome-dev-tool-workspace/?spm=5176.100239.blogcont82041.429.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.429\">Chrome 开发工具 Workspace 使用</a></li>\n<li><a href=\"http://www.cppblog.com/deercoder/archive/2011/10/22/158886.html?spm=5176.100239.blogcont82041.430.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.430\">Chrome神器Vimium快捷键学习记录 </a></li>\n<li><a href=\"http://www.w3cplus.com/sassguide/debug.html?spm=5176.100239.blogcont82041.431.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.431\">sass调试-w3cplus</a></li>\n<li><a href=\"http://www.w3cplus.com/tools/how-to-use-chrome-devtools-like-a-pro.html?spm=5176.100239.blogcont82041.432.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.432\">如何更专业的使用Chrome开发者工具-w3cplus</a></li>\n<li><a href=\"http://sentsin.com/web/253.html?spm=5176.100239.blogcont82041.433.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.433\">chrome调试canvas</a></li>\n<li><a href=\"https://developer.chrome.com/devtools/index?spm=5176.100239.blogcont82041.434.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.434\">chrome profiles1</a></li>\n<li><a href=\"http://h5dev.uc.cn/article-25-1.html?spm=5176.100239.blogcont82041.435.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.435\">chrome profiles2</a></li>\n<li><a href=\"http://www.oschina.net/translate/performance-optimisation-with-timeline-profiles?spm=5176.100239.blogcont82041.436.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.436\">chrome profiles3</a></li>\n<li><a href=\"https://developer.chrome.com/devtools/docs/mobile-emulation?spm=5176.100239.blogcont82041.437.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.437\">chrome移动版调试</a></li>\n<li><a href=\"http://ued.taobao.org/blog/2012/06/debug-with-chrome-dev-tool/?spm=5176.100239.blogcont82041.438.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.438\">chrome调试</a></li>\n<li><a href=\"http://www.cnblogs.com/QLeelulu/archive/2011/08/28/2156402.html?spm=5176.100239.blogcont82041.439.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.439\">chrome的调试</a></li>\n<li><a href=\"https://developer.chrome.com/devtools/docs/commandline-api?spm=5176.100239.blogcont82041.440.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.440\">chrome console 命令详解</a></li>\n<li><a href=\"http://www.cnblogs.com/leonkao/p/3809655.html?spm=5176.100239.blogcont82041.441.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.441\">查看事件绑定1</a></li>\n<li><a href=\"http://www.cnblogs.com/xiaoyao2011/p/3447421.html?spm=5176.100239.blogcont82041.442.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.442\">查看事件绑定2</a></li>\n<li><a href=\"http://segmentfault.com/a/1190000000683599?spm=5176.100239.blogcont82041.443.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.443\">神器——Chrome开发者工具(一)</a></li>\n<li><a href=\"https://xinranliu.me/2015-05-22-qiqu-performance/?spm=5176.100239.blogcont82041.444.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.444\">奇趣百科性能优化(Chrome DevTools 中的 Timeline Profils 等工具使用介绍)</a></li>\n<li><a href=\"http://frontenddev.org/link/15-tips-of-chrome-developer-tools.html?spm=5176.100239.blogcont82041.445.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.445\">chrome 开发者工具的 15 个小技巧</a></li>\n<li><a href=\"http://1ke.co/course/361?spm=5176.100239.blogcont82041.446.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.446\">Chrome开发者工具不完全指南</a></li>\n<li><a href=\"http://segmentfault.com/a/1190000003882567?spm=5176.100239.blogcont82041.447.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.447\">Chrome 开发者工具使用技巧</a></li>\n</ul>\n</li>\n<li>Firebug\n<ul>\n<li><a href=\"http://www.imooc.com/learn/137?spm=5176.100239.blogcont82041.448.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.448\">firebug视频教程</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Tools/WebIDE?spm=5176.100239.blogcont82041.449.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.449\">firefox 模拟器</a></li>\n<li><a href=\"http://www.cnblogs.com/ctriphire/p/4116207.html?spm=5176.100239.blogcont82041.450.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.450\">console.log 命令详解</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2008/06/firebug_tutorial.html?spm=5176.100239.blogcont82041.451.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.451\">Firebug入门指南</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2011/03/firebug_console_tutorial.html?spm=5176.100239.blogcont82041.452.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.452\">Firebug控制台详解</a></li>\n<li><a href=\"\"></a></li>\n</ul>\n</li>\n<li>移动,微信调试\n<ul>\n<li><a href=\"https://openstf.github.io/?spm=5176.100239.blogcont82041.453.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.453\">浏览器端调试安卓</a></li>\n<li><a href=\"http://yujiangshui.com/multidevice-frontend-debug/?spm=5176.100239.blogcont82041.454.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.454\">移动端前端开发调试</a></li>\n<li><a href=\"https://github.com/yujiangshui/CN-Chrome-DevTools/blob/remote-debugging/md/Use-Tools/remote-debugging.md?spm=5176.100239.blogcont82041.455.jiu0a3&amp;file=remote-debugging.md\" data-spm-anchor-id=\"5176.100239.blogcont82041.455\">使用 Chrome 远程调试 Android 设备</a></li>\n<li><a href=\"http://plus.uc.cn/document/webapp/doc5.html?spm=5176.100239.blogcont82041.456.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.456\">mac移动端调试</a></li>\n<li><a href=\"http://www.mihtool.com/?spm=5176.100239.blogcont82041.457.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.457\">mac移动端调试</a></li>\n<li><a href=\"http://thx.github.io/mobile/debugging-in-mobile/?spm=5176.100239.blogcont82041.458.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.458\">无线调试攻略</a></li>\n<li><a href=\"http://yanhaijing.com/mobile/2014/12/17/web-debug-for-mobile/?spm=5176.100239.blogcont82041.459.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.459\">无线调试攻略</a></li>\n<li><a href=\"http://www.jianshu.com/p/ccf124f1f74b?spm=5176.100239.blogcont82041.460.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.460\">屌爆了,完美调试 微信webview(x5)</a></li>\n<li><a href=\"http://liyaodong.com/2015/07/06/%E5%BE%AE%E4%BF%A1%E8%B0%83%E8%AF%95%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/?spm=5176.100239.blogcont82041.461.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.461\">微信调试的那些事</a></li>\n<li><a href=\"http://jsconsole.com/?spm=5176.100239.blogcont82041.462.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.462\">远程console</a></li>\n<li><a href=\"http://blog.qqbrowser.cc/?spm=5176.100239.blogcont82041.463.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.463\">微信调试工具</a></li>\n<li><a href=\"https://github.com/jieyou/remote_inspect_web_on_real_device?spm=5176.100239.blogcont82041.464.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.464\">各种真机远程调试方法汇总</a></li>\n</ul>\n</li>\n<li>iOS Simulator\n<ul>\n<li><a href=\"https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/iOS_Simulator_Guide/Introduction/Introduction.html?spm=5176.100239.blogcont82041.465.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.465\">Simulator</a></li>\n<li><a href=\"http://www.crifan.com/intro_ios_simulator_in_xcode_and_usage_summary/?spm=5176.100239.blogcont82041.466.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.466\">Xcode中的iOS模拟器(iOS Simulator)的介绍和使用心得</a></li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>img</p></li>\n</ol>\n- [loading img](http://preloaders.net/en/circular)\n- [智图-图片优化平台](http://zhitu.isux.us/)\n- [在线png优化](https://tinypng.com/)\n<ol>\n<li>生成二维码</li>\n</ol>\n- [生成二维码](http://cli.im/)\n<ol>\n<li>\n<p>浏览器同步</p>\n<ul>\n<li><a href=\"https://github.com/leeluolee/puer?spm=5176.100239.blogcont82041.467.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.467\">puer</a></li>\n<li><a href=\"http://livereload.com/?spm=5176.100239.blogcont82041.468.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.468\">liveReload</a></li>\n<li><a href=\"http://getf5.com/?spm=5176.100239.blogcont82041.469.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.469\">f5</a></li>\n<li><a href=\"http://geek100.com/2608/?spm=5176.100239.blogcont82041.470.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.470\">File Watchers</a></li>\n</ul>\n</li>\n<li>\n<p>在线PPT制作</p>\n<ul>\n<li><a href=\"http://js8.in/2013/11/16/%E6%8E%A8%E8%8D%90nodeppt%EF%BC%9A%E4%BD%BF%E7%94%A8markdown%E8%AF%AD%E6%B3%95%E6%9D%A5%E5%86%99%E7%BD%91%E9%A1%B5ppt/?spm=5176.100239.blogcont82041.471.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.471\">nodePPT</a></li>\n<li><a href=\"https://github.com/ksky521/nodePPT?spm=5176.100239.blogcont82041.472.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.472\">PPT</a></li>\n<li><a href=\"https://github.com/hakimel/reveal.js/?spm=5176.100239.blogcont82041.473.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.473\">reveal</a></li>\n<li><a href=\"https://github.com/Seldaek/slippy?spm=5176.100239.blogcont82041.474.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.474\">slippy</a></li>\n</ul>\n</li>\n</ol>\n<h3 id=\"61\">十七. 前端导航网站</h3>\n<ul>\n<li><a href=\"http://uxbees.com/index.html?spm=5176.100239.blogcont82041.475.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.475\">界面清爽的前端导航</a></li>\n<li><a href=\"http://whycss.com/?spm=5176.100239.blogcont82041.476.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.476\">前端导航</a></li>\n<li><a href=\"http://www.daqianduan.com/nav?spm=5176.100239.blogcont82041.477.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.477\">前端网址导航</a></li>\n<li><a href=\"http://sentsin.com/daohang/?spm=5176.100239.blogcont82041.478.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.478\">前端名录</a></li>\n<li><a href=\"http://123.jser.us/?spm=5176.100239.blogcont82041.479.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.479\">前端导航</a></li>\n<li><a href=\"http://www.css88.com/nav/?spm=5176.100239.blogcont82041.480.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.480\">前端开发资源</a></li>\n<li><a href=\"http://www.haourl.cn/?spm=5176.100239.blogcont82041.481.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.481\">网址导航</a></li>\n<li><a href=\"http://code.ciaoca.com/?spm=5176.100239.blogcont82041.482.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.482\">前端开发仓库 - 众多效果的收集地</a> </li>\n<li><a href=\"https://github.com/jnoodle/f2e-collect?spm=5176.100239.blogcont82041.483.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.483\">前端资源导航</a></li>\n<li><a href=\"http://f2e.im/static/pages/nav/index.html?spm=5176.100239.blogcont82041.484.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.484\">F2E 前端导航</a></li>\n</ul>\n<h3 id=\"62\">十八. 常用CDN</h3>\n<ul>\n<li><a href=\"http://lib.sinaapp.com/?spm=5176.100239.blogcont82041.485.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.485\">新浪CDN</a></li>\n<li><a href=\"http://cdn.code.baidu.com/?spm=5176.100239.blogcont82041.486.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.486\">百度静态资源公共库</a></li>\n<li><a href=\"http://libs.useso.com/?spm=5176.100239.blogcont82041.487.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.487\">360网站卫士常用前端公共库CDN服务</a></li>\n<li><a href=\"http://www.bootcdn.cn/?spm=5176.100239.blogcont82041.488.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.488\">Bootstrap中文网开源项目免费 CDN 服务</a></li>\n<li><a href=\"http://staticfile.org/?spm=5176.100239.blogcont82041.489.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.489\">开放静态文件 CDN - 七牛</a></li>\n<li><a href=\"http://www.jq22.com/cdn/?spm=5176.100239.blogcont82041.490.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.490\">CDN加速 - jq22</a></li>\n<li><a href=\"http://code.jquery.com/?spm=5176.100239.blogcont82041.491.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.491\">jQuery CDN</a></li>\n<li><a href=\"http://www.google-jquery-cdn.com/?spm=5176.100239.blogcont82041.492.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.492\">Google jQuery CDN</a></li>\n<li><a href=\"http://www.asp.net/ajax/cdn?spm=5176.100239.blogcont82041.493.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.493\">微软CDN</a></li>\n</ul>\n<h3 id=\"63\">十九. Git,SVN,Github</h3>\n<ol>\n<li>Git</li>\n</ol>\n- [git-scm](http://git-scm.com/)\n- [廖雪峰-Git教程](http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000)\n- [git-for-windows](https://git-for-windows.github.io/)\n- [GitHub 添加 SSH keys](http://daemon369.github.io/git/2015/03/10/add-ssh-keys-for-github/)\n- [gogithub](http://www.worldhello.net/gotgithub/index.html)\n- [git常规命令练习](http://pcottle.github.io/learnGitBranching/)\n- [git的资料整理](https://github.com/xirong/my-git)\n- [我所记录的git命令（非常实用）](http://www.cnblogs.com/fanfan259/p/4810517.html)\n- [企业开发git工作流模式探索部分休整](https://github.com/xirong/my-git/blob/master/git-workflow-tutorial.md)\n- [GitHub 漫游指南](https://github.com/phodal/github-roam)\n- [GitHub秘籍](https://github.com/tiimgreen/github-cheat-sheet/blob/master/README.zh-cn.md)\n- [使用git和github进行协同开发流程](http://livoras.com/post/28)\n- [动画方式练习git](http://onlywei.github.io/explain-git-with-d3/)\n\n</div>\n","source":"_posts/前端知识图谱.md","raw":"---\ntitle: 前端知识图谱\ntags:\n  - '知识图谱'\ncategories:\n  - '前端'\ndate: 2017-05-22 11:40:03\n---\n\n### 综合类\n\n- [前端知识体系](http://www.cnblogs.com/sb19871023/p/3894452.html)\n- [前端知识结构](https://github.com/JacksonTian/fks)\n- [Web前端开发大系概览](https://github.com/unruledboy/WebFrontEndStack)\n- [Web前端开发大系概览-中文版](http://www.cnblogs.com/unruledboy/p/WebFrontEndStack.html)\n- [Web Front-end Stack v2.2](https://raw.githubusercontent.com/unruledboy/WebFrontEndStack/master/Web%20Front%20End%20Stack.png)\n- [免费的编程中文书籍索引](https://github.com/justjavac/free-programming-books-zh_CN)\n- [前端书籍](https://github.com/dypsilon/frontend-dev-bookmarks)\n- [前端免费书籍大全](https://github.com/vhf/free-programming-books)\n- [前端知识体系](http://www.cnblogs.com/sb19871023/p/3894452.html)\n- [免费的编程中文书籍索引](https://github.com/justjavac/free-programming-books-zh_CN)\n- [智能社 - 精通JavaScript开发](http://study.163.com/course/introduction/224014.htm)\n- [重新介绍 JavaScript（JS 教程）](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/A_re-introduction_to_JavaScript)\n- [麻省理工学院公开课：计算机科学及编程导论](http://v.163.com/special/opencourse/bianchengdaolun.html)\n- [JavaScript中的this陷阱的最全收集--没有之一](http://segmentfault.com/a/1190000002640298)\n- [JS函数式编程指南](https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch1.html)\n- [JavaScript Promise迷你书（中文版）](http://liubin.github.io/promises-book/)\n- [腾讯移动Web前端知识库](https://github.com/AlloyTeam/Mars)\n- [Front-End-Develop-Guide 前端开发指南](https://github.com/Front-End-Developers-Hunan/Front-End-Develop-Guide)\n- [前端开发笔记本](https://li-xinyang.gitbooks.io/frontend-notebook/content/)\n- [大前端工具集 - 聂微东](https://github.com/nieweidong/fetool)\n- [前端开发者手册](https://dwqs.gitbooks.io/frontenddevhandbook/content/)\n\n<!--more-->\n\n### 入门类\n- [前端入门教程](http://www.cnblogs.com/jikey/p/3613082.html)\n- [瘳雪峰的Javascript教程](http://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000)\n- [jQuery基础教程](http://www.imooc.com/view/11)\n- [前端工程师必备的PS技能——切图篇](http://www.imooc.com/view/506)\n- [结合个人经历总结的前端入门方法](https://github.com/qiu-deqing/FE-learning)\n\n### 效果类\n\n- [弹出层](http://www.imooc.com/learn/58)\n- [焦点图轮播特效](http://www.imooc.com/learn/18)\n\n\n### 工具类\n\n- [css sprite 雪碧图制作](http://www.imooc.com/learn/93)\n- [版本控制入门 – 搬进 Github](http://www.imooc.com/learn/390)\n- [Grunt-beginner前端自动化工具](http://www.imooc.com/learn/30)\n\n### 慕课专题\n- [张鑫旭 - 慕课系列](http://www.imooc.com/space/teacher/id/197450)\n- [lyn - 慕课系列](http://www.imooc.com/space/teacher/id/104593)\n- [艾伦 - 慕课系列](http://www.imooc.com/space/teacher/id/290139)\n- [碧仔 - Hello，移动WEB](http://www.imooc.com/view/494)\n\n### 周报类\n- [平安科技移动开发二队技术周报](https://github.com/PaicHyperionDev/MobileDevWeekly)\n\n## 六. API:\n### 总目录\n\n#### 开发中心\n\n- [mozilla js参考](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript)\n- [chrome开发中心（chrome的内核已转向blink）](https://developer.chrome.com/extensions/api_index.html)\n- [safari开发中心](https://developer.apple.com/library/safari/navigation)\n- [microsoft js参考](https://msdn.microsoft.com/zh-cn/library/d1et7k7c(v=vs.94).aspx)\n- [js秘密花园](http://sanshi.me/articles/JavaScript-Garden-CN/html/index.html)\n- [js秘密花园](http://bonsaiden.github.io/JavaScript-Garden/zh/)\n- [w3help](http://www.w3help.org/) 综合Bug集合网站\n\n#### 综合搜索\n\n- [javascripting](http://www.javascripting.com/)\n- [各种流行库搜索](http://microjs.com/)\n\n#### 综合API\n- [runoob.com-包含各种API集合](http://www.runoob.com/)\n- [开源中国在线API文档合集](http://tool.oschina.net/apidocs)\n- [devdocs](http://devdocs.io/) 英文综合API网站\n\n#### 2. jQuery\n<ul>\n<li><a href=\"http://www.jquery123.com/?spm=5176.100239.blogcont82041.18.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.18\">jQuery API 中文文档</a></li>\n<li><a href=\"http://hemin.cn/jq/?spm=5176.100239.blogcont82041.19.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.19\">hemin 在线版</a></li>\n<li><a href=\"http://www.css88.com/jqapi-1.9/on/?spm=5176.100239.blogcont82041.20.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.20\">css88 jq api</a></li>\n<li><a href=\"http://www.css88.com/jquery-ui-api/?spm=5176.100239.blogcont82041.21.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.21\">css88 jqui api</a></li>\n<li><a href=\"http://learn.jquery.com/?spm=5176.100239.blogcont82041.22.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.22\">学习jquery</a></li>\n<li><a href=\"http://james.padolsey.com/jquery/?spm=5176.100239.blogcont82041.23.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.23\">jquery 源码查找</a></li>\n</ul>\n<h4 id=\"4\">3. Ecmascript</h4>\n<ul>\n<li><a href=\"https://leanpub.com/understandinges6/read?spm=5176.100239.blogcont82041.24.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.24\">Understanding ECMAScript 6 - Nicholas C. Zakas</a></li>\n<li><a href=\"https://leanpub.com/exploring-es6/read?spm=5176.100239.blogcont82041.25.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.25\">exploring-es6</a></li>\n<li><a href=\"https://github.com/es6-org/exploring-es6?spm=5176.100239.blogcont82041.26.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.26\">exploring-es6翻译</a></li>\n<li><a href=\"http://es6-org.github.io/exploring-es6/?spm=5176.100239.blogcont82041.27.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.27\">exploring-es6翻译后预览</a></li>\n<li><a href=\"http://es6.ruanyifeng.com/?spm=5176.100239.blogcont82041.28.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.28\">阮一峰 es6</a></li>\n<li><a href=\"http://javascript.ruanyifeng.com/?spm=5176.100239.blogcont82041.29.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.29\">阮一峰 Javascript</a></li>\n<li><a href=\"http://yanhaijing.com/es5/?spm=5176.100239.blogcont82041.30.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.30\">ECMA-262，第 5 版</a></li>\n<li><a href=\"http://es5.github.io/?spm=5176.100239.blogcont82041.31.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.31\">es5</a></li>\n</ul>\n<h4 id=\"5\">4. Js template</h4>\n<ul>\n<li><a href=\"http://garann.github.io/template-chooser/?spm=5176.100239.blogcont82041.32.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.32\">template-chooser</a></li>\n<li><a href=\"https://github.com/aui/artTemplate?spm=5176.100239.blogcont82041.33.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.33\">artTemplate</a></li>\n<li><a href=\"https://github.com/aui/tmodjs/blob/master/README.md?spm=5176.100239.blogcont82041.34.jiu0a3&amp;file=README.md\" data-spm-anchor-id=\"5176.100239.blogcont82041.34\">tomdjs</a></li>\n<li><a href=\"http://juicer.name/docs/docs_zh_cn.html?spm=5176.100239.blogcont82041.35.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.35\">淘宝模板juicer模板</a></li>\n<li><a href=\"http://koen301.github.io/fxtpl/?spm=5176.100239.blogcont82041.36.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.36\">Fxtpl v1.0 繁星前端模板引擎</a></li>\n<li><a href=\"http://laytpl.layui.com/?spm=5176.100239.blogcont82041.37.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.37\">laytpl</a></li>\n<li><a href=\"https://github.com/mozilla/nunjucks?spm=5176.100239.blogcont82041.38.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.38\">mozilla - nunjucks</a></li>\n<li><a href=\"https://github.com/PaulGuo/Juicer?spm=5176.100239.blogcont82041.39.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.39\">Juicer</a></li>\n<li><a href=\"http://akdubya.github.io/dustjs/?spm=5176.100239.blogcont82041.40.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.40\">dustjs</a></li>\n<li><a href=\"http://ecomfe.github.io/etpl/?spm=5176.100239.blogcont82041.41.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.41\">etpl</a></li>\n</ul>\n<h4 id=\"6\">5. 弹出层</h4>\n<ul>\n<li><a href=\"https://github.com/aui/artDialog?spm=5176.100239.blogcont82041.42.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.42\">artDialog 最新版</a></li>\n<li><a href=\"http://aui.github.io/artDialog/doc/index.html?spm=5176.100239.blogcont82041.43.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.43\">artDialog 文档</a></li>\n<li><a href=\"https://code.google.com/p/artdialog/downloads/list?spm=5176.100239.blogcont82041.44.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.44\">google code 下载地址</a></li>\n<li><a href=\"http://layer.layui.com/?spm=5176.100239.blogcont82041.45.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.45\">贤心弹出层</a></li>\n<li><a href=\"https://github.com/bh-lay/UI?spm=5176.100239.blogcont82041.46.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.46\">响应式用户交互组件库</a></li>\n<li><a href=\"http://t4t5.github.io/sweetalert/?spm=5176.100239.blogcont82041.47.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.47\">sweetalert-有css3动画弹出层</a></li>\n</ul>\n<h4 id=\"7\">6. CSS</h4>\n<ul>\n<li><a href=\"http://tympanus.net/codrops/css_reference/?spm=5176.100239.blogcont82041.48.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.48\">CSS 语法参考</a></li>\n<li><a href=\"http://isux.tencent.com/css3/index.html?spm=5176.100239.blogcont82041.49.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.49\">CSS3动画手册</a></li>\n<li><a href=\"http://isux.tencent.com/css3/tools.html?spm=5176.100239.blogcont82041.50.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.50\">腾讯css3动画制作工具</a></li>\n<li><a href=\"http://linxz.github.io/tianyizone/?spm=5176.100239.blogcont82041.51.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.51\">志爷css小工具集合</a></li>\n<li><a href=\"http://www.note12.com/category/blog/2014-6-5/538fe0a9f786f1b7019a4dfb?spm=5176.100239.blogcont82041.52.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.52\">css3 js 移动大杂烩</a></li>\n<li><a href=\"http://bouncejs.com/?spm=5176.100239.blogcont82041.53.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.53\">bouncejs 触摸库</a></li>\n<li><a href=\"http://fian.my.id/Waves/?spm=5176.100239.blogcont82041.54.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.54\">css3 按钮动画</a></li>\n<li><a href=\"http://daneden.github.io/animate.css/?spm=5176.100239.blogcont82041.55.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.55\">animate.css</a></li>\n<li><a href=\"http://www.alloyteam.com/2015/10/8536/?spm=5176.100239.blogcont82041.56.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.56\">全局CSS的终结(狗带) [译]</a></li>\n</ul>\n<h4 id=\"8\">7. Angularjs</h4>\n<ul>\n<li><a href=\"https://github.com/dolymood/AngularLearning?spm=5176.100239.blogcont82041.57.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.57\">Angular.js 的一些学习资源</a></li>\n<li><a href=\"http://angularjs.cn/?spm=5176.100239.blogcont82041.58.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.58\">angularjs中文社区</a></li>\n<li><a href=\"http://www.cnblogs.com/xuwenmin888/p/3739096.html?spm=5176.100239.blogcont82041.59.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.59\">Angularjs源码学习</a></li>\n<li><a href=\"http://www.ifeenan.com/?spm=5176.100239.blogcont82041.60.jiu0a3&amp;c=AngularJS\" data-spm-anchor-id=\"5176.100239.blogcont82041.60\">Angularjs源码学习</a></li>\n<li><a href=\"http://angular-ui.github.io/bootstrap/?spm=5176.100239.blogcont82041.61.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.61\">angular对bootstrap的封装</a></li>\n<li><a href=\"https://cnodejs.org/topic/51404e0f069911196d2e3923?spm=5176.100239.blogcont82041.62.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.62\">angularjs + nodejs</a></li>\n<li><a href=\"http://www.cnblogs.com/lvdabao/tag/AngularJs/?spm=5176.100239.blogcont82041.63.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.63\">吕大豹 Angularjs</a></li>\n<li><a href=\"http://www.infoq.com/cn/news/2013/02/angular-web-app?spm=5176.100239.blogcont82041.64.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.64\">AngularJS 最佳实践</a></li>\n<li><a href=\"http://www.lovelucy.info/angularjs-best-practices.html?spm=5176.100239.blogcont82041.65.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.65\">Angular的一些扩展指令</a></li>\n<li><a href=\"https://github.com/Pasvaz/bindonce?spm=5176.100239.blogcont82041.66.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.66\">Angular数据绑定原理</a></li>\n<li><a href=\"https://github.com/angular-ui/?spm=5176.100239.blogcont82041.67.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.67\">一些扩展Angular UI组件</a></li>\n<li><a href=\"http://voidcanvas.com/emberjs-vs-angularjs-performance-testing/?spm=5176.100239.blogcont82041.68.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.68\">Ember和AngularJS的性能测试</a></li>\n<li><a href=\"http://www.cnblogs.com/powertoolsteam/p/angularjs-introdection.html?spm=5176.100239.blogcont82041.69.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.69\">带你走近AngularJS - 基本功能介绍</a></li>\n<li><a href=\"http://angular.duapp.com/docs/guide?spm=5176.100239.blogcont82041.70.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.70\">Angularjs开发指南</a></li>\n<li><a href=\"http://www.cnblogs.com/amosli/p/3710648.html?spm=5176.100239.blogcont82041.71.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.71\">Angularjs学习</a></li>\n<li><a href=\"http://www.rainweb.cn/article/angularjs-jquery.html?spm=5176.100239.blogcont82041.72.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.72\">不要带着jQuery的思维去学习AngularJS</a></li>\n<li><a href=\"http://wangjiatao.diandian.com/?spm=5176.100239.blogcont82041.73.jiu0a3&amp;tag=angularjs\" data-spm-anchor-id=\"5176.100239.blogcont82041.73\">angularjs 学习笔记</a></li>\n<li><a href=\"http://www.angularjs.cn/T008?spm=5176.100239.blogcont82041.74.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.74\">angularjs 开发指南</a></li>\n<li><a href=\"https://github.com/jmcunningham/AngularJS-Learning?spm=5176.100239.blogcont82041.75.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.75\">angularjs 英文资料</a></li>\n<li><a href=\"http://angular-ui.github.io/bootstrap/?spm=5176.100239.blogcont82041.76.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.76\">angular bootstrap</a></li>\n<li><a href=\"https://github.com/opitzconsulting/jquery-mobile-angular-adapter?spm=5176.100239.blogcont82041.77.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.77\">angular jq mobile</a></li>\n<li><a href=\"http://mgcrea.github.io/angular-strap/?spm=5176.100239.blogcont82041.78.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.78\">angular ui</a></li>\n<li><a href=\"http://www.tuicool.com/articles/7ZZVr2?spm=5176.100239.blogcont82041.79.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.79\">整合jQuery Mobile+AngularJS经验谈</a></li>\n<li><a href=\"http://blog.jobbole.com/46589/?spm=5176.100239.blogcont82041.80.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.80\">有jQuery背景，该如何用AngularJS编程思想</a></li>\n<li><a href=\"http://each.sinaapp.com/angular/?spm=5176.100239.blogcont82041.81.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.81\">AngularJS在线教程</a></li>\n<li><a href=\"http://www.zouyesheng.com/angular.html?spm=5176.100239.blogcont82041.82.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.82\">angular学习笔记</a></li>\n</ul>\n<h4 id=\"9\">8. React</h4>\n<ul>\n<li><a href=\"http://www.react-china.org/?spm=5176.100239.blogcont82041.83.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.83\">react.js 中文论坛</a></li>\n<li><a href=\"https://facebook.github.io/react/index.html?spm=5176.100239.blogcont82041.84.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.84\">react.js 官方网址</a></li>\n<li><a href=\"https://facebook.github.io/react/docs/getting-started.html?spm=5176.100239.blogcont82041.85.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.85\">react.js 官方文档</a></li>\n<li><a href=\"http://material-ui.com/?spm=5176.100239.blogcont82041.86.jiu0a3#/\" data-spm-anchor-id=\"5176.100239.blogcont82041.86\">react.js material UI</a></li>\n<li><a href=\"http://touchstonejs.io/?spm=5176.100239.blogcont82041.87.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.87\">react.js TouchstoneJS UI</a></li>\n<li><a href=\"http://amazeui.org/react/?spm=5176.100239.blogcont82041.88.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.88\">react.js amazeui UI</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2015/03/react.html?spm=5176.100239.blogcont82041.89.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.89\">React 入门实例教程 - 阮一峰</a></li>\n<li><a href=\"http://wiki.jikexueyuan.com/project/react-native/?spm=5176.100239.blogcont82041.90.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.90\">React Native 中文版</a></li>\n<li><a href=\"http://www.html-js.com/article/Fakefish%203053?spm=5176.100239.blogcont82041.91.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.91\">Webpack 和 React 小书 - 前端乱炖</a></li>\n<li><a href=\"https://fakefish.github.io/react-webpack-cookbook/?spm=5176.100239.blogcont82041.92.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.92\">Webpack 和 React 小书 - gitbook</a></li>\n<li><a href=\"https://github.com/webpack/webpack?spm=5176.100239.blogcont82041.93.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.93\">webpack</a></li>\n<li><a href=\"http://html-js.com/article/3009?spm=5176.100239.blogcont82041.94.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.94\">Webpack，101入门体验</a></li>\n<li><a href=\"http://html-js.com/article/3113?spm=5176.100239.blogcont82041.95.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.95\">webpack入门教程</a></li>\n<li><a href=\"http://segmentfault.com/a/1190000003499526?spm=5176.100239.blogcont82041.96.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.96\">基于webpack搭建前端工程解决方案探索</a></li>\n<li><a href=\"http://www.piliyu.com/?spm=5176.100239.blogcont82041.97.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.97\">React原创实战视频教程</a></li>\n</ul>\n<h4 id=\"10\">9. 移动端API</h4>\n<ol>\n<li>API<br><ul>\n<li><a href=\"https://github.com/jtyjty99999/mobileTech?spm=5176.100239.blogcont82041.98.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.98\">99移动端知识集合</a></li>\n<li><a href=\"https://github.com/AlloyTeam/Mars?spm=5176.100239.blogcont82041.99.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.99\">移动端前端开发知识库</a></li>\n<li><a href=\"http://caibaojian.com/mobile-web-bug.html?spm=5176.100239.blogcont82041.100.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.100\">移动前端的一些坑和解决方法（外观表现）</a></li>\n<li><a href=\"http://www.cnblogs.com/PeunZhang/p/3407453.html?spm=5176.100239.blogcont82041.101.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.101\">【原】移动web资源整理</a></li>\n<li><a href=\"http://mweb.baidu.com/zeptoapi/?spm=5176.100239.blogcont82041.102.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.102\">zepto 1.0 中文手册</a></li>\n<li><a href=\"http://www.html-5.cn/Manual/Zepto/?spm=5176.100239.blogcont82041.103.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.103\">zepto 1.0 中文手册</a></li>\n<li><a href=\"http://www.css88.com/doc/zeptojs_api/?spm=5176.100239.blogcont82041.104.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.104\">zepto 1.1.2</a></li>\n<li><a href=\"http://www.cnblogs.com/sky000/archive/2013/03/29/2988952.html?spm=5176.100239.blogcont82041.105.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.105\">zepto 中文注释</a></li>\n<li><a href=\"http://app-framework-software.intel.com/api.php?spm=5176.100239.blogcont82041.106.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.106\">jqmobile 手册</a></li>\n<li><a href=\"https://github.com/maxzhang/maxzhang.github.com/issues?spm=5176.100239.blogcont82041.107.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.107\">移动浏览器开发集合</a></li>\n<li><a href=\"https://github.com/hoosin/mobile-web-favorites?spm=5176.100239.blogcont82041.108.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.108\">移动开发大杂烩</a></li>\n<li><a href=\"http://lin-chao.github.io/2014/11/14/%E5%BE%AE%E4%BF%A1webview%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/?spm=5176.100239.blogcont82041.109.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.109\">微信webview中的一些问题</a></li>\n</ul>\n</li>\n#### 框架\n<li><a href=\"http://framework7.taobao.org/?spm=5176.100239.blogcont82041.110.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.110\">特色的HTML框架可以创建精美的iOS应用</a></li>\n<li><a href=\"http://m.sui.taobao.org/?spm=5176.100239.blogcont82041.111.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.111\">淘宝SUI</a></li>\n</ul>\n</li>\n</ol>\n<h4 id=\"11\">10. avalon</h4>\n<ul>\n<li><a href=\"http://avalonjs.github.io/?spm=5176.100239.blogcont82041.112.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.112\">avalonjs</a></li>\n<li><a href=\"http://ued.qunar.com/oniui/index.html?spm=5176.100239.blogcont82041.113.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.113\">Avalon新一代UI库： OniUI</a></li>\n<li><a href=\"https://github.com/RubyLouvre/avalon.oniui?spm=5176.100239.blogcont82041.114.jiu0a3&amp;file=avalon.oniui\" data-spm-anchor-id=\"5176.100239.blogcont82041.114\">avalon.oniui-基于avalon的组件库</a></li>\n</ul>\n<h4 id=\"12\">11. Requriejs</h4>\n<ul>\n<li><a href=\"http://www.ruanyifeng.com/blog/2012/10/javascript_module.html?spm=5176.100239.blogcont82041.115.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.115\">Javascript模块化编程（一）：模块的写法 </a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2012/10/asynchronous_module_definition.html?spm=5176.100239.blogcont82041.116.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.116\">Javascript模块化编程（二）：AMD规范</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2012/11/require_js.html?spm=5176.100239.blogcont82041.117.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.117\">Javascript模块化编程（三）：require.js的用法</a></li>\n<li><a href=\"http://www.cnblogs.com/snandy/archive/2012/05/22/2513652.html?spm=5176.100239.blogcont82041.118.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.118\">RequireJS入门（一）</a></li>\n<li><a href=\"http://www.cnblogs.com/snandy/archive/2012/05/23/2513712.html?spm=5176.100239.blogcont82041.119.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.119\">RequireJS入门（二）</a></li>\n<li><a href=\"http://www.cnblogs.com/snandy/archive/2012/06/08/2538001.html?spm=5176.100239.blogcont82041.120.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.120\">RequireJS进阶（三）</a></li>\n<li><a href=\"http://www.cnblogs.com/yexiaochai/p/3632580.html?spm=5176.100239.blogcont82041.121.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.121\">requrie源码学习</a></li>\n<li><a href=\"http://www.oschina.net/translate/getting-started-with-the-requirejs-library?spm=5176.100239.blogcont82041.122.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.122\">requrie 入门指南</a></li>\n<li><a href=\"http://www.cnblogs.com/yexiaochai/p/3214926.html?spm=5176.100239.blogcont82041.123.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.123\">requrieJS 学习笔记</a></li>\n<li><a href=\"http://cyj.me/why-seajs/requirejs/?spm=5176.100239.blogcont82041.124.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.124\">requriejs 其一 </a></li>\n<li><a href=\"http://www.cnblogs.com/yexiaochai/p/3221081.html?spm=5176.100239.blogcont82041.125.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.125\">require backbone结合</a></li>\n</ul>\n<h4 id=\"13\">12. Seajs</h4>\n<ul>\n<li><a href=\"http://seajs.org/?spm=5176.100239.blogcont82041.126.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.126\">seajs</a></li>\n<li><a href=\"http://cyj.me/why-seajs/zh/?spm=5176.100239.blogcont82041.127.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.127\">seajs 中文手册</a></li>\n</ul>\n<h4 id=\"14\">13. Less,sass</h4>\n<ul>\n<li><a href=\"http://www.w3cplus.com/sassguide/?spm=5176.100239.blogcont82041.128.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.128\">sass</a></li>\n<li><a href=\"http://www.sass.hk/?spm=5176.100239.blogcont82041.129.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.129\">sass教程-sass中国</a></li>\n<li><a href=\"http://sass.bootcss.com/?spm=5176.100239.blogcont82041.130.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.130\">Sass 中文文档</a></li>\n<li><a href=\"http://less.bootcss.com/?spm=5176.100239.blogcont82041.131.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.131\">less</a></li>\n</ul>\n<h4 id=\"15\">14. Markdown</h4>\n<ul>\n<li><a href=\"http://wowubuntu.com/markdown/?spm=5176.100239.blogcont82041.132.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.132\">Markdown 语法说明 (简体中文版)</a></li>\n<li><a href=\"https://github.com/LearnShare/Learning-Markdown/blob/master/README.md?spm=5176.100239.blogcont82041.133.jiu0a3&amp;file=README.md\" data-spm-anchor-id=\"5176.100239.blogcont82041.133\">markdown入门参考</a></li>\n<li><a href=\"https://www.gitbook.com/?spm=5176.100239.blogcont82041.134.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.134\">gitbook国外的在线markdown可编辑成书</a></li>\n<li><a href=\"https://www.zybuluo.com/mdeditor?spm=5176.100239.blogcont82041.135.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.135\">mdeditor  一款国内的在线markdown编辑器</a></li>\n<li><a href=\"https://stackedit.io?spm=5176.100239.blogcont82041.136.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.136\">stackedit国外的在线markdown编辑器，功能强大，同步云盘</a> </li>\n<li><a href=\"http://bh-lay.github.io/mditor/?spm=5176.100239.blogcont82041.137.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.137\">mditor</a> 一款轻量级的markdown编辑器</li>\n<li><a href=\"https://github.com/lepture/editor?spm=5176.100239.blogcont82041.138.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.138\">lepture-editor</a></li>\n<li><a href=\"https://github.com/jbt/markdown-editor?spm=5176.100239.blogcont82041.139.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.139\">markdown-editor</a></li>\n</ul>\n<h4 id=\"16\">15. D3</h4>\n<ul>\n<li><a href=\"https://github.com/mbostock/d3/wiki/Tutorials?spm=5176.100239.blogcont82041.140.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.140\">d3 Tutorials</a></li>\n<li><a href=\"https://github.com/mbostock/d3/wiki/Gallery?spm=5176.100239.blogcont82041.141.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.141\">Gallery</a></li>\n<li><a href=\"http://datavisual.lofter.com/post/40cf3a_188e535?spm=5176.100239.blogcont82041.142.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.142\">lofter</a></li>\n<li><a href=\"http://alanland.iteye.com/blog/1878595?spm=5176.100239.blogcont82041.143.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.143\">iteye</a></li>\n<li><a href=\"http://javascript.ruanyifeng.com/library/d3.html?spm=5176.100239.blogcont82041.144.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.144\">ruanyifeng</a></li>\n</ul>\n<h4 id=\"17\">16. 兼容性</h4>\n<ul>\n<li><a href=\"http://kangax.github.io/compat-table/es6/?spm=5176.100239.blogcont82041.145.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.145\">esma 兼容列表</a></li>\n<li><a href=\"http://jigsaw.w3.org/css-validator/validator.html.zh-cn?spm=5176.100239.blogcont82041.146.jiu0a3&amp;file=validator.html.zh-cn\" data-spm-anchor-id=\"5176.100239.blogcont82041.146\">W3C CSS验证服务</a></li>\n<li><a href=\"http://caniuse.com/?spm=5176.100239.blogcont82041.147.jiu0a3#index\" data-spm-anchor-id=\"5176.100239.blogcont82041.147\">caniuse</a></li>\n<li><a href=\"http://csscreator.com/properties?spm=5176.100239.blogcont82041.148.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.148\">csscreator</a></li>\n<li>\n<a href=\"https://msdn.microsoft.com/zh-cn/library/cc351024(v=vs.85?spm=5176.100239.blogcont82041.149.jiu0a3&amp;file=cc351024(v=vs.85\" data-spm-anchor-id=\"5176.100239.blogcont82041.149\">microsoft</a>.aspx)</li>\n<li><a href=\"http://www.responsinator.com/?spm=5176.100239.blogcont82041.150.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.150\">在线测兼容-移动端</a></li>\n<li><a href=\"https://www.manymo.com/emulators?spm=5176.100239.blogcont82041.151.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.151\">emulators</a></li>\n</ul>\n<h4 id=\"18\">17. UI相关</h4>\n<ul>\n<li><a href=\"http://v3.bootcss.com/?spm=5176.100239.blogcont82041.152.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.152\">bootcss</a></li>\n<li><a href=\"http://www.w3cplus.com/MetroUICSS/?spm=5176.100239.blogcont82041.153.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.153\">MetroUICSS</a></li>\n<li><a href=\"http://semantic-ui.com/?spm=5176.100239.blogcont82041.154.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.154\">semantic</a></li>\n<li><a href=\"http://alexwolfe.github.io/Buttons/?spm=5176.100239.blogcont82041.155.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.155\">Buttons</a></li>\n<li><a href=\"http://hiloki.github.io/kitecss/?spm=5176.100239.blogcont82041.156.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.156\">kitecss</a></li>\n<li><a href=\"http://www.pintuer.com/?spm=5176.100239.blogcont82041.157.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.157\">pintuer</a></li>\n<li><a href=\"http://amazeui.org/?spm=5176.100239.blogcont82041.158.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.158\">amazeui</a></li>\n<li><a href=\"http://www.worldhello.net/gotgithub/index.html?spm=5176.100239.blogcont82041.159.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.159\">worldhello</a></li>\n<li><a href=\"http://igit.linuxtoy.org/contents.html?spm=5176.100239.blogcont82041.160.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.160\">linuxtoy</a></li>\n<li><a href=\"http://www-cs-students.stanford.edu/~blynn/gitmagic/intl/zh_cn/?spm=5176.100239.blogcont82041.161.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.161\">gitmagic</a></li>\n<li><a href=\"http://rogerdudler.github.io/git-guide/index.zh.html?spm=5176.100239.blogcont82041.162.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.162\">rogerdudler</a></li>\n<li><a href=\"http://gitref.justjavac.com/?spm=5176.100239.blogcont82041.163.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.163\">gitref</a></li>\n<li><a href=\"http://git-scm.com/book/zh?spm=5176.100239.blogcont82041.164.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.164\">book</a></li>\n<li><a href=\"http://gogojimmy.net/2012/01/17/how-to-use-git-1-git-basic/?spm=5176.100239.blogcont82041.165.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.165\">gogojimmy</a></li>\n</ul>\n<h4 id=\"19\">18. HTTP</h4>\n<ul>\n<li><a href=\"http://segmentfault.com/bookmark/1230000002521721?spm=5176.100239.blogcont82041.166.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.166\">HTTP API 设计指南</a></li>\n</ul>\n<h4 id=\"20\">19. 其它API</h4>\n<ul>\n<li><a href=\"javascriptoo?spm=5176.100239.blogcont82041.167.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.167\">javascript流行库汇总</a></li>\n<li><a href=\"http://niceue.com/validator/demo/index.php?spm=5176.100239.blogcont82041.168.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.168\">验证api</a></li>\n<li><a href=\"http://www.css88.com/doc/underscore/?spm=5176.100239.blogcont82041.169.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.169\">underscore 中文手册</a></li>\n<li><a href=\"http://www.html-js.com/article/Underscorejs-source-code-analysis-of-underscorejs-source-code-analysis%203031?spm=5176.100239.blogcont82041.170.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.170\">underscore源码分析</a></li>\n<li><a href=\"http://yalishizhude.github.io/tags/underscore/?spm=5176.100239.blogcont82041.171.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.171\">underscore源码分析-亚里士朱德的博客</a></li>\n<li><a href=\"http://underscorejs.org/?spm=5176.100239.blogcont82041.172.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.172\">underscrejs en api</a></li>\n<li><a href=\"https://lodash.com/?spm=5176.100239.blogcont82041.173.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.173\">lodash - underscore的代替品</a></li>\n<li><a href=\"http://extjs-doc-cn.github.io/ext4api/?spm=5176.100239.blogcont82041.174.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.174\">ext4api</a></li>\n<li><a href=\"http://www.csser.com/tools/backbone/backbone.js.html?spm=5176.100239.blogcont82041.175.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.175\">backbone 中文手册</a></li>\n<li><a href=\"http://dev.qwrap.com/resource/js/_docs/_youa/?spm=5176.100239.blogcont82041.176.jiu0a3#/qw/base/loadJs_.htm\" data-spm-anchor-id=\"5176.100239.blogcont82041.176\">qwrap手册</a></li>\n<li><a href=\"http://easings.net/zh-cn?spm=5176.100239.blogcont82041.177.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.177\">缓动函数</a></li>\n<li><a href=\"http://www.w3school.com.cn/svg/svg_reference.asp?spm=5176.100239.blogcont82041.178.jiu0a3&amp;file=svg_reference.asp\" data-spm-anchor-id=\"5176.100239.blogcont82041.178\">svg 中文参考</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/SVG?spm=5176.100239.blogcont82041.179.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.179\">svg mdn参考</a></li>\n<li><a href=\"https://github.com/gabelerner/canvg?spm=5176.100239.blogcont82041.180.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.180\">svg 导出 canvas</a></li>\n<li><a href=\"https://github.com/exupero/saveSvgAsPng?spm=5176.100239.blogcont82041.181.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.181\">svg 导出 png</a></li>\n<li><a href=\"http://www.zamzar.com/convert/ai-to-svg/?spm=5176.100239.blogcont82041.182.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.182\">ai-to-svg</a></li>\n<li><a href=\"https://github.com/machao/localStorage?spm=5176.100239.blogcont82041.183.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.183\">localStorage 库</a></li>\n</ul>\n<h4 id=\"21\">20. 图表类</h4>\n<ul>\n<li><a href=\"http://www.hcharts.cn/api/index.php?spm=5176.100239.blogcont82041.184.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.184\">Highcharts 中文API</a></li>\n<li><a href=\"http://api.highcharts.com/highcharts?spm=5176.100239.blogcont82041.185.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.185\">Highcharts 英文API</a></li>\n<li><a href=\"http://echarts.baidu.com/?spm=5176.100239.blogcont82041.186.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.186\">ECharts 百度的图表软件</a></li>\n<li><a href=\"http://lbs.amap.com/api/?spm=5176.100239.blogcont82041.187.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.187\">高德地图</a></li>\n<li><a href=\"http://paperjs.org/?spm=5176.100239.blogcont82041.188.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.188\">开源的矢量图脚本框架</a></li>\n<li><a href=\"http://jvectormap.com/?spm=5176.100239.blogcont82041.189.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.189\">svg 地图</a></li>\n</ul>\n<h4 id=\"22\">21. vue</h4>\n<ul>\n<li><a href=\"http://cn.vuejs.org/?spm=5176.100239.blogcont82041.190.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.190\">Vue</a></li>\n<li><a href=\"http://forum.vuejs.org/?spm=5176.100239.blogcont82041.191.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.191\">Vue 论坛</a></li>\n<li><a href=\"http://www.cnblogs.com/aaronjs/p/3660102.html?spm=5176.100239.blogcont82041.192.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.192\">Vue 入门指南</a></li>\n<li><a href=\"http://segmentfault.com/a/1190000000411057?spm=5176.100239.blogcont82041.193.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.193\">Vue 的一些资源索引</a></li>\n\n</ul>\n<h4 id=\"23\">21. 正则</h4>\n<ul>\n<li><a href=\"http://segmentfault.com/a/1190000002471140?spm=5176.100239.blogcont82041.194.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.194\">JS正则表达式元字符</a></li>\n<li><a href=\"http://deerchao.net/tutorials/regex/regex.htm?spm=5176.100239.blogcont82041.195.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.195\">正则表达式30分钟入门教程</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions?spm=5176.100239.blogcont82041.196.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.196\">MDN-正则表达式</a></li>\n<li><a href=\"http://javascript.ruanyifeng.com/stdlib/regexp.html?spm=5176.100239.blogcont82041.197.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.197\">ruanyifeng - RegExp对象</a></li>\n<li><a href=\"http://div.io/topic/764?spm=5176.100239.blogcont82041.198.jiu0a3&amp;page=1\" data-spm-anchor-id=\"5176.100239.blogcont82041.198\">小胡子哥 - 进阶正则表达式</a></li>\n<li><a href=\"https://github.com/Cedriking/is.js/blob/master/is.js?spm=5176.100239.blogcont82041.199.jiu0a3&amp;file=is.js\" data-spm-anchor-id=\"5176.100239.blogcont82041.199\">is.js</a></li>\n<li><a href=\"http://regexper.com/?spm=5176.100239.blogcont82041.200.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.200\">正则在线测试</a></li>\n\n</ul>\n<h4 id=\"24\">22. ionic</h4>\n<ul>\n<li><a href=\"https://github.com/ychow/ionic-guide?spm=5176.100239.blogcont82041.201.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.201\">ionic</a></li>\n</ul>\n<h4 id=\"25\">23. 其它</h4>\n<ul>\n<li><a href=\"http://mockjs.com/?spm=5176.100239.blogcont82041.202.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.202\">Mock.js 是一款模拟数据生成器</a></li>\n</ul>\n### 七. 开发规范\n<ol>\n<li>\n<p>前端</p>\n<ul>\n<li><a href=\"http://alloyteam.github.io/CodeGuide?spm=5176.100239.blogcont82041.203.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.203\">通过分析github代码库总结出来的工程师代码书写习惯</a></li>\n<li><a href=\"http://codeguide.bootcss.com/?spm=5176.100239.blogcont82041.204.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.204\">HTML&amp;CSS编码规范 by @mdo</a></li>\n<li><a href=\"http://www.alloyteam.com/2011/10/107/?spm=5176.100239.blogcont82041.205.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.205\">团队合作的css命名规范-腾讯AlloyTeam前端团队</a></li>\n<li><a href=\"http://yuwenhui.github.io/?spm=5176.100239.blogcont82041.206.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.206\">前端编码规范之js - by yuwenhui</a></li>\n<li><a href=\"http://www.cnblogs.com/hustskyking/p/javascript-spec.html?spm=5176.100239.blogcont82041.207.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.207\">前端编码规范之js - by 李靖</a></li>\n<li><a href=\"http://zhibimo.com/read/Ashu/front-end-style-guide/?spm=5176.100239.blogcont82041.208.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.208\">前端开发规范手册</a></li>\n<li><a href=\"https://github.com/yuche/javascript?spm=5176.100239.blogcont82041.209.jiu0a3#table-of-contents\" data-spm-anchor-id=\"5176.100239.blogcont82041.209\">Airbnb JavaScript 编码规范（简体中文版）</a></li>\n<li><a href=\"http://www.zhihu.com/question/20351507?spm=5176.100239.blogcont82041.210.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.210\">AMD与CMD规范的区别</a></li>\n<li><a href=\"http://www.cnblogs.com/tugenhua0707/p/3507957.html?spm=5176.100239.blogcont82041.211.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.211\">AMD与CMD规范的区别</a></li>\n<li><a href=\"http://docs.kissyui.com/1.4/docs/html/tutorials/style-guide/kissy-source-style.html?spm=5176.100239.blogcont82041.212.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.212\">KISSY 源码规范</a></li>\n<li><a href=\"http://codeguide.bootcss.com/?spm=5176.100239.blogcont82041.213.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.213\">bt编码规范</a></li>\n<li><a href=\"https://github.com/Suxiaogang/Code_Guide?spm=5176.100239.blogcont82041.214.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.214\">规范加强版</a></li>\n<li><a href=\"http://blog.jobbole.com/79075/?spm=5176.100239.blogcont82041.215.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.215\">前端代码规范 及 最佳实践</a></li>\n<li><a href=\"http://coderlmn.github.io/code-standards/?spm=5176.100239.blogcont82041.216.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.216\">百度前端规范</a></li>\n<li><a href=\"http://isobar-idev.github.io/code-standards/?spm=5176.100239.blogcont82041.217.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.217\">百度前端规范</a></li>\n<li><a href=\"http://zhuanlan.zhihu.com/fuyun/19884834?spm=5176.100239.blogcont82041.218.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.218\">百度前端规范</a></li>\n<li><a href=\"https://github.com/gf-rd/es6-coding-style?spm=5176.100239.blogcont82041.219.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.219\">ECMAScript6 编码规范--广发证券前端团队</a></li>\n<li><a href=\"http://blog.jobbole.com/79484/?spm=5176.100239.blogcont82041.220.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.220\">JavaScript 风格指南/编码规范（Airbnb公司版）</a></li>\n<li><a href=\"http://nec.netease.com/standard?spm=5176.100239.blogcont82041.221.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.221\">网易前端开发规范</a></li>\n<li><a href=\"http://www.75team.com/archives/1049?spm=5176.100239.blogcont82041.222.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.222\">css模块</a></li>\n<li><a href=\"https://github.com/ecomfe/spec?spm=5176.100239.blogcont82041.223.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.223\">前端规范资源列表</a></li>\n</ul>\n</li>\n#### PHP\n- [最流行的PHP 代码规范](http://segmentfault.com/a/1190000000443795)\n- [最流行的PHP 代码规范](https://github.com/hfcorriez/fig-standards/blob/zh_CN/%E6%8E%A5%E5%8F%97/PSR-2-coding-style-guide.md)\n\n#### Android\n- [【敏捷开发】Android团队开发规范](http://www.cnblogs.com/lcw/p/3619181.html)\n- [Android 开发规范与应用](http://www.jianshu.com/p/4390f4fe19b3)\n## 八. 其它收集\n### 1. 各大公司开源项目\n<ul>\n<li><a href=\"https://code.facebook.com/projects/web/?spm=5176.100239.blogcont82041.224.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.224\">Facebook Projects</a></li>\n<li><a href=\"http://fex.baidu.com/?spm=5176.100239.blogcont82041.225.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.225\">百度web前端研发部</a></li>\n<li><a href=\"http://efe.baidu.com/?spm=5176.100239.blogcont82041.226.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.226\">百度EFE</a></li>\n<li><a href=\"https://github.com/fex-team/?spm=5176.100239.blogcont82041.227.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.227\">百度github</a></li>\n<li><a href=\"http://www.alloyteam.com/?spm=5176.100239.blogcont82041.228.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.228\">alloyteam</a></li>\n<li><a href=\"http://alloyteam.github.io/?spm=5176.100239.blogcont82041.229.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.229\">alloyteam-github</a></li>\n<li><a href=\"https://github.com/AlloyTeam/AlloyGameEngine?spm=5176.100239.blogcont82041.230.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.230\">alloyteam-AlloyGameEngine</a></li>\n<li><a href=\"http://alloyteam.github.io/AlloyDesigner/?spm=5176.100239.blogcont82041.231.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.231\">AlloyDesigner</a> 即时修改，即时保存，设计稿较正，其它开发辅助工具</li>\n<li><a href=\"http://www.alloyteam.com/2015/06/h5-jiao-hu-ye-bian-ji-qi-aeditor-jie-shao/?spm=5176.100239.blogcont82041.232.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.232\">H5交互页编辑器AEditor介绍</a> H5动画交互页开发的工具介绍</li>\n<li><a href=\"http://aeditor.alloyteam.com/?spm=5176.100239.blogcont82041.233.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.233\">AEditor</a> H5动画交互页开发的工具</li>\n<li><a href=\"http://forum.maka.im/wordpress/?spm=5176.100239.blogcont82041.234.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.234\">maka</a></li>\n<li><a href=\"https://github.com/fenbility/weekly-feed?spm=5176.100239.blogcont82041.235.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.235\">值得订阅的weekly</a></li>\n<li><a href=\"http://cube.qq.com/?spm=5176.100239.blogcont82041.236.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.236\">腾讯html5</a></li>\n<li><a href=\"http://75team.github.io/?spm=5176.100239.blogcont82041.237.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.237\">奇舞团开源项目</a></li>\n<li><a href=\"http://ued.qunar.com/?spm=5176.100239.blogcont82041.238.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.238\">Qunar UED</a></li>\n</ul>\n### 2. Javascript\n#### 常用\n- [ieBetter.js-让IE6-IE8拥有IE9+,Chrome等浏览器特性](http://www.zhangxinxu.com/wordpress/2013/12/iebetter-js-make-ie6-ie8-like-modern-browser-ie9-chrome/)\n- [模拟键盘](http://mottie.github.io/Keyboard/)\n- [拼音](https://github.com/hotoo/pinyin)\n- [中国个人身份证号验证](https://github.com/mc-zone/IDValidator)\n#### 算法\n- [数据结构与算法 JavaScript 描述. 章节练习](https://github.com/Ralph-Wang/algorithm.in.js)\n- [常见排序算法（JS版）](https://github.com/twobin/twobinSort)\n- [经典排序](https://github.com/luofei2011/jsAgm/blob/master/js/sort.js)\n- [常见排序算法-js版本](https://github.com/hechangmin/jssort)\n- [JavaScript 算法与数据结构 精华集](https://github.com/lightningtgc/JavaScript-Algorithms)\n- [面试常考算法题精讲](http://www.nowcoder.com/live/courses)\n- []()\n#### 移动端\n- [fastclick](https://github.com/ftlabs/fastclick)\n- [no-click-delay](https://github.com/mmastrac/jquery-noclickdelay)\n#### JSON\n- [模拟生成JSON数据](http://beta.json-generator.com/)\n- [返回跨域JSONAPI](http://jsonp.afeld.me/)\n### 3. Html5\n<ul>\n<li><a href=\"http://www.zhihu.com/question/24398907?spm=5176.100239.blogcont82041.239.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.239\">HTML5 有哪些让你惊艳的 demo？</a></li>\n</ul>\n### 4. CSS\n<ul>\n<li><a href=\"http://browserhacks.com/?spm=5176.100239.blogcont82041.240.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.240\">browserhacks</a></li>\n\n</ul>\n### 5. jQuery\n<ol>\n<li>焦点图</li>\n</ol>\n- [myfocus](https://github.com/koen301/myfocus)\n- [myfocus-官方演示站](http://www.chhua.com/myfocus/)\n- [SuperSlidev2.1 -- 大话主席](http://www.superslide2.com/)\n- [soChange](http://www.bujichong.com/sojs/soChange/index.html)\n### 6. Ext, EasyUI, J-UI 及其它各种UI方案\n#### Ext\n- [extjs](https://www.sencha.com/products/extjs/)\n- [ext4英文api](http://docs.sencha.com/extjs/4.0.7/)\n- [ext4中文api](http://extjs-doc-cn.github.io/ext4api/)\n- []()\n#### EasyUI\n- [jquery easyui 未压缩源代码](http://jquery-easyui.googlecode.com/svn/trunk/src/)\n#### J-UI\n- [J-UI](http://jui.org/)\n#### Other\n- [MUI-最接近原生APP体验的高性能前端框架](http://dcloudio.github.io/mui/)\n- [Amaze UI | 中国首个开源 HTML5 跨屏前端框架](http://amazeui.org/)\n- [淘宝 HTML5 前端框架](http://m.sui.taobao.org/)\n- [KISSY - 阿里前端JavaScript库](http://docs.kissyui.com/)\n- [网易Nej - Nice Easy Javascript](http://nej.netease.com/)\n- [Kendo UI MVVM Demo](http://demos.telerik.com/kendo-ui/mvvm/index)\n- [Bootstrap](http://www.bootcss.com/)\n- [Smart UI](http://smartui.chinamzz.com/)\n- [雅虎UI - CSS UI](http://developer.yahoo.com/yui/grids/)\n### 7. 页面 社会化 分享功能\n<ul>\n<li><a href=\"http://share.baidu.com/?spm=5176.100239.blogcont82041.241.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.241\">百度分享</a> pc端</li>\n<li><a href=\"http://jiathis.com/?spm=5176.100239.blogcont82041.242.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.242\">JiaThis</a> pc端</li>\n<li><a href=\"http://developer.baidu.com/soc/share?spm=5176.100239.blogcont82041.243.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.243\">社会化分享组件</a> 移动端</li>\n<li><a href=\"http://www.mob.com/?spm=5176.100239.blogcont82041.244.jiu0a3#/index\" data-spm-anchor-id=\"5176.100239.blogcont82041.244\">ShareSDK 轻松实现社会化功能</a> 移动端</li>\n<li><a href=\"http://dev.umeng.com/social/android/quick-integration?spm=5176.100239.blogcont82041.245.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.245\">友盟分享</a> 移动端</li>\n</ul>\n<h4 id=\"35\">8. 富文本编辑器</h4>\n<ul>\n<li><a href=\"http://ueditor.baidu.com/website/?spm=5176.100239.blogcont82041.246.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.246\">百度 ueditor</a></li>\n<li><a href=\"http://ckeditor.com/?spm=5176.100239.blogcont82041.247.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.247\">经典的ckeditor</a></li>\n<li><a href=\"http://kindeditor.net/?spm=5176.100239.blogcont82041.248.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.248\">经典的kindeditor</a></li>\n<li><a href=\"http://www.bootcss.com/p/bootstrap-wysiwyg/?spm=5176.100239.blogcont82041.249.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.249\">wysiwyg</a></li>\n<li><a href=\"http://integ.github.io/BachEditor/?spm=5176.100239.blogcont82041.250.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.250\">一个有情怀的编辑器。Bach's Editor</a></li>\n<li><a href=\"https://github.com/mycolorway/simditor?spm=5176.100239.blogcont82041.251.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.251\">tower用的编辑器</a></li>\n<li><a href=\"https://github.com/summernote/summernote?spm=5176.100239.blogcont82041.252.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.252\">summernote 编辑器</a></li>\n<li><a href=\"http://neilj.github.io/Squire/?spm=5176.100239.blogcont82041.253.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.253\">html5编辑器</a></li>\n<li><a href=\"http://lab.hustlzp.com/XEditor/?spm=5176.100239.blogcont82041.254.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.254\">XEditor</a></li>\n<li><a href=\"https://github.com/wangfupeng1988/wangEditor?spm=5176.100239.blogcont82041.255.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.255\">wangEditor</a></li>\n</ul>\n### 9. 日历\n#### pc\n- [经典my97](http://www.my97.net/dp/demo/index.htm)\n- [强大的独立日期选择器](http://www.cnblogs.com/gbin1/archive/2012/04/16/2452105.html)\n- [fullcalendar](http://fullcalendar.io/)\n- [fullcalendar日历控件知识点集合 ](http://blog.csdn.net/francislaw/article/details/7740630)\n- [中文api](http://blog.sina.com.cn/s/blog_9475b1c101012c5f.html)\n- [农历日历](https://github.com/zzyss86/LunarCalendar)\n- [超酷的仿百度带节日日历老黄历控件](http://www.sucaisj.com/jiaoben/date/201509/16856.html)\n- [日期格式化](http://momentjs.com/)\n- [大牛日历控件](https://github.com/Johnqing/QPAYCalendar/)\n- [我群某管理作品](https://github.com/Iamlars/dateMarker)\n- [input按位替换-官网](http://digitalbush.com/projects/masked-input-plugin/)\n- [input按位替换-github](https://github.com/digitalBush/jquery.maskedinput/tree/1.2.2)\n- [bootstrap-daterangepicker](https://github.com/dangrossman/bootstrap-daterangepicker)\n- [国外30个插件集合](http://www.vandelaydesign.com/30-best-free-jquery-plugins/)\n- [JavaScript datepicker](http://dbushell.com/2012/10/09/pikaday-javascript-datepicker/)\n- [Datepair.js](http://jonthornton.github.io/Datepair.js/)\n- [一个风格多样的日历](https://github.com/glad/glDatePicker)\n- [弹出层式的全日历](http://amsul.ca/pickadate.js/date/)\n- [jquery双日历](http://www.daterangepicker.com/)\n#### 移动\n- [大气实用jQuery手机移动端日历日期选择插件](http://www.frankdemo.cn/index.php?c=content&a=show&id=115)\n- [jQuery Mobile 移动开发中的日期插件Mobiscroll ](https://mobiscroll.com/)\n\n#### Date library\n- [Datejs](https://github.com/datejs/Datejs)\n- [sugarjs](http://sugarjs.com/api/Date)\n### 10. 综合效果搜索平台\n<ul>\n<li><a href=\"http://www.jq22.com?spm=5176.100239.blogcont82041.256.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.256\">效果网</a></li>\n<li><a href=\"http://www.17sucai.com/?spm=5176.100239.blogcont82041.257.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.257\">17素材</a></li>\n<li><a href=\"http://microjs.com/?spm=5176.100239.blogcont82041.258.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.258\">常用的JavaScript代码片段</a></li>\n</ul>\n### 11. 前端工程化\n#### 概述\n- [前端工具大全](http://www.awesomes.cn/)\n- [什么是前端工程化](https://github.com/fouber/blog/issues/10?from=timeline&isappinstalled=0#)\n#### Gulp\n- [Gulp官网](http://gulpjs.com/)\n- [Gulp中文网](http://www.gulpjs.com.cn/)\n- [gulp资料收集](https://github.com/Platform-CUF/use-gulp)\n- [Gulp：任务自动管理工具 - ruanyifeng](http://javascript.ruanyifeng.com/tool/gulp.html)\n- [Gulp插件](http://gulpjs.com/plugins/)\n- [Gulp不完全入门教程](http://www.ido321.com/1622.html)\n- [为什么使用gulp?](https://github.com/hjzheng/CUF_meeting_knowledge_share/issues/33)\n- [Gulp安装及配合组件构建前端开发一体化](http://www.dbpoo.com/getting-started-with-gulp/)\n- [Gulp 入门指南](https://github.com/nimojs/gulp-book)\n- [Gulp 入门指南 - nimojs](https://github.com/nimojs/blog/issues/19)\n- [Gulp入门教程](http://markpop.github.io/2014/09/17/Gulp%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/)\n- [Gulp in Action](http://www.imooc.com/video/5692)\n- [Gulp开发教程（翻译）](http://www.w3ctech.com/topic/134)\n- [前端构建工具gulpjs的使用介绍及技巧](http://www.cnblogs.com/2050/p/4198792.html)\n\n#### Grunt\n- [gruntjs](http://gruntjs.com/)\n- [Grunt中文网](http://www.gruntjs.net/)\n\n#### Fis\n- [fis 官网](http://fex-team.github.io/fis-site/index.html)\n- [fis](http://fis.baidu.com/)\n### 12. 轮播图\n#### pc图轮\n- [单屏轮播sochange](http://www.jsfoot.com/jquery/demo/2011-09-20/192.html)\n- [左右按钮多图切换](http://bxslider.com/examples/carousel-demystified)\n- [fullpage全屏轮播](https://github.com/alvarotrigo/fullPage.js/)\n#### 移动端\n- [无缝切换](http://www.swipejs.com/)\n- [滑屏效果](http://www.idangero.us/swiper/)\n- [全屏fullpage](https://github.com/peunzhang/fullpage)\n- [单个图片切换](https://github.com/qiqiboy/touchslider)\n- [单个全屏切换](https://github.com/peunzhang/slip.js)\n- [百度的切换库](http://touch.code.baidu.com/examples.html?qq-pf-to=pcqq.group)\n- [单个全屏切换](https://github.com/peunzhang/iSlider)\n- [滑屏效果](https://github.com/saw/touch-interfaces)\n- [旋转拖动设置](http://baijs.com/tinycircleslider/)\n- [类似于swipe切换](http://touchslider.com/)\n- [支持多种形式的触摸滑动](http://www.swiper.com.cn/demo/index.html)\n- [滑屏效果](https://github.com/joker-ye/main/blob/master/wap/index.html)\n- [大话主席pc移动图片轮换](http://www.superslide2.com/)\n- [滑屏效果](https://github.com/hahnzhu/parallax.js)\n- [基于zepto的fullpage](https://github.com/yanhaijing/zepto.fullpage)\n- [[WebApp]定宽网页设计下，固定宽度布局开发WebApp并实现多终端下WebApp布局自适应](http://www.cnblogs.com/plums/archive/2013/01/10/WebApp-fixed-width-layout-of-multi-terminal-adapter-since.html)\n- [判断微信客户端的那些坑](http://loo2k.com/blog/detecting-wechat-client/)\n- [可以通过javascript直接调用原生分享的工具](https://github.com/JefferyWang/nativeShare.js)\n- [JiaThis 分享到微信代码](http://www.jiathis.com/help/html/weixin-share-code)\n- [聊聊移动端跨平台开发的各种技术](http://fex.baidu.com/blog/2015/05/cross-mobile/)\n- [前端自动化测试](http://www.zhihu.com/question/29922082)\n- [多种轮换图片](http://ajccom.github.io/niceslider/)\n- [滑动侧边栏](https://mango.github.io/slideout/)\n### 13. 文件上传\n<ul>\n<li><a href=\"http://fex.baidu.com/webuploader/?spm=5176.100239.blogcont82041.259.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.259\">百度上传组件</a></li>\n<li><a href=\"https://blueimp.github.io/jQuery-File-Upload/?spm=5176.100239.blogcont82041.260.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.260\">上传</a></li>\n<li><a href=\"http://www.hdfu.net/?spm=5176.100239.blogcont82041.261.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.261\">flash 头像上传</a></li>\n<li><a href=\"http://www.dropzonejs.com/?spm=5176.100239.blogcont82041.262.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.262\">图片上传预览</a></li>\n<li><a href=\"http://elemefe.github.io/image-cropper/?spm=5176.100239.blogcont82041.263.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.263\">图片裁剪</a></li>\n<li><a href=\"http://www.shearphoto.com/?spm=5176.100239.blogcont82041.264.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.264\">图片裁剪-shearphoto</a></li>\n<li><a href=\"http://www.oschina.net/project/tag/284/jquery-image-tools?spm=5176.100239.blogcont82041.265.jiu0a3&amp;lang=0&amp;os=0&amp;sort=view&amp;p=2\" data-spm-anchor-id=\"5176.100239.blogcont82041.265\">jQuery图片处理</a></li>\n<li><a href=\"\"></a></li>\n</ul>\n<h4 id=\"41\">14. 模拟select</h4>\n<ul>\n<li><a href=\"http://aui.github.io/popupjs/doc/selectbox.html?spm=5176.100239.blogcont82041.266.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.266\">糖饼 select</a></li>\n<li><a href=\"https://github.com/rmm5t/jquery-flexselect?spm=5176.100239.blogcont82041.267.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.267\">flexselect</a></li>\n<li><a href=\"http://loudev.com/?spm=5176.100239.blogcont82041.268.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.268\">双select</a></li>\n<li><a href=\"http://select2.github.io/?spm=5176.100239.blogcont82041.269.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.269\">select2</a></li>\n\n</ul>\n<h4 id=\"42\">15. 取色插件</h4>\n<ul>\n<li><a href=\"http://www.jq22.com/plugin/367?spm=5176.100239.blogcont82041.270.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.270\">类似 Photoshop 的界面取色插件</a></li>\n<li><a href=\"https://github.com/jquery/jquery-color/?spm=5176.100239.blogcont82041.271.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.271\">jquery color</a></li>\n<li><a href=\"http://www.oschina.net/project/tag/287/color-picker?spm=5176.100239.blogcont82041.272.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.272\">取色插件集合</a></li>\n<li><a href=\"https://github.com/mattfarina/farbtastic?spm=5176.100239.blogcont82041.273.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.273\">farbtastic 圆环＋正方形</a></li>\n\n</ul>\n<h4 id=\"43\">16. 城市联动</h4>\n<ul>\n<li><a href=\"http://www.ijquery.cn/?spm=5176.100239.blogcont82041.274.jiu0a3&amp;p=360\" data-spm-anchor-id=\"5176.100239.blogcont82041.274\">jquery.cityselect.js基于jQuery+JSON的省市或自定义联动效果</a></li>\n\n</ul>\n<h4 id=\"44\">17. 剪贴板</h4>\n<ul>\n<li><a href=\"https://github.com/zeroclipboard/zeroclipboard?spm=5176.100239.blogcont82041.275.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.275\">剪贴板</a></li>\n<li><a href=\"http://zenorocha.github.io/clipboard.js/?spm=5176.100239.blogcont82041.276.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.276\">clipboard 最新的剪切方案</a></li>\n<li><a href=\"https://github.com/zenorocha/clipboard.js?spm=5176.100239.blogcont82041.277.jiu0a3&amp;file=clipboard.js\" data-spm-anchor-id=\"5176.100239.blogcont82041.277\">不是Flash的剪贴板</a></li>\n</ul>\n<h4 id=\"45\">18. 简繁转换</h4>\n<ul>\n<li><a href=\"https://github.com/BYVoid/OpenCC?spm=5176.100239.blogcont82041.278.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.278\">简繁转换</a></li>\n</ul>\n<h4 id=\"46\">19. 表格 Grid</h4>\n<ul>\n<li><a href=\"http://facebook.github.io/fixed-data-table/?spm=5176.100239.blogcont82041.279.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.279\">facebook表格</a></li>\n<li><a href=\"http://handsontable.com/?spm=5176.100239.blogcont82041.280.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.280\">类似于Excel编辑表格-handsontable</a></li>\n<li><a href=\"http://bootstrap-table.wenzhixin.net.cn/?spm=5176.100239.blogcont82041.281.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.281\">bootstrap-table插件</a></li>\n<li><a href=\"https://www.datatables.net/?spm=5176.100239.blogcont82041.282.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.282\">datatables</a></li>\n</ul>\n<h4 id=\"47\">20. 在线演示</h4>\n<ul>\n<li><a href=\"http://runjs.cn/?spm=5176.100239.blogcont82041.283.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.283\">js 在线编辑 - runjs</a></li>\n<li><a href=\"http://jsbin.com/?spm=5176.100239.blogcont82041.284.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.284\">js 在线编辑 - jsbin</a></li>\n<li><a href=\"http://codepen.io/?spm=5176.100239.blogcont82041.285.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.285\">js 在线编辑 - codepen</a></li>\n<li><a href=\"http://jsfiddle.net/?spm=5176.100239.blogcont82041.286.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.286\">js 在线编辑 - jsfiddle</a></li>\n<li><a href=\"http://ideone.com/?spm=5176.100239.blogcont82041.287.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.287\">java 在线编辑 - runjs</a></li>\n<li><a href=\"http://code.hcharts.cn/?spm=5176.100239.blogcont82041.288.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.288\">js 在线编辑 - hcharts</a></li>\n<li><a href=\"http://jsdm.com/?spm=5176.100239.blogcont82041.289.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.289\">js 在线编辑 - jsdm</a></li>\n<li><a href=\"http://sqlfiddle.com/?spm=5176.100239.blogcont82041.290.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.290\">sql 在线编辑 - sqlfiddle</a></li>\n<li><a href=\"https://thimble.mozilla.org?spm=5176.100239.blogcont82041.291.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.291\">mozilla 在线编辑器</a></li>\n</ul>\n<h4 id=\"48\">21. 播放器</h4>\n<ul>\n<li><a href=\"https://github.com/zmmbreeze/DeadSimpleVideoPlayer?spm=5176.100239.blogcont82041.292.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.292\">Html5 VideoPlayer</a></li>\n</ul>\n<h4 id=\"49\">22. 粒子动画</h4>\n<ul>\n<li><a href=\"http://a-jie.github.io/Proton/?spm=5176.100239.blogcont82041.293.jiu0a3#example\" data-spm-anchor-id=\"5176.100239.blogcont82041.293\">Proton 烟花</a></li>\n</ul>\n<h3 id=\"50\">九. Nodejs</h3>\n<ul>\n<li><a href=\"http://liuqing.pw/?spm=5176.100239.blogcont82041.294.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.294\">nodejs 篇幅比较巨大</a></li>\n<li><a href=\"https://github.com/alsotang/node-lessons?spm=5176.100239.blogcont82041.295.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.295\">Node.js 包教不包会</a></li>\n<li><a href=\"http://www.rainweb.cn/article/category/Nodejs?spm=5176.100239.blogcont82041.296.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.296\">篇幅比较少</a></li>\n<li><a href=\"http://www.w3cfuns.com/article-5598538-1-1.html?spm=5176.100239.blogcont82041.297.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.297\">node express 入门教程</a></li>\n<li><a href=\"http://my.oschina.net/u/568264/blog/193773?spm=5176.100239.blogcont82041.298.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.298\">nodejs定时任务</a></li>\n<li><a href=\"http://60sky.com/?spm=5176.100239.blogcont82041.299.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.299\">一个nodejs博客</a></li>\n<li><a href=\"http://www.cnblogs.com/yexiaochai/p/3536547.html?spm=5176.100239.blogcont82041.300.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.300\">【NodeJS 学习笔记04】新闻发布系统</a></li>\n<li><a href=\"http://www.cnblogs.com/qqloving/p/3541099.html?spm=5176.100239.blogcont82041.301.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.301\">过年7天乐，学nodejs 也快乐</a></li>\n<li><a href=\"https://github.com/nqdeng/7-days-nodejs?spm=5176.100239.blogcont82041.302.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.302\">七天学会NodeJS</a></li>\n<li><a href=\"http://www.cnblogs.com/zhongweiv/p/nodejs_events.html?spm=5176.100239.blogcont82041.303.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.303\">Nodejs学习笔记（二）--- 事件模块</a></li>\n<li><a href=\"http://www.cnblogs.com/liusuqi/p/3735491.html?spm=5176.100239.blogcont82041.304.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.304\">nodejs入门</a></li>\n<li><a href=\"https://github.com/zensh/jsgen?spm=5176.100239.blogcont82041.305.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.305\">angularjs nodejs</a></li>\n<li><a href=\"http://blog.fens.me/series-nodejs/?spm=5176.100239.blogcont82041.306.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.306\">从零开始nodejs系列文章</a></li>\n<li><a href=\"http://debuggable.com/posts/understanding-node-js:4bd98440-45e4-4a9a-8ef7-0f7ecbdd56cb?spm=5176.100239.blogcont82041.307.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.307\">理解nodejs</a></li>\n<li><a href=\"http://blog.mixu.net/2011/02/01/understanding-the-node-js-event-loop/?spm=5176.100239.blogcont82041.308.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.308\">nodejs事件轮询</a></li>\n<li><a href=\"http://www.nodebeginner.org/index-zh-cn.html?spm=5176.100239.blogcont82041.309.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.309\">node入门</a></li>\n<li><a href=\"http://ourjs.com/detail/53e1f281c5910a9806000001?spm=5176.100239.blogcont82041.310.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.310\">nodejs cms</a></li>\n<li><a href=\"http://ourjs.com/detail/529ca5950cb6498814000005?spm=5176.100239.blogcont82041.311.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.311\">Node初学者入门，一本全面的NodeJS教程</a></li>\n<li><a href=\"http://www.barretlee.com/blog/2015/10/07/debug-nodejs-in-command-line/?spm=5176.100239.blogcont82041.312.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.312\">NodeJS的代码调试和性能调优</a></li>\n</ul>\n## 十. 性能优化\n<ol>\n<li>常规优化</li>\n</ol>\n- [Javascript高性能动画与页面渲染](http://www.infoq.com/cn/articles/javascript-high-performance-animation-and-page-rendering)\n- [移动H5前端性能优化指南](http://isux.tencent.com/h5-performance.html)\n- [5173首页前端性能优化实践](http://ued.5173.com/?p=1731)\n- [给网页设计师和前端开发者看的前端性能优化](http://www.uisdc.com/front-end-performance-for-web-designers-and-front-end-developers)\n- [复杂应用的 CSS 性能分析和优化建议](http://www.orzpoint.com/profiling-css-and-optimization-notes/)\n- [张鑫旭——前端性能](http://www.zhangxinxu.com/wordpress/tag/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD/)\n- [前端性能监控总结](http://www.xiaoqiang.org/javascript/font-end-performance-monitor.html)\n- [网站性能优化之CSS无图片技术](http://udc.weibo.com/2013/05/%E7%BD%91%E7%AB%99%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%B9%8Bcss%E6%97%A0%E5%9B%BE%E7%89%87%E6%8A%80%E6%9C%AF/)\n- [web前端性能优化进阶路](http://www.aliued.cn/2013/01/20/web%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E8%BF%9B%E9%98%B6%E8%B7%AF.html)\n- [前端技术：网站性能优化之CSS无图片技术](http://my.eoe.cn/tuwandou/archive/4544.html)\n- [浏览器的加载与页面性能优化](http://www.baiduux.com/blog/2011/02/15/browser-loading/)\n- [页面加载中的图片性能优化](http://www.w3ctech.com/p/1503)\n- [Hey——前端性能](http://www.feelcss.com/tag/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD)\n- [html优化](http://www.baiduux.com/blog/2010/03/15/html%E4%BC%98%E5%8C%96-2/)\n- [99css——性能](http://www.99css.com/tag/%e6%80%a7%e8%83%bd)\n- [Yslow——性能优化](http://www.yslow.net/category.php?cid=20)\n- [YSLOW中文介绍](http://www.cnblogs.com/yslow/)\n- [转一篇Yahoo关于网站性能优化的文章，兼谈本站要做的优化](http://www.360ito.com/article/40.html)\n- [Yahoo!团队实践分享：网站性能](http://www.360doc.com/content/10/0928/09/2588264_56971287.shtml)\n- [网站性能优化指南：什么使我们的网站变慢？](http://blog.jiasule.com/i/153)\n- [网站性能优化实践，减少加载时间，提高用户体验](http://www.powereasy.net/helpyou/knowledge/ecommerce/9593.html)\n- [浅谈网站性能优化 前端篇](http://www.umtry.com/archives/747.html)\n- [前端重构实践之如何对网站性能优化？](http://www.adinnet.cn/blog/designview/2012-7-12/678.html)\n- [前端性能优化：使用媒体查询加载指定大小的背景图片](http://www.gbin1.com/technology/javascript/20130708-front-end-performance-optimization-9/)\n- [网站性能系列博文](http://www.mykuer.com/post/factors-that-affect-the-speed-of-web-site-open.html)\n- [加载，不只是少一点点](http://tgideas.qq.com/webplat/info/news_version3/804/808/811/m579/201109/41355.shtml)\n- [前端性能的测试与优化](http://mzhou.me/article/95310/)\n- [分享网页加载速度优化的一些技巧？](http://www.gbin1.com/technology/html/20130217-tips-for-speed-up-page-loading/)\n- [页面加载中的图片性能优化](http://www.f2es.com/images-bytes-opt/)\n- [web前端优化(基于Yslow)](http://www.tcreator.info/webSchool/website/Front-end-Opt-Yslow.html)\n- [网站性能优化工具大全](https://www.qianduan.net/website-performance-optimization-tool.html)\n- [【高性能前端1】高性能HTML](http://www.alloyteam.com/2012/10/high-performance-html/)\n- [【高性能前端2】高性能CSS](http://www.alloyteam.com/2012/10/high-performance-css/)\n- [由12306谈谈网站前端性能和后端性能优化](http://coolshell.cn/articles/6470.html)\n- [AlloyTeam——前端优化](http://www.alloyteam.com/webfrontend/%E5%89%8D%E7%AB%AF%E4%BC%98%E5%8C%96/)\n- [毫秒必争，前端网页性能最佳实践](http://www.cnblogs.com/developersupport/p/3248695.html)\n- [网站性能工具Yslow的使用方法](http://blog.sina.com.cn/s/blog_6e9d2e0701017kvu.html)\n- [前端工程与性能优化（上）：静态资源版本更新与缓存](http://www.infoq.com/cn/articles/front-end-engineering-and-performance-optimization-part1)\n- [前端工程与性能优化（下）：静态资源管理与模板框架](http://www.infoq.com/cn/articles/front-end-engineering-and-performance-optimization-part2)\n- [HTTPS连接的前几毫秒发生了什么](http://blog.jobbole.com/48369/)\n- [Yslow](http://uicss.cn/yslow/#more-12319)\n- [Essential Web Performance Metrics — A Primer, Part 1](http://blog.smartbear.com/web-performance/essential-web-performance-metrics-a-primer-part-1/)\n- [Essential Web Performance Metrics — Part 2](http://blog.smartbear.com/performance/essential-web-performance-metrics-part-2/)\n- [YUISlide,针对移动设备的动画性能优化](http://jayli.github.io/blog/data/2011/12/23/yuislide.html)\n- [Improving Site Performance](http://joelglovier.com/improving-site-performance/)\n- [让网站提速的最佳前端实践](http://segmentfault.com/a/1190000000367899)\n- [Why Website Speed is Important](http://sixrevisions.com/web-development/why-website-speed-is-important/)\n- [Need for Speed – How to Improve your Website Performance](https://www.devbridge.com/articles/need-for-speed-how-to-improve-your-website-performance/)\n- [阿里无线前端性能优化指南 (Pt.1 加载期优化) ](https://github.com/amfe/article/issues/1)\n- []()\n<ol>\n<li>优化工具</li>\n</ol>\n- [JavaScript 性能分析新工具 OneProfile](http://www.html-js.com/article/3083)\n- [JavaScript 堆内存分析新工具 OneHeap](http://www.html-js.com/article/3091)\n<ol>\n<li>在线工具</li>\n</ol>\n- [google在线工具](https://developers.google.com/speed/pagespeed/insights/)\n- [阿里测](http://www.alibench.com/)\n- [阿里-免费测试服务](http://itest.aliyun.com/)\n- [阿里-F2etest多浏览器兼容性测试解决方案](https://github.com/alibaba/f2etest)\n- [js性能测试](http://jsperf.com/)\n- []()\n<h3 id=\"52\">十一. 前端架构</h3>\n<ul>\n<li><a href=\"http://www.zhihu.com/topic/19612641?spm=5176.100239.blogcont82041.313.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.313\">技术架构</a></li>\n<li><a href=\"http://saito.im/note/The-Architecture-of-F2E/?spm=5176.100239.blogcont82041.314.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.314\">前端架构</a></li>\n<li><a href=\"http://www.zhihu.com/question/24092572?spm=5176.100239.blogcont82041.315.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.315\">如何成为前端架构师</a></li>\n<li><a href=\"http://hikejun.com/sharing/2010webrebuild/?spm=5176.100239.blogcont82041.316.jiu0a3&amp;file=fe-infrastructure.html\" data-spm-anchor-id=\"5176.100239.blogcont82041.316\">关于前端架构-张克军</a></li>\n<li><a href=\"http://www.zhihu.com/question/25583350?spm=5176.100239.blogcont82041.317.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.317\">百度腾讯offer比较（腾讯游戏VS百度基础架构）</a></li>\n\n</ul>\n<h3 id=\"53\">十二. 个人作品</h3>\n<h4 id=\"54\">1. 推荐作品</h4>\n<ul>\n<li><a href=\"https://gist.github.com/wintercn?spm=5176.100239.blogcont82041.318.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.318\">winter代码片段需要翻墙</a></li>\n<li><a href=\"http://www.fgm.cc/learn/?spm=5176.100239.blogcont82041.319.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.319\">fgm</a></li>\n<li><a href=\"https://github.com/hongru/hongru.github.com?spm=5176.100239.blogcont82041.320.jiu0a3&amp;file=hongru.github.com\" data-spm-anchor-id=\"5176.100239.blogcont82041.320\">岑安作品集</a></li>\n<li><a href=\"http://kmdjs.github.io/?spm=5176.100239.blogcont82041.321.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.321\">当耐特demo集合</a></li>\n<li><a href=\"http://www.laoshu133.com/Lab/?spm=5176.100239.blogcont82041.322.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.322\">米空格 js作品</a></li>\n<li><a href=\"http://koen301.github.io/?spm=5176.100239.blogcont82041.323.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.323\">myFocus</a></li>\n<li><a href=\"http://panxuepeng.github.io/seajslib/?spm=5176.100239.blogcont82041.324.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.324\">SeaJS组件库</a></li>\n<li><a href=\"http://yanhaijing.com/myProject/?spm=5176.100239.blogcont82041.325.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.325\">颜海镜作品</a></li>\n<li><a href=\"http://jo2.org/category/myworks/?spm=5176.100239.blogcont82041.326.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.326\">脚儿网作品</a></li>\n<li><a href=\"http://www.cnitblog.com/yemoo/category/3107.html?spm=5176.100239.blogcont82041.327.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.327\">javascript个人作品</a></li>\n<li><a href=\"http://bbs.miaov.com/forum.php?spm=5176.100239.blogcont82041.328.jiu0a3&amp;mod=viewthread&amp;tid=7790\" data-spm-anchor-id=\"5176.100239.blogcont82041.328\">妙味的雷东升游戏作品</a></li>\n<li><a href=\"http://bbs.csdn.net/topics/380227212?spm=5176.100239.blogcont82041.329.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.329\">javascript作品集</a></li>\n<li><a href=\"https://github.com/TooBug/works?spm=5176.100239.blogcont82041.330.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.330\">云五笔，灰度产生生成工具</a></li>\n<li><a href=\"http://koen301.github.io/?spm=5176.100239.blogcont82041.331.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.331\">项目主页</a></li>\n<li><a href=\"http://zaole.net/?spm=5176.100239.blogcont82041.332.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.332\">个性的作品主页</a></li>\n<li><a href=\"http://static.tingall.com/v2/player/?spm=5176.100239.blogcont82041.333.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.333\">播放器</a></li>\n<li><a href=\"http://ucren.com/blog/demos?spm=5176.100239.blogcont82041.334.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.334\">ucren js demos 集</a></li>\n<li><a href=\"http://www.zhinengshe.com/works_list.html?spm=5176.100239.blogcont82041.335.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.335\">智能社</a></li>\n<li><a href=\"http://demos.shizuwu.cn/?spm=5176.100239.blogcont82041.336.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.336\">实例陈列架</a></li>\n<li><a href=\"http://zoye.sinaapp.com/demo?spm=5176.100239.blogcont82041.337.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.337\">zoye demo</a></li>\n<li><a href=\"http://lab.yuanwai.wang/?spm=5176.100239.blogcont82041.338.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.338\">王员外</a></li>\n<li><a href=\"http://pingfan1990.sinaapp.com?spm=5176.100239.blogcont82041.339.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.339\">平凡</a></li>\n<li><a href=\"http://www.lovewebgames.com/?spm=5176.100239.blogcont82041.340.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.340\">jyg 游戏案例</a></li>\n<li><a href=\"http://www.helloweba.com/list.html?spm=5176.100239.blogcont82041.341.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.341\">很多jquery插件</a></li>\n<li><a href=\"http://www.bujichong.com/sojs/api/index.html?spm=5176.100239.blogcont82041.342.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.342\">不羁虫 - soJs 作品系列</a></li>\n<li><a href=\"http://frozenui.github.io/case.html?spm=5176.100239.blogcont82041.343.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.343\">frozenui</a></li>\n<li><a href=\"http://js-game.github.io/othello/?spm=5176.100239.blogcont82041.344.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.344\">黑白棋</a></li>\n<li><a href=\"http://yansm.github.io/fromone/index.html?spm=5176.100239.blogcont82041.345.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.345\">fromone</a></li>\n</ul>\n<h4 id=\"55\">2. 群员作品</h4>\n<ul>\n<li><a href=\"http://demo.webjyh.com/?spm=5176.100239.blogcont82041.346.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.346\">MDialog - [合肥-M.J]</a></li>\n<li><a href=\"http://sandbox.runjs.cn/show/do6zlrrk?spm=5176.100239.blogcont82041.347.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.347\">轮播图 - [上海－冷静]</a></li>\n<li><a href=\"http://www.replace5.com/?spm=5176.100239.blogcont82041.348.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.348\">[广州—坚壳]</a></li>\n<li><a href=\"http://www.seejs.com/demos/?spm=5176.100239.blogcont82041.349.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.349\">[成都 - 无痕]　感恩节专题</a></li>\n<li><a href=\"http://hacke2.github.io/works?spm=5176.100239.blogcont82041.350.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.350\">[球霸天]</a></li>\n<li><a href=\"http://www.cnblogs.com/mcat/?spm=5176.100239.blogcont82041.351.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.351\">[北京-小数]</a></li>\n<li><a href=\"http://thx.github.io/magix/?spm=5176.100239.blogcont82041.352.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.352\">[ptf] Magix 工具</a></li>\n<li><a href=\"http://thx.github.io/magix/?spm=5176.100239.blogcont82041.353.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.353\">[杭州-Pft] Magix 基于 MVC 结构和 Hash 驱动的 OPOA（One Page One Application）应用</a></li>\n<li><a href=\"http://bh-lay.com/labs/?spm=5176.100239.blogcont82041.354.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.354\">[上海-剧中人]-实验室</a></li>\n<li><a href=\"http://jikeytang.github.io?spm=5176.100239.blogcont82041.355.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.355\">[上海-豪情 ] 作品集合</a></li>\n<li><a href=\"http://guoshan.sinaapp.com/?spm=5176.100239.blogcont82041.356.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.356\">[成都-feeling]</a></li>\n<li><a href=\"http://www.cnblogs.com/liyunhua/?spm=5176.100239.blogcont82041.357.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.357\">[上海-angela]</a></li>\n<li><a href=\"http://hcjp.github.io/work/demo/?spm=5176.100239.blogcont82041.358.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.358\">[海南-hank]作品</a></li>\n<li><a href=\"https://github.com/yibuyisheng/blogs/issues?spm=5176.100239.blogcont82041.359.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.359\">[上海-张力]博客</a></li>\n<li><a href=\"http://zkske121.github.io/?spm=5176.100239.blogcont82041.360.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.360\">[上海-zenki]作品</a></li>\n<li><a href=\"http://01google.sinaapp.com/locker.html?spm=5176.100239.blogcont82041.361.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.361\">移动端图案解锁</a></li>\n<li><a href=\"https://github.com/webjyh/MPreview.mobile?spm=5176.100239.blogcont82041.362.jiu0a3&amp;file=MPreview.mobile\" data-spm-anchor-id=\"5176.100239.blogcont82041.362\">[合肥-M.J] - MPreview 移动端图片预览组</a></li>\n<li><a href=\"https://github.com/webjyh/Mexam?spm=5176.100239.blogcont82041.363.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.363\">[合肥-M.J] - Mexam 移动端在线做题组</a></li>\n<li><a href=\"http://letyougo.github.io/dancer/?spm=5176.100239.blogcont82041.364.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.364\">[北京-苏瑞] - dancer小人</a></li>\n<li><a href=\"http://k.swao.cn/js/?spm=5176.100239.blogcont82041.365.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.365\">[上海-玄沐]- 个人网站</a></li>\n<li><a href=\"http://www.meckodo.com/?spm=5176.100239.blogcont82041.366.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.366\">[厦门-二哲]- 个人博客</a></li>\n</ul>\n<h4 id=\"56\">3. 国外大牛精品</h4>\n<ul>\n<li><a href=\"http://pazguille.me/?spm=5176.100239.blogcont82041.367.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.367\">pazguille</a></li>\n</ul>\n<h3 id=\"57\">十三. 简历模板</h3>\n<ul>\n<li><a href=\"http://learnshare.github.io/about/index.html?spm=5176.100239.blogcont82041.368.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.368\">不错的个人简历</a></li>\n<li><a href=\"http://hcy2367.github.io/resume/?spm=5176.100239.blogcont82041.369.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.369\">简历</a></li>\n<li><a href=\"http://ncuey.sinaapp.com/CrispElite/?spm=5176.100239.blogcont82041.370.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.370\">张伦</a></li>\n<li><a href=\"https://github.com/hacke2/ResumeSample?spm=5176.100239.blogcont82041.371.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.371\">简历</a></li>\n<li><a href=\"http://blog.dandyweng.com/2013/07/how-my-website-was-created/?spm=5176.100239.blogcont82041.372.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.372\">翁天信</a></li>\n<li><a href=\"http://www.webhek.com/misc/interactive-resume/?spm=5176.100239.blogcont82041.373.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.373\">动画方式的简历</a></li>\n<li><a href=\"http://www.linqing07.com/resume.html?spm=5176.100239.blogcont82041.374.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.374\">组件丰富简历</a></li>\n<li><a href=\"http://www.mojianli.com/resume/view?spm=5176.100239.blogcont82041.375.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.375\">简历池</a></li>\n<li><a href=\"http://www.haorooms.com/about?spm=5176.100239.blogcont82041.376.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.376\">haorooms博客</a></li>\n<li><a href=\"http://cv.youngdze.com/?spm=5176.100239.blogcont82041.377.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.377\">Justin Young</a></li>\n<li><a href=\"\"></a></li>\n</ul>\n<h3 id=\"58\">十四. 面试题</h3>\n<ul>\n<li><a href=\"http://www.nowcoder.com/discuss/3196?spm=5176.100239.blogcont82041.378.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.378\">那几个月在找工作（百度，网易游戏）</a></li>\n<li><a href=\"http://www.html-js.com/article/1743?spm=5176.100239.blogcont82041.379.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.379\">2014最新面试题</a></li>\n<li><a href=\"http://www.w3cfuns.com/thread-5598563-2-1.html?spm=5176.100239.blogcont82041.380.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.380\">阿里前端面试题</a></li>\n<li><a href=\"http://www.cnblogs.com/imwtr/p/4685546.html?spm=5176.100239.blogcont82041.381.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.381\">2016校招内推 -- 阿里巴巴前端 -- 三面面试经历 </a></li>\n<li><a href=\"http://www.w3cfuns.com/article-5599657-1-1.html?spm=5176.100239.blogcont82041.382.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.382\">腾讯面试题</a></li>\n<li><a href=\"http://www.cnblogs.com/lvdabao/p/3660707.html?spm=5176.100239.blogcont82041.383.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.383\">年后跳槽那点事：乐视+金山+360面试之行</a></li>\n<li><a href=\"http://fatesinger.com/2722.html?spm=5176.100239.blogcont82041.384.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.384\">阿里前端面试题上线</a></li>\n<li><a href=\"http://www.cnblogs.com/52cik/p/js-question-lg.html?spm=5176.100239.blogcont82041.385.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.385\">拉勾网js面试题</a></li>\n<li><a href=\"http://www.cnblogs.com/allenxing/p/3724382.html?spm=5176.100239.blogcont82041.386.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.386\">前端面试</a></li>\n<li><a href=\"http://mianshiti.diandian.com/?spm=5176.100239.blogcont82041.387.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.387\">Web开发笔试面试题 大全</a></li>\n<li><a href=\"http://segmentfault.com/a/1190000000465431?spm=5176.100239.blogcont82041.388.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.388\">前端开发面试题</a></li>\n<li><a href=\"https://github.com/markyun/My-blog/tree/master/Front-end-Developer-Questions?spm=5176.100239.blogcont82041.389.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.389\">2014最新前端面试题</a></li>\n<li><a href=\"https://github.com/fex-team/interview-questions?spm=5176.100239.blogcont82041.390.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.390\">百度面试</a></li>\n<li><a href=\"http://www.w3cfuns.com/forum.php?spm=5176.100239.blogcont82041.391.jiu0a3&amp;mod=forumdisplay&amp;fid=51&amp;filter=typeid&amp;typeid=177\" data-spm-anchor-id=\"5176.100239.blogcont82041.391\">面试题</a></li>\n<li><a href=\"https://github.com/darcyclarke/Front-end-Developer-Interview-Questions/tree/master/Chinese?spm=5176.100239.blogcont82041.392.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.392\">前端工作面试问题</a></li>\n<li><a href=\"http://segmentfault.com/a/1190000000465431?spm=5176.100239.blogcont82041.393.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.393\">前端开发面试题</a></li>\n<li><a href=\"http://ourjs.com/detail/5%E4%B8%AA%E7%BB%8F%E5%85%B8%E7%9A%84%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98?spm=5176.100239.blogcont82041.394.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.394\">5个经典的前端面试问题</a></li>\n<li><a href=\"http://segmentfault.com/a/1190000002562454?spm=5176.100239.blogcont82041.395.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.395\">最全前端面试问题及答案总结 </a></li>\n<li><a href=\"http://www.html-js.com/article/Large-search-front-team-column%202961?spm=5176.100239.blogcont82041.396.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.396\">如何面试一名前端开发工程师？</a></li>\n<li><a href=\"https://github.com/hawx1993/Front-end-Interview-questions?spm=5176.100239.blogcont82041.397.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.397\">史上最全 前端开发面试问题及答案整理</a></li>\n<li><a href=\"http://www.cnblogs.com/xiaoruo/p/4665163.html?spm=5176.100239.blogcont82041.398.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.398\">前端实习生面试总结 </a></li>\n<li><a href=\"https://github.com/hawx1993/Front-end-Interview-questions?spm=5176.100239.blogcont82041.399.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.399\">史上最全 前端开发面试问题及答案整理</a></li>\n<li><a href=\"http://blog.jobbole.com/78738/?spm=5176.100239.blogcont82041.400.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.400\">BAT及各大互联网公司2014前端笔试面试题：JavaScript篇</a></li>\n<li><a href=\"https://github.com/paddingme/Front-end-Web-Development-Interview-Question?spm=5176.100239.blogcont82041.401.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.401\">前端开发面试题大收集</a></li>\n<li><a href=\"https://github.com/qiu-deqing/FE-interview?spm=5176.100239.blogcont82041.402.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.402\">收集的前端面试题和答案</a></li>\n<li><a href=\"http://www.zhihu.com/question/19568008?spm=5176.100239.blogcont82041.403.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.403\">如何面试前端工程师</a></li>\n<li><a href=\"https://github.com/markyun/My-blog/blob/master/Front-end-Developer-Questions/Questions-and-Answers/README.md?spm=5176.100239.blogcont82041.404.jiu0a3&amp;file=README.md\" data-spm-anchor-id=\"5176.100239.blogcont82041.404\">前端开发面试题</a></li>\n<li><a href=\"http://www.nowcoder.com/discuss?spm=5176.100239.blogcont82041.405.jiu0a3&amp;type=2\" data-spm-anchor-id=\"5176.100239.blogcont82041.405\">牛客网-笔试面经</a></li>\n</ul>\n<h3 id=\"59\">十五. iconfont</h3>\n<ul>\n<li><a href=\"http://www.zhihu.com/question/21253343?spm=5176.100239.blogcont82041.406.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.406\">中文字体</a></li>\n<li><a href=\"http://iconfont.cn?spm=5176.100239.blogcont82041.407.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.407\">淘宝字库</a></li>\n<li><a href=\"http://mux.alimama.com/fonts?spm=5176.100239.blogcont82041.408.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.408\">字体</a></li>\n<li><a href=\"http://iconfont.cn/help/platform.html?spm=5176.100239.blogcont82041.409.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.409\">制作教程</a></li>\n<li><a href=\"http://www.zhangxinxu.com/wordpress/?spm=5176.100239.blogcont82041.410.jiu0a3&amp;s=icomoon\" data-spm-anchor-id=\"5176.100239.blogcont82041.410\">zhangxinxu-icommon</a></li>\n<li><a href=\"https://icomoon.io/app/?spm=5176.100239.blogcont82041.411.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.411\">icommon</a></li>\n<li><a href=\"http://imooc.com/learn/243?spm=5176.100239.blogcont82041.412.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.412\">用字体在网页中画ICON图标(推荐教程)</a></li>\n<li><a href=\"http://font-spider.org/?spm=5176.100239.blogcont82041.413.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.413\">字体压缩工具</a> 感谢初级群　[深圳-小鱼] 的推荐</li>\n</ul>\n<h3 id=\"60\">十六. 开发工具类</h3>\n<ol>\n<li>前端开发工具</li>\n</ol>\n- [IntelliJ IDEA 简体中文专题教程](https://github.com/judasn/IntelliJ-IDEA-Tutorial)\n- [Webstorm,InterllIdea,Phpstorm](http://t.cn/8kZZ1Uy)\n- [SublimeText](https://github.com/jikeytang/sublime-text)\n- [Atom](https://atom.io/)\n- [visual studio code](https://code.visualstudio.com/)\n<ol>\n<li>\n<p>Chrome, Firebug, Filddle 调试</p>\n<ol>\n<li>Fiddler\n<ul>\n<li><a href=\"http://www.cnblogs.com/tugenhua0707/p/4623317.html?spm=5176.100239.blogcont82041.414.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.414\">Fiddler调式使用知多少(一)深入研究</a></li>\n<li><a href=\"http://www.cnblogs.com/strick/p/4570006.html?spm=5176.100239.blogcont82041.415.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.415\">微信fiddle</a></li>\n<li><a href=\"http://gaoboy.com/article/26.html?spm=5176.100239.blogcont82041.416.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.416\">微信fiddle</a></li>\n<li><a href=\"\"></a></li>\n</ul>\n</li>\n<li>Chrome\n<ul>\n<li><a href=\"https://developer.chrome.com/devtools?spm=5176.100239.blogcont82041.417.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.417\">Google Chrome 官方</a></li>\n<li><a href=\"http://www.cnblogs.com/constantince/p/4565261.html?spm=5176.100239.blogcont82041.418.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.418\">Chrome - 基础</a></li>\n<li><a href=\"http://www.cnblogs.com/constantince/p/4579121.html?spm=5176.100239.blogcont82041.419.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.419\">Chrome - 进阶</a></li>\n<li><a href=\"http://www.cnblogs.com/constantince/p/4585983.html?spm=5176.100239.blogcont82041.420.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.420\">Chrome - 性能</a></li>\n<li><a href=\"http://www.cnblogs.com/constantince/p/4607497.html?spm=5176.100239.blogcont82041.421.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.421\">Chrome - 性能进阶</a></li>\n<li><a href=\"http://www.cnblogs.com/constantince/p/4624241.html?spm=5176.100239.blogcont82041.422.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.422\">Chrome - 移动</a></li>\n<li><a href=\"http://www.cnblogs.com/liyunhua/p/4544738.html?spm=5176.100239.blogcont82041.423.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.423\">Chrome - 使用技巧</a></li>\n<li><a href=\"http://www.cnblogs.com/Wayou/p/chrome-console-tips-and-tricks.html?spm=5176.100239.blogcont82041.424.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.424\">Chrome - Console控制台不完全指南</a></li>\n<li><a href=\"http://c7sky.com/chrome-devtools-workspace.html?spm=5176.100239.blogcont82041.425.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.425\">Chrome - Workspace使浏览器变成IDE</a></li>\n<li><a href=\"http://www.html-js.com/article/Nothing-blind%202975?spm=5176.100239.blogcont82041.426.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.426\">network面板</a></li>\n<li><a href=\"http://anti-code.com/devtools-cheatsheet/?spm=5176.100239.blogcont82041.427.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.427\">chrome开发工具快捷键</a></li>\n<li><a href=\"http://www.html-js.com/article/2327?spm=5176.100239.blogcont82041.428.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.428\">chrome调试工具常用功能整理</a></li>\n<li><a href=\"http://www.iinterest.net/2014/05/09/chrome-dev-tool-workspace/?spm=5176.100239.blogcont82041.429.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.429\">Chrome 开发工具 Workspace 使用</a></li>\n<li><a href=\"http://www.cppblog.com/deercoder/archive/2011/10/22/158886.html?spm=5176.100239.blogcont82041.430.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.430\">Chrome神器Vimium快捷键学习记录 </a></li>\n<li><a href=\"http://www.w3cplus.com/sassguide/debug.html?spm=5176.100239.blogcont82041.431.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.431\">sass调试-w3cplus</a></li>\n<li><a href=\"http://www.w3cplus.com/tools/how-to-use-chrome-devtools-like-a-pro.html?spm=5176.100239.blogcont82041.432.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.432\">如何更专业的使用Chrome开发者工具-w3cplus</a></li>\n<li><a href=\"http://sentsin.com/web/253.html?spm=5176.100239.blogcont82041.433.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.433\">chrome调试canvas</a></li>\n<li><a href=\"https://developer.chrome.com/devtools/index?spm=5176.100239.blogcont82041.434.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.434\">chrome profiles1</a></li>\n<li><a href=\"http://h5dev.uc.cn/article-25-1.html?spm=5176.100239.blogcont82041.435.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.435\">chrome profiles2</a></li>\n<li><a href=\"http://www.oschina.net/translate/performance-optimisation-with-timeline-profiles?spm=5176.100239.blogcont82041.436.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.436\">chrome profiles3</a></li>\n<li><a href=\"https://developer.chrome.com/devtools/docs/mobile-emulation?spm=5176.100239.blogcont82041.437.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.437\">chrome移动版调试</a></li>\n<li><a href=\"http://ued.taobao.org/blog/2012/06/debug-with-chrome-dev-tool/?spm=5176.100239.blogcont82041.438.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.438\">chrome调试</a></li>\n<li><a href=\"http://www.cnblogs.com/QLeelulu/archive/2011/08/28/2156402.html?spm=5176.100239.blogcont82041.439.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.439\">chrome的调试</a></li>\n<li><a href=\"https://developer.chrome.com/devtools/docs/commandline-api?spm=5176.100239.blogcont82041.440.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.440\">chrome console 命令详解</a></li>\n<li><a href=\"http://www.cnblogs.com/leonkao/p/3809655.html?spm=5176.100239.blogcont82041.441.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.441\">查看事件绑定1</a></li>\n<li><a href=\"http://www.cnblogs.com/xiaoyao2011/p/3447421.html?spm=5176.100239.blogcont82041.442.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.442\">查看事件绑定2</a></li>\n<li><a href=\"http://segmentfault.com/a/1190000000683599?spm=5176.100239.blogcont82041.443.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.443\">神器——Chrome开发者工具(一)</a></li>\n<li><a href=\"https://xinranliu.me/2015-05-22-qiqu-performance/?spm=5176.100239.blogcont82041.444.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.444\">奇趣百科性能优化(Chrome DevTools 中的 Timeline Profils 等工具使用介绍)</a></li>\n<li><a href=\"http://frontenddev.org/link/15-tips-of-chrome-developer-tools.html?spm=5176.100239.blogcont82041.445.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.445\">chrome 开发者工具的 15 个小技巧</a></li>\n<li><a href=\"http://1ke.co/course/361?spm=5176.100239.blogcont82041.446.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.446\">Chrome开发者工具不完全指南</a></li>\n<li><a href=\"http://segmentfault.com/a/1190000003882567?spm=5176.100239.blogcont82041.447.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.447\">Chrome 开发者工具使用技巧</a></li>\n</ul>\n</li>\n<li>Firebug\n<ul>\n<li><a href=\"http://www.imooc.com/learn/137?spm=5176.100239.blogcont82041.448.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.448\">firebug视频教程</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Tools/WebIDE?spm=5176.100239.blogcont82041.449.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.449\">firefox 模拟器</a></li>\n<li><a href=\"http://www.cnblogs.com/ctriphire/p/4116207.html?spm=5176.100239.blogcont82041.450.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.450\">console.log 命令详解</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2008/06/firebug_tutorial.html?spm=5176.100239.blogcont82041.451.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.451\">Firebug入门指南</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2011/03/firebug_console_tutorial.html?spm=5176.100239.blogcont82041.452.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.452\">Firebug控制台详解</a></li>\n<li><a href=\"\"></a></li>\n</ul>\n</li>\n<li>移动,微信调试\n<ul>\n<li><a href=\"https://openstf.github.io/?spm=5176.100239.blogcont82041.453.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.453\">浏览器端调试安卓</a></li>\n<li><a href=\"http://yujiangshui.com/multidevice-frontend-debug/?spm=5176.100239.blogcont82041.454.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.454\">移动端前端开发调试</a></li>\n<li><a href=\"https://github.com/yujiangshui/CN-Chrome-DevTools/blob/remote-debugging/md/Use-Tools/remote-debugging.md?spm=5176.100239.blogcont82041.455.jiu0a3&amp;file=remote-debugging.md\" data-spm-anchor-id=\"5176.100239.blogcont82041.455\">使用 Chrome 远程调试 Android 设备</a></li>\n<li><a href=\"http://plus.uc.cn/document/webapp/doc5.html?spm=5176.100239.blogcont82041.456.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.456\">mac移动端调试</a></li>\n<li><a href=\"http://www.mihtool.com/?spm=5176.100239.blogcont82041.457.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.457\">mac移动端调试</a></li>\n<li><a href=\"http://thx.github.io/mobile/debugging-in-mobile/?spm=5176.100239.blogcont82041.458.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.458\">无线调试攻略</a></li>\n<li><a href=\"http://yanhaijing.com/mobile/2014/12/17/web-debug-for-mobile/?spm=5176.100239.blogcont82041.459.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.459\">无线调试攻略</a></li>\n<li><a href=\"http://www.jianshu.com/p/ccf124f1f74b?spm=5176.100239.blogcont82041.460.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.460\">屌爆了,完美调试 微信webview(x5)</a></li>\n<li><a href=\"http://liyaodong.com/2015/07/06/%E5%BE%AE%E4%BF%A1%E8%B0%83%E8%AF%95%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/?spm=5176.100239.blogcont82041.461.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.461\">微信调试的那些事</a></li>\n<li><a href=\"http://jsconsole.com/?spm=5176.100239.blogcont82041.462.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.462\">远程console</a></li>\n<li><a href=\"http://blog.qqbrowser.cc/?spm=5176.100239.blogcont82041.463.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.463\">微信调试工具</a></li>\n<li><a href=\"https://github.com/jieyou/remote_inspect_web_on_real_device?spm=5176.100239.blogcont82041.464.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.464\">各种真机远程调试方法汇总</a></li>\n</ul>\n</li>\n<li>iOS Simulator\n<ul>\n<li><a href=\"https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/iOS_Simulator_Guide/Introduction/Introduction.html?spm=5176.100239.blogcont82041.465.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.465\">Simulator</a></li>\n<li><a href=\"http://www.crifan.com/intro_ios_simulator_in_xcode_and_usage_summary/?spm=5176.100239.blogcont82041.466.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.466\">Xcode中的iOS模拟器(iOS Simulator)的介绍和使用心得</a></li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>img</p></li>\n</ol>\n- [loading img](http://preloaders.net/en/circular)\n- [智图-图片优化平台](http://zhitu.isux.us/)\n- [在线png优化](https://tinypng.com/)\n<ol>\n<li>生成二维码</li>\n</ol>\n- [生成二维码](http://cli.im/)\n<ol>\n<li>\n<p>浏览器同步</p>\n<ul>\n<li><a href=\"https://github.com/leeluolee/puer?spm=5176.100239.blogcont82041.467.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.467\">puer</a></li>\n<li><a href=\"http://livereload.com/?spm=5176.100239.blogcont82041.468.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.468\">liveReload</a></li>\n<li><a href=\"http://getf5.com/?spm=5176.100239.blogcont82041.469.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.469\">f5</a></li>\n<li><a href=\"http://geek100.com/2608/?spm=5176.100239.blogcont82041.470.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.470\">File Watchers</a></li>\n</ul>\n</li>\n<li>\n<p>在线PPT制作</p>\n<ul>\n<li><a href=\"http://js8.in/2013/11/16/%E6%8E%A8%E8%8D%90nodeppt%EF%BC%9A%E4%BD%BF%E7%94%A8markdown%E8%AF%AD%E6%B3%95%E6%9D%A5%E5%86%99%E7%BD%91%E9%A1%B5ppt/?spm=5176.100239.blogcont82041.471.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.471\">nodePPT</a></li>\n<li><a href=\"https://github.com/ksky521/nodePPT?spm=5176.100239.blogcont82041.472.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.472\">PPT</a></li>\n<li><a href=\"https://github.com/hakimel/reveal.js/?spm=5176.100239.blogcont82041.473.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.473\">reveal</a></li>\n<li><a href=\"https://github.com/Seldaek/slippy?spm=5176.100239.blogcont82041.474.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.474\">slippy</a></li>\n</ul>\n</li>\n</ol>\n<h3 id=\"61\">十七. 前端导航网站</h3>\n<ul>\n<li><a href=\"http://uxbees.com/index.html?spm=5176.100239.blogcont82041.475.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.475\">界面清爽的前端导航</a></li>\n<li><a href=\"http://whycss.com/?spm=5176.100239.blogcont82041.476.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.476\">前端导航</a></li>\n<li><a href=\"http://www.daqianduan.com/nav?spm=5176.100239.blogcont82041.477.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.477\">前端网址导航</a></li>\n<li><a href=\"http://sentsin.com/daohang/?spm=5176.100239.blogcont82041.478.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.478\">前端名录</a></li>\n<li><a href=\"http://123.jser.us/?spm=5176.100239.blogcont82041.479.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.479\">前端导航</a></li>\n<li><a href=\"http://www.css88.com/nav/?spm=5176.100239.blogcont82041.480.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.480\">前端开发资源</a></li>\n<li><a href=\"http://www.haourl.cn/?spm=5176.100239.blogcont82041.481.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.481\">网址导航</a></li>\n<li><a href=\"http://code.ciaoca.com/?spm=5176.100239.blogcont82041.482.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.482\">前端开发仓库 - 众多效果的收集地</a> </li>\n<li><a href=\"https://github.com/jnoodle/f2e-collect?spm=5176.100239.blogcont82041.483.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.483\">前端资源导航</a></li>\n<li><a href=\"http://f2e.im/static/pages/nav/index.html?spm=5176.100239.blogcont82041.484.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.484\">F2E 前端导航</a></li>\n</ul>\n<h3 id=\"62\">十八. 常用CDN</h3>\n<ul>\n<li><a href=\"http://lib.sinaapp.com/?spm=5176.100239.blogcont82041.485.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.485\">新浪CDN</a></li>\n<li><a href=\"http://cdn.code.baidu.com/?spm=5176.100239.blogcont82041.486.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.486\">百度静态资源公共库</a></li>\n<li><a href=\"http://libs.useso.com/?spm=5176.100239.blogcont82041.487.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.487\">360网站卫士常用前端公共库CDN服务</a></li>\n<li><a href=\"http://www.bootcdn.cn/?spm=5176.100239.blogcont82041.488.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.488\">Bootstrap中文网开源项目免费 CDN 服务</a></li>\n<li><a href=\"http://staticfile.org/?spm=5176.100239.blogcont82041.489.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.489\">开放静态文件 CDN - 七牛</a></li>\n<li><a href=\"http://www.jq22.com/cdn/?spm=5176.100239.blogcont82041.490.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.490\">CDN加速 - jq22</a></li>\n<li><a href=\"http://code.jquery.com/?spm=5176.100239.blogcont82041.491.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.491\">jQuery CDN</a></li>\n<li><a href=\"http://www.google-jquery-cdn.com/?spm=5176.100239.blogcont82041.492.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.492\">Google jQuery CDN</a></li>\n<li><a href=\"http://www.asp.net/ajax/cdn?spm=5176.100239.blogcont82041.493.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.493\">微软CDN</a></li>\n</ul>\n<h3 id=\"63\">十九. Git,SVN,Github</h3>\n<ol>\n<li>Git</li>\n</ol>\n- [git-scm](http://git-scm.com/)\n- [廖雪峰-Git教程](http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000)\n- [git-for-windows](https://git-for-windows.github.io/)\n- [GitHub 添加 SSH keys](http://daemon369.github.io/git/2015/03/10/add-ssh-keys-for-github/)\n- [gogithub](http://www.worldhello.net/gotgithub/index.html)\n- [git常规命令练习](http://pcottle.github.io/learnGitBranching/)\n- [git的资料整理](https://github.com/xirong/my-git)\n- [我所记录的git命令（非常实用）](http://www.cnblogs.com/fanfan259/p/4810517.html)\n- [企业开发git工作流模式探索部分休整](https://github.com/xirong/my-git/blob/master/git-workflow-tutorial.md)\n- [GitHub 漫游指南](https://github.com/phodal/github-roam)\n- [GitHub秘籍](https://github.com/tiimgreen/github-cheat-sheet/blob/master/README.zh-cn.md)\n- [使用git和github进行协同开发流程](http://livoras.com/post/28)\n- [动画方式练习git](http://onlywei.github.io/explain-git-with-d3/)\n\n</div>\n","slug":"前端知识图谱","published":1,"updated":"2017-05-22T06:28:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5naxwcq005ufcxeb27gjioo","content":"<h3 id=\"综合类\"><a href=\"#综合类\" class=\"headerlink\" title=\"综合类\"></a>综合类</h3><ul>\n<li><a href=\"http://www.cnblogs.com/sb19871023/p/3894452.html\" target=\"_blank\" rel=\"external\">前端知识体系</a></li>\n<li><a href=\"https://github.com/JacksonTian/fks\" target=\"_blank\" rel=\"external\">前端知识结构</a></li>\n<li><a href=\"https://github.com/unruledboy/WebFrontEndStack\" target=\"_blank\" rel=\"external\">Web前端开发大系概览</a></li>\n<li><a href=\"http://www.cnblogs.com/unruledboy/p/WebFrontEndStack.html\" target=\"_blank\" rel=\"external\">Web前端开发大系概览-中文版</a></li>\n<li><a href=\"https://raw.githubusercontent.com/unruledboy/WebFrontEndStack/master/Web%20Front%20End%20Stack.png\" target=\"_blank\" rel=\"external\">Web Front-end Stack v2.2</a></li>\n<li><a href=\"https://github.com/justjavac/free-programming-books-zh_CN\" target=\"_blank\" rel=\"external\">免费的编程中文书籍索引</a></li>\n<li><a href=\"https://github.com/dypsilon/frontend-dev-bookmarks\" target=\"_blank\" rel=\"external\">前端书籍</a></li>\n<li><a href=\"https://github.com/vhf/free-programming-books\" target=\"_blank\" rel=\"external\">前端免费书籍大全</a></li>\n<li><a href=\"http://www.cnblogs.com/sb19871023/p/3894452.html\" target=\"_blank\" rel=\"external\">前端知识体系</a></li>\n<li><a href=\"https://github.com/justjavac/free-programming-books-zh_CN\" target=\"_blank\" rel=\"external\">免费的编程中文书籍索引</a></li>\n<li><a href=\"http://study.163.com/course/introduction/224014.htm\" target=\"_blank\" rel=\"external\">智能社 - 精通JavaScript开发</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/A_re-introduction_to_JavaScript\" target=\"_blank\" rel=\"external\">重新介绍 JavaScript（JS 教程）</a></li>\n<li><a href=\"http://v.163.com/special/opencourse/bianchengdaolun.html\" target=\"_blank\" rel=\"external\">麻省理工学院公开课：计算机科学及编程导论</a></li>\n<li><a href=\"http://segmentfault.com/a/1190000002640298\" target=\"_blank\" rel=\"external\">JavaScript中的this陷阱的最全收集–没有之一</a></li>\n<li><a href=\"https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch1.html\" target=\"_blank\" rel=\"external\">JS函数式编程指南</a></li>\n<li><a href=\"http://liubin.github.io/promises-book/\" target=\"_blank\" rel=\"external\">JavaScript Promise迷你书（中文版）</a></li>\n<li><a href=\"https://github.com/AlloyTeam/Mars\" target=\"_blank\" rel=\"external\">腾讯移动Web前端知识库</a></li>\n<li><a href=\"https://github.com/Front-End-Developers-Hunan/Front-End-Develop-Guide\" target=\"_blank\" rel=\"external\">Front-End-Develop-Guide 前端开发指南</a></li>\n<li><a href=\"https://li-xinyang.gitbooks.io/frontend-notebook/content/\" target=\"_blank\" rel=\"external\">前端开发笔记本</a></li>\n<li><a href=\"https://github.com/nieweidong/fetool\" target=\"_blank\" rel=\"external\">大前端工具集 - 聂微东</a></li>\n<li><a href=\"https://dwqs.gitbooks.io/frontenddevhandbook/content/\" target=\"_blank\" rel=\"external\">前端开发者手册</a></li>\n</ul>\n<a id=\"more\"></a>\n<h3 id=\"入门类\"><a href=\"#入门类\" class=\"headerlink\" title=\"入门类\"></a>入门类</h3><ul>\n<li><a href=\"http://www.cnblogs.com/jikey/p/3613082.html\" target=\"_blank\" rel=\"external\">前端入门教程</a></li>\n<li><a href=\"http://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000\" target=\"_blank\" rel=\"external\">瘳雪峰的Javascript教程</a></li>\n<li><a href=\"http://www.imooc.com/view/11\" target=\"_blank\" rel=\"external\">jQuery基础教程</a></li>\n<li><a href=\"http://www.imooc.com/view/506\" target=\"_blank\" rel=\"external\">前端工程师必备的PS技能——切图篇</a></li>\n<li><a href=\"https://github.com/qiu-deqing/FE-learning\" target=\"_blank\" rel=\"external\">结合个人经历总结的前端入门方法</a></li>\n</ul>\n<h3 id=\"效果类\"><a href=\"#效果类\" class=\"headerlink\" title=\"效果类\"></a>效果类</h3><ul>\n<li><a href=\"http://www.imooc.com/learn/58\" target=\"_blank\" rel=\"external\">弹出层</a></li>\n<li><a href=\"http://www.imooc.com/learn/18\" target=\"_blank\" rel=\"external\">焦点图轮播特效</a></li>\n</ul>\n<h3 id=\"工具类\"><a href=\"#工具类\" class=\"headerlink\" title=\"工具类\"></a>工具类</h3><ul>\n<li><a href=\"http://www.imooc.com/learn/93\" target=\"_blank\" rel=\"external\">css sprite 雪碧图制作</a></li>\n<li><a href=\"http://www.imooc.com/learn/390\" target=\"_blank\" rel=\"external\">版本控制入门 – 搬进 Github</a></li>\n<li><a href=\"http://www.imooc.com/learn/30\" target=\"_blank\" rel=\"external\">Grunt-beginner前端自动化工具</a></li>\n</ul>\n<h3 id=\"慕课专题\"><a href=\"#慕课专题\" class=\"headerlink\" title=\"慕课专题\"></a>慕课专题</h3><ul>\n<li><a href=\"http://www.imooc.com/space/teacher/id/197450\" target=\"_blank\" rel=\"external\">张鑫旭 - 慕课系列</a></li>\n<li><a href=\"http://www.imooc.com/space/teacher/id/104593\" target=\"_blank\" rel=\"external\">lyn - 慕课系列</a></li>\n<li><a href=\"http://www.imooc.com/space/teacher/id/290139\" target=\"_blank\" rel=\"external\">艾伦 - 慕课系列</a></li>\n<li><a href=\"http://www.imooc.com/view/494\" target=\"_blank\" rel=\"external\">碧仔 - Hello，移动WEB</a></li>\n</ul>\n<h3 id=\"周报类\"><a href=\"#周报类\" class=\"headerlink\" title=\"周报类\"></a>周报类</h3><ul>\n<li><a href=\"https://github.com/PaicHyperionDev/MobileDevWeekly\" target=\"_blank\" rel=\"external\">平安科技移动开发二队技术周报</a></li>\n</ul>\n<h2 id=\"六-API\"><a href=\"#六-API\" class=\"headerlink\" title=\"六. API:\"></a>六. API:</h2><h3 id=\"总目录\"><a href=\"#总目录\" class=\"headerlink\" title=\"总目录\"></a>总目录</h3><h4 id=\"开发中心\"><a href=\"#开发中心\" class=\"headerlink\" title=\"开发中心\"></a>开发中心</h4><ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript\" target=\"_blank\" rel=\"external\">mozilla js参考</a></li>\n<li><a href=\"https://developer.chrome.com/extensions/api_index.html\" target=\"_blank\" rel=\"external\">chrome开发中心（chrome的内核已转向blink）</a></li>\n<li><a href=\"https://developer.apple.com/library/safari/navigation\" target=\"_blank\" rel=\"external\">safari开发中心</a></li>\n<li><a href=\"https://msdn.microsoft.com/zh-cn/library/d1et7k7c(v=vs.94\" target=\"_blank\" rel=\"external\">microsoft js参考</a>.aspx)</li>\n<li><a href=\"http://sanshi.me/articles/JavaScript-Garden-CN/html/index.html\" target=\"_blank\" rel=\"external\">js秘密花园</a></li>\n<li><a href=\"http://bonsaiden.github.io/JavaScript-Garden/zh/\" target=\"_blank\" rel=\"external\">js秘密花园</a></li>\n<li><a href=\"http://www.w3help.org/\" target=\"_blank\" rel=\"external\">w3help</a> 综合Bug集合网站</li>\n</ul>\n<h4 id=\"综合搜索\"><a href=\"#综合搜索\" class=\"headerlink\" title=\"综合搜索\"></a>综合搜索</h4><ul>\n<li><a href=\"http://www.javascripting.com/\" target=\"_blank\" rel=\"external\">javascripting</a></li>\n<li><a href=\"http://microjs.com/\" target=\"_blank\" rel=\"external\">各种流行库搜索</a></li>\n</ul>\n<h4 id=\"综合API\"><a href=\"#综合API\" class=\"headerlink\" title=\"综合API\"></a>综合API</h4><ul>\n<li><a href=\"http://www.runoob.com/\" target=\"_blank\" rel=\"external\">runoob.com-包含各种API集合</a></li>\n<li><a href=\"http://tool.oschina.net/apidocs\" target=\"_blank\" rel=\"external\">开源中国在线API文档合集</a></li>\n<li><a href=\"http://devdocs.io/\" target=\"_blank\" rel=\"external\">devdocs</a> 英文综合API网站</li>\n</ul>\n<h4 id=\"2-jQuery\"><a href=\"#2-jQuery\" class=\"headerlink\" title=\"2. jQuery\"></a>2. jQuery</h4><p><ul></ul></p>\n<li><a href=\"http://www.jquery123.com/?spm=5176.100239.blogcont82041.18.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.18\" target=\"_blank\" rel=\"external\">jQuery API 中文文档</a></li><br><li><a href=\"http://hemin.cn/jq/?spm=5176.100239.blogcont82041.19.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.19\" target=\"_blank\" rel=\"external\">hemin 在线版</a></li><br><li><a href=\"http://www.css88.com/jqapi-1.9/on/?spm=5176.100239.blogcont82041.20.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.20\" target=\"_blank\" rel=\"external\">css88 jq api</a></li><br><li><a href=\"http://www.css88.com/jquery-ui-api/?spm=5176.100239.blogcont82041.21.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.21\" target=\"_blank\" rel=\"external\">css88 jqui api</a></li><br><li><a href=\"http://learn.jquery.com/?spm=5176.100239.blogcont82041.22.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.22\" target=\"_blank\" rel=\"external\">学习jquery</a></li><br><li><a href=\"http://james.padolsey.com/jquery/?spm=5176.100239.blogcont82041.23.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.23\" target=\"_blank\" rel=\"external\">jquery 源码查找</a></li><br><br><h4 id=\"4\">3. Ecmascript</h4><br><ul><br><li><a href=\"https://leanpub.com/understandinges6/read?spm=5176.100239.blogcont82041.24.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.24\" target=\"_blank\" rel=\"external\">Understanding ECMAScript 6 - Nicholas C. Zakas</a></li><br><li><a href=\"https://leanpub.com/exploring-es6/read?spm=5176.100239.blogcont82041.25.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.25\" target=\"_blank\" rel=\"external\">exploring-es6</a></li><br><li><a href=\"https://github.com/es6-org/exploring-es6?spm=5176.100239.blogcont82041.26.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.26\" target=\"_blank\" rel=\"external\">exploring-es6翻译</a></li><br><li><a href=\"http://es6-org.github.io/exploring-es6/?spm=5176.100239.blogcont82041.27.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.27\" target=\"_blank\" rel=\"external\">exploring-es6翻译后预览</a></li><br><li><a href=\"http://es6.ruanyifeng.com/?spm=5176.100239.blogcont82041.28.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.28\" target=\"_blank\" rel=\"external\">阮一峰 es6</a></li><br><li><a href=\"http://javascript.ruanyifeng.com/?spm=5176.100239.blogcont82041.29.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.29\" target=\"_blank\" rel=\"external\">阮一峰 Javascript</a></li><br><li><a href=\"http://yanhaijing.com/es5/?spm=5176.100239.blogcont82041.30.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.30\" target=\"_blank\" rel=\"external\">ECMA-262，第 5 版</a></li><br><li><a href=\"http://es5.github.io/?spm=5176.100239.blogcont82041.31.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.31\" target=\"_blank\" rel=\"external\">es5</a></li><br></ul><br><h4 id=\"5\">4. Js template</h4><br><ul><br><li><a href=\"http://garann.github.io/template-chooser/?spm=5176.100239.blogcont82041.32.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.32\" target=\"_blank\" rel=\"external\">template-chooser</a></li><br><li><a href=\"https://github.com/aui/artTemplate?spm=5176.100239.blogcont82041.33.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.33\" target=\"_blank\" rel=\"external\">artTemplate</a></li><br><li><a href=\"https://github.com/aui/tmodjs/blob/master/README.md?spm=5176.100239.blogcont82041.34.jiu0a3&amp;file=README.md\" data-spm-anchor-id=\"5176.100239.blogcont82041.34\" target=\"_blank\" rel=\"external\">tomdjs</a></li><br><li><a href=\"http://juicer.name/docs/docs_zh_cn.html?spm=5176.100239.blogcont82041.35.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.35\" target=\"_blank\" rel=\"external\">淘宝模板juicer模板</a></li><br><li><a href=\"http://koen301.github.io/fxtpl/?spm=5176.100239.blogcont82041.36.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.36\" target=\"_blank\" rel=\"external\">Fxtpl v1.0 繁星前端模板引擎</a></li><br><li><a href=\"http://laytpl.layui.com/?spm=5176.100239.blogcont82041.37.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.37\" target=\"_blank\" rel=\"external\">laytpl</a></li><br><li><a href=\"https://github.com/mozilla/nunjucks?spm=5176.100239.blogcont82041.38.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.38\" target=\"_blank\" rel=\"external\">mozilla - nunjucks</a></li><br><li><a href=\"https://github.com/PaulGuo/Juicer?spm=5176.100239.blogcont82041.39.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.39\" target=\"_blank\" rel=\"external\">Juicer</a></li><br><li><a href=\"http://akdubya.github.io/dustjs/?spm=5176.100239.blogcont82041.40.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.40\" target=\"_blank\" rel=\"external\">dustjs</a></li><br><li><a href=\"http://ecomfe.github.io/etpl/?spm=5176.100239.blogcont82041.41.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.41\" target=\"_blank\" rel=\"external\">etpl</a></li><br></ul><br><h4 id=\"6\">5. 弹出层</h4><br><ul><br><li><a href=\"https://github.com/aui/artDialog?spm=5176.100239.blogcont82041.42.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.42\" target=\"_blank\" rel=\"external\">artDialog 最新版</a></li><br><li><a href=\"http://aui.github.io/artDialog/doc/index.html?spm=5176.100239.blogcont82041.43.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.43\" target=\"_blank\" rel=\"external\">artDialog 文档</a></li><br><li><a href=\"https://code.google.com/p/artdialog/downloads/list?spm=5176.100239.blogcont82041.44.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.44\" target=\"_blank\" rel=\"external\">google code 下载地址</a></li><br><li><a href=\"http://layer.layui.com/?spm=5176.100239.blogcont82041.45.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.45\" target=\"_blank\" rel=\"external\">贤心弹出层</a></li><br><li><a href=\"https://github.com/bh-lay/UI?spm=5176.100239.blogcont82041.46.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.46\" target=\"_blank\" rel=\"external\">响应式用户交互组件库</a></li><br><li><a href=\"http://t4t5.github.io/sweetalert/?spm=5176.100239.blogcont82041.47.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.47\" target=\"_blank\" rel=\"external\">sweetalert-有css3动画弹出层</a></li><br></ul><br><h4 id=\"7\">6. CSS</h4><br><ul><br><li><a href=\"http://tympanus.net/codrops/css_reference/?spm=5176.100239.blogcont82041.48.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.48\" target=\"_blank\" rel=\"external\">CSS 语法参考</a></li><br><li><a href=\"http://isux.tencent.com/css3/index.html?spm=5176.100239.blogcont82041.49.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.49\" target=\"_blank\" rel=\"external\">CSS3动画手册</a></li><br><li><a href=\"http://isux.tencent.com/css3/tools.html?spm=5176.100239.blogcont82041.50.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.50\" target=\"_blank\" rel=\"external\">腾讯css3动画制作工具</a></li><br><li><a href=\"http://linxz.github.io/tianyizone/?spm=5176.100239.blogcont82041.51.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.51\" target=\"_blank\" rel=\"external\">志爷css小工具集合</a></li><br><li><a href=\"http://www.note12.com/category/blog/2014-6-5/538fe0a9f786f1b7019a4dfb?spm=5176.100239.blogcont82041.52.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.52\" target=\"_blank\" rel=\"external\">css3 js 移动大杂烩</a></li><br><li><a href=\"http://bouncejs.com/?spm=5176.100239.blogcont82041.53.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.53\" target=\"_blank\" rel=\"external\">bouncejs 触摸库</a></li><br><li><a href=\"http://fian.my.id/Waves/?spm=5176.100239.blogcont82041.54.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.54\" target=\"_blank\" rel=\"external\">css3 按钮动画</a></li><br><li><a href=\"http://daneden.github.io/animate.css/?spm=5176.100239.blogcont82041.55.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.55\" target=\"_blank\" rel=\"external\">animate.css</a></li><br><li><a href=\"http://www.alloyteam.com/2015/10/8536/?spm=5176.100239.blogcont82041.56.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.56\" target=\"_blank\" rel=\"external\">全局CSS的终结(狗带) [译]</a></li><br></ul><br><h4 id=\"8\">7. Angularjs</h4><br><ul><br><li><a href=\"https://github.com/dolymood/AngularLearning?spm=5176.100239.blogcont82041.57.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.57\" target=\"_blank\" rel=\"external\">Angular.js 的一些学习资源</a></li><br><li><a href=\"http://angularjs.cn/?spm=5176.100239.blogcont82041.58.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.58\" target=\"_blank\" rel=\"external\">angularjs中文社区</a></li><br><li><a href=\"http://www.cnblogs.com/xuwenmin888/p/3739096.html?spm=5176.100239.blogcont82041.59.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.59\" target=\"_blank\" rel=\"external\">Angularjs源码学习</a></li><br><li><a href=\"http://www.ifeenan.com/?spm=5176.100239.blogcont82041.60.jiu0a3&amp;c=AngularJS\" data-spm-anchor-id=\"5176.100239.blogcont82041.60\" target=\"_blank\" rel=\"external\">Angularjs源码学习</a></li><br><li><a href=\"http://angular-ui.github.io/bootstrap/?spm=5176.100239.blogcont82041.61.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.61\" target=\"_blank\" rel=\"external\">angular对bootstrap的封装</a></li><br><li><a href=\"https://cnodejs.org/topic/51404e0f069911196d2e3923?spm=5176.100239.blogcont82041.62.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.62\" target=\"_blank\" rel=\"external\">angularjs + nodejs</a></li><br><li><a href=\"http://www.cnblogs.com/lvdabao/tag/AngularJs/?spm=5176.100239.blogcont82041.63.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.63\" target=\"_blank\" rel=\"external\">吕大豹 Angularjs</a></li><br><li><a href=\"http://www.infoq.com/cn/news/2013/02/angular-web-app?spm=5176.100239.blogcont82041.64.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.64\" target=\"_blank\" rel=\"external\">AngularJS 最佳实践</a></li><br><li><a href=\"http://www.lovelucy.info/angularjs-best-practices.html?spm=5176.100239.blogcont82041.65.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.65\" target=\"_blank\" rel=\"external\">Angular的一些扩展指令</a></li><br><li><a href=\"https://github.com/Pasvaz/bindonce?spm=5176.100239.blogcont82041.66.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.66\" target=\"_blank\" rel=\"external\">Angular数据绑定原理</a></li><br><li><a href=\"https://github.com/angular-ui/?spm=5176.100239.blogcont82041.67.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.67\" target=\"_blank\" rel=\"external\">一些扩展Angular UI组件</a></li><br><li><a href=\"http://voidcanvas.com/emberjs-vs-angularjs-performance-testing/?spm=5176.100239.blogcont82041.68.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.68\" target=\"_blank\" rel=\"external\">Ember和AngularJS的性能测试</a></li><br><li><a href=\"http://www.cnblogs.com/powertoolsteam/p/angularjs-introdection.html?spm=5176.100239.blogcont82041.69.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.69\" target=\"_blank\" rel=\"external\">带你走近AngularJS - 基本功能介绍</a></li><br><li><a href=\"http://angular.duapp.com/docs/guide?spm=5176.100239.blogcont82041.70.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.70\" target=\"_blank\" rel=\"external\">Angularjs开发指南</a></li><br><li><a href=\"http://www.cnblogs.com/amosli/p/3710648.html?spm=5176.100239.blogcont82041.71.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.71\" target=\"_blank\" rel=\"external\">Angularjs学习</a></li><br><li><a href=\"http://www.rainweb.cn/article/angularjs-jquery.html?spm=5176.100239.blogcont82041.72.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.72\" target=\"_blank\" rel=\"external\">不要带着jQuery的思维去学习AngularJS</a></li><br><li><a href=\"http://wangjiatao.diandian.com/?spm=5176.100239.blogcont82041.73.jiu0a3&amp;tag=angularjs\" data-spm-anchor-id=\"5176.100239.blogcont82041.73\" target=\"_blank\" rel=\"external\">angularjs 学习笔记</a></li><br><li><a href=\"http://www.angularjs.cn/T008?spm=5176.100239.blogcont82041.74.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.74\" target=\"_blank\" rel=\"external\">angularjs 开发指南</a></li><br><li><a href=\"https://github.com/jmcunningham/AngularJS-Learning?spm=5176.100239.blogcont82041.75.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.75\" target=\"_blank\" rel=\"external\">angularjs 英文资料</a></li><br><li><a href=\"http://angular-ui.github.io/bootstrap/?spm=5176.100239.blogcont82041.76.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.76\" target=\"_blank\" rel=\"external\">angular bootstrap</a></li><br><li><a href=\"https://github.com/opitzconsulting/jquery-mobile-angular-adapter?spm=5176.100239.blogcont82041.77.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.77\" target=\"_blank\" rel=\"external\">angular jq mobile</a></li><br><li><a href=\"http://mgcrea.github.io/angular-strap/?spm=5176.100239.blogcont82041.78.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.78\" target=\"_blank\" rel=\"external\">angular ui</a></li><br><li><a href=\"http://www.tuicool.com/articles/7ZZVr2?spm=5176.100239.blogcont82041.79.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.79\" target=\"_blank\" rel=\"external\">整合jQuery Mobile+AngularJS经验谈</a></li><br><li><a href=\"http://blog.jobbole.com/46589/?spm=5176.100239.blogcont82041.80.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.80\" target=\"_blank\" rel=\"external\">有jQuery背景，该如何用AngularJS编程思想</a></li><br><li><a href=\"http://each.sinaapp.com/angular/?spm=5176.100239.blogcont82041.81.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.81\" target=\"_blank\" rel=\"external\">AngularJS在线教程</a></li><br><li><a href=\"http://www.zouyesheng.com/angular.html?spm=5176.100239.blogcont82041.82.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.82\" target=\"_blank\" rel=\"external\">angular学习笔记</a></li><br></ul><br><h4 id=\"9\">8. React</h4><br><ul><br><li><a href=\"http://www.react-china.org/?spm=5176.100239.blogcont82041.83.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.83\" target=\"_blank\" rel=\"external\">react.js 中文论坛</a></li><br><li><a href=\"https://facebook.github.io/react/index.html?spm=5176.100239.blogcont82041.84.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.84\" target=\"_blank\" rel=\"external\">react.js 官方网址</a></li><br><li><a href=\"https://facebook.github.io/react/docs/getting-started.html?spm=5176.100239.blogcont82041.85.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.85\" target=\"_blank\" rel=\"external\">react.js 官方文档</a></li><br><li><a href=\"http://material-ui.com/?spm=5176.100239.blogcont82041.86.jiu0a3#/\" data-spm-anchor-id=\"5176.100239.blogcont82041.86\" target=\"_blank\" rel=\"external\">react.js material UI</a></li><br><li><a href=\"http://touchstonejs.io/?spm=5176.100239.blogcont82041.87.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.87\" target=\"_blank\" rel=\"external\">react.js TouchstoneJS UI</a></li><br><li><a href=\"http://amazeui.org/react/?spm=5176.100239.blogcont82041.88.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.88\" target=\"_blank\" rel=\"external\">react.js amazeui UI</a></li><br><li><a href=\"http://www.ruanyifeng.com/blog/2015/03/react.html?spm=5176.100239.blogcont82041.89.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.89\" target=\"_blank\" rel=\"external\">React 入门实例教程 - 阮一峰</a></li><br><li><a href=\"http://wiki.jikexueyuan.com/project/react-native/?spm=5176.100239.blogcont82041.90.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.90\" target=\"_blank\" rel=\"external\">React Native 中文版</a></li><br><li><a href=\"http://www.html-js.com/article/Fakefish%203053?spm=5176.100239.blogcont82041.91.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.91\" target=\"_blank\" rel=\"external\">Webpack 和 React 小书 - 前端乱炖</a></li><br><li><a href=\"https://fakefish.github.io/react-webpack-cookbook/?spm=5176.100239.blogcont82041.92.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.92\" target=\"_blank\" rel=\"external\">Webpack 和 React 小书 - gitbook</a></li><br><li><a href=\"https://github.com/webpack/webpack?spm=5176.100239.blogcont82041.93.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.93\" target=\"_blank\" rel=\"external\">webpack</a></li><br><li><a href=\"http://html-js.com/article/3009?spm=5176.100239.blogcont82041.94.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.94\" target=\"_blank\" rel=\"external\">Webpack，101入门体验</a></li><br><li><a href=\"http://html-js.com/article/3113?spm=5176.100239.blogcont82041.95.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.95\" target=\"_blank\" rel=\"external\">webpack入门教程</a></li><br><li><a href=\"http://segmentfault.com/a/1190000003499526?spm=5176.100239.blogcont82041.96.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.96\" target=\"_blank\" rel=\"external\">基于webpack搭建前端工程解决方案探索</a></li><br><li><a href=\"http://www.piliyu.com/?spm=5176.100239.blogcont82041.97.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.97\" target=\"_blank\" rel=\"external\">React原创实战视频教程</a></li><br></ul><br><h4 id=\"10\">9. 移动端API</h4><br><ol><br><li>API<br><ul><br><li><a href=\"https://github.com/jtyjty99999/mobileTech?spm=5176.100239.blogcont82041.98.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.98\" target=\"_blank\" rel=\"external\">99移动端知识集合</a></li><br><li><a href=\"https://github.com/AlloyTeam/Mars?spm=5176.100239.blogcont82041.99.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.99\" target=\"_blank\" rel=\"external\">移动端前端开发知识库</a></li><br><li><a href=\"http://caibaojian.com/mobile-web-bug.html?spm=5176.100239.blogcont82041.100.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.100\" target=\"_blank\" rel=\"external\">移动前端的一些坑和解决方法（外观表现）</a></li><br><li><a href=\"http://www.cnblogs.com/PeunZhang/p/3407453.html?spm=5176.100239.blogcont82041.101.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.101\" target=\"_blank\" rel=\"external\">【原】移动web资源整理</a></li><br><li><a href=\"http://mweb.baidu.com/zeptoapi/?spm=5176.100239.blogcont82041.102.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.102\" target=\"_blank\" rel=\"external\">zepto 1.0 中文手册</a></li><br><li><a href=\"http://www.html-5.cn/Manual/Zepto/?spm=5176.100239.blogcont82041.103.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.103\" target=\"_blank\" rel=\"external\">zepto 1.0 中文手册</a></li><br><li><a href=\"http://www.css88.com/doc/zeptojs_api/?spm=5176.100239.blogcont82041.104.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.104\" target=\"_blank\" rel=\"external\">zepto 1.1.2</a></li><br><li><a href=\"http://www.cnblogs.com/sky000/archive/2013/03/29/2988952.html?spm=5176.100239.blogcont82041.105.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.105\" target=\"_blank\" rel=\"external\">zepto 中文注释</a></li><br><li><a href=\"http://app-framework-software.intel.com/api.php?spm=5176.100239.blogcont82041.106.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.106\" target=\"_blank\" rel=\"external\">jqmobile 手册</a></li><br><li><a href=\"https://github.com/maxzhang/maxzhang.github.com/issues?spm=5176.100239.blogcont82041.107.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.107\" target=\"_blank\" rel=\"external\">移动浏览器开发集合</a></li><br><li><a href=\"https://github.com/hoosin/mobile-web-favorites?spm=5176.100239.blogcont82041.108.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.108\" target=\"_blank\" rel=\"external\">移动开发大杂烩</a></li><br><li><a href=\"http://lin-chao.github.io/2014/11/14/%E5%BE%AE%E4%BF%A1webview%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/?spm=5176.100239.blogcont82041.109.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.109\" target=\"_blank\" rel=\"external\">微信webview中的一些问题</a></li><br></ul><br></li><br>#### 框架<br><li><a href=\"http://framework7.taobao.org/?spm=5176.100239.blogcont82041.110.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.110\" target=\"_blank\" rel=\"external\">特色的HTML框架可以创建精美的iOS应用</a></li><br><li><a href=\"http://m.sui.taobao.org/?spm=5176.100239.blogcont82041.111.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.111\" target=\"_blank\" rel=\"external\">淘宝SUI</a></li><br><br><br></ol><br><h4 id=\"11\">10. avalon</h4><br><ul><br><li><a href=\"http://avalonjs.github.io/?spm=5176.100239.blogcont82041.112.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.112\" target=\"_blank\" rel=\"external\">avalonjs</a></li><br><li><a href=\"http://ued.qunar.com/oniui/index.html?spm=5176.100239.blogcont82041.113.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.113\" target=\"_blank\" rel=\"external\">Avalon新一代UI库： OniUI</a></li><br><li><a href=\"https://github.com/RubyLouvre/avalon.oniui?spm=5176.100239.blogcont82041.114.jiu0a3&amp;file=avalon.oniui\" data-spm-anchor-id=\"5176.100239.blogcont82041.114\" target=\"_blank\" rel=\"external\">avalon.oniui-基于avalon的组件库</a></li><br></ul><br><h4 id=\"12\">11. Requriejs</h4><br><ul><br><li><a href=\"http://www.ruanyifeng.com/blog/2012/10/javascript_module.html?spm=5176.100239.blogcont82041.115.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.115\" target=\"_blank\" rel=\"external\">Javascript模块化编程（一）：模块的写法 </a></li><br><li><a href=\"http://www.ruanyifeng.com/blog/2012/10/asynchronous_module_definition.html?spm=5176.100239.blogcont82041.116.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.116\" target=\"_blank\" rel=\"external\">Javascript模块化编程（二）：AMD规范</a></li><br><li><a href=\"http://www.ruanyifeng.com/blog/2012/11/require_js.html?spm=5176.100239.blogcont82041.117.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.117\" target=\"_blank\" rel=\"external\">Javascript模块化编程（三）：require.js的用法</a></li><br><li><a href=\"http://www.cnblogs.com/snandy/archive/2012/05/22/2513652.html?spm=5176.100239.blogcont82041.118.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.118\" target=\"_blank\" rel=\"external\">RequireJS入门（一）</a></li><br><li><a href=\"http://www.cnblogs.com/snandy/archive/2012/05/23/2513712.html?spm=5176.100239.blogcont82041.119.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.119\" target=\"_blank\" rel=\"external\">RequireJS入门（二）</a></li><br><li><a href=\"http://www.cnblogs.com/snandy/archive/2012/06/08/2538001.html?spm=5176.100239.blogcont82041.120.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.120\" target=\"_blank\" rel=\"external\">RequireJS进阶（三）</a></li><br><li><a href=\"http://www.cnblogs.com/yexiaochai/p/3632580.html?spm=5176.100239.blogcont82041.121.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.121\" target=\"_blank\" rel=\"external\">requrie源码学习</a></li><br><li><a href=\"http://www.oschina.net/translate/getting-started-with-the-requirejs-library?spm=5176.100239.blogcont82041.122.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.122\" target=\"_blank\" rel=\"external\">requrie 入门指南</a></li><br><li><a href=\"http://www.cnblogs.com/yexiaochai/p/3214926.html?spm=5176.100239.blogcont82041.123.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.123\" target=\"_blank\" rel=\"external\">requrieJS 学习笔记</a></li><br><li><a href=\"http://cyj.me/why-seajs/requirejs/?spm=5176.100239.blogcont82041.124.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.124\" target=\"_blank\" rel=\"external\">requriejs 其一 </a></li><br><li><a href=\"http://www.cnblogs.com/yexiaochai/p/3221081.html?spm=5176.100239.blogcont82041.125.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.125\" target=\"_blank\" rel=\"external\">require backbone结合</a></li><br></ul><br><h4 id=\"13\">12. Seajs</h4><br><ul><br><li><a href=\"http://seajs.org/?spm=5176.100239.blogcont82041.126.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.126\" target=\"_blank\" rel=\"external\">seajs</a></li><br><li><a href=\"http://cyj.me/why-seajs/zh/?spm=5176.100239.blogcont82041.127.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.127\" target=\"_blank\" rel=\"external\">seajs 中文手册</a></li><br></ul><br><h4 id=\"14\">13. Less,sass</h4><br><ul><br><li><a href=\"http://www.w3cplus.com/sassguide/?spm=5176.100239.blogcont82041.128.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.128\" target=\"_blank\" rel=\"external\">sass</a></li><br><li><a href=\"http://www.sass.hk/?spm=5176.100239.blogcont82041.129.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.129\" target=\"_blank\" rel=\"external\">sass教程-sass中国</a></li><br><li><a href=\"http://sass.bootcss.com/?spm=5176.100239.blogcont82041.130.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.130\" target=\"_blank\" rel=\"external\">Sass 中文文档</a></li><br><li><a href=\"http://less.bootcss.com/?spm=5176.100239.blogcont82041.131.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.131\" target=\"_blank\" rel=\"external\">less</a></li><br></ul><br><h4 id=\"15\">14. Markdown</h4><br><ul><br><li><a href=\"http://wowubuntu.com/markdown/?spm=5176.100239.blogcont82041.132.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.132\" target=\"_blank\" rel=\"external\">Markdown 语法说明 (简体中文版)</a></li><br><li><a href=\"https://github.com/LearnShare/Learning-Markdown/blob/master/README.md?spm=5176.100239.blogcont82041.133.jiu0a3&amp;file=README.md\" data-spm-anchor-id=\"5176.100239.blogcont82041.133\" target=\"_blank\" rel=\"external\">markdown入门参考</a></li><br><li><a href=\"https://www.gitbook.com/?spm=5176.100239.blogcont82041.134.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.134\" target=\"_blank\" rel=\"external\">gitbook国外的在线markdown可编辑成书</a></li><br><li><a href=\"https://www.zybuluo.com/mdeditor?spm=5176.100239.blogcont82041.135.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.135\" target=\"_blank\" rel=\"external\">mdeditor  一款国内的在线markdown编辑器</a></li><br><li><a href=\"https://stackedit.io?spm=5176.100239.blogcont82041.136.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.136\" target=\"_blank\" rel=\"external\">stackedit国外的在线markdown编辑器，功能强大，同步云盘</a> </li><br><li><a href=\"http://bh-lay.github.io/mditor/?spm=5176.100239.blogcont82041.137.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.137\" target=\"_blank\" rel=\"external\">mditor</a> 一款轻量级的markdown编辑器</li><br><li><a href=\"https://github.com/lepture/editor?spm=5176.100239.blogcont82041.138.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.138\" target=\"_blank\" rel=\"external\">lepture-editor</a></li><br><li><a href=\"https://github.com/jbt/markdown-editor?spm=5176.100239.blogcont82041.139.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.139\" target=\"_blank\" rel=\"external\">markdown-editor</a></li><br></ul><br><h4 id=\"16\">15. D3</h4><br><ul><br><li><a href=\"https://github.com/mbostock/d3/wiki/Tutorials?spm=5176.100239.blogcont82041.140.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.140\" target=\"_blank\" rel=\"external\">d3 Tutorials</a></li><br><li><a href=\"https://github.com/mbostock/d3/wiki/Gallery?spm=5176.100239.blogcont82041.141.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.141\" target=\"_blank\" rel=\"external\">Gallery</a></li><br><li><a href=\"http://datavisual.lofter.com/post/40cf3a_188e535?spm=5176.100239.blogcont82041.142.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.142\" target=\"_blank\" rel=\"external\">lofter</a></li><br><li><a href=\"http://alanland.iteye.com/blog/1878595?spm=5176.100239.blogcont82041.143.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.143\" target=\"_blank\" rel=\"external\">iteye</a></li><br><li><a href=\"http://javascript.ruanyifeng.com/library/d3.html?spm=5176.100239.blogcont82041.144.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.144\" target=\"_blank\" rel=\"external\">ruanyifeng</a></li><br></ul><br><h4 id=\"17\">16. 兼容性</h4><br><ul><br><li><a href=\"http://kangax.github.io/compat-table/es6/?spm=5176.100239.blogcont82041.145.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.145\" target=\"_blank\" rel=\"external\">esma 兼容列表</a></li><br><li><a href=\"http://jigsaw.w3.org/css-validator/validator.html.zh-cn?spm=5176.100239.blogcont82041.146.jiu0a3&amp;file=validator.html.zh-cn\" data-spm-anchor-id=\"5176.100239.blogcont82041.146\" target=\"_blank\" rel=\"external\">W3C CSS验证服务</a></li><br><li><a href=\"http://caniuse.com/?spm=5176.100239.blogcont82041.147.jiu0a3#index\" data-spm-anchor-id=\"5176.100239.blogcont82041.147\" target=\"_blank\" rel=\"external\">caniuse</a></li><br><li><a href=\"http://csscreator.com/properties?spm=5176.100239.blogcont82041.148.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.148\" target=\"_blank\" rel=\"external\">csscreator</a></li><br><li><br><a href=\"https://msdn.microsoft.com/zh-cn/library/cc351024(v=vs.85?spm=5176.100239.blogcont82041.149.jiu0a3&amp;file=cc351024(v=vs.85\" data-spm-anchor-id=\"5176.100239.blogcont82041.149\" target=\"_blank\" rel=\"external\">microsoft</a>.aspx)</li><br><li><a href=\"http://www.responsinator.com/?spm=5176.100239.blogcont82041.150.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.150\" target=\"_blank\" rel=\"external\">在线测兼容-移动端</a></li><br><li><a href=\"https://www.manymo.com/emulators?spm=5176.100239.blogcont82041.151.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.151\" target=\"_blank\" rel=\"external\">emulators</a></li><br></ul><br><h4 id=\"18\">17. UI相关</h4><br><ul><br><li><a href=\"http://v3.bootcss.com/?spm=5176.100239.blogcont82041.152.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.152\" target=\"_blank\" rel=\"external\">bootcss</a></li><br><li><a href=\"http://www.w3cplus.com/MetroUICSS/?spm=5176.100239.blogcont82041.153.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.153\" target=\"_blank\" rel=\"external\">MetroUICSS</a></li><br><li><a href=\"http://semantic-ui.com/?spm=5176.100239.blogcont82041.154.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.154\" target=\"_blank\" rel=\"external\">semantic</a></li><br><li><a href=\"http://alexwolfe.github.io/Buttons/?spm=5176.100239.blogcont82041.155.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.155\" target=\"_blank\" rel=\"external\">Buttons</a></li><br><li><a href=\"http://hiloki.github.io/kitecss/?spm=5176.100239.blogcont82041.156.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.156\" target=\"_blank\" rel=\"external\">kitecss</a></li><br><li><a href=\"http://www.pintuer.com/?spm=5176.100239.blogcont82041.157.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.157\" target=\"_blank\" rel=\"external\">pintuer</a></li><br><li><a href=\"http://amazeui.org/?spm=5176.100239.blogcont82041.158.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.158\" target=\"_blank\" rel=\"external\">amazeui</a></li><br><li><a href=\"http://www.worldhello.net/gotgithub/index.html?spm=5176.100239.blogcont82041.159.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.159\" target=\"_blank\" rel=\"external\">worldhello</a></li><br><li><a href=\"http://igit.linuxtoy.org/contents.html?spm=5176.100239.blogcont82041.160.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.160\" target=\"_blank\" rel=\"external\">linuxtoy</a></li><br><li><a href=\"http://www-cs-students.stanford.edu/~blynn/gitmagic/intl/zh_cn/?spm=5176.100239.blogcont82041.161.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.161\" target=\"_blank\" rel=\"external\">gitmagic</a></li><br><li><a href=\"http://rogerdudler.github.io/git-guide/index.zh.html?spm=5176.100239.blogcont82041.162.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.162\" target=\"_blank\" rel=\"external\">rogerdudler</a></li><br><li><a href=\"http://gitref.justjavac.com/?spm=5176.100239.blogcont82041.163.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.163\" target=\"_blank\" rel=\"external\">gitref</a></li><br><li><a href=\"http://git-scm.com/book/zh?spm=5176.100239.blogcont82041.164.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.164\" target=\"_blank\" rel=\"external\">book</a></li><br><li><a href=\"http://gogojimmy.net/2012/01/17/how-to-use-git-1-git-basic/?spm=5176.100239.blogcont82041.165.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.165\" target=\"_blank\" rel=\"external\">gogojimmy</a></li><br></ul><br><h4 id=\"19\">18. HTTP</h4><br><ul><br><li><a href=\"http://segmentfault.com/bookmark/1230000002521721?spm=5176.100239.blogcont82041.166.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.166\" target=\"_blank\" rel=\"external\">HTTP API 设计指南</a></li><br></ul><br><h4 id=\"20\">19. 其它API</h4><br><ul><br><li><a href=\"javascriptoo?spm=5176.100239.blogcont82041.167.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.167\">javascript流行库汇总</a></li><br><li><a href=\"http://niceue.com/validator/demo/index.php?spm=5176.100239.blogcont82041.168.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.168\" target=\"_blank\" rel=\"external\">验证api</a></li><br><li><a href=\"http://www.css88.com/doc/underscore/?spm=5176.100239.blogcont82041.169.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.169\" target=\"_blank\" rel=\"external\">underscore 中文手册</a></li><br><li><a href=\"http://www.html-js.com/article/Underscorejs-source-code-analysis-of-underscorejs-source-code-analysis%203031?spm=5176.100239.blogcont82041.170.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.170\" target=\"_blank\" rel=\"external\">underscore源码分析</a></li><br><li><a href=\"http://yalishizhude.github.io/tags/underscore/?spm=5176.100239.blogcont82041.171.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.171\" target=\"_blank\" rel=\"external\">underscore源码分析-亚里士朱德的博客</a></li><br><li><a href=\"http://underscorejs.org/?spm=5176.100239.blogcont82041.172.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.172\" target=\"_blank\" rel=\"external\">underscrejs en api</a></li><br><li><a href=\"https://lodash.com/?spm=5176.100239.blogcont82041.173.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.173\" target=\"_blank\" rel=\"external\">lodash - underscore的代替品</a></li><br><li><a href=\"http://extjs-doc-cn.github.io/ext4api/?spm=5176.100239.blogcont82041.174.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.174\" target=\"_blank\" rel=\"external\">ext4api</a></li><br><li><a href=\"http://www.csser.com/tools/backbone/backbone.js.html?spm=5176.100239.blogcont82041.175.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.175\" target=\"_blank\" rel=\"external\">backbone 中文手册</a></li><br><li><a href=\"http://dev.qwrap.com/resource/js/_docs/_youa/?spm=5176.100239.blogcont82041.176.jiu0a3#/qw/base/loadJs_.htm\" data-spm-anchor-id=\"5176.100239.blogcont82041.176\" target=\"_blank\" rel=\"external\">qwrap手册</a></li><br><li><a href=\"http://easings.net/zh-cn?spm=5176.100239.blogcont82041.177.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.177\" target=\"_blank\" rel=\"external\">缓动函数</a></li><br><li><a href=\"http://www.w3school.com.cn/svg/svg_reference.asp?spm=5176.100239.blogcont82041.178.jiu0a3&amp;file=svg_reference.asp\" data-spm-anchor-id=\"5176.100239.blogcont82041.178\" target=\"_blank\" rel=\"external\">svg 中文参考</a></li><br><li><a href=\"https://developer.mozilla.org/en-US/docs/Web/SVG?spm=5176.100239.blogcont82041.179.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.179\" target=\"_blank\" rel=\"external\">svg mdn参考</a></li><br><li><a href=\"https://github.com/gabelerner/canvg?spm=5176.100239.blogcont82041.180.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.180\" target=\"_blank\" rel=\"external\">svg 导出 canvas</a></li><br><li><a href=\"https://github.com/exupero/saveSvgAsPng?spm=5176.100239.blogcont82041.181.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.181\" target=\"_blank\" rel=\"external\">svg 导出 png</a></li><br><li><a href=\"http://www.zamzar.com/convert/ai-to-svg/?spm=5176.100239.blogcont82041.182.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.182\" target=\"_blank\" rel=\"external\">ai-to-svg</a></li><br><li><a href=\"https://github.com/machao/localStorage?spm=5176.100239.blogcont82041.183.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.183\" target=\"_blank\" rel=\"external\">localStorage 库</a></li><br></ul><br><h4 id=\"21\">20. 图表类</h4><br><ul><br><li><a href=\"http://www.hcharts.cn/api/index.php?spm=5176.100239.blogcont82041.184.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.184\" target=\"_blank\" rel=\"external\">Highcharts 中文API</a></li><br><li><a href=\"http://api.highcharts.com/highcharts?spm=5176.100239.blogcont82041.185.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.185\" target=\"_blank\" rel=\"external\">Highcharts 英文API</a></li><br><li><a href=\"http://echarts.baidu.com/?spm=5176.100239.blogcont82041.186.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.186\" target=\"_blank\" rel=\"external\">ECharts 百度的图表软件</a></li><br><li><a href=\"http://lbs.amap.com/api/?spm=5176.100239.blogcont82041.187.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.187\" target=\"_blank\" rel=\"external\">高德地图</a></li><br><li><a href=\"http://paperjs.org/?spm=5176.100239.blogcont82041.188.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.188\" target=\"_blank\" rel=\"external\">开源的矢量图脚本框架</a></li><br><li><a href=\"http://jvectormap.com/?spm=5176.100239.blogcont82041.189.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.189\" target=\"_blank\" rel=\"external\">svg 地图</a></li><br></ul><br><h4 id=\"22\">21. vue</h4><br><ul><br><li><a href=\"http://cn.vuejs.org/?spm=5176.100239.blogcont82041.190.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.190\" target=\"_blank\" rel=\"external\">Vue</a></li><br><li><a href=\"http://forum.vuejs.org/?spm=5176.100239.blogcont82041.191.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.191\" target=\"_blank\" rel=\"external\">Vue 论坛</a></li><br><li><a href=\"http://www.cnblogs.com/aaronjs/p/3660102.html?spm=5176.100239.blogcont82041.192.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.192\" target=\"_blank\" rel=\"external\">Vue 入门指南</a></li><br><li><a href=\"http://segmentfault.com/a/1190000000411057?spm=5176.100239.blogcont82041.193.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.193\" target=\"_blank\" rel=\"external\">Vue 的一些资源索引</a></li>\n\n<p></p></ul><p></p>\n<p></p><h4 id=\"23\">21. 正则</h4><p></p>\n<p><ul></ul></p>\n<li><a href=\"http://segmentfault.com/a/1190000002471140?spm=5176.100239.blogcont82041.194.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.194\" target=\"_blank\" rel=\"external\">JS正则表达式元字符</a></li><br><li><a href=\"http://deerchao.net/tutorials/regex/regex.htm?spm=5176.100239.blogcont82041.195.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.195\" target=\"_blank\" rel=\"external\">正则表达式30分钟入门教程</a></li><br><li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions?spm=5176.100239.blogcont82041.196.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.196\" target=\"_blank\" rel=\"external\">MDN-正则表达式</a></li><br><li><a href=\"http://javascript.ruanyifeng.com/stdlib/regexp.html?spm=5176.100239.blogcont82041.197.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.197\" target=\"_blank\" rel=\"external\">ruanyifeng - RegExp对象</a></li><br><li><a href=\"http://div.io/topic/764?spm=5176.100239.blogcont82041.198.jiu0a3&amp;page=1\" data-spm-anchor-id=\"5176.100239.blogcont82041.198\" target=\"_blank\" rel=\"external\">小胡子哥 - 进阶正则表达式</a></li><br><li><a href=\"https://github.com/Cedriking/is.js/blob/master/is.js?spm=5176.100239.blogcont82041.199.jiu0a3&amp;file=is.js\" data-spm-anchor-id=\"5176.100239.blogcont82041.199\" target=\"_blank\" rel=\"external\">is.js</a></li><br><li><a href=\"http://regexper.com/?spm=5176.100239.blogcont82041.200.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.200\" target=\"_blank\" rel=\"external\">正则在线测试</a></li>\n\n<p></p>\n<p></p><h4 id=\"24\">22. ionic</h4><p></p>\n<p><ul></ul></p>\n<li><a href=\"https://github.com/ychow/ionic-guide?spm=5176.100239.blogcont82041.201.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.201\" target=\"_blank\" rel=\"external\">ionic</a></li><br><br><h4 id=\"25\">23. 其它</h4><br><ul><br><li><a href=\"http://mockjs.com/?spm=5176.100239.blogcont82041.202.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.202\" target=\"_blank\" rel=\"external\">Mock.js 是一款模拟数据生成器</a></li><br></ul><br>### 七. 开发规范<br><ol><br><li><br><p>前端</p><br><ul><br><li><a href=\"http://alloyteam.github.io/CodeGuide?spm=5176.100239.blogcont82041.203.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.203\" target=\"_blank\" rel=\"external\">通过分析github代码库总结出来的工程师代码书写习惯</a></li><br><li><a href=\"http://codeguide.bootcss.com/?spm=5176.100239.blogcont82041.204.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.204\" target=\"_blank\" rel=\"external\">HTML&amp;CSS编码规范 by @mdo</a></li><br><li><a href=\"http://www.alloyteam.com/2011/10/107/?spm=5176.100239.blogcont82041.205.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.205\" target=\"_blank\" rel=\"external\">团队合作的css命名规范-腾讯AlloyTeam前端团队</a></li><br><li><a href=\"http://yuwenhui.github.io/?spm=5176.100239.blogcont82041.206.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.206\" target=\"_blank\" rel=\"external\">前端编码规范之js - by yuwenhui</a></li><br><li><a href=\"http://www.cnblogs.com/hustskyking/p/javascript-spec.html?spm=5176.100239.blogcont82041.207.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.207\" target=\"_blank\" rel=\"external\">前端编码规范之js - by 李靖</a></li><br><li><a href=\"http://zhibimo.com/read/Ashu/front-end-style-guide/?spm=5176.100239.blogcont82041.208.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.208\" target=\"_blank\" rel=\"external\">前端开发规范手册</a></li><br><li><a href=\"https://github.com/yuche/javascript?spm=5176.100239.blogcont82041.209.jiu0a3#table-of-contents\" data-spm-anchor-id=\"5176.100239.blogcont82041.209\" target=\"_blank\" rel=\"external\">Airbnb JavaScript 编码规范（简体中文版）</a></li><br><li><a href=\"http://www.zhihu.com/question/20351507?spm=5176.100239.blogcont82041.210.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.210\" target=\"_blank\" rel=\"external\">AMD与CMD规范的区别</a></li><br><li><a href=\"http://www.cnblogs.com/tugenhua0707/p/3507957.html?spm=5176.100239.blogcont82041.211.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.211\" target=\"_blank\" rel=\"external\">AMD与CMD规范的区别</a></li><br><li><a href=\"http://docs.kissyui.com/1.4/docs/html/tutorials/style-guide/kissy-source-style.html?spm=5176.100239.blogcont82041.212.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.212\" target=\"_blank\" rel=\"external\">KISSY 源码规范</a></li><br><li><a href=\"http://codeguide.bootcss.com/?spm=5176.100239.blogcont82041.213.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.213\" target=\"_blank\" rel=\"external\">bt编码规范</a></li><br><li><a href=\"https://github.com/Suxiaogang/Code_Guide?spm=5176.100239.blogcont82041.214.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.214\" target=\"_blank\" rel=\"external\">规范加强版</a></li><br><li><a href=\"http://blog.jobbole.com/79075/?spm=5176.100239.blogcont82041.215.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.215\" target=\"_blank\" rel=\"external\">前端代码规范 及 最佳实践</a></li><br><li><a href=\"http://coderlmn.github.io/code-standards/?spm=5176.100239.blogcont82041.216.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.216\" target=\"_blank\" rel=\"external\">百度前端规范</a></li><br><li><a href=\"http://isobar-idev.github.io/code-standards/?spm=5176.100239.blogcont82041.217.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.217\" target=\"_blank\" rel=\"external\">百度前端规范</a></li><br><li><a href=\"http://zhuanlan.zhihu.com/fuyun/19884834?spm=5176.100239.blogcont82041.218.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.218\" target=\"_blank\" rel=\"external\">百度前端规范</a></li><br><li><a href=\"https://github.com/gf-rd/es6-coding-style?spm=5176.100239.blogcont82041.219.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.219\" target=\"_blank\" rel=\"external\">ECMAScript6 编码规范–广发证券前端团队</a></li><br><li><a href=\"http://blog.jobbole.com/79484/?spm=5176.100239.blogcont82041.220.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.220\" target=\"_blank\" rel=\"external\">JavaScript 风格指南/编码规范（Airbnb公司版）</a></li><br><li><a href=\"http://nec.netease.com/standard?spm=5176.100239.blogcont82041.221.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.221\" target=\"_blank\" rel=\"external\">网易前端开发规范</a></li><br><li><a href=\"http://www.75team.com/archives/1049?spm=5176.100239.blogcont82041.222.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.222\" target=\"_blank\" rel=\"external\">css模块</a></li><br><li><a href=\"https://github.com/ecomfe/spec?spm=5176.100239.blogcont82041.223.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.223\" target=\"_blank\" rel=\"external\">前端规范资源列表</a></li><br></ul><br></li><br>#### PHP<br>- <a href=\"http://segmentfault.com/a/1190000000443795\" target=\"_blank\" rel=\"external\">最流行的PHP 代码规范</a><br>- <a href=\"https://github.com/hfcorriez/fig-standards/blob/zh_CN/%E6%8E%A5%E5%8F%97/PSR-2-coding-style-guide.md\" target=\"_blank\" rel=\"external\">最流行的PHP 代码规范</a><br><br>#### Android<br>- <a href=\"http://www.cnblogs.com/lcw/p/3619181.html\" target=\"_blank\" rel=\"external\">【敏捷开发】Android团队开发规范</a><br>- <a href=\"http://www.jianshu.com/p/4390f4fe19b3\" target=\"_blank\" rel=\"external\">Android 开发规范与应用</a><br>## 八. 其它收集<br>### 1. 各大公司开源项目<br><ul><br><li><a href=\"https://code.facebook.com/projects/web/?spm=5176.100239.blogcont82041.224.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.224\" target=\"_blank\" rel=\"external\">Facebook Projects</a></li><br><li><a href=\"http://fex.baidu.com/?spm=5176.100239.blogcont82041.225.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.225\" target=\"_blank\" rel=\"external\">百度web前端研发部</a></li><br><li><a href=\"http://efe.baidu.com/?spm=5176.100239.blogcont82041.226.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.226\" target=\"_blank\" rel=\"external\">百度EFE</a></li><br><li><a href=\"https://github.com/fex-team/?spm=5176.100239.blogcont82041.227.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.227\" target=\"_blank\" rel=\"external\">百度github</a></li><br><li><a href=\"http://www.alloyteam.com/?spm=5176.100239.blogcont82041.228.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.228\" target=\"_blank\" rel=\"external\">alloyteam</a></li><br><li><a href=\"http://alloyteam.github.io/?spm=5176.100239.blogcont82041.229.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.229\" target=\"_blank\" rel=\"external\">alloyteam-github</a></li><br><li><a href=\"https://github.com/AlloyTeam/AlloyGameEngine?spm=5176.100239.blogcont82041.230.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.230\" target=\"_blank\" rel=\"external\">alloyteam-AlloyGameEngine</a></li><br><li><a href=\"http://alloyteam.github.io/AlloyDesigner/?spm=5176.100239.blogcont82041.231.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.231\" target=\"_blank\" rel=\"external\">AlloyDesigner</a> 即时修改，即时保存，设计稿较正，其它开发辅助工具</li><br><li><a href=\"http://www.alloyteam.com/2015/06/h5-jiao-hu-ye-bian-ji-qi-aeditor-jie-shao/?spm=5176.100239.blogcont82041.232.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.232\" target=\"_blank\" rel=\"external\">H5交互页编辑器AEditor介绍</a> H5动画交互页开发的工具介绍</li><br><li><a href=\"http://aeditor.alloyteam.com/?spm=5176.100239.blogcont82041.233.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.233\" target=\"_blank\" rel=\"external\">AEditor</a> H5动画交互页开发的工具</li><br><li><a href=\"http://forum.maka.im/wordpress/?spm=5176.100239.blogcont82041.234.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.234\" target=\"_blank\" rel=\"external\">maka</a></li><br><li><a href=\"https://github.com/fenbility/weekly-feed?spm=5176.100239.blogcont82041.235.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.235\" target=\"_blank\" rel=\"external\">值得订阅的weekly</a></li><br><li><a href=\"http://cube.qq.com/?spm=5176.100239.blogcont82041.236.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.236\" target=\"_blank\" rel=\"external\">腾讯html5</a></li><br><li><a href=\"http://75team.github.io/?spm=5176.100239.blogcont82041.237.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.237\" target=\"_blank\" rel=\"external\">奇舞团开源项目</a></li><br><li><a href=\"http://ued.qunar.com/?spm=5176.100239.blogcont82041.238.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.238\" target=\"_blank\" rel=\"external\">Qunar UED</a></li><br></ul><br>### 2. Javascript<br>#### 常用<br>- <a href=\"http://www.zhangxinxu.com/wordpress/2013/12/iebetter-js-make-ie6-ie8-like-modern-browser-ie9-chrome/\" target=\"_blank\" rel=\"external\">ieBetter.js-让IE6-IE8拥有IE9+,Chrome等浏览器特性</a><br>- <a href=\"http://mottie.github.io/Keyboard/\" target=\"_blank\" rel=\"external\">模拟键盘</a><br>- <a href=\"https://github.com/hotoo/pinyin\" target=\"_blank\" rel=\"external\">拼音</a><br>- <a href=\"https://github.com/mc-zone/IDValidator\" target=\"_blank\" rel=\"external\">中国个人身份证号验证</a><br>#### 算法<br>- <a href=\"https://github.com/Ralph-Wang/algorithm.in.js\" target=\"_blank\" rel=\"external\">数据结构与算法 JavaScript 描述. 章节练习</a><br>- <a href=\"https://github.com/twobin/twobinSort\" target=\"_blank\" rel=\"external\">常见排序算法（JS版）</a><br>- <a href=\"https://github.com/luofei2011/jsAgm/blob/master/js/sort.js\" target=\"_blank\" rel=\"external\">经典排序</a><br>- <a href=\"https://github.com/hechangmin/jssort\" target=\"_blank\" rel=\"external\">常见排序算法-js版本</a><br>- <a href=\"https://github.com/lightningtgc/JavaScript-Algorithms\" target=\"_blank\" rel=\"external\">JavaScript 算法与数据结构 精华集</a><br>- <a href=\"http://www.nowcoder.com/live/courses\" target=\"_blank\" rel=\"external\">面试常考算法题精讲</a><br>- <a href=\"\"></a><br>#### 移动端<br>- <a href=\"https://github.com/ftlabs/fastclick\" target=\"_blank\" rel=\"external\">fastclick</a><br>- <a href=\"https://github.com/mmastrac/jquery-noclickdelay\" target=\"_blank\" rel=\"external\">no-click-delay</a><br>#### JSON<br>- <a href=\"http://beta.json-generator.com/\" target=\"_blank\" rel=\"external\">模拟生成JSON数据</a><br>- <a href=\"http://jsonp.afeld.me/\" target=\"_blank\" rel=\"external\">返回跨域JSONAPI</a><br>### 3. Html5<br><ul><br><li><a href=\"http://www.zhihu.com/question/24398907?spm=5176.100239.blogcont82041.239.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.239\" target=\"_blank\" rel=\"external\">HTML5 有哪些让你惊艳的 demo？</a></li><br></ul><br>### 4. CSS<br><ul><br><li><a href=\"http://browserhacks.com/?spm=5176.100239.blogcont82041.240.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.240\" target=\"_blank\" rel=\"external\">browserhacks</a></li>\n\n<p></p></ul><p></p>\n<h3 id=\"5-jQuery\"><a href=\"#5-jQuery\" class=\"headerlink\" title=\"5. jQuery\"></a>5. jQuery</h3><p><ol></ol></p>\n<li>焦点图</li><br></ol><br>- <a href=\"https://github.com/koen301/myfocus\" target=\"_blank\" rel=\"external\">myfocus</a><br>- <a href=\"http://www.chhua.com/myfocus/\" target=\"_blank\" rel=\"external\">myfocus-官方演示站</a><br>- <a href=\"http://www.superslide2.com/\" target=\"_blank\" rel=\"external\">SuperSlidev2.1 – 大话主席</a><br>- <a href=\"http://www.bujichong.com/sojs/soChange/index.html\" target=\"_blank\" rel=\"external\">soChange</a><br>### 6. Ext, EasyUI, J-UI 及其它各种UI方案<br>#### Ext<br>- <a href=\"https://www.sencha.com/products/extjs/\" target=\"_blank\" rel=\"external\">extjs</a><br>- <a href=\"http://docs.sencha.com/extjs/4.0.7/\" target=\"_blank\" rel=\"external\">ext4英文api</a><br>- <a href=\"http://extjs-doc-cn.github.io/ext4api/\" target=\"_blank\" rel=\"external\">ext4中文api</a><br>- <a href=\"\"></a><br>#### EasyUI<br>- <a href=\"http://jquery-easyui.googlecode.com/svn/trunk/src/\" target=\"_blank\" rel=\"external\">jquery easyui 未压缩源代码</a><br>#### J-UI<br>- <a href=\"http://jui.org/\" target=\"_blank\" rel=\"external\">J-UI</a><br>#### Other<br>- <a href=\"http://dcloudio.github.io/mui/\" target=\"_blank\" rel=\"external\">MUI-最接近原生APP体验的高性能前端框架</a><br>- <a href=\"http://amazeui.org/\" target=\"_blank\" rel=\"external\">Amaze UI | 中国首个开源 HTML5 跨屏前端框架</a><br>- <a href=\"http://m.sui.taobao.org/\" target=\"_blank\" rel=\"external\">淘宝 HTML5 前端框架</a><br>- <a href=\"http://docs.kissyui.com/\" target=\"_blank\" rel=\"external\">KISSY - 阿里前端JavaScript库</a><br>- <a href=\"http://nej.netease.com/\" target=\"_blank\" rel=\"external\">网易Nej - Nice Easy Javascript</a><br>- <a href=\"http://demos.telerik.com/kendo-ui/mvvm/index\" target=\"_blank\" rel=\"external\">Kendo UI MVVM Demo</a><br>- <a href=\"http://www.bootcss.com/\" target=\"_blank\" rel=\"external\">Bootstrap</a><br>- <a href=\"http://smartui.chinamzz.com/\" target=\"_blank\" rel=\"external\">Smart UI</a><br>- <a href=\"http://developer.yahoo.com/yui/grids/\" target=\"_blank\" rel=\"external\">雅虎UI - CSS UI</a><br>### 7. 页面 社会化 分享功能<br><ul><br><li><a href=\"http://share.baidu.com/?spm=5176.100239.blogcont82041.241.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.241\" target=\"_blank\" rel=\"external\">百度分享</a> pc端</li><br><li><a href=\"http://jiathis.com/?spm=5176.100239.blogcont82041.242.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.242\" target=\"_blank\" rel=\"external\">JiaThis</a> pc端</li><br><li><a href=\"http://developer.baidu.com/soc/share?spm=5176.100239.blogcont82041.243.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.243\" target=\"_blank\" rel=\"external\">社会化分享组件</a> 移动端</li><br><li><a href=\"http://www.mob.com/?spm=5176.100239.blogcont82041.244.jiu0a3#/index\" data-spm-anchor-id=\"5176.100239.blogcont82041.244\" target=\"_blank\" rel=\"external\">ShareSDK 轻松实现社会化功能</a> 移动端</li><br><li><a href=\"http://dev.umeng.com/social/android/quick-integration?spm=5176.100239.blogcont82041.245.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.245\" target=\"_blank\" rel=\"external\">友盟分享</a> 移动端</li><br></ul><br><h4 id=\"35\">8. 富文本编辑器</h4><br><ul><br><li><a href=\"http://ueditor.baidu.com/website/?spm=5176.100239.blogcont82041.246.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.246\" target=\"_blank\" rel=\"external\">百度 ueditor</a></li><br><li><a href=\"http://ckeditor.com/?spm=5176.100239.blogcont82041.247.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.247\" target=\"_blank\" rel=\"external\">经典的ckeditor</a></li><br><li><a href=\"http://kindeditor.net/?spm=5176.100239.blogcont82041.248.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.248\" target=\"_blank\" rel=\"external\">经典的kindeditor</a></li><br><li><a href=\"http://www.bootcss.com/p/bootstrap-wysiwyg/?spm=5176.100239.blogcont82041.249.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.249\" target=\"_blank\" rel=\"external\">wysiwyg</a></li><br><li><a href=\"http://integ.github.io/BachEditor/?spm=5176.100239.blogcont82041.250.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.250\" target=\"_blank\" rel=\"external\">一个有情怀的编辑器。Bach’s Editor</a></li><br><li><a href=\"https://github.com/mycolorway/simditor?spm=5176.100239.blogcont82041.251.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.251\" target=\"_blank\" rel=\"external\">tower用的编辑器</a></li><br><li><a href=\"https://github.com/summernote/summernote?spm=5176.100239.blogcont82041.252.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.252\" target=\"_blank\" rel=\"external\">summernote 编辑器</a></li><br><li><a href=\"http://neilj.github.io/Squire/?spm=5176.100239.blogcont82041.253.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.253\" target=\"_blank\" rel=\"external\">html5编辑器</a></li><br><li><a href=\"http://lab.hustlzp.com/XEditor/?spm=5176.100239.blogcont82041.254.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.254\" target=\"_blank\" rel=\"external\">XEditor</a></li><br><li><a href=\"https://github.com/wangfupeng1988/wangEditor?spm=5176.100239.blogcont82041.255.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.255\" target=\"_blank\" rel=\"external\">wangEditor</a></li><br></ul><br>### 9. 日历<br>#### pc<br>- <a href=\"http://www.my97.net/dp/demo/index.htm\" target=\"_blank\" rel=\"external\">经典my97</a><br>- <a href=\"http://www.cnblogs.com/gbin1/archive/2012/04/16/2452105.html\" target=\"_blank\" rel=\"external\">强大的独立日期选择器</a><br>- <a href=\"http://fullcalendar.io/\" target=\"_blank\" rel=\"external\">fullcalendar</a><br>- <a href=\"http://blog.csdn.net/francislaw/article/details/7740630\" target=\"_blank\" rel=\"external\">fullcalendar日历控件知识点集合 </a><br>- <a href=\"http://blog.sina.com.cn/s/blog_9475b1c101012c5f.html\" target=\"_blank\" rel=\"external\">中文api</a><br>- <a href=\"https://github.com/zzyss86/LunarCalendar\" target=\"_blank\" rel=\"external\">农历日历</a><br>- <a href=\"http://www.sucaisj.com/jiaoben/date/201509/16856.html\" target=\"_blank\" rel=\"external\">超酷的仿百度带节日日历老黄历控件</a><br>- <a href=\"http://momentjs.com/\" target=\"_blank\" rel=\"external\">日期格式化</a><br>- <a href=\"https://github.com/Johnqing/QPAYCalendar/\" target=\"_blank\" rel=\"external\">大牛日历控件</a><br>- <a href=\"https://github.com/Iamlars/dateMarker\" target=\"_blank\" rel=\"external\">我群某管理作品</a><br>- <a href=\"http://digitalbush.com/projects/masked-input-plugin/\" target=\"_blank\" rel=\"external\">input按位替换-官网</a><br>- <a href=\"https://github.com/digitalBush/jquery.maskedinput/tree/1.2.2\" target=\"_blank\" rel=\"external\">input按位替换-github</a><br>- <a href=\"https://github.com/dangrossman/bootstrap-daterangepicker\" target=\"_blank\" rel=\"external\">bootstrap-daterangepicker</a><br>- <a href=\"http://www.vandelaydesign.com/30-best-free-jquery-plugins/\" target=\"_blank\" rel=\"external\">国外30个插件集合</a><br>- <a href=\"http://dbushell.com/2012/10/09/pikaday-javascript-datepicker/\" target=\"_blank\" rel=\"external\">JavaScript datepicker</a><br>- <a href=\"http://jonthornton.github.io/Datepair.js/\" target=\"_blank\" rel=\"external\">Datepair.js</a><br>- <a href=\"https://github.com/glad/glDatePicker\" target=\"_blank\" rel=\"external\">一个风格多样的日历</a><br>- <a href=\"http://amsul.ca/pickadate.js/date/\" target=\"_blank\" rel=\"external\">弹出层式的全日历</a><br>- <a href=\"http://www.daterangepicker.com/\" target=\"_blank\" rel=\"external\">jquery双日历</a><br>#### 移动<br>- <a href=\"http://www.frankdemo.cn/index.php?c=content&amp;a=show&amp;id=115\" target=\"_blank\" rel=\"external\">大气实用jQuery手机移动端日历日期选择插件</a><br>- <a href=\"https://mobiscroll.com/\" target=\"_blank\" rel=\"external\">jQuery Mobile 移动开发中的日期插件Mobiscroll </a><br><br>#### Date library<br>- <a href=\"https://github.com/datejs/Datejs\" target=\"_blank\" rel=\"external\">Datejs</a><br>- <a href=\"http://sugarjs.com/api/Date\" target=\"_blank\" rel=\"external\">sugarjs</a><br>### 10. 综合效果搜索平台<br><ul><br><li><a href=\"http://www.jq22.com?spm=5176.100239.blogcont82041.256.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.256\" target=\"_blank\" rel=\"external\">效果网</a></li><br><li><a href=\"http://www.17sucai.com/?spm=5176.100239.blogcont82041.257.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.257\" target=\"_blank\" rel=\"external\">17素材</a></li><br><li><a href=\"http://microjs.com/?spm=5176.100239.blogcont82041.258.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.258\" target=\"_blank\" rel=\"external\">常用的JavaScript代码片段</a></li><br></ul><br>### 11. 前端工程化<br>#### 概述<br>- <a href=\"http://www.awesomes.cn/\" target=\"_blank\" rel=\"external\">前端工具大全</a><br>- <a href=\"https://github.com/fouber/blog/issues/10?from=timeline&amp;isappinstalled=0#\" target=\"_blank\" rel=\"external\">什么是前端工程化</a><br>#### Gulp<br>- <a href=\"http://gulpjs.com/\" target=\"_blank\" rel=\"external\">Gulp官网</a><br>- <a href=\"http://www.gulpjs.com.cn/\" target=\"_blank\" rel=\"external\">Gulp中文网</a><br>- <a href=\"https://github.com/Platform-CUF/use-gulp\" target=\"_blank\" rel=\"external\">gulp资料收集</a><br>- <a href=\"http://javascript.ruanyifeng.com/tool/gulp.html\" target=\"_blank\" rel=\"external\">Gulp：任务自动管理工具 - ruanyifeng</a><br>- <a href=\"http://gulpjs.com/plugins/\" target=\"_blank\" rel=\"external\">Gulp插件</a><br>- <a href=\"http://www.ido321.com/1622.html\" target=\"_blank\" rel=\"external\">Gulp不完全入门教程</a><br>- <a href=\"https://github.com/hjzheng/CUF_meeting_knowledge_share/issues/33\" target=\"_blank\" rel=\"external\">为什么使用gulp?</a><br>- <a href=\"http://www.dbpoo.com/getting-started-with-gulp/\" target=\"_blank\" rel=\"external\">Gulp安装及配合组件构建前端开发一体化</a><br>- <a href=\"https://github.com/nimojs/gulp-book\" target=\"_blank\" rel=\"external\">Gulp 入门指南</a><br>- <a href=\"https://github.com/nimojs/blog/issues/19\" target=\"_blank\" rel=\"external\">Gulp 入门指南 - nimojs</a><br>- <a href=\"http://markpop.github.io/2014/09/17/Gulp%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/\" target=\"_blank\" rel=\"external\">Gulp入门教程</a><br>- <a href=\"http://www.imooc.com/video/5692\" target=\"_blank\" rel=\"external\">Gulp in Action</a><br>- <a href=\"http://www.w3ctech.com/topic/134\" target=\"_blank\" rel=\"external\">Gulp开发教程（翻译）</a><br>- <a href=\"http://www.cnblogs.com/2050/p/4198792.html\" target=\"_blank\" rel=\"external\">前端构建工具gulpjs的使用介绍及技巧</a><br><br>#### Grunt<br>- <a href=\"http://gruntjs.com/\" target=\"_blank\" rel=\"external\">gruntjs</a><br>- <a href=\"http://www.gruntjs.net/\" target=\"_blank\" rel=\"external\">Grunt中文网</a><br><br>#### Fis<br>- <a href=\"http://fex-team.github.io/fis-site/index.html\" target=\"_blank\" rel=\"external\">fis 官网</a><br>- <a href=\"http://fis.baidu.com/\" target=\"_blank\" rel=\"external\">fis</a><br>### 12. 轮播图<br>#### pc图轮<br>- <a href=\"http://www.jsfoot.com/jquery/demo/2011-09-20/192.html\" target=\"_blank\" rel=\"external\">单屏轮播sochange</a><br>- <a href=\"http://bxslider.com/examples/carousel-demystified\" target=\"_blank\" rel=\"external\">左右按钮多图切换</a><br>- <a href=\"https://github.com/alvarotrigo/fullPage.js/\" target=\"_blank\" rel=\"external\">fullpage全屏轮播</a><br>#### 移动端<br>- <a href=\"http://www.swipejs.com/\" target=\"_blank\" rel=\"external\">无缝切换</a><br>- <a href=\"http://www.idangero.us/swiper/\" target=\"_blank\" rel=\"external\">滑屏效果</a><br>- <a href=\"https://github.com/peunzhang/fullpage\" target=\"_blank\" rel=\"external\">全屏fullpage</a><br>- <a href=\"https://github.com/qiqiboy/touchslider\" target=\"_blank\" rel=\"external\">单个图片切换</a><br>- <a href=\"https://github.com/peunzhang/slip.js\" target=\"_blank\" rel=\"external\">单个全屏切换</a><br>- <a href=\"http://touch.code.baidu.com/examples.html?qq-pf-to=pcqq.group\" target=\"_blank\" rel=\"external\">百度的切换库</a><br>- <a href=\"https://github.com/peunzhang/iSlider\" target=\"_blank\" rel=\"external\">单个全屏切换</a><br>- <a href=\"https://github.com/saw/touch-interfaces\" target=\"_blank\" rel=\"external\">滑屏效果</a><br>- <a href=\"http://baijs.com/tinycircleslider/\" target=\"_blank\" rel=\"external\">旋转拖动设置</a><br>- <a href=\"http://touchslider.com/\" target=\"_blank\" rel=\"external\">类似于swipe切换</a><br>- <a href=\"http://www.swiper.com.cn/demo/index.html\" target=\"_blank\" rel=\"external\">支持多种形式的触摸滑动</a><br>- <a href=\"https://github.com/joker-ye/main/blob/master/wap/index.html\" target=\"_blank\" rel=\"external\">滑屏效果</a><br>- <a href=\"http://www.superslide2.com/\" target=\"_blank\" rel=\"external\">大话主席pc移动图片轮换</a><br>- <a href=\"https://github.com/hahnzhu/parallax.js\" target=\"_blank\" rel=\"external\">滑屏效果</a><br>- <a href=\"https://github.com/yanhaijing/zepto.fullpage\" target=\"_blank\" rel=\"external\">基于zepto的fullpage</a><br>- <a href=\"http://www.cnblogs.com/plums/archive/2013/01/10/WebApp-fixed-width-layout-of-multi-terminal-adapter-since.html\" target=\"_blank\" rel=\"external\">[WebApp]定宽网页设计下，固定宽度布局开发WebApp并实现多终端下WebApp布局自适应</a><br>- <a href=\"http://loo2k.com/blog/detecting-wechat-client/\" target=\"_blank\" rel=\"external\">判断微信客户端的那些坑</a><br>- <a href=\"https://github.com/JefferyWang/nativeShare.js\" target=\"_blank\" rel=\"external\">可以通过javascript直接调用原生分享的工具</a><br>- <a href=\"http://www.jiathis.com/help/html/weixin-share-code\" target=\"_blank\" rel=\"external\">JiaThis 分享到微信代码</a><br>- <a href=\"http://fex.baidu.com/blog/2015/05/cross-mobile/\" target=\"_blank\" rel=\"external\">聊聊移动端跨平台开发的各种技术</a><br>- <a href=\"http://www.zhihu.com/question/29922082\" target=\"_blank\" rel=\"external\">前端自动化测试</a><br>- <a href=\"http://ajccom.github.io/niceslider/\" target=\"_blank\" rel=\"external\">多种轮换图片</a><br>- <a href=\"https://mango.github.io/slideout/\" target=\"_blank\" rel=\"external\">滑动侧边栏</a><br>### 13. 文件上传<br><ul><br><li><a href=\"http://fex.baidu.com/webuploader/?spm=5176.100239.blogcont82041.259.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.259\" target=\"_blank\" rel=\"external\">百度上传组件</a></li><br><li><a href=\"https://blueimp.github.io/jQuery-File-Upload/?spm=5176.100239.blogcont82041.260.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.260\" target=\"_blank\" rel=\"external\">上传</a></li><br><li><a href=\"http://www.hdfu.net/?spm=5176.100239.blogcont82041.261.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.261\" target=\"_blank\" rel=\"external\">flash 头像上传</a></li><br><li><a href=\"http://www.dropzonejs.com/?spm=5176.100239.blogcont82041.262.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.262\" target=\"_blank\" rel=\"external\">图片上传预览</a></li><br><li><a href=\"http://elemefe.github.io/image-cropper/?spm=5176.100239.blogcont82041.263.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.263\" target=\"_blank\" rel=\"external\">图片裁剪</a></li><br><li><a href=\"http://www.shearphoto.com/?spm=5176.100239.blogcont82041.264.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.264\" target=\"_blank\" rel=\"external\">图片裁剪-shearphoto</a></li><br><li><a href=\"http://www.oschina.net/project/tag/284/jquery-image-tools?spm=5176.100239.blogcont82041.265.jiu0a3&amp;lang=0&amp;os=0&amp;sort=view&amp;p=2\" data-spm-anchor-id=\"5176.100239.blogcont82041.265\" target=\"_blank\" rel=\"external\">jQuery图片处理</a></li><br><li><a href=\"\"></a></li><br></ul><br><h4 id=\"41\">14. 模拟select</h4><br><ul><br><li><a href=\"http://aui.github.io/popupjs/doc/selectbox.html?spm=5176.100239.blogcont82041.266.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.266\" target=\"_blank\" rel=\"external\">糖饼 select</a></li><br><li><a href=\"https://github.com/rmm5t/jquery-flexselect?spm=5176.100239.blogcont82041.267.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.267\" target=\"_blank\" rel=\"external\">flexselect</a></li><br><li><a href=\"http://loudev.com/?spm=5176.100239.blogcont82041.268.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.268\" target=\"_blank\" rel=\"external\">双select</a></li><br><li><a href=\"http://select2.github.io/?spm=5176.100239.blogcont82041.269.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.269\" target=\"_blank\" rel=\"external\">select2</a></li>\n\n<p></p></ul><p></p>\n<p></p><h4 id=\"42\">15. 取色插件</h4><p></p>\n<p><ul></ul></p>\n<li><a href=\"http://www.jq22.com/plugin/367?spm=5176.100239.blogcont82041.270.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.270\" target=\"_blank\" rel=\"external\">类似 Photoshop 的界面取色插件</a></li><br><li><a href=\"https://github.com/jquery/jquery-color/?spm=5176.100239.blogcont82041.271.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.271\" target=\"_blank\" rel=\"external\">jquery color</a></li><br><li><a href=\"http://www.oschina.net/project/tag/287/color-picker?spm=5176.100239.blogcont82041.272.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.272\" target=\"_blank\" rel=\"external\">取色插件集合</a></li><br><li><a href=\"https://github.com/mattfarina/farbtastic?spm=5176.100239.blogcont82041.273.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.273\" target=\"_blank\" rel=\"external\">farbtastic 圆环＋正方形</a></li>\n\n<p></p>\n<p></p><h4 id=\"43\">16. 城市联动</h4><p></p>\n<p><ul></ul></p>\n<li><a href=\"http://www.ijquery.cn/?spm=5176.100239.blogcont82041.274.jiu0a3&amp;p=360\" data-spm-anchor-id=\"5176.100239.blogcont82041.274\" target=\"_blank\" rel=\"external\">jquery.cityselect.js基于jQuery+JSON的省市或自定义联动效果</a></li>\n\n<p></p>\n<p></p><h4 id=\"44\">17. 剪贴板</h4><p></p>\n<p><ul></ul></p>\n<li><a href=\"https://github.com/zeroclipboard/zeroclipboard?spm=5176.100239.blogcont82041.275.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.275\" target=\"_blank\" rel=\"external\">剪贴板</a></li><br><li><a href=\"http://zenorocha.github.io/clipboard.js/?spm=5176.100239.blogcont82041.276.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.276\" target=\"_blank\" rel=\"external\">clipboard 最新的剪切方案</a></li><br><li><a href=\"https://github.com/zenorocha/clipboard.js?spm=5176.100239.blogcont82041.277.jiu0a3&amp;file=clipboard.js\" data-spm-anchor-id=\"5176.100239.blogcont82041.277\" target=\"_blank\" rel=\"external\">不是Flash的剪贴板</a></li><br><br><h4 id=\"45\">18. 简繁转换</h4><br><ul><br><li><a href=\"https://github.com/BYVoid/OpenCC?spm=5176.100239.blogcont82041.278.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.278\" target=\"_blank\" rel=\"external\">简繁转换</a></li><br></ul><br><h4 id=\"46\">19. 表格 Grid</h4><br><ul><br><li><a href=\"http://facebook.github.io/fixed-data-table/?spm=5176.100239.blogcont82041.279.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.279\" target=\"_blank\" rel=\"external\">facebook表格</a></li><br><li><a href=\"http://handsontable.com/?spm=5176.100239.blogcont82041.280.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.280\" target=\"_blank\" rel=\"external\">类似于Excel编辑表格-handsontable</a></li><br><li><a href=\"http://bootstrap-table.wenzhixin.net.cn/?spm=5176.100239.blogcont82041.281.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.281\" target=\"_blank\" rel=\"external\">bootstrap-table插件</a></li><br><li><a href=\"https://www.datatables.net/?spm=5176.100239.blogcont82041.282.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.282\" target=\"_blank\" rel=\"external\">datatables</a></li><br></ul><br><h4 id=\"47\">20. 在线演示</h4><br><ul><br><li><a href=\"http://runjs.cn/?spm=5176.100239.blogcont82041.283.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.283\" target=\"_blank\" rel=\"external\">js 在线编辑 - runjs</a></li><br><li><a href=\"http://jsbin.com/?spm=5176.100239.blogcont82041.284.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.284\" target=\"_blank\" rel=\"external\">js 在线编辑 - jsbin</a></li><br><li><a href=\"http://codepen.io/?spm=5176.100239.blogcont82041.285.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.285\" target=\"_blank\" rel=\"external\">js 在线编辑 - codepen</a></li><br><li><a href=\"http://jsfiddle.net/?spm=5176.100239.blogcont82041.286.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.286\" target=\"_blank\" rel=\"external\">js 在线编辑 - jsfiddle</a></li><br><li><a href=\"http://ideone.com/?spm=5176.100239.blogcont82041.287.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.287\" target=\"_blank\" rel=\"external\">java 在线编辑 - runjs</a></li><br><li><a href=\"http://code.hcharts.cn/?spm=5176.100239.blogcont82041.288.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.288\" target=\"_blank\" rel=\"external\">js 在线编辑 - hcharts</a></li><br><li><a href=\"http://jsdm.com/?spm=5176.100239.blogcont82041.289.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.289\" target=\"_blank\" rel=\"external\">js 在线编辑 - jsdm</a></li><br><li><a href=\"http://sqlfiddle.com/?spm=5176.100239.blogcont82041.290.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.290\" target=\"_blank\" rel=\"external\">sql 在线编辑 - sqlfiddle</a></li><br><li><a href=\"https://thimble.mozilla.org?spm=5176.100239.blogcont82041.291.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.291\" target=\"_blank\" rel=\"external\">mozilla 在线编辑器</a></li><br></ul><br><h4 id=\"48\">21. 播放器</h4><br><ul><br><li><a href=\"https://github.com/zmmbreeze/DeadSimpleVideoPlayer?spm=5176.100239.blogcont82041.292.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.292\" target=\"_blank\" rel=\"external\">Html5 VideoPlayer</a></li><br></ul><br><h4 id=\"49\">22. 粒子动画</h4><br><ul><br><li><a href=\"http://a-jie.github.io/Proton/?spm=5176.100239.blogcont82041.293.jiu0a3#example\" data-spm-anchor-id=\"5176.100239.blogcont82041.293\" target=\"_blank\" rel=\"external\">Proton 烟花</a></li><br></ul><br><h3 id=\"50\">九. Nodejs</h3><br><ul><br><li><a href=\"http://liuqing.pw/?spm=5176.100239.blogcont82041.294.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.294\" target=\"_blank\" rel=\"external\">nodejs 篇幅比较巨大</a></li><br><li><a href=\"https://github.com/alsotang/node-lessons?spm=5176.100239.blogcont82041.295.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.295\" target=\"_blank\" rel=\"external\">Node.js 包教不包会</a></li><br><li><a href=\"http://www.rainweb.cn/article/category/Nodejs?spm=5176.100239.blogcont82041.296.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.296\" target=\"_blank\" rel=\"external\">篇幅比较少</a></li><br><li><a href=\"http://www.w3cfuns.com/article-5598538-1-1.html?spm=5176.100239.blogcont82041.297.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.297\" target=\"_blank\" rel=\"external\">node express 入门教程</a></li><br><li><a href=\"http://my.oschina.net/u/568264/blog/193773?spm=5176.100239.blogcont82041.298.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.298\" target=\"_blank\" rel=\"external\">nodejs定时任务</a></li><br><li><a href=\"http://60sky.com/?spm=5176.100239.blogcont82041.299.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.299\" target=\"_blank\" rel=\"external\">一个nodejs博客</a></li><br><li><a href=\"http://www.cnblogs.com/yexiaochai/p/3536547.html?spm=5176.100239.blogcont82041.300.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.300\" target=\"_blank\" rel=\"external\">【NodeJS 学习笔记04】新闻发布系统</a></li><br><li><a href=\"http://www.cnblogs.com/qqloving/p/3541099.html?spm=5176.100239.blogcont82041.301.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.301\" target=\"_blank\" rel=\"external\">过年7天乐，学nodejs 也快乐</a></li><br><li><a href=\"https://github.com/nqdeng/7-days-nodejs?spm=5176.100239.blogcont82041.302.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.302\" target=\"_blank\" rel=\"external\">七天学会NodeJS</a></li><br><li><a href=\"http://www.cnblogs.com/zhongweiv/p/nodejs_events.html?spm=5176.100239.blogcont82041.303.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.303\" target=\"_blank\" rel=\"external\">Nodejs学习笔记（二）— 事件模块</a></li><br><li><a href=\"http://www.cnblogs.com/liusuqi/p/3735491.html?spm=5176.100239.blogcont82041.304.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.304\" target=\"_blank\" rel=\"external\">nodejs入门</a></li><br><li><a href=\"https://github.com/zensh/jsgen?spm=5176.100239.blogcont82041.305.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.305\" target=\"_blank\" rel=\"external\">angularjs nodejs</a></li><br><li><a href=\"http://blog.fens.me/series-nodejs/?spm=5176.100239.blogcont82041.306.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.306\" target=\"_blank\" rel=\"external\">从零开始nodejs系列文章</a></li><br><li><a href=\"http://debuggable.com/posts/understanding-node-js:4bd98440-45e4-4a9a-8ef7-0f7ecbdd56cb?spm=5176.100239.blogcont82041.307.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.307\" target=\"_blank\" rel=\"external\">理解nodejs</a></li><br><li><a href=\"http://blog.mixu.net/2011/02/01/understanding-the-node-js-event-loop/?spm=5176.100239.blogcont82041.308.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.308\" target=\"_blank\" rel=\"external\">nodejs事件轮询</a></li><br><li><a href=\"http://www.nodebeginner.org/index-zh-cn.html?spm=5176.100239.blogcont82041.309.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.309\" target=\"_blank\" rel=\"external\">node入门</a></li><br><li><a href=\"http://ourjs.com/detail/53e1f281c5910a9806000001?spm=5176.100239.blogcont82041.310.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.310\" target=\"_blank\" rel=\"external\">nodejs cms</a></li><br><li><a href=\"http://ourjs.com/detail/529ca5950cb6498814000005?spm=5176.100239.blogcont82041.311.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.311\" target=\"_blank\" rel=\"external\">Node初学者入门，一本全面的NodeJS教程</a></li><br><li><a href=\"http://www.barretlee.com/blog/2015/10/07/debug-nodejs-in-command-line/?spm=5176.100239.blogcont82041.312.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.312\" target=\"_blank\" rel=\"external\">NodeJS的代码调试和性能调优</a></li><br></ul><br>## 十. 性能优化<br><ol><br><li>常规优化</li><br></ol><br>- <a href=\"http://www.infoq.com/cn/articles/javascript-high-performance-animation-and-page-rendering\" target=\"_blank\" rel=\"external\">Javascript高性能动画与页面渲染</a><br>- <a href=\"http://isux.tencent.com/h5-performance.html\" target=\"_blank\" rel=\"external\">移动H5前端性能优化指南</a><br>- <a href=\"http://ued.5173.com/?p=1731\" target=\"_blank\" rel=\"external\">5173首页前端性能优化实践</a><br>- <a href=\"http://www.uisdc.com/front-end-performance-for-web-designers-and-front-end-developers\" target=\"_blank\" rel=\"external\">给网页设计师和前端开发者看的前端性能优化</a><br>- <a href=\"http://www.orzpoint.com/profiling-css-and-optimization-notes/\" target=\"_blank\" rel=\"external\">复杂应用的 CSS 性能分析和优化建议</a><br>- <a href=\"http://www.zhangxinxu.com/wordpress/tag/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD/\" target=\"_blank\" rel=\"external\">张鑫旭——前端性能</a><br>- <a href=\"http://www.xiaoqiang.org/javascript/font-end-performance-monitor.html\" target=\"_blank\" rel=\"external\">前端性能监控总结</a><br>- <a href=\"http://udc.weibo.com/2013/05/%E7%BD%91%E7%AB%99%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%B9%8Bcss%E6%97%A0%E5%9B%BE%E7%89%87%E6%8A%80%E6%9C%AF/\" target=\"_blank\" rel=\"external\">网站性能优化之CSS无图片技术</a><br>- <a href=\"http://www.aliued.cn/2013/01/20/web%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E8%BF%9B%E9%98%B6%E8%B7%AF.html\" target=\"_blank\" rel=\"external\">web前端性能优化进阶路</a><br>- <a href=\"http://my.eoe.cn/tuwandou/archive/4544.html\" target=\"_blank\" rel=\"external\">前端技术：网站性能优化之CSS无图片技术</a><br>- <a href=\"http://www.baiduux.com/blog/2011/02/15/browser-loading/\" target=\"_blank\" rel=\"external\">浏览器的加载与页面性能优化</a><br>- <a href=\"http://www.w3ctech.com/p/1503\" target=\"_blank\" rel=\"external\">页面加载中的图片性能优化</a><br>- <a href=\"http://www.feelcss.com/tag/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD\" target=\"_blank\" rel=\"external\">Hey——前端性能</a><br>- <a href=\"http://www.baiduux.com/blog/2010/03/15/html%E4%BC%98%E5%8C%96-2/\" target=\"_blank\" rel=\"external\">html优化</a><br>- <a href=\"http://www.99css.com/tag/%e6%80%a7%e8%83%bd\" target=\"_blank\" rel=\"external\">99css——性能</a><br>- <a href=\"http://www.yslow.net/category.php?cid=20\" target=\"_blank\" rel=\"external\">Yslow——性能优化</a><br>- <a href=\"http://www.cnblogs.com/yslow/\" target=\"_blank\" rel=\"external\">YSLOW中文介绍</a><br>- <a href=\"http://www.360ito.com/article/40.html\" target=\"_blank\" rel=\"external\">转一篇Yahoo关于网站性能优化的文章，兼谈本站要做的优化</a><br>- <a href=\"http://www.360doc.com/content/10/0928/09/2588264_56971287.shtml\" target=\"_blank\" rel=\"external\">Yahoo!团队实践分享：网站性能</a><br>- <a href=\"http://blog.jiasule.com/i/153\" target=\"_blank\" rel=\"external\">网站性能优化指南：什么使我们的网站变慢？</a><br>- <a href=\"http://www.powereasy.net/helpyou/knowledge/ecommerce/9593.html\" target=\"_blank\" rel=\"external\">网站性能优化实践，减少加载时间，提高用户体验</a><br>- <a href=\"http://www.umtry.com/archives/747.html\" target=\"_blank\" rel=\"external\">浅谈网站性能优化 前端篇</a><br>- <a href=\"http://www.adinnet.cn/blog/designview/2012-7-12/678.html\" target=\"_blank\" rel=\"external\">前端重构实践之如何对网站性能优化？</a><br>- <a href=\"http://www.gbin1.com/technology/javascript/20130708-front-end-performance-optimization-9/\" target=\"_blank\" rel=\"external\">前端性能优化：使用媒体查询加载指定大小的背景图片</a><br>- <a href=\"http://www.mykuer.com/post/factors-that-affect-the-speed-of-web-site-open.html\" target=\"_blank\" rel=\"external\">网站性能系列博文</a><br>- <a href=\"http://tgideas.qq.com/webplat/info/news_version3/804/808/811/m579/201109/41355.shtml\" target=\"_blank\" rel=\"external\">加载，不只是少一点点</a><br>- <a href=\"http://mzhou.me/article/95310/\" target=\"_blank\" rel=\"external\">前端性能的测试与优化</a><br>- <a href=\"http://www.gbin1.com/technology/html/20130217-tips-for-speed-up-page-loading/\" target=\"_blank\" rel=\"external\">分享网页加载速度优化的一些技巧？</a><br>- <a href=\"http://www.f2es.com/images-bytes-opt/\" target=\"_blank\" rel=\"external\">页面加载中的图片性能优化</a><br>- <a href=\"http://www.tcreator.info/webSchool/website/Front-end-Opt-Yslow.html\" target=\"_blank\" rel=\"external\">web前端优化(基于Yslow)</a><br>- <a href=\"https://www.qianduan.net/website-performance-optimization-tool.html\" target=\"_blank\" rel=\"external\">网站性能优化工具大全</a><br>- <a href=\"http://www.alloyteam.com/2012/10/high-performance-html/\" target=\"_blank\" rel=\"external\">【高性能前端1】高性能HTML</a><br>- <a href=\"http://www.alloyteam.com/2012/10/high-performance-css/\" target=\"_blank\" rel=\"external\">【高性能前端2】高性能CSS</a><br>- <a href=\"http://coolshell.cn/articles/6470.html\" target=\"_blank\" rel=\"external\">由12306谈谈网站前端性能和后端性能优化</a><br>- <a href=\"http://www.alloyteam.com/webfrontend/%E5%89%8D%E7%AB%AF%E4%BC%98%E5%8C%96/\" target=\"_blank\" rel=\"external\">AlloyTeam——前端优化</a><br>- <a href=\"http://www.cnblogs.com/developersupport/p/3248695.html\" target=\"_blank\" rel=\"external\">毫秒必争，前端网页性能最佳实践</a><br>- <a href=\"http://blog.sina.com.cn/s/blog_6e9d2e0701017kvu.html\" target=\"_blank\" rel=\"external\">网站性能工具Yslow的使用方法</a><br>- <a href=\"http://www.infoq.com/cn/articles/front-end-engineering-and-performance-optimization-part1\" target=\"_blank\" rel=\"external\">前端工程与性能优化（上）：静态资源版本更新与缓存</a><br>- <a href=\"http://www.infoq.com/cn/articles/front-end-engineering-and-performance-optimization-part2\" target=\"_blank\" rel=\"external\">前端工程与性能优化（下）：静态资源管理与模板框架</a><br>- <a href=\"http://blog.jobbole.com/48369/\" target=\"_blank\" rel=\"external\">HTTPS连接的前几毫秒发生了什么</a><br>- <a href=\"http://uicss.cn/yslow/#more-12319\" target=\"_blank\" rel=\"external\">Yslow</a><br>- <a href=\"http://blog.smartbear.com/web-performance/essential-web-performance-metrics-a-primer-part-1/\" target=\"_blank\" rel=\"external\">Essential Web Performance Metrics — A Primer, Part 1</a><br>- <a href=\"http://blog.smartbear.com/performance/essential-web-performance-metrics-part-2/\" target=\"_blank\" rel=\"external\">Essential Web Performance Metrics — Part 2</a><br>- <a href=\"http://jayli.github.io/blog/data/2011/12/23/yuislide.html\" target=\"_blank\" rel=\"external\">YUISlide,针对移动设备的动画性能优化</a><br>- <a href=\"http://joelglovier.com/improving-site-performance/\" target=\"_blank\" rel=\"external\">Improving Site Performance</a><br>- <a href=\"http://segmentfault.com/a/1190000000367899\" target=\"_blank\" rel=\"external\">让网站提速的最佳前端实践</a><br>- <a href=\"http://sixrevisions.com/web-development/why-website-speed-is-important/\" target=\"_blank\" rel=\"external\">Why Website Speed is Important</a><br>- <a href=\"https://www.devbridge.com/articles/need-for-speed-how-to-improve-your-website-performance/\" target=\"_blank\" rel=\"external\">Need for Speed – How to Improve your Website Performance</a><br>- <a href=\"https://github.com/amfe/article/issues/1\" target=\"_blank\" rel=\"external\">阿里无线前端性能优化指南 (Pt.1 加载期优化) </a><br>- <a href=\"\"></a><br><ol><br><li>优化工具</li><br></ol><br>- <a href=\"http://www.html-js.com/article/3083\" target=\"_blank\" rel=\"external\">JavaScript 性能分析新工具 OneProfile</a><br>- <a href=\"http://www.html-js.com/article/3091\" target=\"_blank\" rel=\"external\">JavaScript 堆内存分析新工具 OneHeap</a><br><ol><br><li>在线工具</li><br></ol><br>- <a href=\"https://developers.google.com/speed/pagespeed/insights/\" target=\"_blank\" rel=\"external\">google在线工具</a><br>- <a href=\"http://www.alibench.com/\" target=\"_blank\" rel=\"external\">阿里测</a><br>- <a href=\"http://itest.aliyun.com/\" target=\"_blank\" rel=\"external\">阿里-免费测试服务</a><br>- <a href=\"https://github.com/alibaba/f2etest\" target=\"_blank\" rel=\"external\">阿里-F2etest多浏览器兼容性测试解决方案</a><br>- <a href=\"http://jsperf.com/\" target=\"_blank\" rel=\"external\">js性能测试</a><br>- <a href=\"\"></a><br><h3 id=\"52\">十一. 前端架构</h3><br><ul><br><li><a href=\"http://www.zhihu.com/topic/19612641?spm=5176.100239.blogcont82041.313.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.313\" target=\"_blank\" rel=\"external\">技术架构</a></li><br><li><a href=\"http://saito.im/note/The-Architecture-of-F2E/?spm=5176.100239.blogcont82041.314.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.314\" target=\"_blank\" rel=\"external\">前端架构</a></li><br><li><a href=\"http://www.zhihu.com/question/24092572?spm=5176.100239.blogcont82041.315.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.315\" target=\"_blank\" rel=\"external\">如何成为前端架构师</a></li><br><li><a href=\"http://hikejun.com/sharing/2010webrebuild/?spm=5176.100239.blogcont82041.316.jiu0a3&amp;file=fe-infrastructure.html\" data-spm-anchor-id=\"5176.100239.blogcont82041.316\" target=\"_blank\" rel=\"external\">关于前端架构-张克军</a></li><br><li><a href=\"http://www.zhihu.com/question/25583350?spm=5176.100239.blogcont82041.317.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.317\" target=\"_blank\" rel=\"external\">百度腾讯offer比较（腾讯游戏VS百度基础架构）</a></li>\n\n<p></p></ul><p></p>\n<p></p><h3 id=\"53\">十二. 个人作品</h3><p></p>\n<p></p><h4 id=\"54\">1. 推荐作品</h4><p></p>\n<p><ul></ul></p>\n<p><li><a href=\"https://gist.github.com/wintercn?spm=5176.100239.blogcont82041.318.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.318\" target=\"_blank\" rel=\"external\">winter代码片段需要翻墙</a></li></p>\n<p><li><a href=\"http://www.fgm.cc/learn/?spm=5176.100239.blogcont82041.319.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.319\" target=\"_blank\" rel=\"external\">fgm</a></li></p>\n<p><li><a href=\"https://github.com/hongru/hongru.github.com?spm=5176.100239.blogcont82041.320.jiu0a3&amp;file=hongru.github.com\" data-spm-anchor-id=\"5176.100239.blogcont82041.320\" target=\"_blank\" rel=\"external\">岑安作品集</a></li></p>\n<p><li><a href=\"http://kmdjs.github.io/?spm=5176.100239.blogcont82041.321.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.321\" target=\"_blank\" rel=\"external\">当耐特demo集合</a></li></p>\n<p><li><a href=\"http://www.laoshu133.com/Lab/?spm=5176.100239.blogcont82041.322.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.322\" target=\"_blank\" rel=\"external\">米空格 js作品</a></li></p>\n<p><li><a href=\"http://koen301.github.io/?spm=5176.100239.blogcont82041.323.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.323\" target=\"_blank\" rel=\"external\">myFocus</a></li></p>\n<p><li><a href=\"http://panxuepeng.github.io/seajslib/?spm=5176.100239.blogcont82041.324.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.324\" target=\"_blank\" rel=\"external\">SeaJS组件库</a></li></p>\n<p><li><a href=\"http://yanhaijing.com/myProject/?spm=5176.100239.blogcont82041.325.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.325\" target=\"_blank\" rel=\"external\">颜海镜作品</a></li></p>\n<p><li><a href=\"http://jo2.org/category/myworks/?spm=5176.100239.blogcont82041.326.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.326\" target=\"_blank\" rel=\"external\">脚儿网作品</a></li></p>\n<p><li><a href=\"http://www.cnitblog.com/yemoo/category/3107.html?spm=5176.100239.blogcont82041.327.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.327\" target=\"_blank\" rel=\"external\">javascript个人作品</a></li></p>\n<p><li><a href=\"http://bbs.miaov.com/forum.php?spm=5176.100239.blogcont82041.328.jiu0a3&amp;mod=viewthread&amp;tid=7790\" data-spm-anchor-id=\"5176.100239.blogcont82041.328\" target=\"_blank\" rel=\"external\">妙味的雷东升游戏作品</a></li></p>\n<p><li><a href=\"http://bbs.csdn.net/topics/380227212?spm=5176.100239.blogcont82041.329.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.329\" target=\"_blank\" rel=\"external\">javascript作品集</a></li></p>\n<p><li><a href=\"https://github.com/TooBug/works?spm=5176.100239.blogcont82041.330.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.330\" target=\"_blank\" rel=\"external\">云五笔，灰度产生生成工具</a></li></p>\n<p><li><a href=\"http://koen301.github.io/?spm=5176.100239.blogcont82041.331.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.331\" target=\"_blank\" rel=\"external\">项目主页</a></li></p>\n<p><li><a href=\"http://zaole.net/?spm=5176.100239.blogcont82041.332.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.332\" target=\"_blank\" rel=\"external\">个性的作品主页</a></li></p>\n<p><li><a href=\"http://static.tingall.com/v2/player/?spm=5176.100239.blogcont82041.333.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.333\" target=\"_blank\" rel=\"external\">播放器</a></li></p>\n<p><li><a href=\"http://ucren.com/blog/demos?spm=5176.100239.blogcont82041.334.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.334\" target=\"_blank\" rel=\"external\">ucren js demos 集</a></li></p>\n<p><li><a href=\"http://www.zhinengshe.com/works_list.html?spm=5176.100239.blogcont82041.335.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.335\" target=\"_blank\" rel=\"external\">智能社</a></li></p>\n<p><li><a href=\"http://demos.shizuwu.cn/?spm=5176.100239.blogcont82041.336.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.336\" target=\"_blank\" rel=\"external\">实例陈列架</a></li></p>\n<p><li><a href=\"http://zoye.sinaapp.com/demo?spm=5176.100239.blogcont82041.337.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.337\" target=\"_blank\" rel=\"external\">zoye demo</a></li></p>\n<p><li><a href=\"http://lab.yuanwai.wang/?spm=5176.100239.blogcont82041.338.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.338\" target=\"_blank\" rel=\"external\">王员外</a></li></p>\n<p><li><a href=\"http://pingfan1990.sinaapp.com?spm=5176.100239.blogcont82041.339.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.339\" target=\"_blank\" rel=\"external\">平凡</a></li></p>\n<p><li><a href=\"http://www.lovewebgames.com/?spm=5176.100239.blogcont82041.340.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.340\" target=\"_blank\" rel=\"external\">jyg 游戏案例</a></li></p>\n<p><li><a href=\"http://www.helloweba.com/list.html?spm=5176.100239.blogcont82041.341.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.341\" target=\"_blank\" rel=\"external\">很多jquery插件</a></li></p>\n<p><li><a href=\"http://www.bujichong.com/sojs/api/index.html?spm=5176.100239.blogcont82041.342.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.342\" target=\"_blank\" rel=\"external\">不羁虫 - soJs 作品系列</a></li></p>\n<p><li><a href=\"http://frozenui.github.io/case.html?spm=5176.100239.blogcont82041.343.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.343\" target=\"_blank\" rel=\"external\">frozenui</a></li></p>\n<p><li><a href=\"http://js-game.github.io/othello/?spm=5176.100239.blogcont82041.344.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.344\" target=\"_blank\" rel=\"external\">黑白棋</a></li></p>\n<p><li><a href=\"http://yansm.github.io/fromone/index.html?spm=5176.100239.blogcont82041.345.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.345\" target=\"_blank\" rel=\"external\">fromone</a></li><br></p>\n<p></p><h4 id=\"55\">2. 群员作品</h4><p></p>\n<p><ul></ul></p>\n<p><li><a href=\"http://demo.webjyh.com/?spm=5176.100239.blogcont82041.346.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.346\" target=\"_blank\" rel=\"external\">MDialog - [合肥-M.J]</a></li></p>\n<p><li><a href=\"http://sandbox.runjs.cn/show/do6zlrrk?spm=5176.100239.blogcont82041.347.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.347\" target=\"_blank\" rel=\"external\">轮播图 - [上海－冷静]</a></li></p>\n<p><li><a href=\"http://www.replace5.com/?spm=5176.100239.blogcont82041.348.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.348\" target=\"_blank\" rel=\"external\">[广州—坚壳]</a></li></p>\n<p><li><a href=\"http://www.seejs.com/demos/?spm=5176.100239.blogcont82041.349.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.349\" target=\"_blank\" rel=\"external\">[成都 - 无痕]　感恩节专题</a></li></p>\n<p><li><a href=\"http://hacke2.github.io/works?spm=5176.100239.blogcont82041.350.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.350\" target=\"_blank\" rel=\"external\">[球霸天]</a></li></p>\n<p><li><a href=\"http://www.cnblogs.com/mcat/?spm=5176.100239.blogcont82041.351.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.351\" target=\"_blank\" rel=\"external\">[北京-小数]</a></li></p>\n<p><li><a href=\"http://thx.github.io/magix/?spm=5176.100239.blogcont82041.352.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.352\" target=\"_blank\" rel=\"external\">[ptf] Magix 工具</a></li></p>\n<p><li><a href=\"http://thx.github.io/magix/?spm=5176.100239.blogcont82041.353.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.353\" target=\"_blank\" rel=\"external\">[杭州-Pft] Magix 基于 MVC 结构和 Hash 驱动的 OPOA（One Page One Application）应用</a></li></p>\n<p><li><a href=\"http://bh-lay.com/labs/?spm=5176.100239.blogcont82041.354.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.354\" target=\"_blank\" rel=\"external\">[上海-剧中人]-实验室</a></li></p>\n<p><li><a href=\"http://jikeytang.github.io?spm=5176.100239.blogcont82041.355.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.355\" target=\"_blank\" rel=\"external\">[上海-豪情 ] 作品集合</a></li></p>\n<p><li><a href=\"http://guoshan.sinaapp.com/?spm=5176.100239.blogcont82041.356.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.356\" target=\"_blank\" rel=\"external\">[成都-feeling]</a></li></p>\n<p><li><a href=\"http://www.cnblogs.com/liyunhua/?spm=5176.100239.blogcont82041.357.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.357\" target=\"_blank\" rel=\"external\">[上海-angela]</a></li></p>\n<p><li><a href=\"http://hcjp.github.io/work/demo/?spm=5176.100239.blogcont82041.358.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.358\" target=\"_blank\" rel=\"external\">[海南-hank]作品</a></li></p>\n<p><li><a href=\"https://github.com/yibuyisheng/blogs/issues?spm=5176.100239.blogcont82041.359.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.359\" target=\"_blank\" rel=\"external\">[上海-张力]博客</a></li></p>\n<p><li><a href=\"http://zkske121.github.io/?spm=5176.100239.blogcont82041.360.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.360\" target=\"_blank\" rel=\"external\">[上海-zenki]作品</a></li></p>\n<p><li><a href=\"http://01google.sinaapp.com/locker.html?spm=5176.100239.blogcont82041.361.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.361\" target=\"_blank\" rel=\"external\">移动端图案解锁</a></li></p>\n<p><li><a href=\"https://github.com/webjyh/MPreview.mobile?spm=5176.100239.blogcont82041.362.jiu0a3&amp;file=MPreview.mobile\" data-spm-anchor-id=\"5176.100239.blogcont82041.362\" target=\"_blank\" rel=\"external\">[合肥-M.J] - MPreview 移动端图片预览组</a></li></p>\n<p><li><a href=\"https://github.com/webjyh/Mexam?spm=5176.100239.blogcont82041.363.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.363\" target=\"_blank\" rel=\"external\">[合肥-M.J] - Mexam 移动端在线做题组</a></li></p>\n<p><li><a href=\"http://letyougo.github.io/dancer/?spm=5176.100239.blogcont82041.364.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.364\" target=\"_blank\" rel=\"external\">[北京-苏瑞] - dancer小人</a></li></p>\n<p><li><a href=\"http://k.swao.cn/js/?spm=5176.100239.blogcont82041.365.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.365\" target=\"_blank\" rel=\"external\">[上海-玄沐]- 个人网站</a></li></p>\n<p><li><a href=\"http://www.meckodo.com/?spm=5176.100239.blogcont82041.366.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.366\" target=\"_blank\" rel=\"external\">[厦门-二哲]- 个人博客</a></li><br></p>\n<p></p><h4 id=\"56\">3. 国外大牛精品</h4><p></p>\n<p><ul></ul></p>\n<p><li><a href=\"http://pazguille.me/?spm=5176.100239.blogcont82041.367.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.367\" target=\"_blank\" rel=\"external\">pazguille</a></li><br></p>\n<p></p><h3 id=\"57\">十三. 简历模板</h3><p></p>\n<p><ul></ul></p>\n<p><li><a href=\"http://learnshare.github.io/about/index.html?spm=5176.100239.blogcont82041.368.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.368\" target=\"_blank\" rel=\"external\">不错的个人简历</a></li></p>\n<p><li><a href=\"http://hcy2367.github.io/resume/?spm=5176.100239.blogcont82041.369.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.369\" target=\"_blank\" rel=\"external\">简历</a></li></p>\n<p><li><a href=\"http://ncuey.sinaapp.com/CrispElite/?spm=5176.100239.blogcont82041.370.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.370\" target=\"_blank\" rel=\"external\">张伦</a></li></p>\n<p><li><a href=\"https://github.com/hacke2/ResumeSample?spm=5176.100239.blogcont82041.371.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.371\" target=\"_blank\" rel=\"external\">简历</a></li></p>\n<p><li><a href=\"http://blog.dandyweng.com/2013/07/how-my-website-was-created/?spm=5176.100239.blogcont82041.372.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.372\" target=\"_blank\" rel=\"external\">翁天信</a></li></p>\n<p><li><a href=\"http://www.webhek.com/misc/interactive-resume/?spm=5176.100239.blogcont82041.373.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.373\" target=\"_blank\" rel=\"external\">动画方式的简历</a></li></p>\n<p><li><a href=\"http://www.linqing07.com/resume.html?spm=5176.100239.blogcont82041.374.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.374\" target=\"_blank\" rel=\"external\">组件丰富简历</a></li></p>\n<p><li><a href=\"http://www.mojianli.com/resume/view?spm=5176.100239.blogcont82041.375.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.375\" target=\"_blank\" rel=\"external\">简历池</a></li></p>\n<p><li><a href=\"http://www.haorooms.com/about?spm=5176.100239.blogcont82041.376.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.376\" target=\"_blank\" rel=\"external\">haorooms博客</a></li></p>\n<p><li><a href=\"http://cv.youngdze.com/?spm=5176.100239.blogcont82041.377.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.377\" target=\"_blank\" rel=\"external\">Justin Young</a></li></p>\n<p><li><a href=\"\"></a></li><br></p>\n<p></p><h3 id=\"58\">十四. 面试题</h3><p></p>\n<p><ul></ul></p>\n<p><li><a href=\"http://www.nowcoder.com/discuss/3196?spm=5176.100239.blogcont82041.378.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.378\" target=\"_blank\" rel=\"external\">那几个月在找工作（百度，网易游戏）</a></li></p>\n<p><li><a href=\"http://www.html-js.com/article/1743?spm=5176.100239.blogcont82041.379.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.379\" target=\"_blank\" rel=\"external\">2014最新面试题</a></li></p>\n<p><li><a href=\"http://www.w3cfuns.com/thread-5598563-2-1.html?spm=5176.100239.blogcont82041.380.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.380\" target=\"_blank\" rel=\"external\">阿里前端面试题</a></li></p>\n<p><li><a href=\"http://www.cnblogs.com/imwtr/p/4685546.html?spm=5176.100239.blogcont82041.381.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.381\" target=\"_blank\" rel=\"external\">2016校招内推 – 阿里巴巴前端 – 三面面试经历 </a></li></p>\n<p><li><a href=\"http://www.w3cfuns.com/article-5599657-1-1.html?spm=5176.100239.blogcont82041.382.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.382\" target=\"_blank\" rel=\"external\">腾讯面试题</a></li></p>\n<p><li><a href=\"http://www.cnblogs.com/lvdabao/p/3660707.html?spm=5176.100239.blogcont82041.383.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.383\" target=\"_blank\" rel=\"external\">年后跳槽那点事：乐视+金山+360面试之行</a></li></p>\n<p><li><a href=\"http://fatesinger.com/2722.html?spm=5176.100239.blogcont82041.384.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.384\" target=\"_blank\" rel=\"external\">阿里前端面试题上线</a></li></p>\n<p><li><a href=\"http://www.cnblogs.com/52cik/p/js-question-lg.html?spm=5176.100239.blogcont82041.385.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.385\" target=\"_blank\" rel=\"external\">拉勾网js面试题</a></li></p>\n<p><li><a href=\"http://www.cnblogs.com/allenxing/p/3724382.html?spm=5176.100239.blogcont82041.386.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.386\" target=\"_blank\" rel=\"external\">前端面试</a></li></p>\n<p><li><a href=\"http://mianshiti.diandian.com/?spm=5176.100239.blogcont82041.387.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.387\" target=\"_blank\" rel=\"external\">Web开发笔试面试题 大全</a></li></p>\n<p><li><a href=\"http://segmentfault.com/a/1190000000465431?spm=5176.100239.blogcont82041.388.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.388\" target=\"_blank\" rel=\"external\">前端开发面试题</a></li></p>\n<p><li><a href=\"https://github.com/markyun/My-blog/tree/master/Front-end-Developer-Questions?spm=5176.100239.blogcont82041.389.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.389\" target=\"_blank\" rel=\"external\">2014最新前端面试题</a></li></p>\n<p><li><a href=\"https://github.com/fex-team/interview-questions?spm=5176.100239.blogcont82041.390.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.390\" target=\"_blank\" rel=\"external\">百度面试</a></li></p>\n<p><li><a href=\"http://www.w3cfuns.com/forum.php?spm=5176.100239.blogcont82041.391.jiu0a3&amp;mod=forumdisplay&amp;fid=51&amp;filter=typeid&amp;typeid=177\" data-spm-anchor-id=\"5176.100239.blogcont82041.391\" target=\"_blank\" rel=\"external\">面试题</a></li></p>\n<p><li><a href=\"https://github.com/darcyclarke/Front-end-Developer-Interview-Questions/tree/master/Chinese?spm=5176.100239.blogcont82041.392.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.392\" target=\"_blank\" rel=\"external\">前端工作面试问题</a></li></p>\n<p><li><a href=\"http://segmentfault.com/a/1190000000465431?spm=5176.100239.blogcont82041.393.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.393\" target=\"_blank\" rel=\"external\">前端开发面试题</a></li></p>\n<p><li><a href=\"http://ourjs.com/detail/5%E4%B8%AA%E7%BB%8F%E5%85%B8%E7%9A%84%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98?spm=5176.100239.blogcont82041.394.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.394\" target=\"_blank\" rel=\"external\">5个经典的前端面试问题</a></li></p>\n<p><li><a href=\"http://segmentfault.com/a/1190000002562454?spm=5176.100239.blogcont82041.395.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.395\" target=\"_blank\" rel=\"external\">最全前端面试问题及答案总结 </a></li></p>\n<p><li><a href=\"http://www.html-js.com/article/Large-search-front-team-column%202961?spm=5176.100239.blogcont82041.396.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.396\" target=\"_blank\" rel=\"external\">如何面试一名前端开发工程师？</a></li></p>\n<p><li><a href=\"https://github.com/hawx1993/Front-end-Interview-questions?spm=5176.100239.blogcont82041.397.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.397\" target=\"_blank\" rel=\"external\">史上最全 前端开发面试问题及答案整理</a></li></p>\n<p><li><a href=\"http://www.cnblogs.com/xiaoruo/p/4665163.html?spm=5176.100239.blogcont82041.398.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.398\" target=\"_blank\" rel=\"external\">前端实习生面试总结 </a></li></p>\n<p><li><a href=\"https://github.com/hawx1993/Front-end-Interview-questions?spm=5176.100239.blogcont82041.399.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.399\" target=\"_blank\" rel=\"external\">史上最全 前端开发面试问题及答案整理</a></li></p>\n<p><li><a href=\"http://blog.jobbole.com/78738/?spm=5176.100239.blogcont82041.400.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.400\" target=\"_blank\" rel=\"external\">BAT及各大互联网公司2014前端笔试面试题：JavaScript篇</a></li></p>\n<p><li><a href=\"https://github.com/paddingme/Front-end-Web-Development-Interview-Question?spm=5176.100239.blogcont82041.401.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.401\" target=\"_blank\" rel=\"external\">前端开发面试题大收集</a></li></p>\n<p><li><a href=\"https://github.com/qiu-deqing/FE-interview?spm=5176.100239.blogcont82041.402.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.402\" target=\"_blank\" rel=\"external\">收集的前端面试题和答案</a></li></p>\n<p><li><a href=\"http://www.zhihu.com/question/19568008?spm=5176.100239.blogcont82041.403.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.403\" target=\"_blank\" rel=\"external\">如何面试前端工程师</a></li></p>\n<p><li><a href=\"https://github.com/markyun/My-blog/blob/master/Front-end-Developer-Questions/Questions-and-Answers/README.md?spm=5176.100239.blogcont82041.404.jiu0a3&amp;file=README.md\" data-spm-anchor-id=\"5176.100239.blogcont82041.404\" target=\"_blank\" rel=\"external\">前端开发面试题</a></li></p>\n<p><li><a href=\"http://www.nowcoder.com/discuss?spm=5176.100239.blogcont82041.405.jiu0a3&amp;type=2\" data-spm-anchor-id=\"5176.100239.blogcont82041.405\" target=\"_blank\" rel=\"external\">牛客网-笔试面经</a></li><br></p>\n<p></p><h3 id=\"59\">十五. iconfont</h3><p></p>\n<p><ul></ul></p>\n<p><li><a href=\"http://www.zhihu.com/question/21253343?spm=5176.100239.blogcont82041.406.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.406\" target=\"_blank\" rel=\"external\">中文字体</a></li></p>\n<p><li><a href=\"http://iconfont.cn?spm=5176.100239.blogcont82041.407.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.407\" target=\"_blank\" rel=\"external\">淘宝字库</a></li></p>\n<p><li><a href=\"http://mux.alimama.com/fonts?spm=5176.100239.blogcont82041.408.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.408\" target=\"_blank\" rel=\"external\">字体</a></li></p>\n<p><li><a href=\"http://iconfont.cn/help/platform.html?spm=5176.100239.blogcont82041.409.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.409\" target=\"_blank\" rel=\"external\">制作教程</a></li></p>\n<p><li><a href=\"http://www.zhangxinxu.com/wordpress/?spm=5176.100239.blogcont82041.410.jiu0a3&amp;s=icomoon\" data-spm-anchor-id=\"5176.100239.blogcont82041.410\" target=\"_blank\" rel=\"external\">zhangxinxu-icommon</a></li></p>\n<p><li><a href=\"https://icomoon.io/app/?spm=5176.100239.blogcont82041.411.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.411\" target=\"_blank\" rel=\"external\">icommon</a></li></p>\n<p><li><a href=\"http://imooc.com/learn/243?spm=5176.100239.blogcont82041.412.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.412\" target=\"_blank\" rel=\"external\">用字体在网页中画ICON图标(推荐教程)</a></li></p>\n<p><li><a href=\"http://font-spider.org/?spm=5176.100239.blogcont82041.413.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.413\" target=\"_blank\" rel=\"external\">字体压缩工具</a> 感谢初级群　[深圳-小鱼] 的推荐</li><br></p>\n<p></p><h3 id=\"60\">十六. 开发工具类</h3><p></p>\n<p><ol></ol></p>\n<p><li>前端开发工具</li><br></p>\n<ul>\n<li><a href=\"https://github.com/judasn/IntelliJ-IDEA-Tutorial\" target=\"_blank\" rel=\"external\">IntelliJ IDEA 简体中文专题教程</a></li>\n<li><a href=\"http://t.cn/8kZZ1Uy\" target=\"_blank\" rel=\"external\">Webstorm,InterllIdea,Phpstorm</a></li>\n<li><a href=\"https://github.com/jikeytang/sublime-text\" target=\"_blank\" rel=\"external\">SublimeText</a></li>\n<li><a href=\"https://atom.io/\" target=\"_blank\" rel=\"external\">Atom</a></li>\n<li><a href=\"https://code.visualstudio.com/\" target=\"_blank\" rel=\"external\">visual studio code</a><ol><br><li><br><p>Chrome, Firebug, Filddle 调试</p><br><ol><br><li>Fiddler<br><ul><br><li><a href=\"http://www.cnblogs.com/tugenhua0707/p/4623317.html?spm=5176.100239.blogcont82041.414.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.414\" target=\"_blank\" rel=\"external\">Fiddler调式使用知多少(一)深入研究</a></li><br><li><a href=\"http://www.cnblogs.com/strick/p/4570006.html?spm=5176.100239.blogcont82041.415.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.415\" target=\"_blank\" rel=\"external\">微信fiddle</a></li><br><li><a href=\"http://gaoboy.com/article/26.html?spm=5176.100239.blogcont82041.416.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.416\" target=\"_blank\" rel=\"external\">微信fiddle</a></li><br><li><a href=\"\"></a></li><br></ul><br></li><br><li>Chrome<br><ul><br><li><a href=\"https://developer.chrome.com/devtools?spm=5176.100239.blogcont82041.417.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.417\" target=\"_blank\" rel=\"external\">Google Chrome 官方</a></li><br><li><a href=\"http://www.cnblogs.com/constantince/p/4565261.html?spm=5176.100239.blogcont82041.418.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.418\" target=\"_blank\" rel=\"external\">Chrome - 基础</a></li><br><li><a href=\"http://www.cnblogs.com/constantince/p/4579121.html?spm=5176.100239.blogcont82041.419.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.419\" target=\"_blank\" rel=\"external\">Chrome - 进阶</a></li><br><li><a href=\"http://www.cnblogs.com/constantince/p/4585983.html?spm=5176.100239.blogcont82041.420.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.420\" target=\"_blank\" rel=\"external\">Chrome - 性能</a></li><br><li><a href=\"http://www.cnblogs.com/constantince/p/4607497.html?spm=5176.100239.blogcont82041.421.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.421\" target=\"_blank\" rel=\"external\">Chrome - 性能进阶</a></li><br><li><a href=\"http://www.cnblogs.com/constantince/p/4624241.html?spm=5176.100239.blogcont82041.422.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.422\" target=\"_blank\" rel=\"external\">Chrome - 移动</a></li><br><li><a href=\"http://www.cnblogs.com/liyunhua/p/4544738.html?spm=5176.100239.blogcont82041.423.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.423\" target=\"_blank\" rel=\"external\">Chrome - 使用技巧</a></li><br><li><a href=\"http://www.cnblogs.com/Wayou/p/chrome-console-tips-and-tricks.html?spm=5176.100239.blogcont82041.424.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.424\" target=\"_blank\" rel=\"external\">Chrome - Console控制台不完全指南</a></li><br><li><a href=\"http://c7sky.com/chrome-devtools-workspace.html?spm=5176.100239.blogcont82041.425.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.425\" target=\"_blank\" rel=\"external\">Chrome - Workspace使浏览器变成IDE</a></li><br><li><a href=\"http://www.html-js.com/article/Nothing-blind%202975?spm=5176.100239.blogcont82041.426.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.426\" target=\"_blank\" rel=\"external\">network面板</a></li><br><li><a href=\"http://anti-code.com/devtools-cheatsheet/?spm=5176.100239.blogcont82041.427.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.427\" target=\"_blank\" rel=\"external\">chrome开发工具快捷键</a></li><br><li><a href=\"http://www.html-js.com/article/2327?spm=5176.100239.blogcont82041.428.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.428\" target=\"_blank\" rel=\"external\">chrome调试工具常用功能整理</a></li><br><li><a href=\"http://www.iinterest.net/2014/05/09/chrome-dev-tool-workspace/?spm=5176.100239.blogcont82041.429.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.429\" target=\"_blank\" rel=\"external\">Chrome 开发工具 Workspace 使用</a></li><br><li><a href=\"http://www.cppblog.com/deercoder/archive/2011/10/22/158886.html?spm=5176.100239.blogcont82041.430.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.430\" target=\"_blank\" rel=\"external\">Chrome神器Vimium快捷键学习记录 </a></li><br><li><a href=\"http://www.w3cplus.com/sassguide/debug.html?spm=5176.100239.blogcont82041.431.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.431\" target=\"_blank\" rel=\"external\">sass调试-w3cplus</a></li><br><li><a href=\"http://www.w3cplus.com/tools/how-to-use-chrome-devtools-like-a-pro.html?spm=5176.100239.blogcont82041.432.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.432\" target=\"_blank\" rel=\"external\">如何更专业的使用Chrome开发者工具-w3cplus</a></li><br><li><a href=\"http://sentsin.com/web/253.html?spm=5176.100239.blogcont82041.433.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.433\" target=\"_blank\" rel=\"external\">chrome调试canvas</a></li><br><li><a href=\"https://developer.chrome.com/devtools/index?spm=5176.100239.blogcont82041.434.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.434\" target=\"_blank\" rel=\"external\">chrome profiles1</a></li><br><li><a href=\"http://h5dev.uc.cn/article-25-1.html?spm=5176.100239.blogcont82041.435.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.435\" target=\"_blank\" rel=\"external\">chrome profiles2</a></li><br><li><a href=\"http://www.oschina.net/translate/performance-optimisation-with-timeline-profiles?spm=5176.100239.blogcont82041.436.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.436\" target=\"_blank\" rel=\"external\">chrome profiles3</a></li><br><li><a href=\"https://developer.chrome.com/devtools/docs/mobile-emulation?spm=5176.100239.blogcont82041.437.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.437\" target=\"_blank\" rel=\"external\">chrome移动版调试</a></li><br><li><a href=\"http://ued.taobao.org/blog/2012/06/debug-with-chrome-dev-tool/?spm=5176.100239.blogcont82041.438.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.438\" target=\"_blank\" rel=\"external\">chrome调试</a></li><br><li><a href=\"http://www.cnblogs.com/QLeelulu/archive/2011/08/28/2156402.html?spm=5176.100239.blogcont82041.439.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.439\" target=\"_blank\" rel=\"external\">chrome的调试</a></li><br><li><a href=\"https://developer.chrome.com/devtools/docs/commandline-api?spm=5176.100239.blogcont82041.440.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.440\" target=\"_blank\" rel=\"external\">chrome console 命令详解</a></li><br><li><a href=\"http://www.cnblogs.com/leonkao/p/3809655.html?spm=5176.100239.blogcont82041.441.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.441\" target=\"_blank\" rel=\"external\">查看事件绑定1</a></li><br><li><a href=\"http://www.cnblogs.com/xiaoyao2011/p/3447421.html?spm=5176.100239.blogcont82041.442.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.442\" target=\"_blank\" rel=\"external\">查看事件绑定2</a></li><br><li><a href=\"http://segmentfault.com/a/1190000000683599?spm=5176.100239.blogcont82041.443.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.443\" target=\"_blank\" rel=\"external\">神器——Chrome开发者工具(一)</a></li><br><li><a href=\"https://xinranliu.me/2015-05-22-qiqu-performance/?spm=5176.100239.blogcont82041.444.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.444\" target=\"_blank\" rel=\"external\">奇趣百科性能优化(Chrome DevTools 中的 Timeline Profils 等工具使用介绍)</a></li><br><li><a href=\"http://frontenddev.org/link/15-tips-of-chrome-developer-tools.html?spm=5176.100239.blogcont82041.445.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.445\" target=\"_blank\" rel=\"external\">chrome 开发者工具的 15 个小技巧</a></li><br><li><a href=\"http://1ke.co/course/361?spm=5176.100239.blogcont82041.446.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.446\" target=\"_blank\" rel=\"external\">Chrome开发者工具不完全指南</a></li><br><li><a href=\"http://segmentfault.com/a/1190000003882567?spm=5176.100239.blogcont82041.447.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.447\" target=\"_blank\" rel=\"external\">Chrome 开发者工具使用技巧</a></li><br></ul><br></li><br><li>Firebug<br><ul><br><li><a href=\"http://www.imooc.com/learn/137?spm=5176.100239.blogcont82041.448.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.448\" target=\"_blank\" rel=\"external\">firebug视频教程</a></li><br><li><a href=\"https://developer.mozilla.org/zh-CN/docs/Tools/WebIDE?spm=5176.100239.blogcont82041.449.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.449\" target=\"_blank\" rel=\"external\">firefox 模拟器</a></li><br><li><a href=\"http://www.cnblogs.com/ctriphire/p/4116207.html?spm=5176.100239.blogcont82041.450.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.450\" target=\"_blank\" rel=\"external\">console.log 命令详解</a></li><br><li><a href=\"http://www.ruanyifeng.com/blog/2008/06/firebug_tutorial.html?spm=5176.100239.blogcont82041.451.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.451\" target=\"_blank\" rel=\"external\">Firebug入门指南</a></li><br><li><a href=\"http://www.ruanyifeng.com/blog/2011/03/firebug_console_tutorial.html?spm=5176.100239.blogcont82041.452.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.452\" target=\"_blank\" rel=\"external\">Firebug控制台详解</a></li><br><li><a href=\"\"></a></li><br></ul><br></li><br><li>移动,微信调试<br><ul><br><li><a href=\"https://openstf.github.io/?spm=5176.100239.blogcont82041.453.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.453\" target=\"_blank\" rel=\"external\">浏览器端调试安卓</a></li><br><li><a href=\"http://yujiangshui.com/multidevice-frontend-debug/?spm=5176.100239.blogcont82041.454.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.454\" target=\"_blank\" rel=\"external\">移动端前端开发调试</a></li><br><li><a href=\"https://github.com/yujiangshui/CN-Chrome-DevTools/blob/remote-debugging/md/Use-Tools/remote-debugging.md?spm=5176.100239.blogcont82041.455.jiu0a3&amp;file=remote-debugging.md\" data-spm-anchor-id=\"5176.100239.blogcont82041.455\" target=\"_blank\" rel=\"external\">使用 Chrome 远程调试 Android 设备</a></li><br><li><a href=\"http://plus.uc.cn/document/webapp/doc5.html?spm=5176.100239.blogcont82041.456.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.456\" target=\"_blank\" rel=\"external\">mac移动端调试</a></li><br><li><a href=\"http://www.mihtool.com/?spm=5176.100239.blogcont82041.457.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.457\" target=\"_blank\" rel=\"external\">mac移动端调试</a></li><br><li><a href=\"http://thx.github.io/mobile/debugging-in-mobile/?spm=5176.100239.blogcont82041.458.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.458\" target=\"_blank\" rel=\"external\">无线调试攻略</a></li><br><li><a href=\"http://yanhaijing.com/mobile/2014/12/17/web-debug-for-mobile/?spm=5176.100239.blogcont82041.459.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.459\" target=\"_blank\" rel=\"external\">无线调试攻略</a></li><br><li><a href=\"http://www.jianshu.com/p/ccf124f1f74b?spm=5176.100239.blogcont82041.460.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.460\" target=\"_blank\" rel=\"external\">屌爆了,完美调试 微信webview(x5)</a></li><br><li><a href=\"http://liyaodong.com/2015/07/06/%E5%BE%AE%E4%BF%A1%E8%B0%83%E8%AF%95%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/?spm=5176.100239.blogcont82041.461.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.461\" target=\"_blank\" rel=\"external\">微信调试的那些事</a></li><br><li><a href=\"http://jsconsole.com/?spm=5176.100239.blogcont82041.462.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.462\" target=\"_blank\" rel=\"external\">远程console</a></li><br><li><a href=\"http://blog.qqbrowser.cc/?spm=5176.100239.blogcont82041.463.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.463\" target=\"_blank\" rel=\"external\">微信调试工具</a></li><br><li><a href=\"https://github.com/jieyou/remote_inspect_web_on_real_device?spm=5176.100239.blogcont82041.464.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.464\" target=\"_blank\" rel=\"external\">各种真机远程调试方法汇总</a></li><br></ul><br></li><br><li>iOS Simulator<br><ul><br><li><a href=\"https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/iOS_Simulator_Guide/Introduction/Introduction.html?spm=5176.100239.blogcont82041.465.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.465\" target=\"_blank\" rel=\"external\">Simulator</a></li><br><li><a href=\"http://www.crifan.com/intro_ios_simulator_in_xcode_and_usage_summary/?spm=5176.100239.blogcont82041.466.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.466\" target=\"_blank\" rel=\"external\">Xcode中的iOS模拟器(iOS Simulator)的介绍和使用心得</a></li><br></ul><br></li><br></ol><br></li><br><li><p>img</p></li><br></ol></li>\n<li><a href=\"http://preloaders.net/en/circular\" target=\"_blank\" rel=\"external\">loading img</a></li>\n<li><a href=\"http://zhitu.isux.us/\" target=\"_blank\" rel=\"external\">智图-图片优化平台</a></li>\n<li><a href=\"https://tinypng.com/\" target=\"_blank\" rel=\"external\">在线png优化</a><ol><br><li>生成二维码</li><br></ol></li>\n<li><a href=\"http://cli.im/\" target=\"_blank\" rel=\"external\">生成二维码</a><ol><br><li><br><p>浏览器同步</p><br><ul><br><li><a href=\"https://github.com/leeluolee/puer?spm=5176.100239.blogcont82041.467.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.467\" target=\"_blank\" rel=\"external\">puer</a></li><br><li><a href=\"http://livereload.com/?spm=5176.100239.blogcont82041.468.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.468\" target=\"_blank\" rel=\"external\">liveReload</a></li><br><li><a href=\"http://getf5.com/?spm=5176.100239.blogcont82041.469.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.469\" target=\"_blank\" rel=\"external\">f5</a></li><br><li><a href=\"http://geek100.com/2608/?spm=5176.100239.blogcont82041.470.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.470\" target=\"_blank\" rel=\"external\">File Watchers</a></li><br></ul><br></li><br><li><br><p>在线PPT制作</p><br><ul><br><li><a href=\"http://js8.in/2013/11/16/%E6%8E%A8%E8%8D%90nodeppt%EF%BC%9A%E4%BD%BF%E7%94%A8markdown%E8%AF%AD%E6%B3%95%E6%9D%A5%E5%86%99%E7%BD%91%E9%A1%B5ppt/?spm=5176.100239.blogcont82041.471.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.471\" target=\"_blank\" rel=\"external\">nodePPT</a></li><br><li><a href=\"https://github.com/ksky521/nodePPT?spm=5176.100239.blogcont82041.472.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.472\" target=\"_blank\" rel=\"external\">PPT</a></li><br><li><a href=\"https://github.com/hakimel/reveal.js/?spm=5176.100239.blogcont82041.473.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.473\" target=\"_blank\" rel=\"external\">reveal</a></li><br><li><a href=\"https://github.com/Seldaek/slippy?spm=5176.100239.blogcont82041.474.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.474\" target=\"_blank\" rel=\"external\">slippy</a></li><br></ul><br></li><br></ol><br><h3 id=\"61\">十七. 前端导航网站</h3><br><ul><br><li><a href=\"http://uxbees.com/index.html?spm=5176.100239.blogcont82041.475.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.475\" target=\"_blank\" rel=\"external\">界面清爽的前端导航</a></li><br><li><a href=\"http://whycss.com/?spm=5176.100239.blogcont82041.476.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.476\" target=\"_blank\" rel=\"external\">前端导航</a></li><br><li><a href=\"http://www.daqianduan.com/nav?spm=5176.100239.blogcont82041.477.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.477\" target=\"_blank\" rel=\"external\">前端网址导航</a></li><br><li><a href=\"http://sentsin.com/daohang/?spm=5176.100239.blogcont82041.478.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.478\" target=\"_blank\" rel=\"external\">前端名录</a></li><br><li><a href=\"http://123.jser.us/?spm=5176.100239.blogcont82041.479.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.479\" target=\"_blank\" rel=\"external\">前端导航</a></li><br><li><a href=\"http://www.css88.com/nav/?spm=5176.100239.blogcont82041.480.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.480\" target=\"_blank\" rel=\"external\">前端开发资源</a></li><br><li><a href=\"http://www.haourl.cn/?spm=5176.100239.blogcont82041.481.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.481\" target=\"_blank\" rel=\"external\">网址导航</a></li><br><li><a href=\"http://code.ciaoca.com/?spm=5176.100239.blogcont82041.482.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.482\" target=\"_blank\" rel=\"external\">前端开发仓库 - 众多效果的收集地</a> </li><br><li><a href=\"https://github.com/jnoodle/f2e-collect?spm=5176.100239.blogcont82041.483.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.483\" target=\"_blank\" rel=\"external\">前端资源导航</a></li><br><li><a href=\"http://f2e.im/static/pages/nav/index.html?spm=5176.100239.blogcont82041.484.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.484\" target=\"_blank\" rel=\"external\">F2E 前端导航</a></li><br></ul><br><h3 id=\"62\">十八. 常用CDN</h3><br><ul><br><li><a href=\"http://lib.sinaapp.com/?spm=5176.100239.blogcont82041.485.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.485\" target=\"_blank\" rel=\"external\">新浪CDN</a></li><br><li><a href=\"http://cdn.code.baidu.com/?spm=5176.100239.blogcont82041.486.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.486\" target=\"_blank\" rel=\"external\">百度静态资源公共库</a></li><br><li><a href=\"http://libs.useso.com/?spm=5176.100239.blogcont82041.487.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.487\" target=\"_blank\" rel=\"external\">360网站卫士常用前端公共库CDN服务</a></li><br><li><a href=\"http://www.bootcdn.cn/?spm=5176.100239.blogcont82041.488.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.488\" target=\"_blank\" rel=\"external\">Bootstrap中文网开源项目免费 CDN 服务</a></li><br><li><a href=\"http://staticfile.org/?spm=5176.100239.blogcont82041.489.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.489\" target=\"_blank\" rel=\"external\">开放静态文件 CDN - 七牛</a></li><br><li><a href=\"http://www.jq22.com/cdn/?spm=5176.100239.blogcont82041.490.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.490\" target=\"_blank\" rel=\"external\">CDN加速 - jq22</a></li><br><li><a href=\"http://code.jquery.com/?spm=5176.100239.blogcont82041.491.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.491\" target=\"_blank\" rel=\"external\">jQuery CDN</a></li><br><li><a href=\"http://www.google-jquery-cdn.com/?spm=5176.100239.blogcont82041.492.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.492\" target=\"_blank\" rel=\"external\">Google jQuery CDN</a></li><br><li><a href=\"http://www.asp.net/ajax/cdn?spm=5176.100239.blogcont82041.493.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.493\" target=\"_blank\" rel=\"external\">微软CDN</a></li><br></ul><br><h3 id=\"63\">十九. Git,SVN,Github</h3><br><ol><br><li>Git</li><br></ol></li>\n<li><a href=\"http://git-scm.com/\" target=\"_blank\" rel=\"external\">git-scm</a></li>\n<li><a href=\"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\" target=\"_blank\" rel=\"external\">廖雪峰-Git教程</a></li>\n<li><a href=\"https://git-for-windows.github.io/\" target=\"_blank\" rel=\"external\">git-for-windows</a></li>\n<li><a href=\"http://daemon369.github.io/git/2015/03/10/add-ssh-keys-for-github/\" target=\"_blank\" rel=\"external\">GitHub 添加 SSH keys</a></li>\n<li><a href=\"http://www.worldhello.net/gotgithub/index.html\" target=\"_blank\" rel=\"external\">gogithub</a></li>\n<li><a href=\"http://pcottle.github.io/learnGitBranching/\" target=\"_blank\" rel=\"external\">git常规命令练习</a></li>\n<li><a href=\"https://github.com/xirong/my-git\" target=\"_blank\" rel=\"external\">git的资料整理</a></li>\n<li><a href=\"http://www.cnblogs.com/fanfan259/p/4810517.html\" target=\"_blank\" rel=\"external\">我所记录的git命令（非常实用）</a></li>\n<li><a href=\"https://github.com/xirong/my-git/blob/master/git-workflow-tutorial.md\" target=\"_blank\" rel=\"external\">企业开发git工作流模式探索部分休整</a></li>\n<li><a href=\"https://github.com/phodal/github-roam\" target=\"_blank\" rel=\"external\">GitHub 漫游指南</a></li>\n<li><a href=\"https://github.com/tiimgreen/github-cheat-sheet/blob/master/README.zh-cn.md\" target=\"_blank\" rel=\"external\">GitHub秘籍</a></li>\n<li><a href=\"http://livoras.com/post/28\" target=\"_blank\" rel=\"external\">使用git和github进行协同开发流程</a></li>\n<li><a href=\"http://onlywei.github.io/explain-git-with-d3/\" target=\"_blank\" rel=\"external\">动画方式练习git</a></li>\n</ul>\n<p></p>\n","excerpt":"<h3 id=\"综合类\"><a href=\"#综合类\" class=\"headerlink\" title=\"综合类\"></a>综合类</h3><ul>\n<li><a href=\"http://www.cnblogs.com/sb19871023/p/3894452.html\">前端知识体系</a></li>\n<li><a href=\"https://github.com/JacksonTian/fks\">前端知识结构</a></li>\n<li><a href=\"https://github.com/unruledboy/WebFrontEndStack\">Web前端开发大系概览</a></li>\n<li><a href=\"http://www.cnblogs.com/unruledboy/p/WebFrontEndStack.html\">Web前端开发大系概览-中文版</a></li>\n<li><a href=\"https://raw.githubusercontent.com/unruledboy/WebFrontEndStack/master/Web%20Front%20End%20Stack.png\">Web Front-end Stack v2.2</a></li>\n<li><a href=\"https://github.com/justjavac/free-programming-books-zh_CN\">免费的编程中文书籍索引</a></li>\n<li><a href=\"https://github.com/dypsilon/frontend-dev-bookmarks\">前端书籍</a></li>\n<li><a href=\"https://github.com/vhf/free-programming-books\">前端免费书籍大全</a></li>\n<li><a href=\"http://www.cnblogs.com/sb19871023/p/3894452.html\">前端知识体系</a></li>\n<li><a href=\"https://github.com/justjavac/free-programming-books-zh_CN\">免费的编程中文书籍索引</a></li>\n<li><a href=\"http://study.163.com/course/introduction/224014.htm\">智能社 - 精通JavaScript开发</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/A_re-introduction_to_JavaScript\">重新介绍 JavaScript（JS 教程）</a></li>\n<li><a href=\"http://v.163.com/special/opencourse/bianchengdaolun.html\">麻省理工学院公开课：计算机科学及编程导论</a></li>\n<li><a href=\"http://segmentfault.com/a/1190000002640298\">JavaScript中的this陷阱的最全收集–没有之一</a></li>\n<li><a href=\"https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch1.html\">JS函数式编程指南</a></li>\n<li><a href=\"http://liubin.github.io/promises-book/\">JavaScript Promise迷你书（中文版）</a></li>\n<li><a href=\"https://github.com/AlloyTeam/Mars\">腾讯移动Web前端知识库</a></li>\n<li><a href=\"https://github.com/Front-End-Developers-Hunan/Front-End-Develop-Guide\">Front-End-Develop-Guide 前端开发指南</a></li>\n<li><a href=\"https://li-xinyang.gitbooks.io/frontend-notebook/content/\">前端开发笔记本</a></li>\n<li><a href=\"https://github.com/nieweidong/fetool\">大前端工具集 - 聂微东</a></li>\n<li><a href=\"https://dwqs.gitbooks.io/frontenddevhandbook/content/\">前端开发者手册</a></li>\n</ul>","more":"<h3 id=\"入门类\"><a href=\"#入门类\" class=\"headerlink\" title=\"入门类\"></a>入门类</h3><ul>\n<li><a href=\"http://www.cnblogs.com/jikey/p/3613082.html\">前端入门教程</a></li>\n<li><a href=\"http://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000\">瘳雪峰的Javascript教程</a></li>\n<li><a href=\"http://www.imooc.com/view/11\">jQuery基础教程</a></li>\n<li><a href=\"http://www.imooc.com/view/506\">前端工程师必备的PS技能——切图篇</a></li>\n<li><a href=\"https://github.com/qiu-deqing/FE-learning\">结合个人经历总结的前端入门方法</a></li>\n</ul>\n<h3 id=\"效果类\"><a href=\"#效果类\" class=\"headerlink\" title=\"效果类\"></a>效果类</h3><ul>\n<li><a href=\"http://www.imooc.com/learn/58\">弹出层</a></li>\n<li><a href=\"http://www.imooc.com/learn/18\">焦点图轮播特效</a></li>\n</ul>\n<h3 id=\"工具类\"><a href=\"#工具类\" class=\"headerlink\" title=\"工具类\"></a>工具类</h3><ul>\n<li><a href=\"http://www.imooc.com/learn/93\">css sprite 雪碧图制作</a></li>\n<li><a href=\"http://www.imooc.com/learn/390\">版本控制入门 – 搬进 Github</a></li>\n<li><a href=\"http://www.imooc.com/learn/30\">Grunt-beginner前端自动化工具</a></li>\n</ul>\n<h3 id=\"慕课专题\"><a href=\"#慕课专题\" class=\"headerlink\" title=\"慕课专题\"></a>慕课专题</h3><ul>\n<li><a href=\"http://www.imooc.com/space/teacher/id/197450\">张鑫旭 - 慕课系列</a></li>\n<li><a href=\"http://www.imooc.com/space/teacher/id/104593\">lyn - 慕课系列</a></li>\n<li><a href=\"http://www.imooc.com/space/teacher/id/290139\">艾伦 - 慕课系列</a></li>\n<li><a href=\"http://www.imooc.com/view/494\">碧仔 - Hello，移动WEB</a></li>\n</ul>\n<h3 id=\"周报类\"><a href=\"#周报类\" class=\"headerlink\" title=\"周报类\"></a>周报类</h3><ul>\n<li><a href=\"https://github.com/PaicHyperionDev/MobileDevWeekly\">平安科技移动开发二队技术周报</a></li>\n</ul>\n<h2 id=\"六-API\"><a href=\"#六-API\" class=\"headerlink\" title=\"六. API:\"></a>六. API:</h2><h3 id=\"总目录\"><a href=\"#总目录\" class=\"headerlink\" title=\"总目录\"></a>总目录</h3><h4 id=\"开发中心\"><a href=\"#开发中心\" class=\"headerlink\" title=\"开发中心\"></a>开发中心</h4><ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript\">mozilla js参考</a></li>\n<li><a href=\"https://developer.chrome.com/extensions/api_index.html\">chrome开发中心（chrome的内核已转向blink）</a></li>\n<li><a href=\"https://developer.apple.com/library/safari/navigation\">safari开发中心</a></li>\n<li><a href=\"https://msdn.microsoft.com/zh-cn/library/d1et7k7c(v=vs.94\">microsoft js参考</a>.aspx)</li>\n<li><a href=\"http://sanshi.me/articles/JavaScript-Garden-CN/html/index.html\">js秘密花园</a></li>\n<li><a href=\"http://bonsaiden.github.io/JavaScript-Garden/zh/\">js秘密花园</a></li>\n<li><a href=\"http://www.w3help.org/\">w3help</a> 综合Bug集合网站</li>\n</ul>\n<h4 id=\"综合搜索\"><a href=\"#综合搜索\" class=\"headerlink\" title=\"综合搜索\"></a>综合搜索</h4><ul>\n<li><a href=\"http://www.javascripting.com/\">javascripting</a></li>\n<li><a href=\"http://microjs.com/\">各种流行库搜索</a></li>\n</ul>\n<h4 id=\"综合API\"><a href=\"#综合API\" class=\"headerlink\" title=\"综合API\"></a>综合API</h4><ul>\n<li><a href=\"http://www.runoob.com/\">runoob.com-包含各种API集合</a></li>\n<li><a href=\"http://tool.oschina.net/apidocs\">开源中国在线API文档合集</a></li>\n<li><a href=\"http://devdocs.io/\">devdocs</a> 英文综合API网站</li>\n</ul>\n<h4 id=\"2-jQuery\"><a href=\"#2-jQuery\" class=\"headerlink\" title=\"2. jQuery\"></a>2. jQuery</h4><p><ul></p>\n<li><a href=\"http://www.jquery123.com/?spm=5176.100239.blogcont82041.18.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.18\">jQuery API 中文文档</a></li><br><li><a href=\"http://hemin.cn/jq/?spm=5176.100239.blogcont82041.19.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.19\">hemin 在线版</a></li><br><li><a href=\"http://www.css88.com/jqapi-1.9/on/?spm=5176.100239.blogcont82041.20.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.20\">css88 jq api</a></li><br><li><a href=\"http://www.css88.com/jquery-ui-api/?spm=5176.100239.blogcont82041.21.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.21\">css88 jqui api</a></li><br><li><a href=\"http://learn.jquery.com/?spm=5176.100239.blogcont82041.22.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.22\">学习jquery</a></li><br><li><a href=\"http://james.padolsey.com/jquery/?spm=5176.100239.blogcont82041.23.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.23\">jquery 源码查找</a></li><br></ul><br><h4 id=\"4\">3. Ecmascript</h4><br><ul><br><li><a href=\"https://leanpub.com/understandinges6/read?spm=5176.100239.blogcont82041.24.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.24\">Understanding ECMAScript 6 - Nicholas C. Zakas</a></li><br><li><a href=\"https://leanpub.com/exploring-es6/read?spm=5176.100239.blogcont82041.25.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.25\">exploring-es6</a></li><br><li><a href=\"https://github.com/es6-org/exploring-es6?spm=5176.100239.blogcont82041.26.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.26\">exploring-es6翻译</a></li><br><li><a href=\"http://es6-org.github.io/exploring-es6/?spm=5176.100239.blogcont82041.27.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.27\">exploring-es6翻译后预览</a></li><br><li><a href=\"http://es6.ruanyifeng.com/?spm=5176.100239.blogcont82041.28.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.28\">阮一峰 es6</a></li><br><li><a href=\"http://javascript.ruanyifeng.com/?spm=5176.100239.blogcont82041.29.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.29\">阮一峰 Javascript</a></li><br><li><a href=\"http://yanhaijing.com/es5/?spm=5176.100239.blogcont82041.30.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.30\">ECMA-262，第 5 版</a></li><br><li><a href=\"http://es5.github.io/?spm=5176.100239.blogcont82041.31.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.31\">es5</a></li><br></ul><br><h4 id=\"5\">4. Js template</h4><br><ul><br><li><a href=\"http://garann.github.io/template-chooser/?spm=5176.100239.blogcont82041.32.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.32\">template-chooser</a></li><br><li><a href=\"https://github.com/aui/artTemplate?spm=5176.100239.blogcont82041.33.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.33\">artTemplate</a></li><br><li><a href=\"https://github.com/aui/tmodjs/blob/master/README.md?spm=5176.100239.blogcont82041.34.jiu0a3&amp;file=README.md\" data-spm-anchor-id=\"5176.100239.blogcont82041.34\">tomdjs</a></li><br><li><a href=\"http://juicer.name/docs/docs_zh_cn.html?spm=5176.100239.blogcont82041.35.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.35\">淘宝模板juicer模板</a></li><br><li><a href=\"http://koen301.github.io/fxtpl/?spm=5176.100239.blogcont82041.36.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.36\">Fxtpl v1.0 繁星前端模板引擎</a></li><br><li><a href=\"http://laytpl.layui.com/?spm=5176.100239.blogcont82041.37.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.37\">laytpl</a></li><br><li><a href=\"https://github.com/mozilla/nunjucks?spm=5176.100239.blogcont82041.38.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.38\">mozilla - nunjucks</a></li><br><li><a href=\"https://github.com/PaulGuo/Juicer?spm=5176.100239.blogcont82041.39.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.39\">Juicer</a></li><br><li><a href=\"http://akdubya.github.io/dustjs/?spm=5176.100239.blogcont82041.40.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.40\">dustjs</a></li><br><li><a href=\"http://ecomfe.github.io/etpl/?spm=5176.100239.blogcont82041.41.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.41\">etpl</a></li><br></ul><br><h4 id=\"6\">5. 弹出层</h4><br><ul><br><li><a href=\"https://github.com/aui/artDialog?spm=5176.100239.blogcont82041.42.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.42\">artDialog 最新版</a></li><br><li><a href=\"http://aui.github.io/artDialog/doc/index.html?spm=5176.100239.blogcont82041.43.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.43\">artDialog 文档</a></li><br><li><a href=\"https://code.google.com/p/artdialog/downloads/list?spm=5176.100239.blogcont82041.44.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.44\">google code 下载地址</a></li><br><li><a href=\"http://layer.layui.com/?spm=5176.100239.blogcont82041.45.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.45\">贤心弹出层</a></li><br><li><a href=\"https://github.com/bh-lay/UI?spm=5176.100239.blogcont82041.46.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.46\">响应式用户交互组件库</a></li><br><li><a href=\"http://t4t5.github.io/sweetalert/?spm=5176.100239.blogcont82041.47.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.47\">sweetalert-有css3动画弹出层</a></li><br></ul><br><h4 id=\"7\">6. CSS</h4><br><ul><br><li><a href=\"http://tympanus.net/codrops/css_reference/?spm=5176.100239.blogcont82041.48.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.48\">CSS 语法参考</a></li><br><li><a href=\"http://isux.tencent.com/css3/index.html?spm=5176.100239.blogcont82041.49.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.49\">CSS3动画手册</a></li><br><li><a href=\"http://isux.tencent.com/css3/tools.html?spm=5176.100239.blogcont82041.50.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.50\">腾讯css3动画制作工具</a></li><br><li><a href=\"http://linxz.github.io/tianyizone/?spm=5176.100239.blogcont82041.51.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.51\">志爷css小工具集合</a></li><br><li><a href=\"http://www.note12.com/category/blog/2014-6-5/538fe0a9f786f1b7019a4dfb?spm=5176.100239.blogcont82041.52.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.52\">css3 js 移动大杂烩</a></li><br><li><a href=\"http://bouncejs.com/?spm=5176.100239.blogcont82041.53.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.53\">bouncejs 触摸库</a></li><br><li><a href=\"http://fian.my.id/Waves/?spm=5176.100239.blogcont82041.54.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.54\">css3 按钮动画</a></li><br><li><a href=\"http://daneden.github.io/animate.css/?spm=5176.100239.blogcont82041.55.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.55\">animate.css</a></li><br><li><a href=\"http://www.alloyteam.com/2015/10/8536/?spm=5176.100239.blogcont82041.56.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.56\">全局CSS的终结(狗带) [译]</a></li><br></ul><br><h4 id=\"8\">7. Angularjs</h4><br><ul><br><li><a href=\"https://github.com/dolymood/AngularLearning?spm=5176.100239.blogcont82041.57.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.57\">Angular.js 的一些学习资源</a></li><br><li><a href=\"http://angularjs.cn/?spm=5176.100239.blogcont82041.58.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.58\">angularjs中文社区</a></li><br><li><a href=\"http://www.cnblogs.com/xuwenmin888/p/3739096.html?spm=5176.100239.blogcont82041.59.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.59\">Angularjs源码学习</a></li><br><li><a href=\"http://www.ifeenan.com/?spm=5176.100239.blogcont82041.60.jiu0a3&amp;c=AngularJS\" data-spm-anchor-id=\"5176.100239.blogcont82041.60\">Angularjs源码学习</a></li><br><li><a href=\"http://angular-ui.github.io/bootstrap/?spm=5176.100239.blogcont82041.61.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.61\">angular对bootstrap的封装</a></li><br><li><a href=\"https://cnodejs.org/topic/51404e0f069911196d2e3923?spm=5176.100239.blogcont82041.62.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.62\">angularjs + nodejs</a></li><br><li><a href=\"http://www.cnblogs.com/lvdabao/tag/AngularJs/?spm=5176.100239.blogcont82041.63.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.63\">吕大豹 Angularjs</a></li><br><li><a href=\"http://www.infoq.com/cn/news/2013/02/angular-web-app?spm=5176.100239.blogcont82041.64.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.64\">AngularJS 最佳实践</a></li><br><li><a href=\"http://www.lovelucy.info/angularjs-best-practices.html?spm=5176.100239.blogcont82041.65.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.65\">Angular的一些扩展指令</a></li><br><li><a href=\"https://github.com/Pasvaz/bindonce?spm=5176.100239.blogcont82041.66.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.66\">Angular数据绑定原理</a></li><br><li><a href=\"https://github.com/angular-ui/?spm=5176.100239.blogcont82041.67.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.67\">一些扩展Angular UI组件</a></li><br><li><a href=\"http://voidcanvas.com/emberjs-vs-angularjs-performance-testing/?spm=5176.100239.blogcont82041.68.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.68\">Ember和AngularJS的性能测试</a></li><br><li><a href=\"http://www.cnblogs.com/powertoolsteam/p/angularjs-introdection.html?spm=5176.100239.blogcont82041.69.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.69\">带你走近AngularJS - 基本功能介绍</a></li><br><li><a href=\"http://angular.duapp.com/docs/guide?spm=5176.100239.blogcont82041.70.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.70\">Angularjs开发指南</a></li><br><li><a href=\"http://www.cnblogs.com/amosli/p/3710648.html?spm=5176.100239.blogcont82041.71.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.71\">Angularjs学习</a></li><br><li><a href=\"http://www.rainweb.cn/article/angularjs-jquery.html?spm=5176.100239.blogcont82041.72.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.72\">不要带着jQuery的思维去学习AngularJS</a></li><br><li><a href=\"http://wangjiatao.diandian.com/?spm=5176.100239.blogcont82041.73.jiu0a3&amp;tag=angularjs\" data-spm-anchor-id=\"5176.100239.blogcont82041.73\">angularjs 学习笔记</a></li><br><li><a href=\"http://www.angularjs.cn/T008?spm=5176.100239.blogcont82041.74.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.74\">angularjs 开发指南</a></li><br><li><a href=\"https://github.com/jmcunningham/AngularJS-Learning?spm=5176.100239.blogcont82041.75.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.75\">angularjs 英文资料</a></li><br><li><a href=\"http://angular-ui.github.io/bootstrap/?spm=5176.100239.blogcont82041.76.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.76\">angular bootstrap</a></li><br><li><a href=\"https://github.com/opitzconsulting/jquery-mobile-angular-adapter?spm=5176.100239.blogcont82041.77.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.77\">angular jq mobile</a></li><br><li><a href=\"http://mgcrea.github.io/angular-strap/?spm=5176.100239.blogcont82041.78.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.78\">angular ui</a></li><br><li><a href=\"http://www.tuicool.com/articles/7ZZVr2?spm=5176.100239.blogcont82041.79.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.79\">整合jQuery Mobile+AngularJS经验谈</a></li><br><li><a href=\"http://blog.jobbole.com/46589/?spm=5176.100239.blogcont82041.80.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.80\">有jQuery背景，该如何用AngularJS编程思想</a></li><br><li><a href=\"http://each.sinaapp.com/angular/?spm=5176.100239.blogcont82041.81.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.81\">AngularJS在线教程</a></li><br><li><a href=\"http://www.zouyesheng.com/angular.html?spm=5176.100239.blogcont82041.82.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.82\">angular学习笔记</a></li><br></ul><br><h4 id=\"9\">8. React</h4><br><ul><br><li><a href=\"http://www.react-china.org/?spm=5176.100239.blogcont82041.83.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.83\">react.js 中文论坛</a></li><br><li><a href=\"https://facebook.github.io/react/index.html?spm=5176.100239.blogcont82041.84.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.84\">react.js 官方网址</a></li><br><li><a href=\"https://facebook.github.io/react/docs/getting-started.html?spm=5176.100239.blogcont82041.85.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.85\">react.js 官方文档</a></li><br><li><a href=\"http://material-ui.com/?spm=5176.100239.blogcont82041.86.jiu0a3#/\" data-spm-anchor-id=\"5176.100239.blogcont82041.86\">react.js material UI</a></li><br><li><a href=\"http://touchstonejs.io/?spm=5176.100239.blogcont82041.87.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.87\">react.js TouchstoneJS UI</a></li><br><li><a href=\"http://amazeui.org/react/?spm=5176.100239.blogcont82041.88.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.88\">react.js amazeui UI</a></li><br><li><a href=\"http://www.ruanyifeng.com/blog/2015/03/react.html?spm=5176.100239.blogcont82041.89.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.89\">React 入门实例教程 - 阮一峰</a></li><br><li><a href=\"http://wiki.jikexueyuan.com/project/react-native/?spm=5176.100239.blogcont82041.90.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.90\">React Native 中文版</a></li><br><li><a href=\"http://www.html-js.com/article/Fakefish%203053?spm=5176.100239.blogcont82041.91.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.91\">Webpack 和 React 小书 - 前端乱炖</a></li><br><li><a href=\"https://fakefish.github.io/react-webpack-cookbook/?spm=5176.100239.blogcont82041.92.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.92\">Webpack 和 React 小书 - gitbook</a></li><br><li><a href=\"https://github.com/webpack/webpack?spm=5176.100239.blogcont82041.93.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.93\">webpack</a></li><br><li><a href=\"http://html-js.com/article/3009?spm=5176.100239.blogcont82041.94.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.94\">Webpack，101入门体验</a></li><br><li><a href=\"http://html-js.com/article/3113?spm=5176.100239.blogcont82041.95.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.95\">webpack入门教程</a></li><br><li><a href=\"http://segmentfault.com/a/1190000003499526?spm=5176.100239.blogcont82041.96.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.96\">基于webpack搭建前端工程解决方案探索</a></li><br><li><a href=\"http://www.piliyu.com/?spm=5176.100239.blogcont82041.97.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.97\">React原创实战视频教程</a></li><br></ul><br><h4 id=\"10\">9. 移动端API</h4><br><ol><br><li>API<br><ul><br><li><a href=\"https://github.com/jtyjty99999/mobileTech?spm=5176.100239.blogcont82041.98.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.98\">99移动端知识集合</a></li><br><li><a href=\"https://github.com/AlloyTeam/Mars?spm=5176.100239.blogcont82041.99.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.99\">移动端前端开发知识库</a></li><br><li><a href=\"http://caibaojian.com/mobile-web-bug.html?spm=5176.100239.blogcont82041.100.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.100\">移动前端的一些坑和解决方法（外观表现）</a></li><br><li><a href=\"http://www.cnblogs.com/PeunZhang/p/3407453.html?spm=5176.100239.blogcont82041.101.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.101\">【原】移动web资源整理</a></li><br><li><a href=\"http://mweb.baidu.com/zeptoapi/?spm=5176.100239.blogcont82041.102.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.102\">zepto 1.0 中文手册</a></li><br><li><a href=\"http://www.html-5.cn/Manual/Zepto/?spm=5176.100239.blogcont82041.103.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.103\">zepto 1.0 中文手册</a></li><br><li><a href=\"http://www.css88.com/doc/zeptojs_api/?spm=5176.100239.blogcont82041.104.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.104\">zepto 1.1.2</a></li><br><li><a href=\"http://www.cnblogs.com/sky000/archive/2013/03/29/2988952.html?spm=5176.100239.blogcont82041.105.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.105\">zepto 中文注释</a></li><br><li><a href=\"http://app-framework-software.intel.com/api.php?spm=5176.100239.blogcont82041.106.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.106\">jqmobile 手册</a></li><br><li><a href=\"https://github.com/maxzhang/maxzhang.github.com/issues?spm=5176.100239.blogcont82041.107.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.107\">移动浏览器开发集合</a></li><br><li><a href=\"https://github.com/hoosin/mobile-web-favorites?spm=5176.100239.blogcont82041.108.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.108\">移动开发大杂烩</a></li><br><li><a href=\"http://lin-chao.github.io/2014/11/14/%E5%BE%AE%E4%BF%A1webview%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/?spm=5176.100239.blogcont82041.109.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.109\">微信webview中的一些问题</a></li><br></ul><br></li><br>#### 框架<br><li><a href=\"http://framework7.taobao.org/?spm=5176.100239.blogcont82041.110.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.110\">特色的HTML框架可以创建精美的iOS应用</a></li><br><li><a href=\"http://m.sui.taobao.org/?spm=5176.100239.blogcont82041.111.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.111\">淘宝SUI</a></li><br></ul><br></li><br></ol><br><h4 id=\"11\">10. avalon</h4><br><ul><br><li><a href=\"http://avalonjs.github.io/?spm=5176.100239.blogcont82041.112.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.112\">avalonjs</a></li><br><li><a href=\"http://ued.qunar.com/oniui/index.html?spm=5176.100239.blogcont82041.113.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.113\">Avalon新一代UI库： OniUI</a></li><br><li><a href=\"https://github.com/RubyLouvre/avalon.oniui?spm=5176.100239.blogcont82041.114.jiu0a3&amp;file=avalon.oniui\" data-spm-anchor-id=\"5176.100239.blogcont82041.114\">avalon.oniui-基于avalon的组件库</a></li><br></ul><br><h4 id=\"12\">11. Requriejs</h4><br><ul><br><li><a href=\"http://www.ruanyifeng.com/blog/2012/10/javascript_module.html?spm=5176.100239.blogcont82041.115.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.115\">Javascript模块化编程（一）：模块的写法 </a></li><br><li><a href=\"http://www.ruanyifeng.com/blog/2012/10/asynchronous_module_definition.html?spm=5176.100239.blogcont82041.116.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.116\">Javascript模块化编程（二）：AMD规范</a></li><br><li><a href=\"http://www.ruanyifeng.com/blog/2012/11/require_js.html?spm=5176.100239.blogcont82041.117.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.117\">Javascript模块化编程（三）：require.js的用法</a></li><br><li><a href=\"http://www.cnblogs.com/snandy/archive/2012/05/22/2513652.html?spm=5176.100239.blogcont82041.118.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.118\">RequireJS入门（一）</a></li><br><li><a href=\"http://www.cnblogs.com/snandy/archive/2012/05/23/2513712.html?spm=5176.100239.blogcont82041.119.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.119\">RequireJS入门（二）</a></li><br><li><a href=\"http://www.cnblogs.com/snandy/archive/2012/06/08/2538001.html?spm=5176.100239.blogcont82041.120.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.120\">RequireJS进阶（三）</a></li><br><li><a href=\"http://www.cnblogs.com/yexiaochai/p/3632580.html?spm=5176.100239.blogcont82041.121.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.121\">requrie源码学习</a></li><br><li><a href=\"http://www.oschina.net/translate/getting-started-with-the-requirejs-library?spm=5176.100239.blogcont82041.122.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.122\">requrie 入门指南</a></li><br><li><a href=\"http://www.cnblogs.com/yexiaochai/p/3214926.html?spm=5176.100239.blogcont82041.123.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.123\">requrieJS 学习笔记</a></li><br><li><a href=\"http://cyj.me/why-seajs/requirejs/?spm=5176.100239.blogcont82041.124.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.124\">requriejs 其一 </a></li><br><li><a href=\"http://www.cnblogs.com/yexiaochai/p/3221081.html?spm=5176.100239.blogcont82041.125.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.125\">require backbone结合</a></li><br></ul><br><h4 id=\"13\">12. Seajs</h4><br><ul><br><li><a href=\"http://seajs.org/?spm=5176.100239.blogcont82041.126.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.126\">seajs</a></li><br><li><a href=\"http://cyj.me/why-seajs/zh/?spm=5176.100239.blogcont82041.127.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.127\">seajs 中文手册</a></li><br></ul><br><h4 id=\"14\">13. Less,sass</h4><br><ul><br><li><a href=\"http://www.w3cplus.com/sassguide/?spm=5176.100239.blogcont82041.128.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.128\">sass</a></li><br><li><a href=\"http://www.sass.hk/?spm=5176.100239.blogcont82041.129.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.129\">sass教程-sass中国</a></li><br><li><a href=\"http://sass.bootcss.com/?spm=5176.100239.blogcont82041.130.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.130\">Sass 中文文档</a></li><br><li><a href=\"http://less.bootcss.com/?spm=5176.100239.blogcont82041.131.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.131\">less</a></li><br></ul><br><h4 id=\"15\">14. Markdown</h4><br><ul><br><li><a href=\"http://wowubuntu.com/markdown/?spm=5176.100239.blogcont82041.132.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.132\">Markdown 语法说明 (简体中文版)</a></li><br><li><a href=\"https://github.com/LearnShare/Learning-Markdown/blob/master/README.md?spm=5176.100239.blogcont82041.133.jiu0a3&amp;file=README.md\" data-spm-anchor-id=\"5176.100239.blogcont82041.133\">markdown入门参考</a></li><br><li><a href=\"https://www.gitbook.com/?spm=5176.100239.blogcont82041.134.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.134\">gitbook国外的在线markdown可编辑成书</a></li><br><li><a href=\"https://www.zybuluo.com/mdeditor?spm=5176.100239.blogcont82041.135.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.135\">mdeditor  一款国内的在线markdown编辑器</a></li><br><li><a href=\"https://stackedit.io?spm=5176.100239.blogcont82041.136.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.136\">stackedit国外的在线markdown编辑器，功能强大，同步云盘</a> </li><br><li><a href=\"http://bh-lay.github.io/mditor/?spm=5176.100239.blogcont82041.137.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.137\">mditor</a> 一款轻量级的markdown编辑器</li><br><li><a href=\"https://github.com/lepture/editor?spm=5176.100239.blogcont82041.138.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.138\">lepture-editor</a></li><br><li><a href=\"https://github.com/jbt/markdown-editor?spm=5176.100239.blogcont82041.139.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.139\">markdown-editor</a></li><br></ul><br><h4 id=\"16\">15. D3</h4><br><ul><br><li><a href=\"https://github.com/mbostock/d3/wiki/Tutorials?spm=5176.100239.blogcont82041.140.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.140\">d3 Tutorials</a></li><br><li><a href=\"https://github.com/mbostock/d3/wiki/Gallery?spm=5176.100239.blogcont82041.141.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.141\">Gallery</a></li><br><li><a href=\"http://datavisual.lofter.com/post/40cf3a_188e535?spm=5176.100239.blogcont82041.142.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.142\">lofter</a></li><br><li><a href=\"http://alanland.iteye.com/blog/1878595?spm=5176.100239.blogcont82041.143.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.143\">iteye</a></li><br><li><a href=\"http://javascript.ruanyifeng.com/library/d3.html?spm=5176.100239.blogcont82041.144.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.144\">ruanyifeng</a></li><br></ul><br><h4 id=\"17\">16. 兼容性</h4><br><ul><br><li><a href=\"http://kangax.github.io/compat-table/es6/?spm=5176.100239.blogcont82041.145.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.145\">esma 兼容列表</a></li><br><li><a href=\"http://jigsaw.w3.org/css-validator/validator.html.zh-cn?spm=5176.100239.blogcont82041.146.jiu0a3&amp;file=validator.html.zh-cn\" data-spm-anchor-id=\"5176.100239.blogcont82041.146\">W3C CSS验证服务</a></li><br><li><a href=\"http://caniuse.com/?spm=5176.100239.blogcont82041.147.jiu0a3#index\" data-spm-anchor-id=\"5176.100239.blogcont82041.147\">caniuse</a></li><br><li><a href=\"http://csscreator.com/properties?spm=5176.100239.blogcont82041.148.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.148\">csscreator</a></li><br><li><br><a href=\"https://msdn.microsoft.com/zh-cn/library/cc351024(v=vs.85?spm=5176.100239.blogcont82041.149.jiu0a3&amp;file=cc351024(v=vs.85\" data-spm-anchor-id=\"5176.100239.blogcont82041.149\">microsoft</a>.aspx)</li><br><li><a href=\"http://www.responsinator.com/?spm=5176.100239.blogcont82041.150.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.150\">在线测兼容-移动端</a></li><br><li><a href=\"https://www.manymo.com/emulators?spm=5176.100239.blogcont82041.151.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.151\">emulators</a></li><br></ul><br><h4 id=\"18\">17. UI相关</h4><br><ul><br><li><a href=\"http://v3.bootcss.com/?spm=5176.100239.blogcont82041.152.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.152\">bootcss</a></li><br><li><a href=\"http://www.w3cplus.com/MetroUICSS/?spm=5176.100239.blogcont82041.153.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.153\">MetroUICSS</a></li><br><li><a href=\"http://semantic-ui.com/?spm=5176.100239.blogcont82041.154.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.154\">semantic</a></li><br><li><a href=\"http://alexwolfe.github.io/Buttons/?spm=5176.100239.blogcont82041.155.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.155\">Buttons</a></li><br><li><a href=\"http://hiloki.github.io/kitecss/?spm=5176.100239.blogcont82041.156.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.156\">kitecss</a></li><br><li><a href=\"http://www.pintuer.com/?spm=5176.100239.blogcont82041.157.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.157\">pintuer</a></li><br><li><a href=\"http://amazeui.org/?spm=5176.100239.blogcont82041.158.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.158\">amazeui</a></li><br><li><a href=\"http://www.worldhello.net/gotgithub/index.html?spm=5176.100239.blogcont82041.159.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.159\">worldhello</a></li><br><li><a href=\"http://igit.linuxtoy.org/contents.html?spm=5176.100239.blogcont82041.160.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.160\">linuxtoy</a></li><br><li><a href=\"http://www-cs-students.stanford.edu/~blynn/gitmagic/intl/zh_cn/?spm=5176.100239.blogcont82041.161.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.161\">gitmagic</a></li><br><li><a href=\"http://rogerdudler.github.io/git-guide/index.zh.html?spm=5176.100239.blogcont82041.162.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.162\">rogerdudler</a></li><br><li><a href=\"http://gitref.justjavac.com/?spm=5176.100239.blogcont82041.163.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.163\">gitref</a></li><br><li><a href=\"http://git-scm.com/book/zh?spm=5176.100239.blogcont82041.164.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.164\">book</a></li><br><li><a href=\"http://gogojimmy.net/2012/01/17/how-to-use-git-1-git-basic/?spm=5176.100239.blogcont82041.165.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.165\">gogojimmy</a></li><br></ul><br><h4 id=\"19\">18. HTTP</h4><br><ul><br><li><a href=\"http://segmentfault.com/bookmark/1230000002521721?spm=5176.100239.blogcont82041.166.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.166\">HTTP API 设计指南</a></li><br></ul><br><h4 id=\"20\">19. 其它API</h4><br><ul><br><li><a href=\"javascriptoo?spm=5176.100239.blogcont82041.167.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.167\">javascript流行库汇总</a></li><br><li><a href=\"http://niceue.com/validator/demo/index.php?spm=5176.100239.blogcont82041.168.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.168\">验证api</a></li><br><li><a href=\"http://www.css88.com/doc/underscore/?spm=5176.100239.blogcont82041.169.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.169\">underscore 中文手册</a></li><br><li><a href=\"http://www.html-js.com/article/Underscorejs-source-code-analysis-of-underscorejs-source-code-analysis%203031?spm=5176.100239.blogcont82041.170.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.170\">underscore源码分析</a></li><br><li><a href=\"http://yalishizhude.github.io/tags/underscore/?spm=5176.100239.blogcont82041.171.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.171\">underscore源码分析-亚里士朱德的博客</a></li><br><li><a href=\"http://underscorejs.org/?spm=5176.100239.blogcont82041.172.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.172\">underscrejs en api</a></li><br><li><a href=\"https://lodash.com/?spm=5176.100239.blogcont82041.173.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.173\">lodash - underscore的代替品</a></li><br><li><a href=\"http://extjs-doc-cn.github.io/ext4api/?spm=5176.100239.blogcont82041.174.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.174\">ext4api</a></li><br><li><a href=\"http://www.csser.com/tools/backbone/backbone.js.html?spm=5176.100239.blogcont82041.175.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.175\">backbone 中文手册</a></li><br><li><a href=\"http://dev.qwrap.com/resource/js/_docs/_youa/?spm=5176.100239.blogcont82041.176.jiu0a3#/qw/base/loadJs_.htm\" data-spm-anchor-id=\"5176.100239.blogcont82041.176\">qwrap手册</a></li><br><li><a href=\"http://easings.net/zh-cn?spm=5176.100239.blogcont82041.177.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.177\">缓动函数</a></li><br><li><a href=\"http://www.w3school.com.cn/svg/svg_reference.asp?spm=5176.100239.blogcont82041.178.jiu0a3&amp;file=svg_reference.asp\" data-spm-anchor-id=\"5176.100239.blogcont82041.178\">svg 中文参考</a></li><br><li><a href=\"https://developer.mozilla.org/en-US/docs/Web/SVG?spm=5176.100239.blogcont82041.179.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.179\">svg mdn参考</a></li><br><li><a href=\"https://github.com/gabelerner/canvg?spm=5176.100239.blogcont82041.180.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.180\">svg 导出 canvas</a></li><br><li><a href=\"https://github.com/exupero/saveSvgAsPng?spm=5176.100239.blogcont82041.181.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.181\">svg 导出 png</a></li><br><li><a href=\"http://www.zamzar.com/convert/ai-to-svg/?spm=5176.100239.blogcont82041.182.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.182\">ai-to-svg</a></li><br><li><a href=\"https://github.com/machao/localStorage?spm=5176.100239.blogcont82041.183.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.183\">localStorage 库</a></li><br></ul><br><h4 id=\"21\">20. 图表类</h4><br><ul><br><li><a href=\"http://www.hcharts.cn/api/index.php?spm=5176.100239.blogcont82041.184.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.184\">Highcharts 中文API</a></li><br><li><a href=\"http://api.highcharts.com/highcharts?spm=5176.100239.blogcont82041.185.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.185\">Highcharts 英文API</a></li><br><li><a href=\"http://echarts.baidu.com/?spm=5176.100239.blogcont82041.186.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.186\">ECharts 百度的图表软件</a></li><br><li><a href=\"http://lbs.amap.com/api/?spm=5176.100239.blogcont82041.187.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.187\">高德地图</a></li><br><li><a href=\"http://paperjs.org/?spm=5176.100239.blogcont82041.188.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.188\">开源的矢量图脚本框架</a></li><br><li><a href=\"http://jvectormap.com/?spm=5176.100239.blogcont82041.189.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.189\">svg 地图</a></li><br></ul><br><h4 id=\"22\">21. vue</h4><br><ul><br><li><a href=\"http://cn.vuejs.org/?spm=5176.100239.blogcont82041.190.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.190\">Vue</a></li><br><li><a href=\"http://forum.vuejs.org/?spm=5176.100239.blogcont82041.191.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.191\">Vue 论坛</a></li><br><li><a href=\"http://www.cnblogs.com/aaronjs/p/3660102.html?spm=5176.100239.blogcont82041.192.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.192\">Vue 入门指南</a></li><br><li><a href=\"http://segmentfault.com/a/1190000000411057?spm=5176.100239.blogcont82041.193.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.193\">Vue 的一些资源索引</a></li>\n\n<p></ul></p>\n<p><h4 id=\"23\">21. 正则</h4></p>\n<p><ul></p>\n<li><a href=\"http://segmentfault.com/a/1190000002471140?spm=5176.100239.blogcont82041.194.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.194\">JS正则表达式元字符</a></li><br><li><a href=\"http://deerchao.net/tutorials/regex/regex.htm?spm=5176.100239.blogcont82041.195.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.195\">正则表达式30分钟入门教程</a></li><br><li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions?spm=5176.100239.blogcont82041.196.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.196\">MDN-正则表达式</a></li><br><li><a href=\"http://javascript.ruanyifeng.com/stdlib/regexp.html?spm=5176.100239.blogcont82041.197.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.197\">ruanyifeng - RegExp对象</a></li><br><li><a href=\"http://div.io/topic/764?spm=5176.100239.blogcont82041.198.jiu0a3&amp;page=1\" data-spm-anchor-id=\"5176.100239.blogcont82041.198\">小胡子哥 - 进阶正则表达式</a></li><br><li><a href=\"https://github.com/Cedriking/is.js/blob/master/is.js?spm=5176.100239.blogcont82041.199.jiu0a3&amp;file=is.js\" data-spm-anchor-id=\"5176.100239.blogcont82041.199\">is.js</a></li><br><li><a href=\"http://regexper.com/?spm=5176.100239.blogcont82041.200.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.200\">正则在线测试</a></li>\n\n<p></ul></p>\n<p><h4 id=\"24\">22. ionic</h4></p>\n<p><ul></p>\n<li><a href=\"https://github.com/ychow/ionic-guide?spm=5176.100239.blogcont82041.201.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.201\">ionic</a></li><br></ul><br><h4 id=\"25\">23. 其它</h4><br><ul><br><li><a href=\"http://mockjs.com/?spm=5176.100239.blogcont82041.202.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.202\">Mock.js 是一款模拟数据生成器</a></li><br></ul><br>### 七. 开发规范<br><ol><br><li><br><p>前端</p><br><ul><br><li><a href=\"http://alloyteam.github.io/CodeGuide?spm=5176.100239.blogcont82041.203.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.203\">通过分析github代码库总结出来的工程师代码书写习惯</a></li><br><li><a href=\"http://codeguide.bootcss.com/?spm=5176.100239.blogcont82041.204.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.204\">HTML&amp;CSS编码规范 by @mdo</a></li><br><li><a href=\"http://www.alloyteam.com/2011/10/107/?spm=5176.100239.blogcont82041.205.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.205\">团队合作的css命名规范-腾讯AlloyTeam前端团队</a></li><br><li><a href=\"http://yuwenhui.github.io/?spm=5176.100239.blogcont82041.206.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.206\">前端编码规范之js - by yuwenhui</a></li><br><li><a href=\"http://www.cnblogs.com/hustskyking/p/javascript-spec.html?spm=5176.100239.blogcont82041.207.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.207\">前端编码规范之js - by 李靖</a></li><br><li><a href=\"http://zhibimo.com/read/Ashu/front-end-style-guide/?spm=5176.100239.blogcont82041.208.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.208\">前端开发规范手册</a></li><br><li><a href=\"https://github.com/yuche/javascript?spm=5176.100239.blogcont82041.209.jiu0a3#table-of-contents\" data-spm-anchor-id=\"5176.100239.blogcont82041.209\">Airbnb JavaScript 编码规范（简体中文版）</a></li><br><li><a href=\"http://www.zhihu.com/question/20351507?spm=5176.100239.blogcont82041.210.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.210\">AMD与CMD规范的区别</a></li><br><li><a href=\"http://www.cnblogs.com/tugenhua0707/p/3507957.html?spm=5176.100239.blogcont82041.211.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.211\">AMD与CMD规范的区别</a></li><br><li><a href=\"http://docs.kissyui.com/1.4/docs/html/tutorials/style-guide/kissy-source-style.html?spm=5176.100239.blogcont82041.212.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.212\">KISSY 源码规范</a></li><br><li><a href=\"http://codeguide.bootcss.com/?spm=5176.100239.blogcont82041.213.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.213\">bt编码规范</a></li><br><li><a href=\"https://github.com/Suxiaogang/Code_Guide?spm=5176.100239.blogcont82041.214.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.214\">规范加强版</a></li><br><li><a href=\"http://blog.jobbole.com/79075/?spm=5176.100239.blogcont82041.215.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.215\">前端代码规范 及 最佳实践</a></li><br><li><a href=\"http://coderlmn.github.io/code-standards/?spm=5176.100239.blogcont82041.216.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.216\">百度前端规范</a></li><br><li><a href=\"http://isobar-idev.github.io/code-standards/?spm=5176.100239.blogcont82041.217.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.217\">百度前端规范</a></li><br><li><a href=\"http://zhuanlan.zhihu.com/fuyun/19884834?spm=5176.100239.blogcont82041.218.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.218\">百度前端规范</a></li><br><li><a href=\"https://github.com/gf-rd/es6-coding-style?spm=5176.100239.blogcont82041.219.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.219\">ECMAScript6 编码规范–广发证券前端团队</a></li><br><li><a href=\"http://blog.jobbole.com/79484/?spm=5176.100239.blogcont82041.220.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.220\">JavaScript 风格指南/编码规范（Airbnb公司版）</a></li><br><li><a href=\"http://nec.netease.com/standard?spm=5176.100239.blogcont82041.221.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.221\">网易前端开发规范</a></li><br><li><a href=\"http://www.75team.com/archives/1049?spm=5176.100239.blogcont82041.222.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.222\">css模块</a></li><br><li><a href=\"https://github.com/ecomfe/spec?spm=5176.100239.blogcont82041.223.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.223\">前端规范资源列表</a></li><br></ul><br></li><br>#### PHP<br>- <a href=\"http://segmentfault.com/a/1190000000443795\">最流行的PHP 代码规范</a><br>- <a href=\"https://github.com/hfcorriez/fig-standards/blob/zh_CN/%E6%8E%A5%E5%8F%97/PSR-2-coding-style-guide.md\">最流行的PHP 代码规范</a><br><br>#### Android<br>- <a href=\"http://www.cnblogs.com/lcw/p/3619181.html\">【敏捷开发】Android团队开发规范</a><br>- <a href=\"http://www.jianshu.com/p/4390f4fe19b3\">Android 开发规范与应用</a><br>## 八. 其它收集<br>### 1. 各大公司开源项目<br><ul><br><li><a href=\"https://code.facebook.com/projects/web/?spm=5176.100239.blogcont82041.224.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.224\">Facebook Projects</a></li><br><li><a href=\"http://fex.baidu.com/?spm=5176.100239.blogcont82041.225.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.225\">百度web前端研发部</a></li><br><li><a href=\"http://efe.baidu.com/?spm=5176.100239.blogcont82041.226.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.226\">百度EFE</a></li><br><li><a href=\"https://github.com/fex-team/?spm=5176.100239.blogcont82041.227.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.227\">百度github</a></li><br><li><a href=\"http://www.alloyteam.com/?spm=5176.100239.blogcont82041.228.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.228\">alloyteam</a></li><br><li><a href=\"http://alloyteam.github.io/?spm=5176.100239.blogcont82041.229.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.229\">alloyteam-github</a></li><br><li><a href=\"https://github.com/AlloyTeam/AlloyGameEngine?spm=5176.100239.blogcont82041.230.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.230\">alloyteam-AlloyGameEngine</a></li><br><li><a href=\"http://alloyteam.github.io/AlloyDesigner/?spm=5176.100239.blogcont82041.231.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.231\">AlloyDesigner</a> 即时修改，即时保存，设计稿较正，其它开发辅助工具</li><br><li><a href=\"http://www.alloyteam.com/2015/06/h5-jiao-hu-ye-bian-ji-qi-aeditor-jie-shao/?spm=5176.100239.blogcont82041.232.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.232\">H5交互页编辑器AEditor介绍</a> H5动画交互页开发的工具介绍</li><br><li><a href=\"http://aeditor.alloyteam.com/?spm=5176.100239.blogcont82041.233.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.233\">AEditor</a> H5动画交互页开发的工具</li><br><li><a href=\"http://forum.maka.im/wordpress/?spm=5176.100239.blogcont82041.234.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.234\">maka</a></li><br><li><a href=\"https://github.com/fenbility/weekly-feed?spm=5176.100239.blogcont82041.235.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.235\">值得订阅的weekly</a></li><br><li><a href=\"http://cube.qq.com/?spm=5176.100239.blogcont82041.236.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.236\">腾讯html5</a></li><br><li><a href=\"http://75team.github.io/?spm=5176.100239.blogcont82041.237.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.237\">奇舞团开源项目</a></li><br><li><a href=\"http://ued.qunar.com/?spm=5176.100239.blogcont82041.238.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.238\">Qunar UED</a></li><br></ul><br>### 2. Javascript<br>#### 常用<br>- <a href=\"http://www.zhangxinxu.com/wordpress/2013/12/iebetter-js-make-ie6-ie8-like-modern-browser-ie9-chrome/\">ieBetter.js-让IE6-IE8拥有IE9+,Chrome等浏览器特性</a><br>- <a href=\"http://mottie.github.io/Keyboard/\">模拟键盘</a><br>- <a href=\"https://github.com/hotoo/pinyin\">拼音</a><br>- <a href=\"https://github.com/mc-zone/IDValidator\">中国个人身份证号验证</a><br>#### 算法<br>- <a href=\"https://github.com/Ralph-Wang/algorithm.in.js\">数据结构与算法 JavaScript 描述. 章节练习</a><br>- <a href=\"https://github.com/twobin/twobinSort\">常见排序算法（JS版）</a><br>- <a href=\"https://github.com/luofei2011/jsAgm/blob/master/js/sort.js\">经典排序</a><br>- <a href=\"https://github.com/hechangmin/jssort\">常见排序算法-js版本</a><br>- <a href=\"https://github.com/lightningtgc/JavaScript-Algorithms\">JavaScript 算法与数据结构 精华集</a><br>- <a href=\"http://www.nowcoder.com/live/courses\">面试常考算法题精讲</a><br>- <a href=\"\"></a><br>#### 移动端<br>- <a href=\"https://github.com/ftlabs/fastclick\">fastclick</a><br>- <a href=\"https://github.com/mmastrac/jquery-noclickdelay\">no-click-delay</a><br>#### JSON<br>- <a href=\"http://beta.json-generator.com/\">模拟生成JSON数据</a><br>- <a href=\"http://jsonp.afeld.me/\">返回跨域JSONAPI</a><br>### 3. Html5<br><ul><br><li><a href=\"http://www.zhihu.com/question/24398907?spm=5176.100239.blogcont82041.239.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.239\">HTML5 有哪些让你惊艳的 demo？</a></li><br></ul><br>### 4. CSS<br><ul><br><li><a href=\"http://browserhacks.com/?spm=5176.100239.blogcont82041.240.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.240\">browserhacks</a></li>\n\n<p></ul></p>\n<h3 id=\"5-jQuery\"><a href=\"#5-jQuery\" class=\"headerlink\" title=\"5. jQuery\"></a>5. jQuery</h3><p><ol></p>\n<li>焦点图</li><br></ol><br>- <a href=\"https://github.com/koen301/myfocus\">myfocus</a><br>- <a href=\"http://www.chhua.com/myfocus/\">myfocus-官方演示站</a><br>- <a href=\"http://www.superslide2.com/\">SuperSlidev2.1 – 大话主席</a><br>- <a href=\"http://www.bujichong.com/sojs/soChange/index.html\">soChange</a><br>### 6. Ext, EasyUI, J-UI 及其它各种UI方案<br>#### Ext<br>- <a href=\"https://www.sencha.com/products/extjs/\">extjs</a><br>- <a href=\"http://docs.sencha.com/extjs/4.0.7/\">ext4英文api</a><br>- <a href=\"http://extjs-doc-cn.github.io/ext4api/\">ext4中文api</a><br>- <a href=\"\"></a><br>#### EasyUI<br>- <a href=\"http://jquery-easyui.googlecode.com/svn/trunk/src/\">jquery easyui 未压缩源代码</a><br>#### J-UI<br>- <a href=\"http://jui.org/\">J-UI</a><br>#### Other<br>- <a href=\"http://dcloudio.github.io/mui/\">MUI-最接近原生APP体验的高性能前端框架</a><br>- <a href=\"http://amazeui.org/\">Amaze UI | 中国首个开源 HTML5 跨屏前端框架</a><br>- <a href=\"http://m.sui.taobao.org/\">淘宝 HTML5 前端框架</a><br>- <a href=\"http://docs.kissyui.com/\">KISSY - 阿里前端JavaScript库</a><br>- <a href=\"http://nej.netease.com/\">网易Nej - Nice Easy Javascript</a><br>- <a href=\"http://demos.telerik.com/kendo-ui/mvvm/index\">Kendo UI MVVM Demo</a><br>- <a href=\"http://www.bootcss.com/\">Bootstrap</a><br>- <a href=\"http://smartui.chinamzz.com/\">Smart UI</a><br>- <a href=\"http://developer.yahoo.com/yui/grids/\">雅虎UI - CSS UI</a><br>### 7. 页面 社会化 分享功能<br><ul><br><li><a href=\"http://share.baidu.com/?spm=5176.100239.blogcont82041.241.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.241\">百度分享</a> pc端</li><br><li><a href=\"http://jiathis.com/?spm=5176.100239.blogcont82041.242.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.242\">JiaThis</a> pc端</li><br><li><a href=\"http://developer.baidu.com/soc/share?spm=5176.100239.blogcont82041.243.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.243\">社会化分享组件</a> 移动端</li><br><li><a href=\"http://www.mob.com/?spm=5176.100239.blogcont82041.244.jiu0a3#/index\" data-spm-anchor-id=\"5176.100239.blogcont82041.244\">ShareSDK 轻松实现社会化功能</a> 移动端</li><br><li><a href=\"http://dev.umeng.com/social/android/quick-integration?spm=5176.100239.blogcont82041.245.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.245\">友盟分享</a> 移动端</li><br></ul><br><h4 id=\"35\">8. 富文本编辑器</h4><br><ul><br><li><a href=\"http://ueditor.baidu.com/website/?spm=5176.100239.blogcont82041.246.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.246\">百度 ueditor</a></li><br><li><a href=\"http://ckeditor.com/?spm=5176.100239.blogcont82041.247.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.247\">经典的ckeditor</a></li><br><li><a href=\"http://kindeditor.net/?spm=5176.100239.blogcont82041.248.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.248\">经典的kindeditor</a></li><br><li><a href=\"http://www.bootcss.com/p/bootstrap-wysiwyg/?spm=5176.100239.blogcont82041.249.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.249\">wysiwyg</a></li><br><li><a href=\"http://integ.github.io/BachEditor/?spm=5176.100239.blogcont82041.250.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.250\">一个有情怀的编辑器。Bach’s Editor</a></li><br><li><a href=\"https://github.com/mycolorway/simditor?spm=5176.100239.blogcont82041.251.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.251\">tower用的编辑器</a></li><br><li><a href=\"https://github.com/summernote/summernote?spm=5176.100239.blogcont82041.252.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.252\">summernote 编辑器</a></li><br><li><a href=\"http://neilj.github.io/Squire/?spm=5176.100239.blogcont82041.253.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.253\">html5编辑器</a></li><br><li><a href=\"http://lab.hustlzp.com/XEditor/?spm=5176.100239.blogcont82041.254.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.254\">XEditor</a></li><br><li><a href=\"https://github.com/wangfupeng1988/wangEditor?spm=5176.100239.blogcont82041.255.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.255\">wangEditor</a></li><br></ul><br>### 9. 日历<br>#### pc<br>- <a href=\"http://www.my97.net/dp/demo/index.htm\">经典my97</a><br>- <a href=\"http://www.cnblogs.com/gbin1/archive/2012/04/16/2452105.html\">强大的独立日期选择器</a><br>- <a href=\"http://fullcalendar.io/\">fullcalendar</a><br>- <a href=\"http://blog.csdn.net/francislaw/article/details/7740630\">fullcalendar日历控件知识点集合 </a><br>- <a href=\"http://blog.sina.com.cn/s/blog_9475b1c101012c5f.html\">中文api</a><br>- <a href=\"https://github.com/zzyss86/LunarCalendar\">农历日历</a><br>- <a href=\"http://www.sucaisj.com/jiaoben/date/201509/16856.html\">超酷的仿百度带节日日历老黄历控件</a><br>- <a href=\"http://momentjs.com/\">日期格式化</a><br>- <a href=\"https://github.com/Johnqing/QPAYCalendar/\">大牛日历控件</a><br>- <a href=\"https://github.com/Iamlars/dateMarker\">我群某管理作品</a><br>- <a href=\"http://digitalbush.com/projects/masked-input-plugin/\">input按位替换-官网</a><br>- <a href=\"https://github.com/digitalBush/jquery.maskedinput/tree/1.2.2\">input按位替换-github</a><br>- <a href=\"https://github.com/dangrossman/bootstrap-daterangepicker\">bootstrap-daterangepicker</a><br>- <a href=\"http://www.vandelaydesign.com/30-best-free-jquery-plugins/\">国外30个插件集合</a><br>- <a href=\"http://dbushell.com/2012/10/09/pikaday-javascript-datepicker/\">JavaScript datepicker</a><br>- <a href=\"http://jonthornton.github.io/Datepair.js/\">Datepair.js</a><br>- <a href=\"https://github.com/glad/glDatePicker\">一个风格多样的日历</a><br>- <a href=\"http://amsul.ca/pickadate.js/date/\">弹出层式的全日历</a><br>- <a href=\"http://www.daterangepicker.com/\">jquery双日历</a><br>#### 移动<br>- <a href=\"http://www.frankdemo.cn/index.php?c=content&amp;a=show&amp;id=115\">大气实用jQuery手机移动端日历日期选择插件</a><br>- <a href=\"https://mobiscroll.com/\">jQuery Mobile 移动开发中的日期插件Mobiscroll </a><br><br>#### Date library<br>- <a href=\"https://github.com/datejs/Datejs\">Datejs</a><br>- <a href=\"http://sugarjs.com/api/Date\">sugarjs</a><br>### 10. 综合效果搜索平台<br><ul><br><li><a href=\"http://www.jq22.com?spm=5176.100239.blogcont82041.256.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.256\">效果网</a></li><br><li><a href=\"http://www.17sucai.com/?spm=5176.100239.blogcont82041.257.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.257\">17素材</a></li><br><li><a href=\"http://microjs.com/?spm=5176.100239.blogcont82041.258.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.258\">常用的JavaScript代码片段</a></li><br></ul><br>### 11. 前端工程化<br>#### 概述<br>- <a href=\"http://www.awesomes.cn/\">前端工具大全</a><br>- <a href=\"https://github.com/fouber/blog/issues/10?from=timeline&amp;isappinstalled=0#\">什么是前端工程化</a><br>#### Gulp<br>- <a href=\"http://gulpjs.com/\">Gulp官网</a><br>- <a href=\"http://www.gulpjs.com.cn/\">Gulp中文网</a><br>- <a href=\"https://github.com/Platform-CUF/use-gulp\">gulp资料收集</a><br>- <a href=\"http://javascript.ruanyifeng.com/tool/gulp.html\">Gulp：任务自动管理工具 - ruanyifeng</a><br>- <a href=\"http://gulpjs.com/plugins/\">Gulp插件</a><br>- <a href=\"http://www.ido321.com/1622.html\">Gulp不完全入门教程</a><br>- <a href=\"https://github.com/hjzheng/CUF_meeting_knowledge_share/issues/33\">为什么使用gulp?</a><br>- <a href=\"http://www.dbpoo.com/getting-started-with-gulp/\">Gulp安装及配合组件构建前端开发一体化</a><br>- <a href=\"https://github.com/nimojs/gulp-book\">Gulp 入门指南</a><br>- <a href=\"https://github.com/nimojs/blog/issues/19\">Gulp 入门指南 - nimojs</a><br>- <a href=\"http://markpop.github.io/2014/09/17/Gulp%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/\">Gulp入门教程</a><br>- <a href=\"http://www.imooc.com/video/5692\">Gulp in Action</a><br>- <a href=\"http://www.w3ctech.com/topic/134\">Gulp开发教程（翻译）</a><br>- <a href=\"http://www.cnblogs.com/2050/p/4198792.html\">前端构建工具gulpjs的使用介绍及技巧</a><br><br>#### Grunt<br>- <a href=\"http://gruntjs.com/\">gruntjs</a><br>- <a href=\"http://www.gruntjs.net/\">Grunt中文网</a><br><br>#### Fis<br>- <a href=\"http://fex-team.github.io/fis-site/index.html\">fis 官网</a><br>- <a href=\"http://fis.baidu.com/\">fis</a><br>### 12. 轮播图<br>#### pc图轮<br>- <a href=\"http://www.jsfoot.com/jquery/demo/2011-09-20/192.html\">单屏轮播sochange</a><br>- <a href=\"http://bxslider.com/examples/carousel-demystified\">左右按钮多图切换</a><br>- <a href=\"https://github.com/alvarotrigo/fullPage.js/\">fullpage全屏轮播</a><br>#### 移动端<br>- <a href=\"http://www.swipejs.com/\">无缝切换</a><br>- <a href=\"http://www.idangero.us/swiper/\">滑屏效果</a><br>- <a href=\"https://github.com/peunzhang/fullpage\">全屏fullpage</a><br>- <a href=\"https://github.com/qiqiboy/touchslider\">单个图片切换</a><br>- <a href=\"https://github.com/peunzhang/slip.js\">单个全屏切换</a><br>- <a href=\"http://touch.code.baidu.com/examples.html?qq-pf-to=pcqq.group\">百度的切换库</a><br>- <a href=\"https://github.com/peunzhang/iSlider\">单个全屏切换</a><br>- <a href=\"https://github.com/saw/touch-interfaces\">滑屏效果</a><br>- <a href=\"http://baijs.com/tinycircleslider/\">旋转拖动设置</a><br>- <a href=\"http://touchslider.com/\">类似于swipe切换</a><br>- <a href=\"http://www.swiper.com.cn/demo/index.html\">支持多种形式的触摸滑动</a><br>- <a href=\"https://github.com/joker-ye/main/blob/master/wap/index.html\">滑屏效果</a><br>- <a href=\"http://www.superslide2.com/\">大话主席pc移动图片轮换</a><br>- <a href=\"https://github.com/hahnzhu/parallax.js\">滑屏效果</a><br>- <a href=\"https://github.com/yanhaijing/zepto.fullpage\">基于zepto的fullpage</a><br>- <a href=\"http://www.cnblogs.com/plums/archive/2013/01/10/WebApp-fixed-width-layout-of-multi-terminal-adapter-since.html\">[WebApp]定宽网页设计下，固定宽度布局开发WebApp并实现多终端下WebApp布局自适应</a><br>- <a href=\"http://loo2k.com/blog/detecting-wechat-client/\">判断微信客户端的那些坑</a><br>- <a href=\"https://github.com/JefferyWang/nativeShare.js\">可以通过javascript直接调用原生分享的工具</a><br>- <a href=\"http://www.jiathis.com/help/html/weixin-share-code\">JiaThis 分享到微信代码</a><br>- <a href=\"http://fex.baidu.com/blog/2015/05/cross-mobile/\">聊聊移动端跨平台开发的各种技术</a><br>- <a href=\"http://www.zhihu.com/question/29922082\">前端自动化测试</a><br>- <a href=\"http://ajccom.github.io/niceslider/\">多种轮换图片</a><br>- <a href=\"https://mango.github.io/slideout/\">滑动侧边栏</a><br>### 13. 文件上传<br><ul><br><li><a href=\"http://fex.baidu.com/webuploader/?spm=5176.100239.blogcont82041.259.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.259\">百度上传组件</a></li><br><li><a href=\"https://blueimp.github.io/jQuery-File-Upload/?spm=5176.100239.blogcont82041.260.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.260\">上传</a></li><br><li><a href=\"http://www.hdfu.net/?spm=5176.100239.blogcont82041.261.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.261\">flash 头像上传</a></li><br><li><a href=\"http://www.dropzonejs.com/?spm=5176.100239.blogcont82041.262.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.262\">图片上传预览</a></li><br><li><a href=\"http://elemefe.github.io/image-cropper/?spm=5176.100239.blogcont82041.263.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.263\">图片裁剪</a></li><br><li><a href=\"http://www.shearphoto.com/?spm=5176.100239.blogcont82041.264.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.264\">图片裁剪-shearphoto</a></li><br><li><a href=\"http://www.oschina.net/project/tag/284/jquery-image-tools?spm=5176.100239.blogcont82041.265.jiu0a3&amp;lang=0&amp;os=0&amp;sort=view&amp;p=2\" data-spm-anchor-id=\"5176.100239.blogcont82041.265\">jQuery图片处理</a></li><br><li><a href=\"\"></a></li><br></ul><br><h4 id=\"41\">14. 模拟select</h4><br><ul><br><li><a href=\"http://aui.github.io/popupjs/doc/selectbox.html?spm=5176.100239.blogcont82041.266.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.266\">糖饼 select</a></li><br><li><a href=\"https://github.com/rmm5t/jquery-flexselect?spm=5176.100239.blogcont82041.267.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.267\">flexselect</a></li><br><li><a href=\"http://loudev.com/?spm=5176.100239.blogcont82041.268.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.268\">双select</a></li><br><li><a href=\"http://select2.github.io/?spm=5176.100239.blogcont82041.269.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.269\">select2</a></li>\n\n<p></ul></p>\n<p><h4 id=\"42\">15. 取色插件</h4></p>\n<p><ul></p>\n<li><a href=\"http://www.jq22.com/plugin/367?spm=5176.100239.blogcont82041.270.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.270\">类似 Photoshop 的界面取色插件</a></li><br><li><a href=\"https://github.com/jquery/jquery-color/?spm=5176.100239.blogcont82041.271.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.271\">jquery color</a></li><br><li><a href=\"http://www.oschina.net/project/tag/287/color-picker?spm=5176.100239.blogcont82041.272.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.272\">取色插件集合</a></li><br><li><a href=\"https://github.com/mattfarina/farbtastic?spm=5176.100239.blogcont82041.273.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.273\">farbtastic 圆环＋正方形</a></li>\n\n<p></ul></p>\n<p><h4 id=\"43\">16. 城市联动</h4></p>\n<p><ul></p>\n<li><a href=\"http://www.ijquery.cn/?spm=5176.100239.blogcont82041.274.jiu0a3&amp;p=360\" data-spm-anchor-id=\"5176.100239.blogcont82041.274\">jquery.cityselect.js基于jQuery+JSON的省市或自定义联动效果</a></li>\n\n<p></ul></p>\n<p><h4 id=\"44\">17. 剪贴板</h4></p>\n<p><ul></p>\n<li><a href=\"https://github.com/zeroclipboard/zeroclipboard?spm=5176.100239.blogcont82041.275.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.275\">剪贴板</a></li><br><li><a href=\"http://zenorocha.github.io/clipboard.js/?spm=5176.100239.blogcont82041.276.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.276\">clipboard 最新的剪切方案</a></li><br><li><a href=\"https://github.com/zenorocha/clipboard.js?spm=5176.100239.blogcont82041.277.jiu0a3&amp;file=clipboard.js\" data-spm-anchor-id=\"5176.100239.blogcont82041.277\">不是Flash的剪贴板</a></li><br></ul><br><h4 id=\"45\">18. 简繁转换</h4><br><ul><br><li><a href=\"https://github.com/BYVoid/OpenCC?spm=5176.100239.blogcont82041.278.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.278\">简繁转换</a></li><br></ul><br><h4 id=\"46\">19. 表格 Grid</h4><br><ul><br><li><a href=\"http://facebook.github.io/fixed-data-table/?spm=5176.100239.blogcont82041.279.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.279\">facebook表格</a></li><br><li><a href=\"http://handsontable.com/?spm=5176.100239.blogcont82041.280.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.280\">类似于Excel编辑表格-handsontable</a></li><br><li><a href=\"http://bootstrap-table.wenzhixin.net.cn/?spm=5176.100239.blogcont82041.281.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.281\">bootstrap-table插件</a></li><br><li><a href=\"https://www.datatables.net/?spm=5176.100239.blogcont82041.282.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.282\">datatables</a></li><br></ul><br><h4 id=\"47\">20. 在线演示</h4><br><ul><br><li><a href=\"http://runjs.cn/?spm=5176.100239.blogcont82041.283.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.283\">js 在线编辑 - runjs</a></li><br><li><a href=\"http://jsbin.com/?spm=5176.100239.blogcont82041.284.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.284\">js 在线编辑 - jsbin</a></li><br><li><a href=\"http://codepen.io/?spm=5176.100239.blogcont82041.285.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.285\">js 在线编辑 - codepen</a></li><br><li><a href=\"http://jsfiddle.net/?spm=5176.100239.blogcont82041.286.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.286\">js 在线编辑 - jsfiddle</a></li><br><li><a href=\"http://ideone.com/?spm=5176.100239.blogcont82041.287.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.287\">java 在线编辑 - runjs</a></li><br><li><a href=\"http://code.hcharts.cn/?spm=5176.100239.blogcont82041.288.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.288\">js 在线编辑 - hcharts</a></li><br><li><a href=\"http://jsdm.com/?spm=5176.100239.blogcont82041.289.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.289\">js 在线编辑 - jsdm</a></li><br><li><a href=\"http://sqlfiddle.com/?spm=5176.100239.blogcont82041.290.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.290\">sql 在线编辑 - sqlfiddle</a></li><br><li><a href=\"https://thimble.mozilla.org?spm=5176.100239.blogcont82041.291.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.291\">mozilla 在线编辑器</a></li><br></ul><br><h4 id=\"48\">21. 播放器</h4><br><ul><br><li><a href=\"https://github.com/zmmbreeze/DeadSimpleVideoPlayer?spm=5176.100239.blogcont82041.292.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.292\">Html5 VideoPlayer</a></li><br></ul><br><h4 id=\"49\">22. 粒子动画</h4><br><ul><br><li><a href=\"http://a-jie.github.io/Proton/?spm=5176.100239.blogcont82041.293.jiu0a3#example\" data-spm-anchor-id=\"5176.100239.blogcont82041.293\">Proton 烟花</a></li><br></ul><br><h3 id=\"50\">九. Nodejs</h3><br><ul><br><li><a href=\"http://liuqing.pw/?spm=5176.100239.blogcont82041.294.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.294\">nodejs 篇幅比较巨大</a></li><br><li><a href=\"https://github.com/alsotang/node-lessons?spm=5176.100239.blogcont82041.295.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.295\">Node.js 包教不包会</a></li><br><li><a href=\"http://www.rainweb.cn/article/category/Nodejs?spm=5176.100239.blogcont82041.296.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.296\">篇幅比较少</a></li><br><li><a href=\"http://www.w3cfuns.com/article-5598538-1-1.html?spm=5176.100239.blogcont82041.297.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.297\">node express 入门教程</a></li><br><li><a href=\"http://my.oschina.net/u/568264/blog/193773?spm=5176.100239.blogcont82041.298.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.298\">nodejs定时任务</a></li><br><li><a href=\"http://60sky.com/?spm=5176.100239.blogcont82041.299.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.299\">一个nodejs博客</a></li><br><li><a href=\"http://www.cnblogs.com/yexiaochai/p/3536547.html?spm=5176.100239.blogcont82041.300.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.300\">【NodeJS 学习笔记04】新闻发布系统</a></li><br><li><a href=\"http://www.cnblogs.com/qqloving/p/3541099.html?spm=5176.100239.blogcont82041.301.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.301\">过年7天乐，学nodejs 也快乐</a></li><br><li><a href=\"https://github.com/nqdeng/7-days-nodejs?spm=5176.100239.blogcont82041.302.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.302\">七天学会NodeJS</a></li><br><li><a href=\"http://www.cnblogs.com/zhongweiv/p/nodejs_events.html?spm=5176.100239.blogcont82041.303.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.303\">Nodejs学习笔记（二）— 事件模块</a></li><br><li><a href=\"http://www.cnblogs.com/liusuqi/p/3735491.html?spm=5176.100239.blogcont82041.304.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.304\">nodejs入门</a></li><br><li><a href=\"https://github.com/zensh/jsgen?spm=5176.100239.blogcont82041.305.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.305\">angularjs nodejs</a></li><br><li><a href=\"http://blog.fens.me/series-nodejs/?spm=5176.100239.blogcont82041.306.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.306\">从零开始nodejs系列文章</a></li><br><li><a href=\"http://debuggable.com/posts/understanding-node-js:4bd98440-45e4-4a9a-8ef7-0f7ecbdd56cb?spm=5176.100239.blogcont82041.307.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.307\">理解nodejs</a></li><br><li><a href=\"http://blog.mixu.net/2011/02/01/understanding-the-node-js-event-loop/?spm=5176.100239.blogcont82041.308.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.308\">nodejs事件轮询</a></li><br><li><a href=\"http://www.nodebeginner.org/index-zh-cn.html?spm=5176.100239.blogcont82041.309.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.309\">node入门</a></li><br><li><a href=\"http://ourjs.com/detail/53e1f281c5910a9806000001?spm=5176.100239.blogcont82041.310.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.310\">nodejs cms</a></li><br><li><a href=\"http://ourjs.com/detail/529ca5950cb6498814000005?spm=5176.100239.blogcont82041.311.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.311\">Node初学者入门，一本全面的NodeJS教程</a></li><br><li><a href=\"http://www.barretlee.com/blog/2015/10/07/debug-nodejs-in-command-line/?spm=5176.100239.blogcont82041.312.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.312\">NodeJS的代码调试和性能调优</a></li><br></ul><br>## 十. 性能优化<br><ol><br><li>常规优化</li><br></ol><br>- <a href=\"http://www.infoq.com/cn/articles/javascript-high-performance-animation-and-page-rendering\">Javascript高性能动画与页面渲染</a><br>- <a href=\"http://isux.tencent.com/h5-performance.html\">移动H5前端性能优化指南</a><br>- <a href=\"http://ued.5173.com/?p=1731\">5173首页前端性能优化实践</a><br>- <a href=\"http://www.uisdc.com/front-end-performance-for-web-designers-and-front-end-developers\">给网页设计师和前端开发者看的前端性能优化</a><br>- <a href=\"http://www.orzpoint.com/profiling-css-and-optimization-notes/\">复杂应用的 CSS 性能分析和优化建议</a><br>- <a href=\"http://www.zhangxinxu.com/wordpress/tag/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD/\">张鑫旭——前端性能</a><br>- <a href=\"http://www.xiaoqiang.org/javascript/font-end-performance-monitor.html\">前端性能监控总结</a><br>- <a href=\"http://udc.weibo.com/2013/05/%E7%BD%91%E7%AB%99%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%B9%8Bcss%E6%97%A0%E5%9B%BE%E7%89%87%E6%8A%80%E6%9C%AF/\">网站性能优化之CSS无图片技术</a><br>- <a href=\"http://www.aliued.cn/2013/01/20/web%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E8%BF%9B%E9%98%B6%E8%B7%AF.html\">web前端性能优化进阶路</a><br>- <a href=\"http://my.eoe.cn/tuwandou/archive/4544.html\">前端技术：网站性能优化之CSS无图片技术</a><br>- <a href=\"http://www.baiduux.com/blog/2011/02/15/browser-loading/\">浏览器的加载与页面性能优化</a><br>- <a href=\"http://www.w3ctech.com/p/1503\">页面加载中的图片性能优化</a><br>- <a href=\"http://www.feelcss.com/tag/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD\">Hey——前端性能</a><br>- <a href=\"http://www.baiduux.com/blog/2010/03/15/html%E4%BC%98%E5%8C%96-2/\">html优化</a><br>- <a href=\"http://www.99css.com/tag/%e6%80%a7%e8%83%bd\">99css——性能</a><br>- <a href=\"http://www.yslow.net/category.php?cid=20\">Yslow——性能优化</a><br>- <a href=\"http://www.cnblogs.com/yslow/\">YSLOW中文介绍</a><br>- <a href=\"http://www.360ito.com/article/40.html\">转一篇Yahoo关于网站性能优化的文章，兼谈本站要做的优化</a><br>- <a href=\"http://www.360doc.com/content/10/0928/09/2588264_56971287.shtml\">Yahoo!团队实践分享：网站性能</a><br>- <a href=\"http://blog.jiasule.com/i/153\">网站性能优化指南：什么使我们的网站变慢？</a><br>- <a href=\"http://www.powereasy.net/helpyou/knowledge/ecommerce/9593.html\">网站性能优化实践，减少加载时间，提高用户体验</a><br>- <a href=\"http://www.umtry.com/archives/747.html\">浅谈网站性能优化 前端篇</a><br>- <a href=\"http://www.adinnet.cn/blog/designview/2012-7-12/678.html\">前端重构实践之如何对网站性能优化？</a><br>- <a href=\"http://www.gbin1.com/technology/javascript/20130708-front-end-performance-optimization-9/\">前端性能优化：使用媒体查询加载指定大小的背景图片</a><br>- <a href=\"http://www.mykuer.com/post/factors-that-affect-the-speed-of-web-site-open.html\">网站性能系列博文</a><br>- <a href=\"http://tgideas.qq.com/webplat/info/news_version3/804/808/811/m579/201109/41355.shtml\">加载，不只是少一点点</a><br>- <a href=\"http://mzhou.me/article/95310/\">前端性能的测试与优化</a><br>- <a href=\"http://www.gbin1.com/technology/html/20130217-tips-for-speed-up-page-loading/\">分享网页加载速度优化的一些技巧？</a><br>- <a href=\"http://www.f2es.com/images-bytes-opt/\">页面加载中的图片性能优化</a><br>- <a href=\"http://www.tcreator.info/webSchool/website/Front-end-Opt-Yslow.html\">web前端优化(基于Yslow)</a><br>- <a href=\"https://www.qianduan.net/website-performance-optimization-tool.html\">网站性能优化工具大全</a><br>- <a href=\"http://www.alloyteam.com/2012/10/high-performance-html/\">【高性能前端1】高性能HTML</a><br>- <a href=\"http://www.alloyteam.com/2012/10/high-performance-css/\">【高性能前端2】高性能CSS</a><br>- <a href=\"http://coolshell.cn/articles/6470.html\">由12306谈谈网站前端性能和后端性能优化</a><br>- <a href=\"http://www.alloyteam.com/webfrontend/%E5%89%8D%E7%AB%AF%E4%BC%98%E5%8C%96/\">AlloyTeam——前端优化</a><br>- <a href=\"http://www.cnblogs.com/developersupport/p/3248695.html\">毫秒必争，前端网页性能最佳实践</a><br>- <a href=\"http://blog.sina.com.cn/s/blog_6e9d2e0701017kvu.html\">网站性能工具Yslow的使用方法</a><br>- <a href=\"http://www.infoq.com/cn/articles/front-end-engineering-and-performance-optimization-part1\">前端工程与性能优化（上）：静态资源版本更新与缓存</a><br>- <a href=\"http://www.infoq.com/cn/articles/front-end-engineering-and-performance-optimization-part2\">前端工程与性能优化（下）：静态资源管理与模板框架</a><br>- <a href=\"http://blog.jobbole.com/48369/\">HTTPS连接的前几毫秒发生了什么</a><br>- <a href=\"http://uicss.cn/yslow/#more-12319\">Yslow</a><br>- <a href=\"http://blog.smartbear.com/web-performance/essential-web-performance-metrics-a-primer-part-1/\">Essential Web Performance Metrics — A Primer, Part 1</a><br>- <a href=\"http://blog.smartbear.com/performance/essential-web-performance-metrics-part-2/\">Essential Web Performance Metrics — Part 2</a><br>- <a href=\"http://jayli.github.io/blog/data/2011/12/23/yuislide.html\">YUISlide,针对移动设备的动画性能优化</a><br>- <a href=\"http://joelglovier.com/improving-site-performance/\">Improving Site Performance</a><br>- <a href=\"http://segmentfault.com/a/1190000000367899\">让网站提速的最佳前端实践</a><br>- <a href=\"http://sixrevisions.com/web-development/why-website-speed-is-important/\">Why Website Speed is Important</a><br>- <a href=\"https://www.devbridge.com/articles/need-for-speed-how-to-improve-your-website-performance/\">Need for Speed – How to Improve your Website Performance</a><br>- <a href=\"https://github.com/amfe/article/issues/1\">阿里无线前端性能优化指南 (Pt.1 加载期优化) </a><br>- <a href=\"\"></a><br><ol><br><li>优化工具</li><br></ol><br>- <a href=\"http://www.html-js.com/article/3083\">JavaScript 性能分析新工具 OneProfile</a><br>- <a href=\"http://www.html-js.com/article/3091\">JavaScript 堆内存分析新工具 OneHeap</a><br><ol><br><li>在线工具</li><br></ol><br>- <a href=\"https://developers.google.com/speed/pagespeed/insights/\">google在线工具</a><br>- <a href=\"http://www.alibench.com/\">阿里测</a><br>- <a href=\"http://itest.aliyun.com/\">阿里-免费测试服务</a><br>- <a href=\"https://github.com/alibaba/f2etest\">阿里-F2etest多浏览器兼容性测试解决方案</a><br>- <a href=\"http://jsperf.com/\">js性能测试</a><br>- <a href=\"\"></a><br><h3 id=\"52\">十一. 前端架构</h3><br><ul><br><li><a href=\"http://www.zhihu.com/topic/19612641?spm=5176.100239.blogcont82041.313.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.313\">技术架构</a></li><br><li><a href=\"http://saito.im/note/The-Architecture-of-F2E/?spm=5176.100239.blogcont82041.314.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.314\">前端架构</a></li><br><li><a href=\"http://www.zhihu.com/question/24092572?spm=5176.100239.blogcont82041.315.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.315\">如何成为前端架构师</a></li><br><li><a href=\"http://hikejun.com/sharing/2010webrebuild/?spm=5176.100239.blogcont82041.316.jiu0a3&amp;file=fe-infrastructure.html\" data-spm-anchor-id=\"5176.100239.blogcont82041.316\">关于前端架构-张克军</a></li><br><li><a href=\"http://www.zhihu.com/question/25583350?spm=5176.100239.blogcont82041.317.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.317\">百度腾讯offer比较（腾讯游戏VS百度基础架构）</a></li>\n\n<p></ul></p>\n<p><h3 id=\"53\">十二. 个人作品</h3></p>\n<p><h4 id=\"54\">1. 推荐作品</h4></p>\n<p><ul></p>\n<p><li><a href=\"https://gist.github.com/wintercn?spm=5176.100239.blogcont82041.318.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.318\">winter代码片段需要翻墙</a></li></p>\n<p><li><a href=\"http://www.fgm.cc/learn/?spm=5176.100239.blogcont82041.319.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.319\">fgm</a></li></p>\n<p><li><a href=\"https://github.com/hongru/hongru.github.com?spm=5176.100239.blogcont82041.320.jiu0a3&amp;file=hongru.github.com\" data-spm-anchor-id=\"5176.100239.blogcont82041.320\">岑安作品集</a></li></p>\n<p><li><a href=\"http://kmdjs.github.io/?spm=5176.100239.blogcont82041.321.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.321\">当耐特demo集合</a></li></p>\n<p><li><a href=\"http://www.laoshu133.com/Lab/?spm=5176.100239.blogcont82041.322.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.322\">米空格 js作品</a></li></p>\n<p><li><a href=\"http://koen301.github.io/?spm=5176.100239.blogcont82041.323.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.323\">myFocus</a></li></p>\n<p><li><a href=\"http://panxuepeng.github.io/seajslib/?spm=5176.100239.blogcont82041.324.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.324\">SeaJS组件库</a></li></p>\n<p><li><a href=\"http://yanhaijing.com/myProject/?spm=5176.100239.blogcont82041.325.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.325\">颜海镜作品</a></li></p>\n<p><li><a href=\"http://jo2.org/category/myworks/?spm=5176.100239.blogcont82041.326.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.326\">脚儿网作品</a></li></p>\n<p><li><a href=\"http://www.cnitblog.com/yemoo/category/3107.html?spm=5176.100239.blogcont82041.327.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.327\">javascript个人作品</a></li></p>\n<p><li><a href=\"http://bbs.miaov.com/forum.php?spm=5176.100239.blogcont82041.328.jiu0a3&amp;mod=viewthread&amp;tid=7790\" data-spm-anchor-id=\"5176.100239.blogcont82041.328\">妙味的雷东升游戏作品</a></li></p>\n<p><li><a href=\"http://bbs.csdn.net/topics/380227212?spm=5176.100239.blogcont82041.329.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.329\">javascript作品集</a></li></p>\n<p><li><a href=\"https://github.com/TooBug/works?spm=5176.100239.blogcont82041.330.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.330\">云五笔，灰度产生生成工具</a></li></p>\n<p><li><a href=\"http://koen301.github.io/?spm=5176.100239.blogcont82041.331.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.331\">项目主页</a></li></p>\n<p><li><a href=\"http://zaole.net/?spm=5176.100239.blogcont82041.332.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.332\">个性的作品主页</a></li></p>\n<p><li><a href=\"http://static.tingall.com/v2/player/?spm=5176.100239.blogcont82041.333.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.333\">播放器</a></li></p>\n<p><li><a href=\"http://ucren.com/blog/demos?spm=5176.100239.blogcont82041.334.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.334\">ucren js demos 集</a></li></p>\n<p><li><a href=\"http://www.zhinengshe.com/works_list.html?spm=5176.100239.blogcont82041.335.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.335\">智能社</a></li></p>\n<p><li><a href=\"http://demos.shizuwu.cn/?spm=5176.100239.blogcont82041.336.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.336\">实例陈列架</a></li></p>\n<p><li><a href=\"http://zoye.sinaapp.com/demo?spm=5176.100239.blogcont82041.337.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.337\">zoye demo</a></li></p>\n<p><li><a href=\"http://lab.yuanwai.wang/?spm=5176.100239.blogcont82041.338.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.338\">王员外</a></li></p>\n<p><li><a href=\"http://pingfan1990.sinaapp.com?spm=5176.100239.blogcont82041.339.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.339\">平凡</a></li></p>\n<p><li><a href=\"http://www.lovewebgames.com/?spm=5176.100239.blogcont82041.340.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.340\">jyg 游戏案例</a></li></p>\n<p><li><a href=\"http://www.helloweba.com/list.html?spm=5176.100239.blogcont82041.341.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.341\">很多jquery插件</a></li></p>\n<p><li><a href=\"http://www.bujichong.com/sojs/api/index.html?spm=5176.100239.blogcont82041.342.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.342\">不羁虫 - soJs 作品系列</a></li></p>\n<p><li><a href=\"http://frozenui.github.io/case.html?spm=5176.100239.blogcont82041.343.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.343\">frozenui</a></li></p>\n<p><li><a href=\"http://js-game.github.io/othello/?spm=5176.100239.blogcont82041.344.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.344\">黑白棋</a></li></p>\n<p><li><a href=\"http://yansm.github.io/fromone/index.html?spm=5176.100239.blogcont82041.345.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.345\">fromone</a></li><br></ul></p>\n<p><h4 id=\"55\">2. 群员作品</h4></p>\n<p><ul></p>\n<p><li><a href=\"http://demo.webjyh.com/?spm=5176.100239.blogcont82041.346.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.346\">MDialog - [合肥-M.J]</a></li></p>\n<p><li><a href=\"http://sandbox.runjs.cn/show/do6zlrrk?spm=5176.100239.blogcont82041.347.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.347\">轮播图 - [上海－冷静]</a></li></p>\n<p><li><a href=\"http://www.replace5.com/?spm=5176.100239.blogcont82041.348.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.348\">[广州—坚壳]</a></li></p>\n<p><li><a href=\"http://www.seejs.com/demos/?spm=5176.100239.blogcont82041.349.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.349\">[成都 - 无痕]　感恩节专题</a></li></p>\n<p><li><a href=\"http://hacke2.github.io/works?spm=5176.100239.blogcont82041.350.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.350\">[球霸天]</a></li></p>\n<p><li><a href=\"http://www.cnblogs.com/mcat/?spm=5176.100239.blogcont82041.351.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.351\">[北京-小数]</a></li></p>\n<p><li><a href=\"http://thx.github.io/magix/?spm=5176.100239.blogcont82041.352.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.352\">[ptf] Magix 工具</a></li></p>\n<p><li><a href=\"http://thx.github.io/magix/?spm=5176.100239.blogcont82041.353.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.353\">[杭州-Pft] Magix 基于 MVC 结构和 Hash 驱动的 OPOA（One Page One Application）应用</a></li></p>\n<p><li><a href=\"http://bh-lay.com/labs/?spm=5176.100239.blogcont82041.354.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.354\">[上海-剧中人]-实验室</a></li></p>\n<p><li><a href=\"http://jikeytang.github.io?spm=5176.100239.blogcont82041.355.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.355\">[上海-豪情 ] 作品集合</a></li></p>\n<p><li><a href=\"http://guoshan.sinaapp.com/?spm=5176.100239.blogcont82041.356.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.356\">[成都-feeling]</a></li></p>\n<p><li><a href=\"http://www.cnblogs.com/liyunhua/?spm=5176.100239.blogcont82041.357.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.357\">[上海-angela]</a></li></p>\n<p><li><a href=\"http://hcjp.github.io/work/demo/?spm=5176.100239.blogcont82041.358.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.358\">[海南-hank]作品</a></li></p>\n<p><li><a href=\"https://github.com/yibuyisheng/blogs/issues?spm=5176.100239.blogcont82041.359.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.359\">[上海-张力]博客</a></li></p>\n<p><li><a href=\"http://zkske121.github.io/?spm=5176.100239.blogcont82041.360.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.360\">[上海-zenki]作品</a></li></p>\n<p><li><a href=\"http://01google.sinaapp.com/locker.html?spm=5176.100239.blogcont82041.361.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.361\">移动端图案解锁</a></li></p>\n<p><li><a href=\"https://github.com/webjyh/MPreview.mobile?spm=5176.100239.blogcont82041.362.jiu0a3&amp;file=MPreview.mobile\" data-spm-anchor-id=\"5176.100239.blogcont82041.362\">[合肥-M.J] - MPreview 移动端图片预览组</a></li></p>\n<p><li><a href=\"https://github.com/webjyh/Mexam?spm=5176.100239.blogcont82041.363.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.363\">[合肥-M.J] - Mexam 移动端在线做题组</a></li></p>\n<p><li><a href=\"http://letyougo.github.io/dancer/?spm=5176.100239.blogcont82041.364.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.364\">[北京-苏瑞] - dancer小人</a></li></p>\n<p><li><a href=\"http://k.swao.cn/js/?spm=5176.100239.blogcont82041.365.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.365\">[上海-玄沐]- 个人网站</a></li></p>\n<p><li><a href=\"http://www.meckodo.com/?spm=5176.100239.blogcont82041.366.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.366\">[厦门-二哲]- 个人博客</a></li><br></ul></p>\n<p><h4 id=\"56\">3. 国外大牛精品</h4></p>\n<p><ul></p>\n<p><li><a href=\"http://pazguille.me/?spm=5176.100239.blogcont82041.367.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.367\">pazguille</a></li><br></ul></p>\n<p><h3 id=\"57\">十三. 简历模板</h3></p>\n<p><ul></p>\n<p><li><a href=\"http://learnshare.github.io/about/index.html?spm=5176.100239.blogcont82041.368.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.368\">不错的个人简历</a></li></p>\n<p><li><a href=\"http://hcy2367.github.io/resume/?spm=5176.100239.blogcont82041.369.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.369\">简历</a></li></p>\n<p><li><a href=\"http://ncuey.sinaapp.com/CrispElite/?spm=5176.100239.blogcont82041.370.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.370\">张伦</a></li></p>\n<p><li><a href=\"https://github.com/hacke2/ResumeSample?spm=5176.100239.blogcont82041.371.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.371\">简历</a></li></p>\n<p><li><a href=\"http://blog.dandyweng.com/2013/07/how-my-website-was-created/?spm=5176.100239.blogcont82041.372.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.372\">翁天信</a></li></p>\n<p><li><a href=\"http://www.webhek.com/misc/interactive-resume/?spm=5176.100239.blogcont82041.373.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.373\">动画方式的简历</a></li></p>\n<p><li><a href=\"http://www.linqing07.com/resume.html?spm=5176.100239.blogcont82041.374.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.374\">组件丰富简历</a></li></p>\n<p><li><a href=\"http://www.mojianli.com/resume/view?spm=5176.100239.blogcont82041.375.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.375\">简历池</a></li></p>\n<p><li><a href=\"http://www.haorooms.com/about?spm=5176.100239.blogcont82041.376.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.376\">haorooms博客</a></li></p>\n<p><li><a href=\"http://cv.youngdze.com/?spm=5176.100239.blogcont82041.377.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.377\">Justin Young</a></li></p>\n<p><li><a href=\"\"></a></li><br></ul></p>\n<p><h3 id=\"58\">十四. 面试题</h3></p>\n<p><ul></p>\n<p><li><a href=\"http://www.nowcoder.com/discuss/3196?spm=5176.100239.blogcont82041.378.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.378\">那几个月在找工作（百度，网易游戏）</a></li></p>\n<p><li><a href=\"http://www.html-js.com/article/1743?spm=5176.100239.blogcont82041.379.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.379\">2014最新面试题</a></li></p>\n<p><li><a href=\"http://www.w3cfuns.com/thread-5598563-2-1.html?spm=5176.100239.blogcont82041.380.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.380\">阿里前端面试题</a></li></p>\n<p><li><a href=\"http://www.cnblogs.com/imwtr/p/4685546.html?spm=5176.100239.blogcont82041.381.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.381\">2016校招内推 – 阿里巴巴前端 – 三面面试经历 </a></li></p>\n<p><li><a href=\"http://www.w3cfuns.com/article-5599657-1-1.html?spm=5176.100239.blogcont82041.382.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.382\">腾讯面试题</a></li></p>\n<p><li><a href=\"http://www.cnblogs.com/lvdabao/p/3660707.html?spm=5176.100239.blogcont82041.383.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.383\">年后跳槽那点事：乐视+金山+360面试之行</a></li></p>\n<p><li><a href=\"http://fatesinger.com/2722.html?spm=5176.100239.blogcont82041.384.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.384\">阿里前端面试题上线</a></li></p>\n<p><li><a href=\"http://www.cnblogs.com/52cik/p/js-question-lg.html?spm=5176.100239.blogcont82041.385.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.385\">拉勾网js面试题</a></li></p>\n<p><li><a href=\"http://www.cnblogs.com/allenxing/p/3724382.html?spm=5176.100239.blogcont82041.386.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.386\">前端面试</a></li></p>\n<p><li><a href=\"http://mianshiti.diandian.com/?spm=5176.100239.blogcont82041.387.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.387\">Web开发笔试面试题 大全</a></li></p>\n<p><li><a href=\"http://segmentfault.com/a/1190000000465431?spm=5176.100239.blogcont82041.388.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.388\">前端开发面试题</a></li></p>\n<p><li><a href=\"https://github.com/markyun/My-blog/tree/master/Front-end-Developer-Questions?spm=5176.100239.blogcont82041.389.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.389\">2014最新前端面试题</a></li></p>\n<p><li><a href=\"https://github.com/fex-team/interview-questions?spm=5176.100239.blogcont82041.390.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.390\">百度面试</a></li></p>\n<p><li><a href=\"http://www.w3cfuns.com/forum.php?spm=5176.100239.blogcont82041.391.jiu0a3&amp;mod=forumdisplay&amp;fid=51&amp;filter=typeid&amp;typeid=177\" data-spm-anchor-id=\"5176.100239.blogcont82041.391\">面试题</a></li></p>\n<p><li><a href=\"https://github.com/darcyclarke/Front-end-Developer-Interview-Questions/tree/master/Chinese?spm=5176.100239.blogcont82041.392.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.392\">前端工作面试问题</a></li></p>\n<p><li><a href=\"http://segmentfault.com/a/1190000000465431?spm=5176.100239.blogcont82041.393.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.393\">前端开发面试题</a></li></p>\n<p><li><a href=\"http://ourjs.com/detail/5%E4%B8%AA%E7%BB%8F%E5%85%B8%E7%9A%84%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98?spm=5176.100239.blogcont82041.394.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.394\">5个经典的前端面试问题</a></li></p>\n<p><li><a href=\"http://segmentfault.com/a/1190000002562454?spm=5176.100239.blogcont82041.395.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.395\">最全前端面试问题及答案总结 </a></li></p>\n<p><li><a href=\"http://www.html-js.com/article/Large-search-front-team-column%202961?spm=5176.100239.blogcont82041.396.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.396\">如何面试一名前端开发工程师？</a></li></p>\n<p><li><a href=\"https://github.com/hawx1993/Front-end-Interview-questions?spm=5176.100239.blogcont82041.397.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.397\">史上最全 前端开发面试问题及答案整理</a></li></p>\n<p><li><a href=\"http://www.cnblogs.com/xiaoruo/p/4665163.html?spm=5176.100239.blogcont82041.398.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.398\">前端实习生面试总结 </a></li></p>\n<p><li><a href=\"https://github.com/hawx1993/Front-end-Interview-questions?spm=5176.100239.blogcont82041.399.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.399\">史上最全 前端开发面试问题及答案整理</a></li></p>\n<p><li><a href=\"http://blog.jobbole.com/78738/?spm=5176.100239.blogcont82041.400.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.400\">BAT及各大互联网公司2014前端笔试面试题：JavaScript篇</a></li></p>\n<p><li><a href=\"https://github.com/paddingme/Front-end-Web-Development-Interview-Question?spm=5176.100239.blogcont82041.401.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.401\">前端开发面试题大收集</a></li></p>\n<p><li><a href=\"https://github.com/qiu-deqing/FE-interview?spm=5176.100239.blogcont82041.402.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.402\">收集的前端面试题和答案</a></li></p>\n<p><li><a href=\"http://www.zhihu.com/question/19568008?spm=5176.100239.blogcont82041.403.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.403\">如何面试前端工程师</a></li></p>\n<p><li><a href=\"https://github.com/markyun/My-blog/blob/master/Front-end-Developer-Questions/Questions-and-Answers/README.md?spm=5176.100239.blogcont82041.404.jiu0a3&amp;file=README.md\" data-spm-anchor-id=\"5176.100239.blogcont82041.404\">前端开发面试题</a></li></p>\n<p><li><a href=\"http://www.nowcoder.com/discuss?spm=5176.100239.blogcont82041.405.jiu0a3&amp;type=2\" data-spm-anchor-id=\"5176.100239.blogcont82041.405\">牛客网-笔试面经</a></li><br></ul></p>\n<p><h3 id=\"59\">十五. iconfont</h3></p>\n<p><ul></p>\n<p><li><a href=\"http://www.zhihu.com/question/21253343?spm=5176.100239.blogcont82041.406.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.406\">中文字体</a></li></p>\n<p><li><a href=\"http://iconfont.cn?spm=5176.100239.blogcont82041.407.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.407\">淘宝字库</a></li></p>\n<p><li><a href=\"http://mux.alimama.com/fonts?spm=5176.100239.blogcont82041.408.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.408\">字体</a></li></p>\n<p><li><a href=\"http://iconfont.cn/help/platform.html?spm=5176.100239.blogcont82041.409.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.409\">制作教程</a></li></p>\n<p><li><a href=\"http://www.zhangxinxu.com/wordpress/?spm=5176.100239.blogcont82041.410.jiu0a3&amp;s=icomoon\" data-spm-anchor-id=\"5176.100239.blogcont82041.410\">zhangxinxu-icommon</a></li></p>\n<p><li><a href=\"https://icomoon.io/app/?spm=5176.100239.blogcont82041.411.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.411\">icommon</a></li></p>\n<p><li><a href=\"http://imooc.com/learn/243?spm=5176.100239.blogcont82041.412.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.412\">用字体在网页中画ICON图标(推荐教程)</a></li></p>\n<p><li><a href=\"http://font-spider.org/?spm=5176.100239.blogcont82041.413.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.413\">字体压缩工具</a> 感谢初级群　[深圳-小鱼] 的推荐</li><br></ul></p>\n<p><h3 id=\"60\">十六. 开发工具类</h3></p>\n<p><ol></p>\n<p><li>前端开发工具</li><br></ol></p>\n<ul>\n<li><a href=\"https://github.com/judasn/IntelliJ-IDEA-Tutorial\">IntelliJ IDEA 简体中文专题教程</a></li>\n<li><a href=\"http://t.cn/8kZZ1Uy\">Webstorm,InterllIdea,Phpstorm</a></li>\n<li><a href=\"https://github.com/jikeytang/sublime-text\">SublimeText</a></li>\n<li><a href=\"https://atom.io/\">Atom</a></li>\n<li><a href=\"https://code.visualstudio.com/\">visual studio code</a><ol><br><li><br><p>Chrome, Firebug, Filddle 调试</p><br><ol><br><li>Fiddler<br><ul><br><li><a href=\"http://www.cnblogs.com/tugenhua0707/p/4623317.html?spm=5176.100239.blogcont82041.414.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.414\">Fiddler调式使用知多少(一)深入研究</a></li><br><li><a href=\"http://www.cnblogs.com/strick/p/4570006.html?spm=5176.100239.blogcont82041.415.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.415\">微信fiddle</a></li><br><li><a href=\"http://gaoboy.com/article/26.html?spm=5176.100239.blogcont82041.416.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.416\">微信fiddle</a></li><br><li><a href=\"\"></a></li><br></ul><br></li><br><li>Chrome<br><ul><br><li><a href=\"https://developer.chrome.com/devtools?spm=5176.100239.blogcont82041.417.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.417\">Google Chrome 官方</a></li><br><li><a href=\"http://www.cnblogs.com/constantince/p/4565261.html?spm=5176.100239.blogcont82041.418.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.418\">Chrome - 基础</a></li><br><li><a href=\"http://www.cnblogs.com/constantince/p/4579121.html?spm=5176.100239.blogcont82041.419.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.419\">Chrome - 进阶</a></li><br><li><a href=\"http://www.cnblogs.com/constantince/p/4585983.html?spm=5176.100239.blogcont82041.420.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.420\">Chrome - 性能</a></li><br><li><a href=\"http://www.cnblogs.com/constantince/p/4607497.html?spm=5176.100239.blogcont82041.421.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.421\">Chrome - 性能进阶</a></li><br><li><a href=\"http://www.cnblogs.com/constantince/p/4624241.html?spm=5176.100239.blogcont82041.422.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.422\">Chrome - 移动</a></li><br><li><a href=\"http://www.cnblogs.com/liyunhua/p/4544738.html?spm=5176.100239.blogcont82041.423.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.423\">Chrome - 使用技巧</a></li><br><li><a href=\"http://www.cnblogs.com/Wayou/p/chrome-console-tips-and-tricks.html?spm=5176.100239.blogcont82041.424.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.424\">Chrome - Console控制台不完全指南</a></li><br><li><a href=\"http://c7sky.com/chrome-devtools-workspace.html?spm=5176.100239.blogcont82041.425.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.425\">Chrome - Workspace使浏览器变成IDE</a></li><br><li><a href=\"http://www.html-js.com/article/Nothing-blind%202975?spm=5176.100239.blogcont82041.426.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.426\">network面板</a></li><br><li><a href=\"http://anti-code.com/devtools-cheatsheet/?spm=5176.100239.blogcont82041.427.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.427\">chrome开发工具快捷键</a></li><br><li><a href=\"http://www.html-js.com/article/2327?spm=5176.100239.blogcont82041.428.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.428\">chrome调试工具常用功能整理</a></li><br><li><a href=\"http://www.iinterest.net/2014/05/09/chrome-dev-tool-workspace/?spm=5176.100239.blogcont82041.429.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.429\">Chrome 开发工具 Workspace 使用</a></li><br><li><a href=\"http://www.cppblog.com/deercoder/archive/2011/10/22/158886.html?spm=5176.100239.blogcont82041.430.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.430\">Chrome神器Vimium快捷键学习记录 </a></li><br><li><a href=\"http://www.w3cplus.com/sassguide/debug.html?spm=5176.100239.blogcont82041.431.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.431\">sass调试-w3cplus</a></li><br><li><a href=\"http://www.w3cplus.com/tools/how-to-use-chrome-devtools-like-a-pro.html?spm=5176.100239.blogcont82041.432.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.432\">如何更专业的使用Chrome开发者工具-w3cplus</a></li><br><li><a href=\"http://sentsin.com/web/253.html?spm=5176.100239.blogcont82041.433.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.433\">chrome调试canvas</a></li><br><li><a href=\"https://developer.chrome.com/devtools/index?spm=5176.100239.blogcont82041.434.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.434\">chrome profiles1</a></li><br><li><a href=\"http://h5dev.uc.cn/article-25-1.html?spm=5176.100239.blogcont82041.435.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.435\">chrome profiles2</a></li><br><li><a href=\"http://www.oschina.net/translate/performance-optimisation-with-timeline-profiles?spm=5176.100239.blogcont82041.436.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.436\">chrome profiles3</a></li><br><li><a href=\"https://developer.chrome.com/devtools/docs/mobile-emulation?spm=5176.100239.blogcont82041.437.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.437\">chrome移动版调试</a></li><br><li><a href=\"http://ued.taobao.org/blog/2012/06/debug-with-chrome-dev-tool/?spm=5176.100239.blogcont82041.438.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.438\">chrome调试</a></li><br><li><a href=\"http://www.cnblogs.com/QLeelulu/archive/2011/08/28/2156402.html?spm=5176.100239.blogcont82041.439.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.439\">chrome的调试</a></li><br><li><a href=\"https://developer.chrome.com/devtools/docs/commandline-api?spm=5176.100239.blogcont82041.440.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.440\">chrome console 命令详解</a></li><br><li><a href=\"http://www.cnblogs.com/leonkao/p/3809655.html?spm=5176.100239.blogcont82041.441.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.441\">查看事件绑定1</a></li><br><li><a href=\"http://www.cnblogs.com/xiaoyao2011/p/3447421.html?spm=5176.100239.blogcont82041.442.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.442\">查看事件绑定2</a></li><br><li><a href=\"http://segmentfault.com/a/1190000000683599?spm=5176.100239.blogcont82041.443.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.443\">神器——Chrome开发者工具(一)</a></li><br><li><a href=\"https://xinranliu.me/2015-05-22-qiqu-performance/?spm=5176.100239.blogcont82041.444.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.444\">奇趣百科性能优化(Chrome DevTools 中的 Timeline Profils 等工具使用介绍)</a></li><br><li><a href=\"http://frontenddev.org/link/15-tips-of-chrome-developer-tools.html?spm=5176.100239.blogcont82041.445.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.445\">chrome 开发者工具的 15 个小技巧</a></li><br><li><a href=\"http://1ke.co/course/361?spm=5176.100239.blogcont82041.446.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.446\">Chrome开发者工具不完全指南</a></li><br><li><a href=\"http://segmentfault.com/a/1190000003882567?spm=5176.100239.blogcont82041.447.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.447\">Chrome 开发者工具使用技巧</a></li><br></ul><br></li><br><li>Firebug<br><ul><br><li><a href=\"http://www.imooc.com/learn/137?spm=5176.100239.blogcont82041.448.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.448\">firebug视频教程</a></li><br><li><a href=\"https://developer.mozilla.org/zh-CN/docs/Tools/WebIDE?spm=5176.100239.blogcont82041.449.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.449\">firefox 模拟器</a></li><br><li><a href=\"http://www.cnblogs.com/ctriphire/p/4116207.html?spm=5176.100239.blogcont82041.450.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.450\">console.log 命令详解</a></li><br><li><a href=\"http://www.ruanyifeng.com/blog/2008/06/firebug_tutorial.html?spm=5176.100239.blogcont82041.451.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.451\">Firebug入门指南</a></li><br><li><a href=\"http://www.ruanyifeng.com/blog/2011/03/firebug_console_tutorial.html?spm=5176.100239.blogcont82041.452.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.452\">Firebug控制台详解</a></li><br><li><a href=\"\"></a></li><br></ul><br></li><br><li>移动,微信调试<br><ul><br><li><a href=\"https://openstf.github.io/?spm=5176.100239.blogcont82041.453.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.453\">浏览器端调试安卓</a></li><br><li><a href=\"http://yujiangshui.com/multidevice-frontend-debug/?spm=5176.100239.blogcont82041.454.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.454\">移动端前端开发调试</a></li><br><li><a href=\"https://github.com/yujiangshui/CN-Chrome-DevTools/blob/remote-debugging/md/Use-Tools/remote-debugging.md?spm=5176.100239.blogcont82041.455.jiu0a3&amp;file=remote-debugging.md\" data-spm-anchor-id=\"5176.100239.blogcont82041.455\">使用 Chrome 远程调试 Android 设备</a></li><br><li><a href=\"http://plus.uc.cn/document/webapp/doc5.html?spm=5176.100239.blogcont82041.456.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.456\">mac移动端调试</a></li><br><li><a href=\"http://www.mihtool.com/?spm=5176.100239.blogcont82041.457.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.457\">mac移动端调试</a></li><br><li><a href=\"http://thx.github.io/mobile/debugging-in-mobile/?spm=5176.100239.blogcont82041.458.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.458\">无线调试攻略</a></li><br><li><a href=\"http://yanhaijing.com/mobile/2014/12/17/web-debug-for-mobile/?spm=5176.100239.blogcont82041.459.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.459\">无线调试攻略</a></li><br><li><a href=\"http://www.jianshu.com/p/ccf124f1f74b?spm=5176.100239.blogcont82041.460.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.460\">屌爆了,完美调试 微信webview(x5)</a></li><br><li><a href=\"http://liyaodong.com/2015/07/06/%E5%BE%AE%E4%BF%A1%E8%B0%83%E8%AF%95%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/?spm=5176.100239.blogcont82041.461.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.461\">微信调试的那些事</a></li><br><li><a href=\"http://jsconsole.com/?spm=5176.100239.blogcont82041.462.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.462\">远程console</a></li><br><li><a href=\"http://blog.qqbrowser.cc/?spm=5176.100239.blogcont82041.463.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.463\">微信调试工具</a></li><br><li><a href=\"https://github.com/jieyou/remote_inspect_web_on_real_device?spm=5176.100239.blogcont82041.464.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.464\">各种真机远程调试方法汇总</a></li><br></ul><br></li><br><li>iOS Simulator<br><ul><br><li><a href=\"https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/iOS_Simulator_Guide/Introduction/Introduction.html?spm=5176.100239.blogcont82041.465.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.465\">Simulator</a></li><br><li><a href=\"http://www.crifan.com/intro_ios_simulator_in_xcode_and_usage_summary/?spm=5176.100239.blogcont82041.466.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.466\">Xcode中的iOS模拟器(iOS Simulator)的介绍和使用心得</a></li><br></ul><br></li><br></ol><br></li><br><li><p>img</p></li><br></ol></li>\n<li><a href=\"http://preloaders.net/en/circular\">loading img</a></li>\n<li><a href=\"http://zhitu.isux.us/\">智图-图片优化平台</a></li>\n<li><a href=\"https://tinypng.com/\">在线png优化</a><ol><br><li>生成二维码</li><br></ol></li>\n<li><a href=\"http://cli.im/\">生成二维码</a><ol><br><li><br><p>浏览器同步</p><br><ul><br><li><a href=\"https://github.com/leeluolee/puer?spm=5176.100239.blogcont82041.467.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.467\">puer</a></li><br><li><a href=\"http://livereload.com/?spm=5176.100239.blogcont82041.468.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.468\">liveReload</a></li><br><li><a href=\"http://getf5.com/?spm=5176.100239.blogcont82041.469.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.469\">f5</a></li><br><li><a href=\"http://geek100.com/2608/?spm=5176.100239.blogcont82041.470.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.470\">File Watchers</a></li><br></ul><br></li><br><li><br><p>在线PPT制作</p><br><ul><br><li><a href=\"http://js8.in/2013/11/16/%E6%8E%A8%E8%8D%90nodeppt%EF%BC%9A%E4%BD%BF%E7%94%A8markdown%E8%AF%AD%E6%B3%95%E6%9D%A5%E5%86%99%E7%BD%91%E9%A1%B5ppt/?spm=5176.100239.blogcont82041.471.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.471\">nodePPT</a></li><br><li><a href=\"https://github.com/ksky521/nodePPT?spm=5176.100239.blogcont82041.472.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.472\">PPT</a></li><br><li><a href=\"https://github.com/hakimel/reveal.js/?spm=5176.100239.blogcont82041.473.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.473\">reveal</a></li><br><li><a href=\"https://github.com/Seldaek/slippy?spm=5176.100239.blogcont82041.474.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.474\">slippy</a></li><br></ul><br></li><br></ol><br><h3 id=\"61\">十七. 前端导航网站</h3><br><ul><br><li><a href=\"http://uxbees.com/index.html?spm=5176.100239.blogcont82041.475.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.475\">界面清爽的前端导航</a></li><br><li><a href=\"http://whycss.com/?spm=5176.100239.blogcont82041.476.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.476\">前端导航</a></li><br><li><a href=\"http://www.daqianduan.com/nav?spm=5176.100239.blogcont82041.477.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.477\">前端网址导航</a></li><br><li><a href=\"http://sentsin.com/daohang/?spm=5176.100239.blogcont82041.478.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.478\">前端名录</a></li><br><li><a href=\"http://123.jser.us/?spm=5176.100239.blogcont82041.479.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.479\">前端导航</a></li><br><li><a href=\"http://www.css88.com/nav/?spm=5176.100239.blogcont82041.480.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.480\">前端开发资源</a></li><br><li><a href=\"http://www.haourl.cn/?spm=5176.100239.blogcont82041.481.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.481\">网址导航</a></li><br><li><a href=\"http://code.ciaoca.com/?spm=5176.100239.blogcont82041.482.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.482\">前端开发仓库 - 众多效果的收集地</a> </li><br><li><a href=\"https://github.com/jnoodle/f2e-collect?spm=5176.100239.blogcont82041.483.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.483\">前端资源导航</a></li><br><li><a href=\"http://f2e.im/static/pages/nav/index.html?spm=5176.100239.blogcont82041.484.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.484\">F2E 前端导航</a></li><br></ul><br><h3 id=\"62\">十八. 常用CDN</h3><br><ul><br><li><a href=\"http://lib.sinaapp.com/?spm=5176.100239.blogcont82041.485.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.485\">新浪CDN</a></li><br><li><a href=\"http://cdn.code.baidu.com/?spm=5176.100239.blogcont82041.486.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.486\">百度静态资源公共库</a></li><br><li><a href=\"http://libs.useso.com/?spm=5176.100239.blogcont82041.487.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.487\">360网站卫士常用前端公共库CDN服务</a></li><br><li><a href=\"http://www.bootcdn.cn/?spm=5176.100239.blogcont82041.488.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.488\">Bootstrap中文网开源项目免费 CDN 服务</a></li><br><li><a href=\"http://staticfile.org/?spm=5176.100239.blogcont82041.489.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.489\">开放静态文件 CDN - 七牛</a></li><br><li><a href=\"http://www.jq22.com/cdn/?spm=5176.100239.blogcont82041.490.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.490\">CDN加速 - jq22</a></li><br><li><a href=\"http://code.jquery.com/?spm=5176.100239.blogcont82041.491.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.491\">jQuery CDN</a></li><br><li><a href=\"http://www.google-jquery-cdn.com/?spm=5176.100239.blogcont82041.492.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.492\">Google jQuery CDN</a></li><br><li><a href=\"http://www.asp.net/ajax/cdn?spm=5176.100239.blogcont82041.493.jiu0a3\" data-spm-anchor-id=\"5176.100239.blogcont82041.493\">微软CDN</a></li><br></ul><br><h3 id=\"63\">十九. Git,SVN,Github</h3><br><ol><br><li>Git</li><br></ol></li>\n<li><a href=\"http://git-scm.com/\">git-scm</a></li>\n<li><a href=\"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\">廖雪峰-Git教程</a></li>\n<li><a href=\"https://git-for-windows.github.io/\">git-for-windows</a></li>\n<li><a href=\"http://daemon369.github.io/git/2015/03/10/add-ssh-keys-for-github/\">GitHub 添加 SSH keys</a></li>\n<li><a href=\"http://www.worldhello.net/gotgithub/index.html\">gogithub</a></li>\n<li><a href=\"http://pcottle.github.io/learnGitBranching/\">git常规命令练习</a></li>\n<li><a href=\"https://github.com/xirong/my-git\">git的资料整理</a></li>\n<li><a href=\"http://www.cnblogs.com/fanfan259/p/4810517.html\">我所记录的git命令（非常实用）</a></li>\n<li><a href=\"https://github.com/xirong/my-git/blob/master/git-workflow-tutorial.md\">企业开发git工作流模式探索部分休整</a></li>\n<li><a href=\"https://github.com/phodal/github-roam\">GitHub 漫游指南</a></li>\n<li><a href=\"https://github.com/tiimgreen/github-cheat-sheet/blob/master/README.zh-cn.md\">GitHub秘籍</a></li>\n<li><a href=\"http://livoras.com/post/28\">使用git和github进行协同开发流程</a></li>\n<li><a href=\"http://onlywei.github.io/explain-git-with-d3/\">动画方式练习git</a></li>\n</ul>\n<p></div></p>"},{"title":"前端知识点3","date":"2017-06-07T04:17:02.000Z","_content":"<div>\n一、HTML和CSS\n1、你做的页面在哪些流览器测试过？这些浏览器的内核分别是什么?\nIE: trident内核\n\nFirefox：gecko内核\n\nSafari:webkit内核\n\nOpera:以前是presto内核，Opera现已改用Google Chrome的Blink内核\n\nChrome:Blink(基于webkit，Google与Opera Software共同开发)\n\n2、每个HTML文件里开头都有个很重要的东西，Doctype，知道这是干什么的吗？\n<!DOCTYPE> 声明位于文档中的最前面的位置，处于 <html> 标签之前。此标签可告知浏览器文档使用哪种 HTML 或 XHTML 规范。（重点：告诉浏览器按照何种规范解析页面）\n\n<!--more-->\n\n3、Quirks模式是什么？它和Standards模式有什么区别\n从IE6开始，引入了Standards模式，标准模式中，浏览器尝试给符合标准的文档在规范上的正确处理达到在指定浏览器中的程度。\n\n在IE6之前CSS还不够成熟，所以IE5等之前的浏览器对CSS的支持很差， IE6将对CSS提供更好的支持，然而这时的问题就来了，因为有很多页面是基于旧的布局方式写的，而如果IE6 支持CSS则将令这些页面显示不正常，如何在即保证不破坏现有页面，又提供新的渲染机制呢？\n\n在写程序时我们也会经常遇到这样的问题，如何保证原来的接口不变，又提供更强大的功能，尤其是新功能不兼容旧功能时。遇到这种问题时的一个常见做法是增加参数和分支，即当某个参数为真时，我们就使用新功能，而如果这个参数 不为真时，就使用旧功能，这样就能不破坏原有的程序，又提供新功能。IE6也是类似这样做的，它将DTD当成了这个“参数”，因为以前的页面大家都不会去写DTD，所以IE6就假定 如果写了DTD，就意味着这个页面将采用对CSS支持更好的布局，而如果没有，则采用兼容之前的布局方式。这就是Quirks模式（怪癖模式，诡异模式，怪异模式）。\n\n区别：\n\n总体会有布局、样式解析和脚本执行三个方面的区别。\n\n盒模型：在W3C标准中，如果设置一个元素的宽度和高度，指的是元素内容的宽度和高度，而在Quirks 模式下，IE的宽度和高度还包含了padding和border。\n\n\n\n设置行内元素的高宽：在Standards模式下，给<span>等行内元素设置wdith和height都不会生效，而在quirks模式下，则会生效。\n\n设置百分比的高度：在standards模式下，一个元素的高度是由其包含的内容来决定的，如果父元素没有设置百分比的高度，子元素设置一个百分比的高度是无效的用margin:0 auto设置水平居中：使用margin:0 auto在standards模式下可以使元素水平居中，但在quirks模式下却会失效。\n\n（还有很多，答出什么不重要，关键是看他答出的这些是不是自己经验遇到的，还是说都是看文章看的，甚至完全不知道。）\n\n4、div+css的布局较table布局有什么优点？\n改版的时候更方便 只要改css文件。\n\n页面加载速度更快、结构化清晰、页面显示简洁。\n\n表现与结构相分离。\n\n易于优化（seo）搜索引擎更友好，排名更容易靠前。\n\n5、 img的alt与title有何异同？ strong与em的异同？\na:alt(alt text):为不能显示图像、窗体或applets的用户代理（UA），alt属性用来指定替换文字。替换文字的语言由lang属性指定。(在IE浏览器下会在没有title时把alt当成 tool tip显示)\n\ntitle(tool tip):该属性为设置该属性的元素提供建议性的信息。\n\nstrong:粗体强调标签，强调，表示内容的重要性\n\nem:斜体强调标签，更强烈强调，表示内容的强调点\n\n6、你能描述一下渐进增强和优雅降级之间的不同吗?\n渐进增强 progressive enhancement：针对低版本浏览器进行构建页面，保证最基本的功能，然后再针对高级浏览器进行效果、交互等改进和追加功能达到更好的用户体验。\n\n优雅降级 graceful degradation：一开始就构建完整的功能，然后再针对低版本浏览器进行兼容。\n\n区别：优雅降级是从复杂的现状开始，并试图减少用户体验的供给，而渐进增强则是从一个非常基础的，能够起作用的版本开始，并不断扩充，以适应未来环境的需要。降级（功能衰减）意味着往回看；而渐进增强则意味着朝前看，同时保证其根基处于安全地带。\n\n“优雅降级”观点\n\n“优雅降级”观点认为应该针对那些最高级、最完善的浏览器来设计网站。而将那些被认为“过时”或有功能缺失的浏览器下的测试工作安排在开发周期的最后阶段，并把测试对象限定为主流浏览器（如 IE、Mozilla 等）的前一个版本。\n\n在这种设计范例下，旧版的浏览器被认为仅能提供“简陋却无妨 (poor, but passable)” 的浏览体验。你可以做一些小的调整来适应某个特定的浏览器。但由于它们并非我们所关注的焦点，因此除了修复较大的错误之外，其它的差异将被直接忽略。\n\n“渐进增强”观点\n\n“渐进增强”观点则认为应关注于内容本身。\n\n内容是我们建立网站的诱因。有的网站展示它，有的则收集它，有的寻求，有的操作，还有的网站甚至会包含以上的种种，但相同点是它们全都涉及到内容。这使得“渐进增强”成为一种更为合理的设计范例。这也是它立即被 Yahoo! 所采纳并用以构建其“分级式浏览器支持 (Graded Browser Support)”策略的原因所在。\n\n那么问题来了。现在产品经理看到IE6,7,8网页效果相对高版本现代浏览器少了很多圆角，阴影（CSS3），要求兼容（使用图片背景，放弃CSS3），你会如何说服他？\n\n7、为什么利用多个域名来存储网站资源会更有效？\nCDN缓存更方便\n\n突破浏览器并发限制\n\n节约cookie带宽\n\n节约主域名的连接数，优化页面响应速度\n\n防止不必要的安全问题\n\n8、请谈一下你对网页标准和标准制定机构重要性的理解。\n网页标准和标准制定机构都是为了能让web发展的更‘健康’，开发者遵循统一的标准，降低开发难度，开发成本，SEO也会更好做，也不会因为滥用代码导致各种BUG、安全问题，最终提高网站易用性。\n\n9、请描述一下cookies，sessionStorage和localStorage的区别？\nsessionStorage用于本地存储一个会话（session）中的数据，这些数据只有在同一个会话中的页面才能访问并且当会话结束后数据也随之销毁。因此sessionStorage不是一种持久化的本地存储，仅仅是会话级别的存储。而localStorage用于持久化的本地存储，除非主动删除数据，否则数据是永远不会过期的。\n\nweb storage和cookie的区别\n\nWeb Storage的概念和cookie相似，区别是它是为了更大容量存储设计的。Cookie的大小是受限的，并且每次你请求一个新的页面的时候Cookie都会被发送过去，这样无形中浪费了带宽，另外cookie还需要指定作用域，不可以跨域调用。\n\n除此之外，Web Storage拥有setItem,getItem,removeItem,clear等方法，不像cookie需要前端开发者自己封装setCookie，getCookie。但是Cookie也是不可以或缺的：Cookie的作用是与服务器进行交互，作为HTTP规范的一部分而存在 ，而Web Storage仅仅是为了在本地“存储”数据而生。\n\n10、简述一下src与href的区别。\nsrc用于替换当前元素，href用于在当前文档和引用资源之间确立联系。\n\nsrc是source的缩写，指向外部资源的位置，指向的内容将会嵌入到文档中当前标签所在位置；在请求src资源时会将其指向的资源下载并应用到文档内，例如js脚本，img图片和frame等元素。\n\n<script src =”js.js”></script>\n\n当浏览器解析到该元素时，会暂停其他资源的下载和处理，直到将该资源加载、编译、执行完毕，图片和框架等元素也如此，类似于将所指向资源嵌入当前标签内。这也是为什么将js脚本放在底部而不是头部。\n\nhref是Hypertext Reference的缩写，指向网络资源所在位置，建立和当前元素（锚点）或当前文档（链接）之间的链接，如果我们在文档中添加\n\n<link href=”common.css” rel=”stylesheet”/>\n\n那么浏览器会识别该文档为css文件，就会并行下载资源并且不会停止对当前文档的处理。这也是为什么建议使用link方式来加载css，而不是使用@import方式。\n\n11、知道的网页制作会用到的图片格式有哪些？\npng-8，png-24，jpeg，gif，svg。\n\n但是上面的那些都不是面试官想要的最后答案。面试官希望听到是Webp。（是否有关注新技术，新鲜事物）\n\n科普一下Webp：WebP格式，谷歌（google）开发的一种旨在加快图片加载速度的图片格式。图片压缩体积大约只有JPEG的2/3，并能节省大量的服务器带宽资源和数据空间。Facebook Ebay等知名网站已经开始测试并使用WebP格式。\n\n在质量相同的情况下，WebP格式图像的体积要比JPEG格式图像小40%\n\n12、知道什么是微格式吗？谈谈理解。在前端构建中应该考虑微格式吗？\n微格式（Microformats）是一种让机器可读的语义化XHTML词汇的集合，是结构化数据的开放标准。是为特殊应用而制定的特殊格式。\n\n优点：将智能数据添加到网页上，让网站内容在搜索引擎结果界面可以显示额外的提示。（应用范例：豆瓣，有兴趣自行google）\n\n13、在css/js代码上线之后开发人员经常会优化性能，从用户刷新网页开始，一次js请求一般情况下有哪些地方会有缓存处理？\n答案：dns缓存，cdn缓存，浏览器缓存，服务器缓存。\n\n14、一个页面上有大量的图片（大型电商网站），加载很慢，你有哪些方法优化这些图片的加载，给用户更好的体验。\n图片懒加载，在页面上的未可视区域可以添加一个滚动条事件，判断图片位置与浏览器顶端的距离与页面的距离，如果前者小于后者，优先加载。\n\n如果为幻灯片、相册等，可以使用图片预加载技术，将当前展示图片的前一张和后一张优先下载。\n\n如果图片为css图片，可以使用CSSsprite，SVGsprite，Iconfont、Base64等技术。\n\n如果图片过大，可以使用特殊编码的图片，加载时会先加载一张压缩的特别厉害的缩略图，以提高用户体验。\n\n如果图片展示区域小于图片的真实大小，则因在服务器端根据业务需要先行进行图片压缩，图片压缩后大小与展示一致。\n\n15、你如何理解HTML结构的语义化？　\n去掉或样式丢失的时候能让页面呈现清晰的结构：\n\nhtml本身是没有表现的，我们看到例如`<h1>`是粗体，字体大小2em，加粗；`<strong>`是加粗的，不要认为这是html的表现，这些其实html默认的css样式在起作用，所以去掉或样式丢失的时候能让页面呈现清晰的结构不是语义化的HTML结构的优点，但是浏览器都有有默认样式，默认样式的目的也是为了更好的表达html的语义，可以说浏览器的默认样式和语义化的HTML结构是不可分割的。\n\n屏幕阅读器（如果访客有视障）会完全根据你的标记来“读”你的网页.\n\n例如,如果你使用的含语义的标记,屏幕阅读器就会“逐个拼出”你的单词,而不是试着去对它完整发音.\n\nPDA、手机等设备可能无法像普通电脑的浏览器一样来渲染网页（通常是因为这些设备对CSS的支持较弱）\n\n使用语义标记可以确保这些设备以一种有意义的方式来渲染网页.理想情况下,观看设备的任务是符合设备本身的条件来渲染网页.\n\n语义标记为设备提供了所需的相关信息,就省去了你自己去考虑所有可能的显示情况（包括现有的或者将来新的设备）.例如,一部手机可以选择使一段标记了标题的文字以粗体显示.而掌上电脑可能会以比较大的字体来显示.无论哪种方式一旦你对文本标记为标题,您就可以确信读取设备将根据其自身的条件来合适地显示页面.\n\n搜索引擎的爬虫也依赖于标记来确定上下文和各个关键字的权重\n\n过去你可能还没有考虑搜索引擎的爬虫也是网站的“访客”,但现在它们他们实际上是极其宝贵的用户.没有他们的话,搜索引擎将无法索引你的网站,然后一般用户将很难过来访问.\n\n你的页面是否对爬虫容易理解非常重要,因为爬虫很大程度上会忽略用于表现的标记,而只注重语义标记.\n\n因此,如果页面文件的标题被标记,而不是,那么这个页面在搜索结果的位置可能会比较靠后.除了提升易用性外,语义标记有利于正确使用CSS和JavaScript,因为其本身提供了许多“钩钩”来应用页面的样式与行为.\n\nSEO主要还是靠你网站的内容和外部链接的。\n\n便于团队开发和维护\n\nW3C给我们定了一个很好的标准，在团队中大家都遵循这个标准，可以减少很多差异化的东西，方便开发和维护，提高开发效率，甚至实现模块化开发。\n\n16、谈谈以前端角度出发做好SEO需要考虑什么？\n了解搜索引擎如何抓取网页和如何索引网页\n\n你需要知道一些搜索引擎的基本工作原理，各个搜索引擎之间的区别，搜索机器人（SE robot 或叫 web crawler）如何进行工作，搜索引擎如何对搜索结果进行排序等等。\n\nMeta标签优化\n\n主要包括主题（Title)，网站描述(Description)，和关键词（Keywords）。还有一些其它的隐藏文字比如Author（作者），Category（目录），Language（编码语种）等。\n\n如何选取关键词并在网页中放置关键词\n\n搜索就得用关键词。关键词分析和选择是SEO最重要的工作之一。首先要给网站确定主关键词（一般在5个上下），然后针对这些关键词进行优化，包括关键词密度（Density），相关度（Relavancy），突出性（Prominency）等等。\n\n了解主要的搜索引擎\n\n虽然搜索引擎有很多，但是对网站流量起决定作用的就那么几个。比如英文的主要有Google，Yahoo，Bing等；中文的有百度，搜狗，有道等。不同的搜索引擎对页面的抓取和索引、排序的规则都不一样。还要了解各搜索门户和搜索引擎之间的关系，比如AOL网页搜索用的是Google的搜索技术，MSN用的是Bing的技术。\n\n主要的互联网目录\n\nOpen Directory自身不是搜索引擎，而是一个大型的网站目录，他和搜索引擎的主要区别是网站内容的收集方式不同。目录是人工编辑的，主要收录网站主页；搜索引擎是自动收集的，除了主页外还抓取大量的内容页面。\n\n按点击付费的搜索引擎\n\n搜索引擎也需要生存，随着互联网商务的越来越成熟，收费的搜索引擎也开始大行其道。最典型的有Overture和百度，当然也包括Google的广告项目Google Adwords。越来越多的人通过搜索引擎的点击广告来定位商业网站，这里面也大有优化和排名的学问，你得学会用最少的广告投入获得最多的点击。\n\n搜索引擎登录\n\n网站做完了以后，别躺在那里等着客人从天而降。要让别人找到你，最简单的办法就是将网站提交（submit）到搜索引擎。如果你的是商业网站，主要的搜索引擎和目录都会要求你付费来获得收录（比如Yahoo要299美元），但是好消息是（至少到目前为止）最大的搜索引擎Google目前还是免费，而且它主宰着60％以上的搜索市场。\n\n链接交换和链接广泛度（Link Popularity）\n\n网页内容都是以超文本（Hypertext）的方式来互相链接的，网站之间也是如此。除了搜索引擎以外，人们也每天通过不同网站之间的链接来Surfing（“冲浪”）。其它网站到你的网站的链接越多，你也就会获得更多的访问量。更重要的是，你的网站的外部链接数越多，会被搜索引擎认为它的重要性越大，从而给你更高的排名。\n\n合理的标签使用\n\n17、有哪项方式可以对一个DOM设置它的CSS样式？　\n外部样式表，引入一个外部css文件\n\n内部样式表，将css代码放在 <head> 标签内部\n\n内联样式，将css样式直接定义在 HTML 元素内部\n\n18、CSS都有哪些选择器？\n派生选择器（用HTML标签申明）\n\nid选择器（用DOM的ID申明）\n\n类选择器（用一个样式类名申明）\n\n属性选择器（用DOM的属性申明，属于CSS2，IE6不支持，不常用，不知道就算了）\n\n除了前3种基本选择器，还有一些扩展选择器，包括\n\n后代选择器（利用空格间隔，比如div .a{  }）\n\n群组选择器（利用逗号间隔，比如p,div,#a{  }）\n\n那么问题来了，CSS选择器的优先级是怎么样定义的？\n\n基本原则：\n\n一般而言，选择器越特殊，它的优先级越高。也就是选择器指向的越准确，它的优先级就越高。\n\n复杂的计算方法：\n\n用1表示派生选择器的优先级\n\n用10表示类选择器的优先级\n\n用100标示ID选择器的优先级\n\ndiv.test1 .span var 优先级 1+10 +10 +1\n\nspan#xxx .songs li 优先级1+100 + 10 + 1\n\n#xxx li 优先级 100 +1\n\n那么问题来了，看下列代码，<p>标签内的文字是什么颜色的？\n\n<style>\n\n.classA{ color:blue;}\n\n.classB{ color:red;}\n\n</style>\n\n<body>\n\n<p class='classB classA'> 123 </p>\n\n</body>\n\n答案：red。与样式定义在文件中的先后顺序有关，即是后面的覆盖前面的，与在<p class=’classB classA’>中的先后关系无关。\n\n19、CSS中可以通过哪些属性定义，使得一个DOM元素不显示在浏览器可视范围内？\n最基本的：\n\n设置display属性为none，或者设置visibility属性为hidden\n\n技巧性：\n\n设置宽高为0，设置透明度为0，设置z-index位置在-1000\n\n20、超链接访问过后hover样式就不出现的问题是什么？如何解决？\n答案：被点击访问过的超链接样式不在具有hover和active了,解决方法是改变CSS属性的排列顺序: L-V-H-A（link,visited,hover,active）\n\n21、什么是Css Hack？ie6,7,8的hack分别是什么？\n答案：针对不同的浏览器写不同的CSS code的过程，就是CSS hack。\n```\n\n#test       {  \n\n        width:300px;  \n\n        height:300px;  \n\n        background-color:blue;      /*firefox*/\n\n        background-color:red\\9;      /*all ie*/\n\n        background-color:yellow;    /*ie8*/\n\n        +background-color:pink;        /*ie7*/\n\n        _background-color:orange;       /*ie6*/    }\n\n        :root #test { background-color:purple\\9; }  /*ie9*/\n\n    @media all and (min-width:0px){ #test {background-color:black;} }  /*opera*/\n\n    @media screen and (-webkit-min-device-pixel-ratio:0){ #test {background-color:gray;} }       /*chrome and safari*/\n```\n22、请用Css写一个简单的幻灯片效果页面\n答案：知道是要用css3。使用animation动画实现一个简单的幻灯片效果。\n```\n        div.ani\n\n        /**css**/\n\n        .ani{\n\n          width:480px;\n\n          height:320px;\n\n          margin:50px auto;\n\n          overflow: hidden;\n\n          box-shadow:0 0 5px rgba(0,0,0,1);\n\n          background-size: cover;\n\n          background-position: center;\n\n          -webkit-animation-name: \"loops\";\n\n          -webkit-animation-duration: 20s;\n\n          -webkit-animation-iteration-count: infinite;\n\n        }\n\n        @-webkit-keyframes \"loops\" {\n\n            0% {\n\n                background:url(http://d.h、d3.jpg) no-repeat;            \n\n            }\n\n            25% {\n\n                background:url(http://b.hiphotos.baidu.com/image/w%3D400/sig、f76094b364d72bceba1cc7cd98c109dd0.jpg) no-repeat;\n\n            }\n\n            50% {\n\n                background:url(http://b.hiphotos.baidu.com/image/w%3D400/sign=937dace2552c11dfded1be、58e7、bb5b912.jpg) no-repeat;\n\n            }\n\n            75% {\n\n                background:url(http://g.hiphotos.baidu.com/image/w%3D400/sign=7d37500b8544095d61f0972cdda3cc7cd99e4b.jpg) no-repeat;\n\n            }\n\n            100% {\n\n                background:url(http://c.hiphotos.baidu.com/image/2b21192138ad1.jpg) no-repeat;\n\n            }\n\n        }\n```\n24、行内元素和块级元素的具体区别是什么？行内元素的padding和margin可设置吗？\n块级元素(block)特性：\n\n总是独占一行，表现为另起一行开始，而且其后的元素也必须另起一行显示;\n\n宽度(width)、高度(height)、内边距(padding)和外边距(margin)都可控制;\n\n内联元素(inline)特性：\n\n和相邻的内联元素在同一行;\n\n宽度(width)、高度(height)、内边距的top/bottom(padding-top/padding-bottom)和外边距的top/bottom(margin-top/margin-bottom)都不可改变\n\n（也就是padding和margin的left和right是可以设置的），就是里面文字或图片的大小。\n\n那么问题来了，浏览器还有默认的天生inline-block元素（拥有内在尺寸，可设置高宽，但不会自动换行），有哪些？\n\n答案：`<input> 、<img> 、<button> 、<texterea> 、<label>`。\n\n25、什么是外边距重叠？重叠的结果是什么？\n外边距重叠就是margin-collapse。\n\n在CSS当中，相邻的两个盒子（可能是兄弟关系也可能是祖先关系）的外边距可以结合成一个单独的外边距。这种合并外边距的方式被称为折叠，并且因而所结合成的外边距称为折叠外边距。\n\n折叠结果遵循下列计算规则：\n\n两个相邻的外边距都是正数时，折叠结果是它们两者之间较大的值。\n\n两个相邻的外边距都是负数时，折叠结果是两者绝对值的较大值。\n\n两个外边距一正一负时，折叠结果是两者的相加的和。\n\n26、rgba()和opacity的透明效果有什么不同？\nrgba()和opacity都能实现透明效果，但最大的不同是opacity作用于元素，以及元素内的所有内容的透明度，\n\n而rgba()只作用于元素的颜色或其背景色。（设置rgba透明的元素的子元素不会继承透明效果！）\n\n27、css中可以让文字在垂直和水平方向上重叠的两个属性是什么？\n垂直方向：line-height\n\n水平方向：letter-spacing\n\n那么问题来了，关于letter-spacing的妙用知道有哪些么？\n\n答案:可以用于消除inline-block元素间的换行符空格间隙问题。\n\n28、如何垂直居中一个浮动元素？\n```\n// 方法一：已知元素的高宽\n\n#div1{\n\n    background-color:#6699FF;\n\n    width:200px;\n\n    height:200px;\n\n    position: absolute;        //父元素需要相对定位\n\n    top: 50%;\n\n    left: 50%;\n\n    margin-top:-100px ;   //二分之一的height，width\n\n    margin-left: -100px;\n\n    }\n\n\n\n//方法二:未知元素的高宽\n\n\n\n  #div1{\n\n    width: 200px;\n\n    height: 200px;\n\n    background-color: #6699FF;\n\n\n\n    margin:auto;\n\n    position: absolute;        //父元素需要相对定位\n\n    left: 0;\n\n    top: 0;\n\n    right: 0;\n\n    bottom: 0;\n\n    }\n```\n那么问题来了，如何垂直居中一个<img>?（用更简便的方法。）\n\n```\n\n#Container     //<img>的容器设置如下\n\n{\n\n    display:table-cell;\n\n    text-align:center;\n\n    vertical-align:middle;\n\n}\n```\n29、px和em的区别。\npx和em都是长度单位，区别是，px的值是固定的，指定是多少就是多少，计算比较容易。em得值不是固定的，并且em会继承父级元素的字体大小。\n\n浏览器的默认字体高都是16px。所以未经调整的浏览器都符合: 1em=16px。那么12px=0.75em, 10px=0.625em。\n\n30、描述一个”reset”的CSS文件并如何使用它。知道normalize.css吗？你了解他们的不同之处？\n重置样式非常多，凡是一个前端开发人员肯定有一个常用的重置CSS文件并知道如何使用它们。他们是盲目的在做还是知道为什么这么做呢？原因是不同的浏览器对一些元素有不同的默认样式，如果你不处理，在不同的浏览器下会存在必要的风险，或者更有戏剧性的性发生。\n\n你可能会用Normalize来代替你的重置样式文件。它没有重置所有的样式风格，但仅提供了一套合理的默认样式值。既能让众多浏览器达到一致和合理，但又不扰乱其他的东西（如粗体的标题）。\n\n在这一方面，无法做每一个复位重置。它也确实有些超过一个重置，它处理了你永远都不用考虑的怪癖，像HTML的audio元素不一致或line-height不一致。\n\n31、Sass、LESS是什么？大家为什么要使用他们？\n他们是CSS预处理器。他是CSS上的一种抽象层。他们是一种特殊的语法/语言编译成CSS。\n\n例如Less是一种动态样式语言. 将CSS赋予了动态语言的特性，如变量，继承，运算， 函数. LESS 既可以在客户端上运行 (支持IE 6+, Webkit, Firefox)，也可一在服务端运行 (借助 Node.js)。\n\n为什么要使用它们？\n\n结构清晰，便于扩展。\n\n可以方便地屏蔽浏览器私有语法差异。这个不用多说，封装对浏览器语法差异的重复处理，减少无意义的机械劳动。\n\n可以轻松实现多重继承。\n\n完全兼容 CSS 代码，可以方便地应用到老项目中。LESS 只是在 CSS 语法上做了扩展，所以老的 CSS 代码也可以与 LESS 代码一同编译。\n\n32、display:none与visibility:hidden的区别是什么？\ndisplay : 隐藏对应的元素但不挤占该元素原来的空间。\n\nvisibility: 隐藏对应的元素并且挤占该元素原来的空间。\n\n即是，使用CSS display:none属性后，HTML元素（对象）的宽度、高度等各种属性值都将“丢失”;而使用visibility:hidden属性后，HTML元素（对象）仅仅是在视觉上看不见（完全透明），而它所占据的空间位置仍然存在。\n\n34、CSS中link和@import的区别是：\nLink属于html标签，而@import是CSS中提供的\n\n在页面加载的时候，link会同时被加载，而@import引用的CSS会在页面加载完成后才会加载引用的CSS\n\n@import只有在ie5以上才可以被识别，而link是html标签，不存在浏览器兼容性问题\n\nLink引入样式的权重大于@import的引用（@import是将引用的样式导入到当前的页面中）\n\n35、简介盒子模型：\nCSS的盒子模型有两种：IE盒子模型、标准的W3C盒子模型模型\n\n盒模型：内容、内边距、外边距（一般不计入盒子实际宽度）、边框\n\n\n\n36、为什么要初始化样式？\n由于浏览器兼容的问题，不同的浏览器对标签的默认样式值不同，若不初始化会造成不同浏览器之间的显示差异\n\n但是初始化CSS会对搜索引擎优化造成小影响\n\n37、BFC是什么?\nBFC（块级格式化上下文），一个创建了新的BFC的盒子是独立布局的，盒子内元素的布局不会影响盒子外面的元素。在同一个BFC中的两个相邻的盒子在垂直方向发生margin重叠的问题\n\nBFC是指浏览器中创建了一个独立的渲染区域，该区域内所有元素的布局不会影响到区域外元素的布局，这个渲染区域只对块级元素起作用\n\n38、html语义化是什么？\n当页面样式加载失败的时候能够让页面呈现出清晰的结构\n\n有利于seo优化，利于被搜索引擎收录（更便于搜索引擎的爬虫程序来识别）\n\n便于项目的开发及维护，使html代码更具有可读性，便于其他设备解析。\n\n39、Doctype的作用？严格模式与混杂模式的区别？\n<!DOCTYPE>用于告知浏览器该以何种模式来渲染文档\n\n严格模式下：页面排版及JS解析是以该浏览器支持的最高标准来执行\n\n混杂模式：不严格按照标准执行，主要用来兼容旧的浏览器，向后兼容\n\n40、IE的双边距BUG：块级元素float后设置横向margin，ie6显示的margin比设置的较大。解决：加入_display：inline\n41、HTML与XHTML——二者有什么区别？\n1. 所有的标记都必须要有一个相应的结束标记\n\n2. 所有标签的元素和属性的名字都必须使用小写\n\n3. 所有的 XML 标记都必须合理嵌套\n\n4. 所有的属性必须用引号 \"\" 括起来\n\n5. 把所有 < 和 & 特殊符号用编码表示\n\n6. 给所有属性赋一个值\n\n7. 不要在注释内容中使用 \"--\"\n\n8. 图片必须有说明文字\n\n42、html常见兼容性问题？\n1.双边距BUG float引起的  使用display\n\n2.3像素问题 使用float引起的 使用dislpay:inline -3px\n\n3.超链接hover 点击后失效  使用正确的书写顺序 link visited hover active\n\n4.Ie z-index问题 给父级添加position:relative\n\n5.Png 透明 使用js代码 改\n\n6.Min-height 最小高度 ！Important 解决’\n\n7.select 在ie6下遮盖 使用iframe嵌套\n\n8.为什么没有办法定义1px左右的宽度容器（IE6默认的行高造成的，使用over:hidden,zoom:0.08 line-height:1px）\n\n9.IE5-8不支持opacity，解决办法：\n```\n.opacity {\n\n    opacity: 0.4\n\n    filter: alpha(opacity=60); /* for IE5-7 */\n\n    -ms-filter: \"progid:DXImageTransform.Microsoft.Alpha(Opacity=60)\"; /* for IE 8*/\n\n}\n```\n10. IE6不支持PNG透明背景，解决办法: IE6下使用gif图片\n\n43、对WEB标准以及W3C的理解与认识\n答：标签闭合、标签小写、不乱嵌套、提高搜索机器人搜索几率、使用外 链css和js脚本、结构行为表现的分离、文件下载与页面速度更快、内容能被更多的用户所访问、内容能被更广泛的设备所访问、更少的代码和组件，容易维 护、改版方便，不需要变动页面内容、提供打印版本而不需要复制内容、提高网站易用性。\n\n44、行内元素有哪些?块级元素有哪些?CSS的盒模型?\n答：块级元素：div p h1 h2 h3 h4 form ul\n行内元素: a b br i span input select\nCss盒模型:内容，border ,margin，padding\n\n45、前端页面有哪三层构成，分别是什么?作用是什么?\n答：结构层 Html 表示层 CSS 行为层 js。\n\n46、Doctype作用? 严格模式与混杂模式-如何触发这两种模式，区分它们有何意义?\n    （1）、<!DOCTYPE> 声明位于文档中的最前面，处于 <html> 标签之前。告知浏览器的解析器，用什么文档类型 规范来解析这个文档。\n\n    （2）、严格模式的排版和 JS 运作模式是  以该浏览器支持的最高标准运行。\n\n    （3）、在混杂模式中，页面以宽松的向后兼容的方式显示。模拟老式浏览器的行为以防止站点无法工作。\n\n    （4）、DOCTYPE不存在或格式不正确会导致文档以混杂模式呈现。\n\n47、行内元素有哪些？块级元素有哪些？ 空(void)元素有那些？\n（1）CSS规范规定，每个元素都有display属性，确定该元素的类型，每个元素都有默认的display值，比如div默认display属性值为“block”，成为“块级”元素；span默认display属性值为“inline”，是“行内”元素。\n\n（2）行内元素有：a b span img input select strong（强调的语气） 块级元素有：div ul ol li dl dt dd h1 h2 h3 h4…p\n\n（3）知名的空元素：     \n`\n<br><hr><img><input><link><meta>鲜为人知的是： <area><base><col><command>\n\n<embed><keygen><param><source><track><wbr>\n`\n48、CSS的盒子模型？\n（1）两种， IE 盒子模型、标准 W3C 盒子模型；IE 的content部分包含了 border 和 pading;\n\n（2）盒模型： 内容(content)、填充(padding)、边界(margin)、 边框(border).\n\n49、CSS 选择符有哪些？哪些属性可以继承？优先级算法如何计算？ CSS3新增伪类有那些？\n    *   1.id选择器（ # myid）\n\n        2.类选择器（.myclassname）\n\n        3.标签选择器（div, h1, p）\n\n        4.相邻选择器（h1 + p）\n\n        5.子选择器（ul < li）\n\n        6.后代选择器（li a）\n\n        7.通配符选择器（ * ）\n\n        8.属性选择器（a[rel = \"external\"]）\n\n        9.伪类选择器（a: hover, li: nth - child）\n\n    *   可继承： font-size font-family color, UL LI DL DD DT;\n\n    *   不可继承 ：border padding margin width height ;\n\n    *   优先级就近原则，样式定义最近者为准;\n\n    *   载入样式以最后载入的定位为准;\n\n优先级为:\n\n       !important >  id > class > tag\n\n       important 比 内联优先级高\n\nCSS3新增伪类举例：\n\n    p:first-of-type 选择属于其父元素的首个 <p> 元素的每个 <p> 元素。\n\n    p:last-of-type  选择属于其父元素的最后 <p> 元素的每个 <p> 元素。\n\n    p:only-of-type  选择属于其父元素唯一的 <p> 元素的每个 <p> 元素。\n\n    p:only-child    选择属于其父元素的唯一子元素的每个 <p> 元素。\n\n    p:nth-child(2)  选择属于其父元素的第二个子元素的每个 <p> 元素。\n\n    :enabled、:disabled 控制表单控件的禁用状态。\n\n    :checked，单选框或复选框被选中。\n\n50、如何居中div,如何居中一个浮动元素?\n给div设置一个宽度，然后添加margin:0 auto属性\n```\n    div{\n\n        width:200px;\n\n        margin:0 auto;\n\n     }\n```\n居中一个浮动元素\n\n      确定容器的宽高 宽500 高 300 的层\n\n      设置层的外边距\n```\n     .div {\n\n      Width:500px ; height:300px;//高度可以不设\n\n      Margin: -150px 0 0 -250px;\n\n      position:relative;相对定位\n\n      background-color:pink;//方便看效果\n\n      left:50%;\n\n      top:50%;\n\n    }\n```\n51、浏览器的内核分别是什么?经常遇到的浏览器的兼容性有哪些？原因，解决方法是什么，常用hack的技巧 ？\n    * IE浏览器的内核Trident、 Mozilla的Gecko、google的WebKit、Opera内核Presto；\n\n    * png24为的图片在iE6浏览器上出现背景，解决方案是做成PNG8.\n\n    * 浏览器默认的margin和padding不同。解决方案是加一个全局的*{margin:0;padding:0;}来统一。\n\n    * IE6双边距bug:块属性标签float后，又有横行的margin情况下，在ie6显示margin比设置的大。\n\n      浮动ie产生的双倍距离 #box{ float:left; width:10px; margin:0 0 0 100px;}\n\n     这种情况之下IE会产生20px的距离，解决方案是在float的标签样式控制中加入 ——\n     `_display:inline;将其转化为行内属性。(_这个符号只有ie6会识别)`\n\n      渐进识别的方式，从总体中逐渐排除局部。\n\n      首先，巧妙的使用“\\9”这一标记，将IE游览器从所有情况中分离出来。\n\n      接着，再次使用“+”将IE8和IE7、IE6分离开来，这样IE8已经独立识别。\n\n      css\n```\n          .bb{\n\n           background-color:#f1ee18;/*所有识别*/\n\n          .background-color:#00deff\\9; /*IE6、7、8识别*/\n\n          +background-color:#a200ff;/*IE6、7识别*/\n\n          _background-color:#1e0bd1;/*IE6识别*/\n\n          }\n```\n    *  IE下,可以使用获取常规属性的方法来获取自定义属性,\n\n       也可以使用getAttribute()获取自定义属性;\n\n       Firefox下,只能使用getAttribute()获取自定义属性.\n\n       解决方法:统一通过getAttribute()获取自定义属性.\n\n    *  IE下,even对象有x,y属性,但是没有pageX,pageY属性;\n\n      Firefox下,event对象有pageX,pageY属性,但是没有x,y属性.\n\n    * （条件注释）缺点是在IE浏览器下可能会增加额外的HTTP请求数。\n\n    * Chrome 中文界面下默认会将小于 12px 的文本强制按照 12px 显示, 可通过加入 CSS 属性 -webkit-text-size-adjust: none; 解决.\n\n    超链接访问过后hover样式就不出现了 被点击访问过的超链接样式不在具有hover和active了解决方法是改变CSS属性的排列顺序:\n\n    L-V-H-A :  a:link {} a:visited {} a:hover {} a:active {}\n\n52、列出display的值，说明他们的作用。position的值， relative和absolute定位原点是？\n  1. block 象块类型元素一样显示。\n\n  none 缺省值。向行内元素类型一样显示。\n\n  inline-block 象行内元素一样显示，但其内容象块类型元素一样显示。\n\n  list-item 象块类型元素一样显示，并添加样式列表标记。\n\n  2. position的值\n\n  * absolute\n\n        生成绝对定位的元素，相对于 static 定位以外的第一个父元素进行定位。\n\n  * fixed （老IE不支持）\n\n        生成绝对定位的元素，相对于浏览器窗口进行定位。\n\n  * relative\n\n        生成相对定位的元素，相对于其正常位置进行定位。\n\n  * static  默认值。没有定位，元素出现在正常的流中\n\n  * （忽略 top, bottom, left, right z-index 声明）。\n\n  *  inherit 规定从父元素继承 position 属性的值。\n\n53、absolute的containing block计算方式跟正常流有什么不同？\n54、position跟display、margin collapse、overflow、float这些特性相互叠加后会怎么样？\n55、对WEB标准以及W3C的理解与认识\n标签闭合、标签小写、不乱嵌套、提高搜索机器人搜索几率、使用外 链css和js脚本、结构行为表现的分离、文件下载与页面速度更快、内容能被更多的用户所访问、内容能被更广泛的设备所访问、更少的代码和组件，容易维 护、改版方便，不需要变动页面内容、提供打印版本而不需要复制内容、提高网站易用性；\n\n56、css的基本语句构成是?\n选择器{属性1:值1;属性2:值2;……}\n\n57、浏览器标准模式和怪异模式之间的区别是什么?\n盒子模型 渲染模式的不同\n\n使用 window.top.document.compatMode 可显示为什么模式\n\n58、CSS中可以通过哪些属性定义，使得一个DOM元素不显示在浏览器可视范围内？　　\n　　最基本的：\n\n　　设置display属性为none，或者设置visibility属性为hidden\n\n　　技巧性：\n\n　　设置宽高为0，设置透明度为0，设置z-index位置在-1000\n\n59、超链接访问过后hover样式就不出现的问题是什么？如何解决？\n　　答案：被点击访问过的超链接样式不在具有hover和active了,解决方法是改变CSS属性的排列顺序: L-V-H-A（link,visited,hover,active）\n\n60、什么是Css Hack？ie6,7,8的hack分别是什么？\n　　答案：针对不同的浏览器写不同的CSS code的过程，就是CSS hack。\n\n　　示例如下：\n```\n#test       {  \n\n        width:300px;  \n\n        height:300px;  \n\n\n\n        background-color:blue;      /firefox*/\n\n        background-color:red\\9;      /all ie*/\n\n        background-color:yellow\\0;    /ie8*/\n\n        +background-color:pink;        /ie7*/\n\n        _background-color:orange;       /ie6/    }\n\n        :root #test { background-color:purple\\9; }  /ie9*/\n\n    @media all and (min-width:0px){ #test {background-color:black\\0;} }  /opera/\n\n    @media screen and (-webkit-min-device-pixel-ratio:0){ #test {background-color:gray;} }       /chrome and safari*/\n```\n62、请用Css写一个简单的幻灯片效果页面\n　　答案：知道是要用css3。使用animation动画实现一个简单的幻灯片效果。\n```\n/**HTML**/\n\n        div.ani\n\n        /**css**/\n\n        .ani{\n\n          width:480px;\n\n          height:320px;\n\n          margin:50px auto;\n\n          overflow: hidden;\n\n          box-shadow:0 0 5px rgba(0,0,0,1);\n\n          background-size: cover;\n\n          background-position: center;\n\n          -webkit-animation-name: \"loops\";\n\n          -webkit-animation-duration: 20s;\n\n          -webkit-animation-iteration-count: infinite;\n\n        }\n\n        @-webkit-keyframes \"loops\" {\n\n            0% { background:url(http://d.hiphotos.baidu.com/image/w%3D400/sign=c01e6adca964034f0fcdc3069fc27980/e824b899a9014c08e5e38ca4087b02087af4f4d3.jpg) no-repeat;            \n\n            }\n\n            25% {\n\n                background:url(http://b.hiphotos.baidu.com/image/w%3D400/sign=edee1572e9f81a4c2632edc9e72b6029/30adcbef76094b364d72bceba1cc7cd98c109dd0.jpg) no-repeat;\n\n            }\n\n            50% {\n\n                background:url(http://b.hiphotos.baidu.com/image/w%3D400/sign=937dace2552c11dfded1be2353266255/d8f9d72a6059252d258e7605369b033b5bb5b912.jpg) no-repeat;\n\n            }\n\n            75% {\n\n                background:url(http://g.hiphotos.baidu.com/image/w%3D400/sign=7d37500b8544ebf86d71653fe9f9d736/0df431adcbef76095d61f0972cdda3cc7cd99e4b.jpg) no-repeat;\n\n            }\n\n            100% {\n\n                background:url(http://c.hiphotos.baidu.com/image/w%3D400/sign=cfb239ceb0fb43161a1f7b7a10a54642/3b87e950352ac65ce2e73f76f9f2b21192138ad1.jpg) no-repeat;\n\n            }\n\n        }\n```\n63、行内元素和块级元素的具体区别是什么？行内元素的padding和margin可设置吗？\n　　块级元素(block)特性：\n\n总是独占一行，表现为另起一行开始，而且其后的元素也必须另起一行显示;\n宽度(width)、高度(height)、内边距(padding)和外边距(margin)都可控制;\n　　内联元素(inline)特性：\n\n和相邻的内联元素在同一行;\n宽度(width)、高度(height)、内边距的top/bottom(padding-top/padding-bottom)和外边距的top/bottom(margin-top/margin-bottom)都不可改变（也就是padding和margin的left和right是可以设置的），就是里面文字或图片的大小。\n　　那么问题来了，浏览器还有默认的天生inline-block元素（拥有内在尺寸，可设置高宽，但不会自动换行），有哪些？\n\n　　答案：`<input> 、<img> 、<button> 、<textarea> 、<label>`\n\n64、什么是外边距重叠？重叠的结果是什么？\n　　答案：\n\n　　外边距重叠就是margin-collapse。\n\n　　在CSS当中，相邻的两个盒子（可能是兄弟关系也可能是祖先关系）的外边距可以结合成一个单独的外边距。这种合并外边距的方式被称为折叠，并且因而所结合成的外边距称为折叠外边距。\n\n　　折叠结果遵循下列计算规则：\n\n两个相邻的外边距都是正数时，折叠结果是它们两者之间较大的值。\n两个相邻的外边距都是负数时，折叠结果是两者绝对值的较大值。\n两个外边距一正一负时，折叠结果是两者的相加的和。\n　　\n\n65、rgba()和opacity的透明效果有什么不同？\n　　rgba()和opacity都能实现透明效果，但最大的不同是opacity作用于元素，以及元素内的所有内容的透明度，\n\n　　而rgba()只作用于元素的颜色或其背景色。（设置rgba透明的元素的子元素不会继承透明效果！）\n\n66、css中可以让文字在垂直和水平方向上重叠的两个属性是什么？\n　　垂直方向：line-height\n\n　　水平方向：letter-spacing\n\n　　那么问题来了，关于letter-spacing的妙用知道有哪些么？\n\n　　答案:可以用于消除inline-block元素间的换行符空格间隙问题。\n\n67、如何垂直居中一个浮动元素？\n// 方法一：已知元素的高宽\n```\n#div1{\n\n    background-color:#6699FF;\n\n    width:200px;\n\n    height:200px;\n\n    position: absolute;        //父元素需要相对定位\n\n    top: 50%;\n\n    left: 50%;\n\n    margin-top:-100px ;   //二分之一的height，width\n\n    margin-left: -100px;\n\n    }\n\n//方法二:未知元素的高宽\n\n  #div1{\n\n    width: 200px;\n\n    height: 200px;\n\n    background-color: #6699FF;\n\n    margin:auto;\n\n    position: absolute;        //父元素需要相对定位\n\n    left: 0;\n\n    top: 0;\n\n    right: 0;\n\n    bottom: 0;\n\n    }\n```\n那么问题来了，如何垂直居中一个<img>?（用更简便的方法。）\n```\n#container     //<img>的容器设置如下\n\n{\n\n    display:table-cell;\n\n    text-align:center;\n\n    vertical-align:middle;\n\n}\n```\n68、描述一个\"reset\"的CSS文件并如何使用它。知道normalize.css吗？你了解他们的不同之处？　\n　　重置样式非常多，凡是一个前端开发人员肯定有一个常用的重置CSS文件并知道如何使用它们。他们是盲目的在做还是知道为什么这么做呢？原因是不同的浏览器对一些元素有不同的默认样式，如果你不处理，在不同的浏览器下会存在必要的风险，或者更有戏剧性的性发生。\n\n　　你可能会用Normalize来代替你的重置样式文件。它没有重置所有的样式风格，但仅提供了一套合理的默认样式值。既能让众多浏览器达到一致和合理，但又不扰乱其他的东西（如粗体的标题）。\n\n　　在这一方面，无法做每一个复位重置。它也确实有些超过一个重置，它处理了你永远都不用考虑的怪癖，像HTML的audio元素不一致或line-height不一致。\n\n69、说display属性有哪些？可以做什么？\ndisplay:block行内元素转换为块级元素\n\n  display:inline块级元素转换为行内元素\n\n  display:inline-block转为内联元素\n\n70、哪些css属性可以继承？\n可继承： font-size font-family color, ul li dl dd dt;\n\n  不可继承 ：border padding margin width height ;\n\n71、css优先级算法如何计算？\n!important >  id > class > 标签\n\n  !important 比 内联优先级高\n\n  * 优先级就近原则，样式定义最近者为准;\n\n  * 以最后载入的样式为准;\n\n72、b标签和strong标签,i标签和em标签的区别？\n后者有语义，前者则无。\n\n73、有那些行内元素、有哪些块级元素、盒模型？\n1.内联元素(inline element)\n\na – 锚点\n\nabbr – 缩写\n\nacronym – 首字\n\nb – 粗体(不推荐)\n\nbig – 大字体\n\nbr – 换行\n\nem – 强调\n\nfont – 字体设定(不推荐)\n\ni – 斜体\n\nimg – 图片\n\ninput – 输入框\n\nlabel – 表格标签\n\ns – 中划线(不推荐)\n\nselect – 项目选择\n\nsmall – 小字体文本\n\nspan – 常用内联容器，定义文本内区块\n\nstrike – 中划线\n\nstrong – 粗体强调\n\nsub – 下标\n\nsup – 上标\n\ntextarea – 多行文本输入框\n\ntt – 电传文本\n\nu – 下划线\n\nvar – 定义变量\n\n2、块级元素\n\naddress – 地址\n\nblockquote – 块引用\n\ncenter – 举中对齐块\n\ndir – 目录列表\n\ndiv – 常用块级容易，也是css layout的主要标签\n\ndl – 定义列表\n\nfieldset – form控制组\n\nform – 交互表单\n\nh1 – 大标题\n\nh2 – 副标题\n\nh3 – 3级标题\n\nh4 – 4级标题\n\nh5 – 5级标题\n\nh6 – 6级标题\n\nhr – 水平分隔线\n\nisindex – input prompt\n\nmenu – 菜单列表\n\nnoframes – frames可选内容，（对于不支持frame的浏览器显示此区块内容）\n\nnoscript – ）可选脚本内容（对于不支持script的浏览器显示此内容）\n\nol – 排序表单\n\np – 段落\n\npre – 格式化文本\n\ntable – 表格\n\nul – 非排序列表\n\n3.CSS盒子模型包含四个部分组成：\n\n内容、填充（padding）、边框（border）、外边界（margin）。\n\n74、有哪些选择符，优先级的计算公式是什么？行内样式和！important哪个优先级高？\n#ID > .class > 标签选择符  !important优先级高\n\n75.我想让行内元素跟上面的元素距离10px，加margin-top和padding-top可以吗？\n  margin-top,padding-top无效\n\n76.CSS的盒模型由什么组成？\n  内容，border ,margin，padding\n\n77、.说说display属性有哪些？可以做什么？\n  display:block行内元素转换为块级元素\n\n  display:inline块级元素转换为行内元素\n\n  display:inline-block转为内联元素\n\n78、哪些css属性可以继承？\n  可继承： font-size font-family color, ul li dl dd dt;\n\n  不可继承 ：border padding margin width height ;\n\n79、css优先级算法如何计算？\n  !important >  id > class > 标签\n\n  !important 比 内联优先级高\n\n  * 优先级就近原则，样式定义最近者为准;\n\n  * 以最后载入的样式为准;\n\n80、text-align:center和line-height有什么区别？\n  text-align是水平对齐，line-height是行间。\n\n81、前端页面由哪三层构成，分别是什么？作用是什么？\n   结构层 Html 表示层 CSS 行为层 js\n\n82、写一个表格以及对应的CSS,使表格奇数行为白色背景，偶数行为灰色，鼠标一上去为黄色背景。\n二、JS基础\n1、javascript的typeof返回哪些数据类型\nObject number function boolean underfind\n\n2、例举3种强制类型转换和2种隐式类型转换?\n强制（parseInt,parseFloat,number）\n\n隐式（== – ===）\n\n3、split() join() 的区别\n前者是切割成数组的形式，后者是将数组转换成字符串\n\n4、数组方法pop() push() unshift() shift()\nPush()尾部添加 pop()尾部删除\n\nUnshift()头部添加 shift()头部删除\n\n5、事件绑定和普通事件有什么区别\n事件绑定是指把事件注册到具体的元素之上，普通事件指的是可以用来注册的事件\n\n6、IE和DOM事件流的区别\n1.执行顺序不一样、\n\n2.参数不一样\n\n3.事件加不加on\n\n4.this指向问题\n\n7、IE和标准下有哪些兼容性的写法\nVar ev = ev || window.event\n\ndocument.documentElement.clientWidth || document.body.clientWidth\n\nVar target = ev.srcElement||ev.target\n\n8、call和apply的区别\nObject.call(this,obj1,obj2,obj3)\n\nObject.apply(this,arguments)\n\n9、b继承a的方法\n10、JavaScript this指针、闭包、作用域\n11、事件委托是什么\n让利用事件冒泡的原理，让自己的所触发的事件，让他的父元素代替执行！\n\n12、闭包是什么，有什么特性，对页面有什么影响\n闭包就是能够读取其他函数内部变量的函数。\n\n13、如何阻止事件冒泡和默认事件\ncanceBubble return false\n\n14、添加 删除 替换 插入到某个接点的方法\nobj.appendChidl()\n\nobj.innersetBefore\n\nobj.replaceChild\n\nobj.removeChild\n\n15、javascript的本地对象，内置对象和宿主对象\n本地对象为array obj regexp等可以new实例化\n\n内置对象为gload Math 等不可以实例化的\n\n宿主为浏览器自带的document,window 等\n\n16、document load 和document ready的区别\nDocument.onload 是在结构和样式加载完才执行js\n\nDocument.ready原生种没有这个方法，jQuery中有 $().ready(function)\n\n17、”==”和“===”的不同\n前者会自动转换类型\n\n后者不会\n\n18、javascript的同源策略\n一段脚本只能读取来自于同一来源的窗口和文档的属性，这里的同一来源指的是主机名、议和端口号的组合\n\n19、编写一个数组去重的方法\n```\nfunction oSort(arr) {   \nvar result ={};\nvar newArr=[];\nfor(var i=0;i<arr.length;i++){\nif(!result[arr]) {\nnewArr.push(arr)\nresult[arr]=1\n}\n}\nreturn newArr\n}</arr.length;i++)\n```\n20、JavaScript是一门什么样的语言，它有哪些特点？\n没有标准答案。\n\n21、JavaScript的数据类型都有什么？\n基本数据类型：String,boolean,Number,Undefined, Null\n\n引用数据类型：Object(Array,Date,RegExp,Function)\n\n那么问题来了，如何判断某变量是否为数组数据类型？\n\n方法一.判断其是否具有“数组性质”，如slice()方法。可自己给该变量定义slice方法，故有时会失效\n\n方法二.obj instanceof Array 在某些IE版本中不正确\n\n方法三.方法一二皆有漏洞，在ECMA Script5中定义了新方法Array.isArray(), 保证其兼容性，最好的方法如下：\n\n```\nif(typeof Array.isArray===\"undefined\"){\n\n  Array.isArray = function(arg){\n\n        return Object.prototype.toString.call(arg)===\"[object Array]\"\n\n    };\n\n}\n```\n22、已知ID的Input输入框，希望获取这个输入框的输入值，怎么做？(不使用第三方框架)\n\n\ndocument.getElementById(“ID”).value\n\n23、希望获取到页面中所有的checkbox怎么做？(不使用第三方框架)\n```\nvar domList = document.getElementsByTagName(‘input’)\n\nvar checkBoxList = [];\n\nvar len = domList.length;　　//缓存到局部变量\n\nwhile (len--) {　　//使用while的效率会比for循环更高\n\n　　if (domList[len].type == ‘checkbox’) {\n\n    　　checkBoxList.push(domList[len]);\n\n　　}\n\n}\n```\n24、设置一个已知ID的DIV的html内容为xxxx，字体颜色设置为黑色(不使用第三方框架)\n```\nvar dom = document.getElementById(“ID”);\n\ndom.innerHTML = “xxxx”\n\ndom.style.color = “#000”\n```\n\n25、当一个DOM节点被点击时候，我们希望能够执行一个函数，应该怎么做？\n直接在DOM里绑定事件：<div onclick=”test()”></div>\n\n在JS里通过onclick绑定：xxx.onclick = test\n\n通过事件添加进行绑定：addEventListener(xxx, ‘click’, test)\n\n那么问题来了，Javascript的事件流模型都有什么？\n\n“事件冒泡”：事件开始由最具体的元素接受，然后逐级向上传播\n\n“事件捕捉”：事件由最不具体的节点先接收，然后逐级向下，一直到最具体的\n\n“DOM事件流”：三个阶段：事件捕捉，目标阶段，事件冒泡\n\n26、看下列代码输出为何？解释原因。\n\n\n\n\n\n\nvar a;\n\nalert(typeof a); // undefined\n\nalert(b); // 报错\n\n解释：Undefined是一个只有一个值的数据类型，这个值就是“undefined”，在使用var声明变量但并未对其赋值进行初始化时，这个变量的值就是undefined。而b由于未声明将报错。注意未申明的变量和声明了未赋值的是不一样的。\n\n27、看下列代码,输出什么？解释原因。\n\n\n\n\nvar a = null;\n\nalert(typeof a); //object\n\n解释：null是一个只有一个值的数据类型，这个值就是null。表示一个空指针对象，所以用typeof检测会返回”object”。\n\n28、看下列代码,输出什么？解释原因。\n\n```\nvar undefined;\n\nundefined == null; // true\n\n1 == true;   // true\n\n2 == true;   // false\n\n0 == false;  // true\n\n0 == '';     // true\n\nNaN == NaN;  // false\n\n[] == false; // true\n\n[] == ![];   // true\n```\nundefined与null相等，但不恒等（===）\n一个是number一个是string时，会尝试将string转换为number\n\n尝试将boolean转换为number，0或1\n\n尝试将Object转换成number或string，取决于另外一个对比量的类型\n\n所以，对于0、空字符串的判断，建议使用 “===” 。“===”会先判断两边的值类型，类型不匹配时为false。\n\n那么问题来了，看下面的代码，输出什么，foo的值为什么？\n```\nvar foo = \"11\"+2-\"1\";\n\nconsole.log(foo);\n\nconsole.log(typeof foo);\n```\n执行完后foo的值为111，foo的类型为String。\n\n29、看代码给答案。\n```\n\nvar a = new Object();\n\na.value = 1;\n\nb = a;\n\nb.value = 2;\n\nalert(a.value);\n```\n答案：2（考察引用数据类型细节）\n\n30、已知数组var stringArray = [“This”, “is”, “Baidu”, “Campus”]，Alert出”This is Baidu Campus”。\n答案：alert(stringArray.join(“”))\n\n已知有字符串foo=”get-element-by-id”,写一个function将其转化成驼峰表示法”getElementById”。\n```\nfunction combo(msg){\n\n    var arr=msg.split(\"-\");\n\n    for(var i=1;i<arr.length;i++){\n\n        arr[i]=arr[i].charAt(0).toUpperCase()+arr[i].substr(1,arr[i].length-1);\n\n    }\n\n    msg=arr.join(\"\");\n\n    return msg;\n\n}\n```\n(考察基础API)\n\n31、var numberArray = [3,6,2,4,1,5]; （考察基础API）\n1) 实现对该数组的倒排，输出[5,1,4,2,6,3]\n\n2) 实现对该数组的降序排列，输出[6,5,4,3,2,1]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction combo(msg){\n\n    var arr=msg.split(\"-\");\n\n    for(var i=1;i<arr.length;i++){\n\n        arr[i]=arr[i].charAt(0).toUpperCase()+arr[i].substr(1,arr[i].length-1);\n\n    }\n\n    msg=arr.join(\"\");\n\n    return msg;\n\n}\n\n32、输出今天的日期，以YYYY-MM-DD的方式，比如今天是2014年9月26日，则输出2014-09-26\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar d = new Date();\n\n// 获取年，getFullYear()返回4位的数字\n\nvar year = d.getFullYear();\n\n// 获取月，月份比较特殊，0是1月，11是12月\n\nvar month = d.getMonth() + 1;\n\n// 变成两位\n\nmonth = month < 10 ? '0' + month : month;\n\n// 获取日\n\nvar day = d.getDate();\n\nday = day < 10 ? '0' + day : day;\n\nalert(year + '-' + month + '-' + day);\n\n33、将字符串”<tr><td>{$id}</td><td>{$name}</td></tr>”中的{$id}替换成10，{$name}替换成Tony （使用正则表达式）\n答案：”<tr><td>{$id}</td><td>{$id}_{$name}</td></tr>”.replace(/{\\$id}/g, ’10′).replace(/{\\$name}/g, ‘Tony’);\n\n34、为了保证页面输出安全，我们经常需要对一些特殊的字符进行转义，请写一个函数escapeHtml，将<, >, &, “进行转义\n\n```\nfunction escapeHtml(str) {\n\nreturn str.replace(/[<>”&]/g, function(match) {\n\n    switch (match) {\n\n     case “<”:\n\n         return “&lt;”;\n\n     case “>”:\n\n       return “&gt;”;\n\n     case “&”:\n\n       return “&amp;”;\n\n     case “\\””:\n\n        return “&quot;”;\n\n    }\n\n  });\n\n}\n```\n35、foo = foo||bar ，这行代码是什么意思？为什么要这样写？\n答案：if(!foo) foo = bar; //如果foo存在，值不变，否则把bar的值赋给foo。\n\n短路表达式：作为”&&”和”||”操作符的操作数表达式，这些表达式在进行求值时，只要最终的结果已经可以确定是真或假，求值过程便告终止，这称之为短路求值。\n\n36、看下列代码，将会输出什么?(变量声明提升)\n\n```\nvar foo = 1;\n\nfunction(){\n\n    console.log(foo);\n\n    var foo = 2;\n\n    console.log(foo);\n\n}\n```\n答案：输出undefined 和 2。上面代码相当于：\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\nvar foo = 1;\n\nfunction(){\n\n    var foo;\n\n    console.log(foo); //undefined\n\n    foo = 2;\n\n    console.log(foo); // 2;  \n\n}\n```\n函数声明与变量声明会被JavaScript引擎隐式地提升到当前作用域的顶部，但是只提升名称不会提升赋值部分。\n\n37、用js实现随机选取10–100之间的10个数字，存入一个数组，并排序。\n```\n\nvar iArray = [];\n\nfuntion getRandom(istart, iend){\n\n        var iChoice = iend - istart +1;\n\n        return Math.floor(Math.random() * iChoice + istart;\n\n}\n\nfor(var i=0; i<10; i++){\n\n        iArray.push(getRandom(10,100));\n\n}\n\niArray.sort();\n```\n38、把两个数组合并，并删除第二个元素。\n```\nvar array1 = ['a','b','c'];\n\nvar bArray = ['d','e','f'];\n\nvar cArray = array1.concat(bArray);\n\ncArray.splice(1,1);\n```\n39、怎样添加、移除、移动、复制、创建和查找节点（原生JS，实在基础，没细写每一步）\n1）创建新节点\n```\ncreateDocumentFragment()    //创建一个DOM片段\n\ncreateElement()   //创建一个具体的元素\n\ncreateTextNode()   //创建一个文本节点\n\n2）添加、移除、替换、插入\n\nappendChild()      //添加\n\nremoveChild()      //移除\n\nreplaceChild()      //替换\n\ninsertBefore()      //插入\n```\n3）查找\n```\ngetElementsByTagName()    //通过标签名称\n\ngetElementsByName()     //通过元素的Name属性的值\n\ngetElementById()        //通过元素Id，唯一性\n```\n40、有这样一个URL：http://item.taobao.com/item.htm?a=1&b=2&c=&d=xxx&e，请写一段JS程序提取URL中的各个GET参数(参数名和参数个数不确定)，将其按key-value形式返回到一个json结构中，如{a:’1′, b:’2′, c:”, d:’xxx’, e:undefined}。\n答案：\n```\nfunction serilizeUrl(url) {\n\n    var result = {};\n\n    url = url.split(\"?\")[1];\n\n    var map = url.split(\"&\");\n\n    for(var i = 0, len = map.length; i < len; i++) {\n\n        result<script>jQuery(function($) {$(\"#google-maps-1\").gMap({controls: false,scrollwheel: false,markers: [{address: \"\",icon: {image: \"http://blog.jobbole.com/wp-content/themes/jobboleblogv3/_assets/img/_colors/red/pin.png\",iconsize: [32, 32],iconanchor: [16,27],infowindowanchor: [16, 27]}}],address: \"\",zoom: 15,icon: {image: \"http://blog.jobbole.com/wp-content/themes/jobboleblogv3/_assets/img/_colors/red/pin.png\",iconsize: [32, 32],iconanchor: [16,27],infowindowanchor: [16, 27]}});});</script><div id=\"google-maps-1\" class=\"google-maps\" style=\"width: 100%; height: 200px;\"></div>.split(\"=\")[0]] = map[i].split(\"=\")[1];\n\n    }\n\n    return result;\n\n}\n```\n41、正则表达式构造函数var reg=new RegExp(“xxx”)与正则表达字面量var reg=//有什么不同？匹配邮箱的正则表达式？\n答案：当使用RegExp()构造函数的时候，不仅需要转义引号（即\\”表示”），并且还需要双反斜杠（即\\\\表示一个\\）。使用正则表达字面量的效率更高。\n\n邮箱的正则匹配：\n\n\n\nvar regMail = /^([a-zA-Z0-9_-])+@([a-zA-Z0-9_-])+((.[a-zA-Z0-9_-]{2,3}){1,2})$/;\n\n24.看下面代码，给出输出结果。\n\n```\nfor(var i=1;i<=3;i++){\n\n  setTimeout(function(){\n\n      console.log(i);   \n\n  },0);\n\n};\n\n答案：4 4 4。\n```\n原因：Javascript事件处理器在线程空闲之前不会运行。追问，如何让上述代码输出1 2 3？\n```\nfor(var i=1;i<=3;i++){\n\n   setTimeout((function(a){  //改成立即执行函数\n\n       console.log(a);   \n\n   })(i),0);\n\n};\n```\n1           //输出\n\n2\n\n3\n\n42、写一个function，清除字符串前后的空格。（兼容所有浏览器）\n使用自带接口trim()，考虑兼容性：\n```\nif (!String.prototype.trim) {\n\n String.prototype.trim = function() {\n\n return this.replace(/^\\s+/, \"\").replace(/\\s+$/,\"\");\n\n }\n\n}\n\n // test the function\n\nvar str = \" \\t\\n test string \".trim();\n\nalert(str == \"test string\"); // alerts \"true\"\n```\n43、Javascript中callee和caller的作用？\ncaller是返回一个对函数的引用，该函数调用了当前函数；\n\ncallee是返回正在被执行的function函数，也就是所指定的function对象的正文。\n\n那么问题来了？如果一对兔子每月生一对兔子；一对新生兔，从第二个月起就开始生兔子；假定每对兔子都是一雌一雄，试问一对兔子，第n个月能繁殖成多少对兔子？（使用callee完成）\n```\nvar result=[];\n\nfunction fn(n){  //典型的斐波那契数列\n\n   if(n==1){\n\n        return 1;\n\n   }else if(n==2){\n\n           return 1;\n\n   }else{\n\n        if(result[n]){\n\n                return result[n];\n\n        }else{\n\n                //argument.callee()表示fn()\n\n                result[n]=arguments.callee(n-1)+arguments.callee(n-2);\n\n                return result[n];\n\n        }\n\n   }\n\n}\n```\n44、Javascript中, 以下哪条语句一定会产生运行错误？      答案(  B   )\nA、   var `_变量`=NaN;B、var 0bj = [];C、var obj = //;  D、var obj = {};\n\n45、以下两个变量a和b，a+b的哪个结果是NaN？      答案(   C  )\nA、var a=undefind; b=NaN\n\nB、var a=‘123’; b=NaN\n\nC、var a =undefined , b =NaN\n\nD、var a=NaN , b='undefined'\n\n46、var a=10; b=20; c=4;  ++b+c+a++ 以下哪个结果是正确的？答案(  B  )\nA、   34   B、35  C、36  D、37\n\n47、下面的JavaScript语句中，（ D ）实现检索当前页面中的表单元素中的所有文本框，并将它们全部清空\nA. for(vari=0;i< form1.elements.length;i++) {\n\nif(form1.elements.type==”text”)\n\nform1.elements.value=”\";}\n\nB. for(vari=0;i<document.forms.length;i++) {\n\nif(forms[0].elements.type==”text”)\n\nforms[0].elements.value=”\";\n\n}\n\nC. if(document.form.elements.type==”text”)\n\nform.elements.value=”\";\n\nD. for(vari=0;i<document.forms.length; i++){\n\nfor(var j=0;j<document.forms.elements.length; j++){\n\nif(document.forms.elements[j].type==”text”)\n\ndocument.forms.elements[j].value=”\";\n\n}\n\n}\n\n48、要将页面的状态栏中显示“已经选中该文本框”，下列JavaScript语句正确的是（ A ）\n\nA. window.status=”已经选中该文本框”\n\nB. document.status=”已经选中该文本框”\n\nC. window.screen=”已经选中该文本框”\n\nD. document.screen=”已经选中该文本框”\n\n49、以下哪条语句会产生运行错误：（A）\nA.var obj = ();\nB.var obj = [];\nC.var obj = {};\nD.var obj = //;\n50、以下哪个单词不属于javascript保留字：（B）\nA.with\nB.parent\nC.class\nD.void\n51、请选择结果为真的表达式：（C）\nA.null instanceof Object\nB.null === undefined\nC.null == undefined\nD.NaN == NaN\n52、Javascript中, 如果已知HTML页面中的某标签对象的id=”username”，用____document.getElementById(‘username’)___ `_方法获得该标签对象。``\n53、typeof运算符返回值中有一个跟javascript数据类型不一致，它是________”function”_________。\n54、定义了一个变量，但没有为该变量赋值，如果alert该变量，javascript弹出的对话框中显示___undefined______ 。\n55、分析代码，得出正确的结果。\n```\nvar a=10, b=20 , c=30;\n\n++a;\n\na++;\n\ne=++a+(++b)+(c++)+a++;\n\nalert(e);\n\n弹出提示对话框：77\n```\n56、写出函数DateDemo的返回结果，系统时间假定为今天\n```\nfunction DateDemo(){\n\n var d, s=\"今天日期是：\";\n\n d = new Date();\n\ns += d.getMonth() + \"/\";\n\ns += d.getDate() + \"/\";\n\ns += d.getYear();\n\nreturn s;}\n```\n结果：今天日期是：7/17/2010\n\n57、写出程序运行的结果？\n```\nfor(i=0, j=0; i<10, j<6; i++, j++){\n\nk = i + j;}\n```\n结果：10\n\n58、阅读以下代码，请分析出结果：\n```\n    var arr = new Array(1 ,3 ,5);\n\n    arr[4]='z';\n\n    arr2 = arr.reverse();\n\n    arr3 = arr.concat(arr2);\n\n    alert(arr3);\n\n弹出提示对话框：z,,5,3,1,z,,5,3,1\n```\n59、补充按钮事件的函数，确认用户是否退出当前页面，确认之后关闭窗口；\n```\n <html>\n<head>\n\n<script type=”text/javascript” >\n\nfunction closeWin(){\n\n//在此处添加代码\n\nif(confirm(“确定要退出吗？”)){\n\nwindow.close();\n\n}\n\n}\n\n</script>\n\n</head>\n\n<body>\n\n<input type=”button”value=”关闭窗口”onclick=”closeWin()”/>\n\n</body>\n\n</html>\n```\n60、写出简单描述html标签（不带属性的开始标签和结束标签）的正则表达式，并将以下字符串中的html标签去除掉\n```\nvar str = “<div>这里是div<p>里面的段落</p></div>”;\n\n//\n\n<scripttype=”text/javascript”>\n\nvarreg = /<\\/?\\w+\\/?>/gi;\n\nvarstr = “<div>这里是div<p>里面的段落</p></div>”;\n\nalert(str.replace(reg,”\"));\n\n</script>\n```\n61、完成foo()函数的内容，要求能够弹出对话框提示当前选中的是第几个单选框。\n```\n<html>\n\n<head>\n\n<metahttp-equiv=”Content-Type” content=”text/html;charset=utf-8″ />\n\n</head>\n\n<body>\n\n<script type=”text/javascript” >\n\nfunction foo() {\n\n//在此处添加代码\n\nvar rdo =document.form1.radioGroup;\n\nfor(var i =0 ;i<rdo.length;i++){\n\nif(rdo.checked){\n\nalert(“您选择的是第”+(i+1)+”个单选框”);\n\n}\n\n}\n\n}\n\n</script>\n\n<body>\n\n<form name=”form1″ >\n\n<input type=”radio” name=”radioGroup”/>\n\n<input type=”radio” name=”radioGroup”/>\n\n<input type=”radio” name=”radioGroup”/>\n\n<input type=”radio” name=”radioGroup”/>\n\n<input type=”submit”/>\n\n</form>\n\n</body>\n\n</html>\n```\n62、完成函数showImg()，要求能够动态根据下拉列表的选项变化，更新图片的显示\n```\n<body>\n\n<script type=”text/javascript” >\n\nfunction showImg (oSel) {\n\n//在此处添加代码\n\nvar str = oSel.value;\n\ndocument.getElementById(“pic”).src= str+”.jpg”;\n\n}\n\n</script>\n\n<img id=”pic”src=”img1.jpg”width=”200″ height=”200″ />\n\n<br />\n\n<select id=”sel”>\n\n<option value=”img1“>城市生活</option>\n\n<option value=”img2“>都市早报</option>\n\n<option value=”img3“>青山绿水</option>\n\n</select></body>\n```\n63、截取字符串abcdefg的efg\n```\nalert('abcdefg'.substring(4));\n```\n64、列举浏览器对象模型BOM里常用的至少4个对象，并列举window对象的常用方法至少5个\n对象：Window document location screen history navigator\n\n方法：Alert() confirm() prompt() open() close()\n\n65、简述列举文档对象模型DOM里document的常用的查找访问节点的方法并做简单说明\nDocument.getElementById 根据元素id查找元素\n\nDocument.getElementByName 根据元素name查找元素\n\nDocument.getElementTagName 根据指定的元素名查找元素\n\n66、希望获取到页面中所有的checkbox怎么做？(不使用第三方框架)\n```\nvar domList = document.getElementsByTagName(‘input’)\n\nvar checkBoxList = [];\n\nvar len = domList.length;　　//缓存到局部变量\n\nwhile (len--) {　　//使用while的效率会比for循环更高\n\n　　if (domList[len].type == ‘checkbox’) {\n\n    　　checkBoxList.push(domList[len]);\n\n　　}\n\n}\n```\n67、JavaScript的数据类型都有什么？\n基本数据类型：String,Boolean,Number,Undefined,Null\n\n引用数据类型：Object(Array,Date,RegEx p,Function)\n\n68、javascript中有哪几种数据类型，分别写出中文和英文。\nstring boolean number null undefined object\n\n字符串 布尔 数值 空值 未定义 对象\n\n69、javascript中==和===的区别是什么？举例说明。\n===会自动进行类型转换，==不会\n\n70、简述创建函数的几种方式\n第一种（函数声明）：\n\nfunction sum1(num1,num2){\n\n   return num1+num2;\n\n}\n\n第二种（函数表达式）：\n\nvar sum2 = function(num1,num2){\n\n   return num1+num2;\n\n}\n\n第三种（函数对象方式）：\n\nvar sum3 = new Function(\"num1\",\"num2\",\"return num1+num2\");\n\n71、Javascript如何实现继承？\n原型链继承，借用构造函数继承，组合继承，寄生式继承，寄生组合继承\n\n72、Javascript创建对象的几种方式？\n工厂方式，构造函数方式，原型模式，混合构造函数原型模式，动态原型方式\n\n73、把 Script 标签 放在页面的最底部的body封闭之前 和封闭之后有什么区别？浏览器会如何解析它们？\n74、iframe的优缺点？\n优点：\n\n1. 解决加载缓慢的第三方内容如图标和广告等的加载问题\n\n2. Security sandbox\n\n3. 并行加载脚本\n\n缺点：\n\n1. iframe会阻塞主页面的Onload事件\n\n2. 即时内容为空，加载也需要时间\n\n3. 没有语意\n\n75、请你谈谈Cookie的弊端？\n缺点：\n\n1.`Cookie`数量和长度的限制。每个domain最多只能有20条cookie，每个cookie长度不能超过4KB，否则会被截掉。\n\n2.安全性问题。如果cookie被人拦截了，那人就可以取得所有的session信息。即使加密也与事无补，因为拦截者并不需要知道cookie的意义，他只要原样转发cookie就可以达到目的了。\n\n3.有些状态不可能保存在客户端。例如，为了防止重复提交表单，我们需要在服务器端保存一个计数器。如果我们把这个计数器保存在客户端，那么它起不到任何作用。\n\n76、DOM操作——怎样添加、移除、移动、复制、创建和查找节点。\n1. 创建新节点\n\ncreateDocumentFragment() // 创建一个DOM片段\n\ncreateElement() // 创建一个具体的元素\n\ncreateTextNode() // 创建一个文本节点\n\n2. 添加、移除、替换、插入\n\nappendChild()\n\nremoveChild()\n\nreplaceChild()\n\ninsertBefore() // 在已有的子节点前插入一个新的子节点\n\n3. 查找\n\ngetElementsByTagName() // 通过标签名称\n\ngetElementsByName() // 通过元素的Name属性的值(IE容错能力较强，会得到一个数组，其中包括id等于name值的)\n\ngetElementById() // 通过元素Id，唯一性\n\n77、js延迟加载的方式有哪些？\n    1. defer和async\n\n    2. 动态创建DOM方式（创建script，插入到DOM中，加载完毕后callBack）\n\n    3. 按需异步载入js\n\n78、documen.write和 innerHTML 的区别？\ndocument.write 只能重绘整个页面\n\ninnerHTML 可以重绘页面的一部分\n\n79、哪些操作会造成内存泄漏？\n内存泄漏指任何对象在您不再拥有或需要它之后仍然存在。\n\n垃圾回收器定期扫描对象，并计算引用了每个对象的其他对象的数量。如果一个对象的引用数量为 0（没有其他对象引用过该对象），或对该对象的惟一引用是循环的，那么该对象的内存即可回收。\n\n1. setTimeout 的第一个参数使用字符串而非函数的话，会引发内存泄漏。\n\n2. 闭包\n\n3. 控制台日志\n\n4. 循环（在两个对象彼此引用且彼此保留时，就会产生一个循环）\n\n80、javascript的typeof返回哪些数据类型?\n答：object、 number、 function 、boolean、 underfind\n\n81、split() join() 的区别\n答：前者是切割成数组的形式，后者是将数组转换成字符串\n\n82、数组方法pop() push() unshift() shift()各表示什么意思？\n答：Push()尾部添加、pop()尾部删除、Unshift()头部添加、shift()头部删除\n\n83、判断一个字符串中出现次数最多的字符，统计这个次数\n答：\n```\nvar str = 'asdfssaaasasasasaa';\nvar json = {};\nfor (var i = 0; i < str.length; i++) {\n        if(!json[str.charAt(i)]){\n                json[str.charAt(i)] = 1;\n        }else{\n                json[str.charAt(i)]++;\n        }\n};\nvar iMax = 0;\nvar iIndex = '';\nfor(var i in json){\n        if(json[i]>iMax){\n                iMax = json[i];\n                iIndex = i;\n        }\n}\nalert('出现次数最多的是:'+iIndex+'出现'+iMax+'次');\n```\n84、javascript的typeof返回哪些数据类型\nObject number function boolean underfind\n\n85、例举3种强制类型转换和2种隐式类型转换?\n强制（parseInt,parseFloat,number）\n\n隐式（== – ===）\n\n86、split() join() 的区别\n前者是切割成数组的形式，后者是将数组转换成字符串\n\n87、数组方法pop() push() unshift() shift()\nPush()尾部添加 shift() 尾部删除\n\nUnshift() 头部添加 shift() 头部删除\n\n88、事件绑定和普通事件有什么区别\n事件绑定和普通事件有什么区别\n\n89、IE和DOM事件流的区别\n1.执行顺序不一样、\n\n2.参数不一样\n\n3.事件加不加on\n\n4.this指向问题\n\n90、IE和标准下有哪些兼容性的写法\nVar ev = ev || window.event\n\ndocument.documentElement.clientWidth || document.body.clientWidth\n\nVar target = ev.srcElement||ev.target\n\n91、call和apply的区别\nObject.call(this,obj1,obj2,obj3)\n\nObject.apply(this,arguments)\n\n92、b继承a的方法\n93、写一个获取非行间样式的函数\n```\n    function getStyle(obj,attr,value)\n\n    {\n\n      if(!value)\n\n      {\n\n          if(obj.currentStyle)\n\n          {\n\n              return obj.currentStyle(attr);\n\n          }\n\n          else{\n\n              obj.getComputedStyle(attr,false);\n\n          }\n\n      }       \n\n      else\n\n      {\n\n          obj.style[attr] = value;\n\n      }\n\n    }\n```\n94、事件委托是什么\n让利用事件冒泡的原理，让自己的所触发的事件，让他的父元素代替执行！\n\nhttp://www.webasily.com/?p=78 例子可见此链接\n\n事件委托是什么\n\n95、闭包是什么，有什么特性，对页面有什么影响\n闭包就是能够读取其他函数内部变量的函数。\n\nhttp://blog.csdn.NET/gaoshanwudi/article/details/7355794 此链接可查看（问这个问题的不是一个公司）\n\n96、解释jsonp的原理，以及为什么不是真正的ajax\n动态创建script标签，回调函数\n\nAjax是页面无刷新请求数据操作\n\n97、javascript的本地对象，内置对象和宿主对象\n本地对象为array obj regexp等可以new实例化\n\n内置对象为gload Math 等不可以实例化的\n\n宿主为浏览器自带的document,window 等\n\n98、document load 和document ready的区别\nDocument.onload 是在结构和样式加载完才执行js\n\nDocument.ready原生种没有这个方法，jquery中有 $().ready(function)\n\n99、字符串反转，如将 '12345678' 变成 '87654321'\n```\n\n//大牛做法；\n\n//思路：先将字符串转换为数组 split()，利用数组的反序函数 reverse()颠倒数组，再利用 jion() 转换为字符串\n\nvar str = '12345678';\n\nstr = str.split('').reverse().join('');\n\n100、将数字 12345678 转化成 RMB形式 如： 12,345,678\n\n\n//个人方法；\n\n//思路：先将数字转为字符， str= str + '' ;\n\n//利用反转函数，每三位字符加一个 ','最后一位不加； re()是自定义的反转函数，最后再反转回去！\n\nfor(var i = 1; i <= re(str).length; i++){\n\n    tmp += re(str)[i - 1];\n\n    if(i % 3 == 0 && i != re(str).length){\n\n        tmp += ',';\n\n    }\n\n}\n```\n101、生成5个不同的随机数；\n\n\n//思路：5个不同的数，每生成一次就和前面的所有数字相比较，如果有相同的，则放弃当前生成的数字！\n```\nvar num1 = [];\n\nfor(var i = 0; i < 5; i++){\n\n    num1[i] = Math.floor(Math.random()*10) + 1; //范围是 [1, 10]\n\n    for(var j = 0; j < i; j++){\n\n        if(num1[i] == num1[j]){\n\n            i--;\n\n        }\n\n    }\n\n}\n```\n102、去掉数组中重复的数字 方法一；\n\n\n//思路：每遍历一次就和之前的所有做比较，不相等则放入新的数组中！\n\n//这里用的原型 个人做法；\n```\nArray.prototype.unique = function(){\n\n    var len = this.length,\n\n        newArr = [],\n\n        flag = 1;\n\n    for(var i = 0; i < len; i++, flag = 1){\n\n        for(var j = 0; j < i; j++){\n\n            if(this[i] == this[j]){\n\n                flag = 0;        //找到相同的数字后，不执行添加数据\n\n            }\n\n        }\n\n        flag ? newArr.push(this[i]) : '';\n\n    }\n\n    return newArr;\n\n}\n```\n    方法二：\n\n```\n\n(function(arr){\n\n    var len = arr.length,\n\n        newArr = [],\n\n        flag;\n\n    for(var i = 0; i < len; i+=1, flag = 1){\n\n        for(var j = 0; j < i; j++){\n\n            if(arr[i] == arr[j]){\n\n                flag = 0;\n\n            }  \n\n        }\n\n        flag?newArr.push(arr[i]):'';\n\n    }\n\n    alert(newArr);\n\n})([1, 1, 22, 3, 4, 55, 66]);\n\n```\n\n103、阶乘函数；\n\n\n//原型方法\n```\nNumber.prototype.N = function(){\n\n    var re = 1;\n\n    for(var i = 1; i <= this; i++){\n\n        re *= i;\n\n    }\n\n    return re;\n\n}\n\nvar num = 5;\n\nalert(num.N());\n```\n104、window.location.search() 返回的是什么？\n    答：查询(参数)部分。除了给动态语言赋值以外，我们同样可以给静态页面,并使用javascript来获得相信应的参数值\n\n        返回值：?ver=1.0&id=timlq 也就是问号后面的！\n\n105、window.location.hash 返回的是什么？\n    答：锚点 ， 返回值：#love ；\n\n106、window.location.reload() 作用？\n    答：刷新当前页面。\n\n107、阻止冒泡函数\n\n```\nfunction stopPropagation(e) {  \n\n    e = e || window.event;  \n\n    if(e.stopPropagation) { //W3C阻止冒泡方法  \n\n        e.stopPropagation();  \n\n    } else {  \n\n        e.cancelBubble = true; //IE阻止冒泡方法  \n\n    }  \n\n}  \n\ndocument.getElementById('need_hide').onclick = function(e) {  \n\n    stopPropagation(e);  \n\n}\n```\n108、什么是闭包？ 写一个简单的闭包？；\n    答：我的理解是，闭包就是能够读取其他函数内部变量的函数。在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。\n\n\n```\nfunction outer(){\n\n    var num = 1;\n\n    function inner(){\n\n        var n = 2;\n\n        alert(n + num);\n\n    }\n\n    return inner;\n\n}\n\nouter()();\n```\n109、javascript 中的垃圾回收机制？\n    答：在Javascript中，如果一个对象不再被引用，那么这个对象就会被GC回收。如果两个对象互相引用，而不再  被第3者所引用，那么这两个互相引用的对象也会被回收。因为函数a被b引用，b又被a外的c引用，这就是为什么  函数a执行后不会被回收的原因。\n\n110、看题做答：\n\n```\nfunction f1(){\n\n    var tmp = 1;\n\n    this.x = 3;\n\n    console.log(tmp);    //A\n\n    console.log(this.x)；     //B\n\n}\n\nvar obj = new f1(); //1\n\nconsole.log(obj.x)     //2\n\nconsole.log(f1());        //3\n```\n    分析：    \n\n        这道题让我重新认识了对象和函数，首先看代码（1），这里实例话化了 f1这个类。相当于执行了 f1函数。所以这个时候 A 会输出 1， 而 B 这个时候的 this 代表的是 实例化的当前对象 obj B 输出 3.。 代码（2）毋庸置疑会输出 3， 重点 代码（3）首先这里将不再是一个类，它只是一个函数。那么 A输出 1， B呢？这里的this 代表的其实就是window对象，那么this.x 就是一个全局变量 相当于在外部 的一个全局变量。所以 B 输出 3。最后代码由于f没有返回值那么一个函数如果没返回值的话，将会返回 underfined ，所以答案就是 ： 1， 3， 3， 1， 3， underfined 。\n\n111、下面输出多少？\n\n```\nvar o1 = new Object();\n\nvar o2 = o1;\n\no2.name = \"CSSer\";\n\nconsole.log(o1.name);\n```\n  如果不看答案，你回答真确了的话，那么说明你对javascript的数据类型了解的还是比较清楚了。js中有两种数据类型，分别是：基本数据类型和引用数据类型（object Array）。对于保存基本类型值的变量，变量是按值访问的，因为我们操作的是变量实际保存的值。对于保存引用类型值的变量，变量是按引用访问的，我们操作的是变量值所引用（指向）的对象。答案就清楚了：  //CSSer;\n\n112、再来一个\n\n```\nfunction changeObjectProperty (o) {\n\n    o.siteUrl = \"http://www.csser.com/\";\n\n    o = new Object();\n\n    o.siteUrl = \"http://www.popcg.com/\";\n\n}\n\nvar CSSer = new Object();\n\nchangeObjectProperty(CSSer);\n\nconsole.log(CSSer.siteUrl); //\n```\n    如果CSSer参数是按引用传递的，那么结果应该是\"http://www.popcg.com/\"，但实际结果却仍是\"http://www.csser.com/\"。事实是这样的：在函数内部修改了引用类型值的参数，该参数值的原始引用保持不变。我们可以把参数想象成局部变量，当参数被重写时，这个变量引用的就是一个局部变量，局部变量的生存期仅限于函数执行的过程中，函数执行完毕，局部变量即被销毁以释放内存。    \n\n    （补充：内部环境可以通过作用域链访问所有的外部环境中的变量对象，但外部环境无法访问内部环境。每个环境都可以向上搜索作用域链，以查询变量和函数名，反之向下则不能。）\n\n113、输出多少？\n\n```\nvar a = 6;\n\nsetTimeout(function () {    \n\n    var a = 666;\n\n    alert(a);      // 输出666，\n\n}, 1000);\n\na = 66;\n```\n因为var a = 666;定义了局部变量a，并且赋值为666，根据变量作用域链，\n全局变量处在作用域末端，优先访问了局部变量，从而覆盖了全局变量 。\n\n\n```\nvar a = 6;\n\nsetTimeout(function () {    \n\n    alert(a);      // 输出undefined\n\n    var a = 666;\n\n}, 1000);\n\na = 66;\n```\n因为var a = 666;定义了局部变量a，同样覆盖了全局变量，但是在alert(a);之前\na并未赋值，所以输出undefined。\n\n\n```\nvar a = 6;\n\nsetTimeout(function(){\n\n    alert(a);\n\n    var a = 66;\n\n}, 1000);\n\na = 666;\n\nalert(a);\n\n// 666, undefined;\n```\n记住： 异步处理，一切OK 声明提前\n\n114、输出多少？\n\n```\nfunction setN(obj){\n\n    obj.name='屌丝';\n\n    obj = new Object();\n\n    obj.name = '腐女';\n\n};\n\nvar per = new Object();\n\nsetN(per);\n\nalert(per.name);  //屌丝 内部\n```\n115、JS的继承性\n\n```\nwindow.color = 'red';\n\nvar o = {color: 'blue'};\n\nfunction sayColor(){\n\n    alert(this.color);\n\n}\n\nsayColor(); //red\n\nsayColor.call(this); //red this-window对象\n\nsayColor.call(window); //red\n\nsayColor.call(o); //blue\n```\n116、精度问题: JS 精度不能精确到 0.1 所以  。。。。同时存在于值和差值中\n```\n\nvar n = 0.3,m = 0.2, i = 0.2, j = 0.1;\n\nalert((n - m) == (i - j)); //false\n\nalert((n-m) == 0.1); //false\n\nalert((i-j)==0.1); //true\n```\n117、加减运算\n\n```\nalert('5'+3); //53 string\n\nalert('5'+'3'); //53 string\n\nalert('5'-3); //2 number\n\nalert('5'-'3'); //2 number\n```\n118、什么是同源策略？\n    指： 同协议、端口、域名的安全策略，由王景公司提出来的安全协议！\n\n119、call和applay的区别是什么？\n    参数形式不同，call(obj, pra, pra)后面是单个参数。applay(obj, [args])后面是数组。\n\n120、为什么不能定义1px左右的div容器？   \nIE6下这个问题是因为默认的行高造成的，解决的方法也有很多，例如：\n\noverflow:hidden | zoom:0.08 | line-height:1px\n\n121、结果是什么？\n\n```\nfunction foo(){\n\n    foo.a = function(){alert(1)};\n\n    this.a = function(){alert(2)};\n\n    a = function(){alert(3)};\n\n    var a = function(){alert(4)};\n\n};\n\nfoo.prototype.a = function(){alert(5)};\n\nfoo.a = function(){alert(6)};\n\nfoo.a(); //6\n\nvar obj = new foo();\n\nobj.a(); //2\n\nfoo.a(); //1\n```\n122、输出结果\n\n```\nvar a = 5;\n\nfunction test(){\n\n    a = 0;\n\n    alert(a);\n\n    alert(this.a); //没有定义 a这个属性\n\n    var a;\n\n    alert(a)\n\n}\n\ntest(); // 0, 5, 0\n\nnew test(); // 0, undefined, 0 //由于类它自身没有属性a， 所以是undefined\n```\n123、计算字符串字节数：\n```\n\nnew function(s){\n\n     if(!arguments.length||!s) return null;  \n\n     if(\"\"==s) return 0;     \n\n     var l=0;\n\n     for(var i=0;i<s.length;i++){        \n\n         if(s.charCodeAt(i)>255) l+=2; else l+=1;  //charCodeAt()得到的是unCode码   \n\n     }     //汉字的unCode码大于 255bit 就是两个字节\n\n     alert(l);\n\n}(\"hello world!\");\n```\n124、结果是：\n\n\nvar bool = !!2; alert(bool)；//true;\n\n双向非操作可以把字符串和数字转换为布尔值。\n\n125、声明对象，添加属性，输出属性\n\n```\n    var obj = {\n\n        name: 'leipeng',\n\n        showName: function(){\n\n            alert(this.name);\n\n        }\n\n    }\n\nobj.showName();\n```\n126、匹配输入的字符：第一个必须是字母或下划线开头，长度5-20\n\n```\nvar reg = /^[a-zA-Z][a-zA-Z0-9_]{5,20}/,\n\n            name1 = 'leipeng',\n\n            name2 = '0leipeng',\n\n            name3 = '你好leipeng',\n\n            name4 = 'hi';\n\n\n\n        alert(reg.test(name1));\n\n        alert(reg.test(name2));\n\n        alert(reg.test(name3));\n\n        alert(reg.test(name4));\n```\n127、检测变量类型\n\n\nfunction checkStr(str){\n\n        typeof str == 'string'? alert('true'):alert('false');\n\n    }\n\n    checkStr('leipeng');\n\n128、如何在HTML中添加事件，几种方法？\n    1、标签之中直接添加 onclick=\"fun()\";\n\n    2、JS添加 Eobj.onclick = method;\n\n    3、现代事件  IE： obj.attachEvent('onclick', method)；\n\n                   FF: obj.addEventListener('click', method, false);\n\n129、BOM对象有哪些，列举window对象？\n    1、window对象 ，是JS的最顶层对象，其他的BOM对象都是window对象的属性；\n\n    2、document对象，文档对象；\n\n    3、location对象，浏览器当前URL信息；\n\n    4、navigator对象，浏览器本身信息；\n\n    5、screen对象，客户端屏幕信息；\n\n    6、history对象，浏览器访问历史信息；\n\n130、请问代码实现 outerHTML\n    //说明：outerHTML其实就是innerHTML再加上本身；\n\n\n```\nObject.prototype.outerHTML = function(){\n\n        var innerCon = this.innerHTML, //获得里面的内容\n\n            outerCon = this.appendChild(innerCon); //添加到里面\n\n        alert(outerCon);\n\n    }\n```\n    演示代码：\n\n```\n\n <!doctype html>\n\n <html>\n\n  <head>\n\n    <meta charset=\"UTF-8\">\n\n    <title>Document</title>\n\n  </head>\n\n  <body>\n\n    <div id=\"outer\">\n\n       hello\n\n    </div>\n\n  <script>\n\n    Object.prototype.outerHTML = function(){\n\n    var innerCon = this.innerHTML, //获得里面的内容\n\n    outerCon = this.appendChild(innerCon); //添加到里面\n\n    alert(outerCon);\n\n      }\n\n    function $(id){\n\n   return document.getElementById(id);\n\n   }\n\n   alert($('outer').innerHTML);\n\n   alert($('outer').outerHTML);\n\n  </script>\n\n </body>\n\n </html>\n```\n131、JS中的简单继承 call方法！\n```\n\n//顶一个父母类，注意：类名都是首字母大写的哦！\n\n  function Parent(name, money){\n\n            this.name = name;\n\n            this.money = money;\n\n            this.info = function(){\n\n                alert('姓名： '+this.name+' 钱： '+ this.money);\n\n            }\n\n        }\n\n        //定义孩子类\n\n        function Children(name){\n\n            Parent.call(this, name); //继承 姓名属性，不要钱。  \n\n            this.info = function(){\n\n                alert('姓名： '+this.name);\n\n            }\n\n        }\n\n        //实例化类\n\n        var per = new Parent('parent', 800000000000);\n\n        var chi = new Children('child');\n\n        per.info();\n\n        chi.info();\n```\n132、bind(), live(), delegate()的区别\n    bind： 绑定事件，对新添加的事件不起作用，方法用于将一个处理程序附加到每个匹配元素的事件上并返回jQuery对象。\n\n    live： 方法将一个事件处理程序附加到与当前选择器匹配的所有元素（包含现有的或将来添加的）的指定事件上并返回jQuery对象。\n\n    delegate： 方法基于一组特定的根元素将处理程序附加到匹配选择器的所有元素（现有的或将来的）的一个或多个事件上。\n\n133、typeof 的返回类型有哪些？   \n\n\n    alert(typeof [1, 2]); //object\n\n    alert(typeof 'leipeng'); //string\n\n    var i = true;\n\n    alert(typeof i); //boolean\n\n    alert(typeof 1); //number\n\n    var a;\n\n    alert(typeof a); //undefined\n\n    function a(){;};\n\n    alert(typeof a) //function\n\n134、简述link和import的区别？\n区别1：link是XHTML标签，除了加载CSS外，还可以定义RSS等其他事务；@import属于CSS范畴，只能加载CSS。\n\n区别2：link引用CSS时，在页面载入时同时加载；@import需要页面网页完全载入以后加载。\n\n区别3：link是XHTML标签，无兼容问题；@import是在CSS2.1提出的，低版本的浏览器不支持。\n\n区别4：link支持使用Javascript控制DOM去改变样式；而@import不支持。\n\n135、window.onload 和 document.ready的区别？\nload要等到图片和包含的文件都加在进来之后执行；\n\nready是不包含图片和非文字文件的文档结构准备好就执行；\n\n136、 解析URL成一个对象？\n            String.prototype.urlQueryString = function(){\n\n                var url = this.split('?')[1].split('&'),\n\n                    len = url.length;\n\n\n\n                this.url = {};\n\n                for(var i = 0; i < len; i += 1){\n\n                    var cell = url[i].split('='),    \n\n                        key = cell[0],\n\n                        val = cell[1];\n\n                    this.url[''+key+''] = val;\n\n                }\n\n                return this.url;\n\n            }\n\n            var url = '?name=12&age=23';\n\n            console.log(url.urlQueryString().age);\n\n137、看下列代码输出什么？\nvar foo = \"11\"+2-\"1\";\n\nconsole.log(foo);\n\nconsole.log(typeof foo);\n执行完后foo的值为111，foo的类型为Number。\n138、看下列代码,输出什么？\nvar a = new Object();\na.value = 1;\nb = a;\nb.value = 2;\nalert(a.value);\n执行完后输出结果为2\n139、已知数组var stringArray = [\"This”, \"is”, \"Baidu”, \"Campus”]，Alert出”This is Baidu Campus”。\n答案：alert(stringArray.join(\"\"))\n\n140、已知有字符串foo=\"get-element-by-id\",写一个function将其转化成驼峰表示法\"getElementById\"。\n答案：\n```\nfunction combo(msg){\n\n  var arr = msg.split(\"-\");\n\n  var len = arr.length;  //将arr.length存储在一个局部变量可以提高for循环效率\n\n  for(var i=1;i<len;i++){\n\n    arr[i]=arr[i].charAt(0).toUpperCase()+arr[i].substr(1,arr[i].length-1);\n\n  }\n\n  msg=arr.join(\"\");\n\n  return msg;\n\n}\n```\n141、怎样添加、移除、移动、复制、创建和查找节点\n　　1）创建新节点\n\ncreateDocumentFragment() //创建一个DOM片段\ncreateElement() //创建一个具体的元素\ncreateTextNode() //创建一个文本节点\n\n2）添加、移除、替换、插入\nappendChild() //添加\nremoveChild() //移除\nreplaceChild() //替换\ninsertBefore() //插入\n\n3）查找\ngetElementsByTagName() //通过标签名称\ngetElementsByName() //通过元素的Name属性的值\ngetElementById() //通过元素Id，唯一性\n\n142、原生JS的window.onload与Jquery的$(document).ready(function(){})有什么不同？\n　　window.onload()方法是必须等到页面内包括图片的所有元素加载完毕后才能执行。\n\n$(document).ready()是DOM结构绘制完毕后就执行，不必等到加载完毕。\n\n\n\n143、你如何优化自己的代码？\n代码重用\n\n避免全局变量（命名空间，封闭空间，模块化mvc..）\n\n拆分函数避免函数过于臃肿\n\n注释\n\n144、请描述出下列代码运行的结果\n```\nfunction d(){\n\n        console.log(this);\n\n}\n\nd();\n```\n145、需要将变量e的值修改为“a+b+c+d”,请写出对应的代码\nvar e=”abcd”;\n\n设计一段代码能够遍历下列整个DOM节点\n```\n    <div>\n\n            <p>\n\n                <span><a/></span>\n\n                <span><a/></span>\n\n            </p>\n\n            <ul>\n\n                <li></li>\n\n                <li></li>\n\n            </ul>\n\n    </div>\n```\n146、怎样实现两栏等高？\n147、使用js实现这样的效果：在文本域里输入文字时，当按下enter键时不换行，而是替换成“{{enter}}”,(只需要考虑在行尾按下enter键的情况).\n148、以下代码中end字符串什么时候输出\n```\nvar t=true;\n\nsetTimeout(function(){\n\n    console.log(123);\n\n    t=false;\n\n    },1000);\n\nwhile(t){}\n\nconsole.log(‘end’);\n```\n149、specify(‘hello,world’)//=>’h,e,l,l,o,w,o,r,l,d’实现specify函数\n150、请将一个URL的search部分参数与值转换成一个json对象\n151、请用原生js实现jquery的get\\post功能，以及跨域情况下\n152、请简要描述web前端性能需要考虑哪方面，你的优化思路是什么？\n153、简述readyonly与disabled的区别\n154、判断一个字符吕串出现次数最多的字符，统计这个次数并输出\n155、编写一个方法，去掉一个数组的复重元素\n156、写出3个使用this的典型应用\n157、请尽可能详尽的解释ajax的工作原理\n158、为什么扩展javascript内置对象不是好的做法？\n159、请解释一下javascript的同源策略\n160、什么是三元表达式？“三元”表示什么意思？\n161、浏览器标准模式和怪异模式之间的区别是什么？\n162、如果设计中使用了非标准的字体，你该如何去实现？\n163、用css分别实现某个div元素上下居中和左右居中\n164、modulo(12,5)//2  实现满足这个结果的modulo函数\n165、HTTP协议中，GET和POST有什么区别？分别适用什么场景 ？\n166、HTTP状态消息200 302 304 403 404 500分别表示什么\n167、HTTP协议中，header信息里面，怎么控制页面失效时间（last-modified,cache-control,Expires分别代表什么）\n168、HTTP雷锋议目前常用的有哪几个？KEEPALIVE从哪个版本开始出现的？\n169、业界常用的优化WEB页面加载速度的方法（可以分别从页面元素展现，请求连接，css,js,服务器等方面介绍）\n170、列举常用的web页面开发，调试以及优化工具\n171、解释什么是sql注入，xss漏洞\n172、如何判断一个js变量是数组类型\n173、请列举js数组类型中的常用方法\n174、FF与IE中如何阻止事件冒泡，如何获取事件对象，以及如何获取触发事件的元素\n175、列举常用的js框架以及分别适用的领域\n176、js中如何实现一个map\n177、js可否实现面向对象编程，如果可以如何实现js对象的继承\n178、约瑟夫环—已知n个人（以编号1，2，3…分别表示）围坐在一张圆桌周围。从编号为k的人开始报数，数到m的那个人出列；他的下一个人又从1开始报数，数到m的那个人又出列；依此规律重复下去，直到圆桌周围的人全部出列。\n179、有1到10w这个10w个数，去除2个并打乱次序，如何找出那两个数？\n180、如何获取对象a拥有的所有属性（可枚举的、不可枚举的，不包括继承来的属性）\n181、有下面这样一段HTML结构，使用css实现这样的效果：\n左边容器无论宽度如何变动，右边容器都能自适应填满父容器剩余的宽度。\n\n<div class=”warp”>\n\n<div class=”left”></div>\n\n<div class=”right”></div>\n\n</div>\n\n182、下面这段代码想要循环昝输出结果01234，请问输出结果是否正确，如果不正确，请说明为什么，并修改循环内的代码使其输出正确结果\nfor(var i=0;i<5;++i){\n\n    setTimeout(function(){\n\n            console.log(i+’’);\n\n        },100*i);\n\n}\n\n183、解释下这个css选择器什么发生什么？\n[role=nav]>ul a:not([href^-mailto]){}\n\n184、JavaScript以下哪条语句会产生运行错误         \nA. var obj = ();    B. var obj = [];    C. var obj = {};    D. var obj = //;\n\n答案：AD\n\n185、以下哪些是javascript的全局函数：（ABC）\nA. escape   函数可对字符串进行编码，这样就可以在所有的计算机上读取该字符串。ECMAScript v3 反对使用该方法，应用使用 decodeURI() 和 decodeURIComponent() 替代它。\n\nB. parseFloat   parseFloat() 函数可解析一个字符串，并返回一个浮点数。\n\n该函数指定字符串中的首个字符是否是数字。如果是，则对字符串进行解析，直到到达数字的末端为止，然后以数字返回该数字，而不是作为字符串。\n\nC. eval 函数可计算某个字符串，并执行其中的的 JavaScript 代码。\n\nD. setTimeout\n\nE. alert\n\n186、关于IE的window对象表述正确的有：（ACD）\nA. window.opener属性本身就是指向window对象\n\nB. window.reload()方法可以用来刷新当前页面  应该是location.reload或者window.location.reload\n\nC. window.location=”a.html”和window.location.href=”a.html”的作用都是把当前页面替换成a.html页面\n\nD. 定义了全局变量g；可以用window.g的方式来存取该变量\n\n187、描述错误的是\nA：Http状态码302表示暂时性转移 对\n\nB:domContentLoaded事件早于onload事件  onload 事件会在页面或图像加载完成后立即发生。\n\nC: IE678不支持事件捕获\n\nD:localStorage 存储的数据在电脑重启后丢失     没有时间限制\n\ntry...catch 语句。(在 IE5+、Mozilla 1.0、和 Netscape 6 中可用)\n\n188、关于link和@import的区别正确的是  A\nA: link属于XHTML标签，而@import是CSS提供的；\n\nB：页面被加载时，link会同时被加载，而后者引用的CSS会等到页面被加载完再加载\n\nC：import只在IE5以上才能识别 而link是XHTML标签，无兼容问题\n\nD: link方式的样式的权重高于@import的权重\n\n189、下面正确的是  A\nA: 跨域问题能通过JsonP方案解决 B：不同子域名间仅能通过修改window.name解决跨域   还可以通过script标签src  jsonp等h5 Javasplit等\n\nC：只有在IE中可通过iframe嵌套跨域 D：MediaQuery属性是进行视频格式检测的属性是做响应式的\n\n188、错误的是\nA: Ajax本质是XMLHttpRequest       \n\nB: 块元素实际占用的宽度与它的width、border、padding属性有关，与background无关\n\nC: position属性absolute、fixed、---relative---会使文档脱标\n\nD:  float属性left也会使div脱标\n\n189、不用任何插件，如何实现一个tab栏切换？\n190、基本数据类型的专业术语以及单词拼写\n191、变量的命名规范以及命名推荐\n192、三种弹窗的单词以及三种弹窗的功能\n193、console.log( 8 | 1 ); 输出值是多少？\n答案：9\n\n194、只允许使用 + - * / 和 Math.* ，求一个函数 y = f(x, a, b);当x > 100 时返回 a 的值，否则返回 b 的值，不能使用 if else 等条件语句，也不能使用|,?:,数组。\n答案：\n```\nfunction f(x, a, b) {\n\n    var temp = Math.ceil(Math.min(Math.max(x - 100, 0), 1));\n\n    return a * temp + b * (1 - temp);\n\n}\n\nconsole.log(f(-10, 1, 2));\n```\n195、JavaScriptalert(0.4*0.2);结果是多少？和你预期的一样吗？如果不一样该如何处理？\n    有误差，应该比准确结果偏大。 一般我会将小数变为整数来处理。当前之前遇到这个问题时也上网查询发现有人用try catch return写了一个函数，\n\n    当然原理也是一致先转为整数再计算。看起来挺麻烦的，我没用过。\n\n196、一个div，有几种方式得到这个div的jQuery对象？<div class='aabbcc' id='nodesView'></div>想直接获取这个div的dom对象，如何获取？dom对象如何转化为jQuery对象？\n197、主流浏览器内核\nIE trident  火狐gecko   谷歌苹果webkit  Opera：Presto\n\n198、如何显示/隐藏一个dom元素？请用原生的JavaScript方法实现\n199、JavaScript有哪几种数据类型\n    Number String Boolean Null Undefined Object\n\n200、jQuery框架中$.ajax()的常用参数有哪些？写一个post请求并带有发送数据和返回数据的样例\n201、JavaScript数组元素添加、删除、排序等方法有哪些？\nArray.concat( ) 连接数组\n\nArray.join( ) 将数组元素连接起来以构建一个字符串\n\nArray.length 数组的大小\n\nArray.pop( ) 删除并返回数组的最后一个元素\n\nArray.push( ) 给数组添加元素\n\nArray.reverse( ) 颠倒数组中元素的顺序\n\nArray.shift( ) 将元素移出数组\n\nArray.slice( ) 返回数组的一部分\n\nArray.sort( ) 对数组元素进行排序\n\nArray.splice( ) 插入、删除或替换数组的元素\n\nArray.toLocaleString( ) 把数组转换成局部字符串\n\nArray.toString( ) 将数组转换成一个字符串\n\nArray.unshift( ) 在数组头部插入一个元素\n\n202、如何添加html元素的事件，有几种方法？请列举\n直接在标签里添加；在元素上添加、使用事件注册函数添加\n\n203、JavaScript的循环语句有哪些？\nwhile  for  do while  forEach\n\n204、作用域-编译期执行期以及全局局部作用域问题\n理解js执行主要的两个阶段：预解析和执行期\n\n205、闭包：下面这个ul，如何点击每一列的时候alert其index？\n```\n    <ul id=\"test\">\n\n    <li>这是第一条</li>\n\n    <li>这是第二条</li>\n\n    <li>这是第三条</li>\n\n    </ul>\n```\n206、列出3条以上ff和IE的脚本兼容问题\n1、在IE下可通过document.frames[\"id\"];得到该IFRAME对象，\n\n而在火狐下则是通过document.getElementById(\"content_panel_if\").contentWindow;\n\n2、IE的写法： `_tbody=_table.childNodes[0]``\n\n在FF中，firefox会在子节点中包含空白则第一个子节点为空白\"\"， 而ie不会返回空白\n\n可以通过if(\"\" != node.nodeName)过滤掉空白子对象\n\n3、模拟点击事件\n```\nif(document.all){  //ie下\n\n    document.getElementById(\"a3\").click();  \n\n}\n\nelse{  //非IE\n\n    var evt = document.createEvent(\"MouseEvents\");\n\n    evt.initEvent(\"click\", true, true);\n\n    document.getElementById(\"a3\").dispatchEvent(evt);\n\n}\n```\n\n4、事件注册\n\nif (isIE){window.attachEvent(\"onload\", init);}else{window.addEventListener(\"load\", init, false);}\n\n207、列举可以哪些方面对前端开发进行优化\n代码压缩、合并减少http请求，图片制作精灵图、代码优化\n\n208、至少列出一种JavaScript继承的实现方式\n209、如现在有一个效果，有显示用户头像、用户昵称、用户其他信息；当用户鼠标移到头像上时，会弹出用户的所有信息；如果是你，你会如何实现这个功能，请用代码实现？\n210、call与apply有什么作用？又有什么什么区别？用callee属性实现函数递归？\napply的参数是数组,call的参数是单个的值，除此之外，两者没有差别，重点理解this的改变，callee已经不推荐使用\n\n211、用正则表达式，写出由字母开头，其余由数字、字母、下划线组成的6~30的字符串？\n212、列举浏览器对象模型BOM里常用的至少4个对象，并列举window对象的常用方法至少5个 （10分）\n对象：Window document location screen history navigator\n\n方法：Alert() confirm() prompt() open() close()\n\n213、Javascript中callee和caller的作用？\ncaller是返回一个对函数的引用，该函数调用了当前函数；\n\ncallee是返回正在被执行的function函数，也就是所指定的function对象的正文。\n\n214、对于apply和call两者在作用上是相同的，即是调用一个对象的一个方法，以另一个对象替换当前对象。将一个函数的对象上下文从初始的上下文改变为由 thisObj 指定的新对象。\n但两者在参数上有区别的。对于第一个参数意义都一样，但对第二个参数：?apply传入的是一个参数数组，也就是将多个参数组合成为一个数组传入，而call则作为call的参数传入（从第二个参数开始）。?如 func.call(func1,var1,var2,var3)对应的apply写法为：func.apply(func1,[var1,var2,var3]) 。\n\n215、在Javascript中什么是伪数组？如何将伪数组转化为标准数组？\n伪数组（类数组）：无法直接调用数组方法或期望length属性有什么特殊的行为，但仍可以对真正数组遍历方法来遍历它们。典型的是函数的argument参数，还有像调用getElementsByTagName,document.childNodes之类的,它们都返回NodeList对象都属于伪数组。可以使用Array.prototype.slice.call(fakeArray)将数组转化为真正的Array对象。\n\n216、写一个函数可以计算 sum(5,0,-5);输出0; sum(1,2,3,4);输出10;\nJs基本功\n\n217、事件代理怎么实现？\n在元素的父节点注册事件，通过事件冒泡，在父节点捕获事件\n\n218、《正则》写出正确的正则表达式匹配固话号，区号3-4位，第一位为0，中横线，7-8位数字，中横线，3-4位分机号格式的固话号\n常用正则表达式语法要熟悉\n\n219、《算法》 一下A,B可任选一题作答，两题全答加分\nA:农场买了一只羊，第一年是小羊，第二年底生一只，第三年不生，第四年底再生一只，第五年死掉。\n\nB:写出代码对下列数组去重并从大到小排列{5,2,3,6,8,6,5,4,7,1,9}\n\n220、请写出一张图片的HTML代码，已知道图片地址为“images/abc.jpg”,宽100px，高50px\n221、请写一个正则表达式：要求最短6位数，最长20位，阿拉伯数和英文字母（不区分大小写）组成\n```\n^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[a-zA-Z\\d]{6,20}$\n```\n\n222、统计1到400亿之间的自然数中含有多少个1？比如1-21中，有1、10、11、21这四个自然数有5个1\n223、删除与某个字符相邻且相同的字符，比如fdaffdaaklfjklja字符串处理之后成为“fdafdaklfjklja”\n224、请写出三种以上的Firefox有但InternetExplorer没有的属性和函数\n1、在IE下可通过document.frames[\"id\"];得到该IFRAME对象，\n\n而在火狐下则是通过document.getElementById(\"content_panel_if\").contentWindow;\n\n2、IE的写法： `_tbody=_table.childNodes[0]``\n\n在FF中，firefox会在子节点中包含空白则第一个子节点为空白\"\"， 而ie不会返回空白\n\n可以通过if(\"\" != node.nodeName)过滤掉空白子对象\n\n3、模拟点击事件\n```\nif(document.all){  //ie下\n\n    document.getElementById(\"a3\").click();\n\n}\n\nelse{  //非IE\n\n    var evt = document.createEvent(\"MouseEvents\");\n\n    evt.initEvent(\"click\", true, true);\n\n    document.getElementById(\"a3\").dispatchEvent(evt);\n\n}\n```\n4、事件注册\n\nif (isIE){window.attachEvent(\"onload\", init);}else{window.addEventListener(\"load\", init, false);}\n\n225、请写出一个程序，在页面加载完成后动态创建一个form表单，并在里面添加一个input对象并给它任意赋值后义post方式提交到：http://127.0.0.1/save.php\n\n\n226、用JavaScript实现冒泡排序。数据为23、45、18、37、92、13、24\n面试经常遇到的排序，查找算法要熟悉\n\n227、解释一下什么叫闭包，并实现一段闭包代码\n简单理解就是函数的嵌套形成闭包，闭包包括函数本身及其外部作用域\n\n228、简述一下什么叫事件委托以及其原理\n在元素的父节点注册事件，通过事件冒泡，在父节点捕获事件\n\n229、前端代码优化的方法\n```\nvar User = { 对象\n\n    count = 1，属性\n\n    getCount：function（）{ 方法\n\n        return this.count;\n\n    }\n\n}\n\nconsole.log(User.getCount());\n\nvar func = User.getCount;\n\nconsole.log(func());\n\n1 undefined（window）;\n```\n230、下列JavaScript代码执行后，依次alert的结果是\n```\n(function test(){\n\n      var a=b=5;\n\n      alert(typeof a);\n\n      alert(typeof b);\n\n})();\n\nalert(typeof a);\n\nalert(typeof b);\n```\n231、下列JavaScript代码执行后，iNum的值是\n```\nvar iNum = 0;\n\nfor(var i = 1; i< 10; i++){\n\n     if(i % 5 == 0){\n\n         continue;\n\n    }\n\n    iNum++;\n\n}\n```\n232、输出结果是多少？\n```\n     1）  var a;\n\n    var b = a * 0;\n\n    if (b == b) {\n\n         console.log(b * 2 + \"2\" - 0 + 4);\n\n    } else {\n\n         console.log(!b * 2 + \"2\" - 0 + 4);\n\n    }\n```\n答案：26\n\n2）\n```\n<script>\n\n     var a = 1;\n\n</script>\n\n<script>\n\nvar a;\n\nvar b = a * 0;\n\nif (b == b) {\n\n        console.log(b * 2 + \"2\" - 0 + 4);\n\n} else {\n\n        console.log(!b * 2 + \"2\" - 0 + 4);\n\n}\n\n</script>\n```\n答案：6\n\n3）\n```\n var t = 10;\n\nfunction test(t){\n\n       var t = t++;\n\n}test(t);\n\nconsole.log(t);\n```\n答案：10\n\n4）\n```\nvar t = 10;\n\nfunction test(test){\n\n      var t = test++;\n\n}test(t);\n\nconsole.log(t);\n\n答案：10\n```\n6）\n```\nvar t = 10;\n\nfunction test(test){\n\n       t = test++;\n\n}test(t);\n\nconsole.log(t);\n\n答案：10\n```\n7） var t = 10;\n```\nfunction test(test){\n\n      t = t + test;\n\n      console.log(t);\n\n      var t = 3;\n\n}test(t);\n\nconsole.log(t);\n```\n答案：NaN  10\n\n8）var a;\n```\nvar b = a / 0;\n\nif (b == b) {\n\n        console.log(b * 2 + \"2\" - 0 + 4);\n\n} else {\n\n        console.log(!b * 2 + \"2\" - 0 + 4);\n\n}\n```\n答案：26\n```\n9）<script>\n\n      var a = 1;\n\n</script>\n\n<script>\n\n    var a;\n\n    var b = a / 0;\n\n    if (b == b) {\n\n        console.log(b * 2 + \"2\" + 4);\n\n    } else {\n\n        console.log(!b * 2 + \"2\" + 4);\n\n    }\n\n</script>\n\n答案：Infinity24\n```\n233、\n```\n<body>\n\n<form id='form1'>\n\n<div id='div1'></div>\n\n<div id='div2'></div>\n\n<div id='div3'></div>\n\n<div id='div4'></div>\n\n<div id='div5'></div>\n\n<div id='div3'>id名重复的元素</div>\n\n</form>\n\n</body>\n```\n用程序实现找到html中id名相同的元素？\n\n234、下列JavaScript代码执行后，运行的结果是\n```\n<button id='btn'>点击我</button>\n\nvar btn = document.getElementById('btn');\n\nvar handler = {\n\n    id: '_eventHandler',\n\n    exec: function(){\n\n        alert(this.id);\n\n    }\n\n}\n\nbtn.addEventListener('click', handler.exec.false);\n```\n235、下列JavaScript代码执行后，依次alert的结果是\n```\nvar obj = {proto: {a:1,b:2}};\n\nfunction F(){};\n\nF.prototype = obj.proto;\n\nvar f = new F();\n\nobj.proto.c = 3;\n\nobj.proto = {a:-1, b:-2};\n\nalert(f.a);\n\nalert(f.c);\n\ndelete F.prototype['a'];\n\nalert(f.a);\n\nalert(obj.proto.a);\n```\n236、下列JavaScript代码执行后的效果是\n```\n<ul id='list'>\n\n<li>item</li>\n\n<li>item</li>\n\n<li>item</li>\n\n<li>item</li>\n\n<li>item</li>\n\n</ul>\n\nvar items = document.querySelectorAll('#list>li');\n\nfor(var i = 0;i < items.length; i++){\n\n     setTimeout(function(){\n\n           items[i].style.backgroundColor = '#fee';\n\n    }, 5);\n\n}\n```\n237、下列JavaScript代码执行后的li元素的数量是\n```\n<ul>\n\n<li>Item</li>\n\n<li></li>\n\n<li></li>\n\n<li>Item</li>\n\n<li>Item</li>\n\n</ul>\n\nvar items = document.getElementsByTagName('li');\n\nfor(var i = 0; i< items.length; i++){\n\n    if(items[i].innerHTML == ''){\n\n        items[i].parentNode.removeChild(items[i]);\n\n    }\n\n}\n```\n238、程序中捕获异常的方法？\nwindow.error\n\ntry{}catch(){}finally{}\n\n239、将字符串”<tr><td>{$id}</td><td>{$name}</td></tr>”中的{$id}替换成10，{$name}替换成Tony （使用正则表达式）\n答案：”<tr><td>{$id}</td><td>{$id}_{$name}</td></tr>”.replace(/{\\$id}/g,?’10′).replace(/{\\$name}/g,?‘Tony’);\n\n240、给String对象添加一个方法，传入一个string类型的参数，然后将string的每个字符间价格空格返回，例如：\naddSpace(“hello world”) // -> ‘h e l l o ?w o r l d’\n\n         String.prototype.spacify = function(){\n\nreturn this.split('').join(' ');\n\n};\n\n241、写出函数DateDemo的返回结果，系统时间假定为今天\n```\nfunction DateDemo(){\n\n var d, s=\"今天日期是：\";\n\nd = new Date();\n\ns += d.getMonth() + \"/\";\n\ns += d.getDate() + \"/\";\n\ns += d.getYear();\n\n return s;\n\n}\n\n结果：今天日期是：7/17/2010\n```\n242、输出今天的日期，以YYYY-MM-DD的方式，比如今天是2014年9月26日，则输出2014-09-26\n```\nvar d = new Date();\n\n// 获取年，getFullYear()返回4位的数字\n\nvar year = d.getFullYear();\n\n// 获取月，月份比较特殊，0是1月，11是12月\n\nvar month = d.getMonth() + 1;\n\n// 变成两位\n\nmonth = month < 10 ? '0' + month : month;\n\n// 获取日\n\nvar day = d.getDate();\n\nday = day < 10 ? '0' + day : day;\n\nalert(year + '-' + month + '-' + day);\n```\n243、已知数组var?stringArray?=?[“This”,?“is”,?“Baidu”,?“Campus”]，Alert出”This?is?Baidu?Campus”。\n答案：alert(stringArray.join(“”))\n\n244、已知有字符串foo=”get-element-by-id”,写一个function将其转化成驼峰表示法”getElementById”。\n```\nfunction combo(msg){\n\nvar arr=msg.split(\"-\");\n\nfor(var i=1;i<arr.length;i++){\n\narr[i]=arr[i].charAt(0).toUpperCase()+arr[i].substr(1,arr[i].length-1);\n\n}\n\nmsg=arr.join(\"\");\n\nreturn msg;\n\n}\n```\n245、.varnumberArray=[3,6,2,4,1,5]; （考察基础API）\n1)实现对该数组的倒排，输出[5,1,4,2,6,3]\n\n2)实现对该数组的降序排列，输出[6,5,4,3,2,1]\n```\nfunction combo(msg){\n\nvar arr=msg.split(\"-\");\n\nfor(var i=1;i<arr.length;i++){\n\narr[i]=arr[i].charAt(0).toUpperCase()+arr[i].substr(1,arr[i].length-1);\n\n}\n\nmsg=arr.join(\"\");\n\nreturn msg;\n\n}\n```\n246、把两个数组合并，并删除第二个元素。\n```\nvar array1 = ['a','b','c'];\n\nvar bArray = ['d','e','f'];\n\nvar cArray = array1\n```\n247、如何消除一个数组里面重复的元素？\n```\nvar arr=[1,2,3,3,4,4,5,5,6,1,9,3,25,4];\n\nfunction deRepeat(){\n\nvar newArr=[];\n\nvar obj={};\n\nvar index=0;\n\nvar l=arr.length;\n\nfor(var i=0;i<l;i++){\n\nif(obj[arr[i]]==undefined)\n\n{\n\nobj[arr[i]]=1;\n\nnewArr[index++]=arr[i];\n\n}\n\nelse if(obj[arr[i]]==1)\n\n}\n\nreturn newArr;\n\n}\n\nvar newArr2=deRepeat(arr);\n\nalert(newArr2); //输出1,2,3,4,5,6,9,25\n```\n248、用js实现随机选取10–100之间的10个数字，存入一个数组，并排序。\n```\nvar iArray = [];\n\nfuntion getRandom(istart, iend){\n\nvar iChoice = istart - iend +1;\n\nreturn Math.floor(Math.random() * iChoice + istart;\n\n}\n\nfor(var i=0; i<10; i++){\n\niArray.push(getRandom(10,100));\n\n}\n\niArray.sort();\n```\n249、正则表达式构造函数var reg=new RegExp(“xxx”)与正则表达字面量var reg=//有什么不同？匹配邮箱的正则表达式？\n答案：当使用RegExp()构造函数的时候，不仅需要转义引号（即\\”表示”），并且还需要双反斜杠（即\\\\表示一个\\）。使用正则表达字面量的效率更高。?\n\n250、1 var regMail = /^([a-zA-Z0-9_-])+@([a-zA-Z0-9_-])+((.[a-zA-Z0-9_-]{2,3}){1,2})$/;\n正则表达式对象3 – 清除空格\n\n写一个function，清除字符串前后的空格。（兼容所有浏览器）\n\n使用自带接口trim()，考虑兼容性：\n```\nif (!String.prototype.trim) {\n\nString.prototype.trim = function() {\n\nreturn this.replace(/^\\s+/, \"\").replace(/\\s+$/,\"\");\n\n} }\n\n// test the function\n\nvar str = \" \\t\\n test string \".trim();\n\nalert(str == \"test string\"); // alerts \"true\"\n```\n251、数组和字符串\n```\n<script lang=\"JavaScript\" type=\"text/javascript\">\n\n    function outPut(s) {\n\n        document.writeln(s);\n\n    }\n\n    var a = \"lashou\";\n\n    var b = a;\n\n    outPut(b);\n\n    a = \"拉手\";\n\n    outPut(a);\n\n    outPut(b);\n\n    var a_array = [1, 2, 3];\n\n    var b_array = a_array;\n\n    outPut(b_array);\n\n    a_array[3] = 4;\n\n    outPut(a_array);\n\n    outPut(b_array);\n\n</script>\n\n输出结果：\n\n答案：lashou 拉手 lashou 1,2,3 1,2,3,4 1,2,3,4\n```\n252、下列控制台都输出什么\n第1题：\n```\nfunction setName(){\n\n    name=\"张三\";\n\n}\n\nsetName();\n\nconsole.log(name);\n\n答案：\"张三\"\n```\n253、第2题：\n```\n//考点：1、变量声明提升 2、变量搜索机制\n\nvar a=1;\n\nfunction test(){\n\n    console.log(a);\n\n    var a=1;\n\n}\n\ntest();\n\n答案：undefined\n```\n254、第3题：\n```\nvar b=2;\n\nfunction test2(){\n\n    window.b=3;\n\n    console.log(b);\n\n}\n\ntest2();\n\n答案：3\n```\n255、第4题：\n```\nc=5;//声明一个全局变量c\n\nfunction test3(){\n\n    window.c=3;\n\n    console.log(c);     //答案：undefined，原因：由于此时的c是一个局部变量c，并且没有被赋值\n\n    var c;\n\n    console.log(window.c);//答案：3，原因：这里的c就是一个全局变量c\n\n}\n\ntest3();\n```\n256、第5题：\n```\nvar arr = [];\n\narr[0]  = 'a';\n\narr[1]  = 'b';\n\narr[10] = 'c';\n\nalert(arr.length);  //答案：11\n\nconsole.log(arr[5]);    //答案：undefined\n```\n257、第6题：\n```\nvar a=1;\n\nconsole.log(a++);       //答案：1\n\nconsole.log(++a);       //答案：3\n\n258、第7题：\nconsole.log(null==undefined);   //答案：true\n\nconsole.log(\"1\"==1);        //答案：true，因为会将数字1先转换为字符串1\n\nconsole.log(\"1\"===1);       //答案：false，因为数据类型不一致\n```\n259、第8题：\n```\ntypeof 1;       \"number\"\n\ntypeof \"hello\";     \"string\"\n\ntypeof /[0-9]/;     \"object\"\n\ntypeof {};      \"object\"\n\ntypeof null;        \"object\"\n\ntypeof undefined;   \"undefined\"\n\ntypeof [1,2,3];     \"object\"\n\ntypeof function(){};    //\"function\"\n```\n260、第9题：\n```\nparseInt(3.14);         //3\n\nparseFloat(\"3asdf\");        //3\n\nparseInt(\"1.23abc456\");\n\nparseInt(true);//\"true\" NaN\n```\n261、第10题：\n```\n//考点：函数声明提前\n\nfunction bar() {\n\n    return foo;\n\n    foo = 10;\n\n    function foo() {}\n\n    //var foo = 11;\n\n}\n\nalert(typeof bar());//\"function\"\n```\n262、第11题：考点：函数声明提前\n```\nvar foo = 1;\n\nfunction bar() {\n\n    foo = 10;\n\n    return;\n\n    function foo() {}\n\n}\n\nbar();\n\nalert(foo);//答案：1\n```\n263、第12题：\n```\nconsole.log(a);//是一个函数\n\nvar a = 3;\n\nfunction a(){}\n\nconsole.log(a);////3\n```\n264、第13题：\n//考点：对arguments的操作\n\nfunction foo(a) {\n\n    arguments[0] = 2;\n\n    alert(a);//答案：2，因为：a、arguments是对实参的访问，b、通过arguments[i]可以修改指定实参的值\n\n}\n\nfoo(1);\n\n265、第14题：\nfunction foo(a) {\n\n    alert(arguments.length);//答案：3，因为arguments是对实参的访问\n\n}\n\nfoo(1, 2, 3);\n\n266、第15题\nbar();//报错\n\nvar foo = function bar(name) {\n\n    console.log(\"hello\"+name);\n\n    console.log(bar);\n\n};\n\n//alert(typeof bar);\n\nfoo(\"world\");//\"hello\"\n\nconsole.log(bar);//undefined\n\nconsole.log(foo.toString());\n\nbar();//报错\n\n267、第16题\nfunction test(){\n\n    console.log(\"test函数\");\n\n}\n\nsetTimeout(function(){\n\n    console.log(\"定时器回调函数\");\n\n}, 0)\n\ntest();\n\nfunction foo(){\n\n    var name=\"hello\";\n\n}\n\n三、Jquery\n1、jQuery 的 slideUp动画 ，如果目标元素是被外部事件驱动, 当鼠标快速地连续触发外部元素事件, 动画会滞后的反复执行，该如何处理呢?\n\n\n四、HTML5 CSS3\n1、CSS3有哪些新特性？\n    1. CSS3实现圆角（border-radius），阴影（box-shadow），\n\n    2. 对文字加特效（text-shadow、），线性渐变（gradient），旋转（transform）\n\n    3.transform:rotate(9deg) scale(0.85,0.90) translate(0px,-30px) skew(-9deg,0deg);// 旋转,缩放,定位,倾斜\n\n    4. 增加了更多的CSS选择器  多背景 rgba\n\n    5. 在CSS3中唯一引入的伪元素是 ::selection.\n\n    6. 媒体查询，多栏布局\n\n    7. border-image\n\n2、html5有哪些新特性、移除了那些元素？如何处理HTML5新标签的浏览器兼容问题？如何区分 HTML 和 HTML5？\n新特性：\n\n    1. 拖拽释放(Drag and drop) API\n\n    2. 语义化更好的内容标签（header,nav,footer,aside,article,section）\n\n    3. 音频、视频API(audio,video)\n\n    4. 画布(Canvas) API\n\n    5. 地理(Geolocation) API\n\n    6. 本地离线存储 localStorage 长期存储数据，浏览器关闭后数据不丢失；\n\n    7. sessionStorage 的数据在浏览器关闭后自动删除\n\n    8. 表单控件，calendar、date、time、email、url、search\n\n    9. 新的技术webworker, websocket, Geolocation\n\n移除的元素：\n\n    1. 纯表现的元素：basefont，big，center，font, s，strike，tt，u；\n\n    2. 对可用性产生负面影响的元素：frame，frameset，noframes；\n\n支持HTML5新标签：\n\n1. IE8/IE7/IE6支持通过 document.createElement 方法产生的标签，可以利用这一特性让这些浏览器支持 Html5 新标签，浏览器支持新标签后，还需要添加标签默认的样式（当然最好的方式是直接使用成熟的框架、使用最多的是html5shim框架）：\n\n<!--[if lt IE 9]>\n\n<script> src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"</script>\n\n<![endif]-->\n\n如何区分：\n\nDOCTYPE声明新增的结构元素、功能元素\n\n3、本地存储（Local Storage ）和cookies（储存在用户本地终端上的数据）之间的区别是什么？\nCookies:服务器和客户端都可以访问；大小只有4KB左右；有有效期，过期后将会删除；\n\n本地存储：只有本地浏览器端可访问数据，服务器不能访问本地存储直到故意通过POST或者GET的通道发送到服务器；每个域5MB；没有过期数据，它将保留知道用户从浏览器清除或者使用Javascript代码移除\n\n4、如何实现浏览器内多个标签页之间的通信?\n调用 localstorge、cookies 等本地存储方式\n\n5、你如何对网站的文件和资源进行优化？\n文件合并\n\n文件最小化/文件压缩\n\n使用CDN托管\n\n缓存的使用\n\n6、什么是响应式设计？\n它是关于网页制作的过程中让不同的设备有不同的尺寸和不同的功能。响应式设计是让所有的人能在这些设备上让网站运行正常\n\n7、新的 HTML5 文档类型和字符集是？\n答：HTML5文档类型：<!doctype html>\n\n    HTML5使用的编码<meta charset=”UTF-8”>\n\n8、HTML5 Canvas 元素有什么用？\n答：Canvas 元素用于在网页上绘制图形，该元素标签强大之处在于可以直接在 HTML 上进行图形操作。\n\n9、HTML5 存储类型有什么区别？\n答：Media API、Text Track API、Application Cache API、User Interaction、Data Transfer API、Command API、Constraint Validation API、History API\n\n10、用H5+CSS3解决下导航栏最后一项掉下来的问题\n11、CSS3新增伪类有那些？\n    p:first-of-type 选择属于其父元素的首个 <p> 元素的每个 <p> 元素。\n\n    p:last-of-type  选择属于其父元素的最后 <p> 元素的每个 <p> 元素。\n\n    p:only-of-type  选择属于其父元素唯一的 <p> 元素的每个 <p> 元素。\n\n    p:only-child    选择属于其父元素的唯一子元素的每个 <p> 元素。\n\n    p:nth-child(2)  选择属于其父元素的第二个子元素的每个 <p> 元素。\n\n    :enabled、:disabled 控制表单控件的禁用状态。\n\n:checked，单选框或复选框被选中。\n\n12、请用CSS实现：一个矩形内容，有投影，有圆角，hover状态慢慢变透明。\ncss属性的熟练程度和实践经验\n\n13、描述下CSS3里实现元素动画的方法\n动画相关属性的熟悉程度\n\n14、html5\\CSS3有哪些新特性、移除了那些元素？如何处理HTML5新标签的浏览器兼容问题？如何区分 HTML 和 HTML5？\nHTML5 现在已经不是 SGML 的子集，主要是关于图像，位置，存储，地理定位等功能的增加。\n\n* 绘画 canvas 元素\n\n  用于媒介回放的 video 和 audio 元素\n\n  本地离线存储 localStorage 长期存储数据，浏览器关闭后数据不丢失；\n\n  sessionStorage 的数据在浏览器关闭后自动删除\n\n  语意化更好的内容元素，比如 article、footer、header、nav、section\n\n  表单控件，calendar、date、time、email、url、search\n\n  CSS3实现圆角，阴影，对文字加特效，增加了更多的CSS选择器  多背景 rgba\n\n  新的技术webworker, websockt, Geolocation\n\n移除的元素\n\n纯表现的元素：basefont，big，center，font, s，strike，tt，u；\n\n对可用性产生负面影响的元素：frame，frameset，noframes；\n\n* 是IE8/IE7/IE6支持通过document.createElement方法产生的标签，\n\n  可以利用这一特性让这些浏览器支持HTML5新标签，\n\n  浏览器支持新标签后，还需要添加标签默认的样式：\n\n* 当然最好的方式是直接使用成熟的框架、使用最多的是html5shim框架\n\n<!--[if lt IE 9]>\n\n<script> src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"</script>\n\n<![endif]-->\n\n15、你怎么来实现页面设计图，你认为前端应该如何高质量完成工作? 一个满屏 品 字布局 如何设计?\n* 首先划分成头部、body、脚部；。。。。。\n\n* 实现效果图是最基本的工作，精确到2px；\n\n  与设计师，产品经理的沟通和项目的参与\n\n  做好的页面结构，页面重构和用户体验\n\n  处理hack，兼容、写出优美的代码格式\n\n  针对服务器的优化、拥抱 HTML5。\n\n16、你能描述一下渐进增强和优雅降级之间的不同吗?\n渐进增强 progressive enhancement：针对低版本浏览器进行构建页面，保证最基本的功能，然后再针对高级浏览器进行效果、交互等改进和追加功能达到更好的用户体验。\n\n优雅降级 graceful degradation：一开始就构建完整的功能，然后再针对低版本浏览器进行兼容。\n\n　　区别：优雅降级是从复杂的现状开始，并试图减少用户体验的供给，而渐进增强则是从一个非常基础的，能够起作用的版本开始，并不断扩充，以适应未来环境的需要。降级（功能衰减）意味着往回看；而渐进增强则意味着朝前看，同时保证其根基处于安全地带。　\n\n　　“优雅降级”观点\n\n　　“优雅降级”观点认为应该针对那些最高级、最完善的浏览器来设计网站。而将那些被认为“过时”或有功能缺失的浏览器下的测试工作安排在开发周期的最后阶段，并把测试对象限定为主流浏览器（如 IE、Mozilla 等）的前一个版本。\n\n　　在这种设计范例下，旧版的浏览器被认为仅能提供“简陋却无妨 (poor, but passable)” 的浏览体验。你可以做一些小的调整来适应某个特定的浏览器。但由于它们并非我们所关注的焦点，因此除了修复较大的错误之外，其它的差异将被直接忽略。\n\n　　“渐进增强”观点\n\n　　“渐进增强”观点则认为应关注于内容本身。\n\n　　内容是我们建立网站的诱因。有的网站展示它，有的则收集它，有的寻求，有的操作，还有的网站甚至会包含以上的种种，但相同点是它们全都涉及到内容。这使得“渐进增强”成为一种更为合理的设计范例。这也是它立即被 Yahoo! 所采纳并用以构建其“分级式浏览器支持 (Graded Browser Support)”策略的原因所在。\n\n\n\n　　那么问题了。现在产品经理看到IE6,7,8网页效果相对高版本现代浏览器少了很多圆角，阴影（CSS3），要求兼容（使用图片背景，放弃CSS3），你会如何说服他？\n\n17、为什么利用多个域名来存储网站资源会更有效？\nCDN缓存更方便\n\n突破浏览器并发限制\n\n节约cookie带宽\n\n节约主域名的连接数，优化页面响应速度\n\n防止不必要的安全问题\n\n18、请谈一下你对网页标准和标准制定机构重要性的理解。\n　　（无标准答案）网页标准和标准制定机构都是为了能让web发展的更‘健康’，开发者遵循统一的标准，降低开发难度，开发成本，SEO也会更好做，也不会因为滥用代码导致各种BUG、安全问题，最终提高网站易用性。\n\n\n\n19、请描述一下cookies，sessionStorage和localStorage的区别？　　\n　　sessionStorage用于本地存储一个会话（session）中的数据，这些数据只有在同一个会话中的页面才能访问并且当会话结束后数据也随之销毁。因此sessionStorage不是一种持久化的本地存储，仅仅是会话级别的存储。而localStorage用于持久化的本地存储，除非主动删除数据，否则数据是永远不会过期的。\n\nweb storage和cookie的区别\n\nWeb Storage的概念和cookie相似，区别是它是为了更大容量存储设计的。Cookie的大小是受限的，并且每次你请求一个新的页面的时候Cookie都会被发送过去，这样无形中浪费了带宽，另外cookie还需要指定作用域，不可以跨域调用。\n\n除此之外，Web Storage拥有setItem,getItem,removeItem,clear等方法，不像cookie需要前端开发者自己封装setCookie，getCookie。但是Cookie也是不可以或缺的：Cookie的作用是与服务器进行交互，作为HTTP规范的一部分而存在 ，而Web Storage仅仅是为了在本地“存储”数据而生。\n\n20、知道css有个content属性吗？有什么作用？有什么应用？\n知道。css的content属性专门应用在 before/after 伪元素上，用来插入生成内容。最常见的应用是利用伪类清除浮动。\n\n//一种常见利用伪类清除浮动的代码\n```\n.clearfix:after {\n\n    content:\".\"; //这里利用到了content属性\n\n    display:block;\n\n    height:0;\n\n    visibility:hidden;\n\n    clear:both; }\n\n.clearfix {\n\n    *zoom:1;\n\n}\n``\nafter伪元素通过 content 在元素的后面生成了内容为一个点的块级素，再利用clear:both清除浮动。\n\n　　那么问题继续还有，知道css计数器（序列数字字符自动递增）吗？如何通过css content属性实现css计数器？\n\n答案：css计数器是通过设置counter-reset 、counter-increment 两个属性 、及 counter()/counters()一个方法配合after / before 伪类实现。\n\n21、如何在 HTML5 页面中嵌入音频?\nHTML 5 包含嵌入音频文件的标准方式，支持的格式包括 MP3、Wav 和 Ogg：\n\n<audio controls>\n\n  <source src=\"jamshed.mp3\" type=\"audio/mpeg\">\n\n   Your browser does'nt support audio embedding feature.\n\n</audio>\n\n22、如何在 HTML5 页面中嵌入视频？\n和音频一样，HTML5 定义了嵌入视频的标准方法，支持的格式包括：MP4、WebM 和 Ogg：\n\n<video width=\"450\" height=\"340\" controls>\n\n  <source src=\"jamshed.mp4\" type=\"video/mp4\">\n\n   Your browser does'nt support video embedding feature.\n\n</video>\n\n23、HTML5 引入什么新的表单属性？\nDatalist   datetime   output   keygen  date  month  week  time  number   range   emailurl\n\n24、CSS3新增伪类有那些？\n p:first-of-type 选择属于其父元素的首个 <p> 元素的每个 <p> 元素。\n\n    p:last-of-type  选择属于其父元素的最后 <p> 元素的每个 <p> 元素。\n\n    p:only-of-type  选择属于其父元素唯一的 <p> 元素的每个 <p> 元素。\n\n    p:only-child    选择属于其父元素的唯一子元素的每个 <p> 元素。\n\n    p:nth-child(2)  选择属于其父元素的第二个子元素的每个 <p> 元素。\n\n    :enabled、:disabled 控制表单控件的禁用状态。\n\n:checked，单选框或复选框被选中。\n\n25、(写)描述一段语义的html代码吧。\n（HTML5中新增加的很多标签（如：<article>、<nav>、<header>和<footer>等）\n\n就是基于语义化设计原则）\n\n< div id=\"header\">\n\n< h1>标题< /h1>\n\n< h2>专注Web前端技术< /h2>\n\n< /div>\n\n语义 HTML 具有以下特性：\n\n\n\n文字包裹在元素中，用以反映内容。例如：\n\n段落包含在 <p> 元素中。\n\n顺序表包含在<ol>元素中。\n\n从其他来源引用的大型文字块包含在<blockquote>元素中。\n\nHTML 元素不能用作语义用途以外的其他目的。例如：\n\n<h1>包含标题，但并非用于放大文本。\n\n<blockquote>包含大段引述，但并非用于文本缩进。\n\n空白段落元素 ( <p></p> ) 并非用于跳行。\n\n文本并不直接包含任何样式信息。例如：\n\n不使用 <font> 或 <center> 等格式标记。\n\n类或 ID 中不引用颜色或位置。\n\n26.cookie在浏览器和服务器间来回传递。 sessionStorage和localStorage区别\nsessionStorage和localStorage的存储空间更大；\n\nsessionStorage和localStorage有更多丰富易用的接口；\n\nsessionStorage和localStorage各自独立的存储空间；\n\n27、html5有哪些新特性、移除了那些元素？如何处理HTML5新标签的浏览器兼容问题？如何区分 HTML 和 HTML5？\n* HTML5 现在已经不是 SGML 的子集，主要是关于图像，位置，存储，多任务等功能的增加。\n\n* 绘画 canvas\n\n  用于媒介回放的 video 和 audio 元素\n\n  本地离线存储 localStorage 长期存储数据，浏览器关闭后数据不丢失；\n\n  sessionStorage 的数据在浏览器关闭后自动删除\n\n  语意化更好的内容元素，比如 article、footer、header、nav、section\n\n  表单控件，calendar、date、time、email、url、search\n\n  新的技术webworker, websockt, Geolocation\n\n* 移除的元素\n\n纯表现的元素：basefont，big，center，font, s，strike，tt，u；\n\n对可用性产生负面影响的元素：frame，frameset，noframes；\n\n支持HTML5新标签：\n\n* IE8/IE7/IE6支持通过document.createElement方法产生的标签，\n\n  可以利用这一特性让这些浏览器支持HTML5新标签，\n\n  浏览器支持新标签后，还需要添加标签默认的样式：\n\n* 当然最好的方式是直接使用成熟的框架、使用最多的是html5shim框架\n\n<!--[if lt IE 9]>\n\n<script> src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"</script>\n\n<![endif]-->\n\n28、如何区分： DOCTYPE声明\\新增的结构元素\\功能元素\n29、语义化的理解？\n用正确的标签做正确的事情！\n\nhtml语义化就是让页面的内容结构化，便于对浏览器、搜索引擎解析；\n\n在没有样式CCS情况下也以一种文档格式显示，并且是容易阅读的。\n\n搜索引擎的爬虫依赖于标记来确定上下文和各个关键字的权重，利于 SEO。\n\n使阅读源代码的人对网站更容易将网站分块，便于阅读维护理解。\n\n30、HTML5的离线储存？\nlocalStorage    长期存储数据，浏览器关闭后数据不丢失；\n\nsessionStorage  数据在浏览器关闭后自动删除。\n\n31、写出HTML5的文档声明方式\n\n\n <DOCYPE html>\n\n32、HTML5和CSS3的新标签     \n\n\n\n\nHTML5： nav, footer, header, section, hgroup, video, time, canvas, audio...\n\nCSS3: RGBA, opacity, text-shadow, box-shadow, border-radius, border-image,\n\nborder-color, transform...;\n\n33、自己对标签语义化的理解\n    在我看来，语义化就是比如说一个段落， 那么我们就应该用 <p>标签来修饰，标题就应该用 <h?>标签等。符合文档语义的标签。\n\n五、移动web开发\n1、移动端常用类库及优缺点\n知识面宽度，多多益善\n\n2、Zepto库和JQ区别\nZepto相对jQuery更加轻量，主要用在移动端，jQuery也有对应的jQuerymobile移动端框架\n\n六、Ajax\n1、Ajax 是什么? 如何创建一个Ajax？\nAjax并不算是一种新的技术，全称是asychronous javascript and xml，可以说是已有技术的组合，主要用来实现客户端与服务器端的异步通信效果，实现页面的局部刷新，早期的浏览器并不能原生支持ajax，可以使用隐藏帧（iframe）方式变相实现异步效果，后来的浏览器提供了对ajax的原生支持\n\n使用ajax原生方式发送请求主要通过XMLHttpRequest(标准浏览器)、ActiveXObject(IE浏览器)对象实现异步通信效果\n\n基本步骤：\n\nvar xhr =null;//创建对象\n\nif(window.XMLHttpRequest){\n\n   xhr = new XMLHttpRequest();\n\n}else{\n\n   xhr = new ActiveXObject(\"Microsoft.XMLHTTP\");\n\n}\n\n     xhr.open(“方式”,”地址”,”标志位”);//初始化请求\n\n     xhr.setRequestHeader(“”,””);//设置http头信息\n\n     xhr.onreadystatechange =function(){}//指定回调函数\n\n     xhr.send();//发送请求\n\njs框架（jQuery/EXTJS等）提供的ajax  API对原生的ajax进行了封装，熟悉了基础理论，再学习别的框架就会得心应手，好多都是换汤不换药的内容\n\n2、同步和异步的区别?\n同步：阻塞的\n\n-张三叫李四去吃饭，李四一直忙得不停，张三一直等着，直到李四忙完两个人一块去吃饭\n\n=浏览器向服务器请求数据，服务器比较忙，浏览器一直等着（页面白屏），直到服务器返回数据，浏览器才能显示页面\n\n异步：非阻塞的\n\n-张三叫李四去吃饭，李四在忙，张三说了一声然后自己就去吃饭了，李四忙完后自己去吃\n\n=浏览器向服务器请求数据，服务器比较忙，浏览器可以自如的干原来的事情（显示页面），服务器返回数据的时候通知浏览器一声，浏览器把返回的数据再渲染到页面，局部更新\n\n3、如何解决跨域问题?\n理解跨域的概念：协议、域名、端口都相同才同域，否则都是跨域\n\n出于安全考虑，服务器不允许ajax跨域获取数据，但是可以跨域获取文件内容，所以基于这一点，可以动态创建script标签，使用标签的src属性访问js文件的形式获取js脚本，并且这个js脚本中的内容是函数调用，该函数调用的参数是服务器返回的数据，为了获取这里的参数数据，需要事先在页面中定义回调函数，在回调函数中处理服务器返回的数据，这就是解决跨域问题的主流解决方案\n\n4、页面编码和被请求的资源编码如果不一致如何处理？\n对于ajax请求传递的参数，如果是get请求方式，参数如果传递中文，在有些浏览器会乱码，不同的浏览器对参数编码的处理方式不同，所以对于get请求的参数需要使用 encodeURIComponent函数对参数进行编码处理，后台开发语言都有相应的解码api。对于post请求不需要进行编码\n\n5、简述ajax 的过程。\n1. 创建XMLHttpRequest对象,也就是创建一个异步调用对象\n\n2. 创建一个新的HTTP请求,并指定该HTTP请求的方法、URL及验证信息\n\n3. 设置响应HTTP请求状态变化的函数\n\n4. 发送HTTP请求\n\n5. 获取异步调用返回的数据\n\n6. 使用JavaScript和DOM实现局部刷新\n\n6、阐述一下异步加载。\n1. 异步加载的方案： 动态插入 script 标签\n\n2. 通过 ajax 去获取 js 代码，然后通过 eval 执行\n\n3. script 标签上添加 defer 或者 async 属性\n\n4. 创建并插入 iframe，让它异步执行 js\n\n7、请解释一下 JavaScript 的同源策略。\n同源策略是客户端脚本（尤其是Javascript）的重要的安全度量标准。它最早出自Netscape Navigator2.0，其目的是防止某个文档或脚本从多个不同源装载。所谓同源指的是：协议，域名，端口相同，同源策略是一种安全协议，指一段脚本只能读取来自同一来源的窗口和文档的属性。\n\n8、GET和POST的区别，何时使用POST？\nGET：一般用于信息获取，使用URL传递参数，对所发送信息的数量也有限制，一般在2000个字符，有的浏览器是8000个字符\n\nPOST：一般用于修改服务器上的资源，对所发送的信息没有限制\n\n在以下情况中，请使用 POST 请求：\n\n1. 无法使用缓存文件（更新服务器上的文件或数据库）\n\n2. 向服务器发送大量数据（POST 没有数据量限制）\n\n3. 发送包含未知字符的用户输入时，POST 比 GET 更稳定也更可靠\n\n9、ajax 是什么?ajax 的交互模型?同步和异步的区别?如何解决跨域问题?\n 1. 通过异步模式，提升了用户体验\n\n 2. 优化了浏览器和服务器之间的传输，减少不必要的数据往返，减少了带宽占用\n\n3.  Ajax在客户端运行，承担了一部分本来由服务器承担的工作，减少了大用户量下的服务器负载。\n\n10、 Ajax的最大的特点是什么。\n    Ajax可以实现异步通信效果，实现页面局部刷新，带来更好的用户体验；按需获取数据，节约带宽资源；\n\n11、ajax的缺点\n 1、ajax不支持浏览器back按钮。\n\n 2、安全问题 AJAX暴露了与服务器交互的细节。\n\n 3、对搜索引擎的支持比较弱。\n\n 4、破坏了程序的异常机制。\n\n12、ajax请求的时候get 和post方式的区别\nget一般用来进行查询操作，url地址有长度限制，请求的参数都暴露在url地址当中，如果传递中文参数，需要自己进行编码操作，安全性较低。\n\npost请求方式主要用来提交数据，没有数据长度的限制，提交的数据内容存在于http请求体中，数据不会暴漏在url地址中。\n\n13、解释jsonp的原理，以及为什么不是真正的ajax\n　　Jsonp并不是一种数据格式，而json是一种数据格式，jsonp是用来解决跨域获取数据的一种解决方案，具体是通过动态创建script标签，然后通过标签的src属性获取js文件中的js脚本，该脚本的内容是一个函数调用，参数就是服务器返回的数据，为了处理这些返回的数据，需要事先在页面定义好回调函数，本质上使用的并不是ajax技术\n\n14、什么是Ajax和JSON，它们的优缺点。\nAjax是全称是asynchronous JavaScript andXML，即异步JavaScript和xml，用于在Web页面中实现异步数据交互，实现页面局部刷新。\n\n优点：可以使得页面不重载全部内容的情况下加载局部内容，降低数据传输量，避免用户不断刷新或者跳转页面，提高用户体验\n\n缺点：对搜索引擎不友好；要实现ajax下的前后退功能成本较大；可能造成请求数的增加跨域问题限制；\n\nJSON是一种轻量级的数据交换格式，ECMA的一个子集\n\n优点：轻量级、易于人的阅读和编写，便于机器（JavaScript）解析，支持复合数据类型（数组、对象、字符串、数字）\n\n15、http常见的状态码有那些？分别代表是什么意思？\n200 - 请求成功\n\n301 - 资源（网页等）被永久转移到其它URL\n\n404 - 请求的资源（网页等）不存在\n\n500 - 内部服务器错误\n\n16、一个页面从输入 URL 到页面加载显示完成，这个过程中都发生了什么？\n分为4个步骤：\n\n1. 当发送一个 URL 请求时，不管这个 URL 是 Web 页面的 URL 还是 Web 页面上每个资源的 URL，浏览器都会开启一个线程来处理这个请求，同时在远程 DNS 服务器上启动一个 DNS 查询。这能使浏览器获得请求对应的 IP 地址。\n\n2. 浏览器与远程 Web 服务器通过 TCP 三次握手协商来建立一个 TCP/IP 连接。该握手包括一个同步报文，一个同步-应答报文和一个应答报文，这三个报文在 浏览器和服务器之间传递。该握手首先由客户端尝试建立起通信，而后服务器应答并接受客户端的请求，最后由客户端发出该请求已经被接受的报文。\n\n3. 一旦 TCP/IP 连接建立，浏览器会通过该连接向远程服务器发送 HTTP 的 GET 请求。远程服务器找到资源并使用 HTTP 响应返回该资源，值为 200 的 HTTP 响应状态表示一个正确的响应。\n\n4. 此时，Web 服务器提供资源服务，客户端开始下载资源。\n\n17、ajax请求的时候get 和post方式的区别\nget一般用来进行查询操作，url地址有长度限制，请求的参数都暴露在url地址当中，如果传递中文参数，需要自己进行编码操作，安全性较低。\n\npost请求方式主要用来提交数据，没有数据长度的限制，提交的数据内容存在于http请求体中，数据不会暴漏在url地址中。\n\n18、ajax请求时，如何解释json数据\n使用eval()或者JSON.parse() 鉴于安全性考虑，推荐使用JSON.parse()更靠谱，对数据的安全性更好。\n\n19、.javascript的本地对象，内置对象和宿主对象\n本地对象为独立于宿主环境的ECMAScript提供的对象，包括ArrayObjectRegExp等可以new实例化的对象\n\n内置对象为Gload，Math 等不可以实例化的(他们也是本地对象，内置对象是本地对象的一个子集)\n\n宿主对象为所有的非本地对象，所有的BOM和DOM对象都是宿主对象，如浏览器自带的document,window 等对象\n\n20、为什么利用多个域名来存储网站资源会更有效？\n确保用户在不同地区能用最快的速度打开网站，其中某个域名崩溃用户也能通过其他郁闷访问网站，并且不同的资源放到不同的服务器上有利于减轻单台服务器的压力。\n\n21、请说出三种减低页面加载时间的方法\n1、压缩css、js文件\n2、合并js、css文件，减少http请求\n3、外部js、css文件放在最底下\n4、减少dom操作，尽可能用变量替代不必要的dom操作\n\n22、HTTP状态码都有那些。\n200 OK      //客户端请求成功\n\n400 Bad Request  //客户端请求有语法错误，不能被服务器所理解\n\n403 Forbidden  //服务器收到请求，但是拒绝提供服务\n\n404 Not Found  //请求资源不存在，输入了错误的URL\n\n500 Internal Server Error //服务器发生不可预期的错误\n\n503 Server Unavailable  //服务器当前不能处理客户端的请求，一段时间后可能恢复正常\n\n七、JS高级\n1、JQuery一个对象可以同时绑定多个事件，这是如何实现的？\njQuery可以给一个对象同时绑定多个事件，低层实现方式是使用addEventListner或attachEvent兼容不同的浏览器实现事件的绑定，这样可以给同一个对象注册多个事件。\n\n2、知道什么是webkit么? 知道怎么用浏览器的各种工具来调试和debug代码么?\nWebkit是浏览器引擎，包括html渲染和js解析功能，手机浏览器的主流内核，与之相对应的引擎有Gecko（Mozilla Firefox 等使用）和Trident（也称MSHTML，IE 使用）。\n\n对于浏览器的调试工具要熟练使用，主要是页面结构分析，后台请求信息查看，js调试工具使用，熟练使用这些工具可以快速提高解决问题的效率\n\n3、如何测试前端代码? 知道BDD, TDD, Unit Test么? 知道怎么测试你的前端工程么(mocha, sinon, jasmin, qUnit..)?\n了解BDD行为驱动开发与TDD测试驱动开发已经单元测试相关概念，\n\n4、 前端templating(Mustache, underscore, handlebars)是干嘛的, 怎么用?\n\nWeb 模板引擎是为了使用户界面与业务数据（内容）分离而产生的，\n\nMustache 是一个 logic-less （轻逻辑）模板解析引擎，它的优势在于可以应用在 Javascript、PHP、Python、Perl 等多种编程语言中。\n\nUnderscore封装了常用的JavaScript对象操作方法，用于提高开发效率。\n\nHandlebars 是 JavaScript 一个语义模板库，通过对view和data的分离来快速构建Web模板。\n\n5、简述一下 Handlebars 的基本用法？\n没有用过的话说出它是干什么的即可\n\n6、简述一下 Handlerbars 的对模板的基本处理流程， 如何编译的？如何缓存的？\n学习技术不仅要会用，还有熟悉它的实现机制，这样在开发中遇到问题时才能更好的解决\n\n7、用js实现千位分隔符?\n原生js的熟练度，实践经验，实现思路\n\n8、检测浏览器版本版本有哪些方式？\nIE与标准浏览器判断，IE不同版本的判断，userAgent  var ie = /*@cc_on !@*/false;\n\n9、我们给一个dom同时绑定两个点击事件，一个用捕获，一个用冒泡，你来说下会执行几次事件，然后会先执行冒泡还是捕获\n对两种事件模型的理解\n\n10、实现一个函数clone，可以对JavaScript中的5种主要的数据类型（包括Number、String、Object、Array、Boolean）进行值复制\n考察点1：对于基本数据类型和引用数据类型在内存中存放的是值还是指针这一区别是否清楚\n考察点2：是否知道如何判断一个变量是什么类型的\n考察点3：递归算法的设计\n\n\n// 方法一：\n\nObject.prototype.clone = function(){\n\n   var o = this.constructor === Array ? [] : {};\n\n   for(var e in this){\n\n    o[e] = typeof this[e] === \"object\" ? this[e].clone() : this[e];\n\n   }\n\n   return o;\n\n}\n\n//方法二：\n\n  /**\n\n     * 克隆一个对象\n\n     * @param Obj\n\n     * @returns\n\n     */\n\n    function clone(Obj) {  \n\n        var buf;  \n\n        if (Obj instanceof Array) {  \n\n            buf = [];//创建一个空的数组\n\n            var i = Obj.length;  \n\n            while (i--) {  \n\n                buf[i] = clone(Obj[i]);  \n\n            }  \n\n            return buf;   \n\n        }else if (Obj instanceof Object){  \n\n            buf = {};//创建一个空对象\n\n            for (var k in Obj) { //为这个对象添加新的属性\n\n                buf[k] = clone(Obj[k]);  \n\n            }  \n\n            return buf;  \n\n        }else{ //普通变量直接赋值\n\n            return Obj;  \n\n        }  \n\n    }\n\n11、如何消除一个数组里面重复的元素？\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar arr=[1,2,3,3,4,4,5,5,6,1,9,3,25,4];\n\n        function deRepeat(){\n\n            var newArr=[];\n\n            var obj={};\n\n            var index=0;\n\n            var l=arr.length;\n\n            for(var i=0;i<l;i++){\n\n                if(obj[arr[i]]==undefined)\n\n                  {\n\n                    obj[arr[i]]=1;\n\n                    newArr[index++]=arr[i];\n\n                  }\n\n                else if(obj[arr[i]]==1)\n\n                  continue;\n\n            }\n\n            return newArr;\n\n        }\n\n        var newArr2=deRepeat(arr);\n\n        alert(newArr2); //输出1,2,3,4,5,6,9,25\n\n12、小贤是一条可爱的小狗(Dog)，它的叫声很好听(wow)，每次看到主人的时候就会乖乖叫一声(yelp)。从这段描述可以得到以下对象：\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction Dog() {\n\n      this.wow = function() {\n\n               alert(’Wow’);\n\n      }\n\n      this.yelp = function() {\n\n              this.wow();\n\n      }\n\n}\n\n小芒和小贤一样，原来也是一条可爱的小狗，可是突然有一天疯了(MadDog)，一看到人就会每隔半秒叫一声(wow)地不停叫唤(yelp)。请根据描述，按示例的形式用代码来实。（继承，原型，setInterval）\n\n```\nfunction MadDog() {\n\n    this.yelp = function() {\n\n          var self = this;         \n\n          setInterval(function() {\n\n                self.wow();     \n\n          }, 500);\n\n      }\n\n}\n\nMadDog.prototype = new Dog();        \n\n//for test\n\nvar dog = new Dog();\n\ndog.yelp();\n\nvar madDog = new MadDog();\n\nmadDog.yelp();\n```\n13、下面这个ul，如何点击每一列的时候alert其index?（闭包）\n\n<ul id=”test”>\n\n<li>这是第一条</li>\n\n<li>这是第二条</li>\n\n<li>这是第三条</li>\n\n</ul>\n\n\n\n// 方法一：\n```\nvar lis=document.getElementById('2223').getElementsByTagName('li');\n\nfor(var i=0;i<3;i++)\n\n{\n\n    lis[i].index=i;\n\n    lis[i].onclick=function(){\n\n        alert(this.index);\n\n    };\n\n}\n```\n//方法二：\n\nvar lis=document.getElementById('2223').getElementsByTagName('li');\n\nfor(var i=0;i<3;i++){\n\n    lis[i].index=i;\n\n    lis[i].onclick=(function(a){\n\n        return function() {\n\n            alert(a);\n\n        }\n\n    })(i);\n\n}\n\n14、编写一个JavaScript函数，输入指定类型的选择器(仅需支持id，class，tagName三种简单CSS选择器，无需兼容组合选择器)可以返回匹配的DOM节点，需考虑浏览器兼容性和性能。\n/*** @param selector {String} 传入的CSS选择器。* @return {Array}*/\n\n\n\nvar query = function(selector) {\n\nvar reg = /^(#)?(\\.)?(\\w+)$/img;\n\nvar regResult = reg.exec(selector);\n\nvar result = [];\n\n//如果是id选择器\n\nif(regResult[1]) {\n\nif(regResult[3]) {\n\nif(typeof document.querySelector === \"function\") {\n\nresult.push(document.querySelector(regResult[3]));\n\n    }else {\n\n      result.push(document.getElementById(regResult[3]));\n\n    }\n\n  }\n\n  }\n\n  //如果是class选择器\n\n  else if(regResult[2]) {\n\n   if(regResult[3]) {\n\n      if(typeof document.getElementsByClassName === 'function') {\n\n        var doms = document.getElementsByClassName(regResult[3]);\n\n        if(doms) {\n\n          result = converToArray(doms);\n\n        }\n\n      }\n\n     //如果不支持getElementsByClassName函数\n\n     else {\n\n      var allDoms = document.getElementsByTagName(\"*\") ;\n\n       for(var i = 0, len = allDoms.length; i < len; i++) {\n\n         if(allDoms[i].className.search(new RegExp(regResult[2])) > -1) {\n\n           result.push(allDoms[i]);\n\n        }\n\n       }\n\n    }\n\n }\n\n}\n\n //如果是标签选择器\n\n else if(regResult[3]) {\n\n   var doms = document.getElementsByTagName(regResult[3].toLowerCase());\n\n   if(doms) {\n\n     result = converToArray(doms);\n\n   }\n\n }\n\n return result;\n\n }\n\n function converToArray(nodes){\n\n    var array = null;        \n\n    try{       \n\n     array = Array.prototype.slice.call(nodes,0);//针对非IE浏览器        \n\n   }catch(ex){\n\n    array = new Array();        \n\n   for( var i = 0 ,len = nodes.length; i < len ; i++ ) {\n\n     array.push(nodes[i])        \n\n   }\n\n  }     \n\n  return array;\n\n}\n\n15、请评价以下代码并给出改进意见。\n\n\nif(window.addEventListener){\n\n    var addListener = function(el,type,listener,useCapture){\n\n        el.addEventListener(type,listener,useCapture);\n\n  };\n\n}\n\nelse if(document.all){\n\n    addListener = function(el,type,listener){\n\n        el.attachEvent(\"on\"+type,function(){\n\n          listener.apply(el);\n\n      });\n\n   }\n\n}\n\n不应该在if和else语句中声明addListener函数，应该先声明；\n不需要使用window.addEventListener或document.all来进行检测浏览器，应该使用能力检测；\n由于attachEvent在IE中有this指向问题，所以调用它时需要处理一下\n改进如下：\n\nfunction addEvent(elem, type, handler){\n\n　　if(elem.addEventListener){\n\n　　　　elem.addEventListener(type, handler, false);\n\n　　}else if(elem.attachEvent){\n\n　　　　elem['temp' + type + handler] = handler;\n\n　　　　elem[type + handler] = function(){\n\n　　　　elem['temp' + type + handler].apply(elem);\n\n　　};\n\n　　elem.attachEvent('on' + type, elem[type + handler]);　\n\n  }else{\n\n　　elem['on' + type] = handler;\n\n　　}\n\n}\n\n16、给String对象添加一个方法，传入一个string类型的参数，然后将string的每个字符间价格空格返回，例如：\naddSpace(“hello world”) // -> ‘h e l l o  w o r l d’\n\n\n\n\n\n\n\nString.prototype.spacify = function(){\n\n      return this.split('').join(' ');\n\n    };\n\n接着上述问题答案提问，1）直接在对象的原型上添加方法是否安全？尤其是在Object对象上。(这个我没能答出？希望知道的说一下。)　2）函数声明与函数表达式的区别？\n\n答案：在js中，解析器在向执行环境中加载数据时，对函数声明和函数表达式并非是一视同仁的，解析器会率先读取函数声明，并使其在执行任何代码之前可用（可以访问），至于函数表达式，则必须等到解析器执行到它所在的代码行，才会真正被解析执行。\n\n17、定义一个log方法，让它可以代理console.log的方法。\n可行的方法一：\n\nfunction log(msg)　{\n\n    console.log(msg);\n\n}\n\nlog(\"hello world!\") // hello world!\n\n如果要传入多个参数呢？显然上面的方法不能满足要求，所以更好的方法是：\n\nfunction log(){\n\n    console.log.apply(console, arguments);\n\n};\n\n到此，追问apply和call方法的异同。\n\n对于apply和call两者在作用上是相同的，即是调用一个对象的一个方法，以另一个对象替换当前对象。将一个函数的对象上下文从初始的上下文改变为由 thisObj 指定的新对象。\n\n但两者在参数上有区别的。对于第一个参数意义都一样，但对第二个参数： apply传入的是一个参数数组，也就是将多个参数组合成为一个数组传入，而call则作为call的参数传入（从第二个参数开始）。 如 func.call(func1,var1,var2,var3)对应的apply写法为：func.apply(func1,[var1,var2,var3]) 。\n\n18、在Javascript中什么是伪数组？如何将伪数组转化为标准数组？\n伪数组（类数组）：无法直接调用数组方法或期望length属性有什么特殊的行为，但仍可以对真正数组遍历方法来遍历它们。典型的是函数的argument参数，还有像调用getElementsByTagName,document.childNodes之类的,它们都返回NodeList对象都属于伪数组。可以使用Array.prototype.slice.call(fakeArray)将数组转化为真正的Array对象。\n\n假设接第八题题干，我们要给每个log方法添加一个”(app)”前缀，比如’hello world!’ ->’(app)hello world!’。方法如下：\n\nfunction log(){\n\n      var args = Array.prototype.slice.call(arguments);  //为了使用unshift数组方法，将argument转化为真正的数组\n\n      args.unshift('(app)');\n\n      console.log.apply(console, args);\n\n    };\n\n19、对作用域上下文和this的理解，看下列代码：\nvar User = {\n\n  count: 1,\n\n  getCount: function() {\n\n    return this.count;\n\n  }\n\n};\n\nconsole.log(User.getCount());  // what?\n\nvar func = User.getCount;\n\nconsole.log(func());  // what?\n\n问两处console输出什么？为什么？\n\n答案是1和undefined。\n\nfunc是在winodw的上下文中被执行的，所以会访问不到count属性。\n\n继续追问，那么如何确保Uesr总是能访问到func的上下文，即正确返回1。正确的方法是使用Function.prototype.bind。兼容各个浏览器完整代码如下：\n\nFunction.prototype.bind = Function.prototype.bind || function(context){\n\n   var self = this;\n\n   return function(){\n\n      return self.apply(context, arguments);\n\n   };\n\n}\n\nvar func = User.getCount.bind(User);\n\nconsole.log(func());\n\n20、原生JS的window.onload与Jquery的$(document).ready(function(){})有什么不同？如何用原生JS实现Jq的ready方法？\nwindow.onload()方法是必须等到页面内包括图片的所有元素加载完毕后才能执行。\n\n$(document).ready()是DOM结构绘制完毕后就执行，不必等到加载完毕。\n\n/*\n\n * 传递函数给whenReady()\n\n * 当文档解析完毕且为操作准备就绪时，函数作为document的方法调用\n```\nvar whenReady = (function() {               //这个函数返回whenReady()函数\n\n    var funcs = [];             //当获得事件时，要运行的函数\n\n    var ready = false;          //当触发事件处理程序时,切换为true\n\n    //当文档就绪时,调用事件处理程序\n\n    function handler(e) {\n\n        if(ready) return;       //确保事件处理程序只完整运行一次\n\n        //如果发生onreadystatechange事件，但其状态不是complete的话,那么文档尚未准备好\n\n        if(e.type === 'onreadystatechange' && document.readyState !== 'complete') {\n\n            return;\n\n        }\n\n        //运行所有注册函数\n\n        //注意每次都要计算funcs.length\n\n        //以防这些函数的调用可能会导致注册更多的函数\n\n        for(var i=0; i<funcs.length; i++) {\n\n            funcs[i].call(document);\n\n        }\n\n        //事件处理函数完整执行,切换ready状态, 并移除所有函数\n\n        ready = true;\n\n        funcs = null;\n\n    }\n\n    //为接收到的任何事件注册处理程序\n\n    if(document.addEventListener) {\n\n        document.addEventListener('DOMContentLoaded', handler, false);\n\n        document.addEventListener('readystatechange', handler, false);            //IE9+\n\n        window.addEventListener('load', handler, false);\n\n    }else if(document.attachEvent) {\n\n        document.attachEvent('onreadystatechange', handler);\n\n        window.attachEvent('onload', handler);\n\n    }\n\n    //返回whenReady()函数\n\n    return function whenReady(fn) {\n\n        if(ready) { fn.call(document); }\n\n        else { funcs.push(fn); }\n\n    }\n\n})();\n```\n如果上述代码十分难懂，下面这个简化版：\n```\nfunction ready(fn){\n\n    if(document.addEventListener) {//标准浏览器\n\n        document.addEventListener('DOMContentLoaded', function() {\n\n            //注销事件, 避免反复触发\n\n            document.removeEventListener('DOMContentLoaded',arguments.callee, false);\n\n            fn();//执行函数\n\n        }, false);\n\n    }else if(document.attachEvent) {//IE\n\n        document.attachEvent('onreadystatechange', function() {\n\n            if(document.readyState == 'complete') {\n\n                document.detachEvent('onreadystatechange', arguments.callee);\n\n                fn();//函数执行\n\n            }\n\n        });\n\n    }\n\n};\n```\n21、（设计题）想实现一个对页面某个节点的拖曳？如何做？（使用原生JS）\n回答出概念即可，下面是几个要点\n\n1. 给需要拖拽的节点绑定mousedown, mousemove, mouseup事件\n\n2. mousedown事件触发后，开始拖拽\n\n3. mousemove时，需要通过event.clientX和clientY获取拖拽位置，并实时更新位置\n\n4. mouseup时，拖拽结束\n\n5. 需要注意浏览器边界的情况\n\n22、请实现如下功能\n\n     function setcookie(name,value,days){  //给cookie增加一个时间变量\n\n    　　var exp = new Date();\n\n    　　exp.setTime(exp.getTime() + days*24*60*60*1000); //设置过期时间为days天\n\n    　　document.cookie = name + \"=\"+ escape (value) + \";expires=\" + exp.toGMTString();\n\n    }\n\n    function getCookie(name){\n\n    　　var result = \"\";\n\n    　　var myCookie = \"\"+document.cookie+\";\";\n\n    　　var searchName = \"+name+\"=\";\n\n    　　var startOfCookie = myCookie.indexOf(searchName);\n\n    　　var endOfCookie;\n\n    　　if(satrtOfCookie != -1){\n\n    　　　　startOfcookie += searchName.length;\n\n    　　　　endOfCookie = myCookie.indexOf(\";\",startOfCookie);\n\n    　　　　result = (myCookie.substring(startOfCookie,endOfCookie));\n\n    　　}\n\n    　　return result;\n\n    }\n\n    (function(){\n\n    　　var oTips = document.getElementById('tips');//假设tips的id为tips\n\n    　　var page = {\n\n    　　check: function(){//检查tips的cookie是否存在并且允许显示\n\n    　　　　var tips = getCookie('tips');\n\n    　　　　if(!tips || tips == 'show') return true;//tips的cookie不存在\n\n    　　　　if(tips == \"never_show_again\") return false;\n\n    　　},\n\n    　　hideTip: function(bNever){\n\n    　　　　if(bNever) setcookie('tips', 'never_show_again', 365);\n\n    　　　　oTips.style.display = \"none\";//隐藏\n\n    　　},\n\n    　　showTip: function(){\n\n    　　oTips.style.display = \"inline\";//显示，假设tips为行级元素\n\n    　　},\n\n    　　init: function(){\n\n    　　　　var _this = this;\n\n    　　　　if(this.check()){\n\n    　　　　_this.showTip();\n\n    　　　　setcookie('tips', 'show', 1);\n\n    　　}\n\n    　　oTips.onclick = function(){\n\n    　　　　_this.hideTip(true);\n\n    　　};\n\n    　　}\n\n    　　};\n\n      page.init();\n\n    })();\n```\n23、说出以下函数的作用是？空白区域应该填写什么？\n```\n//define\n\n(function(window){\n\n    function fn(str){\n\n        this.str=str;\n\n    }\n\n\n\n    fn.prototype.format = function(){\n\n        var arg = ______;\n\n        return this.str.replace(_____,function(a,b){\n\n             return arg[b]||\"\";\n\n      });\n\n    }\n\n    window.fn = fn;\n\n})(window);\n\n\n\n//use\n\n(function(){\n\n    var t = new fn('<p><a href=\"{0}\">{1}</a><span>{2}</span></p>');\n\n    console.log(t.format('http://www.alibaba.com','Alibaba','Welcome'));\n\n})();\n```\n答案：访函数的作用是使用format函数将函数的参数替换掉{0}这样的内容，返回一个格式化后的结果：\n\n第一个空是：arguments\n\n第二个空是：/\\{(\\d+)\\}/ig\n\n24、Javascript作用链域?\n理解变量和函数的访问范围和生命周期，全局作用域与局部作用域的区别，JavaScript中没有块作用域，函数的嵌套形成不同层次的作用域，嵌套的层次形成链式形式，通过作用域链查找属性的规则需要深入理解。\n\n25、谈谈This对象的理解。\n理解不同形式的函数调用方式下的this指向，理解事件函数、定时函数中的this指向，函数的调用形式决定了this的指向。\n\n26、eval是做什么的？\n它的功能是把对应的字符串解析成JS代码并运行；应该避免使用eval，不安全，非常耗性能（2个步骤，一次解析成js语句，一次执行）\n\n\n\n27、关于事件，IE与火狐的事件机制有什么区别？ 如何阻止冒泡？\n[1].在IE中,事件对象是作为一个全局变量来保存和维护的.所有的浏览器事件,不管是用户触发的，还是其他事件,都会更新window.event对象.所以在代码中，只要调用window.event就可以获取事件对象， 再event.srcElement就可以取得触发事件的元素进行进一步处理.\n\n[2].在FireFox中，事件对象却不是全局对象，一般情况下，是现场发生，现场使用，FireFox把事件对象自动传给事件处理程序.\n\n关于事件的兼容性处理要熟练掌握，事件对象具体哪些属性存在兼容性问题，IE与标准事件模型事件冒泡与事件捕获的支持要理解\n\n28、什么是闭包（closure），为什么要用它？\n简单的理解是函数的嵌套形成闭包，闭包包括函数本身已经它的外部作用域\n\n使用闭包可以形成独立的空间，延长变量的生命周期，报存中间状态值\n\n29、javascript 代码中的\"use strict\";是什么意思 ? 使用它区别是什么？\n意思是使用严格模式，使用严格模式，一些不规范的语法将不再支持\n\n30、如何判断一个对象是否属于某个类？\nInstanceof   constructor\n\n31、new操作符具体干了什么呢?\n1、创建一个空对象，并且 this 变量引用该对象，同时还继承了该函数的原型。\n\n  2、属性和方法被加入到 this 引用的对象中。\n\n  3、新创建的对象由 this 所引用，并且最后隐式的返回 this 。\n\n32、用原生JavaScript的实现过什么功能吗？\n主要考察原生js的实践经验\n\n33、Javascript中，有一个函数，执行时对象查找时，永远不会去查找原型，这个函数是？\nHasOwnProperty\n\n34、对JSON的了解？\n轻量级数据交互格式，可以形成复杂的嵌套格式，解析非常方便\n\n35、js延迟加载的方式有哪些？\n    `方案一：<script>标签的async=\"async\"属性（详细参见：script标签的async属性）\n\n    方案二：<script>标签的defer=\"defer\"属性\n\n    方案三：动态创建<script>标签\n\n    方案四：AJAX eval（使用AJAX得到脚本内容，然后通过eval_r(xmlhttp.responseText)来运行脚本）\n\n    方案五：iframe方式`\n\n36、模块化开发怎么做？\n理解模块化开发模式：浏览器端requirejs，seajs；服务器端nodejs；ES6模块化；fis、webpack等前端整体模块化解决方案；grunt、gulp等前端工作流的使用\n\n37、AMD（Modules/Asynchronous-Definition）、CMD（Common Module Definition）规范区别？\n理解这两种规范的差异，主要通过requirejs与seajs的对比，理解模块的定义与引用方式的差异以及这两种规范的设计原则\n\n38、requireJS的核心原理是什么？（如何动态加载的？如何避免多次加载的？如何 缓存的？）\n核心是js的加载模块，通过正则匹配模块以及模块的依赖关系，保证文件加载的先后顺序，根据文件的路径对加载过的文件做了缓存\n\n39、让你自己设计实现一个requireJS，你会怎么做？\n核心是实现js的加载模块，维护js的依赖关系，控制好文件加载的先后顺序\n\n40、谈一谈你对ECMAScript6的了解？\nES6新的语法糖，类，模块化等新特性\n\n41、ECMAScript6 怎么写class么，为什么会出现class这种东西?\n```\nclass Point {\n\n  constructor(x, y) {\n\n    this.x = x;\n\n    this.y = y;\n\n  }\n\n  toString() {\n\n     return '('+this.x+', '+this.y+')';\n\n  }\n\n}\n```\n42、异步加载的方式有哪些？\n方案一：<script>标签的async=\"async\"属性（详细参见：script标签的async属性）\n\n方案二：<script>标签的defer=\"defer\"属性\n\n方案三：动态创建<script>标签\n\n方案四：AJAX eval（使用AJAX得到脚本内容，然后通过eval_r(xmlhttp.responseText)来运行脚本）\n\n方案五：iframe方式\n\n43、documen.write和 innerHTML的区别?\ndocument.write是重写整个document, 写入内容是字符串的html\n\ninnerHTML是HTMLElement的属性，是一个元素的内部html内容\n\n44、DOM操作——怎样添加、移除、移动、复制、创建和查找节点?\n（1）创建新节点\n\n      createDocumentFragment()    //创建一个DOM片段\n\n      createElement_x()   //创建一个具体的元素\n\n      createTextNode()   //创建一个文本节点\n\n（2）添加、移除、替换、插入\n\n      appendChild()\n\n      removeChild()\n\n      replaceChild()\n\n      insertBefore()\n\n（3）查找\n\n      getElementsByTagName()    //通过标签名称\n\n      getElementsByName()    //通过元素的Name属性的值\n\n      getElementById()    //通过元素Id，唯一性\n\n45、call() 和 .apply() 的含义和区别？\napply的参数是数组形式，call的参数是单个的值，除此之外在使用上没有差别，重点理解这两个函数调用的this改变\n\n46、数组和对象有哪些原生方法，列举一下？\n```\nArray.concat( ) 连接数组\n\nArray.join( ) 将数组元素连接起来以构建一个字符串\n\nArray.length 数组的大小\n\nArray.pop( ) 删除并返回数组的最后一个元素\n\nArray.push( ) 给数组添加元素\n\nArray.reverse( ) 颠倒数组中元素的顺序\n\nArray.shift( ) 将元素移出数组\n\nArray.slice( ) 返回数组的一部分\n\nArray.sort( ) 对数组元素进行排序\n\nArray.splice( ) 插入、删除或替换数组的元素\n\nArray.toLocaleString( ) 把数组转换成局部字符串\n\nArray.toString( ) 将数组转换成一个字符串\n\nArray.unshift( ) 在数组头部插入一个元素\n\n\n\nObject.hasOwnProperty( ) 检查属性是否被继承\n\nObject.isPrototypeOf( ) 一个对象是否是另一个对象的原型\n\nObject.propertyIsEnumerable( ) 是否可以通过for/in循环看到属性\n\nObject.toLocaleString( ) 返回对象的本地字符串表示\n\nObject.toString( ) 定义一个对象的字符串表示\n\nObject.valueOf( ) 指定对象的原始值\n```\n47、JS 怎么实现一个类。怎么实例化这个类\n严格来讲js中并没有类的概念，不过js中的函数可以作为构造函数来使用，通过new来实例化，其实函数本身也是一个对象。\n\n48、JavaScript中的作用域与变量声明提升？\n理解JavaScript的预解析机制，js的运行主要分两个阶段：js的预解析和运行，预解析阶段所有的变量声明和函数定义都会提前，但是变量的赋值不会提前\n\n49、如何编写高性能的Javascript？\n使用 DocumentFragment 优化多次 append\n\n通过模板元素 clone ，替代 createElement\n\n使用一次 innerHTML 赋值代替构建 dom 元素\n\n使用 firstChild 和 nextSibling 代替 childNodes 遍历 dom 元素\n\n使用 Array 做为 StringBuffer ，代替字符串拼接的操作\n\n将循环控制量保存到局部变量\n\n顺序无关的遍历时，用 while 替代 for\n\n将条件分支，按可能性顺序从高到低排列\n\n在同一条件子的多（ >2 ）条件分支时，使用 switch 优于 if\n\n使用三目运算符替代条件分支\n\n需要不断执行的时候，优先考虑使用 setInterval\n\n50、那些操作会造成内存泄漏？\n闭包，循环\n\n51、javascript对象的几种创建方式？\n    1. 工厂模式\n\n    2. 构造函数模式\n\n    3. 原型模式\n\n    4. 混合构造函数和原型模式\n\n    5. 动态原型模式\n\n    6. 寄生构造函数模式\n\n    7. 稳妥构造函数模式\n\n52、javascript继承的 6 种方法？\n    1. 原型链继承\n\n    2. 借用构造函数继承\n\n    3. 组合继承(原型+借用构造)\n\n    4. 原型式继承\n\n    5. 寄生式继承\n\n    6. 寄生组合式继承\n\n53、eval是做什么的？\n    1. 它的功能是把对应的字符串解析成JS代码并运行\n\n    2. 应该避免使用eval，不安全，非常耗性能（2次，一次解析成js语句，一次执行）\n\n54、JavaScript 原型，原型链 ? 有什么特点？\n    1. 原型对象也是普通的对象，是对象一个自带隐式的 __proto__ 属性，原型也有可能有自己的原型，如果一个原型对象的原型不为 null 的话，我们就称之为原型链\n\n    2. 原型链是由一些用来继承和共享属性的对象组成的（有限的）对象链\n\n55、事件、IE与火狐的事件机制有什么区别？ 如何阻止冒泡？\n    1. 我们在网页中的某个操作（有的操作对应多个事件）。例如：当我们点击一个按钮就会产生一个事件。是可以被 JavaScript 侦测到的行为\n\n    2. 事件处理机制：IE是事件冒泡、firefox同时支持两种事件模型，也就是：捕获型事件和冒泡型事件\n\n    3. ev.stopPropagation();\n\n注意旧ie的方法：ev.cancelBubble = true;\n\n56、简述一下Sass、Less，且说明区别？\n他们是动态的样式语言，是CSS预处理器,CSS上的一种抽象层。他们是一种特殊的语法/语言而编译成CSS。\n\n变量符不一样，less是@，而Sass是$;\n\nSass支持条件语句，可以使用if{}else{},for{}循环等等。而Less不支持;\n\nSass是基于Ruby的，是在服务端处理的，而Less是需要引入less.js来处理Less代码输出Css到浏览器\n\n57、关于javascript中apply()和call()方法的区别？\n相同点:两个方法产生的作用是完全一样的\n\n不同点:方法传递的参数不同\n\nObject.call(this,obj1,obj2,obj3)\n\nObject.apply(this,arguments)\n\napply()接收两个参数，一个是函数运行的作用域(this)，另一个是参数数组。\n\ncall()方法第一个参数与apply()方法相同，但传递给函数的参数必须列举出来。\n\n58、简述一下JS中的闭包？\n闭包用的多的两个作用：读取函数内部的变量值；让这些变量值始终保存着(在内存中)。\n\n同时需要注意的是：闭包慎用，不滥用，不乱用，由于函数内部的变量都被保存在内存中，会导致内存消耗大。\n\n59、说说你对this的理解？\n在JavaScript中，this通常指向的是我们正在执行的函数本身，或者是，指向该函数所属的对象。\n\n全局的this → 指向的是Window\n\n函数中的this → 指向的是函数所在的对象\n\n对象中的this → 指向其本身\n\n60、分别阐述split(),slice(),splice(),join()？\njoin()用于把数组中的所有元素拼接起来放入一个字符串。所带的参数为分割字符串的分隔符，默认是以逗号分开。归属于Array\n\nsplit()即把字符串分离开，以数组方式存储。归属于Stringstring\n\nslice() 方法可从已有的数组中返回选定的元素。该方法并不会修改数组，而是返回一个子数组。如果想删除数组中的一段元素，应该使用方法 Array.splice()\n\nsplice() 方法向/从数组中添加/删除项目，然后返回被删除的项目。返回的是含有被删除的元素的数组。\n\n61、事件委托是什么？\n让利用事件冒泡的原理，让自己的所触发的事件，让他的父元素代替执行！\n\n62、如何阻止事件冒泡和默认事件？\n阻止浏览器的默认行为\n\nwindow.event?window.event.returnValue=false:e.preventDefault();\n\n停止事件冒泡\n\nwindow.event?window.event.cancelBubble=true:e.stopPropagation();\n\n原生JavaScript中，return false;只阻止默认行为，不阻止冒泡，jQuery中的return false;既阻止默认行为，又阻止冒泡\n\n63、添加 删除 替换 插入到某个接点的方法？\nobj.appendChidl()\n\nobj.removeChild()\n\nobj.replaceChild()\n\nobj.innersetBefore()\n\n64、你用过require.js吗？它有什么特性？\n（1）实现js文件的异步加载，避免网页失去响应；\n\n（2）管理模块之间的依赖性，便于代码的编写和维护。\n\n65、谈一下JS中的递归函数，并且用递归简单实现阶乘？\n递归即是程序在执行过程中不断调用自身的编程技巧，当然也必须要有一个明确的结束条件，不然就会陷入死循环。\n\n66、请用正则表达式写一个简单的邮箱验证。\n/^[a-zA-Z0-9_-]+@[a-zA-Z0-9_-]+(\\.[a-zA-Z0-9_-]+)+$/;\n\n67、简述一下你对web性能优化的方案？\n    1、尽量减少 HTTP 请求\n\n2、使用浏览器缓存\n\n3、使用压缩组件\n\n4、图片、JS的预载入\n\n5、将脚本放在底部\n\n6、将样式文件放在页面顶部\n\n7、使用外部的JS和CSS\n\n8、精简代码\n\n68、在JS中有哪些会被隐式转换为false\nUndefined、null、关键字false、NaN、零、空字符串\n\n69、定时器setInterval有一个有名函数fn1，setInterval（fn1,500）与setInterval（fn1(),500）有什么区别？\n第一个是重复执行每500毫秒执行一次，后面一个只执行一次。\n\n70、外部JS文件出现中文字符，会出现什么问题，怎么解决？\n会出现乱码，加charset=”GB2312”;\n\n71、谈谈浏览器的内核，并且说一下什么是内核？\nTrident (['traɪd(ə)nt])--IE，Gecko (['gekəʊ])--Firefox, Presto (['prestəʊ])--opera,webkit—谷歌和Safari\n\n浏览器内核又可以分成两部分：渲染引擎和 JS 引擎。它负责取得网页的内容（HTML、XML、图像等等）、整理讯息（例如加入 CSS 等），以及计算网页的显示方式，然后会输出至显示器或打印机。JS 引擎则是解析 Javascript 语言，执行 javascript 语言来实现网页的动态效果。\n\n72、JavaScript原型，原型链 ? 有什么特点？\n*  原型对象也是普通的对象，是对象一个自带隐式的 `__proto__` 属性，原型也有可能有自己的原型，如果一个原型对象的原型不为null的话，我们就称之为原型链。\n\n*  原型链是由一些用来继承和共享属性的对象组成的（有限的）对象链。\n\n* JavaScript的数据对象有那些属性值？\n\n　　writable：这个属性的值是否可以改。\n\n　　configurable：这个属性的配置是否可以删除，修改。\n\n　　enumerable：这个属性是否能在for…in循环中遍历出来或在Object.keys中列举出来。\n\n　　value：属性值。\n\n*  当我们需要一个属性的时，Javascript引擎会先看当前对象中是否有这个属性， 如果没有的话，就会查找他的Prototype对象是否有这个属性。\n```\n function clone(proto) {\n\n　　function Dummy() { }\n\n　　Dummy.prototype = proto;\n\n　　Dummy.prototype.constructor = Dummy;\n\n　　return new Dummy(); //等价于Object.create(Person);\n\n }\n\n        function object(old) {\n\n         function F() {};\n\n         F.prototype = old;\n\n         return new F();\n\n        }\n\n    var newObj = object(oldObject);\n```\n73、写一个通用的事件侦听器函数\n```\n// event(事件)工具集，\n\nmarkyun.Event = {\n\n    // 页面加载完成后\n\n    readyEvent : function(fn) {\n\n        if (fn==null) {\n\n            fn=document;\n\n        }\n\n        var oldonload = window.onload;\n\n        if (typeof window.onload != 'function') {\n\n            window.onload = fn;\n\n        } else {\n\n            window.onload = function() {\n\n                oldonload();\n\n                fn();\n\n            };\n\n        }\n\n    },\n\n    // 视能力分别使用dom0||dom2||IE方式 来绑定事件\n\n    // 参数： 操作的元素,事件名称 ,事件处理程序\n\n    addEvent : function(element, type, handler) {\n\n        if (element.addEventListener) {\n\n            //事件类型、需要执行的函数、是否捕捉\n\n            element.addEventListener(type, handler, false);\n\n        } else if (element.attachEvent) {\n\n            element.attachEvent('on' + type, function() {\n\n                handler.call(element);\n\n            });\n\n        } else {\n\n            element['on' + type] = handler;\n\n        }\n\n    },\n\n    // 移除事件\n\n    removeEvent : function(element, type, handler) {\n\n        if (element.removeEnentListener) {\n\n            element.removeEnentListener(type, handler, false);\n\n        } else if (element.datachEvent) {\n\n            element.detachEvent('on' + type, handler);\n\n        } else {\n\n            element['on' + type] = null;\n\n        }\n\n    },\n\n    // 阻止事件 (主要是事件冒泡，因为IE不支持事件捕获)\n\n    stopPropagation : function(ev) {\n\n        if (ev.stopPropagation) {\n\n            ev.stopPropagation();\n\n        } else {\n\n            ev.cancelBubble = true;\n\n        }\n\n    },\n\n    // 取消事件的默认行为\n\n    preventDefault : function(event) {\n\n        if (event.preventDefault) {\n\n            event.preventDefault();\n\n        } else {\n\n            event.returnValue = false;\n\n        }\n\n    },\n\n    // 获取事件目标\n\n    getTarget : function(event) {\n\n        return event.target || event.srcElement;\n\n    },\n\n    // 获取event对象的引用，取到事件的所有信息，确保随时能使用event；\n\n    getEvent : function(e) {\n\n        var ev = e || window.event;\n\n        if (!ev) {\n\n            var c = this.getEvent.caller;\n\n            while (c) {\n\n                ev = c.arguments[0];\n\n                if (ev && Event == ev.constructor) {\n\n                    break;\n\n                }\n\n                c = c.caller;\n\n            }\n\n        }\n\n        return ev;\n\n    }\n\n};\n```\n74、事件、IE与火狐的事件机制有什么区别？ 如何阻止冒泡？\n     1. 我们在网页中的某个操作（有的操作对应多个事件）。例如：当我们点击一个按钮就会产生一个事件。是可以被 JavaScript 侦测到的行为。\n\n     2. 事件处理机制：IE是事件冒泡、火狐是 事件捕获；\n\n     3.  ev.stopPropagation();\n\n75、什么是闭包（closure），为什么要用？\n执行say667()后,say667()闭包内部变量会存在,而闭包内部函数的内部变量不会存在.使得Javascript的垃圾回收机制GC不会收回say667()所占用的资源，因为say667()的内部函数的执行需要依赖say667()中的变量。这是对闭包作用的非常直白的描述.\n\n  function say667() {\n\n    // Local variable that ends up within closure\n\n    var num = 666;\n\n    var sayAlert = function() { alert(num); }\n\n    num++;\n\n    return sayAlert;\n\n}\n\n var sayAlert = say667();\n\n sayAlert()//执行结果应该弹出的667\n\n76、如何判断一个对象是否属于某个类？\n使用instanceof （待完善）\n\nif(a instanceof Person){\n\n    alert('yes');\n\n}\n\n77、new操作符具体干了什么呢?\n  1、创建一个空对象，并且 this 变量引用该对象，同时还继承了该函数的原型。\n\n  2、属性和方法被加入到 this 引用的对象中。\n\n  3、新创建的对象由 this 所引用，并且最后隐式的返回 this 。\n```\n    var obj  = {};\n\n    obj.__proto__ = Base.prototype;\n\n    Base.call(obj);\n```\n78、JSON 的了解\nJSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。它是基于JavaScript的一个子集。数据格式简单, 易于读写, 占用带宽小\n\n{'age':'12', 'name':'back'}\n\n79、js延迟加载的方式有哪些\ndefer和async、动态创建DOM方式（用得最多）、按需异步载入js\n\n80、模块化怎么做？\n立即执行函数,不暴露私有成员\n```\nvar module1 = (function(){\n\n　　　　var _count = 0;\n\n　　　　var m1 = function(){\n\n　　　　　　//...\n\n　　　　};\n\n　　　　var m2 = function(){\n\n　　　　　　//...\n\n　　　　};\n\n　　　　return {\n\n　　　　　　m1 : m1,\n\n　　　　　　m2 : m2\n\n　　　　};\n\n　　})();\n```\n81、异步加载的方式\n  (1) defer，只支持IE\n\n  (2) async：\n\n  (3) 创建script，插入到DOM中，加载完毕后callBack\n\n      documen.write和 innerHTML的区别\n\n      document.write只能重绘整个页面\n\n      innerHTML可以重绘页面的一部分\n\n82、告诉我答案是多少？\n```\n(function(x){\n\n    delete x;\n\n    alert(x);\n\n})(1+5);\n```\n函数参数无法delete删除，delete只能删除通过for in访问的属性。\n\n当然，删除失败也不会报错，所以代码运行会弹出“1”。\n\n83、JS中的call()和apply()方法的区别？\n例子中用 add 来替换 sub，add.call(sub,3,1) == add(3,1) ，所以运行结果为：alert(4);\n\n注意：js 中的函数其实是对象，函数名是对 Function 对象的引用。\n```\nfunction add(a,b){\n\n    alert(a+b);\n\n}\n\nfunction sub(a,b){\n\n    alert(a-b);\n\n}\n\nadd.call(sub,3,1);\n```\n84、Jquery与jQuery UI 有啥区别？\n\njQuery是一个js库，主要提供的功能是选择器，属性修改和事件绑定等等。\n\njQuery UI则是在jQuery的基础上，利用jQuery的扩展性，设计的插件。\n\n提供了一些常用的界面元素，诸如对话框、拖动行为、改变大小行为等等\n\n85、jquery 中如何将数组转化为json字符串，然后再转化回来？\njQuery中没有提供这个功能，所以你需要先编写两个jQuery的扩展：\n```\n    $.fn.stringifyArray = function(array) {\n\n        return JSON.stringify(array)\n\n    }\n\n    $.fn.parseArray = function(array) {\n\n        return JSON.parse(array)\n\n    }\n```\n    然后调用：\n```\n    $(\"\").stringifyArray(array)\n```\n86、JavaScript中的作用域与变量声明提升？\n其他部分\n\n（HTTP、正则、优化、重构、响应式、移动端、团队协作、SEO、UED、职业生涯）\n\n    基于Class的选择性的性能相对于Id选择器开销很大，因为需遍历所有DOM元素。\n\n    频繁操作的DOM，先缓存起来再操作。用Jquery的链式调用更好。  \n\n     比如：var str=$(\"a\").attr(\"href\");\n\n    for (var i = size; i < arr.length; i++) {}\n\n     for 循环每一次循环都查找了数组 (arr) 的.length 属性，在开始循环的时候设置一个变量来存储这个数字，可以让循环跑得更快：\n\n     for (var i = size, length = arr.length; i < length; i++) {}\n\n87、前端开发的优化问题（看雅虎14条性能优化原则）。\n  （1） 减少http请求次数：CSS Sprites, JS、CSS源码压缩、图片大小控制合适；网页Gzip，CDN托管，data缓存 ，图片服务器。\n\n  （2） 前端模板 JS+数据，减少由于HTML标签导致的带宽浪费，前端用变量保存AJAX请求结果，每次操作本地变量，不用请求，减少请求次数\n\n  （3） 用innerHTML代替DOM操作，减少DOM操作次数，优化javascript性能。\n\n  （4） 当需要设置的样式很多时设置className而不是直接操作style。\n\n  （5） 少用全局变量、缓存DOM节点查找的结果。减少IO读取操作。\n\n  （6） 避免使用CSS Expression（css表达式)又称Dynamic properties(动态属性)。\n\n  （7） 图片预加载，将样式表放在顶部，将脚本放在底部  加上时间戳。\n\n  （8） 避免在页面的主体布局中使用table，table要等其中的内容完全下载之后才会显示出来，显示比div+css布局慢。\n\n88、http状态码有那些？分别代表是什么意思？\n    100-199 用于指定客户端应相应的某些动作。\n\n    200-299 用于表示请求成功。\n\n    300-399 用于已经移动的文件并且常被包含在定位头信息中指定新的地址信息。\n\n400-499 用于指出客户端的错误。\n\n400  语义有误，当前请求无法被服务器理解。\n\n401  当前请求需要用户验证\n\n403  服务器已经理解请求，但是拒绝执行它。\n\n500-599 用于支持服务器错误。\n\n503 – 服务不可用\n\n89、一个页面从输入 URL 到页面加载显示完成，这个过程中都发生了什么？（流程说的越详细越好）\n    要熟悉前后端的通信流程，最好把动态网站的背后细节也介绍一遍\n\n八、流行框架\n1、JQuery的源码看过吗？能不能简单概况一下它的实现原理？\n考察学习知识的态度，是否仅仅是停留在使用层面，要知其然知其所以然\n\n2、jQuery.fn的init方法返回的this指的是什么对象？为什么要返回this？\nthis执行init构造函数自身，其实就是jQuery实例对象，返回this是为了实现jQuery的链式操作\n\n3、jquery中如何将数组转化为json字符串，然后再转化回来？\n$.parseJSON('{\"name\":\"John\"}');\n\n4、jQuery 的属性拷贝(extend)的实现原理是什么，如何实现深拷贝？\n递归赋值\n\n5、jquery.extend 与 jquery.fn.extend的区别？\nJquery.extend用来扩展jQuery对象本身；jquery.fn.extend用来扩展jQuery实例\n\n6、谈一下Jquery中的bind(),live(),delegate(),on()的区别？\n7、JQuery一个对象可以同时绑定多个事件，这是如何实现的？\n可以同时绑定多个事件，低层实现原理是使用addEventListner与attachEvent兼容处理做事件注册\n\n10、Jquery与jQuery UI有啥区别？\njQuery是操作dom的框架，jQueryUI是基于jQuery做的一个UI组件库\n\n11、jQuery和Zepto的区别？各自的使用场景？\njQuery主要用于pc端，当然有对应的jQuerymobile用于移动端，zepto比jQuery更加小巧，主要用于移动端\n\n12、针对 jQuery 的优化方法？\n优先使用ID选择器\n\n在class前使用tag(标签名)\n\n给选择器一个上下文\n\n慎用 .live()方法（应该说尽量不要使用）\n\n使用data()方法存储临时变量\n\n13、Zepto的点透问题如何解决？\n点透主要是由于两个div重合，例如：一个div调用show()，一个div调用hide()；这个时候当点击上面的div的时候就会影响到下面的那个div；\n\n解决办法主要有2种：\n\n1.github上有一个叫做fastclick的库，它也能规避移动设备上click事件的延迟响应，`https://github.com/ftlabs/fastclick`\n\n将它用script标签引入页面（该库支持AMD，于是你也可以按照AMD规范，用诸如require.js的模块加载器引入），并且在dom ready时初始化在body上，\n\n2.根据分析，如果不引入其它类库，也不想自己按照上述fastclcik的思路再开发一套东西，需要1.一个优先于下面的“divClickUnder”捕获的事件；2.并且通过这个事件阻止掉默认行为（下面的“divClickUnder”对click事件的捕获，在iOS的safari，click的捕获被认为和滚屏、点击输入框弹起键盘等一样，是一种浏览器默认行为，即可以被event.preventDefault()阻止的行为）。\n\n12、知道各种JS框架(Angular, Backbone, Ember, React, Meteor, Knockout...)么? 能讲出他们各自的优点和缺点么?\n知识面的宽度，流行框架要多多熟悉\n\n13、Underscore 对哪些 JS 原生对象进行了扩展以及提供了哪些好用的函数方法？\nUnderscore的熟悉程度\n\n14、使用过angular吗？angular中的过滤器是干什么用的\n在表达式中转换数据\n```\n    <p>姓名为 {{ lastName | uppercase }}</p>\n```\ncurrency，是什么过滤器——格式化数字为货币格式，单位是$符。\n\n\n九、移动APP开发\n1、移动端最小触控区域是多大？\n移动端的点击事件的有延迟，时间是多久，为什么会有？ 怎么解决这个延时？（click 有 300ms 延迟,为了实现safari的双击事件的设计，浏览器要知道你是不是要双击操作。）\n\n十、NodeJs\n1、对Node的优点和缺点提出了自己的看法：\n（优点）因为Node是基于事件驱动和无阻塞的，所以非常适合处理并发请求，\n\n因此构建在Node上的代理服务器相比其他技术实现（如Ruby）的服务器表现要好得多。\n\n此外，与Node代理服务器交互的客户端代码是由javascript语言编写的，\n\n因此客户端和服务器端都用同一种语言编写，这是非常美妙的事情。\n\n（缺点）Node是一个相对新的开源项目，所以不太稳定，它总是一直在变，\n\n而且缺少足够多的第三方库支持。看起来，就像是Ruby/Rails当年的样子。\n\n2、需求：实现一个页面操作不会整页刷新的网站，并且能在浏览器前进、后退时正确响应。给出你的技术实现方案？\n至少给出自己的思路（url-hash,可以使用已有的一些框架history.js等）\n\n6、Node.js的适用场景？\n1)、实时应用：如在线聊天，实时通知推送等等（如socket.io）\n\n2)、分布式应用：通过高效的并行I/O使用已有的数据\n\n3)、工具类应用：海量的工具，小到前端压缩部署（如grunt），大到桌面图形界面应用程序\n\n4)、游戏类应用：游戏领域对实时和并发有很高的要求（如网易的pomelo框架）\n\n5)、利用稳定接口提升Web渲染能力\n\n6)、前后端编程语言环境统一：前端开发人员可以非常快速地切入到服务器端的开发（如著名的纯Javascript全栈式MEAN架构）\n\n4、(如果会用node)知道route, middleware, cluster, nodemon, pm2, server-side rendering么?\nNodejs相关概念的理解程度\n\n7、解释一下 Backbone 的 MVC 实现方式？\n流行的MVC架构模式\n\n8、什么是“前端路由”?什么时候适合使用“前端路由”? “前端路由”有哪些优点和缺点?\n熟悉前后端通信相关知识\n\n7、对Node的优点和缺点提出了自己的看法？\n优点：\n\n1. 因为Node是基于事件驱动和无阻塞的，所以非常适合处理并发请求，因此构建在Node上的代理服务器相比其他技术实现（如Ruby）的服务器表现要好得多。\n\n2. 与Node代理服务器交互的客户端代码是由javascript语言编写的，因此客户端和服务器端都用同一种语言编写，这是非常美妙的事情。\n\n缺点：\n\n1. Node是一个相对新的开源项目，所以不太稳定，它总是一直在变。\n\n2. 缺少足够多的第三方库支持。看起来，就像是Ruby/Rails当年的样子（第三方库现在已经很丰富了，所以这个缺点可以说不存在了）。\n\n\n\n十一、前端概括性问题\n1、常使用的库有哪些？常用的前端开发工具？开发过什么应用或组件？\n使用率较高的框架有jQuery、YUI、Prototype、Dojo、Ext.js、Mootools等。尤其是jQuery，超过91%。\n\n轻量级框架有Modernizr、underscore.js、backbone.js、Raphael.js等。（理解这些框架的功能、性能、设计原理）\n\n前端开发工具：Sublime Text 、Eclipse、Notepad、Firebug、HttpWatch、Yslow。\n\n开发过的插件：城市选择插件，汽车型号选择插件、幻灯片插件。弹出层。（写过开源程序，加载器，js引擎更好）\n\n9、对BFC规范的理解？\nFormatting Context：指页面中的一个渲染区域，并且拥有一套渲染规则，他决定了其子元素如何定位，以及与其他元素的相互关系和作用。\n\n3、99%的网站都需要被重构是那本书上写的？\n网站重构：应用web标准进行设计（第2版）\n\n4、WEB应用从服务器主动推送Data到客户端有那些方式？\n    html5 websoket\n\n    WebSocket通过Flash\n\n    XHR长时间连接\n\n    XHR Multipart Streaming\n\n    不可见的Iframe\n\n<script>标签的长时间连接(可跨域)\n\n5、加班的看法\n加班就像借钱，原则应当是------救急不救穷\n\n6、平时如何管理你的项目，如何设计突发大规模并发架构？\n先期团队必须确定好全局样式（globe.css），编码模式(utf-8) 等\n\n编写习惯必须一致（例如都是采用继承式的写法，单样式都写成一行）；\n\n标注样式编写人，各模块都及时标注（标注关键样式调用的地方）；\n\n页面进行标注（例如 页面 模块 开始和结束）；\n\nCSS跟HTML 分文件夹并行存放，命名都得统一（例如style.css）\n\nJS 分文件夹存放 命民以该JS 功能为准英文翻译；\n\n图片采用整合的 images.png png8 格式文件使用 尽量整合在一起使用方便将来的管理\n\n7、那些操作会造成内存泄漏？\n内存泄漏指任何对象在您不再拥有或需要它之后仍然存在。\n\n垃圾回收器定期扫描对象，并计算引用了每个对象的其他对象的数量。如果一个对象的引用数量为 0（没有其他对象引用过该对象），或对该对象的惟一引用是循环的，那么该对象的内存即可回收。\n\nsetTimeout 的第一个参数使用字符串而非函数的话，会引发内存泄漏。\n\n闭包、控制台日志、循环（在两个对象彼此引用且彼此保留时，就会产生一个循环）\n\n8、你说你热爱前端，那么应该WEB行业的发展很关注吧？ 说说最近最流行的一些东西吧？\nNode.js、MongoDB、npm、MVVM、MEAN、React、AngularJS\n\n9、你有了解我们公司吗？说说你的认识？\n因为我想去阿里，所以我针对阿里的说\n\n最羡慕就是在双十一购物节，350.19亿元，每分钟支付79万笔。海量数据，居然无一漏单、无一故障。太厉害了。\n\n10、    移动端（比如：Android IOS）怎么做好用户体验?\n融入自己的设计理念，注重用户体验，选择合适的技术\n\n11、    你所知道的页面性能优化方法有那些？\n压缩、合并，减少请求，代码层析优化。。。\n\n12、    除了前端以外还了解什么其它技术么？你最最厉害的技能是什么？\n知识面宽度，最好熟悉一些后台语言，比如php，展现出自己的技术两点\n\n13、AMD（Modules/Asynchronous-Definition）、CMD（Common Module Definition）规范区别？\n14、谈谈你认为怎样做能使项目做的更好？\n考虑问题的深入，不仅仅停留在完成任务上，要精益求精\n\n15、你对前端界面工程师这个职位是怎么样理解的？它的前景会怎么样？\n表现出对前端的认同与兴趣，关注相关技术前沿\n\n16、php中下面哪个函数可以打开一个文件，以对文件进行读和写操作？\nA.fget();B.file_open();C.fopen();D.open_file();\n\n17、php中rmdir可以直接删除文件夹吗？该目录必须是空的，而且要有相应的权限--来自api\nA.任何文件夹都可以删除           B.空文件夹可以删除\n\nC.有权限的任何文件夹都可以删除   D.有权限的空文件夹可以删除\n\n18、phpinset和empty的区别，举例说明\n1、empty函数\n\n用途：检测变量是否为空\n\n判断：如果 var 是非空或非零的值，则 empty() 返回 FALSE。换句话说，\"\"、0、\"0\"、NULL、FALSE、array()、var $var; 以及没有任何属性的对象都将被认为是空的，如果 var 为空，则返回 TRUE。注意：empty() 只检测变量，检测任何非变量的东西都将导致解析错误。换句话说，后边的语句将不会起作用;\n\n2、isset函数\n\n用途：检测变量是否设置\n\n判断：检测变量是否设置，并且不是 NULL。如果已经使用 unset() 释放了一个变量之后，它将不再是 isset()。若使用 isset() 测试一个被设置成 NULL 的变量，将返回 FALSE。同时要注意的是一个NULL 字节（\"\\0\"）并不等同于 PHP 的 NULL 常数。\n\n19、php中`$_SERVER变量`中如何得到当前执行脚本路劲\n\n\n20、写一个php函数，要求两个日期字符串的天数差，如2012-02-05~2012-03-06的日期差数\n21、一个衣柜中放了许多杂乱的衬衫，如果让你去整理一下，使得更容易找到你想要的衣服；你会怎么做？请写出你的做法和思路？\n22、如何优化网页加载速度？\n   1.减少css，js文件数量及大小(减少重复性代码，代码重复利用)，压缩CSS和Js代码\n\n   2.图片的大小\n\n   3.把css样式表放置顶部，把js放置页面底部\n\n   4.减少http请求数\n\n   5.使用外部 Js 和 CSS\n\n23、工作流程，你怎么来实现页面设计图，你认为前端应该如何高质量完成工作?\n熟悉相关设计规范，自己总结的一些经验\n\n24、介绍项目经验、合作开发、独立开发。\n团队协作，个人能力。实践经验\n\n25、开发过程中遇到困难，如何解决。\n考察解决问题的能力\n\n26、对前端界面工程师这个职位是怎么样理解的？它的前景会怎么样？\n    前端是最贴近用户的程序员，比后端、数据库、产品经理、运营、安全都近。\n\n    1、实现界面交互\n\n    2、提升用户体验\n\n    3、有了Node.js，前端可以实现服务端的一些事情\n\n前端是最贴近用户的程序员，前端的能力就是能让产品从 90分进化到 100 分，甚至更好，\n\n参与项目，快速高质量完成实现效果图，精确到1px；\n\n与团队成员，UI设计，产品经理的沟通；\n\n做好的页面结构，页面重构和用户体验；\n\n处理hack，兼容、写出优美的代码格式；\n\n针对服务器的优化、拥抱最新前端技术。\n\n其它相关的加分项：\n\n    1. 都使用和了解过哪些编辑器?都使用和了解过哪些日常工具?\n\n    2. 都知道有哪些浏览器内核?开发过的项目都兼容哪些浏览器?\n\n    3. 瀑布流布局或者流式布局是否有了解\n\n    4. HTML5都有哪些新的API?\n\n    5. 都用过什么代码调试工具?\n\n    6. 是否有接触过或者了解过重构。\n\n7.你遇到过比较难的技术问题是？你是如何解决的？\n","source":"_posts/前端知识点3.md","raw":"---\ntitle: 前端知识点3\ntags:\n  - '前端'\ncategories:\n  - '前端'\n  - '知识点'\ndate: 2017-06-07 12:17:02\n---\n<div>\n一、HTML和CSS\n1、你做的页面在哪些流览器测试过？这些浏览器的内核分别是什么?\nIE: trident内核\n\nFirefox：gecko内核\n\nSafari:webkit内核\n\nOpera:以前是presto内核，Opera现已改用Google Chrome的Blink内核\n\nChrome:Blink(基于webkit，Google与Opera Software共同开发)\n\n2、每个HTML文件里开头都有个很重要的东西，Doctype，知道这是干什么的吗？\n<!DOCTYPE> 声明位于文档中的最前面的位置，处于 <html> 标签之前。此标签可告知浏览器文档使用哪种 HTML 或 XHTML 规范。（重点：告诉浏览器按照何种规范解析页面）\n\n<!--more-->\n\n3、Quirks模式是什么？它和Standards模式有什么区别\n从IE6开始，引入了Standards模式，标准模式中，浏览器尝试给符合标准的文档在规范上的正确处理达到在指定浏览器中的程度。\n\n在IE6之前CSS还不够成熟，所以IE5等之前的浏览器对CSS的支持很差， IE6将对CSS提供更好的支持，然而这时的问题就来了，因为有很多页面是基于旧的布局方式写的，而如果IE6 支持CSS则将令这些页面显示不正常，如何在即保证不破坏现有页面，又提供新的渲染机制呢？\n\n在写程序时我们也会经常遇到这样的问题，如何保证原来的接口不变，又提供更强大的功能，尤其是新功能不兼容旧功能时。遇到这种问题时的一个常见做法是增加参数和分支，即当某个参数为真时，我们就使用新功能，而如果这个参数 不为真时，就使用旧功能，这样就能不破坏原有的程序，又提供新功能。IE6也是类似这样做的，它将DTD当成了这个“参数”，因为以前的页面大家都不会去写DTD，所以IE6就假定 如果写了DTD，就意味着这个页面将采用对CSS支持更好的布局，而如果没有，则采用兼容之前的布局方式。这就是Quirks模式（怪癖模式，诡异模式，怪异模式）。\n\n区别：\n\n总体会有布局、样式解析和脚本执行三个方面的区别。\n\n盒模型：在W3C标准中，如果设置一个元素的宽度和高度，指的是元素内容的宽度和高度，而在Quirks 模式下，IE的宽度和高度还包含了padding和border。\n\n\n\n设置行内元素的高宽：在Standards模式下，给<span>等行内元素设置wdith和height都不会生效，而在quirks模式下，则会生效。\n\n设置百分比的高度：在standards模式下，一个元素的高度是由其包含的内容来决定的，如果父元素没有设置百分比的高度，子元素设置一个百分比的高度是无效的用margin:0 auto设置水平居中：使用margin:0 auto在standards模式下可以使元素水平居中，但在quirks模式下却会失效。\n\n（还有很多，答出什么不重要，关键是看他答出的这些是不是自己经验遇到的，还是说都是看文章看的，甚至完全不知道。）\n\n4、div+css的布局较table布局有什么优点？\n改版的时候更方便 只要改css文件。\n\n页面加载速度更快、结构化清晰、页面显示简洁。\n\n表现与结构相分离。\n\n易于优化（seo）搜索引擎更友好，排名更容易靠前。\n\n5、 img的alt与title有何异同？ strong与em的异同？\na:alt(alt text):为不能显示图像、窗体或applets的用户代理（UA），alt属性用来指定替换文字。替换文字的语言由lang属性指定。(在IE浏览器下会在没有title时把alt当成 tool tip显示)\n\ntitle(tool tip):该属性为设置该属性的元素提供建议性的信息。\n\nstrong:粗体强调标签，强调，表示内容的重要性\n\nem:斜体强调标签，更强烈强调，表示内容的强调点\n\n6、你能描述一下渐进增强和优雅降级之间的不同吗?\n渐进增强 progressive enhancement：针对低版本浏览器进行构建页面，保证最基本的功能，然后再针对高级浏览器进行效果、交互等改进和追加功能达到更好的用户体验。\n\n优雅降级 graceful degradation：一开始就构建完整的功能，然后再针对低版本浏览器进行兼容。\n\n区别：优雅降级是从复杂的现状开始，并试图减少用户体验的供给，而渐进增强则是从一个非常基础的，能够起作用的版本开始，并不断扩充，以适应未来环境的需要。降级（功能衰减）意味着往回看；而渐进增强则意味着朝前看，同时保证其根基处于安全地带。\n\n“优雅降级”观点\n\n“优雅降级”观点认为应该针对那些最高级、最完善的浏览器来设计网站。而将那些被认为“过时”或有功能缺失的浏览器下的测试工作安排在开发周期的最后阶段，并把测试对象限定为主流浏览器（如 IE、Mozilla 等）的前一个版本。\n\n在这种设计范例下，旧版的浏览器被认为仅能提供“简陋却无妨 (poor, but passable)” 的浏览体验。你可以做一些小的调整来适应某个特定的浏览器。但由于它们并非我们所关注的焦点，因此除了修复较大的错误之外，其它的差异将被直接忽略。\n\n“渐进增强”观点\n\n“渐进增强”观点则认为应关注于内容本身。\n\n内容是我们建立网站的诱因。有的网站展示它，有的则收集它，有的寻求，有的操作，还有的网站甚至会包含以上的种种，但相同点是它们全都涉及到内容。这使得“渐进增强”成为一种更为合理的设计范例。这也是它立即被 Yahoo! 所采纳并用以构建其“分级式浏览器支持 (Graded Browser Support)”策略的原因所在。\n\n那么问题来了。现在产品经理看到IE6,7,8网页效果相对高版本现代浏览器少了很多圆角，阴影（CSS3），要求兼容（使用图片背景，放弃CSS3），你会如何说服他？\n\n7、为什么利用多个域名来存储网站资源会更有效？\nCDN缓存更方便\n\n突破浏览器并发限制\n\n节约cookie带宽\n\n节约主域名的连接数，优化页面响应速度\n\n防止不必要的安全问题\n\n8、请谈一下你对网页标准和标准制定机构重要性的理解。\n网页标准和标准制定机构都是为了能让web发展的更‘健康’，开发者遵循统一的标准，降低开发难度，开发成本，SEO也会更好做，也不会因为滥用代码导致各种BUG、安全问题，最终提高网站易用性。\n\n9、请描述一下cookies，sessionStorage和localStorage的区别？\nsessionStorage用于本地存储一个会话（session）中的数据，这些数据只有在同一个会话中的页面才能访问并且当会话结束后数据也随之销毁。因此sessionStorage不是一种持久化的本地存储，仅仅是会话级别的存储。而localStorage用于持久化的本地存储，除非主动删除数据，否则数据是永远不会过期的。\n\nweb storage和cookie的区别\n\nWeb Storage的概念和cookie相似，区别是它是为了更大容量存储设计的。Cookie的大小是受限的，并且每次你请求一个新的页面的时候Cookie都会被发送过去，这样无形中浪费了带宽，另外cookie还需要指定作用域，不可以跨域调用。\n\n除此之外，Web Storage拥有setItem,getItem,removeItem,clear等方法，不像cookie需要前端开发者自己封装setCookie，getCookie。但是Cookie也是不可以或缺的：Cookie的作用是与服务器进行交互，作为HTTP规范的一部分而存在 ，而Web Storage仅仅是为了在本地“存储”数据而生。\n\n10、简述一下src与href的区别。\nsrc用于替换当前元素，href用于在当前文档和引用资源之间确立联系。\n\nsrc是source的缩写，指向外部资源的位置，指向的内容将会嵌入到文档中当前标签所在位置；在请求src资源时会将其指向的资源下载并应用到文档内，例如js脚本，img图片和frame等元素。\n\n<script src =”js.js”></script>\n\n当浏览器解析到该元素时，会暂停其他资源的下载和处理，直到将该资源加载、编译、执行完毕，图片和框架等元素也如此，类似于将所指向资源嵌入当前标签内。这也是为什么将js脚本放在底部而不是头部。\n\nhref是Hypertext Reference的缩写，指向网络资源所在位置，建立和当前元素（锚点）或当前文档（链接）之间的链接，如果我们在文档中添加\n\n<link href=”common.css” rel=”stylesheet”/>\n\n那么浏览器会识别该文档为css文件，就会并行下载资源并且不会停止对当前文档的处理。这也是为什么建议使用link方式来加载css，而不是使用@import方式。\n\n11、知道的网页制作会用到的图片格式有哪些？\npng-8，png-24，jpeg，gif，svg。\n\n但是上面的那些都不是面试官想要的最后答案。面试官希望听到是Webp。（是否有关注新技术，新鲜事物）\n\n科普一下Webp：WebP格式，谷歌（google）开发的一种旨在加快图片加载速度的图片格式。图片压缩体积大约只有JPEG的2/3，并能节省大量的服务器带宽资源和数据空间。Facebook Ebay等知名网站已经开始测试并使用WebP格式。\n\n在质量相同的情况下，WebP格式图像的体积要比JPEG格式图像小40%\n\n12、知道什么是微格式吗？谈谈理解。在前端构建中应该考虑微格式吗？\n微格式（Microformats）是一种让机器可读的语义化XHTML词汇的集合，是结构化数据的开放标准。是为特殊应用而制定的特殊格式。\n\n优点：将智能数据添加到网页上，让网站内容在搜索引擎结果界面可以显示额外的提示。（应用范例：豆瓣，有兴趣自行google）\n\n13、在css/js代码上线之后开发人员经常会优化性能，从用户刷新网页开始，一次js请求一般情况下有哪些地方会有缓存处理？\n答案：dns缓存，cdn缓存，浏览器缓存，服务器缓存。\n\n14、一个页面上有大量的图片（大型电商网站），加载很慢，你有哪些方法优化这些图片的加载，给用户更好的体验。\n图片懒加载，在页面上的未可视区域可以添加一个滚动条事件，判断图片位置与浏览器顶端的距离与页面的距离，如果前者小于后者，优先加载。\n\n如果为幻灯片、相册等，可以使用图片预加载技术，将当前展示图片的前一张和后一张优先下载。\n\n如果图片为css图片，可以使用CSSsprite，SVGsprite，Iconfont、Base64等技术。\n\n如果图片过大，可以使用特殊编码的图片，加载时会先加载一张压缩的特别厉害的缩略图，以提高用户体验。\n\n如果图片展示区域小于图片的真实大小，则因在服务器端根据业务需要先行进行图片压缩，图片压缩后大小与展示一致。\n\n15、你如何理解HTML结构的语义化？　\n去掉或样式丢失的时候能让页面呈现清晰的结构：\n\nhtml本身是没有表现的，我们看到例如`<h1>`是粗体，字体大小2em，加粗；`<strong>`是加粗的，不要认为这是html的表现，这些其实html默认的css样式在起作用，所以去掉或样式丢失的时候能让页面呈现清晰的结构不是语义化的HTML结构的优点，但是浏览器都有有默认样式，默认样式的目的也是为了更好的表达html的语义，可以说浏览器的默认样式和语义化的HTML结构是不可分割的。\n\n屏幕阅读器（如果访客有视障）会完全根据你的标记来“读”你的网页.\n\n例如,如果你使用的含语义的标记,屏幕阅读器就会“逐个拼出”你的单词,而不是试着去对它完整发音.\n\nPDA、手机等设备可能无法像普通电脑的浏览器一样来渲染网页（通常是因为这些设备对CSS的支持较弱）\n\n使用语义标记可以确保这些设备以一种有意义的方式来渲染网页.理想情况下,观看设备的任务是符合设备本身的条件来渲染网页.\n\n语义标记为设备提供了所需的相关信息,就省去了你自己去考虑所有可能的显示情况（包括现有的或者将来新的设备）.例如,一部手机可以选择使一段标记了标题的文字以粗体显示.而掌上电脑可能会以比较大的字体来显示.无论哪种方式一旦你对文本标记为标题,您就可以确信读取设备将根据其自身的条件来合适地显示页面.\n\n搜索引擎的爬虫也依赖于标记来确定上下文和各个关键字的权重\n\n过去你可能还没有考虑搜索引擎的爬虫也是网站的“访客”,但现在它们他们实际上是极其宝贵的用户.没有他们的话,搜索引擎将无法索引你的网站,然后一般用户将很难过来访问.\n\n你的页面是否对爬虫容易理解非常重要,因为爬虫很大程度上会忽略用于表现的标记,而只注重语义标记.\n\n因此,如果页面文件的标题被标记,而不是,那么这个页面在搜索结果的位置可能会比较靠后.除了提升易用性外,语义标记有利于正确使用CSS和JavaScript,因为其本身提供了许多“钩钩”来应用页面的样式与行为.\n\nSEO主要还是靠你网站的内容和外部链接的。\n\n便于团队开发和维护\n\nW3C给我们定了一个很好的标准，在团队中大家都遵循这个标准，可以减少很多差异化的东西，方便开发和维护，提高开发效率，甚至实现模块化开发。\n\n16、谈谈以前端角度出发做好SEO需要考虑什么？\n了解搜索引擎如何抓取网页和如何索引网页\n\n你需要知道一些搜索引擎的基本工作原理，各个搜索引擎之间的区别，搜索机器人（SE robot 或叫 web crawler）如何进行工作，搜索引擎如何对搜索结果进行排序等等。\n\nMeta标签优化\n\n主要包括主题（Title)，网站描述(Description)，和关键词（Keywords）。还有一些其它的隐藏文字比如Author（作者），Category（目录），Language（编码语种）等。\n\n如何选取关键词并在网页中放置关键词\n\n搜索就得用关键词。关键词分析和选择是SEO最重要的工作之一。首先要给网站确定主关键词（一般在5个上下），然后针对这些关键词进行优化，包括关键词密度（Density），相关度（Relavancy），突出性（Prominency）等等。\n\n了解主要的搜索引擎\n\n虽然搜索引擎有很多，但是对网站流量起决定作用的就那么几个。比如英文的主要有Google，Yahoo，Bing等；中文的有百度，搜狗，有道等。不同的搜索引擎对页面的抓取和索引、排序的规则都不一样。还要了解各搜索门户和搜索引擎之间的关系，比如AOL网页搜索用的是Google的搜索技术，MSN用的是Bing的技术。\n\n主要的互联网目录\n\nOpen Directory自身不是搜索引擎，而是一个大型的网站目录，他和搜索引擎的主要区别是网站内容的收集方式不同。目录是人工编辑的，主要收录网站主页；搜索引擎是自动收集的，除了主页外还抓取大量的内容页面。\n\n按点击付费的搜索引擎\n\n搜索引擎也需要生存，随着互联网商务的越来越成熟，收费的搜索引擎也开始大行其道。最典型的有Overture和百度，当然也包括Google的广告项目Google Adwords。越来越多的人通过搜索引擎的点击广告来定位商业网站，这里面也大有优化和排名的学问，你得学会用最少的广告投入获得最多的点击。\n\n搜索引擎登录\n\n网站做完了以后，别躺在那里等着客人从天而降。要让别人找到你，最简单的办法就是将网站提交（submit）到搜索引擎。如果你的是商业网站，主要的搜索引擎和目录都会要求你付费来获得收录（比如Yahoo要299美元），但是好消息是（至少到目前为止）最大的搜索引擎Google目前还是免费，而且它主宰着60％以上的搜索市场。\n\n链接交换和链接广泛度（Link Popularity）\n\n网页内容都是以超文本（Hypertext）的方式来互相链接的，网站之间也是如此。除了搜索引擎以外，人们也每天通过不同网站之间的链接来Surfing（“冲浪”）。其它网站到你的网站的链接越多，你也就会获得更多的访问量。更重要的是，你的网站的外部链接数越多，会被搜索引擎认为它的重要性越大，从而给你更高的排名。\n\n合理的标签使用\n\n17、有哪项方式可以对一个DOM设置它的CSS样式？　\n外部样式表，引入一个外部css文件\n\n内部样式表，将css代码放在 <head> 标签内部\n\n内联样式，将css样式直接定义在 HTML 元素内部\n\n18、CSS都有哪些选择器？\n派生选择器（用HTML标签申明）\n\nid选择器（用DOM的ID申明）\n\n类选择器（用一个样式类名申明）\n\n属性选择器（用DOM的属性申明，属于CSS2，IE6不支持，不常用，不知道就算了）\n\n除了前3种基本选择器，还有一些扩展选择器，包括\n\n后代选择器（利用空格间隔，比如div .a{  }）\n\n群组选择器（利用逗号间隔，比如p,div,#a{  }）\n\n那么问题来了，CSS选择器的优先级是怎么样定义的？\n\n基本原则：\n\n一般而言，选择器越特殊，它的优先级越高。也就是选择器指向的越准确，它的优先级就越高。\n\n复杂的计算方法：\n\n用1表示派生选择器的优先级\n\n用10表示类选择器的优先级\n\n用100标示ID选择器的优先级\n\ndiv.test1 .span var 优先级 1+10 +10 +1\n\nspan#xxx .songs li 优先级1+100 + 10 + 1\n\n#xxx li 优先级 100 +1\n\n那么问题来了，看下列代码，<p>标签内的文字是什么颜色的？\n\n<style>\n\n.classA{ color:blue;}\n\n.classB{ color:red;}\n\n</style>\n\n<body>\n\n<p class='classB classA'> 123 </p>\n\n</body>\n\n答案：red。与样式定义在文件中的先后顺序有关，即是后面的覆盖前面的，与在<p class=’classB classA’>中的先后关系无关。\n\n19、CSS中可以通过哪些属性定义，使得一个DOM元素不显示在浏览器可视范围内？\n最基本的：\n\n设置display属性为none，或者设置visibility属性为hidden\n\n技巧性：\n\n设置宽高为0，设置透明度为0，设置z-index位置在-1000\n\n20、超链接访问过后hover样式就不出现的问题是什么？如何解决？\n答案：被点击访问过的超链接样式不在具有hover和active了,解决方法是改变CSS属性的排列顺序: L-V-H-A（link,visited,hover,active）\n\n21、什么是Css Hack？ie6,7,8的hack分别是什么？\n答案：针对不同的浏览器写不同的CSS code的过程，就是CSS hack。\n```\n\n#test       {  \n\n        width:300px;  \n\n        height:300px;  \n\n        background-color:blue;      /*firefox*/\n\n        background-color:red\\9;      /*all ie*/\n\n        background-color:yellow;    /*ie8*/\n\n        +background-color:pink;        /*ie7*/\n\n        _background-color:orange;       /*ie6*/    }\n\n        :root #test { background-color:purple\\9; }  /*ie9*/\n\n    @media all and (min-width:0px){ #test {background-color:black;} }  /*opera*/\n\n    @media screen and (-webkit-min-device-pixel-ratio:0){ #test {background-color:gray;} }       /*chrome and safari*/\n```\n22、请用Css写一个简单的幻灯片效果页面\n答案：知道是要用css3。使用animation动画实现一个简单的幻灯片效果。\n```\n        div.ani\n\n        /**css**/\n\n        .ani{\n\n          width:480px;\n\n          height:320px;\n\n          margin:50px auto;\n\n          overflow: hidden;\n\n          box-shadow:0 0 5px rgba(0,0,0,1);\n\n          background-size: cover;\n\n          background-position: center;\n\n          -webkit-animation-name: \"loops\";\n\n          -webkit-animation-duration: 20s;\n\n          -webkit-animation-iteration-count: infinite;\n\n        }\n\n        @-webkit-keyframes \"loops\" {\n\n            0% {\n\n                background:url(http://d.h、d3.jpg) no-repeat;            \n\n            }\n\n            25% {\n\n                background:url(http://b.hiphotos.baidu.com/image/w%3D400/sig、f76094b364d72bceba1cc7cd98c109dd0.jpg) no-repeat;\n\n            }\n\n            50% {\n\n                background:url(http://b.hiphotos.baidu.com/image/w%3D400/sign=937dace2552c11dfded1be、58e7、bb5b912.jpg) no-repeat;\n\n            }\n\n            75% {\n\n                background:url(http://g.hiphotos.baidu.com/image/w%3D400/sign=7d37500b8544095d61f0972cdda3cc7cd99e4b.jpg) no-repeat;\n\n            }\n\n            100% {\n\n                background:url(http://c.hiphotos.baidu.com/image/2b21192138ad1.jpg) no-repeat;\n\n            }\n\n        }\n```\n24、行内元素和块级元素的具体区别是什么？行内元素的padding和margin可设置吗？\n块级元素(block)特性：\n\n总是独占一行，表现为另起一行开始，而且其后的元素也必须另起一行显示;\n\n宽度(width)、高度(height)、内边距(padding)和外边距(margin)都可控制;\n\n内联元素(inline)特性：\n\n和相邻的内联元素在同一行;\n\n宽度(width)、高度(height)、内边距的top/bottom(padding-top/padding-bottom)和外边距的top/bottom(margin-top/margin-bottom)都不可改变\n\n（也就是padding和margin的left和right是可以设置的），就是里面文字或图片的大小。\n\n那么问题来了，浏览器还有默认的天生inline-block元素（拥有内在尺寸，可设置高宽，但不会自动换行），有哪些？\n\n答案：`<input> 、<img> 、<button> 、<texterea> 、<label>`。\n\n25、什么是外边距重叠？重叠的结果是什么？\n外边距重叠就是margin-collapse。\n\n在CSS当中，相邻的两个盒子（可能是兄弟关系也可能是祖先关系）的外边距可以结合成一个单独的外边距。这种合并外边距的方式被称为折叠，并且因而所结合成的外边距称为折叠外边距。\n\n折叠结果遵循下列计算规则：\n\n两个相邻的外边距都是正数时，折叠结果是它们两者之间较大的值。\n\n两个相邻的外边距都是负数时，折叠结果是两者绝对值的较大值。\n\n两个外边距一正一负时，折叠结果是两者的相加的和。\n\n26、rgba()和opacity的透明效果有什么不同？\nrgba()和opacity都能实现透明效果，但最大的不同是opacity作用于元素，以及元素内的所有内容的透明度，\n\n而rgba()只作用于元素的颜色或其背景色。（设置rgba透明的元素的子元素不会继承透明效果！）\n\n27、css中可以让文字在垂直和水平方向上重叠的两个属性是什么？\n垂直方向：line-height\n\n水平方向：letter-spacing\n\n那么问题来了，关于letter-spacing的妙用知道有哪些么？\n\n答案:可以用于消除inline-block元素间的换行符空格间隙问题。\n\n28、如何垂直居中一个浮动元素？\n```\n// 方法一：已知元素的高宽\n\n#div1{\n\n    background-color:#6699FF;\n\n    width:200px;\n\n    height:200px;\n\n    position: absolute;        //父元素需要相对定位\n\n    top: 50%;\n\n    left: 50%;\n\n    margin-top:-100px ;   //二分之一的height，width\n\n    margin-left: -100px;\n\n    }\n\n\n\n//方法二:未知元素的高宽\n\n\n\n  #div1{\n\n    width: 200px;\n\n    height: 200px;\n\n    background-color: #6699FF;\n\n\n\n    margin:auto;\n\n    position: absolute;        //父元素需要相对定位\n\n    left: 0;\n\n    top: 0;\n\n    right: 0;\n\n    bottom: 0;\n\n    }\n```\n那么问题来了，如何垂直居中一个<img>?（用更简便的方法。）\n\n```\n\n#Container     //<img>的容器设置如下\n\n{\n\n    display:table-cell;\n\n    text-align:center;\n\n    vertical-align:middle;\n\n}\n```\n29、px和em的区别。\npx和em都是长度单位，区别是，px的值是固定的，指定是多少就是多少，计算比较容易。em得值不是固定的，并且em会继承父级元素的字体大小。\n\n浏览器的默认字体高都是16px。所以未经调整的浏览器都符合: 1em=16px。那么12px=0.75em, 10px=0.625em。\n\n30、描述一个”reset”的CSS文件并如何使用它。知道normalize.css吗？你了解他们的不同之处？\n重置样式非常多，凡是一个前端开发人员肯定有一个常用的重置CSS文件并知道如何使用它们。他们是盲目的在做还是知道为什么这么做呢？原因是不同的浏览器对一些元素有不同的默认样式，如果你不处理，在不同的浏览器下会存在必要的风险，或者更有戏剧性的性发生。\n\n你可能会用Normalize来代替你的重置样式文件。它没有重置所有的样式风格，但仅提供了一套合理的默认样式值。既能让众多浏览器达到一致和合理，但又不扰乱其他的东西（如粗体的标题）。\n\n在这一方面，无法做每一个复位重置。它也确实有些超过一个重置，它处理了你永远都不用考虑的怪癖，像HTML的audio元素不一致或line-height不一致。\n\n31、Sass、LESS是什么？大家为什么要使用他们？\n他们是CSS预处理器。他是CSS上的一种抽象层。他们是一种特殊的语法/语言编译成CSS。\n\n例如Less是一种动态样式语言. 将CSS赋予了动态语言的特性，如变量，继承，运算， 函数. LESS 既可以在客户端上运行 (支持IE 6+, Webkit, Firefox)，也可一在服务端运行 (借助 Node.js)。\n\n为什么要使用它们？\n\n结构清晰，便于扩展。\n\n可以方便地屏蔽浏览器私有语法差异。这个不用多说，封装对浏览器语法差异的重复处理，减少无意义的机械劳动。\n\n可以轻松实现多重继承。\n\n完全兼容 CSS 代码，可以方便地应用到老项目中。LESS 只是在 CSS 语法上做了扩展，所以老的 CSS 代码也可以与 LESS 代码一同编译。\n\n32、display:none与visibility:hidden的区别是什么？\ndisplay : 隐藏对应的元素但不挤占该元素原来的空间。\n\nvisibility: 隐藏对应的元素并且挤占该元素原来的空间。\n\n即是，使用CSS display:none属性后，HTML元素（对象）的宽度、高度等各种属性值都将“丢失”;而使用visibility:hidden属性后，HTML元素（对象）仅仅是在视觉上看不见（完全透明），而它所占据的空间位置仍然存在。\n\n34、CSS中link和@import的区别是：\nLink属于html标签，而@import是CSS中提供的\n\n在页面加载的时候，link会同时被加载，而@import引用的CSS会在页面加载完成后才会加载引用的CSS\n\n@import只有在ie5以上才可以被识别，而link是html标签，不存在浏览器兼容性问题\n\nLink引入样式的权重大于@import的引用（@import是将引用的样式导入到当前的页面中）\n\n35、简介盒子模型：\nCSS的盒子模型有两种：IE盒子模型、标准的W3C盒子模型模型\n\n盒模型：内容、内边距、外边距（一般不计入盒子实际宽度）、边框\n\n\n\n36、为什么要初始化样式？\n由于浏览器兼容的问题，不同的浏览器对标签的默认样式值不同，若不初始化会造成不同浏览器之间的显示差异\n\n但是初始化CSS会对搜索引擎优化造成小影响\n\n37、BFC是什么?\nBFC（块级格式化上下文），一个创建了新的BFC的盒子是独立布局的，盒子内元素的布局不会影响盒子外面的元素。在同一个BFC中的两个相邻的盒子在垂直方向发生margin重叠的问题\n\nBFC是指浏览器中创建了一个独立的渲染区域，该区域内所有元素的布局不会影响到区域外元素的布局，这个渲染区域只对块级元素起作用\n\n38、html语义化是什么？\n当页面样式加载失败的时候能够让页面呈现出清晰的结构\n\n有利于seo优化，利于被搜索引擎收录（更便于搜索引擎的爬虫程序来识别）\n\n便于项目的开发及维护，使html代码更具有可读性，便于其他设备解析。\n\n39、Doctype的作用？严格模式与混杂模式的区别？\n<!DOCTYPE>用于告知浏览器该以何种模式来渲染文档\n\n严格模式下：页面排版及JS解析是以该浏览器支持的最高标准来执行\n\n混杂模式：不严格按照标准执行，主要用来兼容旧的浏览器，向后兼容\n\n40、IE的双边距BUG：块级元素float后设置横向margin，ie6显示的margin比设置的较大。解决：加入_display：inline\n41、HTML与XHTML——二者有什么区别？\n1. 所有的标记都必须要有一个相应的结束标记\n\n2. 所有标签的元素和属性的名字都必须使用小写\n\n3. 所有的 XML 标记都必须合理嵌套\n\n4. 所有的属性必须用引号 \"\" 括起来\n\n5. 把所有 < 和 & 特殊符号用编码表示\n\n6. 给所有属性赋一个值\n\n7. 不要在注释内容中使用 \"--\"\n\n8. 图片必须有说明文字\n\n42、html常见兼容性问题？\n1.双边距BUG float引起的  使用display\n\n2.3像素问题 使用float引起的 使用dislpay:inline -3px\n\n3.超链接hover 点击后失效  使用正确的书写顺序 link visited hover active\n\n4.Ie z-index问题 给父级添加position:relative\n\n5.Png 透明 使用js代码 改\n\n6.Min-height 最小高度 ！Important 解决’\n\n7.select 在ie6下遮盖 使用iframe嵌套\n\n8.为什么没有办法定义1px左右的宽度容器（IE6默认的行高造成的，使用over:hidden,zoom:0.08 line-height:1px）\n\n9.IE5-8不支持opacity，解决办法：\n```\n.opacity {\n\n    opacity: 0.4\n\n    filter: alpha(opacity=60); /* for IE5-7 */\n\n    -ms-filter: \"progid:DXImageTransform.Microsoft.Alpha(Opacity=60)\"; /* for IE 8*/\n\n}\n```\n10. IE6不支持PNG透明背景，解决办法: IE6下使用gif图片\n\n43、对WEB标准以及W3C的理解与认识\n答：标签闭合、标签小写、不乱嵌套、提高搜索机器人搜索几率、使用外 链css和js脚本、结构行为表现的分离、文件下载与页面速度更快、内容能被更多的用户所访问、内容能被更广泛的设备所访问、更少的代码和组件，容易维 护、改版方便，不需要变动页面内容、提供打印版本而不需要复制内容、提高网站易用性。\n\n44、行内元素有哪些?块级元素有哪些?CSS的盒模型?\n答：块级元素：div p h1 h2 h3 h4 form ul\n行内元素: a b br i span input select\nCss盒模型:内容，border ,margin，padding\n\n45、前端页面有哪三层构成，分别是什么?作用是什么?\n答：结构层 Html 表示层 CSS 行为层 js。\n\n46、Doctype作用? 严格模式与混杂模式-如何触发这两种模式，区分它们有何意义?\n    （1）、<!DOCTYPE> 声明位于文档中的最前面，处于 <html> 标签之前。告知浏览器的解析器，用什么文档类型 规范来解析这个文档。\n\n    （2）、严格模式的排版和 JS 运作模式是  以该浏览器支持的最高标准运行。\n\n    （3）、在混杂模式中，页面以宽松的向后兼容的方式显示。模拟老式浏览器的行为以防止站点无法工作。\n\n    （4）、DOCTYPE不存在或格式不正确会导致文档以混杂模式呈现。\n\n47、行内元素有哪些？块级元素有哪些？ 空(void)元素有那些？\n（1）CSS规范规定，每个元素都有display属性，确定该元素的类型，每个元素都有默认的display值，比如div默认display属性值为“block”，成为“块级”元素；span默认display属性值为“inline”，是“行内”元素。\n\n（2）行内元素有：a b span img input select strong（强调的语气） 块级元素有：div ul ol li dl dt dd h1 h2 h3 h4…p\n\n（3）知名的空元素：     \n`\n<br><hr><img><input><link><meta>鲜为人知的是： <area><base><col><command>\n\n<embed><keygen><param><source><track><wbr>\n`\n48、CSS的盒子模型？\n（1）两种， IE 盒子模型、标准 W3C 盒子模型；IE 的content部分包含了 border 和 pading;\n\n（2）盒模型： 内容(content)、填充(padding)、边界(margin)、 边框(border).\n\n49、CSS 选择符有哪些？哪些属性可以继承？优先级算法如何计算？ CSS3新增伪类有那些？\n    *   1.id选择器（ # myid）\n\n        2.类选择器（.myclassname）\n\n        3.标签选择器（div, h1, p）\n\n        4.相邻选择器（h1 + p）\n\n        5.子选择器（ul < li）\n\n        6.后代选择器（li a）\n\n        7.通配符选择器（ * ）\n\n        8.属性选择器（a[rel = \"external\"]）\n\n        9.伪类选择器（a: hover, li: nth - child）\n\n    *   可继承： font-size font-family color, UL LI DL DD DT;\n\n    *   不可继承 ：border padding margin width height ;\n\n    *   优先级就近原则，样式定义最近者为准;\n\n    *   载入样式以最后载入的定位为准;\n\n优先级为:\n\n       !important >  id > class > tag\n\n       important 比 内联优先级高\n\nCSS3新增伪类举例：\n\n    p:first-of-type 选择属于其父元素的首个 <p> 元素的每个 <p> 元素。\n\n    p:last-of-type  选择属于其父元素的最后 <p> 元素的每个 <p> 元素。\n\n    p:only-of-type  选择属于其父元素唯一的 <p> 元素的每个 <p> 元素。\n\n    p:only-child    选择属于其父元素的唯一子元素的每个 <p> 元素。\n\n    p:nth-child(2)  选择属于其父元素的第二个子元素的每个 <p> 元素。\n\n    :enabled、:disabled 控制表单控件的禁用状态。\n\n    :checked，单选框或复选框被选中。\n\n50、如何居中div,如何居中一个浮动元素?\n给div设置一个宽度，然后添加margin:0 auto属性\n```\n    div{\n\n        width:200px;\n\n        margin:0 auto;\n\n     }\n```\n居中一个浮动元素\n\n      确定容器的宽高 宽500 高 300 的层\n\n      设置层的外边距\n```\n     .div {\n\n      Width:500px ; height:300px;//高度可以不设\n\n      Margin: -150px 0 0 -250px;\n\n      position:relative;相对定位\n\n      background-color:pink;//方便看效果\n\n      left:50%;\n\n      top:50%;\n\n    }\n```\n51、浏览器的内核分别是什么?经常遇到的浏览器的兼容性有哪些？原因，解决方法是什么，常用hack的技巧 ？\n    * IE浏览器的内核Trident、 Mozilla的Gecko、google的WebKit、Opera内核Presto；\n\n    * png24为的图片在iE6浏览器上出现背景，解决方案是做成PNG8.\n\n    * 浏览器默认的margin和padding不同。解决方案是加一个全局的*{margin:0;padding:0;}来统一。\n\n    * IE6双边距bug:块属性标签float后，又有横行的margin情况下，在ie6显示margin比设置的大。\n\n      浮动ie产生的双倍距离 #box{ float:left; width:10px; margin:0 0 0 100px;}\n\n     这种情况之下IE会产生20px的距离，解决方案是在float的标签样式控制中加入 ——\n     `_display:inline;将其转化为行内属性。(_这个符号只有ie6会识别)`\n\n      渐进识别的方式，从总体中逐渐排除局部。\n\n      首先，巧妙的使用“\\9”这一标记，将IE游览器从所有情况中分离出来。\n\n      接着，再次使用“+”将IE8和IE7、IE6分离开来，这样IE8已经独立识别。\n\n      css\n```\n          .bb{\n\n           background-color:#f1ee18;/*所有识别*/\n\n          .background-color:#00deff\\9; /*IE6、7、8识别*/\n\n          +background-color:#a200ff;/*IE6、7识别*/\n\n          _background-color:#1e0bd1;/*IE6识别*/\n\n          }\n```\n    *  IE下,可以使用获取常规属性的方法来获取自定义属性,\n\n       也可以使用getAttribute()获取自定义属性;\n\n       Firefox下,只能使用getAttribute()获取自定义属性.\n\n       解决方法:统一通过getAttribute()获取自定义属性.\n\n    *  IE下,even对象有x,y属性,但是没有pageX,pageY属性;\n\n      Firefox下,event对象有pageX,pageY属性,但是没有x,y属性.\n\n    * （条件注释）缺点是在IE浏览器下可能会增加额外的HTTP请求数。\n\n    * Chrome 中文界面下默认会将小于 12px 的文本强制按照 12px 显示, 可通过加入 CSS 属性 -webkit-text-size-adjust: none; 解决.\n\n    超链接访问过后hover样式就不出现了 被点击访问过的超链接样式不在具有hover和active了解决方法是改变CSS属性的排列顺序:\n\n    L-V-H-A :  a:link {} a:visited {} a:hover {} a:active {}\n\n52、列出display的值，说明他们的作用。position的值， relative和absolute定位原点是？\n  1. block 象块类型元素一样显示。\n\n  none 缺省值。向行内元素类型一样显示。\n\n  inline-block 象行内元素一样显示，但其内容象块类型元素一样显示。\n\n  list-item 象块类型元素一样显示，并添加样式列表标记。\n\n  2. position的值\n\n  * absolute\n\n        生成绝对定位的元素，相对于 static 定位以外的第一个父元素进行定位。\n\n  * fixed （老IE不支持）\n\n        生成绝对定位的元素，相对于浏览器窗口进行定位。\n\n  * relative\n\n        生成相对定位的元素，相对于其正常位置进行定位。\n\n  * static  默认值。没有定位，元素出现在正常的流中\n\n  * （忽略 top, bottom, left, right z-index 声明）。\n\n  *  inherit 规定从父元素继承 position 属性的值。\n\n53、absolute的containing block计算方式跟正常流有什么不同？\n54、position跟display、margin collapse、overflow、float这些特性相互叠加后会怎么样？\n55、对WEB标准以及W3C的理解与认识\n标签闭合、标签小写、不乱嵌套、提高搜索机器人搜索几率、使用外 链css和js脚本、结构行为表现的分离、文件下载与页面速度更快、内容能被更多的用户所访问、内容能被更广泛的设备所访问、更少的代码和组件，容易维 护、改版方便，不需要变动页面内容、提供打印版本而不需要复制内容、提高网站易用性；\n\n56、css的基本语句构成是?\n选择器{属性1:值1;属性2:值2;……}\n\n57、浏览器标准模式和怪异模式之间的区别是什么?\n盒子模型 渲染模式的不同\n\n使用 window.top.document.compatMode 可显示为什么模式\n\n58、CSS中可以通过哪些属性定义，使得一个DOM元素不显示在浏览器可视范围内？　　\n　　最基本的：\n\n　　设置display属性为none，或者设置visibility属性为hidden\n\n　　技巧性：\n\n　　设置宽高为0，设置透明度为0，设置z-index位置在-1000\n\n59、超链接访问过后hover样式就不出现的问题是什么？如何解决？\n　　答案：被点击访问过的超链接样式不在具有hover和active了,解决方法是改变CSS属性的排列顺序: L-V-H-A（link,visited,hover,active）\n\n60、什么是Css Hack？ie6,7,8的hack分别是什么？\n　　答案：针对不同的浏览器写不同的CSS code的过程，就是CSS hack。\n\n　　示例如下：\n```\n#test       {  \n\n        width:300px;  \n\n        height:300px;  \n\n\n\n        background-color:blue;      /firefox*/\n\n        background-color:red\\9;      /all ie*/\n\n        background-color:yellow\\0;    /ie8*/\n\n        +background-color:pink;        /ie7*/\n\n        _background-color:orange;       /ie6/    }\n\n        :root #test { background-color:purple\\9; }  /ie9*/\n\n    @media all and (min-width:0px){ #test {background-color:black\\0;} }  /opera/\n\n    @media screen and (-webkit-min-device-pixel-ratio:0){ #test {background-color:gray;} }       /chrome and safari*/\n```\n62、请用Css写一个简单的幻灯片效果页面\n　　答案：知道是要用css3。使用animation动画实现一个简单的幻灯片效果。\n```\n/**HTML**/\n\n        div.ani\n\n        /**css**/\n\n        .ani{\n\n          width:480px;\n\n          height:320px;\n\n          margin:50px auto;\n\n          overflow: hidden;\n\n          box-shadow:0 0 5px rgba(0,0,0,1);\n\n          background-size: cover;\n\n          background-position: center;\n\n          -webkit-animation-name: \"loops\";\n\n          -webkit-animation-duration: 20s;\n\n          -webkit-animation-iteration-count: infinite;\n\n        }\n\n        @-webkit-keyframes \"loops\" {\n\n            0% { background:url(http://d.hiphotos.baidu.com/image/w%3D400/sign=c01e6adca964034f0fcdc3069fc27980/e824b899a9014c08e5e38ca4087b02087af4f4d3.jpg) no-repeat;            \n\n            }\n\n            25% {\n\n                background:url(http://b.hiphotos.baidu.com/image/w%3D400/sign=edee1572e9f81a4c2632edc9e72b6029/30adcbef76094b364d72bceba1cc7cd98c109dd0.jpg) no-repeat;\n\n            }\n\n            50% {\n\n                background:url(http://b.hiphotos.baidu.com/image/w%3D400/sign=937dace2552c11dfded1be2353266255/d8f9d72a6059252d258e7605369b033b5bb5b912.jpg) no-repeat;\n\n            }\n\n            75% {\n\n                background:url(http://g.hiphotos.baidu.com/image/w%3D400/sign=7d37500b8544ebf86d71653fe9f9d736/0df431adcbef76095d61f0972cdda3cc7cd99e4b.jpg) no-repeat;\n\n            }\n\n            100% {\n\n                background:url(http://c.hiphotos.baidu.com/image/w%3D400/sign=cfb239ceb0fb43161a1f7b7a10a54642/3b87e950352ac65ce2e73f76f9f2b21192138ad1.jpg) no-repeat;\n\n            }\n\n        }\n```\n63、行内元素和块级元素的具体区别是什么？行内元素的padding和margin可设置吗？\n　　块级元素(block)特性：\n\n总是独占一行，表现为另起一行开始，而且其后的元素也必须另起一行显示;\n宽度(width)、高度(height)、内边距(padding)和外边距(margin)都可控制;\n　　内联元素(inline)特性：\n\n和相邻的内联元素在同一行;\n宽度(width)、高度(height)、内边距的top/bottom(padding-top/padding-bottom)和外边距的top/bottom(margin-top/margin-bottom)都不可改变（也就是padding和margin的left和right是可以设置的），就是里面文字或图片的大小。\n　　那么问题来了，浏览器还有默认的天生inline-block元素（拥有内在尺寸，可设置高宽，但不会自动换行），有哪些？\n\n　　答案：`<input> 、<img> 、<button> 、<textarea> 、<label>`\n\n64、什么是外边距重叠？重叠的结果是什么？\n　　答案：\n\n　　外边距重叠就是margin-collapse。\n\n　　在CSS当中，相邻的两个盒子（可能是兄弟关系也可能是祖先关系）的外边距可以结合成一个单独的外边距。这种合并外边距的方式被称为折叠，并且因而所结合成的外边距称为折叠外边距。\n\n　　折叠结果遵循下列计算规则：\n\n两个相邻的外边距都是正数时，折叠结果是它们两者之间较大的值。\n两个相邻的外边距都是负数时，折叠结果是两者绝对值的较大值。\n两个外边距一正一负时，折叠结果是两者的相加的和。\n　　\n\n65、rgba()和opacity的透明效果有什么不同？\n　　rgba()和opacity都能实现透明效果，但最大的不同是opacity作用于元素，以及元素内的所有内容的透明度，\n\n　　而rgba()只作用于元素的颜色或其背景色。（设置rgba透明的元素的子元素不会继承透明效果！）\n\n66、css中可以让文字在垂直和水平方向上重叠的两个属性是什么？\n　　垂直方向：line-height\n\n　　水平方向：letter-spacing\n\n　　那么问题来了，关于letter-spacing的妙用知道有哪些么？\n\n　　答案:可以用于消除inline-block元素间的换行符空格间隙问题。\n\n67、如何垂直居中一个浮动元素？\n// 方法一：已知元素的高宽\n```\n#div1{\n\n    background-color:#6699FF;\n\n    width:200px;\n\n    height:200px;\n\n    position: absolute;        //父元素需要相对定位\n\n    top: 50%;\n\n    left: 50%;\n\n    margin-top:-100px ;   //二分之一的height，width\n\n    margin-left: -100px;\n\n    }\n\n//方法二:未知元素的高宽\n\n  #div1{\n\n    width: 200px;\n\n    height: 200px;\n\n    background-color: #6699FF;\n\n    margin:auto;\n\n    position: absolute;        //父元素需要相对定位\n\n    left: 0;\n\n    top: 0;\n\n    right: 0;\n\n    bottom: 0;\n\n    }\n```\n那么问题来了，如何垂直居中一个<img>?（用更简便的方法。）\n```\n#container     //<img>的容器设置如下\n\n{\n\n    display:table-cell;\n\n    text-align:center;\n\n    vertical-align:middle;\n\n}\n```\n68、描述一个\"reset\"的CSS文件并如何使用它。知道normalize.css吗？你了解他们的不同之处？　\n　　重置样式非常多，凡是一个前端开发人员肯定有一个常用的重置CSS文件并知道如何使用它们。他们是盲目的在做还是知道为什么这么做呢？原因是不同的浏览器对一些元素有不同的默认样式，如果你不处理，在不同的浏览器下会存在必要的风险，或者更有戏剧性的性发生。\n\n　　你可能会用Normalize来代替你的重置样式文件。它没有重置所有的样式风格，但仅提供了一套合理的默认样式值。既能让众多浏览器达到一致和合理，但又不扰乱其他的东西（如粗体的标题）。\n\n　　在这一方面，无法做每一个复位重置。它也确实有些超过一个重置，它处理了你永远都不用考虑的怪癖，像HTML的audio元素不一致或line-height不一致。\n\n69、说display属性有哪些？可以做什么？\ndisplay:block行内元素转换为块级元素\n\n  display:inline块级元素转换为行内元素\n\n  display:inline-block转为内联元素\n\n70、哪些css属性可以继承？\n可继承： font-size font-family color, ul li dl dd dt;\n\n  不可继承 ：border padding margin width height ;\n\n71、css优先级算法如何计算？\n!important >  id > class > 标签\n\n  !important 比 内联优先级高\n\n  * 优先级就近原则，样式定义最近者为准;\n\n  * 以最后载入的样式为准;\n\n72、b标签和strong标签,i标签和em标签的区别？\n后者有语义，前者则无。\n\n73、有那些行内元素、有哪些块级元素、盒模型？\n1.内联元素(inline element)\n\na – 锚点\n\nabbr – 缩写\n\nacronym – 首字\n\nb – 粗体(不推荐)\n\nbig – 大字体\n\nbr – 换行\n\nem – 强调\n\nfont – 字体设定(不推荐)\n\ni – 斜体\n\nimg – 图片\n\ninput – 输入框\n\nlabel – 表格标签\n\ns – 中划线(不推荐)\n\nselect – 项目选择\n\nsmall – 小字体文本\n\nspan – 常用内联容器，定义文本内区块\n\nstrike – 中划线\n\nstrong – 粗体强调\n\nsub – 下标\n\nsup – 上标\n\ntextarea – 多行文本输入框\n\ntt – 电传文本\n\nu – 下划线\n\nvar – 定义变量\n\n2、块级元素\n\naddress – 地址\n\nblockquote – 块引用\n\ncenter – 举中对齐块\n\ndir – 目录列表\n\ndiv – 常用块级容易，也是css layout的主要标签\n\ndl – 定义列表\n\nfieldset – form控制组\n\nform – 交互表单\n\nh1 – 大标题\n\nh2 – 副标题\n\nh3 – 3级标题\n\nh4 – 4级标题\n\nh5 – 5级标题\n\nh6 – 6级标题\n\nhr – 水平分隔线\n\nisindex – input prompt\n\nmenu – 菜单列表\n\nnoframes – frames可选内容，（对于不支持frame的浏览器显示此区块内容）\n\nnoscript – ）可选脚本内容（对于不支持script的浏览器显示此内容）\n\nol – 排序表单\n\np – 段落\n\npre – 格式化文本\n\ntable – 表格\n\nul – 非排序列表\n\n3.CSS盒子模型包含四个部分组成：\n\n内容、填充（padding）、边框（border）、外边界（margin）。\n\n74、有哪些选择符，优先级的计算公式是什么？行内样式和！important哪个优先级高？\n#ID > .class > 标签选择符  !important优先级高\n\n75.我想让行内元素跟上面的元素距离10px，加margin-top和padding-top可以吗？\n  margin-top,padding-top无效\n\n76.CSS的盒模型由什么组成？\n  内容，border ,margin，padding\n\n77、.说说display属性有哪些？可以做什么？\n  display:block行内元素转换为块级元素\n\n  display:inline块级元素转换为行内元素\n\n  display:inline-block转为内联元素\n\n78、哪些css属性可以继承？\n  可继承： font-size font-family color, ul li dl dd dt;\n\n  不可继承 ：border padding margin width height ;\n\n79、css优先级算法如何计算？\n  !important >  id > class > 标签\n\n  !important 比 内联优先级高\n\n  * 优先级就近原则，样式定义最近者为准;\n\n  * 以最后载入的样式为准;\n\n80、text-align:center和line-height有什么区别？\n  text-align是水平对齐，line-height是行间。\n\n81、前端页面由哪三层构成，分别是什么？作用是什么？\n   结构层 Html 表示层 CSS 行为层 js\n\n82、写一个表格以及对应的CSS,使表格奇数行为白色背景，偶数行为灰色，鼠标一上去为黄色背景。\n二、JS基础\n1、javascript的typeof返回哪些数据类型\nObject number function boolean underfind\n\n2、例举3种强制类型转换和2种隐式类型转换?\n强制（parseInt,parseFloat,number）\n\n隐式（== – ===）\n\n3、split() join() 的区别\n前者是切割成数组的形式，后者是将数组转换成字符串\n\n4、数组方法pop() push() unshift() shift()\nPush()尾部添加 pop()尾部删除\n\nUnshift()头部添加 shift()头部删除\n\n5、事件绑定和普通事件有什么区别\n事件绑定是指把事件注册到具体的元素之上，普通事件指的是可以用来注册的事件\n\n6、IE和DOM事件流的区别\n1.执行顺序不一样、\n\n2.参数不一样\n\n3.事件加不加on\n\n4.this指向问题\n\n7、IE和标准下有哪些兼容性的写法\nVar ev = ev || window.event\n\ndocument.documentElement.clientWidth || document.body.clientWidth\n\nVar target = ev.srcElement||ev.target\n\n8、call和apply的区别\nObject.call(this,obj1,obj2,obj3)\n\nObject.apply(this,arguments)\n\n9、b继承a的方法\n10、JavaScript this指针、闭包、作用域\n11、事件委托是什么\n让利用事件冒泡的原理，让自己的所触发的事件，让他的父元素代替执行！\n\n12、闭包是什么，有什么特性，对页面有什么影响\n闭包就是能够读取其他函数内部变量的函数。\n\n13、如何阻止事件冒泡和默认事件\ncanceBubble return false\n\n14、添加 删除 替换 插入到某个接点的方法\nobj.appendChidl()\n\nobj.innersetBefore\n\nobj.replaceChild\n\nobj.removeChild\n\n15、javascript的本地对象，内置对象和宿主对象\n本地对象为array obj regexp等可以new实例化\n\n内置对象为gload Math 等不可以实例化的\n\n宿主为浏览器自带的document,window 等\n\n16、document load 和document ready的区别\nDocument.onload 是在结构和样式加载完才执行js\n\nDocument.ready原生种没有这个方法，jQuery中有 $().ready(function)\n\n17、”==”和“===”的不同\n前者会自动转换类型\n\n后者不会\n\n18、javascript的同源策略\n一段脚本只能读取来自于同一来源的窗口和文档的属性，这里的同一来源指的是主机名、议和端口号的组合\n\n19、编写一个数组去重的方法\n```\nfunction oSort(arr) {   \nvar result ={};\nvar newArr=[];\nfor(var i=0;i<arr.length;i++){\nif(!result[arr]) {\nnewArr.push(arr)\nresult[arr]=1\n}\n}\nreturn newArr\n}</arr.length;i++)\n```\n20、JavaScript是一门什么样的语言，它有哪些特点？\n没有标准答案。\n\n21、JavaScript的数据类型都有什么？\n基本数据类型：String,boolean,Number,Undefined, Null\n\n引用数据类型：Object(Array,Date,RegExp,Function)\n\n那么问题来了，如何判断某变量是否为数组数据类型？\n\n方法一.判断其是否具有“数组性质”，如slice()方法。可自己给该变量定义slice方法，故有时会失效\n\n方法二.obj instanceof Array 在某些IE版本中不正确\n\n方法三.方法一二皆有漏洞，在ECMA Script5中定义了新方法Array.isArray(), 保证其兼容性，最好的方法如下：\n\n```\nif(typeof Array.isArray===\"undefined\"){\n\n  Array.isArray = function(arg){\n\n        return Object.prototype.toString.call(arg)===\"[object Array]\"\n\n    };\n\n}\n```\n22、已知ID的Input输入框，希望获取这个输入框的输入值，怎么做？(不使用第三方框架)\n\n\ndocument.getElementById(“ID”).value\n\n23、希望获取到页面中所有的checkbox怎么做？(不使用第三方框架)\n```\nvar domList = document.getElementsByTagName(‘input’)\n\nvar checkBoxList = [];\n\nvar len = domList.length;　　//缓存到局部变量\n\nwhile (len--) {　　//使用while的效率会比for循环更高\n\n　　if (domList[len].type == ‘checkbox’) {\n\n    　　checkBoxList.push(domList[len]);\n\n　　}\n\n}\n```\n24、设置一个已知ID的DIV的html内容为xxxx，字体颜色设置为黑色(不使用第三方框架)\n```\nvar dom = document.getElementById(“ID”);\n\ndom.innerHTML = “xxxx”\n\ndom.style.color = “#000”\n```\n\n25、当一个DOM节点被点击时候，我们希望能够执行一个函数，应该怎么做？\n直接在DOM里绑定事件：<div onclick=”test()”></div>\n\n在JS里通过onclick绑定：xxx.onclick = test\n\n通过事件添加进行绑定：addEventListener(xxx, ‘click’, test)\n\n那么问题来了，Javascript的事件流模型都有什么？\n\n“事件冒泡”：事件开始由最具体的元素接受，然后逐级向上传播\n\n“事件捕捉”：事件由最不具体的节点先接收，然后逐级向下，一直到最具体的\n\n“DOM事件流”：三个阶段：事件捕捉，目标阶段，事件冒泡\n\n26、看下列代码输出为何？解释原因。\n\n\n\n\n\n\nvar a;\n\nalert(typeof a); // undefined\n\nalert(b); // 报错\n\n解释：Undefined是一个只有一个值的数据类型，这个值就是“undefined”，在使用var声明变量但并未对其赋值进行初始化时，这个变量的值就是undefined。而b由于未声明将报错。注意未申明的变量和声明了未赋值的是不一样的。\n\n27、看下列代码,输出什么？解释原因。\n\n\n\n\nvar a = null;\n\nalert(typeof a); //object\n\n解释：null是一个只有一个值的数据类型，这个值就是null。表示一个空指针对象，所以用typeof检测会返回”object”。\n\n28、看下列代码,输出什么？解释原因。\n\n```\nvar undefined;\n\nundefined == null; // true\n\n1 == true;   // true\n\n2 == true;   // false\n\n0 == false;  // true\n\n0 == '';     // true\n\nNaN == NaN;  // false\n\n[] == false; // true\n\n[] == ![];   // true\n```\nundefined与null相等，但不恒等（===）\n一个是number一个是string时，会尝试将string转换为number\n\n尝试将boolean转换为number，0或1\n\n尝试将Object转换成number或string，取决于另外一个对比量的类型\n\n所以，对于0、空字符串的判断，建议使用 “===” 。“===”会先判断两边的值类型，类型不匹配时为false。\n\n那么问题来了，看下面的代码，输出什么，foo的值为什么？\n```\nvar foo = \"11\"+2-\"1\";\n\nconsole.log(foo);\n\nconsole.log(typeof foo);\n```\n执行完后foo的值为111，foo的类型为String。\n\n29、看代码给答案。\n```\n\nvar a = new Object();\n\na.value = 1;\n\nb = a;\n\nb.value = 2;\n\nalert(a.value);\n```\n答案：2（考察引用数据类型细节）\n\n30、已知数组var stringArray = [“This”, “is”, “Baidu”, “Campus”]，Alert出”This is Baidu Campus”。\n答案：alert(stringArray.join(“”))\n\n已知有字符串foo=”get-element-by-id”,写一个function将其转化成驼峰表示法”getElementById”。\n```\nfunction combo(msg){\n\n    var arr=msg.split(\"-\");\n\n    for(var i=1;i<arr.length;i++){\n\n        arr[i]=arr[i].charAt(0).toUpperCase()+arr[i].substr(1,arr[i].length-1);\n\n    }\n\n    msg=arr.join(\"\");\n\n    return msg;\n\n}\n```\n(考察基础API)\n\n31、var numberArray = [3,6,2,4,1,5]; （考察基础API）\n1) 实现对该数组的倒排，输出[5,1,4,2,6,3]\n\n2) 实现对该数组的降序排列，输出[6,5,4,3,2,1]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction combo(msg){\n\n    var arr=msg.split(\"-\");\n\n    for(var i=1;i<arr.length;i++){\n\n        arr[i]=arr[i].charAt(0).toUpperCase()+arr[i].substr(1,arr[i].length-1);\n\n    }\n\n    msg=arr.join(\"\");\n\n    return msg;\n\n}\n\n32、输出今天的日期，以YYYY-MM-DD的方式，比如今天是2014年9月26日，则输出2014-09-26\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar d = new Date();\n\n// 获取年，getFullYear()返回4位的数字\n\nvar year = d.getFullYear();\n\n// 获取月，月份比较特殊，0是1月，11是12月\n\nvar month = d.getMonth() + 1;\n\n// 变成两位\n\nmonth = month < 10 ? '0' + month : month;\n\n// 获取日\n\nvar day = d.getDate();\n\nday = day < 10 ? '0' + day : day;\n\nalert(year + '-' + month + '-' + day);\n\n33、将字符串”<tr><td>{$id}</td><td>{$name}</td></tr>”中的{$id}替换成10，{$name}替换成Tony （使用正则表达式）\n答案：”<tr><td>{$id}</td><td>{$id}_{$name}</td></tr>”.replace(/{\\$id}/g, ’10′).replace(/{\\$name}/g, ‘Tony’);\n\n34、为了保证页面输出安全，我们经常需要对一些特殊的字符进行转义，请写一个函数escapeHtml，将<, >, &, “进行转义\n\n```\nfunction escapeHtml(str) {\n\nreturn str.replace(/[<>”&]/g, function(match) {\n\n    switch (match) {\n\n     case “<”:\n\n         return “&lt;”;\n\n     case “>”:\n\n       return “&gt;”;\n\n     case “&”:\n\n       return “&amp;”;\n\n     case “\\””:\n\n        return “&quot;”;\n\n    }\n\n  });\n\n}\n```\n35、foo = foo||bar ，这行代码是什么意思？为什么要这样写？\n答案：if(!foo) foo = bar; //如果foo存在，值不变，否则把bar的值赋给foo。\n\n短路表达式：作为”&&”和”||”操作符的操作数表达式，这些表达式在进行求值时，只要最终的结果已经可以确定是真或假，求值过程便告终止，这称之为短路求值。\n\n36、看下列代码，将会输出什么?(变量声明提升)\n\n```\nvar foo = 1;\n\nfunction(){\n\n    console.log(foo);\n\n    var foo = 2;\n\n    console.log(foo);\n\n}\n```\n答案：输出undefined 和 2。上面代码相当于：\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\nvar foo = 1;\n\nfunction(){\n\n    var foo;\n\n    console.log(foo); //undefined\n\n    foo = 2;\n\n    console.log(foo); // 2;  \n\n}\n```\n函数声明与变量声明会被JavaScript引擎隐式地提升到当前作用域的顶部，但是只提升名称不会提升赋值部分。\n\n37、用js实现随机选取10–100之间的10个数字，存入一个数组，并排序。\n```\n\nvar iArray = [];\n\nfuntion getRandom(istart, iend){\n\n        var iChoice = iend - istart +1;\n\n        return Math.floor(Math.random() * iChoice + istart;\n\n}\n\nfor(var i=0; i<10; i++){\n\n        iArray.push(getRandom(10,100));\n\n}\n\niArray.sort();\n```\n38、把两个数组合并，并删除第二个元素。\n```\nvar array1 = ['a','b','c'];\n\nvar bArray = ['d','e','f'];\n\nvar cArray = array1.concat(bArray);\n\ncArray.splice(1,1);\n```\n39、怎样添加、移除、移动、复制、创建和查找节点（原生JS，实在基础，没细写每一步）\n1）创建新节点\n```\ncreateDocumentFragment()    //创建一个DOM片段\n\ncreateElement()   //创建一个具体的元素\n\ncreateTextNode()   //创建一个文本节点\n\n2）添加、移除、替换、插入\n\nappendChild()      //添加\n\nremoveChild()      //移除\n\nreplaceChild()      //替换\n\ninsertBefore()      //插入\n```\n3）查找\n```\ngetElementsByTagName()    //通过标签名称\n\ngetElementsByName()     //通过元素的Name属性的值\n\ngetElementById()        //通过元素Id，唯一性\n```\n40、有这样一个URL：http://item.taobao.com/item.htm?a=1&b=2&c=&d=xxx&e，请写一段JS程序提取URL中的各个GET参数(参数名和参数个数不确定)，将其按key-value形式返回到一个json结构中，如{a:’1′, b:’2′, c:”, d:’xxx’, e:undefined}。\n答案：\n```\nfunction serilizeUrl(url) {\n\n    var result = {};\n\n    url = url.split(\"?\")[1];\n\n    var map = url.split(\"&\");\n\n    for(var i = 0, len = map.length; i < len; i++) {\n\n        result<script>jQuery(function($) {$(\"#google-maps-1\").gMap({controls: false,scrollwheel: false,markers: [{address: \"\",icon: {image: \"http://blog.jobbole.com/wp-content/themes/jobboleblogv3/_assets/img/_colors/red/pin.png\",iconsize: [32, 32],iconanchor: [16,27],infowindowanchor: [16, 27]}}],address: \"\",zoom: 15,icon: {image: \"http://blog.jobbole.com/wp-content/themes/jobboleblogv3/_assets/img/_colors/red/pin.png\",iconsize: [32, 32],iconanchor: [16,27],infowindowanchor: [16, 27]}});});</script><div id=\"google-maps-1\" class=\"google-maps\" style=\"width: 100%; height: 200px;\"></div>.split(\"=\")[0]] = map[i].split(\"=\")[1];\n\n    }\n\n    return result;\n\n}\n```\n41、正则表达式构造函数var reg=new RegExp(“xxx”)与正则表达字面量var reg=//有什么不同？匹配邮箱的正则表达式？\n答案：当使用RegExp()构造函数的时候，不仅需要转义引号（即\\”表示”），并且还需要双反斜杠（即\\\\表示一个\\）。使用正则表达字面量的效率更高。\n\n邮箱的正则匹配：\n\n\n\nvar regMail = /^([a-zA-Z0-9_-])+@([a-zA-Z0-9_-])+((.[a-zA-Z0-9_-]{2,3}){1,2})$/;\n\n24.看下面代码，给出输出结果。\n\n```\nfor(var i=1;i<=3;i++){\n\n  setTimeout(function(){\n\n      console.log(i);   \n\n  },0);\n\n};\n\n答案：4 4 4。\n```\n原因：Javascript事件处理器在线程空闲之前不会运行。追问，如何让上述代码输出1 2 3？\n```\nfor(var i=1;i<=3;i++){\n\n   setTimeout((function(a){  //改成立即执行函数\n\n       console.log(a);   \n\n   })(i),0);\n\n};\n```\n1           //输出\n\n2\n\n3\n\n42、写一个function，清除字符串前后的空格。（兼容所有浏览器）\n使用自带接口trim()，考虑兼容性：\n```\nif (!String.prototype.trim) {\n\n String.prototype.trim = function() {\n\n return this.replace(/^\\s+/, \"\").replace(/\\s+$/,\"\");\n\n }\n\n}\n\n // test the function\n\nvar str = \" \\t\\n test string \".trim();\n\nalert(str == \"test string\"); // alerts \"true\"\n```\n43、Javascript中callee和caller的作用？\ncaller是返回一个对函数的引用，该函数调用了当前函数；\n\ncallee是返回正在被执行的function函数，也就是所指定的function对象的正文。\n\n那么问题来了？如果一对兔子每月生一对兔子；一对新生兔，从第二个月起就开始生兔子；假定每对兔子都是一雌一雄，试问一对兔子，第n个月能繁殖成多少对兔子？（使用callee完成）\n```\nvar result=[];\n\nfunction fn(n){  //典型的斐波那契数列\n\n   if(n==1){\n\n        return 1;\n\n   }else if(n==2){\n\n           return 1;\n\n   }else{\n\n        if(result[n]){\n\n                return result[n];\n\n        }else{\n\n                //argument.callee()表示fn()\n\n                result[n]=arguments.callee(n-1)+arguments.callee(n-2);\n\n                return result[n];\n\n        }\n\n   }\n\n}\n```\n44、Javascript中, 以下哪条语句一定会产生运行错误？      答案(  B   )\nA、   var `_变量`=NaN;B、var 0bj = [];C、var obj = //;  D、var obj = {};\n\n45、以下两个变量a和b，a+b的哪个结果是NaN？      答案(   C  )\nA、var a=undefind; b=NaN\n\nB、var a=‘123’; b=NaN\n\nC、var a =undefined , b =NaN\n\nD、var a=NaN , b='undefined'\n\n46、var a=10; b=20; c=4;  ++b+c+a++ 以下哪个结果是正确的？答案(  B  )\nA、   34   B、35  C、36  D、37\n\n47、下面的JavaScript语句中，（ D ）实现检索当前页面中的表单元素中的所有文本框，并将它们全部清空\nA. for(vari=0;i< form1.elements.length;i++) {\n\nif(form1.elements.type==”text”)\n\nform1.elements.value=”\";}\n\nB. for(vari=0;i<document.forms.length;i++) {\n\nif(forms[0].elements.type==”text”)\n\nforms[0].elements.value=”\";\n\n}\n\nC. if(document.form.elements.type==”text”)\n\nform.elements.value=”\";\n\nD. for(vari=0;i<document.forms.length; i++){\n\nfor(var j=0;j<document.forms.elements.length; j++){\n\nif(document.forms.elements[j].type==”text”)\n\ndocument.forms.elements[j].value=”\";\n\n}\n\n}\n\n48、要将页面的状态栏中显示“已经选中该文本框”，下列JavaScript语句正确的是（ A ）\n\nA. window.status=”已经选中该文本框”\n\nB. document.status=”已经选中该文本框”\n\nC. window.screen=”已经选中该文本框”\n\nD. document.screen=”已经选中该文本框”\n\n49、以下哪条语句会产生运行错误：（A）\nA.var obj = ();\nB.var obj = [];\nC.var obj = {};\nD.var obj = //;\n50、以下哪个单词不属于javascript保留字：（B）\nA.with\nB.parent\nC.class\nD.void\n51、请选择结果为真的表达式：（C）\nA.null instanceof Object\nB.null === undefined\nC.null == undefined\nD.NaN == NaN\n52、Javascript中, 如果已知HTML页面中的某标签对象的id=”username”，用____document.getElementById(‘username’)___ `_方法获得该标签对象。``\n53、typeof运算符返回值中有一个跟javascript数据类型不一致，它是________”function”_________。\n54、定义了一个变量，但没有为该变量赋值，如果alert该变量，javascript弹出的对话框中显示___undefined______ 。\n55、分析代码，得出正确的结果。\n```\nvar a=10, b=20 , c=30;\n\n++a;\n\na++;\n\ne=++a+(++b)+(c++)+a++;\n\nalert(e);\n\n弹出提示对话框：77\n```\n56、写出函数DateDemo的返回结果，系统时间假定为今天\n```\nfunction DateDemo(){\n\n var d, s=\"今天日期是：\";\n\n d = new Date();\n\ns += d.getMonth() + \"/\";\n\ns += d.getDate() + \"/\";\n\ns += d.getYear();\n\nreturn s;}\n```\n结果：今天日期是：7/17/2010\n\n57、写出程序运行的结果？\n```\nfor(i=0, j=0; i<10, j<6; i++, j++){\n\nk = i + j;}\n```\n结果：10\n\n58、阅读以下代码，请分析出结果：\n```\n    var arr = new Array(1 ,3 ,5);\n\n    arr[4]='z';\n\n    arr2 = arr.reverse();\n\n    arr3 = arr.concat(arr2);\n\n    alert(arr3);\n\n弹出提示对话框：z,,5,3,1,z,,5,3,1\n```\n59、补充按钮事件的函数，确认用户是否退出当前页面，确认之后关闭窗口；\n```\n <html>\n<head>\n\n<script type=”text/javascript” >\n\nfunction closeWin(){\n\n//在此处添加代码\n\nif(confirm(“确定要退出吗？”)){\n\nwindow.close();\n\n}\n\n}\n\n</script>\n\n</head>\n\n<body>\n\n<input type=”button”value=”关闭窗口”onclick=”closeWin()”/>\n\n</body>\n\n</html>\n```\n60、写出简单描述html标签（不带属性的开始标签和结束标签）的正则表达式，并将以下字符串中的html标签去除掉\n```\nvar str = “<div>这里是div<p>里面的段落</p></div>”;\n\n//\n\n<scripttype=”text/javascript”>\n\nvarreg = /<\\/?\\w+\\/?>/gi;\n\nvarstr = “<div>这里是div<p>里面的段落</p></div>”;\n\nalert(str.replace(reg,”\"));\n\n</script>\n```\n61、完成foo()函数的内容，要求能够弹出对话框提示当前选中的是第几个单选框。\n```\n<html>\n\n<head>\n\n<metahttp-equiv=”Content-Type” content=”text/html;charset=utf-8″ />\n\n</head>\n\n<body>\n\n<script type=”text/javascript” >\n\nfunction foo() {\n\n//在此处添加代码\n\nvar rdo =document.form1.radioGroup;\n\nfor(var i =0 ;i<rdo.length;i++){\n\nif(rdo.checked){\n\nalert(“您选择的是第”+(i+1)+”个单选框”);\n\n}\n\n}\n\n}\n\n</script>\n\n<body>\n\n<form name=”form1″ >\n\n<input type=”radio” name=”radioGroup”/>\n\n<input type=”radio” name=”radioGroup”/>\n\n<input type=”radio” name=”radioGroup”/>\n\n<input type=”radio” name=”radioGroup”/>\n\n<input type=”submit”/>\n\n</form>\n\n</body>\n\n</html>\n```\n62、完成函数showImg()，要求能够动态根据下拉列表的选项变化，更新图片的显示\n```\n<body>\n\n<script type=”text/javascript” >\n\nfunction showImg (oSel) {\n\n//在此处添加代码\n\nvar str = oSel.value;\n\ndocument.getElementById(“pic”).src= str+”.jpg”;\n\n}\n\n</script>\n\n<img id=”pic”src=”img1.jpg”width=”200″ height=”200″ />\n\n<br />\n\n<select id=”sel”>\n\n<option value=”img1“>城市生活</option>\n\n<option value=”img2“>都市早报</option>\n\n<option value=”img3“>青山绿水</option>\n\n</select></body>\n```\n63、截取字符串abcdefg的efg\n```\nalert('abcdefg'.substring(4));\n```\n64、列举浏览器对象模型BOM里常用的至少4个对象，并列举window对象的常用方法至少5个\n对象：Window document location screen history navigator\n\n方法：Alert() confirm() prompt() open() close()\n\n65、简述列举文档对象模型DOM里document的常用的查找访问节点的方法并做简单说明\nDocument.getElementById 根据元素id查找元素\n\nDocument.getElementByName 根据元素name查找元素\n\nDocument.getElementTagName 根据指定的元素名查找元素\n\n66、希望获取到页面中所有的checkbox怎么做？(不使用第三方框架)\n```\nvar domList = document.getElementsByTagName(‘input’)\n\nvar checkBoxList = [];\n\nvar len = domList.length;　　//缓存到局部变量\n\nwhile (len--) {　　//使用while的效率会比for循环更高\n\n　　if (domList[len].type == ‘checkbox’) {\n\n    　　checkBoxList.push(domList[len]);\n\n　　}\n\n}\n```\n67、JavaScript的数据类型都有什么？\n基本数据类型：String,Boolean,Number,Undefined,Null\n\n引用数据类型：Object(Array,Date,RegEx p,Function)\n\n68、javascript中有哪几种数据类型，分别写出中文和英文。\nstring boolean number null undefined object\n\n字符串 布尔 数值 空值 未定义 对象\n\n69、javascript中==和===的区别是什么？举例说明。\n===会自动进行类型转换，==不会\n\n70、简述创建函数的几种方式\n第一种（函数声明）：\n\nfunction sum1(num1,num2){\n\n   return num1+num2;\n\n}\n\n第二种（函数表达式）：\n\nvar sum2 = function(num1,num2){\n\n   return num1+num2;\n\n}\n\n第三种（函数对象方式）：\n\nvar sum3 = new Function(\"num1\",\"num2\",\"return num1+num2\");\n\n71、Javascript如何实现继承？\n原型链继承，借用构造函数继承，组合继承，寄生式继承，寄生组合继承\n\n72、Javascript创建对象的几种方式？\n工厂方式，构造函数方式，原型模式，混合构造函数原型模式，动态原型方式\n\n73、把 Script 标签 放在页面的最底部的body封闭之前 和封闭之后有什么区别？浏览器会如何解析它们？\n74、iframe的优缺点？\n优点：\n\n1. 解决加载缓慢的第三方内容如图标和广告等的加载问题\n\n2. Security sandbox\n\n3. 并行加载脚本\n\n缺点：\n\n1. iframe会阻塞主页面的Onload事件\n\n2. 即时内容为空，加载也需要时间\n\n3. 没有语意\n\n75、请你谈谈Cookie的弊端？\n缺点：\n\n1.`Cookie`数量和长度的限制。每个domain最多只能有20条cookie，每个cookie长度不能超过4KB，否则会被截掉。\n\n2.安全性问题。如果cookie被人拦截了，那人就可以取得所有的session信息。即使加密也与事无补，因为拦截者并不需要知道cookie的意义，他只要原样转发cookie就可以达到目的了。\n\n3.有些状态不可能保存在客户端。例如，为了防止重复提交表单，我们需要在服务器端保存一个计数器。如果我们把这个计数器保存在客户端，那么它起不到任何作用。\n\n76、DOM操作——怎样添加、移除、移动、复制、创建和查找节点。\n1. 创建新节点\n\ncreateDocumentFragment() // 创建一个DOM片段\n\ncreateElement() // 创建一个具体的元素\n\ncreateTextNode() // 创建一个文本节点\n\n2. 添加、移除、替换、插入\n\nappendChild()\n\nremoveChild()\n\nreplaceChild()\n\ninsertBefore() // 在已有的子节点前插入一个新的子节点\n\n3. 查找\n\ngetElementsByTagName() // 通过标签名称\n\ngetElementsByName() // 通过元素的Name属性的值(IE容错能力较强，会得到一个数组，其中包括id等于name值的)\n\ngetElementById() // 通过元素Id，唯一性\n\n77、js延迟加载的方式有哪些？\n    1. defer和async\n\n    2. 动态创建DOM方式（创建script，插入到DOM中，加载完毕后callBack）\n\n    3. 按需异步载入js\n\n78、documen.write和 innerHTML 的区别？\ndocument.write 只能重绘整个页面\n\ninnerHTML 可以重绘页面的一部分\n\n79、哪些操作会造成内存泄漏？\n内存泄漏指任何对象在您不再拥有或需要它之后仍然存在。\n\n垃圾回收器定期扫描对象，并计算引用了每个对象的其他对象的数量。如果一个对象的引用数量为 0（没有其他对象引用过该对象），或对该对象的惟一引用是循环的，那么该对象的内存即可回收。\n\n1. setTimeout 的第一个参数使用字符串而非函数的话，会引发内存泄漏。\n\n2. 闭包\n\n3. 控制台日志\n\n4. 循环（在两个对象彼此引用且彼此保留时，就会产生一个循环）\n\n80、javascript的typeof返回哪些数据类型?\n答：object、 number、 function 、boolean、 underfind\n\n81、split() join() 的区别\n答：前者是切割成数组的形式，后者是将数组转换成字符串\n\n82、数组方法pop() push() unshift() shift()各表示什么意思？\n答：Push()尾部添加、pop()尾部删除、Unshift()头部添加、shift()头部删除\n\n83、判断一个字符串中出现次数最多的字符，统计这个次数\n答：\n```\nvar str = 'asdfssaaasasasasaa';\nvar json = {};\nfor (var i = 0; i < str.length; i++) {\n        if(!json[str.charAt(i)]){\n                json[str.charAt(i)] = 1;\n        }else{\n                json[str.charAt(i)]++;\n        }\n};\nvar iMax = 0;\nvar iIndex = '';\nfor(var i in json){\n        if(json[i]>iMax){\n                iMax = json[i];\n                iIndex = i;\n        }\n}\nalert('出现次数最多的是:'+iIndex+'出现'+iMax+'次');\n```\n84、javascript的typeof返回哪些数据类型\nObject number function boolean underfind\n\n85、例举3种强制类型转换和2种隐式类型转换?\n强制（parseInt,parseFloat,number）\n\n隐式（== – ===）\n\n86、split() join() 的区别\n前者是切割成数组的形式，后者是将数组转换成字符串\n\n87、数组方法pop() push() unshift() shift()\nPush()尾部添加 shift() 尾部删除\n\nUnshift() 头部添加 shift() 头部删除\n\n88、事件绑定和普通事件有什么区别\n事件绑定和普通事件有什么区别\n\n89、IE和DOM事件流的区别\n1.执行顺序不一样、\n\n2.参数不一样\n\n3.事件加不加on\n\n4.this指向问题\n\n90、IE和标准下有哪些兼容性的写法\nVar ev = ev || window.event\n\ndocument.documentElement.clientWidth || document.body.clientWidth\n\nVar target = ev.srcElement||ev.target\n\n91、call和apply的区别\nObject.call(this,obj1,obj2,obj3)\n\nObject.apply(this,arguments)\n\n92、b继承a的方法\n93、写一个获取非行间样式的函数\n```\n    function getStyle(obj,attr,value)\n\n    {\n\n      if(!value)\n\n      {\n\n          if(obj.currentStyle)\n\n          {\n\n              return obj.currentStyle(attr);\n\n          }\n\n          else{\n\n              obj.getComputedStyle(attr,false);\n\n          }\n\n      }       \n\n      else\n\n      {\n\n          obj.style[attr] = value;\n\n      }\n\n    }\n```\n94、事件委托是什么\n让利用事件冒泡的原理，让自己的所触发的事件，让他的父元素代替执行！\n\nhttp://www.webasily.com/?p=78 例子可见此链接\n\n事件委托是什么\n\n95、闭包是什么，有什么特性，对页面有什么影响\n闭包就是能够读取其他函数内部变量的函数。\n\nhttp://blog.csdn.NET/gaoshanwudi/article/details/7355794 此链接可查看（问这个问题的不是一个公司）\n\n96、解释jsonp的原理，以及为什么不是真正的ajax\n动态创建script标签，回调函数\n\nAjax是页面无刷新请求数据操作\n\n97、javascript的本地对象，内置对象和宿主对象\n本地对象为array obj regexp等可以new实例化\n\n内置对象为gload Math 等不可以实例化的\n\n宿主为浏览器自带的document,window 等\n\n98、document load 和document ready的区别\nDocument.onload 是在结构和样式加载完才执行js\n\nDocument.ready原生种没有这个方法，jquery中有 $().ready(function)\n\n99、字符串反转，如将 '12345678' 变成 '87654321'\n```\n\n//大牛做法；\n\n//思路：先将字符串转换为数组 split()，利用数组的反序函数 reverse()颠倒数组，再利用 jion() 转换为字符串\n\nvar str = '12345678';\n\nstr = str.split('').reverse().join('');\n\n100、将数字 12345678 转化成 RMB形式 如： 12,345,678\n\n\n//个人方法；\n\n//思路：先将数字转为字符， str= str + '' ;\n\n//利用反转函数，每三位字符加一个 ','最后一位不加； re()是自定义的反转函数，最后再反转回去！\n\nfor(var i = 1; i <= re(str).length; i++){\n\n    tmp += re(str)[i - 1];\n\n    if(i % 3 == 0 && i != re(str).length){\n\n        tmp += ',';\n\n    }\n\n}\n```\n101、生成5个不同的随机数；\n\n\n//思路：5个不同的数，每生成一次就和前面的所有数字相比较，如果有相同的，则放弃当前生成的数字！\n```\nvar num1 = [];\n\nfor(var i = 0; i < 5; i++){\n\n    num1[i] = Math.floor(Math.random()*10) + 1; //范围是 [1, 10]\n\n    for(var j = 0; j < i; j++){\n\n        if(num1[i] == num1[j]){\n\n            i--;\n\n        }\n\n    }\n\n}\n```\n102、去掉数组中重复的数字 方法一；\n\n\n//思路：每遍历一次就和之前的所有做比较，不相等则放入新的数组中！\n\n//这里用的原型 个人做法；\n```\nArray.prototype.unique = function(){\n\n    var len = this.length,\n\n        newArr = [],\n\n        flag = 1;\n\n    for(var i = 0; i < len; i++, flag = 1){\n\n        for(var j = 0; j < i; j++){\n\n            if(this[i] == this[j]){\n\n                flag = 0;        //找到相同的数字后，不执行添加数据\n\n            }\n\n        }\n\n        flag ? newArr.push(this[i]) : '';\n\n    }\n\n    return newArr;\n\n}\n```\n    方法二：\n\n```\n\n(function(arr){\n\n    var len = arr.length,\n\n        newArr = [],\n\n        flag;\n\n    for(var i = 0; i < len; i+=1, flag = 1){\n\n        for(var j = 0; j < i; j++){\n\n            if(arr[i] == arr[j]){\n\n                flag = 0;\n\n            }  \n\n        }\n\n        flag?newArr.push(arr[i]):'';\n\n    }\n\n    alert(newArr);\n\n})([1, 1, 22, 3, 4, 55, 66]);\n\n```\n\n103、阶乘函数；\n\n\n//原型方法\n```\nNumber.prototype.N = function(){\n\n    var re = 1;\n\n    for(var i = 1; i <= this; i++){\n\n        re *= i;\n\n    }\n\n    return re;\n\n}\n\nvar num = 5;\n\nalert(num.N());\n```\n104、window.location.search() 返回的是什么？\n    答：查询(参数)部分。除了给动态语言赋值以外，我们同样可以给静态页面,并使用javascript来获得相信应的参数值\n\n        返回值：?ver=1.0&id=timlq 也就是问号后面的！\n\n105、window.location.hash 返回的是什么？\n    答：锚点 ， 返回值：#love ；\n\n106、window.location.reload() 作用？\n    答：刷新当前页面。\n\n107、阻止冒泡函数\n\n```\nfunction stopPropagation(e) {  \n\n    e = e || window.event;  \n\n    if(e.stopPropagation) { //W3C阻止冒泡方法  \n\n        e.stopPropagation();  \n\n    } else {  \n\n        e.cancelBubble = true; //IE阻止冒泡方法  \n\n    }  \n\n}  \n\ndocument.getElementById('need_hide').onclick = function(e) {  \n\n    stopPropagation(e);  \n\n}\n```\n108、什么是闭包？ 写一个简单的闭包？；\n    答：我的理解是，闭包就是能够读取其他函数内部变量的函数。在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。\n\n\n```\nfunction outer(){\n\n    var num = 1;\n\n    function inner(){\n\n        var n = 2;\n\n        alert(n + num);\n\n    }\n\n    return inner;\n\n}\n\nouter()();\n```\n109、javascript 中的垃圾回收机制？\n    答：在Javascript中，如果一个对象不再被引用，那么这个对象就会被GC回收。如果两个对象互相引用，而不再  被第3者所引用，那么这两个互相引用的对象也会被回收。因为函数a被b引用，b又被a外的c引用，这就是为什么  函数a执行后不会被回收的原因。\n\n110、看题做答：\n\n```\nfunction f1(){\n\n    var tmp = 1;\n\n    this.x = 3;\n\n    console.log(tmp);    //A\n\n    console.log(this.x)；     //B\n\n}\n\nvar obj = new f1(); //1\n\nconsole.log(obj.x)     //2\n\nconsole.log(f1());        //3\n```\n    分析：    \n\n        这道题让我重新认识了对象和函数，首先看代码（1），这里实例话化了 f1这个类。相当于执行了 f1函数。所以这个时候 A 会输出 1， 而 B 这个时候的 this 代表的是 实例化的当前对象 obj B 输出 3.。 代码（2）毋庸置疑会输出 3， 重点 代码（3）首先这里将不再是一个类，它只是一个函数。那么 A输出 1， B呢？这里的this 代表的其实就是window对象，那么this.x 就是一个全局变量 相当于在外部 的一个全局变量。所以 B 输出 3。最后代码由于f没有返回值那么一个函数如果没返回值的话，将会返回 underfined ，所以答案就是 ： 1， 3， 3， 1， 3， underfined 。\n\n111、下面输出多少？\n\n```\nvar o1 = new Object();\n\nvar o2 = o1;\n\no2.name = \"CSSer\";\n\nconsole.log(o1.name);\n```\n  如果不看答案，你回答真确了的话，那么说明你对javascript的数据类型了解的还是比较清楚了。js中有两种数据类型，分别是：基本数据类型和引用数据类型（object Array）。对于保存基本类型值的变量，变量是按值访问的，因为我们操作的是变量实际保存的值。对于保存引用类型值的变量，变量是按引用访问的，我们操作的是变量值所引用（指向）的对象。答案就清楚了：  //CSSer;\n\n112、再来一个\n\n```\nfunction changeObjectProperty (o) {\n\n    o.siteUrl = \"http://www.csser.com/\";\n\n    o = new Object();\n\n    o.siteUrl = \"http://www.popcg.com/\";\n\n}\n\nvar CSSer = new Object();\n\nchangeObjectProperty(CSSer);\n\nconsole.log(CSSer.siteUrl); //\n```\n    如果CSSer参数是按引用传递的，那么结果应该是\"http://www.popcg.com/\"，但实际结果却仍是\"http://www.csser.com/\"。事实是这样的：在函数内部修改了引用类型值的参数，该参数值的原始引用保持不变。我们可以把参数想象成局部变量，当参数被重写时，这个变量引用的就是一个局部变量，局部变量的生存期仅限于函数执行的过程中，函数执行完毕，局部变量即被销毁以释放内存。    \n\n    （补充：内部环境可以通过作用域链访问所有的外部环境中的变量对象，但外部环境无法访问内部环境。每个环境都可以向上搜索作用域链，以查询变量和函数名，反之向下则不能。）\n\n113、输出多少？\n\n```\nvar a = 6;\n\nsetTimeout(function () {    \n\n    var a = 666;\n\n    alert(a);      // 输出666，\n\n}, 1000);\n\na = 66;\n```\n因为var a = 666;定义了局部变量a，并且赋值为666，根据变量作用域链，\n全局变量处在作用域末端，优先访问了局部变量，从而覆盖了全局变量 。\n\n\n```\nvar a = 6;\n\nsetTimeout(function () {    \n\n    alert(a);      // 输出undefined\n\n    var a = 666;\n\n}, 1000);\n\na = 66;\n```\n因为var a = 666;定义了局部变量a，同样覆盖了全局变量，但是在alert(a);之前\na并未赋值，所以输出undefined。\n\n\n```\nvar a = 6;\n\nsetTimeout(function(){\n\n    alert(a);\n\n    var a = 66;\n\n}, 1000);\n\na = 666;\n\nalert(a);\n\n// 666, undefined;\n```\n记住： 异步处理，一切OK 声明提前\n\n114、输出多少？\n\n```\nfunction setN(obj){\n\n    obj.name='屌丝';\n\n    obj = new Object();\n\n    obj.name = '腐女';\n\n};\n\nvar per = new Object();\n\nsetN(per);\n\nalert(per.name);  //屌丝 内部\n```\n115、JS的继承性\n\n```\nwindow.color = 'red';\n\nvar o = {color: 'blue'};\n\nfunction sayColor(){\n\n    alert(this.color);\n\n}\n\nsayColor(); //red\n\nsayColor.call(this); //red this-window对象\n\nsayColor.call(window); //red\n\nsayColor.call(o); //blue\n```\n116、精度问题: JS 精度不能精确到 0.1 所以  。。。。同时存在于值和差值中\n```\n\nvar n = 0.3,m = 0.2, i = 0.2, j = 0.1;\n\nalert((n - m) == (i - j)); //false\n\nalert((n-m) == 0.1); //false\n\nalert((i-j)==0.1); //true\n```\n117、加减运算\n\n```\nalert('5'+3); //53 string\n\nalert('5'+'3'); //53 string\n\nalert('5'-3); //2 number\n\nalert('5'-'3'); //2 number\n```\n118、什么是同源策略？\n    指： 同协议、端口、域名的安全策略，由王景公司提出来的安全协议！\n\n119、call和applay的区别是什么？\n    参数形式不同，call(obj, pra, pra)后面是单个参数。applay(obj, [args])后面是数组。\n\n120、为什么不能定义1px左右的div容器？   \nIE6下这个问题是因为默认的行高造成的，解决的方法也有很多，例如：\n\noverflow:hidden | zoom:0.08 | line-height:1px\n\n121、结果是什么？\n\n```\nfunction foo(){\n\n    foo.a = function(){alert(1)};\n\n    this.a = function(){alert(2)};\n\n    a = function(){alert(3)};\n\n    var a = function(){alert(4)};\n\n};\n\nfoo.prototype.a = function(){alert(5)};\n\nfoo.a = function(){alert(6)};\n\nfoo.a(); //6\n\nvar obj = new foo();\n\nobj.a(); //2\n\nfoo.a(); //1\n```\n122、输出结果\n\n```\nvar a = 5;\n\nfunction test(){\n\n    a = 0;\n\n    alert(a);\n\n    alert(this.a); //没有定义 a这个属性\n\n    var a;\n\n    alert(a)\n\n}\n\ntest(); // 0, 5, 0\n\nnew test(); // 0, undefined, 0 //由于类它自身没有属性a， 所以是undefined\n```\n123、计算字符串字节数：\n```\n\nnew function(s){\n\n     if(!arguments.length||!s) return null;  \n\n     if(\"\"==s) return 0;     \n\n     var l=0;\n\n     for(var i=0;i<s.length;i++){        \n\n         if(s.charCodeAt(i)>255) l+=2; else l+=1;  //charCodeAt()得到的是unCode码   \n\n     }     //汉字的unCode码大于 255bit 就是两个字节\n\n     alert(l);\n\n}(\"hello world!\");\n```\n124、结果是：\n\n\nvar bool = !!2; alert(bool)；//true;\n\n双向非操作可以把字符串和数字转换为布尔值。\n\n125、声明对象，添加属性，输出属性\n\n```\n    var obj = {\n\n        name: 'leipeng',\n\n        showName: function(){\n\n            alert(this.name);\n\n        }\n\n    }\n\nobj.showName();\n```\n126、匹配输入的字符：第一个必须是字母或下划线开头，长度5-20\n\n```\nvar reg = /^[a-zA-Z][a-zA-Z0-9_]{5,20}/,\n\n            name1 = 'leipeng',\n\n            name2 = '0leipeng',\n\n            name3 = '你好leipeng',\n\n            name4 = 'hi';\n\n\n\n        alert(reg.test(name1));\n\n        alert(reg.test(name2));\n\n        alert(reg.test(name3));\n\n        alert(reg.test(name4));\n```\n127、检测变量类型\n\n\nfunction checkStr(str){\n\n        typeof str == 'string'? alert('true'):alert('false');\n\n    }\n\n    checkStr('leipeng');\n\n128、如何在HTML中添加事件，几种方法？\n    1、标签之中直接添加 onclick=\"fun()\";\n\n    2、JS添加 Eobj.onclick = method;\n\n    3、现代事件  IE： obj.attachEvent('onclick', method)；\n\n                   FF: obj.addEventListener('click', method, false);\n\n129、BOM对象有哪些，列举window对象？\n    1、window对象 ，是JS的最顶层对象，其他的BOM对象都是window对象的属性；\n\n    2、document对象，文档对象；\n\n    3、location对象，浏览器当前URL信息；\n\n    4、navigator对象，浏览器本身信息；\n\n    5、screen对象，客户端屏幕信息；\n\n    6、history对象，浏览器访问历史信息；\n\n130、请问代码实现 outerHTML\n    //说明：outerHTML其实就是innerHTML再加上本身；\n\n\n```\nObject.prototype.outerHTML = function(){\n\n        var innerCon = this.innerHTML, //获得里面的内容\n\n            outerCon = this.appendChild(innerCon); //添加到里面\n\n        alert(outerCon);\n\n    }\n```\n    演示代码：\n\n```\n\n <!doctype html>\n\n <html>\n\n  <head>\n\n    <meta charset=\"UTF-8\">\n\n    <title>Document</title>\n\n  </head>\n\n  <body>\n\n    <div id=\"outer\">\n\n       hello\n\n    </div>\n\n  <script>\n\n    Object.prototype.outerHTML = function(){\n\n    var innerCon = this.innerHTML, //获得里面的内容\n\n    outerCon = this.appendChild(innerCon); //添加到里面\n\n    alert(outerCon);\n\n      }\n\n    function $(id){\n\n   return document.getElementById(id);\n\n   }\n\n   alert($('outer').innerHTML);\n\n   alert($('outer').outerHTML);\n\n  </script>\n\n </body>\n\n </html>\n```\n131、JS中的简单继承 call方法！\n```\n\n//顶一个父母类，注意：类名都是首字母大写的哦！\n\n  function Parent(name, money){\n\n            this.name = name;\n\n            this.money = money;\n\n            this.info = function(){\n\n                alert('姓名： '+this.name+' 钱： '+ this.money);\n\n            }\n\n        }\n\n        //定义孩子类\n\n        function Children(name){\n\n            Parent.call(this, name); //继承 姓名属性，不要钱。  \n\n            this.info = function(){\n\n                alert('姓名： '+this.name);\n\n            }\n\n        }\n\n        //实例化类\n\n        var per = new Parent('parent', 800000000000);\n\n        var chi = new Children('child');\n\n        per.info();\n\n        chi.info();\n```\n132、bind(), live(), delegate()的区别\n    bind： 绑定事件，对新添加的事件不起作用，方法用于将一个处理程序附加到每个匹配元素的事件上并返回jQuery对象。\n\n    live： 方法将一个事件处理程序附加到与当前选择器匹配的所有元素（包含现有的或将来添加的）的指定事件上并返回jQuery对象。\n\n    delegate： 方法基于一组特定的根元素将处理程序附加到匹配选择器的所有元素（现有的或将来的）的一个或多个事件上。\n\n133、typeof 的返回类型有哪些？   \n\n\n    alert(typeof [1, 2]); //object\n\n    alert(typeof 'leipeng'); //string\n\n    var i = true;\n\n    alert(typeof i); //boolean\n\n    alert(typeof 1); //number\n\n    var a;\n\n    alert(typeof a); //undefined\n\n    function a(){;};\n\n    alert(typeof a) //function\n\n134、简述link和import的区别？\n区别1：link是XHTML标签，除了加载CSS外，还可以定义RSS等其他事务；@import属于CSS范畴，只能加载CSS。\n\n区别2：link引用CSS时，在页面载入时同时加载；@import需要页面网页完全载入以后加载。\n\n区别3：link是XHTML标签，无兼容问题；@import是在CSS2.1提出的，低版本的浏览器不支持。\n\n区别4：link支持使用Javascript控制DOM去改变样式；而@import不支持。\n\n135、window.onload 和 document.ready的区别？\nload要等到图片和包含的文件都加在进来之后执行；\n\nready是不包含图片和非文字文件的文档结构准备好就执行；\n\n136、 解析URL成一个对象？\n            String.prototype.urlQueryString = function(){\n\n                var url = this.split('?')[1].split('&'),\n\n                    len = url.length;\n\n\n\n                this.url = {};\n\n                for(var i = 0; i < len; i += 1){\n\n                    var cell = url[i].split('='),    \n\n                        key = cell[0],\n\n                        val = cell[1];\n\n                    this.url[''+key+''] = val;\n\n                }\n\n                return this.url;\n\n            }\n\n            var url = '?name=12&age=23';\n\n            console.log(url.urlQueryString().age);\n\n137、看下列代码输出什么？\nvar foo = \"11\"+2-\"1\";\n\nconsole.log(foo);\n\nconsole.log(typeof foo);\n执行完后foo的值为111，foo的类型为Number。\n138、看下列代码,输出什么？\nvar a = new Object();\na.value = 1;\nb = a;\nb.value = 2;\nalert(a.value);\n执行完后输出结果为2\n139、已知数组var stringArray = [\"This”, \"is”, \"Baidu”, \"Campus”]，Alert出”This is Baidu Campus”。\n答案：alert(stringArray.join(\"\"))\n\n140、已知有字符串foo=\"get-element-by-id\",写一个function将其转化成驼峰表示法\"getElementById\"。\n答案：\n```\nfunction combo(msg){\n\n  var arr = msg.split(\"-\");\n\n  var len = arr.length;  //将arr.length存储在一个局部变量可以提高for循环效率\n\n  for(var i=1;i<len;i++){\n\n    arr[i]=arr[i].charAt(0).toUpperCase()+arr[i].substr(1,arr[i].length-1);\n\n  }\n\n  msg=arr.join(\"\");\n\n  return msg;\n\n}\n```\n141、怎样添加、移除、移动、复制、创建和查找节点\n　　1）创建新节点\n\ncreateDocumentFragment() //创建一个DOM片段\ncreateElement() //创建一个具体的元素\ncreateTextNode() //创建一个文本节点\n\n2）添加、移除、替换、插入\nappendChild() //添加\nremoveChild() //移除\nreplaceChild() //替换\ninsertBefore() //插入\n\n3）查找\ngetElementsByTagName() //通过标签名称\ngetElementsByName() //通过元素的Name属性的值\ngetElementById() //通过元素Id，唯一性\n\n142、原生JS的window.onload与Jquery的$(document).ready(function(){})有什么不同？\n　　window.onload()方法是必须等到页面内包括图片的所有元素加载完毕后才能执行。\n\n$(document).ready()是DOM结构绘制完毕后就执行，不必等到加载完毕。\n\n\n\n143、你如何优化自己的代码？\n代码重用\n\n避免全局变量（命名空间，封闭空间，模块化mvc..）\n\n拆分函数避免函数过于臃肿\n\n注释\n\n144、请描述出下列代码运行的结果\n```\nfunction d(){\n\n        console.log(this);\n\n}\n\nd();\n```\n145、需要将变量e的值修改为“a+b+c+d”,请写出对应的代码\nvar e=”abcd”;\n\n设计一段代码能够遍历下列整个DOM节点\n```\n    <div>\n\n            <p>\n\n                <span><a/></span>\n\n                <span><a/></span>\n\n            </p>\n\n            <ul>\n\n                <li></li>\n\n                <li></li>\n\n            </ul>\n\n    </div>\n```\n146、怎样实现两栏等高？\n147、使用js实现这样的效果：在文本域里输入文字时，当按下enter键时不换行，而是替换成“{{enter}}”,(只需要考虑在行尾按下enter键的情况).\n148、以下代码中end字符串什么时候输出\n```\nvar t=true;\n\nsetTimeout(function(){\n\n    console.log(123);\n\n    t=false;\n\n    },1000);\n\nwhile(t){}\n\nconsole.log(‘end’);\n```\n149、specify(‘hello,world’)//=>’h,e,l,l,o,w,o,r,l,d’实现specify函数\n150、请将一个URL的search部分参数与值转换成一个json对象\n151、请用原生js实现jquery的get\\post功能，以及跨域情况下\n152、请简要描述web前端性能需要考虑哪方面，你的优化思路是什么？\n153、简述readyonly与disabled的区别\n154、判断一个字符吕串出现次数最多的字符，统计这个次数并输出\n155、编写一个方法，去掉一个数组的复重元素\n156、写出3个使用this的典型应用\n157、请尽可能详尽的解释ajax的工作原理\n158、为什么扩展javascript内置对象不是好的做法？\n159、请解释一下javascript的同源策略\n160、什么是三元表达式？“三元”表示什么意思？\n161、浏览器标准模式和怪异模式之间的区别是什么？\n162、如果设计中使用了非标准的字体，你该如何去实现？\n163、用css分别实现某个div元素上下居中和左右居中\n164、modulo(12,5)//2  实现满足这个结果的modulo函数\n165、HTTP协议中，GET和POST有什么区别？分别适用什么场景 ？\n166、HTTP状态消息200 302 304 403 404 500分别表示什么\n167、HTTP协议中，header信息里面，怎么控制页面失效时间（last-modified,cache-control,Expires分别代表什么）\n168、HTTP雷锋议目前常用的有哪几个？KEEPALIVE从哪个版本开始出现的？\n169、业界常用的优化WEB页面加载速度的方法（可以分别从页面元素展现，请求连接，css,js,服务器等方面介绍）\n170、列举常用的web页面开发，调试以及优化工具\n171、解释什么是sql注入，xss漏洞\n172、如何判断一个js变量是数组类型\n173、请列举js数组类型中的常用方法\n174、FF与IE中如何阻止事件冒泡，如何获取事件对象，以及如何获取触发事件的元素\n175、列举常用的js框架以及分别适用的领域\n176、js中如何实现一个map\n177、js可否实现面向对象编程，如果可以如何实现js对象的继承\n178、约瑟夫环—已知n个人（以编号1，2，3…分别表示）围坐在一张圆桌周围。从编号为k的人开始报数，数到m的那个人出列；他的下一个人又从1开始报数，数到m的那个人又出列；依此规律重复下去，直到圆桌周围的人全部出列。\n179、有1到10w这个10w个数，去除2个并打乱次序，如何找出那两个数？\n180、如何获取对象a拥有的所有属性（可枚举的、不可枚举的，不包括继承来的属性）\n181、有下面这样一段HTML结构，使用css实现这样的效果：\n左边容器无论宽度如何变动，右边容器都能自适应填满父容器剩余的宽度。\n\n<div class=”warp”>\n\n<div class=”left”></div>\n\n<div class=”right”></div>\n\n</div>\n\n182、下面这段代码想要循环昝输出结果01234，请问输出结果是否正确，如果不正确，请说明为什么，并修改循环内的代码使其输出正确结果\nfor(var i=0;i<5;++i){\n\n    setTimeout(function(){\n\n            console.log(i+’’);\n\n        },100*i);\n\n}\n\n183、解释下这个css选择器什么发生什么？\n[role=nav]>ul a:not([href^-mailto]){}\n\n184、JavaScript以下哪条语句会产生运行错误         \nA. var obj = ();    B. var obj = [];    C. var obj = {};    D. var obj = //;\n\n答案：AD\n\n185、以下哪些是javascript的全局函数：（ABC）\nA. escape   函数可对字符串进行编码，这样就可以在所有的计算机上读取该字符串。ECMAScript v3 反对使用该方法，应用使用 decodeURI() 和 decodeURIComponent() 替代它。\n\nB. parseFloat   parseFloat() 函数可解析一个字符串，并返回一个浮点数。\n\n该函数指定字符串中的首个字符是否是数字。如果是，则对字符串进行解析，直到到达数字的末端为止，然后以数字返回该数字，而不是作为字符串。\n\nC. eval 函数可计算某个字符串，并执行其中的的 JavaScript 代码。\n\nD. setTimeout\n\nE. alert\n\n186、关于IE的window对象表述正确的有：（ACD）\nA. window.opener属性本身就是指向window对象\n\nB. window.reload()方法可以用来刷新当前页面  应该是location.reload或者window.location.reload\n\nC. window.location=”a.html”和window.location.href=”a.html”的作用都是把当前页面替换成a.html页面\n\nD. 定义了全局变量g；可以用window.g的方式来存取该变量\n\n187、描述错误的是\nA：Http状态码302表示暂时性转移 对\n\nB:domContentLoaded事件早于onload事件  onload 事件会在页面或图像加载完成后立即发生。\n\nC: IE678不支持事件捕获\n\nD:localStorage 存储的数据在电脑重启后丢失     没有时间限制\n\ntry...catch 语句。(在 IE5+、Mozilla 1.0、和 Netscape 6 中可用)\n\n188、关于link和@import的区别正确的是  A\nA: link属于XHTML标签，而@import是CSS提供的；\n\nB：页面被加载时，link会同时被加载，而后者引用的CSS会等到页面被加载完再加载\n\nC：import只在IE5以上才能识别 而link是XHTML标签，无兼容问题\n\nD: link方式的样式的权重高于@import的权重\n\n189、下面正确的是  A\nA: 跨域问题能通过JsonP方案解决 B：不同子域名间仅能通过修改window.name解决跨域   还可以通过script标签src  jsonp等h5 Javasplit等\n\nC：只有在IE中可通过iframe嵌套跨域 D：MediaQuery属性是进行视频格式检测的属性是做响应式的\n\n188、错误的是\nA: Ajax本质是XMLHttpRequest       \n\nB: 块元素实际占用的宽度与它的width、border、padding属性有关，与background无关\n\nC: position属性absolute、fixed、---relative---会使文档脱标\n\nD:  float属性left也会使div脱标\n\n189、不用任何插件，如何实现一个tab栏切换？\n190、基本数据类型的专业术语以及单词拼写\n191、变量的命名规范以及命名推荐\n192、三种弹窗的单词以及三种弹窗的功能\n193、console.log( 8 | 1 ); 输出值是多少？\n答案：9\n\n194、只允许使用 + - * / 和 Math.* ，求一个函数 y = f(x, a, b);当x > 100 时返回 a 的值，否则返回 b 的值，不能使用 if else 等条件语句，也不能使用|,?:,数组。\n答案：\n```\nfunction f(x, a, b) {\n\n    var temp = Math.ceil(Math.min(Math.max(x - 100, 0), 1));\n\n    return a * temp + b * (1 - temp);\n\n}\n\nconsole.log(f(-10, 1, 2));\n```\n195、JavaScriptalert(0.4*0.2);结果是多少？和你预期的一样吗？如果不一样该如何处理？\n    有误差，应该比准确结果偏大。 一般我会将小数变为整数来处理。当前之前遇到这个问题时也上网查询发现有人用try catch return写了一个函数，\n\n    当然原理也是一致先转为整数再计算。看起来挺麻烦的，我没用过。\n\n196、一个div，有几种方式得到这个div的jQuery对象？<div class='aabbcc' id='nodesView'></div>想直接获取这个div的dom对象，如何获取？dom对象如何转化为jQuery对象？\n197、主流浏览器内核\nIE trident  火狐gecko   谷歌苹果webkit  Opera：Presto\n\n198、如何显示/隐藏一个dom元素？请用原生的JavaScript方法实现\n199、JavaScript有哪几种数据类型\n    Number String Boolean Null Undefined Object\n\n200、jQuery框架中$.ajax()的常用参数有哪些？写一个post请求并带有发送数据和返回数据的样例\n201、JavaScript数组元素添加、删除、排序等方法有哪些？\nArray.concat( ) 连接数组\n\nArray.join( ) 将数组元素连接起来以构建一个字符串\n\nArray.length 数组的大小\n\nArray.pop( ) 删除并返回数组的最后一个元素\n\nArray.push( ) 给数组添加元素\n\nArray.reverse( ) 颠倒数组中元素的顺序\n\nArray.shift( ) 将元素移出数组\n\nArray.slice( ) 返回数组的一部分\n\nArray.sort( ) 对数组元素进行排序\n\nArray.splice( ) 插入、删除或替换数组的元素\n\nArray.toLocaleString( ) 把数组转换成局部字符串\n\nArray.toString( ) 将数组转换成一个字符串\n\nArray.unshift( ) 在数组头部插入一个元素\n\n202、如何添加html元素的事件，有几种方法？请列举\n直接在标签里添加；在元素上添加、使用事件注册函数添加\n\n203、JavaScript的循环语句有哪些？\nwhile  for  do while  forEach\n\n204、作用域-编译期执行期以及全局局部作用域问题\n理解js执行主要的两个阶段：预解析和执行期\n\n205、闭包：下面这个ul，如何点击每一列的时候alert其index？\n```\n    <ul id=\"test\">\n\n    <li>这是第一条</li>\n\n    <li>这是第二条</li>\n\n    <li>这是第三条</li>\n\n    </ul>\n```\n206、列出3条以上ff和IE的脚本兼容问题\n1、在IE下可通过document.frames[\"id\"];得到该IFRAME对象，\n\n而在火狐下则是通过document.getElementById(\"content_panel_if\").contentWindow;\n\n2、IE的写法： `_tbody=_table.childNodes[0]``\n\n在FF中，firefox会在子节点中包含空白则第一个子节点为空白\"\"， 而ie不会返回空白\n\n可以通过if(\"\" != node.nodeName)过滤掉空白子对象\n\n3、模拟点击事件\n```\nif(document.all){  //ie下\n\n    document.getElementById(\"a3\").click();  \n\n}\n\nelse{  //非IE\n\n    var evt = document.createEvent(\"MouseEvents\");\n\n    evt.initEvent(\"click\", true, true);\n\n    document.getElementById(\"a3\").dispatchEvent(evt);\n\n}\n```\n\n4、事件注册\n\nif (isIE){window.attachEvent(\"onload\", init);}else{window.addEventListener(\"load\", init, false);}\n\n207、列举可以哪些方面对前端开发进行优化\n代码压缩、合并减少http请求，图片制作精灵图、代码优化\n\n208、至少列出一种JavaScript继承的实现方式\n209、如现在有一个效果，有显示用户头像、用户昵称、用户其他信息；当用户鼠标移到头像上时，会弹出用户的所有信息；如果是你，你会如何实现这个功能，请用代码实现？\n210、call与apply有什么作用？又有什么什么区别？用callee属性实现函数递归？\napply的参数是数组,call的参数是单个的值，除此之外，两者没有差别，重点理解this的改变，callee已经不推荐使用\n\n211、用正则表达式，写出由字母开头，其余由数字、字母、下划线组成的6~30的字符串？\n212、列举浏览器对象模型BOM里常用的至少4个对象，并列举window对象的常用方法至少5个 （10分）\n对象：Window document location screen history navigator\n\n方法：Alert() confirm() prompt() open() close()\n\n213、Javascript中callee和caller的作用？\ncaller是返回一个对函数的引用，该函数调用了当前函数；\n\ncallee是返回正在被执行的function函数，也就是所指定的function对象的正文。\n\n214、对于apply和call两者在作用上是相同的，即是调用一个对象的一个方法，以另一个对象替换当前对象。将一个函数的对象上下文从初始的上下文改变为由 thisObj 指定的新对象。\n但两者在参数上有区别的。对于第一个参数意义都一样，但对第二个参数：?apply传入的是一个参数数组，也就是将多个参数组合成为一个数组传入，而call则作为call的参数传入（从第二个参数开始）。?如 func.call(func1,var1,var2,var3)对应的apply写法为：func.apply(func1,[var1,var2,var3]) 。\n\n215、在Javascript中什么是伪数组？如何将伪数组转化为标准数组？\n伪数组（类数组）：无法直接调用数组方法或期望length属性有什么特殊的行为，但仍可以对真正数组遍历方法来遍历它们。典型的是函数的argument参数，还有像调用getElementsByTagName,document.childNodes之类的,它们都返回NodeList对象都属于伪数组。可以使用Array.prototype.slice.call(fakeArray)将数组转化为真正的Array对象。\n\n216、写一个函数可以计算 sum(5,0,-5);输出0; sum(1,2,3,4);输出10;\nJs基本功\n\n217、事件代理怎么实现？\n在元素的父节点注册事件，通过事件冒泡，在父节点捕获事件\n\n218、《正则》写出正确的正则表达式匹配固话号，区号3-4位，第一位为0，中横线，7-8位数字，中横线，3-4位分机号格式的固话号\n常用正则表达式语法要熟悉\n\n219、《算法》 一下A,B可任选一题作答，两题全答加分\nA:农场买了一只羊，第一年是小羊，第二年底生一只，第三年不生，第四年底再生一只，第五年死掉。\n\nB:写出代码对下列数组去重并从大到小排列{5,2,3,6,8,6,5,4,7,1,9}\n\n220、请写出一张图片的HTML代码，已知道图片地址为“images/abc.jpg”,宽100px，高50px\n221、请写一个正则表达式：要求最短6位数，最长20位，阿拉伯数和英文字母（不区分大小写）组成\n```\n^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[a-zA-Z\\d]{6,20}$\n```\n\n222、统计1到400亿之间的自然数中含有多少个1？比如1-21中，有1、10、11、21这四个自然数有5个1\n223、删除与某个字符相邻且相同的字符，比如fdaffdaaklfjklja字符串处理之后成为“fdafdaklfjklja”\n224、请写出三种以上的Firefox有但InternetExplorer没有的属性和函数\n1、在IE下可通过document.frames[\"id\"];得到该IFRAME对象，\n\n而在火狐下则是通过document.getElementById(\"content_panel_if\").contentWindow;\n\n2、IE的写法： `_tbody=_table.childNodes[0]``\n\n在FF中，firefox会在子节点中包含空白则第一个子节点为空白\"\"， 而ie不会返回空白\n\n可以通过if(\"\" != node.nodeName)过滤掉空白子对象\n\n3、模拟点击事件\n```\nif(document.all){  //ie下\n\n    document.getElementById(\"a3\").click();\n\n}\n\nelse{  //非IE\n\n    var evt = document.createEvent(\"MouseEvents\");\n\n    evt.initEvent(\"click\", true, true);\n\n    document.getElementById(\"a3\").dispatchEvent(evt);\n\n}\n```\n4、事件注册\n\nif (isIE){window.attachEvent(\"onload\", init);}else{window.addEventListener(\"load\", init, false);}\n\n225、请写出一个程序，在页面加载完成后动态创建一个form表单，并在里面添加一个input对象并给它任意赋值后义post方式提交到：http://127.0.0.1/save.php\n\n\n226、用JavaScript实现冒泡排序。数据为23、45、18、37、92、13、24\n面试经常遇到的排序，查找算法要熟悉\n\n227、解释一下什么叫闭包，并实现一段闭包代码\n简单理解就是函数的嵌套形成闭包，闭包包括函数本身及其外部作用域\n\n228、简述一下什么叫事件委托以及其原理\n在元素的父节点注册事件，通过事件冒泡，在父节点捕获事件\n\n229、前端代码优化的方法\n```\nvar User = { 对象\n\n    count = 1，属性\n\n    getCount：function（）{ 方法\n\n        return this.count;\n\n    }\n\n}\n\nconsole.log(User.getCount());\n\nvar func = User.getCount;\n\nconsole.log(func());\n\n1 undefined（window）;\n```\n230、下列JavaScript代码执行后，依次alert的结果是\n```\n(function test(){\n\n      var a=b=5;\n\n      alert(typeof a);\n\n      alert(typeof b);\n\n})();\n\nalert(typeof a);\n\nalert(typeof b);\n```\n231、下列JavaScript代码执行后，iNum的值是\n```\nvar iNum = 0;\n\nfor(var i = 1; i< 10; i++){\n\n     if(i % 5 == 0){\n\n         continue;\n\n    }\n\n    iNum++;\n\n}\n```\n232、输出结果是多少？\n```\n     1）  var a;\n\n    var b = a * 0;\n\n    if (b == b) {\n\n         console.log(b * 2 + \"2\" - 0 + 4);\n\n    } else {\n\n         console.log(!b * 2 + \"2\" - 0 + 4);\n\n    }\n```\n答案：26\n\n2）\n```\n<script>\n\n     var a = 1;\n\n</script>\n\n<script>\n\nvar a;\n\nvar b = a * 0;\n\nif (b == b) {\n\n        console.log(b * 2 + \"2\" - 0 + 4);\n\n} else {\n\n        console.log(!b * 2 + \"2\" - 0 + 4);\n\n}\n\n</script>\n```\n答案：6\n\n3）\n```\n var t = 10;\n\nfunction test(t){\n\n       var t = t++;\n\n}test(t);\n\nconsole.log(t);\n```\n答案：10\n\n4）\n```\nvar t = 10;\n\nfunction test(test){\n\n      var t = test++;\n\n}test(t);\n\nconsole.log(t);\n\n答案：10\n```\n6）\n```\nvar t = 10;\n\nfunction test(test){\n\n       t = test++;\n\n}test(t);\n\nconsole.log(t);\n\n答案：10\n```\n7） var t = 10;\n```\nfunction test(test){\n\n      t = t + test;\n\n      console.log(t);\n\n      var t = 3;\n\n}test(t);\n\nconsole.log(t);\n```\n答案：NaN  10\n\n8）var a;\n```\nvar b = a / 0;\n\nif (b == b) {\n\n        console.log(b * 2 + \"2\" - 0 + 4);\n\n} else {\n\n        console.log(!b * 2 + \"2\" - 0 + 4);\n\n}\n```\n答案：26\n```\n9）<script>\n\n      var a = 1;\n\n</script>\n\n<script>\n\n    var a;\n\n    var b = a / 0;\n\n    if (b == b) {\n\n        console.log(b * 2 + \"2\" + 4);\n\n    } else {\n\n        console.log(!b * 2 + \"2\" + 4);\n\n    }\n\n</script>\n\n答案：Infinity24\n```\n233、\n```\n<body>\n\n<form id='form1'>\n\n<div id='div1'></div>\n\n<div id='div2'></div>\n\n<div id='div3'></div>\n\n<div id='div4'></div>\n\n<div id='div5'></div>\n\n<div id='div3'>id名重复的元素</div>\n\n</form>\n\n</body>\n```\n用程序实现找到html中id名相同的元素？\n\n234、下列JavaScript代码执行后，运行的结果是\n```\n<button id='btn'>点击我</button>\n\nvar btn = document.getElementById('btn');\n\nvar handler = {\n\n    id: '_eventHandler',\n\n    exec: function(){\n\n        alert(this.id);\n\n    }\n\n}\n\nbtn.addEventListener('click', handler.exec.false);\n```\n235、下列JavaScript代码执行后，依次alert的结果是\n```\nvar obj = {proto: {a:1,b:2}};\n\nfunction F(){};\n\nF.prototype = obj.proto;\n\nvar f = new F();\n\nobj.proto.c = 3;\n\nobj.proto = {a:-1, b:-2};\n\nalert(f.a);\n\nalert(f.c);\n\ndelete F.prototype['a'];\n\nalert(f.a);\n\nalert(obj.proto.a);\n```\n236、下列JavaScript代码执行后的效果是\n```\n<ul id='list'>\n\n<li>item</li>\n\n<li>item</li>\n\n<li>item</li>\n\n<li>item</li>\n\n<li>item</li>\n\n</ul>\n\nvar items = document.querySelectorAll('#list>li');\n\nfor(var i = 0;i < items.length; i++){\n\n     setTimeout(function(){\n\n           items[i].style.backgroundColor = '#fee';\n\n    }, 5);\n\n}\n```\n237、下列JavaScript代码执行后的li元素的数量是\n```\n<ul>\n\n<li>Item</li>\n\n<li></li>\n\n<li></li>\n\n<li>Item</li>\n\n<li>Item</li>\n\n</ul>\n\nvar items = document.getElementsByTagName('li');\n\nfor(var i = 0; i< items.length; i++){\n\n    if(items[i].innerHTML == ''){\n\n        items[i].parentNode.removeChild(items[i]);\n\n    }\n\n}\n```\n238、程序中捕获异常的方法？\nwindow.error\n\ntry{}catch(){}finally{}\n\n239、将字符串”<tr><td>{$id}</td><td>{$name}</td></tr>”中的{$id}替换成10，{$name}替换成Tony （使用正则表达式）\n答案：”<tr><td>{$id}</td><td>{$id}_{$name}</td></tr>”.replace(/{\\$id}/g,?’10′).replace(/{\\$name}/g,?‘Tony’);\n\n240、给String对象添加一个方法，传入一个string类型的参数，然后将string的每个字符间价格空格返回，例如：\naddSpace(“hello world”) // -> ‘h e l l o ?w o r l d’\n\n         String.prototype.spacify = function(){\n\nreturn this.split('').join(' ');\n\n};\n\n241、写出函数DateDemo的返回结果，系统时间假定为今天\n```\nfunction DateDemo(){\n\n var d, s=\"今天日期是：\";\n\nd = new Date();\n\ns += d.getMonth() + \"/\";\n\ns += d.getDate() + \"/\";\n\ns += d.getYear();\n\n return s;\n\n}\n\n结果：今天日期是：7/17/2010\n```\n242、输出今天的日期，以YYYY-MM-DD的方式，比如今天是2014年9月26日，则输出2014-09-26\n```\nvar d = new Date();\n\n// 获取年，getFullYear()返回4位的数字\n\nvar year = d.getFullYear();\n\n// 获取月，月份比较特殊，0是1月，11是12月\n\nvar month = d.getMonth() + 1;\n\n// 变成两位\n\nmonth = month < 10 ? '0' + month : month;\n\n// 获取日\n\nvar day = d.getDate();\n\nday = day < 10 ? '0' + day : day;\n\nalert(year + '-' + month + '-' + day);\n```\n243、已知数组var?stringArray?=?[“This”,?“is”,?“Baidu”,?“Campus”]，Alert出”This?is?Baidu?Campus”。\n答案：alert(stringArray.join(“”))\n\n244、已知有字符串foo=”get-element-by-id”,写一个function将其转化成驼峰表示法”getElementById”。\n```\nfunction combo(msg){\n\nvar arr=msg.split(\"-\");\n\nfor(var i=1;i<arr.length;i++){\n\narr[i]=arr[i].charAt(0).toUpperCase()+arr[i].substr(1,arr[i].length-1);\n\n}\n\nmsg=arr.join(\"\");\n\nreturn msg;\n\n}\n```\n245、.varnumberArray=[3,6,2,4,1,5]; （考察基础API）\n1)实现对该数组的倒排，输出[5,1,4,2,6,3]\n\n2)实现对该数组的降序排列，输出[6,5,4,3,2,1]\n```\nfunction combo(msg){\n\nvar arr=msg.split(\"-\");\n\nfor(var i=1;i<arr.length;i++){\n\narr[i]=arr[i].charAt(0).toUpperCase()+arr[i].substr(1,arr[i].length-1);\n\n}\n\nmsg=arr.join(\"\");\n\nreturn msg;\n\n}\n```\n246、把两个数组合并，并删除第二个元素。\n```\nvar array1 = ['a','b','c'];\n\nvar bArray = ['d','e','f'];\n\nvar cArray = array1\n```\n247、如何消除一个数组里面重复的元素？\n```\nvar arr=[1,2,3,3,4,4,5,5,6,1,9,3,25,4];\n\nfunction deRepeat(){\n\nvar newArr=[];\n\nvar obj={};\n\nvar index=0;\n\nvar l=arr.length;\n\nfor(var i=0;i<l;i++){\n\nif(obj[arr[i]]==undefined)\n\n{\n\nobj[arr[i]]=1;\n\nnewArr[index++]=arr[i];\n\n}\n\nelse if(obj[arr[i]]==1)\n\n}\n\nreturn newArr;\n\n}\n\nvar newArr2=deRepeat(arr);\n\nalert(newArr2); //输出1,2,3,4,5,6,9,25\n```\n248、用js实现随机选取10–100之间的10个数字，存入一个数组，并排序。\n```\nvar iArray = [];\n\nfuntion getRandom(istart, iend){\n\nvar iChoice = istart - iend +1;\n\nreturn Math.floor(Math.random() * iChoice + istart;\n\n}\n\nfor(var i=0; i<10; i++){\n\niArray.push(getRandom(10,100));\n\n}\n\niArray.sort();\n```\n249、正则表达式构造函数var reg=new RegExp(“xxx”)与正则表达字面量var reg=//有什么不同？匹配邮箱的正则表达式？\n答案：当使用RegExp()构造函数的时候，不仅需要转义引号（即\\”表示”），并且还需要双反斜杠（即\\\\表示一个\\）。使用正则表达字面量的效率更高。?\n\n250、1 var regMail = /^([a-zA-Z0-9_-])+@([a-zA-Z0-9_-])+((.[a-zA-Z0-9_-]{2,3}){1,2})$/;\n正则表达式对象3 – 清除空格\n\n写一个function，清除字符串前后的空格。（兼容所有浏览器）\n\n使用自带接口trim()，考虑兼容性：\n```\nif (!String.prototype.trim) {\n\nString.prototype.trim = function() {\n\nreturn this.replace(/^\\s+/, \"\").replace(/\\s+$/,\"\");\n\n} }\n\n// test the function\n\nvar str = \" \\t\\n test string \".trim();\n\nalert(str == \"test string\"); // alerts \"true\"\n```\n251、数组和字符串\n```\n<script lang=\"JavaScript\" type=\"text/javascript\">\n\n    function outPut(s) {\n\n        document.writeln(s);\n\n    }\n\n    var a = \"lashou\";\n\n    var b = a;\n\n    outPut(b);\n\n    a = \"拉手\";\n\n    outPut(a);\n\n    outPut(b);\n\n    var a_array = [1, 2, 3];\n\n    var b_array = a_array;\n\n    outPut(b_array);\n\n    a_array[3] = 4;\n\n    outPut(a_array);\n\n    outPut(b_array);\n\n</script>\n\n输出结果：\n\n答案：lashou 拉手 lashou 1,2,3 1,2,3,4 1,2,3,4\n```\n252、下列控制台都输出什么\n第1题：\n```\nfunction setName(){\n\n    name=\"张三\";\n\n}\n\nsetName();\n\nconsole.log(name);\n\n答案：\"张三\"\n```\n253、第2题：\n```\n//考点：1、变量声明提升 2、变量搜索机制\n\nvar a=1;\n\nfunction test(){\n\n    console.log(a);\n\n    var a=1;\n\n}\n\ntest();\n\n答案：undefined\n```\n254、第3题：\n```\nvar b=2;\n\nfunction test2(){\n\n    window.b=3;\n\n    console.log(b);\n\n}\n\ntest2();\n\n答案：3\n```\n255、第4题：\n```\nc=5;//声明一个全局变量c\n\nfunction test3(){\n\n    window.c=3;\n\n    console.log(c);     //答案：undefined，原因：由于此时的c是一个局部变量c，并且没有被赋值\n\n    var c;\n\n    console.log(window.c);//答案：3，原因：这里的c就是一个全局变量c\n\n}\n\ntest3();\n```\n256、第5题：\n```\nvar arr = [];\n\narr[0]  = 'a';\n\narr[1]  = 'b';\n\narr[10] = 'c';\n\nalert(arr.length);  //答案：11\n\nconsole.log(arr[5]);    //答案：undefined\n```\n257、第6题：\n```\nvar a=1;\n\nconsole.log(a++);       //答案：1\n\nconsole.log(++a);       //答案：3\n\n258、第7题：\nconsole.log(null==undefined);   //答案：true\n\nconsole.log(\"1\"==1);        //答案：true，因为会将数字1先转换为字符串1\n\nconsole.log(\"1\"===1);       //答案：false，因为数据类型不一致\n```\n259、第8题：\n```\ntypeof 1;       \"number\"\n\ntypeof \"hello\";     \"string\"\n\ntypeof /[0-9]/;     \"object\"\n\ntypeof {};      \"object\"\n\ntypeof null;        \"object\"\n\ntypeof undefined;   \"undefined\"\n\ntypeof [1,2,3];     \"object\"\n\ntypeof function(){};    //\"function\"\n```\n260、第9题：\n```\nparseInt(3.14);         //3\n\nparseFloat(\"3asdf\");        //3\n\nparseInt(\"1.23abc456\");\n\nparseInt(true);//\"true\" NaN\n```\n261、第10题：\n```\n//考点：函数声明提前\n\nfunction bar() {\n\n    return foo;\n\n    foo = 10;\n\n    function foo() {}\n\n    //var foo = 11;\n\n}\n\nalert(typeof bar());//\"function\"\n```\n262、第11题：考点：函数声明提前\n```\nvar foo = 1;\n\nfunction bar() {\n\n    foo = 10;\n\n    return;\n\n    function foo() {}\n\n}\n\nbar();\n\nalert(foo);//答案：1\n```\n263、第12题：\n```\nconsole.log(a);//是一个函数\n\nvar a = 3;\n\nfunction a(){}\n\nconsole.log(a);////3\n```\n264、第13题：\n//考点：对arguments的操作\n\nfunction foo(a) {\n\n    arguments[0] = 2;\n\n    alert(a);//答案：2，因为：a、arguments是对实参的访问，b、通过arguments[i]可以修改指定实参的值\n\n}\n\nfoo(1);\n\n265、第14题：\nfunction foo(a) {\n\n    alert(arguments.length);//答案：3，因为arguments是对实参的访问\n\n}\n\nfoo(1, 2, 3);\n\n266、第15题\nbar();//报错\n\nvar foo = function bar(name) {\n\n    console.log(\"hello\"+name);\n\n    console.log(bar);\n\n};\n\n//alert(typeof bar);\n\nfoo(\"world\");//\"hello\"\n\nconsole.log(bar);//undefined\n\nconsole.log(foo.toString());\n\nbar();//报错\n\n267、第16题\nfunction test(){\n\n    console.log(\"test函数\");\n\n}\n\nsetTimeout(function(){\n\n    console.log(\"定时器回调函数\");\n\n}, 0)\n\ntest();\n\nfunction foo(){\n\n    var name=\"hello\";\n\n}\n\n三、Jquery\n1、jQuery 的 slideUp动画 ，如果目标元素是被外部事件驱动, 当鼠标快速地连续触发外部元素事件, 动画会滞后的反复执行，该如何处理呢?\n\n\n四、HTML5 CSS3\n1、CSS3有哪些新特性？\n    1. CSS3实现圆角（border-radius），阴影（box-shadow），\n\n    2. 对文字加特效（text-shadow、），线性渐变（gradient），旋转（transform）\n\n    3.transform:rotate(9deg) scale(0.85,0.90) translate(0px,-30px) skew(-9deg,0deg);// 旋转,缩放,定位,倾斜\n\n    4. 增加了更多的CSS选择器  多背景 rgba\n\n    5. 在CSS3中唯一引入的伪元素是 ::selection.\n\n    6. 媒体查询，多栏布局\n\n    7. border-image\n\n2、html5有哪些新特性、移除了那些元素？如何处理HTML5新标签的浏览器兼容问题？如何区分 HTML 和 HTML5？\n新特性：\n\n    1. 拖拽释放(Drag and drop) API\n\n    2. 语义化更好的内容标签（header,nav,footer,aside,article,section）\n\n    3. 音频、视频API(audio,video)\n\n    4. 画布(Canvas) API\n\n    5. 地理(Geolocation) API\n\n    6. 本地离线存储 localStorage 长期存储数据，浏览器关闭后数据不丢失；\n\n    7. sessionStorage 的数据在浏览器关闭后自动删除\n\n    8. 表单控件，calendar、date、time、email、url、search\n\n    9. 新的技术webworker, websocket, Geolocation\n\n移除的元素：\n\n    1. 纯表现的元素：basefont，big，center，font, s，strike，tt，u；\n\n    2. 对可用性产生负面影响的元素：frame，frameset，noframes；\n\n支持HTML5新标签：\n\n1. IE8/IE7/IE6支持通过 document.createElement 方法产生的标签，可以利用这一特性让这些浏览器支持 Html5 新标签，浏览器支持新标签后，还需要添加标签默认的样式（当然最好的方式是直接使用成熟的框架、使用最多的是html5shim框架）：\n\n<!--[if lt IE 9]>\n\n<script> src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"</script>\n\n<![endif]-->\n\n如何区分：\n\nDOCTYPE声明新增的结构元素、功能元素\n\n3、本地存储（Local Storage ）和cookies（储存在用户本地终端上的数据）之间的区别是什么？\nCookies:服务器和客户端都可以访问；大小只有4KB左右；有有效期，过期后将会删除；\n\n本地存储：只有本地浏览器端可访问数据，服务器不能访问本地存储直到故意通过POST或者GET的通道发送到服务器；每个域5MB；没有过期数据，它将保留知道用户从浏览器清除或者使用Javascript代码移除\n\n4、如何实现浏览器内多个标签页之间的通信?\n调用 localstorge、cookies 等本地存储方式\n\n5、你如何对网站的文件和资源进行优化？\n文件合并\n\n文件最小化/文件压缩\n\n使用CDN托管\n\n缓存的使用\n\n6、什么是响应式设计？\n它是关于网页制作的过程中让不同的设备有不同的尺寸和不同的功能。响应式设计是让所有的人能在这些设备上让网站运行正常\n\n7、新的 HTML5 文档类型和字符集是？\n答：HTML5文档类型：<!doctype html>\n\n    HTML5使用的编码<meta charset=”UTF-8”>\n\n8、HTML5 Canvas 元素有什么用？\n答：Canvas 元素用于在网页上绘制图形，该元素标签强大之处在于可以直接在 HTML 上进行图形操作。\n\n9、HTML5 存储类型有什么区别？\n答：Media API、Text Track API、Application Cache API、User Interaction、Data Transfer API、Command API、Constraint Validation API、History API\n\n10、用H5+CSS3解决下导航栏最后一项掉下来的问题\n11、CSS3新增伪类有那些？\n    p:first-of-type 选择属于其父元素的首个 <p> 元素的每个 <p> 元素。\n\n    p:last-of-type  选择属于其父元素的最后 <p> 元素的每个 <p> 元素。\n\n    p:only-of-type  选择属于其父元素唯一的 <p> 元素的每个 <p> 元素。\n\n    p:only-child    选择属于其父元素的唯一子元素的每个 <p> 元素。\n\n    p:nth-child(2)  选择属于其父元素的第二个子元素的每个 <p> 元素。\n\n    :enabled、:disabled 控制表单控件的禁用状态。\n\n:checked，单选框或复选框被选中。\n\n12、请用CSS实现：一个矩形内容，有投影，有圆角，hover状态慢慢变透明。\ncss属性的熟练程度和实践经验\n\n13、描述下CSS3里实现元素动画的方法\n动画相关属性的熟悉程度\n\n14、html5\\CSS3有哪些新特性、移除了那些元素？如何处理HTML5新标签的浏览器兼容问题？如何区分 HTML 和 HTML5？\nHTML5 现在已经不是 SGML 的子集，主要是关于图像，位置，存储，地理定位等功能的增加。\n\n* 绘画 canvas 元素\n\n  用于媒介回放的 video 和 audio 元素\n\n  本地离线存储 localStorage 长期存储数据，浏览器关闭后数据不丢失；\n\n  sessionStorage 的数据在浏览器关闭后自动删除\n\n  语意化更好的内容元素，比如 article、footer、header、nav、section\n\n  表单控件，calendar、date、time、email、url、search\n\n  CSS3实现圆角，阴影，对文字加特效，增加了更多的CSS选择器  多背景 rgba\n\n  新的技术webworker, websockt, Geolocation\n\n移除的元素\n\n纯表现的元素：basefont，big，center，font, s，strike，tt，u；\n\n对可用性产生负面影响的元素：frame，frameset，noframes；\n\n* 是IE8/IE7/IE6支持通过document.createElement方法产生的标签，\n\n  可以利用这一特性让这些浏览器支持HTML5新标签，\n\n  浏览器支持新标签后，还需要添加标签默认的样式：\n\n* 当然最好的方式是直接使用成熟的框架、使用最多的是html5shim框架\n\n<!--[if lt IE 9]>\n\n<script> src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"</script>\n\n<![endif]-->\n\n15、你怎么来实现页面设计图，你认为前端应该如何高质量完成工作? 一个满屏 品 字布局 如何设计?\n* 首先划分成头部、body、脚部；。。。。。\n\n* 实现效果图是最基本的工作，精确到2px；\n\n  与设计师，产品经理的沟通和项目的参与\n\n  做好的页面结构，页面重构和用户体验\n\n  处理hack，兼容、写出优美的代码格式\n\n  针对服务器的优化、拥抱 HTML5。\n\n16、你能描述一下渐进增强和优雅降级之间的不同吗?\n渐进增强 progressive enhancement：针对低版本浏览器进行构建页面，保证最基本的功能，然后再针对高级浏览器进行效果、交互等改进和追加功能达到更好的用户体验。\n\n优雅降级 graceful degradation：一开始就构建完整的功能，然后再针对低版本浏览器进行兼容。\n\n　　区别：优雅降级是从复杂的现状开始，并试图减少用户体验的供给，而渐进增强则是从一个非常基础的，能够起作用的版本开始，并不断扩充，以适应未来环境的需要。降级（功能衰减）意味着往回看；而渐进增强则意味着朝前看，同时保证其根基处于安全地带。　\n\n　　“优雅降级”观点\n\n　　“优雅降级”观点认为应该针对那些最高级、最完善的浏览器来设计网站。而将那些被认为“过时”或有功能缺失的浏览器下的测试工作安排在开发周期的最后阶段，并把测试对象限定为主流浏览器（如 IE、Mozilla 等）的前一个版本。\n\n　　在这种设计范例下，旧版的浏览器被认为仅能提供“简陋却无妨 (poor, but passable)” 的浏览体验。你可以做一些小的调整来适应某个特定的浏览器。但由于它们并非我们所关注的焦点，因此除了修复较大的错误之外，其它的差异将被直接忽略。\n\n　　“渐进增强”观点\n\n　　“渐进增强”观点则认为应关注于内容本身。\n\n　　内容是我们建立网站的诱因。有的网站展示它，有的则收集它，有的寻求，有的操作，还有的网站甚至会包含以上的种种，但相同点是它们全都涉及到内容。这使得“渐进增强”成为一种更为合理的设计范例。这也是它立即被 Yahoo! 所采纳并用以构建其“分级式浏览器支持 (Graded Browser Support)”策略的原因所在。\n\n\n\n　　那么问题了。现在产品经理看到IE6,7,8网页效果相对高版本现代浏览器少了很多圆角，阴影（CSS3），要求兼容（使用图片背景，放弃CSS3），你会如何说服他？\n\n17、为什么利用多个域名来存储网站资源会更有效？\nCDN缓存更方便\n\n突破浏览器并发限制\n\n节约cookie带宽\n\n节约主域名的连接数，优化页面响应速度\n\n防止不必要的安全问题\n\n18、请谈一下你对网页标准和标准制定机构重要性的理解。\n　　（无标准答案）网页标准和标准制定机构都是为了能让web发展的更‘健康’，开发者遵循统一的标准，降低开发难度，开发成本，SEO也会更好做，也不会因为滥用代码导致各种BUG、安全问题，最终提高网站易用性。\n\n\n\n19、请描述一下cookies，sessionStorage和localStorage的区别？　　\n　　sessionStorage用于本地存储一个会话（session）中的数据，这些数据只有在同一个会话中的页面才能访问并且当会话结束后数据也随之销毁。因此sessionStorage不是一种持久化的本地存储，仅仅是会话级别的存储。而localStorage用于持久化的本地存储，除非主动删除数据，否则数据是永远不会过期的。\n\nweb storage和cookie的区别\n\nWeb Storage的概念和cookie相似，区别是它是为了更大容量存储设计的。Cookie的大小是受限的，并且每次你请求一个新的页面的时候Cookie都会被发送过去，这样无形中浪费了带宽，另外cookie还需要指定作用域，不可以跨域调用。\n\n除此之外，Web Storage拥有setItem,getItem,removeItem,clear等方法，不像cookie需要前端开发者自己封装setCookie，getCookie。但是Cookie也是不可以或缺的：Cookie的作用是与服务器进行交互，作为HTTP规范的一部分而存在 ，而Web Storage仅仅是为了在本地“存储”数据而生。\n\n20、知道css有个content属性吗？有什么作用？有什么应用？\n知道。css的content属性专门应用在 before/after 伪元素上，用来插入生成内容。最常见的应用是利用伪类清除浮动。\n\n//一种常见利用伪类清除浮动的代码\n```\n.clearfix:after {\n\n    content:\".\"; //这里利用到了content属性\n\n    display:block;\n\n    height:0;\n\n    visibility:hidden;\n\n    clear:both; }\n\n.clearfix {\n\n    *zoom:1;\n\n}\n``\nafter伪元素通过 content 在元素的后面生成了内容为一个点的块级素，再利用clear:both清除浮动。\n\n　　那么问题继续还有，知道css计数器（序列数字字符自动递增）吗？如何通过css content属性实现css计数器？\n\n答案：css计数器是通过设置counter-reset 、counter-increment 两个属性 、及 counter()/counters()一个方法配合after / before 伪类实现。\n\n21、如何在 HTML5 页面中嵌入音频?\nHTML 5 包含嵌入音频文件的标准方式，支持的格式包括 MP3、Wav 和 Ogg：\n\n<audio controls>\n\n  <source src=\"jamshed.mp3\" type=\"audio/mpeg\">\n\n   Your browser does'nt support audio embedding feature.\n\n</audio>\n\n22、如何在 HTML5 页面中嵌入视频？\n和音频一样，HTML5 定义了嵌入视频的标准方法，支持的格式包括：MP4、WebM 和 Ogg：\n\n<video width=\"450\" height=\"340\" controls>\n\n  <source src=\"jamshed.mp4\" type=\"video/mp4\">\n\n   Your browser does'nt support video embedding feature.\n\n</video>\n\n23、HTML5 引入什么新的表单属性？\nDatalist   datetime   output   keygen  date  month  week  time  number   range   emailurl\n\n24、CSS3新增伪类有那些？\n p:first-of-type 选择属于其父元素的首个 <p> 元素的每个 <p> 元素。\n\n    p:last-of-type  选择属于其父元素的最后 <p> 元素的每个 <p> 元素。\n\n    p:only-of-type  选择属于其父元素唯一的 <p> 元素的每个 <p> 元素。\n\n    p:only-child    选择属于其父元素的唯一子元素的每个 <p> 元素。\n\n    p:nth-child(2)  选择属于其父元素的第二个子元素的每个 <p> 元素。\n\n    :enabled、:disabled 控制表单控件的禁用状态。\n\n:checked，单选框或复选框被选中。\n\n25、(写)描述一段语义的html代码吧。\n（HTML5中新增加的很多标签（如：<article>、<nav>、<header>和<footer>等）\n\n就是基于语义化设计原则）\n\n< div id=\"header\">\n\n< h1>标题< /h1>\n\n< h2>专注Web前端技术< /h2>\n\n< /div>\n\n语义 HTML 具有以下特性：\n\n\n\n文字包裹在元素中，用以反映内容。例如：\n\n段落包含在 <p> 元素中。\n\n顺序表包含在<ol>元素中。\n\n从其他来源引用的大型文字块包含在<blockquote>元素中。\n\nHTML 元素不能用作语义用途以外的其他目的。例如：\n\n<h1>包含标题，但并非用于放大文本。\n\n<blockquote>包含大段引述，但并非用于文本缩进。\n\n空白段落元素 ( <p></p> ) 并非用于跳行。\n\n文本并不直接包含任何样式信息。例如：\n\n不使用 <font> 或 <center> 等格式标记。\n\n类或 ID 中不引用颜色或位置。\n\n26.cookie在浏览器和服务器间来回传递。 sessionStorage和localStorage区别\nsessionStorage和localStorage的存储空间更大；\n\nsessionStorage和localStorage有更多丰富易用的接口；\n\nsessionStorage和localStorage各自独立的存储空间；\n\n27、html5有哪些新特性、移除了那些元素？如何处理HTML5新标签的浏览器兼容问题？如何区分 HTML 和 HTML5？\n* HTML5 现在已经不是 SGML 的子集，主要是关于图像，位置，存储，多任务等功能的增加。\n\n* 绘画 canvas\n\n  用于媒介回放的 video 和 audio 元素\n\n  本地离线存储 localStorage 长期存储数据，浏览器关闭后数据不丢失；\n\n  sessionStorage 的数据在浏览器关闭后自动删除\n\n  语意化更好的内容元素，比如 article、footer、header、nav、section\n\n  表单控件，calendar、date、time、email、url、search\n\n  新的技术webworker, websockt, Geolocation\n\n* 移除的元素\n\n纯表现的元素：basefont，big，center，font, s，strike，tt，u；\n\n对可用性产生负面影响的元素：frame，frameset，noframes；\n\n支持HTML5新标签：\n\n* IE8/IE7/IE6支持通过document.createElement方法产生的标签，\n\n  可以利用这一特性让这些浏览器支持HTML5新标签，\n\n  浏览器支持新标签后，还需要添加标签默认的样式：\n\n* 当然最好的方式是直接使用成熟的框架、使用最多的是html5shim框架\n\n<!--[if lt IE 9]>\n\n<script> src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"</script>\n\n<![endif]-->\n\n28、如何区分： DOCTYPE声明\\新增的结构元素\\功能元素\n29、语义化的理解？\n用正确的标签做正确的事情！\n\nhtml语义化就是让页面的内容结构化，便于对浏览器、搜索引擎解析；\n\n在没有样式CCS情况下也以一种文档格式显示，并且是容易阅读的。\n\n搜索引擎的爬虫依赖于标记来确定上下文和各个关键字的权重，利于 SEO。\n\n使阅读源代码的人对网站更容易将网站分块，便于阅读维护理解。\n\n30、HTML5的离线储存？\nlocalStorage    长期存储数据，浏览器关闭后数据不丢失；\n\nsessionStorage  数据在浏览器关闭后自动删除。\n\n31、写出HTML5的文档声明方式\n\n\n <DOCYPE html>\n\n32、HTML5和CSS3的新标签     \n\n\n\n\nHTML5： nav, footer, header, section, hgroup, video, time, canvas, audio...\n\nCSS3: RGBA, opacity, text-shadow, box-shadow, border-radius, border-image,\n\nborder-color, transform...;\n\n33、自己对标签语义化的理解\n    在我看来，语义化就是比如说一个段落， 那么我们就应该用 <p>标签来修饰，标题就应该用 <h?>标签等。符合文档语义的标签。\n\n五、移动web开发\n1、移动端常用类库及优缺点\n知识面宽度，多多益善\n\n2、Zepto库和JQ区别\nZepto相对jQuery更加轻量，主要用在移动端，jQuery也有对应的jQuerymobile移动端框架\n\n六、Ajax\n1、Ajax 是什么? 如何创建一个Ajax？\nAjax并不算是一种新的技术，全称是asychronous javascript and xml，可以说是已有技术的组合，主要用来实现客户端与服务器端的异步通信效果，实现页面的局部刷新，早期的浏览器并不能原生支持ajax，可以使用隐藏帧（iframe）方式变相实现异步效果，后来的浏览器提供了对ajax的原生支持\n\n使用ajax原生方式发送请求主要通过XMLHttpRequest(标准浏览器)、ActiveXObject(IE浏览器)对象实现异步通信效果\n\n基本步骤：\n\nvar xhr =null;//创建对象\n\nif(window.XMLHttpRequest){\n\n   xhr = new XMLHttpRequest();\n\n}else{\n\n   xhr = new ActiveXObject(\"Microsoft.XMLHTTP\");\n\n}\n\n     xhr.open(“方式”,”地址”,”标志位”);//初始化请求\n\n     xhr.setRequestHeader(“”,””);//设置http头信息\n\n     xhr.onreadystatechange =function(){}//指定回调函数\n\n     xhr.send();//发送请求\n\njs框架（jQuery/EXTJS等）提供的ajax  API对原生的ajax进行了封装，熟悉了基础理论，再学习别的框架就会得心应手，好多都是换汤不换药的内容\n\n2、同步和异步的区别?\n同步：阻塞的\n\n-张三叫李四去吃饭，李四一直忙得不停，张三一直等着，直到李四忙完两个人一块去吃饭\n\n=浏览器向服务器请求数据，服务器比较忙，浏览器一直等着（页面白屏），直到服务器返回数据，浏览器才能显示页面\n\n异步：非阻塞的\n\n-张三叫李四去吃饭，李四在忙，张三说了一声然后自己就去吃饭了，李四忙完后自己去吃\n\n=浏览器向服务器请求数据，服务器比较忙，浏览器可以自如的干原来的事情（显示页面），服务器返回数据的时候通知浏览器一声，浏览器把返回的数据再渲染到页面，局部更新\n\n3、如何解决跨域问题?\n理解跨域的概念：协议、域名、端口都相同才同域，否则都是跨域\n\n出于安全考虑，服务器不允许ajax跨域获取数据，但是可以跨域获取文件内容，所以基于这一点，可以动态创建script标签，使用标签的src属性访问js文件的形式获取js脚本，并且这个js脚本中的内容是函数调用，该函数调用的参数是服务器返回的数据，为了获取这里的参数数据，需要事先在页面中定义回调函数，在回调函数中处理服务器返回的数据，这就是解决跨域问题的主流解决方案\n\n4、页面编码和被请求的资源编码如果不一致如何处理？\n对于ajax请求传递的参数，如果是get请求方式，参数如果传递中文，在有些浏览器会乱码，不同的浏览器对参数编码的处理方式不同，所以对于get请求的参数需要使用 encodeURIComponent函数对参数进行编码处理，后台开发语言都有相应的解码api。对于post请求不需要进行编码\n\n5、简述ajax 的过程。\n1. 创建XMLHttpRequest对象,也就是创建一个异步调用对象\n\n2. 创建一个新的HTTP请求,并指定该HTTP请求的方法、URL及验证信息\n\n3. 设置响应HTTP请求状态变化的函数\n\n4. 发送HTTP请求\n\n5. 获取异步调用返回的数据\n\n6. 使用JavaScript和DOM实现局部刷新\n\n6、阐述一下异步加载。\n1. 异步加载的方案： 动态插入 script 标签\n\n2. 通过 ajax 去获取 js 代码，然后通过 eval 执行\n\n3. script 标签上添加 defer 或者 async 属性\n\n4. 创建并插入 iframe，让它异步执行 js\n\n7、请解释一下 JavaScript 的同源策略。\n同源策略是客户端脚本（尤其是Javascript）的重要的安全度量标准。它最早出自Netscape Navigator2.0，其目的是防止某个文档或脚本从多个不同源装载。所谓同源指的是：协议，域名，端口相同，同源策略是一种安全协议，指一段脚本只能读取来自同一来源的窗口和文档的属性。\n\n8、GET和POST的区别，何时使用POST？\nGET：一般用于信息获取，使用URL传递参数，对所发送信息的数量也有限制，一般在2000个字符，有的浏览器是8000个字符\n\nPOST：一般用于修改服务器上的资源，对所发送的信息没有限制\n\n在以下情况中，请使用 POST 请求：\n\n1. 无法使用缓存文件（更新服务器上的文件或数据库）\n\n2. 向服务器发送大量数据（POST 没有数据量限制）\n\n3. 发送包含未知字符的用户输入时，POST 比 GET 更稳定也更可靠\n\n9、ajax 是什么?ajax 的交互模型?同步和异步的区别?如何解决跨域问题?\n 1. 通过异步模式，提升了用户体验\n\n 2. 优化了浏览器和服务器之间的传输，减少不必要的数据往返，减少了带宽占用\n\n3.  Ajax在客户端运行，承担了一部分本来由服务器承担的工作，减少了大用户量下的服务器负载。\n\n10、 Ajax的最大的特点是什么。\n    Ajax可以实现异步通信效果，实现页面局部刷新，带来更好的用户体验；按需获取数据，节约带宽资源；\n\n11、ajax的缺点\n 1、ajax不支持浏览器back按钮。\n\n 2、安全问题 AJAX暴露了与服务器交互的细节。\n\n 3、对搜索引擎的支持比较弱。\n\n 4、破坏了程序的异常机制。\n\n12、ajax请求的时候get 和post方式的区别\nget一般用来进行查询操作，url地址有长度限制，请求的参数都暴露在url地址当中，如果传递中文参数，需要自己进行编码操作，安全性较低。\n\npost请求方式主要用来提交数据，没有数据长度的限制，提交的数据内容存在于http请求体中，数据不会暴漏在url地址中。\n\n13、解释jsonp的原理，以及为什么不是真正的ajax\n　　Jsonp并不是一种数据格式，而json是一种数据格式，jsonp是用来解决跨域获取数据的一种解决方案，具体是通过动态创建script标签，然后通过标签的src属性获取js文件中的js脚本，该脚本的内容是一个函数调用，参数就是服务器返回的数据，为了处理这些返回的数据，需要事先在页面定义好回调函数，本质上使用的并不是ajax技术\n\n14、什么是Ajax和JSON，它们的优缺点。\nAjax是全称是asynchronous JavaScript andXML，即异步JavaScript和xml，用于在Web页面中实现异步数据交互，实现页面局部刷新。\n\n优点：可以使得页面不重载全部内容的情况下加载局部内容，降低数据传输量，避免用户不断刷新或者跳转页面，提高用户体验\n\n缺点：对搜索引擎不友好；要实现ajax下的前后退功能成本较大；可能造成请求数的增加跨域问题限制；\n\nJSON是一种轻量级的数据交换格式，ECMA的一个子集\n\n优点：轻量级、易于人的阅读和编写，便于机器（JavaScript）解析，支持复合数据类型（数组、对象、字符串、数字）\n\n15、http常见的状态码有那些？分别代表是什么意思？\n200 - 请求成功\n\n301 - 资源（网页等）被永久转移到其它URL\n\n404 - 请求的资源（网页等）不存在\n\n500 - 内部服务器错误\n\n16、一个页面从输入 URL 到页面加载显示完成，这个过程中都发生了什么？\n分为4个步骤：\n\n1. 当发送一个 URL 请求时，不管这个 URL 是 Web 页面的 URL 还是 Web 页面上每个资源的 URL，浏览器都会开启一个线程来处理这个请求，同时在远程 DNS 服务器上启动一个 DNS 查询。这能使浏览器获得请求对应的 IP 地址。\n\n2. 浏览器与远程 Web 服务器通过 TCP 三次握手协商来建立一个 TCP/IP 连接。该握手包括一个同步报文，一个同步-应答报文和一个应答报文，这三个报文在 浏览器和服务器之间传递。该握手首先由客户端尝试建立起通信，而后服务器应答并接受客户端的请求，最后由客户端发出该请求已经被接受的报文。\n\n3. 一旦 TCP/IP 连接建立，浏览器会通过该连接向远程服务器发送 HTTP 的 GET 请求。远程服务器找到资源并使用 HTTP 响应返回该资源，值为 200 的 HTTP 响应状态表示一个正确的响应。\n\n4. 此时，Web 服务器提供资源服务，客户端开始下载资源。\n\n17、ajax请求的时候get 和post方式的区别\nget一般用来进行查询操作，url地址有长度限制，请求的参数都暴露在url地址当中，如果传递中文参数，需要自己进行编码操作，安全性较低。\n\npost请求方式主要用来提交数据，没有数据长度的限制，提交的数据内容存在于http请求体中，数据不会暴漏在url地址中。\n\n18、ajax请求时，如何解释json数据\n使用eval()或者JSON.parse() 鉴于安全性考虑，推荐使用JSON.parse()更靠谱，对数据的安全性更好。\n\n19、.javascript的本地对象，内置对象和宿主对象\n本地对象为独立于宿主环境的ECMAScript提供的对象，包括ArrayObjectRegExp等可以new实例化的对象\n\n内置对象为Gload，Math 等不可以实例化的(他们也是本地对象，内置对象是本地对象的一个子集)\n\n宿主对象为所有的非本地对象，所有的BOM和DOM对象都是宿主对象，如浏览器自带的document,window 等对象\n\n20、为什么利用多个域名来存储网站资源会更有效？\n确保用户在不同地区能用最快的速度打开网站，其中某个域名崩溃用户也能通过其他郁闷访问网站，并且不同的资源放到不同的服务器上有利于减轻单台服务器的压力。\n\n21、请说出三种减低页面加载时间的方法\n1、压缩css、js文件\n2、合并js、css文件，减少http请求\n3、外部js、css文件放在最底下\n4、减少dom操作，尽可能用变量替代不必要的dom操作\n\n22、HTTP状态码都有那些。\n200 OK      //客户端请求成功\n\n400 Bad Request  //客户端请求有语法错误，不能被服务器所理解\n\n403 Forbidden  //服务器收到请求，但是拒绝提供服务\n\n404 Not Found  //请求资源不存在，输入了错误的URL\n\n500 Internal Server Error //服务器发生不可预期的错误\n\n503 Server Unavailable  //服务器当前不能处理客户端的请求，一段时间后可能恢复正常\n\n七、JS高级\n1、JQuery一个对象可以同时绑定多个事件，这是如何实现的？\njQuery可以给一个对象同时绑定多个事件，低层实现方式是使用addEventListner或attachEvent兼容不同的浏览器实现事件的绑定，这样可以给同一个对象注册多个事件。\n\n2、知道什么是webkit么? 知道怎么用浏览器的各种工具来调试和debug代码么?\nWebkit是浏览器引擎，包括html渲染和js解析功能，手机浏览器的主流内核，与之相对应的引擎有Gecko（Mozilla Firefox 等使用）和Trident（也称MSHTML，IE 使用）。\n\n对于浏览器的调试工具要熟练使用，主要是页面结构分析，后台请求信息查看，js调试工具使用，熟练使用这些工具可以快速提高解决问题的效率\n\n3、如何测试前端代码? 知道BDD, TDD, Unit Test么? 知道怎么测试你的前端工程么(mocha, sinon, jasmin, qUnit..)?\n了解BDD行为驱动开发与TDD测试驱动开发已经单元测试相关概念，\n\n4、 前端templating(Mustache, underscore, handlebars)是干嘛的, 怎么用?\n\nWeb 模板引擎是为了使用户界面与业务数据（内容）分离而产生的，\n\nMustache 是一个 logic-less （轻逻辑）模板解析引擎，它的优势在于可以应用在 Javascript、PHP、Python、Perl 等多种编程语言中。\n\nUnderscore封装了常用的JavaScript对象操作方法，用于提高开发效率。\n\nHandlebars 是 JavaScript 一个语义模板库，通过对view和data的分离来快速构建Web模板。\n\n5、简述一下 Handlebars 的基本用法？\n没有用过的话说出它是干什么的即可\n\n6、简述一下 Handlerbars 的对模板的基本处理流程， 如何编译的？如何缓存的？\n学习技术不仅要会用，还有熟悉它的实现机制，这样在开发中遇到问题时才能更好的解决\n\n7、用js实现千位分隔符?\n原生js的熟练度，实践经验，实现思路\n\n8、检测浏览器版本版本有哪些方式？\nIE与标准浏览器判断，IE不同版本的判断，userAgent  var ie = /*@cc_on !@*/false;\n\n9、我们给一个dom同时绑定两个点击事件，一个用捕获，一个用冒泡，你来说下会执行几次事件，然后会先执行冒泡还是捕获\n对两种事件模型的理解\n\n10、实现一个函数clone，可以对JavaScript中的5种主要的数据类型（包括Number、String、Object、Array、Boolean）进行值复制\n考察点1：对于基本数据类型和引用数据类型在内存中存放的是值还是指针这一区别是否清楚\n考察点2：是否知道如何判断一个变量是什么类型的\n考察点3：递归算法的设计\n\n\n// 方法一：\n\nObject.prototype.clone = function(){\n\n   var o = this.constructor === Array ? [] : {};\n\n   for(var e in this){\n\n    o[e] = typeof this[e] === \"object\" ? this[e].clone() : this[e];\n\n   }\n\n   return o;\n\n}\n\n//方法二：\n\n  /**\n\n     * 克隆一个对象\n\n     * @param Obj\n\n     * @returns\n\n     */\n\n    function clone(Obj) {  \n\n        var buf;  \n\n        if (Obj instanceof Array) {  \n\n            buf = [];//创建一个空的数组\n\n            var i = Obj.length;  \n\n            while (i--) {  \n\n                buf[i] = clone(Obj[i]);  \n\n            }  \n\n            return buf;   \n\n        }else if (Obj instanceof Object){  \n\n            buf = {};//创建一个空对象\n\n            for (var k in Obj) { //为这个对象添加新的属性\n\n                buf[k] = clone(Obj[k]);  \n\n            }  \n\n            return buf;  \n\n        }else{ //普通变量直接赋值\n\n            return Obj;  \n\n        }  \n\n    }\n\n11、如何消除一个数组里面重复的元素？\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar arr=[1,2,3,3,4,4,5,5,6,1,9,3,25,4];\n\n        function deRepeat(){\n\n            var newArr=[];\n\n            var obj={};\n\n            var index=0;\n\n            var l=arr.length;\n\n            for(var i=0;i<l;i++){\n\n                if(obj[arr[i]]==undefined)\n\n                  {\n\n                    obj[arr[i]]=1;\n\n                    newArr[index++]=arr[i];\n\n                  }\n\n                else if(obj[arr[i]]==1)\n\n                  continue;\n\n            }\n\n            return newArr;\n\n        }\n\n        var newArr2=deRepeat(arr);\n\n        alert(newArr2); //输出1,2,3,4,5,6,9,25\n\n12、小贤是一条可爱的小狗(Dog)，它的叫声很好听(wow)，每次看到主人的时候就会乖乖叫一声(yelp)。从这段描述可以得到以下对象：\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction Dog() {\n\n      this.wow = function() {\n\n               alert(’Wow’);\n\n      }\n\n      this.yelp = function() {\n\n              this.wow();\n\n      }\n\n}\n\n小芒和小贤一样，原来也是一条可爱的小狗，可是突然有一天疯了(MadDog)，一看到人就会每隔半秒叫一声(wow)地不停叫唤(yelp)。请根据描述，按示例的形式用代码来实。（继承，原型，setInterval）\n\n```\nfunction MadDog() {\n\n    this.yelp = function() {\n\n          var self = this;         \n\n          setInterval(function() {\n\n                self.wow();     \n\n          }, 500);\n\n      }\n\n}\n\nMadDog.prototype = new Dog();        \n\n//for test\n\nvar dog = new Dog();\n\ndog.yelp();\n\nvar madDog = new MadDog();\n\nmadDog.yelp();\n```\n13、下面这个ul，如何点击每一列的时候alert其index?（闭包）\n\n<ul id=”test”>\n\n<li>这是第一条</li>\n\n<li>这是第二条</li>\n\n<li>这是第三条</li>\n\n</ul>\n\n\n\n// 方法一：\n```\nvar lis=document.getElementById('2223').getElementsByTagName('li');\n\nfor(var i=0;i<3;i++)\n\n{\n\n    lis[i].index=i;\n\n    lis[i].onclick=function(){\n\n        alert(this.index);\n\n    };\n\n}\n```\n//方法二：\n\nvar lis=document.getElementById('2223').getElementsByTagName('li');\n\nfor(var i=0;i<3;i++){\n\n    lis[i].index=i;\n\n    lis[i].onclick=(function(a){\n\n        return function() {\n\n            alert(a);\n\n        }\n\n    })(i);\n\n}\n\n14、编写一个JavaScript函数，输入指定类型的选择器(仅需支持id，class，tagName三种简单CSS选择器，无需兼容组合选择器)可以返回匹配的DOM节点，需考虑浏览器兼容性和性能。\n/*** @param selector {String} 传入的CSS选择器。* @return {Array}*/\n\n\n\nvar query = function(selector) {\n\nvar reg = /^(#)?(\\.)?(\\w+)$/img;\n\nvar regResult = reg.exec(selector);\n\nvar result = [];\n\n//如果是id选择器\n\nif(regResult[1]) {\n\nif(regResult[3]) {\n\nif(typeof document.querySelector === \"function\") {\n\nresult.push(document.querySelector(regResult[3]));\n\n    }else {\n\n      result.push(document.getElementById(regResult[3]));\n\n    }\n\n  }\n\n  }\n\n  //如果是class选择器\n\n  else if(regResult[2]) {\n\n   if(regResult[3]) {\n\n      if(typeof document.getElementsByClassName === 'function') {\n\n        var doms = document.getElementsByClassName(regResult[3]);\n\n        if(doms) {\n\n          result = converToArray(doms);\n\n        }\n\n      }\n\n     //如果不支持getElementsByClassName函数\n\n     else {\n\n      var allDoms = document.getElementsByTagName(\"*\") ;\n\n       for(var i = 0, len = allDoms.length; i < len; i++) {\n\n         if(allDoms[i].className.search(new RegExp(regResult[2])) > -1) {\n\n           result.push(allDoms[i]);\n\n        }\n\n       }\n\n    }\n\n }\n\n}\n\n //如果是标签选择器\n\n else if(regResult[3]) {\n\n   var doms = document.getElementsByTagName(regResult[3].toLowerCase());\n\n   if(doms) {\n\n     result = converToArray(doms);\n\n   }\n\n }\n\n return result;\n\n }\n\n function converToArray(nodes){\n\n    var array = null;        \n\n    try{       \n\n     array = Array.prototype.slice.call(nodes,0);//针对非IE浏览器        \n\n   }catch(ex){\n\n    array = new Array();        \n\n   for( var i = 0 ,len = nodes.length; i < len ; i++ ) {\n\n     array.push(nodes[i])        \n\n   }\n\n  }     \n\n  return array;\n\n}\n\n15、请评价以下代码并给出改进意见。\n\n\nif(window.addEventListener){\n\n    var addListener = function(el,type,listener,useCapture){\n\n        el.addEventListener(type,listener,useCapture);\n\n  };\n\n}\n\nelse if(document.all){\n\n    addListener = function(el,type,listener){\n\n        el.attachEvent(\"on\"+type,function(){\n\n          listener.apply(el);\n\n      });\n\n   }\n\n}\n\n不应该在if和else语句中声明addListener函数，应该先声明；\n不需要使用window.addEventListener或document.all来进行检测浏览器，应该使用能力检测；\n由于attachEvent在IE中有this指向问题，所以调用它时需要处理一下\n改进如下：\n\nfunction addEvent(elem, type, handler){\n\n　　if(elem.addEventListener){\n\n　　　　elem.addEventListener(type, handler, false);\n\n　　}else if(elem.attachEvent){\n\n　　　　elem['temp' + type + handler] = handler;\n\n　　　　elem[type + handler] = function(){\n\n　　　　elem['temp' + type + handler].apply(elem);\n\n　　};\n\n　　elem.attachEvent('on' + type, elem[type + handler]);　\n\n  }else{\n\n　　elem['on' + type] = handler;\n\n　　}\n\n}\n\n16、给String对象添加一个方法，传入一个string类型的参数，然后将string的每个字符间价格空格返回，例如：\naddSpace(“hello world”) // -> ‘h e l l o  w o r l d’\n\n\n\n\n\n\n\nString.prototype.spacify = function(){\n\n      return this.split('').join(' ');\n\n    };\n\n接着上述问题答案提问，1）直接在对象的原型上添加方法是否安全？尤其是在Object对象上。(这个我没能答出？希望知道的说一下。)　2）函数声明与函数表达式的区别？\n\n答案：在js中，解析器在向执行环境中加载数据时，对函数声明和函数表达式并非是一视同仁的，解析器会率先读取函数声明，并使其在执行任何代码之前可用（可以访问），至于函数表达式，则必须等到解析器执行到它所在的代码行，才会真正被解析执行。\n\n17、定义一个log方法，让它可以代理console.log的方法。\n可行的方法一：\n\nfunction log(msg)　{\n\n    console.log(msg);\n\n}\n\nlog(\"hello world!\") // hello world!\n\n如果要传入多个参数呢？显然上面的方法不能满足要求，所以更好的方法是：\n\nfunction log(){\n\n    console.log.apply(console, arguments);\n\n};\n\n到此，追问apply和call方法的异同。\n\n对于apply和call两者在作用上是相同的，即是调用一个对象的一个方法，以另一个对象替换当前对象。将一个函数的对象上下文从初始的上下文改变为由 thisObj 指定的新对象。\n\n但两者在参数上有区别的。对于第一个参数意义都一样，但对第二个参数： apply传入的是一个参数数组，也就是将多个参数组合成为一个数组传入，而call则作为call的参数传入（从第二个参数开始）。 如 func.call(func1,var1,var2,var3)对应的apply写法为：func.apply(func1,[var1,var2,var3]) 。\n\n18、在Javascript中什么是伪数组？如何将伪数组转化为标准数组？\n伪数组（类数组）：无法直接调用数组方法或期望length属性有什么特殊的行为，但仍可以对真正数组遍历方法来遍历它们。典型的是函数的argument参数，还有像调用getElementsByTagName,document.childNodes之类的,它们都返回NodeList对象都属于伪数组。可以使用Array.prototype.slice.call(fakeArray)将数组转化为真正的Array对象。\n\n假设接第八题题干，我们要给每个log方法添加一个”(app)”前缀，比如’hello world!’ ->’(app)hello world!’。方法如下：\n\nfunction log(){\n\n      var args = Array.prototype.slice.call(arguments);  //为了使用unshift数组方法，将argument转化为真正的数组\n\n      args.unshift('(app)');\n\n      console.log.apply(console, args);\n\n    };\n\n19、对作用域上下文和this的理解，看下列代码：\nvar User = {\n\n  count: 1,\n\n  getCount: function() {\n\n    return this.count;\n\n  }\n\n};\n\nconsole.log(User.getCount());  // what?\n\nvar func = User.getCount;\n\nconsole.log(func());  // what?\n\n问两处console输出什么？为什么？\n\n答案是1和undefined。\n\nfunc是在winodw的上下文中被执行的，所以会访问不到count属性。\n\n继续追问，那么如何确保Uesr总是能访问到func的上下文，即正确返回1。正确的方法是使用Function.prototype.bind。兼容各个浏览器完整代码如下：\n\nFunction.prototype.bind = Function.prototype.bind || function(context){\n\n   var self = this;\n\n   return function(){\n\n      return self.apply(context, arguments);\n\n   };\n\n}\n\nvar func = User.getCount.bind(User);\n\nconsole.log(func());\n\n20、原生JS的window.onload与Jquery的$(document).ready(function(){})有什么不同？如何用原生JS实现Jq的ready方法？\nwindow.onload()方法是必须等到页面内包括图片的所有元素加载完毕后才能执行。\n\n$(document).ready()是DOM结构绘制完毕后就执行，不必等到加载完毕。\n\n/*\n\n * 传递函数给whenReady()\n\n * 当文档解析完毕且为操作准备就绪时，函数作为document的方法调用\n```\nvar whenReady = (function() {               //这个函数返回whenReady()函数\n\n    var funcs = [];             //当获得事件时，要运行的函数\n\n    var ready = false;          //当触发事件处理程序时,切换为true\n\n    //当文档就绪时,调用事件处理程序\n\n    function handler(e) {\n\n        if(ready) return;       //确保事件处理程序只完整运行一次\n\n        //如果发生onreadystatechange事件，但其状态不是complete的话,那么文档尚未准备好\n\n        if(e.type === 'onreadystatechange' && document.readyState !== 'complete') {\n\n            return;\n\n        }\n\n        //运行所有注册函数\n\n        //注意每次都要计算funcs.length\n\n        //以防这些函数的调用可能会导致注册更多的函数\n\n        for(var i=0; i<funcs.length; i++) {\n\n            funcs[i].call(document);\n\n        }\n\n        //事件处理函数完整执行,切换ready状态, 并移除所有函数\n\n        ready = true;\n\n        funcs = null;\n\n    }\n\n    //为接收到的任何事件注册处理程序\n\n    if(document.addEventListener) {\n\n        document.addEventListener('DOMContentLoaded', handler, false);\n\n        document.addEventListener('readystatechange', handler, false);            //IE9+\n\n        window.addEventListener('load', handler, false);\n\n    }else if(document.attachEvent) {\n\n        document.attachEvent('onreadystatechange', handler);\n\n        window.attachEvent('onload', handler);\n\n    }\n\n    //返回whenReady()函数\n\n    return function whenReady(fn) {\n\n        if(ready) { fn.call(document); }\n\n        else { funcs.push(fn); }\n\n    }\n\n})();\n```\n如果上述代码十分难懂，下面这个简化版：\n```\nfunction ready(fn){\n\n    if(document.addEventListener) {//标准浏览器\n\n        document.addEventListener('DOMContentLoaded', function() {\n\n            //注销事件, 避免反复触发\n\n            document.removeEventListener('DOMContentLoaded',arguments.callee, false);\n\n            fn();//执行函数\n\n        }, false);\n\n    }else if(document.attachEvent) {//IE\n\n        document.attachEvent('onreadystatechange', function() {\n\n            if(document.readyState == 'complete') {\n\n                document.detachEvent('onreadystatechange', arguments.callee);\n\n                fn();//函数执行\n\n            }\n\n        });\n\n    }\n\n};\n```\n21、（设计题）想实现一个对页面某个节点的拖曳？如何做？（使用原生JS）\n回答出概念即可，下面是几个要点\n\n1. 给需要拖拽的节点绑定mousedown, mousemove, mouseup事件\n\n2. mousedown事件触发后，开始拖拽\n\n3. mousemove时，需要通过event.clientX和clientY获取拖拽位置，并实时更新位置\n\n4. mouseup时，拖拽结束\n\n5. 需要注意浏览器边界的情况\n\n22、请实现如下功能\n\n     function setcookie(name,value,days){  //给cookie增加一个时间变量\n\n    　　var exp = new Date();\n\n    　　exp.setTime(exp.getTime() + days*24*60*60*1000); //设置过期时间为days天\n\n    　　document.cookie = name + \"=\"+ escape (value) + \";expires=\" + exp.toGMTString();\n\n    }\n\n    function getCookie(name){\n\n    　　var result = \"\";\n\n    　　var myCookie = \"\"+document.cookie+\";\";\n\n    　　var searchName = \"+name+\"=\";\n\n    　　var startOfCookie = myCookie.indexOf(searchName);\n\n    　　var endOfCookie;\n\n    　　if(satrtOfCookie != -1){\n\n    　　　　startOfcookie += searchName.length;\n\n    　　　　endOfCookie = myCookie.indexOf(\";\",startOfCookie);\n\n    　　　　result = (myCookie.substring(startOfCookie,endOfCookie));\n\n    　　}\n\n    　　return result;\n\n    }\n\n    (function(){\n\n    　　var oTips = document.getElementById('tips');//假设tips的id为tips\n\n    　　var page = {\n\n    　　check: function(){//检查tips的cookie是否存在并且允许显示\n\n    　　　　var tips = getCookie('tips');\n\n    　　　　if(!tips || tips == 'show') return true;//tips的cookie不存在\n\n    　　　　if(tips == \"never_show_again\") return false;\n\n    　　},\n\n    　　hideTip: function(bNever){\n\n    　　　　if(bNever) setcookie('tips', 'never_show_again', 365);\n\n    　　　　oTips.style.display = \"none\";//隐藏\n\n    　　},\n\n    　　showTip: function(){\n\n    　　oTips.style.display = \"inline\";//显示，假设tips为行级元素\n\n    　　},\n\n    　　init: function(){\n\n    　　　　var _this = this;\n\n    　　　　if(this.check()){\n\n    　　　　_this.showTip();\n\n    　　　　setcookie('tips', 'show', 1);\n\n    　　}\n\n    　　oTips.onclick = function(){\n\n    　　　　_this.hideTip(true);\n\n    　　};\n\n    　　}\n\n    　　};\n\n      page.init();\n\n    })();\n```\n23、说出以下函数的作用是？空白区域应该填写什么？\n```\n//define\n\n(function(window){\n\n    function fn(str){\n\n        this.str=str;\n\n    }\n\n\n\n    fn.prototype.format = function(){\n\n        var arg = ______;\n\n        return this.str.replace(_____,function(a,b){\n\n             return arg[b]||\"\";\n\n      });\n\n    }\n\n    window.fn = fn;\n\n})(window);\n\n\n\n//use\n\n(function(){\n\n    var t = new fn('<p><a href=\"{0}\">{1}</a><span>{2}</span></p>');\n\n    console.log(t.format('http://www.alibaba.com','Alibaba','Welcome'));\n\n})();\n```\n答案：访函数的作用是使用format函数将函数的参数替换掉{0}这样的内容，返回一个格式化后的结果：\n\n第一个空是：arguments\n\n第二个空是：/\\{(\\d+)\\}/ig\n\n24、Javascript作用链域?\n理解变量和函数的访问范围和生命周期，全局作用域与局部作用域的区别，JavaScript中没有块作用域，函数的嵌套形成不同层次的作用域，嵌套的层次形成链式形式，通过作用域链查找属性的规则需要深入理解。\n\n25、谈谈This对象的理解。\n理解不同形式的函数调用方式下的this指向，理解事件函数、定时函数中的this指向，函数的调用形式决定了this的指向。\n\n26、eval是做什么的？\n它的功能是把对应的字符串解析成JS代码并运行；应该避免使用eval，不安全，非常耗性能（2个步骤，一次解析成js语句，一次执行）\n\n\n\n27、关于事件，IE与火狐的事件机制有什么区别？ 如何阻止冒泡？\n[1].在IE中,事件对象是作为一个全局变量来保存和维护的.所有的浏览器事件,不管是用户触发的，还是其他事件,都会更新window.event对象.所以在代码中，只要调用window.event就可以获取事件对象， 再event.srcElement就可以取得触发事件的元素进行进一步处理.\n\n[2].在FireFox中，事件对象却不是全局对象，一般情况下，是现场发生，现场使用，FireFox把事件对象自动传给事件处理程序.\n\n关于事件的兼容性处理要熟练掌握，事件对象具体哪些属性存在兼容性问题，IE与标准事件模型事件冒泡与事件捕获的支持要理解\n\n28、什么是闭包（closure），为什么要用它？\n简单的理解是函数的嵌套形成闭包，闭包包括函数本身已经它的外部作用域\n\n使用闭包可以形成独立的空间，延长变量的生命周期，报存中间状态值\n\n29、javascript 代码中的\"use strict\";是什么意思 ? 使用它区别是什么？\n意思是使用严格模式，使用严格模式，一些不规范的语法将不再支持\n\n30、如何判断一个对象是否属于某个类？\nInstanceof   constructor\n\n31、new操作符具体干了什么呢?\n1、创建一个空对象，并且 this 变量引用该对象，同时还继承了该函数的原型。\n\n  2、属性和方法被加入到 this 引用的对象中。\n\n  3、新创建的对象由 this 所引用，并且最后隐式的返回 this 。\n\n32、用原生JavaScript的实现过什么功能吗？\n主要考察原生js的实践经验\n\n33、Javascript中，有一个函数，执行时对象查找时，永远不会去查找原型，这个函数是？\nHasOwnProperty\n\n34、对JSON的了解？\n轻量级数据交互格式，可以形成复杂的嵌套格式，解析非常方便\n\n35、js延迟加载的方式有哪些？\n    `方案一：<script>标签的async=\"async\"属性（详细参见：script标签的async属性）\n\n    方案二：<script>标签的defer=\"defer\"属性\n\n    方案三：动态创建<script>标签\n\n    方案四：AJAX eval（使用AJAX得到脚本内容，然后通过eval_r(xmlhttp.responseText)来运行脚本）\n\n    方案五：iframe方式`\n\n36、模块化开发怎么做？\n理解模块化开发模式：浏览器端requirejs，seajs；服务器端nodejs；ES6模块化；fis、webpack等前端整体模块化解决方案；grunt、gulp等前端工作流的使用\n\n37、AMD（Modules/Asynchronous-Definition）、CMD（Common Module Definition）规范区别？\n理解这两种规范的差异，主要通过requirejs与seajs的对比，理解模块的定义与引用方式的差异以及这两种规范的设计原则\n\n38、requireJS的核心原理是什么？（如何动态加载的？如何避免多次加载的？如何 缓存的？）\n核心是js的加载模块，通过正则匹配模块以及模块的依赖关系，保证文件加载的先后顺序，根据文件的路径对加载过的文件做了缓存\n\n39、让你自己设计实现一个requireJS，你会怎么做？\n核心是实现js的加载模块，维护js的依赖关系，控制好文件加载的先后顺序\n\n40、谈一谈你对ECMAScript6的了解？\nES6新的语法糖，类，模块化等新特性\n\n41、ECMAScript6 怎么写class么，为什么会出现class这种东西?\n```\nclass Point {\n\n  constructor(x, y) {\n\n    this.x = x;\n\n    this.y = y;\n\n  }\n\n  toString() {\n\n     return '('+this.x+', '+this.y+')';\n\n  }\n\n}\n```\n42、异步加载的方式有哪些？\n方案一：<script>标签的async=\"async\"属性（详细参见：script标签的async属性）\n\n方案二：<script>标签的defer=\"defer\"属性\n\n方案三：动态创建<script>标签\n\n方案四：AJAX eval（使用AJAX得到脚本内容，然后通过eval_r(xmlhttp.responseText)来运行脚本）\n\n方案五：iframe方式\n\n43、documen.write和 innerHTML的区别?\ndocument.write是重写整个document, 写入内容是字符串的html\n\ninnerHTML是HTMLElement的属性，是一个元素的内部html内容\n\n44、DOM操作——怎样添加、移除、移动、复制、创建和查找节点?\n（1）创建新节点\n\n      createDocumentFragment()    //创建一个DOM片段\n\n      createElement_x()   //创建一个具体的元素\n\n      createTextNode()   //创建一个文本节点\n\n（2）添加、移除、替换、插入\n\n      appendChild()\n\n      removeChild()\n\n      replaceChild()\n\n      insertBefore()\n\n（3）查找\n\n      getElementsByTagName()    //通过标签名称\n\n      getElementsByName()    //通过元素的Name属性的值\n\n      getElementById()    //通过元素Id，唯一性\n\n45、call() 和 .apply() 的含义和区别？\napply的参数是数组形式，call的参数是单个的值，除此之外在使用上没有差别，重点理解这两个函数调用的this改变\n\n46、数组和对象有哪些原生方法，列举一下？\n```\nArray.concat( ) 连接数组\n\nArray.join( ) 将数组元素连接起来以构建一个字符串\n\nArray.length 数组的大小\n\nArray.pop( ) 删除并返回数组的最后一个元素\n\nArray.push( ) 给数组添加元素\n\nArray.reverse( ) 颠倒数组中元素的顺序\n\nArray.shift( ) 将元素移出数组\n\nArray.slice( ) 返回数组的一部分\n\nArray.sort( ) 对数组元素进行排序\n\nArray.splice( ) 插入、删除或替换数组的元素\n\nArray.toLocaleString( ) 把数组转换成局部字符串\n\nArray.toString( ) 将数组转换成一个字符串\n\nArray.unshift( ) 在数组头部插入一个元素\n\n\n\nObject.hasOwnProperty( ) 检查属性是否被继承\n\nObject.isPrototypeOf( ) 一个对象是否是另一个对象的原型\n\nObject.propertyIsEnumerable( ) 是否可以通过for/in循环看到属性\n\nObject.toLocaleString( ) 返回对象的本地字符串表示\n\nObject.toString( ) 定义一个对象的字符串表示\n\nObject.valueOf( ) 指定对象的原始值\n```\n47、JS 怎么实现一个类。怎么实例化这个类\n严格来讲js中并没有类的概念，不过js中的函数可以作为构造函数来使用，通过new来实例化，其实函数本身也是一个对象。\n\n48、JavaScript中的作用域与变量声明提升？\n理解JavaScript的预解析机制，js的运行主要分两个阶段：js的预解析和运行，预解析阶段所有的变量声明和函数定义都会提前，但是变量的赋值不会提前\n\n49、如何编写高性能的Javascript？\n使用 DocumentFragment 优化多次 append\n\n通过模板元素 clone ，替代 createElement\n\n使用一次 innerHTML 赋值代替构建 dom 元素\n\n使用 firstChild 和 nextSibling 代替 childNodes 遍历 dom 元素\n\n使用 Array 做为 StringBuffer ，代替字符串拼接的操作\n\n将循环控制量保存到局部变量\n\n顺序无关的遍历时，用 while 替代 for\n\n将条件分支，按可能性顺序从高到低排列\n\n在同一条件子的多（ >2 ）条件分支时，使用 switch 优于 if\n\n使用三目运算符替代条件分支\n\n需要不断执行的时候，优先考虑使用 setInterval\n\n50、那些操作会造成内存泄漏？\n闭包，循环\n\n51、javascript对象的几种创建方式？\n    1. 工厂模式\n\n    2. 构造函数模式\n\n    3. 原型模式\n\n    4. 混合构造函数和原型模式\n\n    5. 动态原型模式\n\n    6. 寄生构造函数模式\n\n    7. 稳妥构造函数模式\n\n52、javascript继承的 6 种方法？\n    1. 原型链继承\n\n    2. 借用构造函数继承\n\n    3. 组合继承(原型+借用构造)\n\n    4. 原型式继承\n\n    5. 寄生式继承\n\n    6. 寄生组合式继承\n\n53、eval是做什么的？\n    1. 它的功能是把对应的字符串解析成JS代码并运行\n\n    2. 应该避免使用eval，不安全，非常耗性能（2次，一次解析成js语句，一次执行）\n\n54、JavaScript 原型，原型链 ? 有什么特点？\n    1. 原型对象也是普通的对象，是对象一个自带隐式的 __proto__ 属性，原型也有可能有自己的原型，如果一个原型对象的原型不为 null 的话，我们就称之为原型链\n\n    2. 原型链是由一些用来继承和共享属性的对象组成的（有限的）对象链\n\n55、事件、IE与火狐的事件机制有什么区别？ 如何阻止冒泡？\n    1. 我们在网页中的某个操作（有的操作对应多个事件）。例如：当我们点击一个按钮就会产生一个事件。是可以被 JavaScript 侦测到的行为\n\n    2. 事件处理机制：IE是事件冒泡、firefox同时支持两种事件模型，也就是：捕获型事件和冒泡型事件\n\n    3. ev.stopPropagation();\n\n注意旧ie的方法：ev.cancelBubble = true;\n\n56、简述一下Sass、Less，且说明区别？\n他们是动态的样式语言，是CSS预处理器,CSS上的一种抽象层。他们是一种特殊的语法/语言而编译成CSS。\n\n变量符不一样，less是@，而Sass是$;\n\nSass支持条件语句，可以使用if{}else{},for{}循环等等。而Less不支持;\n\nSass是基于Ruby的，是在服务端处理的，而Less是需要引入less.js来处理Less代码输出Css到浏览器\n\n57、关于javascript中apply()和call()方法的区别？\n相同点:两个方法产生的作用是完全一样的\n\n不同点:方法传递的参数不同\n\nObject.call(this,obj1,obj2,obj3)\n\nObject.apply(this,arguments)\n\napply()接收两个参数，一个是函数运行的作用域(this)，另一个是参数数组。\n\ncall()方法第一个参数与apply()方法相同，但传递给函数的参数必须列举出来。\n\n58、简述一下JS中的闭包？\n闭包用的多的两个作用：读取函数内部的变量值；让这些变量值始终保存着(在内存中)。\n\n同时需要注意的是：闭包慎用，不滥用，不乱用，由于函数内部的变量都被保存在内存中，会导致内存消耗大。\n\n59、说说你对this的理解？\n在JavaScript中，this通常指向的是我们正在执行的函数本身，或者是，指向该函数所属的对象。\n\n全局的this → 指向的是Window\n\n函数中的this → 指向的是函数所在的对象\n\n对象中的this → 指向其本身\n\n60、分别阐述split(),slice(),splice(),join()？\njoin()用于把数组中的所有元素拼接起来放入一个字符串。所带的参数为分割字符串的分隔符，默认是以逗号分开。归属于Array\n\nsplit()即把字符串分离开，以数组方式存储。归属于Stringstring\n\nslice() 方法可从已有的数组中返回选定的元素。该方法并不会修改数组，而是返回一个子数组。如果想删除数组中的一段元素，应该使用方法 Array.splice()\n\nsplice() 方法向/从数组中添加/删除项目，然后返回被删除的项目。返回的是含有被删除的元素的数组。\n\n61、事件委托是什么？\n让利用事件冒泡的原理，让自己的所触发的事件，让他的父元素代替执行！\n\n62、如何阻止事件冒泡和默认事件？\n阻止浏览器的默认行为\n\nwindow.event?window.event.returnValue=false:e.preventDefault();\n\n停止事件冒泡\n\nwindow.event?window.event.cancelBubble=true:e.stopPropagation();\n\n原生JavaScript中，return false;只阻止默认行为，不阻止冒泡，jQuery中的return false;既阻止默认行为，又阻止冒泡\n\n63、添加 删除 替换 插入到某个接点的方法？\nobj.appendChidl()\n\nobj.removeChild()\n\nobj.replaceChild()\n\nobj.innersetBefore()\n\n64、你用过require.js吗？它有什么特性？\n（1）实现js文件的异步加载，避免网页失去响应；\n\n（2）管理模块之间的依赖性，便于代码的编写和维护。\n\n65、谈一下JS中的递归函数，并且用递归简单实现阶乘？\n递归即是程序在执行过程中不断调用自身的编程技巧，当然也必须要有一个明确的结束条件，不然就会陷入死循环。\n\n66、请用正则表达式写一个简单的邮箱验证。\n/^[a-zA-Z0-9_-]+@[a-zA-Z0-9_-]+(\\.[a-zA-Z0-9_-]+)+$/;\n\n67、简述一下你对web性能优化的方案？\n    1、尽量减少 HTTP 请求\n\n2、使用浏览器缓存\n\n3、使用压缩组件\n\n4、图片、JS的预载入\n\n5、将脚本放在底部\n\n6、将样式文件放在页面顶部\n\n7、使用外部的JS和CSS\n\n8、精简代码\n\n68、在JS中有哪些会被隐式转换为false\nUndefined、null、关键字false、NaN、零、空字符串\n\n69、定时器setInterval有一个有名函数fn1，setInterval（fn1,500）与setInterval（fn1(),500）有什么区别？\n第一个是重复执行每500毫秒执行一次，后面一个只执行一次。\n\n70、外部JS文件出现中文字符，会出现什么问题，怎么解决？\n会出现乱码，加charset=”GB2312”;\n\n71、谈谈浏览器的内核，并且说一下什么是内核？\nTrident (['traɪd(ə)nt])--IE，Gecko (['gekəʊ])--Firefox, Presto (['prestəʊ])--opera,webkit—谷歌和Safari\n\n浏览器内核又可以分成两部分：渲染引擎和 JS 引擎。它负责取得网页的内容（HTML、XML、图像等等）、整理讯息（例如加入 CSS 等），以及计算网页的显示方式，然后会输出至显示器或打印机。JS 引擎则是解析 Javascript 语言，执行 javascript 语言来实现网页的动态效果。\n\n72、JavaScript原型，原型链 ? 有什么特点？\n*  原型对象也是普通的对象，是对象一个自带隐式的 `__proto__` 属性，原型也有可能有自己的原型，如果一个原型对象的原型不为null的话，我们就称之为原型链。\n\n*  原型链是由一些用来继承和共享属性的对象组成的（有限的）对象链。\n\n* JavaScript的数据对象有那些属性值？\n\n　　writable：这个属性的值是否可以改。\n\n　　configurable：这个属性的配置是否可以删除，修改。\n\n　　enumerable：这个属性是否能在for…in循环中遍历出来或在Object.keys中列举出来。\n\n　　value：属性值。\n\n*  当我们需要一个属性的时，Javascript引擎会先看当前对象中是否有这个属性， 如果没有的话，就会查找他的Prototype对象是否有这个属性。\n```\n function clone(proto) {\n\n　　function Dummy() { }\n\n　　Dummy.prototype = proto;\n\n　　Dummy.prototype.constructor = Dummy;\n\n　　return new Dummy(); //等价于Object.create(Person);\n\n }\n\n        function object(old) {\n\n         function F() {};\n\n         F.prototype = old;\n\n         return new F();\n\n        }\n\n    var newObj = object(oldObject);\n```\n73、写一个通用的事件侦听器函数\n```\n// event(事件)工具集，\n\nmarkyun.Event = {\n\n    // 页面加载完成后\n\n    readyEvent : function(fn) {\n\n        if (fn==null) {\n\n            fn=document;\n\n        }\n\n        var oldonload = window.onload;\n\n        if (typeof window.onload != 'function') {\n\n            window.onload = fn;\n\n        } else {\n\n            window.onload = function() {\n\n                oldonload();\n\n                fn();\n\n            };\n\n        }\n\n    },\n\n    // 视能力分别使用dom0||dom2||IE方式 来绑定事件\n\n    // 参数： 操作的元素,事件名称 ,事件处理程序\n\n    addEvent : function(element, type, handler) {\n\n        if (element.addEventListener) {\n\n            //事件类型、需要执行的函数、是否捕捉\n\n            element.addEventListener(type, handler, false);\n\n        } else if (element.attachEvent) {\n\n            element.attachEvent('on' + type, function() {\n\n                handler.call(element);\n\n            });\n\n        } else {\n\n            element['on' + type] = handler;\n\n        }\n\n    },\n\n    // 移除事件\n\n    removeEvent : function(element, type, handler) {\n\n        if (element.removeEnentListener) {\n\n            element.removeEnentListener(type, handler, false);\n\n        } else if (element.datachEvent) {\n\n            element.detachEvent('on' + type, handler);\n\n        } else {\n\n            element['on' + type] = null;\n\n        }\n\n    },\n\n    // 阻止事件 (主要是事件冒泡，因为IE不支持事件捕获)\n\n    stopPropagation : function(ev) {\n\n        if (ev.stopPropagation) {\n\n            ev.stopPropagation();\n\n        } else {\n\n            ev.cancelBubble = true;\n\n        }\n\n    },\n\n    // 取消事件的默认行为\n\n    preventDefault : function(event) {\n\n        if (event.preventDefault) {\n\n            event.preventDefault();\n\n        } else {\n\n            event.returnValue = false;\n\n        }\n\n    },\n\n    // 获取事件目标\n\n    getTarget : function(event) {\n\n        return event.target || event.srcElement;\n\n    },\n\n    // 获取event对象的引用，取到事件的所有信息，确保随时能使用event；\n\n    getEvent : function(e) {\n\n        var ev = e || window.event;\n\n        if (!ev) {\n\n            var c = this.getEvent.caller;\n\n            while (c) {\n\n                ev = c.arguments[0];\n\n                if (ev && Event == ev.constructor) {\n\n                    break;\n\n                }\n\n                c = c.caller;\n\n            }\n\n        }\n\n        return ev;\n\n    }\n\n};\n```\n74、事件、IE与火狐的事件机制有什么区别？ 如何阻止冒泡？\n     1. 我们在网页中的某个操作（有的操作对应多个事件）。例如：当我们点击一个按钮就会产生一个事件。是可以被 JavaScript 侦测到的行为。\n\n     2. 事件处理机制：IE是事件冒泡、火狐是 事件捕获；\n\n     3.  ev.stopPropagation();\n\n75、什么是闭包（closure），为什么要用？\n执行say667()后,say667()闭包内部变量会存在,而闭包内部函数的内部变量不会存在.使得Javascript的垃圾回收机制GC不会收回say667()所占用的资源，因为say667()的内部函数的执行需要依赖say667()中的变量。这是对闭包作用的非常直白的描述.\n\n  function say667() {\n\n    // Local variable that ends up within closure\n\n    var num = 666;\n\n    var sayAlert = function() { alert(num); }\n\n    num++;\n\n    return sayAlert;\n\n}\n\n var sayAlert = say667();\n\n sayAlert()//执行结果应该弹出的667\n\n76、如何判断一个对象是否属于某个类？\n使用instanceof （待完善）\n\nif(a instanceof Person){\n\n    alert('yes');\n\n}\n\n77、new操作符具体干了什么呢?\n  1、创建一个空对象，并且 this 变量引用该对象，同时还继承了该函数的原型。\n\n  2、属性和方法被加入到 this 引用的对象中。\n\n  3、新创建的对象由 this 所引用，并且最后隐式的返回 this 。\n```\n    var obj  = {};\n\n    obj.__proto__ = Base.prototype;\n\n    Base.call(obj);\n```\n78、JSON 的了解\nJSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。它是基于JavaScript的一个子集。数据格式简单, 易于读写, 占用带宽小\n\n{'age':'12', 'name':'back'}\n\n79、js延迟加载的方式有哪些\ndefer和async、动态创建DOM方式（用得最多）、按需异步载入js\n\n80、模块化怎么做？\n立即执行函数,不暴露私有成员\n```\nvar module1 = (function(){\n\n　　　　var _count = 0;\n\n　　　　var m1 = function(){\n\n　　　　　　//...\n\n　　　　};\n\n　　　　var m2 = function(){\n\n　　　　　　//...\n\n　　　　};\n\n　　　　return {\n\n　　　　　　m1 : m1,\n\n　　　　　　m2 : m2\n\n　　　　};\n\n　　})();\n```\n81、异步加载的方式\n  (1) defer，只支持IE\n\n  (2) async：\n\n  (3) 创建script，插入到DOM中，加载完毕后callBack\n\n      documen.write和 innerHTML的区别\n\n      document.write只能重绘整个页面\n\n      innerHTML可以重绘页面的一部分\n\n82、告诉我答案是多少？\n```\n(function(x){\n\n    delete x;\n\n    alert(x);\n\n})(1+5);\n```\n函数参数无法delete删除，delete只能删除通过for in访问的属性。\n\n当然，删除失败也不会报错，所以代码运行会弹出“1”。\n\n83、JS中的call()和apply()方法的区别？\n例子中用 add 来替换 sub，add.call(sub,3,1) == add(3,1) ，所以运行结果为：alert(4);\n\n注意：js 中的函数其实是对象，函数名是对 Function 对象的引用。\n```\nfunction add(a,b){\n\n    alert(a+b);\n\n}\n\nfunction sub(a,b){\n\n    alert(a-b);\n\n}\n\nadd.call(sub,3,1);\n```\n84、Jquery与jQuery UI 有啥区别？\n\njQuery是一个js库，主要提供的功能是选择器，属性修改和事件绑定等等。\n\njQuery UI则是在jQuery的基础上，利用jQuery的扩展性，设计的插件。\n\n提供了一些常用的界面元素，诸如对话框、拖动行为、改变大小行为等等\n\n85、jquery 中如何将数组转化为json字符串，然后再转化回来？\njQuery中没有提供这个功能，所以你需要先编写两个jQuery的扩展：\n```\n    $.fn.stringifyArray = function(array) {\n\n        return JSON.stringify(array)\n\n    }\n\n    $.fn.parseArray = function(array) {\n\n        return JSON.parse(array)\n\n    }\n```\n    然后调用：\n```\n    $(\"\").stringifyArray(array)\n```\n86、JavaScript中的作用域与变量声明提升？\n其他部分\n\n（HTTP、正则、优化、重构、响应式、移动端、团队协作、SEO、UED、职业生涯）\n\n    基于Class的选择性的性能相对于Id选择器开销很大，因为需遍历所有DOM元素。\n\n    频繁操作的DOM，先缓存起来再操作。用Jquery的链式调用更好。  \n\n     比如：var str=$(\"a\").attr(\"href\");\n\n    for (var i = size; i < arr.length; i++) {}\n\n     for 循环每一次循环都查找了数组 (arr) 的.length 属性，在开始循环的时候设置一个变量来存储这个数字，可以让循环跑得更快：\n\n     for (var i = size, length = arr.length; i < length; i++) {}\n\n87、前端开发的优化问题（看雅虎14条性能优化原则）。\n  （1） 减少http请求次数：CSS Sprites, JS、CSS源码压缩、图片大小控制合适；网页Gzip，CDN托管，data缓存 ，图片服务器。\n\n  （2） 前端模板 JS+数据，减少由于HTML标签导致的带宽浪费，前端用变量保存AJAX请求结果，每次操作本地变量，不用请求，减少请求次数\n\n  （3） 用innerHTML代替DOM操作，减少DOM操作次数，优化javascript性能。\n\n  （4） 当需要设置的样式很多时设置className而不是直接操作style。\n\n  （5） 少用全局变量、缓存DOM节点查找的结果。减少IO读取操作。\n\n  （6） 避免使用CSS Expression（css表达式)又称Dynamic properties(动态属性)。\n\n  （7） 图片预加载，将样式表放在顶部，将脚本放在底部  加上时间戳。\n\n  （8） 避免在页面的主体布局中使用table，table要等其中的内容完全下载之后才会显示出来，显示比div+css布局慢。\n\n88、http状态码有那些？分别代表是什么意思？\n    100-199 用于指定客户端应相应的某些动作。\n\n    200-299 用于表示请求成功。\n\n    300-399 用于已经移动的文件并且常被包含在定位头信息中指定新的地址信息。\n\n400-499 用于指出客户端的错误。\n\n400  语义有误，当前请求无法被服务器理解。\n\n401  当前请求需要用户验证\n\n403  服务器已经理解请求，但是拒绝执行它。\n\n500-599 用于支持服务器错误。\n\n503 – 服务不可用\n\n89、一个页面从输入 URL 到页面加载显示完成，这个过程中都发生了什么？（流程说的越详细越好）\n    要熟悉前后端的通信流程，最好把动态网站的背后细节也介绍一遍\n\n八、流行框架\n1、JQuery的源码看过吗？能不能简单概况一下它的实现原理？\n考察学习知识的态度，是否仅仅是停留在使用层面，要知其然知其所以然\n\n2、jQuery.fn的init方法返回的this指的是什么对象？为什么要返回this？\nthis执行init构造函数自身，其实就是jQuery实例对象，返回this是为了实现jQuery的链式操作\n\n3、jquery中如何将数组转化为json字符串，然后再转化回来？\n$.parseJSON('{\"name\":\"John\"}');\n\n4、jQuery 的属性拷贝(extend)的实现原理是什么，如何实现深拷贝？\n递归赋值\n\n5、jquery.extend 与 jquery.fn.extend的区别？\nJquery.extend用来扩展jQuery对象本身；jquery.fn.extend用来扩展jQuery实例\n\n6、谈一下Jquery中的bind(),live(),delegate(),on()的区别？\n7、JQuery一个对象可以同时绑定多个事件，这是如何实现的？\n可以同时绑定多个事件，低层实现原理是使用addEventListner与attachEvent兼容处理做事件注册\n\n10、Jquery与jQuery UI有啥区别？\njQuery是操作dom的框架，jQueryUI是基于jQuery做的一个UI组件库\n\n11、jQuery和Zepto的区别？各自的使用场景？\njQuery主要用于pc端，当然有对应的jQuerymobile用于移动端，zepto比jQuery更加小巧，主要用于移动端\n\n12、针对 jQuery 的优化方法？\n优先使用ID选择器\n\n在class前使用tag(标签名)\n\n给选择器一个上下文\n\n慎用 .live()方法（应该说尽量不要使用）\n\n使用data()方法存储临时变量\n\n13、Zepto的点透问题如何解决？\n点透主要是由于两个div重合，例如：一个div调用show()，一个div调用hide()；这个时候当点击上面的div的时候就会影响到下面的那个div；\n\n解决办法主要有2种：\n\n1.github上有一个叫做fastclick的库，它也能规避移动设备上click事件的延迟响应，`https://github.com/ftlabs/fastclick`\n\n将它用script标签引入页面（该库支持AMD，于是你也可以按照AMD规范，用诸如require.js的模块加载器引入），并且在dom ready时初始化在body上，\n\n2.根据分析，如果不引入其它类库，也不想自己按照上述fastclcik的思路再开发一套东西，需要1.一个优先于下面的“divClickUnder”捕获的事件；2.并且通过这个事件阻止掉默认行为（下面的“divClickUnder”对click事件的捕获，在iOS的safari，click的捕获被认为和滚屏、点击输入框弹起键盘等一样，是一种浏览器默认行为，即可以被event.preventDefault()阻止的行为）。\n\n12、知道各种JS框架(Angular, Backbone, Ember, React, Meteor, Knockout...)么? 能讲出他们各自的优点和缺点么?\n知识面的宽度，流行框架要多多熟悉\n\n13、Underscore 对哪些 JS 原生对象进行了扩展以及提供了哪些好用的函数方法？\nUnderscore的熟悉程度\n\n14、使用过angular吗？angular中的过滤器是干什么用的\n在表达式中转换数据\n```\n    <p>姓名为 {{ lastName | uppercase }}</p>\n```\ncurrency，是什么过滤器——格式化数字为货币格式，单位是$符。\n\n\n九、移动APP开发\n1、移动端最小触控区域是多大？\n移动端的点击事件的有延迟，时间是多久，为什么会有？ 怎么解决这个延时？（click 有 300ms 延迟,为了实现safari的双击事件的设计，浏览器要知道你是不是要双击操作。）\n\n十、NodeJs\n1、对Node的优点和缺点提出了自己的看法：\n（优点）因为Node是基于事件驱动和无阻塞的，所以非常适合处理并发请求，\n\n因此构建在Node上的代理服务器相比其他技术实现（如Ruby）的服务器表现要好得多。\n\n此外，与Node代理服务器交互的客户端代码是由javascript语言编写的，\n\n因此客户端和服务器端都用同一种语言编写，这是非常美妙的事情。\n\n（缺点）Node是一个相对新的开源项目，所以不太稳定，它总是一直在变，\n\n而且缺少足够多的第三方库支持。看起来，就像是Ruby/Rails当年的样子。\n\n2、需求：实现一个页面操作不会整页刷新的网站，并且能在浏览器前进、后退时正确响应。给出你的技术实现方案？\n至少给出自己的思路（url-hash,可以使用已有的一些框架history.js等）\n\n6、Node.js的适用场景？\n1)、实时应用：如在线聊天，实时通知推送等等（如socket.io）\n\n2)、分布式应用：通过高效的并行I/O使用已有的数据\n\n3)、工具类应用：海量的工具，小到前端压缩部署（如grunt），大到桌面图形界面应用程序\n\n4)、游戏类应用：游戏领域对实时和并发有很高的要求（如网易的pomelo框架）\n\n5)、利用稳定接口提升Web渲染能力\n\n6)、前后端编程语言环境统一：前端开发人员可以非常快速地切入到服务器端的开发（如著名的纯Javascript全栈式MEAN架构）\n\n4、(如果会用node)知道route, middleware, cluster, nodemon, pm2, server-side rendering么?\nNodejs相关概念的理解程度\n\n7、解释一下 Backbone 的 MVC 实现方式？\n流行的MVC架构模式\n\n8、什么是“前端路由”?什么时候适合使用“前端路由”? “前端路由”有哪些优点和缺点?\n熟悉前后端通信相关知识\n\n7、对Node的优点和缺点提出了自己的看法？\n优点：\n\n1. 因为Node是基于事件驱动和无阻塞的，所以非常适合处理并发请求，因此构建在Node上的代理服务器相比其他技术实现（如Ruby）的服务器表现要好得多。\n\n2. 与Node代理服务器交互的客户端代码是由javascript语言编写的，因此客户端和服务器端都用同一种语言编写，这是非常美妙的事情。\n\n缺点：\n\n1. Node是一个相对新的开源项目，所以不太稳定，它总是一直在变。\n\n2. 缺少足够多的第三方库支持。看起来，就像是Ruby/Rails当年的样子（第三方库现在已经很丰富了，所以这个缺点可以说不存在了）。\n\n\n\n十一、前端概括性问题\n1、常使用的库有哪些？常用的前端开发工具？开发过什么应用或组件？\n使用率较高的框架有jQuery、YUI、Prototype、Dojo、Ext.js、Mootools等。尤其是jQuery，超过91%。\n\n轻量级框架有Modernizr、underscore.js、backbone.js、Raphael.js等。（理解这些框架的功能、性能、设计原理）\n\n前端开发工具：Sublime Text 、Eclipse、Notepad、Firebug、HttpWatch、Yslow。\n\n开发过的插件：城市选择插件，汽车型号选择插件、幻灯片插件。弹出层。（写过开源程序，加载器，js引擎更好）\n\n9、对BFC规范的理解？\nFormatting Context：指页面中的一个渲染区域，并且拥有一套渲染规则，他决定了其子元素如何定位，以及与其他元素的相互关系和作用。\n\n3、99%的网站都需要被重构是那本书上写的？\n网站重构：应用web标准进行设计（第2版）\n\n4、WEB应用从服务器主动推送Data到客户端有那些方式？\n    html5 websoket\n\n    WebSocket通过Flash\n\n    XHR长时间连接\n\n    XHR Multipart Streaming\n\n    不可见的Iframe\n\n<script>标签的长时间连接(可跨域)\n\n5、加班的看法\n加班就像借钱，原则应当是------救急不救穷\n\n6、平时如何管理你的项目，如何设计突发大规模并发架构？\n先期团队必须确定好全局样式（globe.css），编码模式(utf-8) 等\n\n编写习惯必须一致（例如都是采用继承式的写法，单样式都写成一行）；\n\n标注样式编写人，各模块都及时标注（标注关键样式调用的地方）；\n\n页面进行标注（例如 页面 模块 开始和结束）；\n\nCSS跟HTML 分文件夹并行存放，命名都得统一（例如style.css）\n\nJS 分文件夹存放 命民以该JS 功能为准英文翻译；\n\n图片采用整合的 images.png png8 格式文件使用 尽量整合在一起使用方便将来的管理\n\n7、那些操作会造成内存泄漏？\n内存泄漏指任何对象在您不再拥有或需要它之后仍然存在。\n\n垃圾回收器定期扫描对象，并计算引用了每个对象的其他对象的数量。如果一个对象的引用数量为 0（没有其他对象引用过该对象），或对该对象的惟一引用是循环的，那么该对象的内存即可回收。\n\nsetTimeout 的第一个参数使用字符串而非函数的话，会引发内存泄漏。\n\n闭包、控制台日志、循环（在两个对象彼此引用且彼此保留时，就会产生一个循环）\n\n8、你说你热爱前端，那么应该WEB行业的发展很关注吧？ 说说最近最流行的一些东西吧？\nNode.js、MongoDB、npm、MVVM、MEAN、React、AngularJS\n\n9、你有了解我们公司吗？说说你的认识？\n因为我想去阿里，所以我针对阿里的说\n\n最羡慕就是在双十一购物节，350.19亿元，每分钟支付79万笔。海量数据，居然无一漏单、无一故障。太厉害了。\n\n10、    移动端（比如：Android IOS）怎么做好用户体验?\n融入自己的设计理念，注重用户体验，选择合适的技术\n\n11、    你所知道的页面性能优化方法有那些？\n压缩、合并，减少请求，代码层析优化。。。\n\n12、    除了前端以外还了解什么其它技术么？你最最厉害的技能是什么？\n知识面宽度，最好熟悉一些后台语言，比如php，展现出自己的技术两点\n\n13、AMD（Modules/Asynchronous-Definition）、CMD（Common Module Definition）规范区别？\n14、谈谈你认为怎样做能使项目做的更好？\n考虑问题的深入，不仅仅停留在完成任务上，要精益求精\n\n15、你对前端界面工程师这个职位是怎么样理解的？它的前景会怎么样？\n表现出对前端的认同与兴趣，关注相关技术前沿\n\n16、php中下面哪个函数可以打开一个文件，以对文件进行读和写操作？\nA.fget();B.file_open();C.fopen();D.open_file();\n\n17、php中rmdir可以直接删除文件夹吗？该目录必须是空的，而且要有相应的权限--来自api\nA.任何文件夹都可以删除           B.空文件夹可以删除\n\nC.有权限的任何文件夹都可以删除   D.有权限的空文件夹可以删除\n\n18、phpinset和empty的区别，举例说明\n1、empty函数\n\n用途：检测变量是否为空\n\n判断：如果 var 是非空或非零的值，则 empty() 返回 FALSE。换句话说，\"\"、0、\"0\"、NULL、FALSE、array()、var $var; 以及没有任何属性的对象都将被认为是空的，如果 var 为空，则返回 TRUE。注意：empty() 只检测变量，检测任何非变量的东西都将导致解析错误。换句话说，后边的语句将不会起作用;\n\n2、isset函数\n\n用途：检测变量是否设置\n\n判断：检测变量是否设置，并且不是 NULL。如果已经使用 unset() 释放了一个变量之后，它将不再是 isset()。若使用 isset() 测试一个被设置成 NULL 的变量，将返回 FALSE。同时要注意的是一个NULL 字节（\"\\0\"）并不等同于 PHP 的 NULL 常数。\n\n19、php中`$_SERVER变量`中如何得到当前执行脚本路劲\n\n\n20、写一个php函数，要求两个日期字符串的天数差，如2012-02-05~2012-03-06的日期差数\n21、一个衣柜中放了许多杂乱的衬衫，如果让你去整理一下，使得更容易找到你想要的衣服；你会怎么做？请写出你的做法和思路？\n22、如何优化网页加载速度？\n   1.减少css，js文件数量及大小(减少重复性代码，代码重复利用)，压缩CSS和Js代码\n\n   2.图片的大小\n\n   3.把css样式表放置顶部，把js放置页面底部\n\n   4.减少http请求数\n\n   5.使用外部 Js 和 CSS\n\n23、工作流程，你怎么来实现页面设计图，你认为前端应该如何高质量完成工作?\n熟悉相关设计规范，自己总结的一些经验\n\n24、介绍项目经验、合作开发、独立开发。\n团队协作，个人能力。实践经验\n\n25、开发过程中遇到困难，如何解决。\n考察解决问题的能力\n\n26、对前端界面工程师这个职位是怎么样理解的？它的前景会怎么样？\n    前端是最贴近用户的程序员，比后端、数据库、产品经理、运营、安全都近。\n\n    1、实现界面交互\n\n    2、提升用户体验\n\n    3、有了Node.js，前端可以实现服务端的一些事情\n\n前端是最贴近用户的程序员，前端的能力就是能让产品从 90分进化到 100 分，甚至更好，\n\n参与项目，快速高质量完成实现效果图，精确到1px；\n\n与团队成员，UI设计，产品经理的沟通；\n\n做好的页面结构，页面重构和用户体验；\n\n处理hack，兼容、写出优美的代码格式；\n\n针对服务器的优化、拥抱最新前端技术。\n\n其它相关的加分项：\n\n    1. 都使用和了解过哪些编辑器?都使用和了解过哪些日常工具?\n\n    2. 都知道有哪些浏览器内核?开发过的项目都兼容哪些浏览器?\n\n    3. 瀑布流布局或者流式布局是否有了解\n\n    4. HTML5都有哪些新的API?\n\n    5. 都用过什么代码调试工具?\n\n    6. 是否有接触过或者了解过重构。\n\n7.你遇到过比较难的技术问题是？你是如何解决的？\n","slug":"前端知识点3","published":1,"updated":"2017-06-11T02:44:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5naxwfu005yfcxe737by8hn","content":"<div><br>一、HTML和CSS<br>1、你做的页面在哪些流览器测试过？这些浏览器的内核分别是什么?<br>IE: trident内核<br><br>Firefox：gecko内核<br><br>Safari:webkit内核<br><br>Opera:以前是presto内核，Opera现已改用Google Chrome的Blink内核<br><br>Chrome:Blink(基于webkit，Google与Opera Software共同开发)<br><br>2、每个HTML文件里开头都有个很重要的东西，Doctype，知道这是干什么的吗？<br>&lt;!DOCTYPE&gt; 声明位于文档中的最前面的位置，处于 <html> 标签之前。此标签可告知浏览器文档使用哪种 HTML 或 XHTML 规范。（重点：告诉浏览器按照何种规范解析页面）<br><br><a id=\"more\"></a><br><br>3、Quirks模式是什么？它和Standards模式有什么区别<br>从IE6开始，引入了Standards模式，标准模式中，浏览器尝试给符合标准的文档在规范上的正确处理达到在指定浏览器中的程度。<br><br>在IE6之前CSS还不够成熟，所以IE5等之前的浏览器对CSS的支持很差， IE6将对CSS提供更好的支持，然而这时的问题就来了，因为有很多页面是基于旧的布局方式写的，而如果IE6 支持CSS则将令这些页面显示不正常，如何在即保证不破坏现有页面，又提供新的渲染机制呢？<br><br>在写程序时我们也会经常遇到这样的问题，如何保证原来的接口不变，又提供更强大的功能，尤其是新功能不兼容旧功能时。遇到这种问题时的一个常见做法是增加参数和分支，即当某个参数为真时，我们就使用新功能，而如果这个参数 不为真时，就使用旧功能，这样就能不破坏原有的程序，又提供新功能。IE6也是类似这样做的，它将DTD当成了这个“参数”，因为以前的页面大家都不会去写DTD，所以IE6就假定 如果写了DTD，就意味着这个页面将采用对CSS支持更好的布局，而如果没有，则采用兼容之前的布局方式。这就是Quirks模式（怪癖模式，诡异模式，怪异模式）。<br><br>区别：<br><br>总体会有布局、样式解析和脚本执行三个方面的区别。<br><br>盒模型：在W3C标准中，如果设置一个元素的宽度和高度，指的是元素内容的宽度和高度，而在Quirks 模式下，IE的宽度和高度还包含了padding和border。<br><br><br><br>设置行内元素的高宽：在Standards模式下，给<span>等行内元素设置wdith和height都不会生效，而在quirks模式下，则会生效。<br><br>设置百分比的高度：在standards模式下，一个元素的高度是由其包含的内容来决定的，如果父元素没有设置百分比的高度，子元素设置一个百分比的高度是无效的用margin:0 auto设置水平居中：使用margin:0 auto在standards模式下可以使元素水平居中，但在quirks模式下却会失效。<br><br>（还有很多，答出什么不重要，关键是看他答出的这些是不是自己经验遇到的，还是说都是看文章看的，甚至完全不知道。）<br><br>4、div+css的布局较table布局有什么优点？<br>改版的时候更方便 只要改css文件。<br><br>页面加载速度更快、结构化清晰、页面显示简洁。<br><br>表现与结构相分离。<br><br>易于优化（seo）搜索引擎更友好，排名更容易靠前。<br><br>5、 img的alt与title有何异同？ strong与em的异同？<br>a:alt(alt text):为不能显示图像、窗体或applets的用户代理（UA），alt属性用来指定替换文字。替换文字的语言由lang属性指定。(在IE浏览器下会在没有title时把alt当成 tool tip显示)<br><br>title(tool tip):该属性为设置该属性的元素提供建议性的信息。<br><br>strong:粗体强调标签，强调，表示内容的重要性<br><br>em:斜体强调标签，更强烈强调，表示内容的强调点<br><br>6、你能描述一下渐进增强和优雅降级之间的不同吗?<br>渐进增强 progressive enhancement：针对低版本浏览器进行构建页面，保证最基本的功能，然后再针对高级浏览器进行效果、交互等改进和追加功能达到更好的用户体验。<br><br>优雅降级 graceful degradation：一开始就构建完整的功能，然后再针对低版本浏览器进行兼容。<br><br>区别：优雅降级是从复杂的现状开始，并试图减少用户体验的供给，而渐进增强则是从一个非常基础的，能够起作用的版本开始，并不断扩充，以适应未来环境的需要。降级（功能衰减）意味着往回看；而渐进增强则意味着朝前看，同时保证其根基处于安全地带。<br><br>“优雅降级”观点<br><br>“优雅降级”观点认为应该针对那些最高级、最完善的浏览器来设计网站。而将那些被认为“过时”或有功能缺失的浏览器下的测试工作安排在开发周期的最后阶段，并把测试对象限定为主流浏览器（如 IE、Mozilla 等）的前一个版本。<br><br>在这种设计范例下，旧版的浏览器被认为仅能提供“简陋却无妨 (poor, but passable)” 的浏览体验。你可以做一些小的调整来适应某个特定的浏览器。但由于它们并非我们所关注的焦点，因此除了修复较大的错误之外，其它的差异将被直接忽略。<br><br>“渐进增强”观点<br><br>“渐进增强”观点则认为应关注于内容本身。<br><br>内容是我们建立网站的诱因。有的网站展示它，有的则收集它，有的寻求，有的操作，还有的网站甚至会包含以上的种种，但相同点是它们全都涉及到内容。这使得“渐进增强”成为一种更为合理的设计范例。这也是它立即被 Yahoo! 所采纳并用以构建其“分级式浏览器支持 (Graded Browser Support)”策略的原因所在。<br><br>那么问题来了。现在产品经理看到IE6,7,8网页效果相对高版本现代浏览器少了很多圆角，阴影（CSS3），要求兼容（使用图片背景，放弃CSS3），你会如何说服他？<br><br>7、为什么利用多个域名来存储网站资源会更有效？<br>CDN缓存更方便<br><br>突破浏览器并发限制<br><br>节约cookie带宽<br><br>节约主域名的连接数，优化页面响应速度<br><br>防止不必要的安全问题<br><br>8、请谈一下你对网页标准和标准制定机构重要性的理解。<br>网页标准和标准制定机构都是为了能让web发展的更‘健康’，开发者遵循统一的标准，降低开发难度，开发成本，SEO也会更好做，也不会因为滥用代码导致各种BUG、安全问题，最终提高网站易用性。<br><br>9、请描述一下cookies，sessionStorage和localStorage的区别？<br>sessionStorage用于本地存储一个会话（session）中的数据，这些数据只有在同一个会话中的页面才能访问并且当会话结束后数据也随之销毁。因此sessionStorage不是一种持久化的本地存储，仅仅是会话级别的存储。而localStorage用于持久化的本地存储，除非主动删除数据，否则数据是永远不会过期的。<br><br>web storage和cookie的区别<br><br>Web Storage的概念和cookie相似，区别是它是为了更大容量存储设计的。Cookie的大小是受限的，并且每次你请求一个新的页面的时候Cookie都会被发送过去，这样无形中浪费了带宽，另外cookie还需要指定作用域，不可以跨域调用。<br><br>除此之外，Web Storage拥有setItem,getItem,removeItem,clear等方法，不像cookie需要前端开发者自己封装setCookie，getCookie。但是Cookie也是不可以或缺的：Cookie的作用是与服务器进行交互，作为HTTP规范的一部分而存在 ，而Web Storage仅仅是为了在本地“存储”数据而生。<br><br>10、简述一下src与href的区别。<br>src用于替换当前元素，href用于在当前文档和引用资源之间确立联系。<br><br>src是source的缩写，指向外部资源的位置，指向的内容将会嵌入到文档中当前标签所在位置；在请求src资源时会将其指向的资源下载并应用到文档内，例如js脚本，img图片和frame等元素。<br><br><script src=\"”js.js”\"></script><br><br>当浏览器解析到该元素时，会暂停其他资源的下载和处理，直到将该资源加载、编译、执行完毕，图片和框架等元素也如此，类似于将所指向资源嵌入当前标签内。这也是为什么将js脚本放在底部而不是头部。<br><br>href是Hypertext Reference的缩写，指向网络资源所在位置，建立和当前元素（锚点）或当前文档（链接）之间的链接，如果我们在文档中添加<br><br><link href=\"”common.css”\" rel=\"”stylesheet”/\"><br><br>那么浏览器会识别该文档为css文件，就会并行下载资源并且不会停止对当前文档的处理。这也是为什么建议使用link方式来加载css，而不是使用@import方式。<br><br>11、知道的网页制作会用到的图片格式有哪些？<br>png-8，png-24，jpeg，gif，svg。<br><br>但是上面的那些都不是面试官想要的最后答案。面试官希望听到是Webp。（是否有关注新技术，新鲜事物）<br><br>科普一下Webp：WebP格式，谷歌（google）开发的一种旨在加快图片加载速度的图片格式。图片压缩体积大约只有JPEG的2/3，并能节省大量的服务器带宽资源和数据空间。Facebook Ebay等知名网站已经开始测试并使用WebP格式。<br><br>在质量相同的情况下，WebP格式图像的体积要比JPEG格式图像小40%<br><br>12、知道什么是微格式吗？谈谈理解。在前端构建中应该考虑微格式吗？<br>微格式（Microformats）是一种让机器可读的语义化XHTML词汇的集合，是结构化数据的开放标准。是为特殊应用而制定的特殊格式。<br><br>优点：将智能数据添加到网页上，让网站内容在搜索引擎结果界面可以显示额外的提示。（应用范例：豆瓣，有兴趣自行google）<br><br>13、在css/js代码上线之后开发人员经常会优化性能，从用户刷新网页开始，一次js请求一般情况下有哪些地方会有缓存处理？<br>答案：dns缓存，cdn缓存，浏览器缓存，服务器缓存。<br><br>14、一个页面上有大量的图片（大型电商网站），加载很慢，你有哪些方法优化这些图片的加载，给用户更好的体验。<br>图片懒加载，在页面上的未可视区域可以添加一个滚动条事件，判断图片位置与浏览器顶端的距离与页面的距离，如果前者小于后者，优先加载。<br><br>如果为幻灯片、相册等，可以使用图片预加载技术，将当前展示图片的前一张和后一张优先下载。<br><br>如果图片为css图片，可以使用CSSsprite，SVGsprite，Iconfont、Base64等技术。<br><br>如果图片过大，可以使用特殊编码的图片，加载时会先加载一张压缩的特别厉害的缩略图，以提高用户体验。<br><br>如果图片展示区域小于图片的真实大小，则因在服务器端根据业务需要先行进行图片压缩，图片压缩后大小与展示一致。<br><br>15、你如何理解HTML结构的语义化？　<br>去掉或样式丢失的时候能让页面呈现清晰的结构：<br><br>html本身是没有表现的，我们看到例如<code>&lt;h1&gt;</code>是粗体，字体大小2em，加粗；<code>&lt;strong&gt;</code>是加粗的，不要认为这是html的表现，这些其实html默认的css样式在起作用，所以去掉或样式丢失的时候能让页面呈现清晰的结构不是语义化的HTML结构的优点，但是浏览器都有有默认样式，默认样式的目的也是为了更好的表达html的语义，可以说浏览器的默认样式和语义化的HTML结构是不可分割的。<br><br>屏幕阅读器（如果访客有视障）会完全根据你的标记来“读”你的网页.<br><br>例如,如果你使用的含语义的标记,屏幕阅读器就会“逐个拼出”你的单词,而不是试着去对它完整发音.<br><br>PDA、手机等设备可能无法像普通电脑的浏览器一样来渲染网页（通常是因为这些设备对CSS的支持较弱）<br><br>使用语义标记可以确保这些设备以一种有意义的方式来渲染网页.理想情况下,观看设备的任务是符合设备本身的条件来渲染网页.<br><br>语义标记为设备提供了所需的相关信息,就省去了你自己去考虑所有可能的显示情况（包括现有的或者将来新的设备）.例如,一部手机可以选择使一段标记了标题的文字以粗体显示.而掌上电脑可能会以比较大的字体来显示.无论哪种方式一旦你对文本标记为标题,您就可以确信读取设备将根据其自身的条件来合适地显示页面.<br><br>搜索引擎的爬虫也依赖于标记来确定上下文和各个关键字的权重<br><br>过去你可能还没有考虑搜索引擎的爬虫也是网站的“访客”,但现在它们他们实际上是极其宝贵的用户.没有他们的话,搜索引擎将无法索引你的网站,然后一般用户将很难过来访问.<br><br>你的页面是否对爬虫容易理解非常重要,因为爬虫很大程度上会忽略用于表现的标记,而只注重语义标记.<br><br>因此,如果页面文件的标题被标记,而不是,那么这个页面在搜索结果的位置可能会比较靠后.除了提升易用性外,语义标记有利于正确使用CSS和JavaScript,因为其本身提供了许多“钩钩”来应用页面的样式与行为.<br><br>SEO主要还是靠你网站的内容和外部链接的。<br><br>便于团队开发和维护<br><br>W3C给我们定了一个很好的标准，在团队中大家都遵循这个标准，可以减少很多差异化的东西，方便开发和维护，提高开发效率，甚至实现模块化开发。<br><br>16、谈谈以前端角度出发做好SEO需要考虑什么？<br>了解搜索引擎如何抓取网页和如何索引网页<br><br>你需要知道一些搜索引擎的基本工作原理，各个搜索引擎之间的区别，搜索机器人（SE robot 或叫 web crawler）如何进行工作，搜索引擎如何对搜索结果进行排序等等。<br><br>Meta标签优化<br><br>主要包括主题（Title)，网站描述(Description)，和关键词（Keywords）。还有一些其它的隐藏文字比如Author（作者），Category（目录），Language（编码语种）等。<br><br>如何选取关键词并在网页中放置关键词<br><br>搜索就得用关键词。关键词分析和选择是SEO最重要的工作之一。首先要给网站确定主关键词（一般在5个上下），然后针对这些关键词进行优化，包括关键词密度（Density），相关度（Relavancy），突出性（Prominency）等等。<br><br>了解主要的搜索引擎<br><br>虽然搜索引擎有很多，但是对网站流量起决定作用的就那么几个。比如英文的主要有Google，Yahoo，Bing等；中文的有百度，搜狗，有道等。不同的搜索引擎对页面的抓取和索引、排序的规则都不一样。还要了解各搜索门户和搜索引擎之间的关系，比如AOL网页搜索用的是Google的搜索技术，MSN用的是Bing的技术。<br><br>主要的互联网目录<br><br>Open Directory自身不是搜索引擎，而是一个大型的网站目录，他和搜索引擎的主要区别是网站内容的收集方式不同。目录是人工编辑的，主要收录网站主页；搜索引擎是自动收集的，除了主页外还抓取大量的内容页面。<br><br>按点击付费的搜索引擎<br><br>搜索引擎也需要生存，随着互联网商务的越来越成熟，收费的搜索引擎也开始大行其道。最典型的有Overture和百度，当然也包括Google的广告项目Google Adwords。越来越多的人通过搜索引擎的点击广告来定位商业网站，这里面也大有优化和排名的学问，你得学会用最少的广告投入获得最多的点击。<br><br>搜索引擎登录<br><br>网站做完了以后，别躺在那里等着客人从天而降。要让别人找到你，最简单的办法就是将网站提交（submit）到搜索引擎。如果你的是商业网站，主要的搜索引擎和目录都会要求你付费来获得收录（比如Yahoo要299美元），但是好消息是（至少到目前为止）最大的搜索引擎Google目前还是免费，而且它主宰着60％以上的搜索市场。<br><br>链接交换和链接广泛度（Link Popularity）<br><br>网页内容都是以超文本（Hypertext）的方式来互相链接的，网站之间也是如此。除了搜索引擎以外，人们也每天通过不同网站之间的链接来Surfing（“冲浪”）。其它网站到你的网站的链接越多，你也就会获得更多的访问量。更重要的是，你的网站的外部链接数越多，会被搜索引擎认为它的重要性越大，从而给你更高的排名。<br><br>合理的标签使用<br><br>17、有哪项方式可以对一个DOM设置它的CSS样式？　<br>外部样式表，引入一个外部css文件<br><br>内部样式表，将css代码放在 <head> 标签内部<br><br>内联样式，将css样式直接定义在 HTML 元素内部<br><br>18、CSS都有哪些选择器？<br>派生选择器（用HTML标签申明）<br><br>id选择器（用DOM的ID申明）<br><br>类选择器（用一个样式类名申明）<br><br>属性选择器（用DOM的属性申明，属于CSS2，IE6不支持，不常用，不知道就算了）<br><br>除了前3种基本选择器，还有一些扩展选择器，包括<br><br>后代选择器（利用空格间隔，比如div .a{  }）<br><br>群组选择器（利用逗号间隔，比如p,div,#a{  }）<br><br>那么问题来了，CSS选择器的优先级是怎么样定义的？<br><br>基本原则：<br><br>一般而言，选择器越特殊，它的优先级越高。也就是选择器指向的越准确，它的优先级就越高。<br><br>复杂的计算方法：<br><br>用1表示派生选择器的优先级<br><br>用10表示类选择器的优先级<br><br>用100标示ID选择器的优先级<br><br>div.test1 .span var 优先级 1+10 +10 +1<br><br>span#xxx .songs li 优先级1+100 + 10 + 1<br><br>#xxx li 优先级 100 +1<br><br>那么问题来了，看下列代码，<p>标签内的文字是什么颜色的？<br><br><style><br><br>.classA{ color:blue;}<br><br>.classB{ color:red;}<br><br></style><br><br><body><br><br><p class=\"classB classA\"> 123 </p><br><br></body><br><br>答案：red。与样式定义在文件中的先后顺序有关，即是后面的覆盖前面的，与在</p><p class=\"’classB\" classa’=\"\">中的先后关系无关。<br><br>19、CSS中可以通过哪些属性定义，使得一个DOM元素不显示在浏览器可视范围内？<br>最基本的：<br><br>设置display属性为none，或者设置visibility属性为hidden<br><br>技巧性：<br><br>设置宽高为0，设置透明度为0，设置z-index位置在-1000<br><br>20、超链接访问过后hover样式就不出现的问题是什么？如何解决？<br>答案：被点击访问过的超链接样式不在具有hover和active了,解决方法是改变CSS属性的排列顺序: L-V-H-A（link,visited,hover,active）<br><br>21、什么是Css Hack？ie6,7,8的hack分别是什么？<br>答案：针对不同的浏览器写不同的CSS code的过程，就是CSS hack。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">#test       &#123;  </div><div class=\"line\"></div><div class=\"line\">        width:300px;  </div><div class=\"line\"></div><div class=\"line\">        height:300px;  </div><div class=\"line\"></div><div class=\"line\">        background-color:blue;      /*firefox*/</div><div class=\"line\"></div><div class=\"line\">        background-color:red\\9;      /*all ie*/</div><div class=\"line\"></div><div class=\"line\">        background-color:yellow;    /*ie8*/</div><div class=\"line\"></div><div class=\"line\">        +background-color:pink;        /*ie7*/</div><div class=\"line\"></div><div class=\"line\">        _background-color:orange;       /*ie6*/    &#125;</div><div class=\"line\"></div><div class=\"line\">        :root #test &#123; background-color:purple\\9; &#125;  /*ie9*/</div><div class=\"line\"></div><div class=\"line\">    @media all and (min-width:0px)&#123; #test &#123;background-color:black;&#125; &#125;  /*opera*/</div><div class=\"line\"></div><div class=\"line\">    @media screen and (-webkit-min-device-pixel-ratio:0)&#123; #test &#123;background-color:gray;&#125; &#125;       /*chrome and safari*/</div></pre></td></tr></table></figure><br><br>22、请用Css写一个简单的幻灯片效果页面<br>答案：知道是要用css3。使用animation动画实现一个简单的幻灯片效果。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div></pre></td><td class=\"code\"><pre><div class=\"line\">div.ani</div><div class=\"line\"></div><div class=\"line\">/**css**/</div><div class=\"line\"></div><div class=\"line\">.ani&#123;</div><div class=\"line\"></div><div class=\"line\">  width:480px;</div><div class=\"line\"></div><div class=\"line\">  height:320px;</div><div class=\"line\"></div><div class=\"line\">  margin:50px auto;</div><div class=\"line\"></div><div class=\"line\">  overflow: hidden;</div><div class=\"line\"></div><div class=\"line\">  box-shadow:0 0 5px rgba(0,0,0,1);</div><div class=\"line\"></div><div class=\"line\">  background-size: cover;</div><div class=\"line\"></div><div class=\"line\">  background-position: center;</div><div class=\"line\"></div><div class=\"line\">  -webkit-animation-name: &quot;loops&quot;;</div><div class=\"line\"></div><div class=\"line\">  -webkit-animation-duration: 20s;</div><div class=\"line\"></div><div class=\"line\">  -webkit-animation-iteration-count: infinite;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@-webkit-keyframes &quot;loops&quot; &#123;</div><div class=\"line\"></div><div class=\"line\">    0% &#123;</div><div class=\"line\"></div><div class=\"line\">        background:url(http://d.h、d3.jpg) no-repeat;            </div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    25% &#123;</div><div class=\"line\"></div><div class=\"line\">        background:url(http://b.hiphotos.baidu.com/image/w%3D400/sig、f76094b364d72bceba1cc7cd98c109dd0.jpg) no-repeat;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    50% &#123;</div><div class=\"line\"></div><div class=\"line\">        background:url(http://b.hiphotos.baidu.com/image/w%3D400/sign=937dace2552c11dfded1be、58e7、bb5b912.jpg) no-repeat;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    75% &#123;</div><div class=\"line\"></div><div class=\"line\">        background:url(http://g.hiphotos.baidu.com/image/w%3D400/sign=7d37500b8544095d61f0972cdda3cc7cd99e4b.jpg) no-repeat;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    100% &#123;</div><div class=\"line\"></div><div class=\"line\">        background:url(http://c.hiphotos.baidu.com/image/2b21192138ad1.jpg) no-repeat;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><br><br>24、行内元素和块级元素的具体区别是什么？行内元素的padding和margin可设置吗？<br>块级元素(block)特性：<br><br>总是独占一行，表现为另起一行开始，而且其后的元素也必须另起一行显示;<br><br>宽度(width)、高度(height)、内边距(padding)和外边距(margin)都可控制;<br><br>内联元素(inline)特性：<br><br>和相邻的内联元素在同一行;<br><br>宽度(width)、高度(height)、内边距的top/bottom(padding-top/padding-bottom)和外边距的top/bottom(margin-top/margin-bottom)都不可改变<br><br>（也就是padding和margin的left和right是可以设置的），就是里面文字或图片的大小。<br><br>那么问题来了，浏览器还有默认的天生inline-block元素（拥有内在尺寸，可设置高宽，但不会自动换行），有哪些？<br><br>答案：<code>&lt;input&gt; 、&lt;img&gt; 、&lt;button&gt; 、&lt;texterea&gt; 、&lt;label&gt;</code>。<br><br>25、什么是外边距重叠？重叠的结果是什么？<br>外边距重叠就是margin-collapse。<br><br>在CSS当中，相邻的两个盒子（可能是兄弟关系也可能是祖先关系）的外边距可以结合成一个单独的外边距。这种合并外边距的方式被称为折叠，并且因而所结合成的外边距称为折叠外边距。<br><br>折叠结果遵循下列计算规则：<br><br>两个相邻的外边距都是正数时，折叠结果是它们两者之间较大的值。<br><br>两个相邻的外边距都是负数时，折叠结果是两者绝对值的较大值。<br><br>两个外边距一正一负时，折叠结果是两者的相加的和。<br><br>26、rgba()和opacity的透明效果有什么不同？<br>rgba()和opacity都能实现透明效果，但最大的不同是opacity作用于元素，以及元素内的所有内容的透明度，<br><br>而rgba()只作用于元素的颜色或其背景色。（设置rgba透明的元素的子元素不会继承透明效果！）<br><br>27、css中可以让文字在垂直和水平方向上重叠的两个属性是什么？<br>垂直方向：line-height<br><br>水平方向：letter-spacing<br><br>那么问题来了，关于letter-spacing的妙用知道有哪些么？<br><br>答案:可以用于消除inline-block元素间的换行符空格间隙问题。<br><br>28、如何垂直居中一个浮动元素？<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 方法一：已知元素的高宽</div><div class=\"line\"></div><div class=\"line\">#div1&#123;</div><div class=\"line\"></div><div class=\"line\">    background-color:#6699FF;</div><div class=\"line\"></div><div class=\"line\">    width:200px;</div><div class=\"line\"></div><div class=\"line\">    height:200px;</div><div class=\"line\"></div><div class=\"line\">    position: absolute;        //父元素需要相对定位</div><div class=\"line\"></div><div class=\"line\">    top: 50%;</div><div class=\"line\"></div><div class=\"line\">    left: 50%;</div><div class=\"line\"></div><div class=\"line\">    margin-top:-100px ;   //二分之一的height，width</div><div class=\"line\"></div><div class=\"line\">    margin-left: -100px;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">//方法二:未知元素的高宽</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">  #div1&#123;</div><div class=\"line\"></div><div class=\"line\">    width: 200px;</div><div class=\"line\"></div><div class=\"line\">    height: 200px;</div><div class=\"line\"></div><div class=\"line\">    background-color: #6699FF;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    margin:auto;</div><div class=\"line\"></div><div class=\"line\">    position: absolute;        //父元素需要相对定位</div><div class=\"line\"></div><div class=\"line\">    left: 0;</div><div class=\"line\"></div><div class=\"line\">    top: 0;</div><div class=\"line\"></div><div class=\"line\">    right: 0;</div><div class=\"line\"></div><div class=\"line\">    bottom: 0;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure><br><br>那么问题来了，如何垂直居中一个<img>?（用更简便的方法。）<br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">#Container     //&lt;img&gt;的容器设置如下</div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\">    display:table-cell;</div><div class=\"line\"></div><div class=\"line\">    text-align:center;</div><div class=\"line\"></div><div class=\"line\">    vertical-align:middle;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><br><br>29、px和em的区别。<br>px和em都是长度单位，区别是，px的值是固定的，指定是多少就是多少，计算比较容易。em得值不是固定的，并且em会继承父级元素的字体大小。<br><br>浏览器的默认字体高都是16px。所以未经调整的浏览器都符合: 1em=16px。那么12px=0.75em, 10px=0.625em。<br><br>30、描述一个”reset”的CSS文件并如何使用它。知道normalize.css吗？你了解他们的不同之处？<br>重置样式非常多，凡是一个前端开发人员肯定有一个常用的重置CSS文件并知道如何使用它们。他们是盲目的在做还是知道为什么这么做呢？原因是不同的浏览器对一些元素有不同的默认样式，如果你不处理，在不同的浏览器下会存在必要的风险，或者更有戏剧性的性发生。<br><br>你可能会用Normalize来代替你的重置样式文件。它没有重置所有的样式风格，但仅提供了一套合理的默认样式值。既能让众多浏览器达到一致和合理，但又不扰乱其他的东西（如粗体的标题）。<br><br>在这一方面，无法做每一个复位重置。它也确实有些超过一个重置，它处理了你永远都不用考虑的怪癖，像HTML的audio元素不一致或line-height不一致。<br><br>31、Sass、LESS是什么？大家为什么要使用他们？<br>他们是CSS预处理器。他是CSS上的一种抽象层。他们是一种特殊的语法/语言编译成CSS。<br><br>例如Less是一种动态样式语言. 将CSS赋予了动态语言的特性，如变量，继承，运算， 函数. LESS 既可以在客户端上运行 (支持IE 6+, Webkit, Firefox)，也可一在服务端运行 (借助 Node.js)。<br><br>为什么要使用它们？<br><br>结构清晰，便于扩展。<br><br>可以方便地屏蔽浏览器私有语法差异。这个不用多说，封装对浏览器语法差异的重复处理，减少无意义的机械劳动。<br><br>可以轻松实现多重继承。<br><br>完全兼容 CSS 代码，可以方便地应用到老项目中。LESS 只是在 CSS 语法上做了扩展，所以老的 CSS 代码也可以与 LESS 代码一同编译。<br><br>32、display:none与visibility:hidden的区别是什么？<br>display : 隐藏对应的元素但不挤占该元素原来的空间。<br><br>visibility: 隐藏对应的元素并且挤占该元素原来的空间。<br><br>即是，使用CSS display:none属性后，HTML元素（对象）的宽度、高度等各种属性值都将“丢失”;而使用visibility:hidden属性后，HTML元素（对象）仅仅是在视觉上看不见（完全透明），而它所占据的空间位置仍然存在。<br><br>34、CSS中link和@import的区别是：<br>Link属于html标签，而@import是CSS中提供的<br><br>在页面加载的时候，link会同时被加载，而@import引用的CSS会在页面加载完成后才会加载引用的CSS<br><br>@import只有在ie5以上才可以被识别，而link是html标签，不存在浏览器兼容性问题<br><br>Link引入样式的权重大于@import的引用（@import是将引用的样式导入到当前的页面中）<br><br>35、简介盒子模型：<br>CSS的盒子模型有两种：IE盒子模型、标准的W3C盒子模型模型<br><br>盒模型：内容、内边距、外边距（一般不计入盒子实际宽度）、边框<br><br><br><br>36、为什么要初始化样式？<br>由于浏览器兼容的问题，不同的浏览器对标签的默认样式值不同，若不初始化会造成不同浏览器之间的显示差异<br><br>但是初始化CSS会对搜索引擎优化造成小影响<br><br>37、BFC是什么?<br>BFC（块级格式化上下文），一个创建了新的BFC的盒子是独立布局的，盒子内元素的布局不会影响盒子外面的元素。在同一个BFC中的两个相邻的盒子在垂直方向发生margin重叠的问题<br><br>BFC是指浏览器中创建了一个独立的渲染区域，该区域内所有元素的布局不会影响到区域外元素的布局，这个渲染区域只对块级元素起作用<br><br>38、html语义化是什么？<br>当页面样式加载失败的时候能够让页面呈现出清晰的结构<br><br>有利于seo优化，利于被搜索引擎收录（更便于搜索引擎的爬虫程序来识别）<br><br>便于项目的开发及维护，使html代码更具有可读性，便于其他设备解析。<br><br>39、Doctype的作用？严格模式与混杂模式的区别？<br>&lt;!DOCTYPE&gt;用于告知浏览器该以何种模式来渲染文档<br><br>严格模式下：页面排版及JS解析是以该浏览器支持的最高标准来执行<br><br>混杂模式：不严格按照标准执行，主要用来兼容旧的浏览器，向后兼容<br><br>40、IE的双边距BUG：块级元素float后设置横向margin，ie6显示的margin比设置的较大。解决：加入_display：inline<br>41、HTML与XHTML——二者有什么区别？<br>1. 所有的标记都必须要有一个相应的结束标记<br><br>2. 所有标签的元素和属性的名字都必须使用小写<br><br>3. 所有的 XML 标记都必须合理嵌套<br><br>4. 所有的属性必须用引号 “” 括起来<br><br>5. 把所有 &lt; 和 &amp; 特殊符号用编码表示<br><br>6. 给所有属性赋一个值<br><br>7. 不要在注释内容中使用 “–”<br><br>8. 图片必须有说明文字<br><br>42、html常见兼容性问题？<br>1.双边距BUG float引起的  使用display<br><br>2.3像素问题 使用float引起的 使用dislpay:inline -3px<br><br>3.超链接hover 点击后失效  使用正确的书写顺序 link visited hover active<br><br>4.Ie z-index问题 给父级添加position:relative<br><br>5.Png 透明 使用js代码 改<br><br>6.Min-height 最小高度 ！Important 解决’<br><br>7.select 在ie6下遮盖 使用iframe嵌套<br><br>8.为什么没有办法定义1px左右的宽度容器（IE6默认的行高造成的，使用over:hidden,zoom:0.08 line-height:1px）<br><br>9.IE5-8不支持opacity，解决办法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">.opacity &#123;</div><div class=\"line\"></div><div class=\"line\">    opacity: 0.4</div><div class=\"line\"></div><div class=\"line\">    filter: alpha(opacity=60); /* for IE5-7 */</div><div class=\"line\"></div><div class=\"line\">    -ms-filter: &quot;progid:DXImageTransform.Microsoft.Alpha(Opacity=60)&quot;; /* for IE 8*/</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><br><br>10. IE6不支持PNG透明背景，解决办法: IE6下使用gif图片<br><br>43、对WEB标准以及W3C的理解与认识<br>答：标签闭合、标签小写、不乱嵌套、提高搜索机器人搜索几率、使用外 链css和js脚本、结构行为表现的分离、文件下载与页面速度更快、内容能被更多的用户所访问、内容能被更广泛的设备所访问、更少的代码和组件，容易维 护、改版方便，不需要变动页面内容、提供打印版本而不需要复制内容、提高网站易用性。<br><br>44、行内元素有哪些?块级元素有哪些?CSS的盒模型?<br>答：块级元素：div p h1 h2 h3 h4 form ul<br>行内元素: a b br i span input select<br>Css盒模型:内容，border ,margin，padding<br><br>45、前端页面有哪三层构成，分别是什么?作用是什么?<br>答：结构层 Html 表示层 CSS 行为层 js。<br><br>46、Doctype作用? 严格模式与混杂模式-如何触发这两种模式，区分它们有何意义?<br>    （1）、&lt;!DOCTYPE&gt; 声明位于文档中的最前面，处于 <html> 标签之前。告知浏览器的解析器，用什么文档类型 规范来解析这个文档。<br><br>    （2）、严格模式的排版和 JS 运作模式是  以该浏览器支持的最高标准运行。<br><br>    （3）、在混杂模式中，页面以宽松的向后兼容的方式显示。模拟老式浏览器的行为以防止站点无法工作。<br><br>    （4）、DOCTYPE不存在或格式不正确会导致文档以混杂模式呈现。<br><br>47、行内元素有哪些？块级元素有哪些？ 空(void)元素有那些？<br>（1）CSS规范规定，每个元素都有display属性，确定该元素的类型，每个元素都有默认的display值，比如div默认display属性值为“block”，成为“块级”元素；span默认display属性值为“inline”，是“行内”元素。<br><br>（2）行内元素有：a b span img input select strong（强调的语气） 块级元素有：div ul ol li dl dt dd h1 h2 h3 h4…p<br><br>（3）知名的空元素：<br><code>&lt;br&gt;&lt;hr&gt;&lt;img&gt;&lt;input&gt;&lt;link&gt;&lt;meta&gt;鲜为人知的是： &lt;area&gt;&lt;base&gt;&lt;col&gt;&lt;command&gt;\n\n&lt;embed&gt;&lt;keygen&gt;&lt;param&gt;&lt;source&gt;&lt;track&gt;&lt;wbr&gt;</code><br>48、CSS的盒子模型？<br>（1）两种， IE 盒子模型、标准 W3C 盒子模型；IE 的content部分包含了 border 和 pading;<br><br>（2）盒模型： 内容(content)、填充(padding)、边界(margin)、 边框(border).<br><br>49、CSS 选择符有哪些？哪些属性可以继承？优先级算法如何计算？ CSS3新增伪类有那些？<br>    <em>   1.id选择器（ # myid）<br><br>        2.类选择器（.myclassname）<br><br>        3.标签选择器（div, h1, p）<br><br>        4.相邻选择器（h1 + p）<br><br>        5.子选择器（ul &lt; li）<br><br>        6.后代选择器（li a）<br><br>        7.通配符选择器（ </em> ）<br><br>        8.属性选择器（a[rel = “external”]）<br><br>        9.伪类选择器（a: hover, li: nth - child）<br><br>    <em>   可继承： font-size font-family color, UL LI DL DD DT;\n\n    </em>   不可继承 ：border padding margin width height ;<br><br>    <em>   优先级就近原则，样式定义最近者为准;\n\n    </em>   载入样式以最后载入的定位为准;<br><br>优先级为:<br><br>       !important &gt;  id &gt; class &gt; tag<br><br>       important 比 内联优先级高<br><br>CSS3新增伪类举例：<br><br>    p:first-of-type 选择属于其父元素的首个 <p> 元素的每个 </p><p> 元素。<br><br>    p:last-of-type  选择属于其父元素的最后 </p><p> 元素的每个 </p><p> 元素。<br><br>    p:only-of-type  选择属于其父元素唯一的 </p><p> 元素的每个 </p><p> 元素。<br><br>    p:only-child    选择属于其父元素的唯一子元素的每个 </p><p> 元素。<br><br>    p:nth-child(2)  选择属于其父元素的第二个子元素的每个 </p><p> 元素。<br><br>    :enabled、:disabled 控制表单控件的禁用状态。<br><br>    :checked，单选框或复选框被选中。<br><br>50、如何居中div,如何居中一个浮动元素?<br>给div设置一个宽度，然后添加margin:0 auto属性<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">div&#123;</div><div class=\"line\"></div><div class=\"line\">    width:200px;</div><div class=\"line\"></div><div class=\"line\">    margin:0 auto;</div><div class=\"line\"></div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure><br><br>居中一个浮动元素<br><br>      确定容器的宽高 宽500 高 300 的层<br><br>      设置层的外边距<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"> .div &#123;</div><div class=\"line\"></div><div class=\"line\">  Width:500px ; height:300px;//高度可以不设</div><div class=\"line\"></div><div class=\"line\">  Margin: -150px 0 0 -250px;</div><div class=\"line\"></div><div class=\"line\">  position:relative;相对定位</div><div class=\"line\"></div><div class=\"line\">  background-color:pink;//方便看效果</div><div class=\"line\"></div><div class=\"line\">  left:50%;</div><div class=\"line\"></div><div class=\"line\">  top:50%;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><br><br>51、浏览器的内核分别是什么?经常遇到的浏览器的兼容性有哪些？原因，解决方法是什么，常用hack的技巧 ？<br>    <em> IE浏览器的内核Trident、 Mozilla的Gecko、google的WebKit、Opera内核Presto；\n\n    </em> png24为的图片在iE6浏览器上出现背景，解决方案是做成PNG8.<br><br>    <em> 浏览器默认的margin和padding不同。解决方案是加一个全局的</em>{margin:0;padding:0;}来统一。<br><br>    <em> IE6双边距bug:块属性标签float后，又有横行的margin情况下，在ie6显示margin比设置的大。<br><br>      浮动ie产生的双倍距离 #box{ float:left; width:10px; margin:0 0 0 100px;}<br><br>     这种情况之下IE会产生20px的距离，解决方案是在float的标签样式控制中加入 ——<br>     <code>_display:inline;将其转化为行内属性。(_这个符号只有ie6会识别)</code><br><br>      渐进识别的方式，从总体中逐渐排除局部。<br><br>      首先，巧妙的使用“\\9”这一标记，将IE游览器从所有情况中分离出来。<br><br>      接着，再次使用“+”将IE8和IE7、IE6分离开来，这样IE8已经独立识别。<br><br>      css<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">.bb&#123;</div><div class=\"line\"></div><div class=\"line\"> background-color:#f1ee18;/*所有识别*/</div><div class=\"line\"></div><div class=\"line\">.background-color:#00deff\\9; /*IE6、7、8识别*/</div><div class=\"line\"></div><div class=\"line\">+background-color:#a200ff;/*IE6、7识别*/</div><div class=\"line\"></div><div class=\"line\">_background-color:#1e0bd1;/*IE6识别*/</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n\n    </em>  IE下,可以使用获取常规属性的方法来获取自定义属性,<br><br>       也可以使用getAttribute()获取自定义属性;<br><br>       Firefox下,只能使用getAttribute()获取自定义属性.<br><br>       解决方法:统一通过getAttribute()获取自定义属性.<br><br>    <em>  IE下,even对象有x,y属性,但是没有pageX,pageY属性;<br><br>      Firefox下,event对象有pageX,pageY属性,但是没有x,y属性.\n\n    </em> （条件注释）缺点是在IE浏览器下可能会增加额外的HTTP请求数。<br><br>    <em> Chrome 中文界面下默认会将小于 12px 的文本强制按照 12px 显示, 可通过加入 CSS 属性 -webkit-text-size-adjust: none; 解决.<br><br>    超链接访问过后hover样式就不出现了 被点击访问过的超链接样式不在具有hover和active了解决方法是改变CSS属性的排列顺序:<br><br>    L-V-H-A :  a:link {} a:visited {} a:hover {} a:active {}<br><br>52、列出display的值，说明他们的作用。position的值， relative和absolute定位原点是？<br>  1. block 象块类型元素一样显示。<br><br>  none 缺省值。向行内元素类型一样显示。<br><br>  inline-block 象行内元素一样显示，但其内容象块类型元素一样显示。<br><br>  list-item 象块类型元素一样显示，并添加样式列表标记。<br><br>  2. position的值\n\n  </em> absolute<br><br>        生成绝对定位的元素，相对于 static 定位以外的第一个父元素进行定位。<br><br>  <em> fixed （老IE不支持）<br><br>        生成绝对定位的元素，相对于浏览器窗口进行定位。\n\n  </em> relative<br><br>        生成相对定位的元素，相对于其正常位置进行定位。<br><br>  <em> static  默认值。没有定位，元素出现在正常的流中\n\n  </em> （忽略 top, bottom, left, right z-index 声明）。<br><br>  <em>  inherit 规定从父元素继承 position 属性的值。<br><br>53、absolute的containing block计算方式跟正常流有什么不同？<br>54、position跟display、margin collapse、overflow、float这些特性相互叠加后会怎么样？<br>55、对WEB标准以及W3C的理解与认识<br>标签闭合、标签小写、不乱嵌套、提高搜索机器人搜索几率、使用外 链css和js脚本、结构行为表现的分离、文件下载与页面速度更快、内容能被更多的用户所访问、内容能被更广泛的设备所访问、更少的代码和组件，容易维 护、改版方便，不需要变动页面内容、提供打印版本而不需要复制内容、提高网站易用性；<br><br>56、css的基本语句构成是?<br>选择器{属性1:值1;属性2:值2;……}<br><br>57、浏览器标准模式和怪异模式之间的区别是什么?<br>盒子模型 渲染模式的不同<br><br>使用 window.top.document.compatMode 可显示为什么模式<br><br>58、CSS中可以通过哪些属性定义，使得一个DOM元素不显示在浏览器可视范围内？　　<br>　　最基本的：<br><br>　　设置display属性为none，或者设置visibility属性为hidden<br><br>　　技巧性：<br><br>　　设置宽高为0，设置透明度为0，设置z-index位置在-1000<br><br>59、超链接访问过后hover样式就不出现的问题是什么？如何解决？<br>　　答案：被点击访问过的超链接样式不在具有hover和active了,解决方法是改变CSS属性的排列顺序: L-V-H-A（link,visited,hover,active）<br><br>60、什么是Css Hack？ie6,7,8的hack分别是什么？<br>　　答案：针对不同的浏览器写不同的CSS code的过程，就是CSS hack。<br><br>　　示例如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">#test       &#123;  </div><div class=\"line\"></div><div class=\"line\">        width:300px;  </div><div class=\"line\"></div><div class=\"line\">        height:300px;  </div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        background-color:blue;      /firefox*/</div><div class=\"line\"></div><div class=\"line\">        background-color:red\\9;      /all ie*/</div><div class=\"line\"></div><div class=\"line\">        background-color:yellow\\0;    /ie8*/</div><div class=\"line\"></div><div class=\"line\">        +background-color:pink;        /ie7*/</div><div class=\"line\"></div><div class=\"line\">        _background-color:orange;       /ie6/    &#125;</div><div class=\"line\"></div><div class=\"line\">        :root #test &#123; background-color:purple\\9; &#125;  /ie9*/</div><div class=\"line\"></div><div class=\"line\">    @media all and (min-width:0px)&#123; #test &#123;background-color:black\\0;&#125; &#125;  /opera/</div><div class=\"line\"></div><div class=\"line\">    @media screen and (-webkit-min-device-pixel-ratio:0)&#123; #test &#123;background-color:gray;&#125; &#125;       /chrome and safari*/</div></pre></td></tr></table></figure><br><br>62、请用Css写一个简单的幻灯片效果页面<br>　　答案：知道是要用css3。使用animation动画实现一个简单的幻灯片效果。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**HTML**/</div><div class=\"line\"></div><div class=\"line\">        div.ani</div><div class=\"line\"></div><div class=\"line\">        /**css**/</div><div class=\"line\"></div><div class=\"line\">        .ani&#123;</div><div class=\"line\"></div><div class=\"line\">          width:480px;</div><div class=\"line\"></div><div class=\"line\">          height:320px;</div><div class=\"line\"></div><div class=\"line\">          margin:50px auto;</div><div class=\"line\"></div><div class=\"line\">          overflow: hidden;</div><div class=\"line\"></div><div class=\"line\">          box-shadow:0 0 5px rgba(0,0,0,1);</div><div class=\"line\"></div><div class=\"line\">          background-size: cover;</div><div class=\"line\"></div><div class=\"line\">          background-position: center;</div><div class=\"line\"></div><div class=\"line\">          -webkit-animation-name: &quot;loops&quot;;</div><div class=\"line\"></div><div class=\"line\">          -webkit-animation-duration: 20s;</div><div class=\"line\"></div><div class=\"line\">          -webkit-animation-iteration-count: infinite;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        @-webkit-keyframes &quot;loops&quot; &#123;</div><div class=\"line\"></div><div class=\"line\">            0% &#123; background:url(http://d.hiphotos.baidu.com/image/w%3D400/sign=c01e6adca964034f0fcdc3069fc27980/e824b899a9014c08e5e38ca4087b02087af4f4d3.jpg) no-repeat;            </div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            25% &#123;</div><div class=\"line\"></div><div class=\"line\">                background:url(http://b.hiphotos.baidu.com/image/w%3D400/sign=edee1572e9f81a4c2632edc9e72b6029/30adcbef76094b364d72bceba1cc7cd98c109dd0.jpg) no-repeat;</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            50% &#123;</div><div class=\"line\"></div><div class=\"line\">                background:url(http://b.hiphotos.baidu.com/image/w%3D400/sign=937dace2552c11dfded1be2353266255/d8f9d72a6059252d258e7605369b033b5bb5b912.jpg) no-repeat;</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            75% &#123;</div><div class=\"line\"></div><div class=\"line\">                background:url(http://g.hiphotos.baidu.com/image/w%3D400/sign=7d37500b8544ebf86d71653fe9f9d736/0df431adcbef76095d61f0972cdda3cc7cd99e4b.jpg) no-repeat;</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            100% &#123;</div><div class=\"line\"></div><div class=\"line\">                background:url(http://c.hiphotos.baidu.com/image/w%3D400/sign=cfb239ceb0fb43161a1f7b7a10a54642/3b87e950352ac65ce2e73f76f9f2b21192138ad1.jpg) no-repeat;</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure><br><br>63、行内元素和块级元素的具体区别是什么？行内元素的padding和margin可设置吗？<br>　　块级元素(block)特性：<br><br>总是独占一行，表现为另起一行开始，而且其后的元素也必须另起一行显示;<br>宽度(width)、高度(height)、内边距(padding)和外边距(margin)都可控制;<br>　　内联元素(inline)特性：<br><br>和相邻的内联元素在同一行;<br>宽度(width)、高度(height)、内边距的top/bottom(padding-top/padding-bottom)和外边距的top/bottom(margin-top/margin-bottom)都不可改变（也就是padding和margin的left和right是可以设置的），就是里面文字或图片的大小。<br>　　那么问题来了，浏览器还有默认的天生inline-block元素（拥有内在尺寸，可设置高宽，但不会自动换行），有哪些？<br><br>　　答案：<code>&lt;input&gt; 、&lt;img&gt; 、&lt;button&gt; 、&lt;textarea&gt; 、&lt;label&gt;</code><br><br>64、什么是外边距重叠？重叠的结果是什么？<br>　　答案：<br><br>　　外边距重叠就是margin-collapse。<br><br>　　在CSS当中，相邻的两个盒子（可能是兄弟关系也可能是祖先关系）的外边距可以结合成一个单独的外边距。这种合并外边距的方式被称为折叠，并且因而所结合成的外边距称为折叠外边距。<br><br>　　折叠结果遵循下列计算规则：<br><br>两个相邻的外边距都是正数时，折叠结果是它们两者之间较大的值。<br>两个相邻的外边距都是负数时，折叠结果是两者绝对值的较大值。<br>两个外边距一正一负时，折叠结果是两者的相加的和。<br>　　<br><br>65、rgba()和opacity的透明效果有什么不同？<br>　　rgba()和opacity都能实现透明效果，但最大的不同是opacity作用于元素，以及元素内的所有内容的透明度，<br><br>　　而rgba()只作用于元素的颜色或其背景色。（设置rgba透明的元素的子元素不会继承透明效果！）<br><br>66、css中可以让文字在垂直和水平方向上重叠的两个属性是什么？<br>　　垂直方向：line-height<br><br>　　水平方向：letter-spacing<br><br>　　那么问题来了，关于letter-spacing的妙用知道有哪些么？<br><br>　　答案:可以用于消除inline-block元素间的换行符空格间隙问题。<br><br>67、如何垂直居中一个浮动元素？<br>// 方法一：已知元素的高宽<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\">#div1&#123;</div><div class=\"line\"></div><div class=\"line\">    background-color:#6699FF;</div><div class=\"line\"></div><div class=\"line\">    width:200px;</div><div class=\"line\"></div><div class=\"line\">    height:200px;</div><div class=\"line\"></div><div class=\"line\">    position: absolute;        //父元素需要相对定位</div><div class=\"line\"></div><div class=\"line\">    top: 50%;</div><div class=\"line\"></div><div class=\"line\">    left: 50%;</div><div class=\"line\"></div><div class=\"line\">    margin-top:-100px ;   //二分之一的height，width</div><div class=\"line\"></div><div class=\"line\">    margin-left: -100px;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">//方法二:未知元素的高宽</div><div class=\"line\"></div><div class=\"line\">  #div1&#123;</div><div class=\"line\"></div><div class=\"line\">    width: 200px;</div><div class=\"line\"></div><div class=\"line\">    height: 200px;</div><div class=\"line\"></div><div class=\"line\">    background-color: #6699FF;</div><div class=\"line\"></div><div class=\"line\">    margin:auto;</div><div class=\"line\"></div><div class=\"line\">    position: absolute;        //父元素需要相对定位</div><div class=\"line\"></div><div class=\"line\">    left: 0;</div><div class=\"line\"></div><div class=\"line\">    top: 0;</div><div class=\"line\"></div><div class=\"line\">    right: 0;</div><div class=\"line\"></div><div class=\"line\">    bottom: 0;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure><br><br>那么问题来了，如何垂直居中一个<img>?（用更简便的方法。）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">#container     //&lt;img&gt;的容器设置如下</div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\">    display:table-cell;</div><div class=\"line\"></div><div class=\"line\">    text-align:center;</div><div class=\"line\"></div><div class=\"line\">    vertical-align:middle;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><br><br>68、描述一个”reset”的CSS文件并如何使用它。知道normalize.css吗？你了解他们的不同之处？　<br>　　重置样式非常多，凡是一个前端开发人员肯定有一个常用的重置CSS文件并知道如何使用它们。他们是盲目的在做还是知道为什么这么做呢？原因是不同的浏览器对一些元素有不同的默认样式，如果你不处理，在不同的浏览器下会存在必要的风险，或者更有戏剧性的性发生。<br><br>　　你可能会用Normalize来代替你的重置样式文件。它没有重置所有的样式风格，但仅提供了一套合理的默认样式值。既能让众多浏览器达到一致和合理，但又不扰乱其他的东西（如粗体的标题）。<br><br>　　在这一方面，无法做每一个复位重置。它也确实有些超过一个重置，它处理了你永远都不用考虑的怪癖，像HTML的audio元素不一致或line-height不一致。<br><br>69、说display属性有哪些？可以做什么？<br>display:block行内元素转换为块级元素<br><br>  display:inline块级元素转换为行内元素<br><br>  display:inline-block转为内联元素<br><br>70、哪些css属性可以继承？<br>可继承： font-size font-family color, ul li dl dd dt;<br><br>  不可继承 ：border padding margin width height ;<br><br>71、css优先级算法如何计算？<br>!important &gt;  id &gt; class &gt; 标签<br><br>  !important 比 内联优先级高\n\n  </em> 优先级就近原则，样式定义最近者为准;<br><br>  <em> 以最后载入的样式为准;<br><br>72、b标签和strong标签,i标签和em标签的区别？<br>后者有语义，前者则无。<br><br>73、有那些行内元素、有哪些块级元素、盒模型？<br>1.内联元素(inline element)<br><br>a – 锚点<br><br>abbr – 缩写<br><br>acronym – 首字<br><br>b – 粗体(不推荐)<br><br>big – 大字体<br><br>br – 换行<br><br>em – 强调<br><br>font – 字体设定(不推荐)<br><br>i – 斜体<br><br>img – 图片<br><br>input – 输入框<br><br>label – 表格标签<br><br>s – 中划线(不推荐)<br><br>select – 项目选择<br><br>small – 小字体文本<br><br>span – 常用内联容器，定义文本内区块<br><br>strike – 中划线<br><br>strong – 粗体强调<br><br>sub – 下标<br><br>sup – 上标<br><br>textarea – 多行文本输入框<br><br>tt – 电传文本<br><br>u – 下划线<br><br>var – 定义变量<br><br>2、块级元素<br><br>address – 地址<br><br>blockquote – 块引用<br><br>center – 举中对齐块<br><br>dir – 目录列表<br><br>div – 常用块级容易，也是css layout的主要标签<br><br>dl – 定义列表<br><br>fieldset – form控制组<br><br>form – 交互表单<br><br>h1 – 大标题<br><br>h2 – 副标题<br><br>h3 – 3级标题<br><br>h4 – 4级标题<br><br>h5 – 5级标题<br><br>h6 – 6级标题<br><br>hr – 水平分隔线<br><br>isindex – input prompt<br><br>menu – 菜单列表<br><br>noframes – frames可选内容，（对于不支持frame的浏览器显示此区块内容）<br><br>noscript – ）可选脚本内容（对于不支持script的浏览器显示此内容）<br><br>ol – 排序表单<br><br>p – 段落<br><br>pre – 格式化文本<br><br>table – 表格<br><br>ul – 非排序列表<br><br>3.CSS盒子模型包含四个部分组成：<br><br>内容、填充（padding）、边框（border）、外边界（margin）。<br><br>74、有哪些选择符，优先级的计算公式是什么？行内样式和！important哪个优先级高？<br>#ID &gt; .class &gt; 标签选择符  !important优先级高<br><br>75.我想让行内元素跟上面的元素距离10px，加margin-top和padding-top可以吗？<br>  margin-top,padding-top无效<br><br>76.CSS的盒模型由什么组成？<br>  内容，border ,margin，padding<br><br>77、.说说display属性有哪些？可以做什么？<br>  display:block行内元素转换为块级元素<br><br>  display:inline块级元素转换为行内元素<br><br>  display:inline-block转为内联元素<br><br>78、哪些css属性可以继承？<br>  可继承： font-size font-family color, ul li dl dd dt;<br><br>  不可继承 ：border padding margin width height ;<br><br>79、css优先级算法如何计算？<br>  !important &gt;  id &gt; class &gt; 标签<br><br>  !important 比 内联优先级高\n\n  </em> 优先级就近原则，样式定义最近者为准;<br><br>  * 以最后载入的样式为准;<br><br>80、text-align:center和line-height有什么区别？<br>  text-align是水平对齐，line-height是行间。<br><br>81、前端页面由哪三层构成，分别是什么？作用是什么？<br>   结构层 Html 表示层 CSS 行为层 js<br><br>82、写一个表格以及对应的CSS,使表格奇数行为白色背景，偶数行为灰色，鼠标一上去为黄色背景。<br>二、JS基础<br>1、javascript的typeof返回哪些数据类型<br>Object number function boolean underfind<br><br>2、例举3种强制类型转换和2种隐式类型转换?<br>强制（parseInt,parseFloat,number）<br><br>隐式（== – ===）<br><br>3、split() join() 的区别<br>前者是切割成数组的形式，后者是将数组转换成字符串<br><br>4、数组方法pop() push() unshift() shift()<br>Push()尾部添加 pop()尾部删除<br><br>Unshift()头部添加 shift()头部删除<br><br>5、事件绑定和普通事件有什么区别<br>事件绑定是指把事件注册到具体的元素之上，普通事件指的是可以用来注册的事件<br><br>6、IE和DOM事件流的区别<br>1.执行顺序不一样、<br><br>2.参数不一样<br><br>3.事件加不加on<br><br>4.this指向问题<br><br>7、IE和标准下有哪些兼容性的写法<br>Var ev = ev || window.event<br><br>document.documentElement.clientWidth || document.body.clientWidth<br><br>Var target = ev.srcElement||ev.target<br><br>8、call和apply的区别<br>Object.call(this,obj1,obj2,obj3)<br><br>Object.apply(this,arguments)<br><br>9、b继承a的方法<br>10、JavaScript this指针、闭包、作用域<br>11、事件委托是什么<br>让利用事件冒泡的原理，让自己的所触发的事件，让他的父元素代替执行！<br><br>12、闭包是什么，有什么特性，对页面有什么影响<br>闭包就是能够读取其他函数内部变量的函数。<br><br>13、如何阻止事件冒泡和默认事件<br>canceBubble return false<br><br>14、添加 删除 替换 插入到某个接点的方法<br>obj.appendChidl()<br><br>obj.innersetBefore<br><br>obj.replaceChild<br><br>obj.removeChild<br><br>15、javascript的本地对象，内置对象和宿主对象<br>本地对象为array obj regexp等可以new实例化<br><br>内置对象为gload Math 等不可以实例化的<br><br>宿主为浏览器自带的document,window 等<br><br>16、document load 和document ready的区别<br>Document.onload 是在结构和样式加载完才执行js<br><br>Document.ready原生种没有这个方法，jQuery中有 $().ready(function)<br><br>17、”==”和“===”的不同<br>前者会自动转换类型<br><br>后者不会<br><br>18、javascript的同源策略<br>一段脚本只能读取来自于同一来源的窗口和文档的属性，这里的同一来源指的是主机名、议和端口号的组合<br><br>19、编写一个数组去重的方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">function oSort(arr) &#123;   </div><div class=\"line\">var result =&#123;&#125;;</div><div class=\"line\">var newArr=[];</div><div class=\"line\">for(var i=0;i&lt;arr.length;i++)&#123;</div><div class=\"line\">if(!result[arr]) &#123;</div><div class=\"line\">newArr.push(arr)</div><div class=\"line\">result[arr]=1</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">return newArr</div><div class=\"line\">&#125;&lt;/arr.length;i++)</div></pre></td></tr></table></figure><br><br>20、JavaScript是一门什么样的语言，它有哪些特点？<br>没有标准答案。<br><br>21、JavaScript的数据类型都有什么？<br>基本数据类型：String,boolean,Number,Undefined, Null<br><br>引用数据类型：Object(Array,Date,RegExp,Function)<br><br>那么问题来了，如何判断某变量是否为数组数据类型？<br><br>方法一.判断其是否具有“数组性质”，如slice()方法。可自己给该变量定义slice方法，故有时会失效<br><br>方法二.obj instanceof Array 在某些IE版本中不正确<br><br>方法三.方法一二皆有漏洞，在ECMA Script5中定义了新方法Array.isArray(), 保证其兼容性，最好的方法如下：<br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">if(typeof Array.isArray===&quot;undefined&quot;)&#123;</div><div class=\"line\"></div><div class=\"line\">  Array.isArray = function(arg)&#123;</div><div class=\"line\"></div><div class=\"line\">        return Object.prototype.toString.call(arg)===&quot;[object Array]&quot;</div><div class=\"line\"></div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><br><br>22、已知ID的Input输入框，希望获取这个输入框的输入值，怎么做？(不使用第三方框架)<br><br><br>document.getElementById(“ID”).value<br><br>23、希望获取到页面中所有的checkbox怎么做？(不使用第三方框架)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">var domList = document.getElementsByTagName(‘input’)</div><div class=\"line\"></div><div class=\"line\">var checkBoxList = [];</div><div class=\"line\"></div><div class=\"line\">var len = domList.length;　　//缓存到局部变量</div><div class=\"line\"></div><div class=\"line\">while (len--) &#123;　　//使用while的效率会比for循环更高</div><div class=\"line\"></div><div class=\"line\">　　if (domList[len].type == ‘checkbox’) &#123;</div><div class=\"line\"></div><div class=\"line\">    　　checkBoxList.push(domList[len]);</div><div class=\"line\"></div><div class=\"line\">　　&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><br><br>24、设置一个已知ID的DIV的html内容为xxxx，字体颜色设置为黑色(不使用第三方框架)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">var dom = document.getElementById(“ID”);</div><div class=\"line\"></div><div class=\"line\">dom.innerHTML = “xxxx”</div><div class=\"line\"></div><div class=\"line\">dom.style.color = “#000”</div></pre></td></tr></table></figure><br><br>25、当一个DOM节点被点击时候，我们希望能够执行一个函数，应该怎么做？<br>直接在DOM里绑定事件：<div onclick=\"”test()”\"></div>\n\n</p><p>在JS里通过onclick绑定：xxx.onclick = test</p>\n<p>通过事件添加进行绑定：addEventListener(xxx, ‘click’, test)</p>\n<p>那么问题来了，Javascript的事件流模型都有什么？</p>\n<p>“事件冒泡”：事件开始由最具体的元素接受，然后逐级向上传播</p>\n<p>“事件捕捉”：事件由最不具体的节点先接收，然后逐级向下，一直到最具体的</p>\n<p>“DOM事件流”：三个阶段：事件捕捉，目标阶段，事件冒泡</p>\n<p>26、看下列代码输出为何？解释原因。</p>\n<p>var a;</p>\n<p>alert(typeof a); // undefined</p>\n<p>alert(b); // 报错</p>\n<p>解释：Undefined是一个只有一个值的数据类型，这个值就是“undefined”，在使用var声明变量但并未对其赋值进行初始化时，这个变量的值就是undefined。而b由于未声明将报错。注意未申明的变量和声明了未赋值的是不一样的。</p>\n<p>27、看下列代码,输出什么？解释原因。</p>\n<p>var a = null;</p>\n<p>alert(typeof a); //object</p>\n<p>解释：null是一个只有一个值的数据类型，这个值就是null。表示一个空指针对象，所以用typeof检测会返回”object”。</p>\n<p>28、看下列代码,输出什么？解释原因。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">var undefined;</div><div class=\"line\"></div><div class=\"line\">undefined == null; // true</div><div class=\"line\"></div><div class=\"line\">1 == true;   // true</div><div class=\"line\"></div><div class=\"line\">2 == true;   // false</div><div class=\"line\"></div><div class=\"line\">0 == false;  // true</div><div class=\"line\"></div><div class=\"line\">0 == &apos;&apos;;     // true</div><div class=\"line\"></div><div class=\"line\">NaN == NaN;  // false</div><div class=\"line\"></div><div class=\"line\">[] == false; // true</div><div class=\"line\"></div><div class=\"line\">[] == ![];   // true</div></pre></td></tr></table></figure>\n<p>undefined与null相等，但不恒等（===）<br>一个是number一个是string时，会尝试将string转换为number</p>\n<p>尝试将boolean转换为number，0或1</p>\n<p>尝试将Object转换成number或string，取决于另外一个对比量的类型</p>\n<p>所以，对于0、空字符串的判断，建议使用 “===” 。“===”会先判断两边的值类型，类型不匹配时为false。</p>\n<p>那么问题来了，看下面的代码，输出什么，foo的值为什么？<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">var foo = &quot;11&quot;+2-&quot;1&quot;;</div><div class=\"line\"></div><div class=\"line\">console.log(foo);</div><div class=\"line\"></div><div class=\"line\">console.log(typeof foo);</div></pre></td></tr></table></figure></p>\n<p>执行完后foo的值为111，foo的类型为String。</p>\n<p>29、看代码给答案。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">var a = new Object();</div><div class=\"line\"></div><div class=\"line\">a.value = 1;</div><div class=\"line\"></div><div class=\"line\">b = a;</div><div class=\"line\"></div><div class=\"line\">b.value = 2;</div><div class=\"line\"></div><div class=\"line\">alert(a.value);</div></pre></td></tr></table></figure></p>\n<p>答案：2（考察引用数据类型细节）</p>\n<p>30、已知数组var stringArray = [“This”, “is”, “Baidu”, “Campus”]，Alert出”This is Baidu Campus”。<br>答案：alert(stringArray.join(“”))</p>\n<p>已知有字符串foo=”get-element-by-id”,写一个function将其转化成驼峰表示法”getElementById”。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">function combo(msg)&#123;</div><div class=\"line\"></div><div class=\"line\">    var arr=msg.split(&quot;-&quot;);</div><div class=\"line\"></div><div class=\"line\">    for(var i=1;i&lt;arr.length;i++)&#123;</div><div class=\"line\"></div><div class=\"line\">        arr[i]=arr[i].charAt(0).toUpperCase()+arr[i].substr(1,arr[i].length-1);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    msg=arr.join(&quot;&quot;);</div><div class=\"line\"></div><div class=\"line\">    return msg;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>(考察基础API)</p>\n<p>31、var numberArray = [3,6,2,4,1,5]; （考察基础API）<br>1) 实现对该数组的倒排，输出[5,1,4,2,6,3]</p>\n<p>2) 实现对该数组的降序排列，输出[6,5,4,3,2,1]</p>\n<p>function combo(msg){</p>\n<pre><code>var arr=msg.split(&quot;-&quot;);\n\nfor(var i=1;i&lt;arr.length;i++){\n\n    arr[i]=arr[i].charAt(0).toUpperCase()+arr[i].substr(1,arr[i].length-1);\n\n}\n\nmsg=arr.join(&quot;&quot;);\n\nreturn msg;\n</code></pre><p>}</p>\n<p>32、输出今天的日期，以YYYY-MM-DD的方式，比如今天是2014年9月26日，则输出2014-09-26</p>\n<p>var d = new Date();</p>\n<p>// 获取年，getFullYear()返回4位的数字</p>\n<p>var year = d.getFullYear();</p>\n<p>// 获取月，月份比较特殊，0是1月，11是12月</p>\n<p>var month = d.getMonth() + 1;</p>\n<p>// 变成两位</p>\n<p>month = month &lt; 10 ? ‘0’ + month : month;</p>\n<p>// 获取日</p>\n<p>var day = d.getDate();</p>\n<p>day = day &lt; 10 ? ‘0’ + day : day;</p>\n<p>alert(year + ‘-‘ + month + ‘-‘ + day);</p>\n<p>33、将字符串”<tr><td>{$id}</td><td>{$name}</td></tr>”中的{$id}替换成10，{$name}替换成Tony （使用正则表达式）<br>答案：”<tr><td>{$id}</td><td>{$id}_{$name}</td></tr>”.replace(/{\\$id}/g, ’10′).replace(/{\\$name}/g, ‘Tony’);</p>\n<p>34、为了保证页面输出安全，我们经常需要对一些特殊的字符进行转义，请写一个函数escapeHtml，将&lt;, &gt;, &amp;, “进行转义</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">function escapeHtml(str) &#123;</div><div class=\"line\"></div><div class=\"line\">return str.replace(/[&lt;&gt;”&amp;]/g, function(match) &#123;</div><div class=\"line\"></div><div class=\"line\">    switch (match) &#123;</div><div class=\"line\"></div><div class=\"line\">     case “&lt;”:</div><div class=\"line\"></div><div class=\"line\">         return “&amp;lt;”;</div><div class=\"line\"></div><div class=\"line\">     case “&gt;”:</div><div class=\"line\"></div><div class=\"line\">       return “&amp;gt;”;</div><div class=\"line\"></div><div class=\"line\">     case “&amp;”:</div><div class=\"line\"></div><div class=\"line\">       return “&amp;amp;”;</div><div class=\"line\"></div><div class=\"line\">     case “\\””:</div><div class=\"line\"></div><div class=\"line\">        return “&amp;quot;”;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">  &#125;);</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>35、foo = foo||bar ，这行代码是什么意思？为什么要这样写？<br>答案：if(!foo) foo = bar; //如果foo存在，值不变，否则把bar的值赋给foo。</p>\n<p>短路表达式：作为”&amp;&amp;”和”||”操作符的操作数表达式，这些表达式在进行求值时，只要最终的结果已经可以确定是真或假，求值过程便告终止，这称之为短路求值。</p>\n<p>36、看下列代码，将会输出什么?(变量声明提升)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">var foo = 1;</div><div class=\"line\"></div><div class=\"line\">function()&#123;</div><div class=\"line\"></div><div class=\"line\">    console.log(foo);</div><div class=\"line\"></div><div class=\"line\">    var foo = 2;</div><div class=\"line\"></div><div class=\"line\">    console.log(foo);</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>答案：输出undefined 和 2。上面代码相当于：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">var foo = 1;</div><div class=\"line\"></div><div class=\"line\">function()&#123;</div><div class=\"line\"></div><div class=\"line\">    var foo;</div><div class=\"line\"></div><div class=\"line\">    console.log(foo); //undefined</div><div class=\"line\"></div><div class=\"line\">    foo = 2;</div><div class=\"line\"></div><div class=\"line\">    console.log(foo); // 2;  </div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>函数声明与变量声明会被JavaScript引擎隐式地提升到当前作用域的顶部，但是只提升名称不会提升赋值部分。</p>\n<p>37、用js实现随机选取10–100之间的10个数字，存入一个数组，并排序。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">var iArray = [];</div><div class=\"line\"></div><div class=\"line\">funtion getRandom(istart, iend)&#123;</div><div class=\"line\"></div><div class=\"line\">        var iChoice = iend - istart +1;</div><div class=\"line\"></div><div class=\"line\">        return Math.floor(Math.random() * iChoice + istart;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">for(var i=0; i&lt;10; i++)&#123;</div><div class=\"line\"></div><div class=\"line\">        iArray.push(getRandom(10,100));</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">iArray.sort();</div></pre></td></tr></table></figure></p>\n<p>38、把两个数组合并，并删除第二个元素。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">var array1 = [&apos;a&apos;,&apos;b&apos;,&apos;c&apos;];</div><div class=\"line\"></div><div class=\"line\">var bArray = [&apos;d&apos;,&apos;e&apos;,&apos;f&apos;];</div><div class=\"line\"></div><div class=\"line\">var cArray = array1.concat(bArray);</div><div class=\"line\"></div><div class=\"line\">cArray.splice(1,1);</div></pre></td></tr></table></figure></p>\n<p>39、怎样添加、移除、移动、复制、创建和查找节点（原生JS，实在基础，没细写每一步）<br>1）创建新节点<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">createDocumentFragment()    //创建一个DOM片段</div><div class=\"line\"></div><div class=\"line\">createElement()   //创建一个具体的元素</div><div class=\"line\"></div><div class=\"line\">createTextNode()   //创建一个文本节点</div><div class=\"line\"></div><div class=\"line\">2）添加、移除、替换、插入</div><div class=\"line\"></div><div class=\"line\">appendChild()      //添加</div><div class=\"line\"></div><div class=\"line\">removeChild()      //移除</div><div class=\"line\"></div><div class=\"line\">replaceChild()      //替换</div><div class=\"line\"></div><div class=\"line\">insertBefore()      //插入</div></pre></td></tr></table></figure></p>\n<p>3）查找<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">getElementsByTagName()    //通过标签名称</div><div class=\"line\"></div><div class=\"line\">getElementsByName()     //通过元素的Name属性的值</div><div class=\"line\"></div><div class=\"line\">getElementById()        //通过元素Id，唯一性</div></pre></td></tr></table></figure></p>\n<p>40、有这样一个URL：<a href=\"http://item.taobao.com/item.htm?a=1&amp;b=2&amp;c=&amp;d=xxx&amp;e，请写一段JS程序提取URL中的各个GET参数(参数名和参数个数不确定)，将其按key-value形式返回到一个json结构中，如{a:’1′\" target=\"_blank\" rel=\"external\">http://item.taobao.com/item.htm?a=1&amp;b=2&amp;c=&amp;d=xxx&amp;e，请写一段JS程序提取URL中的各个GET参数(参数名和参数个数不确定)，将其按key-value形式返回到一个json结构中，如{a:’1′</a>, b:’2′, c:”, d:’xxx’, e:undefined}。<br>答案：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">function serilizeUrl(url) &#123;</div><div class=\"line\"></div><div class=\"line\">    var result = &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">    url = url.split(&quot;?&quot;)[1];</div><div class=\"line\"></div><div class=\"line\">    var map = url.split(&quot;&amp;&quot;);</div><div class=\"line\"></div><div class=\"line\">    for(var i = 0, len = map.length; i &lt; len; i++) &#123;</div><div class=\"line\"></div><div class=\"line\">        result&lt;script&gt;jQuery(function($) &#123;$(&quot;#google-maps-1&quot;).gMap(&#123;controls: false,scrollwheel: false,markers: [&#123;address: &quot;&quot;,icon: &#123;image: &quot;http://blog.jobbole.com/wp-content/themes/jobboleblogv3/_assets/img/_colors/red/pin.png&quot;,iconsize: [32, 32],iconanchor: [16,27],infowindowanchor: [16, 27]&#125;&#125;],address: &quot;&quot;,zoom: 15,icon: &#123;image: &quot;http://blog.jobbole.com/wp-content/themes/jobboleblogv3/_assets/img/_colors/red/pin.png&quot;,iconsize: [32, 32],iconanchor: [16,27],infowindowanchor: [16, 27]&#125;&#125;);&#125;);&lt;/script&gt;&lt;div id=&quot;google-maps-1&quot; class=&quot;google-maps&quot; style=&quot;width: 100%; height: 200px;&quot;&gt;&lt;/div&gt;.split(&quot;=&quot;)[0]] = map[i].split(&quot;=&quot;)[1];</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    return result;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>41、正则表达式构造函数var reg=new RegExp(“xxx”)与正则表达字面量var reg=//有什么不同？匹配邮箱的正则表达式？<br>答案：当使用RegExp()构造函数的时候，不仅需要转义引号（即\\”表示”），并且还需要双反斜杠（即\\表示一个\\）。使用正则表达字面量的效率更高。</p>\n<p>邮箱的正则匹配：</p>\n<p>var regMail = /^([a-zA-Z0-9<em>-])+@([a-zA-Z0-9</em>-])+((.[a-zA-Z0-9_-]{2,3}){1,2})$/;</p>\n<p>24.看下面代码，给出输出结果。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">for(var i=1;i&lt;=3;i++)&#123;</div><div class=\"line\"></div><div class=\"line\">  setTimeout(function()&#123;</div><div class=\"line\"></div><div class=\"line\">      console.log(i);   </div><div class=\"line\"></div><div class=\"line\">  &#125;,0);</div><div class=\"line\"></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">答案：4 4 4。</div></pre></td></tr></table></figure>\n<p>原因：Javascript事件处理器在线程空闲之前不会运行。追问，如何让上述代码输出1 2 3？<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">for(var i=1;i&lt;=3;i++)&#123;</div><div class=\"line\"></div><div class=\"line\">   setTimeout((function(a)&#123;  //改成立即执行函数</div><div class=\"line\"></div><div class=\"line\">       console.log(a);   </div><div class=\"line\"></div><div class=\"line\">   &#125;)(i),0);</div><div class=\"line\"></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>1           //输出</p>\n<p>2</p>\n<p>3</p>\n<p>42、写一个function，清除字符串前后的空格。（兼容所有浏览器）<br>使用自带接口trim()，考虑兼容性：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">if (!String.prototype.trim) &#123;</div><div class=\"line\"></div><div class=\"line\"> String.prototype.trim = function() &#123;</div><div class=\"line\"></div><div class=\"line\"> return this.replace(/^\\s+/, &quot;&quot;).replace(/\\s+$/,&quot;&quot;);</div><div class=\"line\"></div><div class=\"line\"> &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"> // test the function</div><div class=\"line\"></div><div class=\"line\">var str = &quot; \\t\\n test string &quot;.trim();</div><div class=\"line\"></div><div class=\"line\">alert(str == &quot;test string&quot;); // alerts &quot;true&quot;</div></pre></td></tr></table></figure></p>\n<p>43、Javascript中callee和caller的作用？<br>caller是返回一个对函数的引用，该函数调用了当前函数；</p>\n<p>callee是返回正在被执行的function函数，也就是所指定的function对象的正文。</p>\n<p>那么问题来了？如果一对兔子每月生一对兔子；一对新生兔，从第二个月起就开始生兔子；假定每对兔子都是一雌一雄，试问一对兔子，第n个月能繁殖成多少对兔子？（使用callee完成）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">var result=[];</div><div class=\"line\"></div><div class=\"line\">function fn(n)&#123;  //典型的斐波那契数列</div><div class=\"line\"></div><div class=\"line\">   if(n==1)&#123;</div><div class=\"line\"></div><div class=\"line\">        return 1;</div><div class=\"line\"></div><div class=\"line\">   &#125;else if(n==2)&#123;</div><div class=\"line\"></div><div class=\"line\">           return 1;</div><div class=\"line\"></div><div class=\"line\">   &#125;else&#123;</div><div class=\"line\"></div><div class=\"line\">        if(result[n])&#123;</div><div class=\"line\"></div><div class=\"line\">                return result[n];</div><div class=\"line\"></div><div class=\"line\">        &#125;else&#123;</div><div class=\"line\"></div><div class=\"line\">                //argument.callee()表示fn()</div><div class=\"line\"></div><div class=\"line\">                result[n]=arguments.callee(n-1)+arguments.callee(n-2);</div><div class=\"line\"></div><div class=\"line\">                return result[n];</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>44、Javascript中, 以下哪条语句一定会产生运行错误？      答案(  B   )<br>A、   var <code>_变量</code>=NaN;B、var 0bj = [];C、var obj = //;  D、var obj = {};</p>\n<p>45、以下两个变量a和b，a+b的哪个结果是NaN？      答案(   C  )<br>A、var a=undefind; b=NaN</p>\n<p>B、var a=‘123’; b=NaN</p>\n<p>C、var a =undefined , b =NaN</p>\n<p>D、var a=NaN , b=’undefined’</p>\n<p>46、var a=10; b=20; c=4;  ++b+c+a++ 以下哪个结果是正确的？答案(  B  )<br>A、   34   B、35  C、36  D、37</p>\n<p>47、下面的JavaScript语句中，（ D ）实现检索当前页面中的表单元素中的所有文本框，并将它们全部清空<br>A. for(vari=0;i&lt; form1.elements.length;i++) {</p>\n<p>if(form1.elements.type==”text”)</p>\n<p>form1.elements.value=””;}</p>\n<p>B. for(vari=0;i&lt;document.forms.length;i++) {</p>\n<p>if(forms[0].elements.type==”text”)</p>\n<p>forms[0].elements.value=””;</p>\n<p>}</p>\n<p>C. if(document.form.elements.type==”text”)</p>\n<p>form.elements.value=””;</p>\n<p>D. for(vari=0;i&lt;document.forms.length; i++){</p>\n<p>for(var j=0;j&lt;document.forms.elements.length; j++){</p>\n<p>if(document.forms.elements[j].type==”text”)</p>\n<p>document.forms.elements[j].value=””;</p>\n<p>}</p>\n<p>}</p>\n<p>48、要将页面的状态栏中显示“已经选中该文本框”，下列JavaScript语句正确的是（ A ）</p>\n<p>A. window.status=”已经选中该文本框”</p>\n<p>B. document.status=”已经选中该文本框”</p>\n<p>C. window.screen=”已经选中该文本框”</p>\n<p>D. document.screen=”已经选中该文本框”</p>\n<p>49、以下哪条语句会产生运行错误：（A）<br>A.var obj = ();<br>B.var obj = [];<br>C.var obj = {};<br>D.var obj = //;<br>50、以下哪个单词不属于javascript保留字：（B）<br>A.with<br>B.parent<br>C.class<br>D.void<br>51、请选择结果为真的表达式：（C）<br>A.null instanceof Object<br>B.null === undefined<br>C.null == undefined<br>D.NaN == NaN<br>52、Javascript中, 如果已知HTML页面中的某标签对象的id=”username”，用<strong>_<em>document.getElementById(‘username’)</em></strong> `<em>方法获得该标签对象。``<br>53、typeof运算符返回值中有一个跟javascript数据类型不一致，它是<strong><em>__</em></strong>”function”<strong><em>__</em></strong></em>。<br>54、定义了一个变量，但没有为该变量赋值，如果alert该变量，javascript弹出的对话框中显示<strong>_undefined<em>__</em></strong> 。<br>55、分析代码，得出正确的结果。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">var a=10, b=20 , c=30;</div><div class=\"line\"></div><div class=\"line\">++a;</div><div class=\"line\"></div><div class=\"line\">a++;</div><div class=\"line\"></div><div class=\"line\">e=++a+(++b)+(c++)+a++;</div><div class=\"line\"></div><div class=\"line\">alert(e);</div><div class=\"line\"></div><div class=\"line\">弹出提示对话框：77</div></pre></td></tr></table></figure></p>\n<p>56、写出函数DateDemo的返回结果，系统时间假定为今天<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">function DateDemo()&#123;</div><div class=\"line\"></div><div class=\"line\"> var d, s=&quot;今天日期是：&quot;;</div><div class=\"line\"></div><div class=\"line\"> d = new Date();</div><div class=\"line\"></div><div class=\"line\">s += d.getMonth() + &quot;/&quot;;</div><div class=\"line\"></div><div class=\"line\">s += d.getDate() + &quot;/&quot;;</div><div class=\"line\"></div><div class=\"line\">s += d.getYear();</div><div class=\"line\"></div><div class=\"line\">return s;&#125;</div></pre></td></tr></table></figure></p>\n<p>结果：今天日期是：7/17/2010</p>\n<p>57、写出程序运行的结果？<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">for(i=0, j=0; i&lt;10, j&lt;6; i++, j++)&#123;</div><div class=\"line\"></div><div class=\"line\">k = i + j;&#125;</div></pre></td></tr></table></figure></p>\n<p>结果：10</p>\n<p>58、阅读以下代码，请分析出结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">    var arr = new Array(1 ,3 ,5);</div><div class=\"line\"></div><div class=\"line\">    arr[4]=&apos;z&apos;;</div><div class=\"line\"></div><div class=\"line\">    arr2 = arr.reverse();</div><div class=\"line\"></div><div class=\"line\">    arr3 = arr.concat(arr2);</div><div class=\"line\"></div><div class=\"line\">    alert(arr3);</div><div class=\"line\"></div><div class=\"line\">弹出提示对话框：z,,5,3,1,z,,5,3,1</div></pre></td></tr></table></figure></p>\n<p>59、补充按钮事件的函数，确认用户是否退出当前页面，确认之后关闭窗口；<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"> &lt;html&gt;</div><div class=\"line\">&lt;head&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;script type=”text/javascript” &gt;</div><div class=\"line\"></div><div class=\"line\">function closeWin()&#123;</div><div class=\"line\"></div><div class=\"line\">//在此处添加代码</div><div class=\"line\"></div><div class=\"line\">if(confirm(“确定要退出吗？”))&#123;</div><div class=\"line\"></div><div class=\"line\">window.close();</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">&lt;/script&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;body&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;input type=”button”value=”关闭窗口”onclick=”closeWin()”/&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure></p>\n<p>60、写出简单描述html标签（不带属性的开始标签和结束标签）的正则表达式，并将以下字符串中的html标签去除掉<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">var str = “&lt;div&gt;这里是div&lt;p&gt;里面的段落&lt;/p&gt;&lt;/div&gt;”;</div><div class=\"line\"></div><div class=\"line\">//</div><div class=\"line\"></div><div class=\"line\">&lt;scripttype=”text/javascript”&gt;</div><div class=\"line\"></div><div class=\"line\">varreg = /&lt;\\/?\\w+\\/?&gt;/gi;</div><div class=\"line\"></div><div class=\"line\">varstr = “&lt;div&gt;这里是div&lt;p&gt;里面的段落&lt;/p&gt;&lt;/div&gt;”;</div><div class=\"line\"></div><div class=\"line\">alert(str.replace(reg,”&quot;));</div><div class=\"line\"></div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure></p>\n<p>61、完成foo()函数的内容，要求能够弹出对话框提示当前选中的是第几个单选框。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;html&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;head&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;metahttp-equiv=”Content-Type” content=”text/html;charset=utf-8″ /&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;body&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;script type=”text/javascript” &gt;</div><div class=\"line\"></div><div class=\"line\">function foo() &#123;</div><div class=\"line\"></div><div class=\"line\">//在此处添加代码</div><div class=\"line\"></div><div class=\"line\">var rdo =document.form1.radioGroup;</div><div class=\"line\"></div><div class=\"line\">for(var i =0 ;i&lt;rdo.length;i++)&#123;</div><div class=\"line\"></div><div class=\"line\">if(rdo.checked)&#123;</div><div class=\"line\"></div><div class=\"line\">alert(“您选择的是第”+(i+1)+”个单选框”);</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">&lt;/script&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;body&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;form name=”form1″ &gt;</div><div class=\"line\"></div><div class=\"line\">&lt;input type=”radio” name=”radioGroup”/&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;input type=”radio” name=”radioGroup”/&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;input type=”radio” name=”radioGroup”/&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;input type=”radio” name=”radioGroup”/&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;input type=”submit”/&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/form&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure></p>\n<p>62、完成函数showImg()，要求能够动态根据下拉列表的选项变化，更新图片的显示<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;body&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;script type=”text/javascript” &gt;</div><div class=\"line\"></div><div class=\"line\">function showImg (oSel) &#123;</div><div class=\"line\"></div><div class=\"line\">//在此处添加代码</div><div class=\"line\"></div><div class=\"line\">var str = oSel.value;</div><div class=\"line\"></div><div class=\"line\">document.getElementById(“pic”).src= str+”.jpg”;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">&lt;/script&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;img id=”pic”src=”img1.jpg”width=”200″ height=”200″ /&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;br /&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;select id=”sel”&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;option value=”img1“&gt;城市生活&lt;/option&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;option value=”img2“&gt;都市早报&lt;/option&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;option value=”img3“&gt;青山绿水&lt;/option&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/select&gt;&lt;/body&gt;</div></pre></td></tr></table></figure></p>\n<p>63、截取字符串abcdefg的efg<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">alert(&apos;abcdefg&apos;.substring(4));</div></pre></td></tr></table></figure></p>\n<p>64、列举浏览器对象模型BOM里常用的至少4个对象，并列举window对象的常用方法至少5个<br>对象：Window document location screen history navigator</p>\n<p>方法：Alert() confirm() prompt() open() close()</p>\n<p>65、简述列举文档对象模型DOM里document的常用的查找访问节点的方法并做简单说明<br>Document.getElementById 根据元素id查找元素</p>\n<p>Document.getElementByName 根据元素name查找元素</p>\n<p>Document.getElementTagName 根据指定的元素名查找元素</p>\n<p>66、希望获取到页面中所有的checkbox怎么做？(不使用第三方框架)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">var domList = document.getElementsByTagName(‘input’)</div><div class=\"line\"></div><div class=\"line\">var checkBoxList = [];</div><div class=\"line\"></div><div class=\"line\">var len = domList.length;　　//缓存到局部变量</div><div class=\"line\"></div><div class=\"line\">while (len--) &#123;　　//使用while的效率会比for循环更高</div><div class=\"line\"></div><div class=\"line\">　　if (domList[len].type == ‘checkbox’) &#123;</div><div class=\"line\"></div><div class=\"line\">    　　checkBoxList.push(domList[len]);</div><div class=\"line\"></div><div class=\"line\">　　&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>67、JavaScript的数据类型都有什么？<br>基本数据类型：String,Boolean,Number,Undefined,Null</p>\n<p>引用数据类型：Object(Array,Date,RegEx p,Function)</p>\n<p>68、javascript中有哪几种数据类型，分别写出中文和英文。<br>string boolean number null undefined object</p>\n<p>字符串 布尔 数值 空值 未定义 对象</p>\n<p>69、javascript中==和===的区别是什么？举例说明。<br>===会自动进行类型转换，==不会</p>\n<p>70、简述创建函数的几种方式<br>第一种（函数声明）：</p>\n<p>function sum1(num1,num2){</p>\n<p>   return num1+num2;</p>\n<p>}</p>\n<p>第二种（函数表达式）：</p>\n<p>var sum2 = function(num1,num2){</p>\n<p>   return num1+num2;</p>\n<p>}</p>\n<p>第三种（函数对象方式）：</p>\n<p>var sum3 = new Function(“num1”,”num2”,”return num1+num2”);</p>\n<p>71、Javascript如何实现继承？<br>原型链继承，借用构造函数继承，组合继承，寄生式继承，寄生组合继承</p>\n<p>72、Javascript创建对象的几种方式？<br>工厂方式，构造函数方式，原型模式，混合构造函数原型模式，动态原型方式</p>\n<p>73、把 Script 标签 放在页面的最底部的body封闭之前 和封闭之后有什么区别？浏览器会如何解析它们？<br>74、iframe的优缺点？<br>优点：</p>\n<ol>\n<li><p>解决加载缓慢的第三方内容如图标和广告等的加载问题</p>\n</li>\n<li><p>Security sandbox</p>\n</li>\n<li><p>并行加载脚本</p>\n</li>\n</ol>\n<p>缺点：</p>\n<ol>\n<li><p>iframe会阻塞主页面的Onload事件</p>\n</li>\n<li><p>即时内容为空，加载也需要时间</p>\n</li>\n<li><p>没有语意</p>\n</li>\n</ol>\n<p>75、请你谈谈Cookie的弊端？<br>缺点：</p>\n<p>1.<code>Cookie</code>数量和长度的限制。每个domain最多只能有20条cookie，每个cookie长度不能超过4KB，否则会被截掉。</p>\n<p>2.安全性问题。如果cookie被人拦截了，那人就可以取得所有的session信息。即使加密也与事无补，因为拦截者并不需要知道cookie的意义，他只要原样转发cookie就可以达到目的了。</p>\n<p>3.有些状态不可能保存在客户端。例如，为了防止重复提交表单，我们需要在服务器端保存一个计数器。如果我们把这个计数器保存在客户端，那么它起不到任何作用。</p>\n<p>76、DOM操作——怎样添加、移除、移动、复制、创建和查找节点。</p>\n<ol>\n<li>创建新节点</li>\n</ol>\n<p>createDocumentFragment() // 创建一个DOM片段</p>\n<p>createElement() // 创建一个具体的元素</p>\n<p>createTextNode() // 创建一个文本节点</p>\n<ol>\n<li>添加、移除、替换、插入</li>\n</ol>\n<p>appendChild()</p>\n<p>removeChild()</p>\n<p>replaceChild()</p>\n<p>insertBefore() // 在已有的子节点前插入一个新的子节点</p>\n<ol>\n<li>查找</li>\n</ol>\n<p>getElementsByTagName() // 通过标签名称</p>\n<p>getElementsByName() // 通过元素的Name属性的值(IE容错能力较强，会得到一个数组，其中包括id等于name值的)</p>\n<p>getElementById() // 通过元素Id，唯一性</p>\n<p>77、js延迟加载的方式有哪些？</p>\n<pre><code>1. defer和async\n\n2. 动态创建DOM方式（创建script，插入到DOM中，加载完毕后callBack）\n\n3. 按需异步载入js\n</code></pre><p>78、documen.write和 innerHTML 的区别？<br>document.write 只能重绘整个页面</p>\n<p>innerHTML 可以重绘页面的一部分</p>\n<p>79、哪些操作会造成内存泄漏？<br>内存泄漏指任何对象在您不再拥有或需要它之后仍然存在。</p>\n<p>垃圾回收器定期扫描对象，并计算引用了每个对象的其他对象的数量。如果一个对象的引用数量为 0（没有其他对象引用过该对象），或对该对象的惟一引用是循环的，那么该对象的内存即可回收。</p>\n<ol>\n<li><p>setTimeout 的第一个参数使用字符串而非函数的话，会引发内存泄漏。</p>\n</li>\n<li><p>闭包</p>\n</li>\n<li><p>控制台日志</p>\n</li>\n<li><p>循环（在两个对象彼此引用且彼此保留时，就会产生一个循环）</p>\n</li>\n</ol>\n<p>80、javascript的typeof返回哪些数据类型?<br>答：object、 number、 function 、boolean、 underfind</p>\n<p>81、split() join() 的区别<br>答：前者是切割成数组的形式，后者是将数组转换成字符串</p>\n<p>82、数组方法pop() push() unshift() shift()各表示什么意思？<br>答：Push()尾部添加、pop()尾部删除、Unshift()头部添加、shift()头部删除</p>\n<p>83、判断一个字符串中出现次数最多的字符，统计这个次数<br>答：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">var str = &apos;asdfssaaasasasasaa&apos;;</div><div class=\"line\">var json = &#123;&#125;;</div><div class=\"line\">for (var i = 0; i &lt; str.length; i++) &#123;</div><div class=\"line\">        if(!json[str.charAt(i)])&#123;</div><div class=\"line\">                json[str.charAt(i)] = 1;</div><div class=\"line\">        &#125;else&#123;</div><div class=\"line\">                json[str.charAt(i)]++;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">var iMax = 0;</div><div class=\"line\">var iIndex = &apos;&apos;;</div><div class=\"line\">for(var i in json)&#123;</div><div class=\"line\">        if(json[i]&gt;iMax)&#123;</div><div class=\"line\">                iMax = json[i];</div><div class=\"line\">                iIndex = i;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">alert(&apos;出现次数最多的是:&apos;+iIndex+&apos;出现&apos;+iMax+&apos;次&apos;);</div></pre></td></tr></table></figure></p>\n<p>84、javascript的typeof返回哪些数据类型<br>Object number function boolean underfind</p>\n<p>85、例举3种强制类型转换和2种隐式类型转换?<br>强制（parseInt,parseFloat,number）</p>\n<p>隐式（== – ===）</p>\n<p>86、split() join() 的区别<br>前者是切割成数组的形式，后者是将数组转换成字符串</p>\n<p>87、数组方法pop() push() unshift() shift()<br>Push()尾部添加 shift() 尾部删除</p>\n<p>Unshift() 头部添加 shift() 头部删除</p>\n<p>88、事件绑定和普通事件有什么区别<br>事件绑定和普通事件有什么区别</p>\n<p>89、IE和DOM事件流的区别<br>1.执行顺序不一样、</p>\n<p>2.参数不一样</p>\n<p>3.事件加不加on</p>\n<p>4.this指向问题</p>\n<p>90、IE和标准下有哪些兼容性的写法<br>Var ev = ev || window.event</p>\n<p>document.documentElement.clientWidth || document.body.clientWidth</p>\n<p>Var target = ev.srcElement||ev.target</p>\n<p>91、call和apply的区别<br>Object.call(this,obj1,obj2,obj3)</p>\n<p>Object.apply(this,arguments)</p>\n<p>92、b继承a的方法<br>93、写一个获取非行间样式的函数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">function getStyle(obj,attr,value)</div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\">  if(!value)</div><div class=\"line\"></div><div class=\"line\">  &#123;</div><div class=\"line\"></div><div class=\"line\">      if(obj.currentStyle)</div><div class=\"line\"></div><div class=\"line\">      &#123;</div><div class=\"line\"></div><div class=\"line\">          return obj.currentStyle(attr);</div><div class=\"line\"></div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      else&#123;</div><div class=\"line\"></div><div class=\"line\">          obj.getComputedStyle(attr,false);</div><div class=\"line\"></div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">  &#125;       </div><div class=\"line\"></div><div class=\"line\">  else</div><div class=\"line\"></div><div class=\"line\">  &#123;</div><div class=\"line\"></div><div class=\"line\">      obj.style[attr] = value;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>94、事件委托是什么<br>让利用事件冒泡的原理，让自己的所触发的事件，让他的父元素代替执行！</p>\n<p><a href=\"http://www.webasily.com/?p=78\" target=\"_blank\" rel=\"external\">http://www.webasily.com/?p=78</a> 例子可见此链接</p>\n<p>事件委托是什么</p>\n<p>95、闭包是什么，有什么特性，对页面有什么影响<br>闭包就是能够读取其他函数内部变量的函数。</p>\n<p><a href=\"http://blog.csdn.NET/gaoshanwudi/article/details/7355794\" target=\"_blank\" rel=\"external\">http://blog.csdn.NET/gaoshanwudi/article/details/7355794</a> 此链接可查看（问这个问题的不是一个公司）</p>\n<p>96、解释jsonp的原理，以及为什么不是真正的ajax<br>动态创建script标签，回调函数</p>\n<p>Ajax是页面无刷新请求数据操作</p>\n<p>97、javascript的本地对象，内置对象和宿主对象<br>本地对象为array obj regexp等可以new实例化</p>\n<p>内置对象为gload Math 等不可以实例化的</p>\n<p>宿主为浏览器自带的document,window 等</p>\n<p>98、document load 和document ready的区别<br>Document.onload 是在结构和样式加载完才执行js</p>\n<p>Document.ready原生种没有这个方法，jquery中有 $().ready(function)</p>\n<p>99、字符串反转，如将 ‘12345678’ 变成 ‘87654321’<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">//大牛做法；</div><div class=\"line\"></div><div class=\"line\">//思路：先将字符串转换为数组 split()，利用数组的反序函数 reverse()颠倒数组，再利用 jion() 转换为字符串</div><div class=\"line\"></div><div class=\"line\">var str = &apos;12345678&apos;;</div><div class=\"line\"></div><div class=\"line\">str = str.split(&apos;&apos;).reverse().join(&apos;&apos;);</div><div class=\"line\"></div><div class=\"line\">100、将数字 12345678 转化成 RMB形式 如： 12,345,678</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">//个人方法；</div><div class=\"line\"></div><div class=\"line\">//思路：先将数字转为字符， str= str + &apos;&apos; ;</div><div class=\"line\"></div><div class=\"line\">//利用反转函数，每三位字符加一个 &apos;,&apos;最后一位不加； re()是自定义的反转函数，最后再反转回去！</div><div class=\"line\"></div><div class=\"line\">for(var i = 1; i &lt;= re(str).length; i++)&#123;</div><div class=\"line\"></div><div class=\"line\">    tmp += re(str)[i - 1];</div><div class=\"line\"></div><div class=\"line\">    if(i % 3 == 0 &amp;&amp; i != re(str).length)&#123;</div><div class=\"line\"></div><div class=\"line\">        tmp += &apos;,&apos;;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>101、生成5个不同的随机数；</p>\n<p>//思路：5个不同的数，每生成一次就和前面的所有数字相比较，如果有相同的，则放弃当前生成的数字！<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">var num1 = [];</div><div class=\"line\"></div><div class=\"line\">for(var i = 0; i &lt; 5; i++)&#123;</div><div class=\"line\"></div><div class=\"line\">    num1[i] = Math.floor(Math.random()*10) + 1; //范围是 [1, 10]</div><div class=\"line\"></div><div class=\"line\">    for(var j = 0; j &lt; i; j++)&#123;</div><div class=\"line\"></div><div class=\"line\">        if(num1[i] == num1[j])&#123;</div><div class=\"line\"></div><div class=\"line\">            i--;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>102、去掉数组中重复的数字 方法一；</p>\n<p>//思路：每遍历一次就和之前的所有做比较，不相等则放入新的数组中！</p>\n<p>//这里用的原型 个人做法；<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">Array.prototype.unique = function()&#123;</div><div class=\"line\"></div><div class=\"line\">    var len = this.length,</div><div class=\"line\"></div><div class=\"line\">        newArr = [],</div><div class=\"line\"></div><div class=\"line\">        flag = 1;</div><div class=\"line\"></div><div class=\"line\">    for(var i = 0; i &lt; len; i++, flag = 1)&#123;</div><div class=\"line\"></div><div class=\"line\">        for(var j = 0; j &lt; i; j++)&#123;</div><div class=\"line\"></div><div class=\"line\">            if(this[i] == this[j])&#123;</div><div class=\"line\"></div><div class=\"line\">                flag = 0;        //找到相同的数字后，不执行添加数据</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        flag ? newArr.push(this[i]) : &apos;&apos;;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    return newArr;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<pre><code>方法二：\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">(function(arr)&#123;</div><div class=\"line\"></div><div class=\"line\">    var len = arr.length,</div><div class=\"line\"></div><div class=\"line\">        newArr = [],</div><div class=\"line\"></div><div class=\"line\">        flag;</div><div class=\"line\"></div><div class=\"line\">    for(var i = 0; i &lt; len; i+=1, flag = 1)&#123;</div><div class=\"line\"></div><div class=\"line\">        for(var j = 0; j &lt; i; j++)&#123;</div><div class=\"line\"></div><div class=\"line\">            if(arr[i] == arr[j])&#123;</div><div class=\"line\"></div><div class=\"line\">                flag = 0;</div><div class=\"line\"></div><div class=\"line\">            &#125;  </div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        flag?newArr.push(arr[i]):&apos;&apos;;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    alert(newArr);</div><div class=\"line\"></div><div class=\"line\">&#125;)([1, 1, 22, 3, 4, 55, 66]);</div></pre></td></tr></table></figure>\n<p>103、阶乘函数；</p>\n<p>//原型方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">Number.prototype.N = function()&#123;</div><div class=\"line\"></div><div class=\"line\">    var re = 1;</div><div class=\"line\"></div><div class=\"line\">    for(var i = 1; i &lt;= this; i++)&#123;</div><div class=\"line\"></div><div class=\"line\">        re *= i;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    return re;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var num = 5;</div><div class=\"line\"></div><div class=\"line\">alert(num.N());</div></pre></td></tr></table></figure></p>\n<p>104、window.location.search() 返回的是什么？<br>    答：查询(参数)部分。除了给动态语言赋值以外，我们同样可以给静态页面,并使用javascript来获得相信应的参数值</p>\n<pre><code>返回值：?ver=1.0&amp;id=timlq 也就是问号后面的！\n</code></pre><p>105、window.location.hash 返回的是什么？<br>    答：锚点 ， 返回值：#love ；</p>\n<p>106、window.location.reload() 作用？<br>    答：刷新当前页面。</p>\n<p>107、阻止冒泡函数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">function stopPropagation(e) &#123;  </div><div class=\"line\"></div><div class=\"line\">    e = e || window.event;  </div><div class=\"line\"></div><div class=\"line\">    if(e.stopPropagation) &#123; //W3C阻止冒泡方法  </div><div class=\"line\"></div><div class=\"line\">        e.stopPropagation();  </div><div class=\"line\"></div><div class=\"line\">    &#125; else &#123;  </div><div class=\"line\"></div><div class=\"line\">        e.cancelBubble = true; //IE阻止冒泡方法  </div><div class=\"line\"></div><div class=\"line\">    &#125;  </div><div class=\"line\"></div><div class=\"line\">&#125;  </div><div class=\"line\"></div><div class=\"line\">document.getElementById(&apos;need_hide&apos;).onclick = function(e) &#123;  </div><div class=\"line\"></div><div class=\"line\">    stopPropagation(e);  </div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>108、什么是闭包？ 写一个简单的闭包？；<br>    答：我的理解是，闭包就是能够读取其他函数内部变量的函数。在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">function outer()&#123;</div><div class=\"line\"></div><div class=\"line\">    var num = 1;</div><div class=\"line\"></div><div class=\"line\">    function inner()&#123;</div><div class=\"line\"></div><div class=\"line\">        var n = 2;</div><div class=\"line\"></div><div class=\"line\">        alert(n + num);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    return inner;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">outer()();</div></pre></td></tr></table></figure>\n<p>109、javascript 中的垃圾回收机制？<br>    答：在Javascript中，如果一个对象不再被引用，那么这个对象就会被GC回收。如果两个对象互相引用，而不再  被第3者所引用，那么这两个互相引用的对象也会被回收。因为函数a被b引用，b又被a外的c引用，这就是为什么  函数a执行后不会被回收的原因。</p>\n<p>110、看题做答：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">function f1()&#123;</div><div class=\"line\"></div><div class=\"line\">    var tmp = 1;</div><div class=\"line\"></div><div class=\"line\">    this.x = 3;</div><div class=\"line\"></div><div class=\"line\">    console.log(tmp);    //A</div><div class=\"line\"></div><div class=\"line\">    console.log(this.x)；     //B</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var obj = new f1(); //1</div><div class=\"line\"></div><div class=\"line\">console.log(obj.x)     //2</div><div class=\"line\"></div><div class=\"line\">console.log(f1());        //3</div></pre></td></tr></table></figure>\n<pre><code>分析：    \n\n    这道题让我重新认识了对象和函数，首先看代码（1），这里实例话化了 f1这个类。相当于执行了 f1函数。所以这个时候 A 会输出 1， 而 B 这个时候的 this 代表的是 实例化的当前对象 obj B 输出 3.。 代码（2）毋庸置疑会输出 3， 重点 代码（3）首先这里将不再是一个类，它只是一个函数。那么 A输出 1， B呢？这里的this 代表的其实就是window对象，那么this.x 就是一个全局变量 相当于在外部 的一个全局变量。所以 B 输出 3。最后代码由于f没有返回值那么一个函数如果没返回值的话，将会返回 underfined ，所以答案就是 ： 1， 3， 3， 1， 3， underfined 。\n</code></pre><p>111、下面输出多少？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">var o1 = new Object();</div><div class=\"line\"></div><div class=\"line\">var o2 = o1;</div><div class=\"line\"></div><div class=\"line\">o2.name = &quot;CSSer&quot;;</div><div class=\"line\"></div><div class=\"line\">console.log(o1.name);</div></pre></td></tr></table></figure>\n<p>  如果不看答案，你回答真确了的话，那么说明你对javascript的数据类型了解的还是比较清楚了。js中有两种数据类型，分别是：基本数据类型和引用数据类型（object Array）。对于保存基本类型值的变量，变量是按值访问的，因为我们操作的是变量实际保存的值。对于保存引用类型值的变量，变量是按引用访问的，我们操作的是变量值所引用（指向）的对象。答案就清楚了：  //CSSer;</p>\n<p>112、再来一个</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">function changeObjectProperty (o) &#123;</div><div class=\"line\"></div><div class=\"line\">    o.siteUrl = &quot;http://www.csser.com/&quot;;</div><div class=\"line\"></div><div class=\"line\">    o = new Object();</div><div class=\"line\"></div><div class=\"line\">    o.siteUrl = &quot;http://www.popcg.com/&quot;;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var CSSer = new Object();</div><div class=\"line\"></div><div class=\"line\">changeObjectProperty(CSSer);</div><div class=\"line\"></div><div class=\"line\">console.log(CSSer.siteUrl); //</div></pre></td></tr></table></figure>\n<pre><code>如果CSSer参数是按引用传递的，那么结果应该是&quot;http://www.popcg.com/&quot;，但实际结果却仍是&quot;http://www.csser.com/&quot;。事实是这样的：在函数内部修改了引用类型值的参数，该参数值的原始引用保持不变。我们可以把参数想象成局部变量，当参数被重写时，这个变量引用的就是一个局部变量，局部变量的生存期仅限于函数执行的过程中，函数执行完毕，局部变量即被销毁以释放内存。    \n\n（补充：内部环境可以通过作用域链访问所有的外部环境中的变量对象，但外部环境无法访问内部环境。每个环境都可以向上搜索作用域链，以查询变量和函数名，反之向下则不能。）\n</code></pre><p>113、输出多少？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">var a = 6;</div><div class=\"line\"></div><div class=\"line\">setTimeout(function () &#123;    </div><div class=\"line\"></div><div class=\"line\">    var a = 666;</div><div class=\"line\"></div><div class=\"line\">    alert(a);      // 输出666，</div><div class=\"line\"></div><div class=\"line\">&#125;, 1000);</div><div class=\"line\"></div><div class=\"line\">a = 66;</div></pre></td></tr></table></figure>\n<p>因为var a = 666;定义了局部变量a，并且赋值为666，根据变量作用域链，<br>全局变量处在作用域末端，优先访问了局部变量，从而覆盖了全局变量 。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">var a = 6;</div><div class=\"line\"></div><div class=\"line\">setTimeout(function () &#123;    </div><div class=\"line\"></div><div class=\"line\">    alert(a);      // 输出undefined</div><div class=\"line\"></div><div class=\"line\">    var a = 666;</div><div class=\"line\"></div><div class=\"line\">&#125;, 1000);</div><div class=\"line\"></div><div class=\"line\">a = 66;</div></pre></td></tr></table></figure>\n<p>因为var a = 666;定义了局部变量a，同样覆盖了全局变量，但是在alert(a);之前<br>a并未赋值，所以输出undefined。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">var a = 6;</div><div class=\"line\"></div><div class=\"line\">setTimeout(function()&#123;</div><div class=\"line\"></div><div class=\"line\">    alert(a);</div><div class=\"line\"></div><div class=\"line\">    var a = 66;</div><div class=\"line\"></div><div class=\"line\">&#125;, 1000);</div><div class=\"line\"></div><div class=\"line\">a = 666;</div><div class=\"line\"></div><div class=\"line\">alert(a);</div><div class=\"line\"></div><div class=\"line\">// 666, undefined;</div></pre></td></tr></table></figure>\n<p>记住： 异步处理，一切OK 声明提前</p>\n<p>114、输出多少？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">function setN(obj)&#123;</div><div class=\"line\"></div><div class=\"line\">    obj.name=&apos;屌丝&apos;;</div><div class=\"line\"></div><div class=\"line\">    obj = new Object();</div><div class=\"line\"></div><div class=\"line\">    obj.name = &apos;腐女&apos;;</div><div class=\"line\"></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">var per = new Object();</div><div class=\"line\"></div><div class=\"line\">setN(per);</div><div class=\"line\"></div><div class=\"line\">alert(per.name);  //屌丝 内部</div></pre></td></tr></table></figure>\n<p>115、JS的继承性</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">window.color = &apos;red&apos;;</div><div class=\"line\"></div><div class=\"line\">var o = &#123;color: &apos;blue&apos;&#125;;</div><div class=\"line\"></div><div class=\"line\">function sayColor()&#123;</div><div class=\"line\"></div><div class=\"line\">    alert(this.color);</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">sayColor(); //red</div><div class=\"line\"></div><div class=\"line\">sayColor.call(this); //red this-window对象</div><div class=\"line\"></div><div class=\"line\">sayColor.call(window); //red</div><div class=\"line\"></div><div class=\"line\">sayColor.call(o); //blue</div></pre></td></tr></table></figure>\n<p>116、精度问题: JS 精度不能精确到 0.1 所以  。。。。同时存在于值和差值中<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">var n = 0.3,m = 0.2, i = 0.2, j = 0.1;</div><div class=\"line\"></div><div class=\"line\">alert((n - m) == (i - j)); //false</div><div class=\"line\"></div><div class=\"line\">alert((n-m) == 0.1); //false</div><div class=\"line\"></div><div class=\"line\">alert((i-j)==0.1); //true</div></pre></td></tr></table></figure></p>\n<p>117、加减运算</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">alert(&apos;5&apos;+3); //53 string</div><div class=\"line\"></div><div class=\"line\">alert(&apos;5&apos;+&apos;3&apos;); //53 string</div><div class=\"line\"></div><div class=\"line\">alert(&apos;5&apos;-3); //2 number</div><div class=\"line\"></div><div class=\"line\">alert(&apos;5&apos;-&apos;3&apos;); //2 number</div></pre></td></tr></table></figure>\n<p>118、什么是同源策略？<br>    指： 同协议、端口、域名的安全策略，由王景公司提出来的安全协议！</p>\n<p>119、call和applay的区别是什么？<br>    参数形式不同，call(obj, pra, pra)后面是单个参数。applay(obj, [args])后面是数组。</p>\n<p>120、为什么不能定义1px左右的div容器？<br>IE6下这个问题是因为默认的行高造成的，解决的方法也有很多，例如：</p>\n<p>overflow:hidden | zoom:0.08 | line-height:1px</p>\n<p>121、结果是什么？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">function foo()&#123;</div><div class=\"line\"></div><div class=\"line\">    foo.a = function()&#123;alert(1)&#125;;</div><div class=\"line\"></div><div class=\"line\">    this.a = function()&#123;alert(2)&#125;;</div><div class=\"line\"></div><div class=\"line\">    a = function()&#123;alert(3)&#125;;</div><div class=\"line\"></div><div class=\"line\">    var a = function()&#123;alert(4)&#125;;</div><div class=\"line\"></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">foo.prototype.a = function()&#123;alert(5)&#125;;</div><div class=\"line\"></div><div class=\"line\">foo.a = function()&#123;alert(6)&#125;;</div><div class=\"line\"></div><div class=\"line\">foo.a(); //6</div><div class=\"line\"></div><div class=\"line\">var obj = new foo();</div><div class=\"line\"></div><div class=\"line\">obj.a(); //2</div><div class=\"line\"></div><div class=\"line\">foo.a(); //1</div></pre></td></tr></table></figure>\n<p>122、输出结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">var a = 5;</div><div class=\"line\"></div><div class=\"line\">function test()&#123;</div><div class=\"line\"></div><div class=\"line\">    a = 0;</div><div class=\"line\"></div><div class=\"line\">    alert(a);</div><div class=\"line\"></div><div class=\"line\">    alert(this.a); //没有定义 a这个属性</div><div class=\"line\"></div><div class=\"line\">    var a;</div><div class=\"line\"></div><div class=\"line\">    alert(a)</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">test(); // 0, 5, 0</div><div class=\"line\"></div><div class=\"line\">new test(); // 0, undefined, 0 //由于类它自身没有属性a， 所以是undefined</div></pre></td></tr></table></figure>\n<p>123、计算字符串字节数：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">new function(s)&#123;</div><div class=\"line\"></div><div class=\"line\">     if(!arguments.length||!s) return null;  </div><div class=\"line\"></div><div class=\"line\">     if(&quot;&quot;==s) return 0;     </div><div class=\"line\"></div><div class=\"line\">     var l=0;</div><div class=\"line\"></div><div class=\"line\">     for(var i=0;i&lt;s.length;i++)&#123;        </div><div class=\"line\"></div><div class=\"line\">         if(s.charCodeAt(i)&gt;255) l+=2; else l+=1;  //charCodeAt()得到的是unCode码   </div><div class=\"line\"></div><div class=\"line\">     &#125;     //汉字的unCode码大于 255bit 就是两个字节</div><div class=\"line\"></div><div class=\"line\">     alert(l);</div><div class=\"line\"></div><div class=\"line\">&#125;(&quot;hello world!&quot;);</div></pre></td></tr></table></figure></p>\n<p>124、结果是：</p>\n<p>var bool = !!2; alert(bool)；//true;</p>\n<p>双向非操作可以把字符串和数字转换为布尔值。</p>\n<p>125、声明对象，添加属性，输出属性</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">    var obj = &#123;</div><div class=\"line\"></div><div class=\"line\">        name: &apos;leipeng&apos;,</div><div class=\"line\"></div><div class=\"line\">        showName: function()&#123;</div><div class=\"line\"></div><div class=\"line\">            alert(this.name);</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">obj.showName();</div></pre></td></tr></table></figure>\n<p>126、匹配输入的字符：第一个必须是字母或下划线开头，长度5-20</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">var reg = /^[a-zA-Z][a-zA-Z0-9_]&#123;5,20&#125;/,</div><div class=\"line\"></div><div class=\"line\">            name1 = &apos;leipeng&apos;,</div><div class=\"line\"></div><div class=\"line\">            name2 = &apos;0leipeng&apos;,</div><div class=\"line\"></div><div class=\"line\">            name3 = &apos;你好leipeng&apos;,</div><div class=\"line\"></div><div class=\"line\">            name4 = &apos;hi&apos;;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        alert(reg.test(name1));</div><div class=\"line\"></div><div class=\"line\">        alert(reg.test(name2));</div><div class=\"line\"></div><div class=\"line\">        alert(reg.test(name3));</div><div class=\"line\"></div><div class=\"line\">        alert(reg.test(name4));</div></pre></td></tr></table></figure>\n<p>127、检测变量类型</p>\n<p>function checkStr(str){</p>\n<pre><code>    typeof str == &apos;string&apos;? alert(&apos;true&apos;):alert(&apos;false&apos;);\n\n}\n\ncheckStr(&apos;leipeng&apos;);\n</code></pre><p>128、如何在HTML中添加事件，几种方法？<br>    1、标签之中直接添加 onclick=”fun()”;</p>\n<pre><code>2、JS添加 Eobj.onclick = method;\n\n3、现代事件  IE： obj.attachEvent(&apos;onclick&apos;, method)；\n\n               FF: obj.addEventListener(&apos;click&apos;, method, false);\n</code></pre><p>129、BOM对象有哪些，列举window对象？<br>    1、window对象 ，是JS的最顶层对象，其他的BOM对象都是window对象的属性；</p>\n<pre><code>2、document对象，文档对象；\n\n3、location对象，浏览器当前URL信息；\n\n4、navigator对象，浏览器本身信息；\n\n5、screen对象，客户端屏幕信息；\n\n6、history对象，浏览器访问历史信息；\n</code></pre><p>130、请问代码实现 outerHTML<br>    //说明：outerHTML其实就是innerHTML再加上本身；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">Object.prototype.outerHTML = function()&#123;</div><div class=\"line\"></div><div class=\"line\">        var innerCon = this.innerHTML, //获得里面的内容</div><div class=\"line\"></div><div class=\"line\">            outerCon = this.appendChild(innerCon); //添加到里面</div><div class=\"line\"></div><div class=\"line\">        alert(outerCon);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<pre><code>演示代码：\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&lt;!doctype html&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;html&gt;</div><div class=\"line\"></div><div class=\"line\"> &lt;head&gt;</div><div class=\"line\"></div><div class=\"line\">   &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">   &lt;title&gt;Document&lt;/title&gt;</div><div class=\"line\"></div><div class=\"line\"> &lt;/head&gt;</div><div class=\"line\"></div><div class=\"line\"> &lt;body&gt;</div><div class=\"line\"></div><div class=\"line\">   &lt;div id=&quot;outer&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">      hello</div><div class=\"line\"></div><div class=\"line\">   &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\"> &lt;script&gt;</div><div class=\"line\"></div><div class=\"line\">   Object.prototype.outerHTML = function()&#123;</div><div class=\"line\"></div><div class=\"line\">   var innerCon = this.innerHTML, //获得里面的内容</div><div class=\"line\"></div><div class=\"line\">   outerCon = this.appendChild(innerCon); //添加到里面</div><div class=\"line\"></div><div class=\"line\">   alert(outerCon);</div><div class=\"line\"></div><div class=\"line\">     &#125;</div><div class=\"line\"></div><div class=\"line\">   function $(id)&#123;</div><div class=\"line\"></div><div class=\"line\">  return document.getElementById(id);</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  alert($(&apos;outer&apos;).innerHTML);</div><div class=\"line\"></div><div class=\"line\">  alert($(&apos;outer&apos;).outerHTML);</div><div class=\"line\"></div><div class=\"line\"> &lt;/script&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure>\n<p>131、JS中的简单继承 call方法！<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">//顶一个父母类，注意：类名都是首字母大写的哦！</div><div class=\"line\"></div><div class=\"line\">  function Parent(name, money)&#123;</div><div class=\"line\"></div><div class=\"line\">            this.name = name;</div><div class=\"line\"></div><div class=\"line\">            this.money = money;</div><div class=\"line\"></div><div class=\"line\">            this.info = function()&#123;</div><div class=\"line\"></div><div class=\"line\">                alert(&apos;姓名： &apos;+this.name+&apos; 钱： &apos;+ this.money);</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        //定义孩子类</div><div class=\"line\"></div><div class=\"line\">        function Children(name)&#123;</div><div class=\"line\"></div><div class=\"line\">            Parent.call(this, name); //继承 姓名属性，不要钱。  </div><div class=\"line\"></div><div class=\"line\">            this.info = function()&#123;</div><div class=\"line\"></div><div class=\"line\">                alert(&apos;姓名： &apos;+this.name);</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        //实例化类</div><div class=\"line\"></div><div class=\"line\">        var per = new Parent(&apos;parent&apos;, 800000000000);</div><div class=\"line\"></div><div class=\"line\">        var chi = new Children(&apos;child&apos;);</div><div class=\"line\"></div><div class=\"line\">        per.info();</div><div class=\"line\"></div><div class=\"line\">        chi.info();</div></pre></td></tr></table></figure></p>\n<p>132、bind(), live(), delegate()的区别<br>    bind： 绑定事件，对新添加的事件不起作用，方法用于将一个处理程序附加到每个匹配元素的事件上并返回jQuery对象。</p>\n<pre><code>live： 方法将一个事件处理程序附加到与当前选择器匹配的所有元素（包含现有的或将来添加的）的指定事件上并返回jQuery对象。\n\ndelegate： 方法基于一组特定的根元素将处理程序附加到匹配选择器的所有元素（现有的或将来的）的一个或多个事件上。\n</code></pre><p>133、typeof 的返回类型有哪些？   </p>\n<pre><code>alert(typeof [1, 2]); //object\n\nalert(typeof &apos;leipeng&apos;); //string\n\nvar i = true;\n\nalert(typeof i); //boolean\n\nalert(typeof 1); //number\n\nvar a;\n\nalert(typeof a); //undefined\n\nfunction a(){;};\n\nalert(typeof a) //function\n</code></pre><p>134、简述link和import的区别？<br>区别1：link是XHTML标签，除了加载CSS外，还可以定义RSS等其他事务；@import属于CSS范畴，只能加载CSS。</p>\n<p>区别2：link引用CSS时，在页面载入时同时加载；@import需要页面网页完全载入以后加载。</p>\n<p>区别3：link是XHTML标签，无兼容问题；@import是在CSS2.1提出的，低版本的浏览器不支持。</p>\n<p>区别4：link支持使用Javascript控制DOM去改变样式；而@import不支持。</p>\n<p>135、window.onload 和 document.ready的区别？<br>load要等到图片和包含的文件都加在进来之后执行；</p>\n<p>ready是不包含图片和非文字文件的文档结构准备好就执行；</p>\n<p>136、 解析URL成一个对象？<br>            String.prototype.urlQueryString = function(){</p>\n<pre><code>    var url = this.split(&apos;?&apos;)[1].split(&apos;&amp;&apos;),\n\n        len = url.length;\n\n\n\n    this.url = {};\n\n    for(var i = 0; i &lt; len; i += 1){\n\n        var cell = url[i].split(&apos;=&apos;),    \n\n            key = cell[0],\n\n            val = cell[1];\n\n        this.url[&apos;&apos;+key+&apos;&apos;] = val;\n\n    }\n\n    return this.url;\n\n}\n\nvar url = &apos;?name=12&amp;age=23&apos;;\n\nconsole.log(url.urlQueryString().age);\n</code></pre><p>137、看下列代码输出什么？<br>var foo = “11”+2-“1”;</p>\n<p>console.log(foo);</p>\n<p>console.log(typeof foo);<br>执行完后foo的值为111，foo的类型为Number。<br>138、看下列代码,输出什么？<br>var a = new Object();<br>a.value = 1;<br>b = a;<br>b.value = 2;<br>alert(a.value);<br>执行完后输出结果为2<br>139、已知数组var stringArray = [“This”, “is”, “Baidu”, “Campus”]，Alert出”This is Baidu Campus”。<br>答案：alert(stringArray.join(“”))</p>\n<p>140、已知有字符串foo=”get-element-by-id”,写一个function将其转化成驼峰表示法”getElementById”。<br>答案：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">function combo(msg)&#123;</div><div class=\"line\"></div><div class=\"line\">  var arr = msg.split(&quot;-&quot;);</div><div class=\"line\"></div><div class=\"line\">  var len = arr.length;  //将arr.length存储在一个局部变量可以提高for循环效率</div><div class=\"line\"></div><div class=\"line\">  for(var i=1;i&lt;len;i++)&#123;</div><div class=\"line\"></div><div class=\"line\">    arr[i]=arr[i].charAt(0).toUpperCase()+arr[i].substr(1,arr[i].length-1);</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  msg=arr.join(&quot;&quot;);</div><div class=\"line\"></div><div class=\"line\">  return msg;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>141、怎样添加、移除、移动、复制、创建和查找节点<br>　　1）创建新节点</p>\n<p>createDocumentFragment() //创建一个DOM片段<br>createElement() //创建一个具体的元素<br>createTextNode() //创建一个文本节点</p>\n<p>2）添加、移除、替换、插入<br>appendChild() //添加<br>removeChild() //移除<br>replaceChild() //替换<br>insertBefore() //插入</p>\n<p>3）查找<br>getElementsByTagName() //通过标签名称<br>getElementsByName() //通过元素的Name属性的值<br>getElementById() //通过元素Id，唯一性</p>\n<p>142、原生JS的window.onload与Jquery的$(document).ready(function(){})有什么不同？<br>　　window.onload()方法是必须等到页面内包括图片的所有元素加载完毕后才能执行。</p>\n<p>$(document).ready()是DOM结构绘制完毕后就执行，不必等到加载完毕。</p>\n<p>143、你如何优化自己的代码？<br>代码重用</p>\n<p>避免全局变量（命名空间，封闭空间，模块化mvc..）</p>\n<p>拆分函数避免函数过于臃肿</p>\n<p>注释</p>\n<p>144、请描述出下列代码运行的结果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">function d()&#123;</div><div class=\"line\"></div><div class=\"line\">        console.log(this);</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">d();</div></pre></td></tr></table></figure></p>\n<p>145、需要将变量e的值修改为“a+b+c+d”,请写出对应的代码<br>var e=”abcd”;</p>\n<p>设计一段代码能够遍历下列整个DOM节点<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div&gt;</div><div class=\"line\"></div><div class=\"line\">        &lt;p&gt;</div><div class=\"line\"></div><div class=\"line\">            &lt;span&gt;&lt;a/&gt;&lt;/span&gt;</div><div class=\"line\"></div><div class=\"line\">            &lt;span&gt;&lt;a/&gt;&lt;/span&gt;</div><div class=\"line\"></div><div class=\"line\">        &lt;/p&gt;</div><div class=\"line\"></div><div class=\"line\">        &lt;ul&gt;</div><div class=\"line\"></div><div class=\"line\">            &lt;li&gt;&lt;/li&gt;</div><div class=\"line\"></div><div class=\"line\">            &lt;li&gt;&lt;/li&gt;</div><div class=\"line\"></div><div class=\"line\">        &lt;/ul&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>146、怎样实现两栏等高？<br>147、使用js实现这样的效果：在文本域里输入文字时，当按下enter键时不换行，而是替换成“”,(只需要考虑在行尾按下enter键的情况).<br>148、以下代码中end字符串什么时候输出<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">var t=true;</div><div class=\"line\"></div><div class=\"line\">setTimeout(function()&#123;</div><div class=\"line\"></div><div class=\"line\">    console.log(123);</div><div class=\"line\"></div><div class=\"line\">    t=false;</div><div class=\"line\"></div><div class=\"line\">    &#125;,1000);</div><div class=\"line\"></div><div class=\"line\">while(t)&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">console.log(‘end’);</div></pre></td></tr></table></figure></p>\n<p>149、specify(‘hello,world’)//=&gt;’h,e,l,l,o,w,o,r,l,d’实现specify函数<br>150、请将一个URL的search部分参数与值转换成一个json对象<br>151、请用原生js实现jquery的get\\post功能，以及跨域情况下<br>152、请简要描述web前端性能需要考虑哪方面，你的优化思路是什么？<br>153、简述readyonly与disabled的区别<br>154、判断一个字符吕串出现次数最多的字符，统计这个次数并输出<br>155、编写一个方法，去掉一个数组的复重元素<br>156、写出3个使用this的典型应用<br>157、请尽可能详尽的解释ajax的工作原理<br>158、为什么扩展javascript内置对象不是好的做法？<br>159、请解释一下javascript的同源策略<br>160、什么是三元表达式？“三元”表示什么意思？<br>161、浏览器标准模式和怪异模式之间的区别是什么？<br>162、如果设计中使用了非标准的字体，你该如何去实现？<br>163、用css分别实现某个div元素上下居中和左右居中<br>164、modulo(12,5)//2  实现满足这个结果的modulo函数<br>165、HTTP协议中，GET和POST有什么区别？分别适用什么场景 ？<br>166、HTTP状态消息200 302 304 403 404 500分别表示什么<br>167、HTTP协议中，header信息里面，怎么控制页面失效时间（last-modified,cache-control,Expires分别代表什么）<br>168、HTTP雷锋议目前常用的有哪几个？KEEPALIVE从哪个版本开始出现的？<br>169、业界常用的优化WEB页面加载速度的方法（可以分别从页面元素展现，请求连接，css,js,服务器等方面介绍）<br>170、列举常用的web页面开发，调试以及优化工具<br>171、解释什么是sql注入，xss漏洞<br>172、如何判断一个js变量是数组类型<br>173、请列举js数组类型中的常用方法<br>174、FF与IE中如何阻止事件冒泡，如何获取事件对象，以及如何获取触发事件的元素<br>175、列举常用的js框架以及分别适用的领域<br>176、js中如何实现一个map<br>177、js可否实现面向对象编程，如果可以如何实现js对象的继承<br>178、约瑟夫环—已知n个人（以编号1，2，3…分别表示）围坐在一张圆桌周围。从编号为k的人开始报数，数到m的那个人出列；他的下一个人又从1开始报数，数到m的那个人又出列；依此规律重复下去，直到圆桌周围的人全部出列。<br>179、有1到10w这个10w个数，去除2个并打乱次序，如何找出那两个数？<br>180、如何获取对象a拥有的所有属性（可枚举的、不可枚举的，不包括继承来的属性）<br>181、有下面这样一段HTML结构，使用css实现这样的效果：<br>左边容器无论宽度如何变动，右边容器都能自适应填满父容器剩余的宽度。</p>\n<div class=\"”warp”\"><br><br><div class=\"”left”\"></div>\n\n<div class=\"”right”\"></div>\n\n<p></p></div></html></p>\n<p>182、下面这段代码想要循环昝输出结果01234，请问输出结果是否正确，如果不正确，请说明为什么，并修改循环内的代码使其输出正确结果<br>for(var i=0;i&lt;5;++i){</p>\n<pre><code>setTimeout(function(){\n\n        console.log(i+’’);\n\n    },100*i);\n</code></pre><p>}</p>\n<p>183、解释下这个css选择器什么发生什么？<br>[role=nav]&gt;ul a:not([href^-mailto]){}</p>\n<p>184、JavaScript以下哪条语句会产生运行错误<br>A. var obj = ();    B. var obj = [];    C. var obj = {};    D. var obj = //;</p>\n<p>答案：AD</p>\n<p>185、以下哪些是javascript的全局函数：（ABC）<br>A. escape   函数可对字符串进行编码，这样就可以在所有的计算机上读取该字符串。ECMAScript v3 反对使用该方法，应用使用 decodeURI() 和 decodeURIComponent() 替代它。</p>\n<p>B. parseFloat   parseFloat() 函数可解析一个字符串，并返回一个浮点数。</p>\n<p>该函数指定字符串中的首个字符是否是数字。如果是，则对字符串进行解析，直到到达数字的末端为止，然后以数字返回该数字，而不是作为字符串。</p>\n<p>C. eval 函数可计算某个字符串，并执行其中的的 JavaScript 代码。</p>\n<p>D. setTimeout</p>\n<p>E. alert</p>\n<p>186、关于IE的window对象表述正确的有：（ACD）<br>A. window.opener属性本身就是指向window对象</p>\n<p>B. window.reload()方法可以用来刷新当前页面  应该是location.reload或者window.location.reload</p>\n<p>C. window.location=”a.html”和window.location.href=”a.html”的作用都是把当前页面替换成a.html页面</p>\n<p>D. 定义了全局变量g；可以用window.g的方式来存取该变量</p>\n<p>187、描述错误的是<br>A：Http状态码302表示暂时性转移 对</p>\n<p>B:domContentLoaded事件早于onload事件  onload 事件会在页面或图像加载完成后立即发生。</p>\n<p>C: IE678不支持事件捕获</p>\n<p>D:localStorage 存储的数据在电脑重启后丢失     没有时间限制</p>\n<p>try…catch 语句。(在 IE5+、Mozilla 1.0、和 Netscape 6 中可用)</p>\n<p>188、关于link和@import的区别正确的是  A<br>A: link属于XHTML标签，而@import是CSS提供的；</p>\n<p>B：页面被加载时，link会同时被加载，而后者引用的CSS会等到页面被加载完再加载</p>\n<p>C：import只在IE5以上才能识别 而link是XHTML标签，无兼容问题</p>\n<p>D: link方式的样式的权重高于@import的权重</p>\n<p>189、下面正确的是  A<br>A: 跨域问题能通过JsonP方案解决 B：不同子域名间仅能通过修改window.name解决跨域   还可以通过script标签src  jsonp等h5 Javasplit等</p>\n<p>C：只有在IE中可通过iframe嵌套跨域 D：MediaQuery属性是进行视频格式检测的属性是做响应式的</p>\n<p>188、错误的是<br>A: Ajax本质是XMLHttpRequest       </p>\n<p>B: 块元素实际占用的宽度与它的width、border、padding属性有关，与background无关</p>\n<p>C: position属性absolute、fixed、—relative—会使文档脱标</p>\n<p>D:  float属性left也会使div脱标</p>\n<p>189、不用任何插件，如何实现一个tab栏切换？<br>190、基本数据类型的专业术语以及单词拼写<br>191、变量的命名规范以及命名推荐<br>192、三种弹窗的单词以及三种弹窗的功能<br>193、console.log( 8 | 1 ); 输出值是多少？<br>答案：9</p>\n<p>194、只允许使用 + - <em> / 和 Math.</em> ，求一个函数 y = f(x, a, b);当x &gt; 100 时返回 a 的值，否则返回 b 的值，不能使用 if else 等条件语句，也不能使用|,?:,数组。<br>答案：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">function f(x, a, b) &#123;</div><div class=\"line\"></div><div class=\"line\">    var temp = Math.ceil(Math.min(Math.max(x - 100, 0), 1));</div><div class=\"line\"></div><div class=\"line\">    return a * temp + b * (1 - temp);</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">console.log(f(-10, 1, 2));</div></pre></td></tr></table></figure></p>\n<p>195、JavaScriptalert(0.4*0.2);结果是多少？和你预期的一样吗？如果不一样该如何处理？<br>    有误差，应该比准确结果偏大。 一般我会将小数变为整数来处理。当前之前遇到这个问题时也上网查询发现有人用try catch return写了一个函数，</p>\n<pre><code>当然原理也是一致先转为整数再计算。看起来挺麻烦的，我没用过。\n</code></pre><p>196、一个div，有几种方式得到这个div的jQuery对象？<div class=\"aabbcc\" id=\"nodesView\"></div>想直接获取这个div的dom对象，如何获取？dom对象如何转化为jQuery对象？<br>197、主流浏览器内核<br>IE trident  火狐gecko   谷歌苹果webkit  Opera：Presto</p>\n<p>198、如何显示/隐藏一个dom元素？请用原生的JavaScript方法实现<br>199、JavaScript有哪几种数据类型<br>    Number String Boolean Null Undefined Object</p>\n<p>200、jQuery框架中$.ajax()的常用参数有哪些？写一个post请求并带有发送数据和返回数据的样例<br>201、JavaScript数组元素添加、删除、排序等方法有哪些？<br>Array.concat( ) 连接数组</p>\n<p>Array.join( ) 将数组元素连接起来以构建一个字符串</p>\n<p>Array.length 数组的大小</p>\n<p>Array.pop( ) 删除并返回数组的最后一个元素</p>\n<p>Array.push( ) 给数组添加元素</p>\n<p>Array.reverse( ) 颠倒数组中元素的顺序</p>\n<p>Array.shift( ) 将元素移出数组</p>\n<p>Array.slice( ) 返回数组的一部分</p>\n<p>Array.sort( ) 对数组元素进行排序</p>\n<p>Array.splice( ) 插入、删除或替换数组的元素</p>\n<p>Array.toLocaleString( ) 把数组转换成局部字符串</p>\n<p>Array.toString( ) 将数组转换成一个字符串</p>\n<p>Array.unshift( ) 在数组头部插入一个元素</p>\n<p>202、如何添加html元素的事件，有几种方法？请列举<br>直接在标签里添加；在元素上添加、使用事件注册函数添加</p>\n<p>203、JavaScript的循环语句有哪些？<br>while  for  do while  forEach</p>\n<p>204、作用域-编译期执行期以及全局局部作用域问题<br>理解js执行主要的两个阶段：预解析和执行期</p>\n<p>205、闭包：下面这个ul，如何点击每一列的时候alert其index？<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;ul id=&quot;test&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;li&gt;这是第一条&lt;/li&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;li&gt;这是第二条&lt;/li&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;li&gt;这是第三条&lt;/li&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/ul&gt;</div></pre></td></tr></table></figure></p>\n<p>206、列出3条以上ff和IE的脚本兼容问题<br>1、在IE下可通过document.frames[“id”];得到该IFRAME对象，</p>\n<p>而在火狐下则是通过document.getElementById(“content_panel_if”).contentWindow;</p>\n<p>2、IE的写法： `_tbody=_table.childNodes[0]``</p>\n<p>在FF中，firefox会在子节点中包含空白则第一个子节点为空白””， 而ie不会返回空白</p>\n<p>可以通过if(“” != node.nodeName)过滤掉空白子对象</p>\n<p>3、模拟点击事件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">if(document.all)&#123;  //ie下</div><div class=\"line\"></div><div class=\"line\">    document.getElementById(&quot;a3&quot;).click();  </div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">else&#123;  //非IE</div><div class=\"line\"></div><div class=\"line\">    var evt = document.createEvent(&quot;MouseEvents&quot;);</div><div class=\"line\"></div><div class=\"line\">    evt.initEvent(&quot;click&quot;, true, true);</div><div class=\"line\"></div><div class=\"line\">    document.getElementById(&quot;a3&quot;).dispatchEvent(evt);</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>4、事件注册</p>\n<p>if (isIE){window.attachEvent(“onload”, init);}else{window.addEventListener(“load”, init, false);}</p>\n<p>207、列举可以哪些方面对前端开发进行优化<br>代码压缩、合并减少http请求，图片制作精灵图、代码优化</p>\n<p>208、至少列出一种JavaScript继承的实现方式<br>209、如现在有一个效果，有显示用户头像、用户昵称、用户其他信息；当用户鼠标移到头像上时，会弹出用户的所有信息；如果是你，你会如何实现这个功能，请用代码实现？<br>210、call与apply有什么作用？又有什么什么区别？用callee属性实现函数递归？<br>apply的参数是数组,call的参数是单个的值，除此之外，两者没有差别，重点理解this的改变，callee已经不推荐使用</p>\n<p>211、用正则表达式，写出由字母开头，其余由数字、字母、下划线组成的6~30的字符串？<br>212、列举浏览器对象模型BOM里常用的至少4个对象，并列举window对象的常用方法至少5个 （10分）<br>对象：Window document location screen history navigator</p>\n<p>方法：Alert() confirm() prompt() open() close()</p>\n<p>213、Javascript中callee和caller的作用？<br>caller是返回一个对函数的引用，该函数调用了当前函数；</p>\n<p>callee是返回正在被执行的function函数，也就是所指定的function对象的正文。</p>\n<p>214、对于apply和call两者在作用上是相同的，即是调用一个对象的一个方法，以另一个对象替换当前对象。将一个函数的对象上下文从初始的上下文改变为由 thisObj 指定的新对象。<br>但两者在参数上有区别的。对于第一个参数意义都一样，但对第二个参数：?apply传入的是一个参数数组，也就是将多个参数组合成为一个数组传入，而call则作为call的参数传入（从第二个参数开始）。?如 func.call(func1,var1,var2,var3)对应的apply写法为：func.apply(func1,[var1,var2,var3]) 。</p>\n<p>215、在Javascript中什么是伪数组？如何将伪数组转化为标准数组？<br>伪数组（类数组）：无法直接调用数组方法或期望length属性有什么特殊的行为，但仍可以对真正数组遍历方法来遍历它们。典型的是函数的argument参数，还有像调用getElementsByTagName,document.childNodes之类的,它们都返回NodeList对象都属于伪数组。可以使用Array.prototype.slice.call(fakeArray)将数组转化为真正的Array对象。</p>\n<p>216、写一个函数可以计算 sum(5,0,-5);输出0; sum(1,2,3,4);输出10;<br>Js基本功</p>\n<p>217、事件代理怎么实现？<br>在元素的父节点注册事件，通过事件冒泡，在父节点捕获事件</p>\n<p>218、《正则》写出正确的正则表达式匹配固话号，区号3-4位，第一位为0，中横线，7-8位数字，中横线，3-4位分机号格式的固话号<br>常用正则表达式语法要熟悉</p>\n<p>219、《算法》 一下A,B可任选一题作答，两题全答加分<br>A:农场买了一只羊，第一年是小羊，第二年底生一只，第三年不生，第四年底再生一只，第五年死掉。</p>\n<p>B:写出代码对下列数组去重并从大到小排列{5,2,3,6,8,6,5,4,7,1,9}</p>\n<p>220、请写出一张图片的HTML代码，已知道图片地址为“images/abc.jpg”,宽100px，高50px<br>221、请写一个正则表达式：要求最短6位数，最长20位，阿拉伯数和英文字母（不区分大小写）组成<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[a-zA-Z\\d]&#123;6,20&#125;$</div></pre></td></tr></table></figure></p>\n<p>222、统计1到400亿之间的自然数中含有多少个1？比如1-21中，有1、10、11、21这四个自然数有5个1<br>223、删除与某个字符相邻且相同的字符，比如fdaffdaaklfjklja字符串处理之后成为“fdafdaklfjklja”<br>224、请写出三种以上的Firefox有但InternetExplorer没有的属性和函数<br>1、在IE下可通过document.frames[“id”];得到该IFRAME对象，</p>\n<p>而在火狐下则是通过document.getElementById(“content_panel_if”).contentWindow;</p>\n<p>2、IE的写法： `_tbody=_table.childNodes[0]``</p>\n<p>在FF中，firefox会在子节点中包含空白则第一个子节点为空白””， 而ie不会返回空白</p>\n<p>可以通过if(“” != node.nodeName)过滤掉空白子对象</p>\n<p>3、模拟点击事件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">if(document.all)&#123;  //ie下</div><div class=\"line\"></div><div class=\"line\">    document.getElementById(&quot;a3&quot;).click();</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">else&#123;  //非IE</div><div class=\"line\"></div><div class=\"line\">    var evt = document.createEvent(&quot;MouseEvents&quot;);</div><div class=\"line\"></div><div class=\"line\">    evt.initEvent(&quot;click&quot;, true, true);</div><div class=\"line\"></div><div class=\"line\">    document.getElementById(&quot;a3&quot;).dispatchEvent(evt);</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>4、事件注册</p>\n<p>if (isIE){window.attachEvent(“onload”, init);}else{window.addEventListener(“load”, init, false);}</p>\n<p>225、请写出一个程序，在页面加载完成后动态创建一个form表单，并在里面添加一个input对象并给它任意赋值后义post方式提交到：<a href=\"http://127.0.0.1/save.php\" target=\"_blank\" rel=\"external\">http://127.0.0.1/save.php</a></p>\n<p>226、用JavaScript实现冒泡排序。数据为23、45、18、37、92、13、24<br>面试经常遇到的排序，查找算法要熟悉</p>\n<p>227、解释一下什么叫闭包，并实现一段闭包代码<br>简单理解就是函数的嵌套形成闭包，闭包包括函数本身及其外部作用域</p>\n<p>228、简述一下什么叫事件委托以及其原理<br>在元素的父节点注册事件，通过事件冒泡，在父节点捕获事件</p>\n<p>229、前端代码优化的方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">var User = &#123; 对象</div><div class=\"line\"></div><div class=\"line\">    count = 1，属性</div><div class=\"line\"></div><div class=\"line\">    getCount：function（）&#123; 方法</div><div class=\"line\"></div><div class=\"line\">        return this.count;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">console.log(User.getCount());</div><div class=\"line\"></div><div class=\"line\">var func = User.getCount;</div><div class=\"line\"></div><div class=\"line\">console.log(func());</div><div class=\"line\"></div><div class=\"line\">1 undefined（window）;</div></pre></td></tr></table></figure></p>\n<p>230、下列JavaScript代码执行后，依次alert的结果是<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">(function test()&#123;</div><div class=\"line\"></div><div class=\"line\">      var a=b=5;</div><div class=\"line\"></div><div class=\"line\">      alert(typeof a);</div><div class=\"line\"></div><div class=\"line\">      alert(typeof b);</div><div class=\"line\"></div><div class=\"line\">&#125;)();</div><div class=\"line\"></div><div class=\"line\">alert(typeof a);</div><div class=\"line\"></div><div class=\"line\">alert(typeof b);</div></pre></td></tr></table></figure></p>\n<p>231、下列JavaScript代码执行后，iNum的值是<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">var iNum = 0;</div><div class=\"line\"></div><div class=\"line\">for(var i = 1; i&lt; 10; i++)&#123;</div><div class=\"line\"></div><div class=\"line\">     if(i % 5 == 0)&#123;</div><div class=\"line\"></div><div class=\"line\">         continue;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    iNum++;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>232、输出结果是多少？<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"> 1）  var a;</div><div class=\"line\"></div><div class=\"line\">var b = a * 0;</div><div class=\"line\"></div><div class=\"line\">if (b == b) &#123;</div><div class=\"line\"></div><div class=\"line\">     console.log(b * 2 + &quot;2&quot; - 0 + 4);</div><div class=\"line\"></div><div class=\"line\">&#125; else &#123;</div><div class=\"line\"></div><div class=\"line\">     console.log(!b * 2 + &quot;2&quot; - 0 + 4);</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>答案：26</p>\n<p>2）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script&gt;</div><div class=\"line\"></div><div class=\"line\">     var a = 1;</div><div class=\"line\"></div><div class=\"line\">&lt;/script&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;script&gt;</div><div class=\"line\"></div><div class=\"line\">var a;</div><div class=\"line\"></div><div class=\"line\">var b = a * 0;</div><div class=\"line\"></div><div class=\"line\">if (b == b) &#123;</div><div class=\"line\"></div><div class=\"line\">        console.log(b * 2 + &quot;2&quot; - 0 + 4);</div><div class=\"line\"></div><div class=\"line\">&#125; else &#123;</div><div class=\"line\"></div><div class=\"line\">        console.log(!b * 2 + &quot;2&quot; - 0 + 4);</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure></p>\n<p>答案：6</p>\n<p>3）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"> var t = 10;</div><div class=\"line\"></div><div class=\"line\">function test(t)&#123;</div><div class=\"line\"></div><div class=\"line\">       var t = t++;</div><div class=\"line\"></div><div class=\"line\">&#125;test(t);</div><div class=\"line\"></div><div class=\"line\">console.log(t);</div></pre></td></tr></table></figure></p>\n<p>答案：10</p>\n<p>4）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">var t = 10;</div><div class=\"line\"></div><div class=\"line\">function test(test)&#123;</div><div class=\"line\"></div><div class=\"line\">      var t = test++;</div><div class=\"line\"></div><div class=\"line\">&#125;test(t);</div><div class=\"line\"></div><div class=\"line\">console.log(t);</div><div class=\"line\"></div><div class=\"line\">答案：10</div></pre></td></tr></table></figure></p>\n<p>6）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">var t = 10;</div><div class=\"line\"></div><div class=\"line\">function test(test)&#123;</div><div class=\"line\"></div><div class=\"line\">       t = test++;</div><div class=\"line\"></div><div class=\"line\">&#125;test(t);</div><div class=\"line\"></div><div class=\"line\">console.log(t);</div><div class=\"line\"></div><div class=\"line\">答案：10</div></pre></td></tr></table></figure></p>\n<p>7） var t = 10;<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">function test(test)&#123;</div><div class=\"line\"></div><div class=\"line\">      t = t + test;</div><div class=\"line\"></div><div class=\"line\">      console.log(t);</div><div class=\"line\"></div><div class=\"line\">      var t = 3;</div><div class=\"line\"></div><div class=\"line\">&#125;test(t);</div><div class=\"line\"></div><div class=\"line\">console.log(t);</div></pre></td></tr></table></figure></p>\n<p>答案：NaN  10</p>\n<p>8）var a;<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">var b = a / 0;</div><div class=\"line\"></div><div class=\"line\">if (b == b) &#123;</div><div class=\"line\"></div><div class=\"line\">        console.log(b * 2 + &quot;2&quot; - 0 + 4);</div><div class=\"line\"></div><div class=\"line\">&#125; else &#123;</div><div class=\"line\"></div><div class=\"line\">        console.log(!b * 2 + &quot;2&quot; - 0 + 4);</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>答案：26<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">9）&lt;script&gt;</div><div class=\"line\"></div><div class=\"line\">      var a = 1;</div><div class=\"line\"></div><div class=\"line\">&lt;/script&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;script&gt;</div><div class=\"line\"></div><div class=\"line\">    var a;</div><div class=\"line\"></div><div class=\"line\">    var b = a / 0;</div><div class=\"line\"></div><div class=\"line\">    if (b == b) &#123;</div><div class=\"line\"></div><div class=\"line\">        console.log(b * 2 + &quot;2&quot; + 4);</div><div class=\"line\"></div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\"></div><div class=\"line\">        console.log(!b * 2 + &quot;2&quot; + 4);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&lt;/script&gt;</div><div class=\"line\"></div><div class=\"line\">答案：Infinity24</div></pre></td></tr></table></figure></p>\n<p>233、<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;body&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;form id=&apos;form1&apos;&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;div id=&apos;div1&apos;&gt;&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;div id=&apos;div2&apos;&gt;&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;div id=&apos;div3&apos;&gt;&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;div id=&apos;div4&apos;&gt;&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;div id=&apos;div5&apos;&gt;&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;div id=&apos;div3&apos;&gt;id名重复的元素&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/form&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/body&gt;</div></pre></td></tr></table></figure></p>\n<p>用程序实现找到html中id名相同的元素？</p>\n<p>234、下列JavaScript代码执行后，运行的结果是<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;button id=&apos;btn&apos;&gt;点击我&lt;/button&gt;</div><div class=\"line\"></div><div class=\"line\">var btn = document.getElementById(&apos;btn&apos;);</div><div class=\"line\"></div><div class=\"line\">var handler = &#123;</div><div class=\"line\"></div><div class=\"line\">    id: &apos;_eventHandler&apos;,</div><div class=\"line\"></div><div class=\"line\">    exec: function()&#123;</div><div class=\"line\"></div><div class=\"line\">        alert(this.id);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">btn.addEventListener(&apos;click&apos;, handler.exec.false);</div></pre></td></tr></table></figure></p>\n<p>235、下列JavaScript代码执行后，依次alert的结果是<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">var obj = &#123;proto: &#123;a:1,b:2&#125;&#125;;</div><div class=\"line\"></div><div class=\"line\">function F()&#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">F.prototype = obj.proto;</div><div class=\"line\"></div><div class=\"line\">var f = new F();</div><div class=\"line\"></div><div class=\"line\">obj.proto.c = 3;</div><div class=\"line\"></div><div class=\"line\">obj.proto = &#123;a:-1, b:-2&#125;;</div><div class=\"line\"></div><div class=\"line\">alert(f.a);</div><div class=\"line\"></div><div class=\"line\">alert(f.c);</div><div class=\"line\"></div><div class=\"line\">delete F.prototype[&apos;a&apos;];</div><div class=\"line\"></div><div class=\"line\">alert(f.a);</div><div class=\"line\"></div><div class=\"line\">alert(obj.proto.a);</div></pre></td></tr></table></figure></p>\n<p>236、下列JavaScript代码执行后的效果是<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;ul id=&apos;list&apos;&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;li&gt;item&lt;/li&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;li&gt;item&lt;/li&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;li&gt;item&lt;/li&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;li&gt;item&lt;/li&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;li&gt;item&lt;/li&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/ul&gt;</div><div class=\"line\"></div><div class=\"line\">var items = document.querySelectorAll(&apos;#list&gt;li&apos;);</div><div class=\"line\"></div><div class=\"line\">for(var i = 0;i &lt; items.length; i++)&#123;</div><div class=\"line\"></div><div class=\"line\">     setTimeout(function()&#123;</div><div class=\"line\"></div><div class=\"line\">           items[i].style.backgroundColor = &apos;#fee&apos;;</div><div class=\"line\"></div><div class=\"line\">    &#125;, 5);</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>237、下列JavaScript代码执行后的li元素的数量是<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;ul&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;li&gt;Item&lt;/li&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;li&gt;&lt;/li&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;li&gt;&lt;/li&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;li&gt;Item&lt;/li&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;li&gt;Item&lt;/li&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/ul&gt;</div><div class=\"line\"></div><div class=\"line\">var items = document.getElementsByTagName(&apos;li&apos;);</div><div class=\"line\"></div><div class=\"line\">for(var i = 0; i&lt; items.length; i++)&#123;</div><div class=\"line\"></div><div class=\"line\">    if(items[i].innerHTML == &apos;&apos;)&#123;</div><div class=\"line\"></div><div class=\"line\">        items[i].parentNode.removeChild(items[i]);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>238、程序中捕获异常的方法？<br>window.error</p>\n<p>try{}catch(){}finally{}</p>\n<p>239、将字符串”<tr><td>{$id}</td><td>{$name}</td></tr>”中的{$id}替换成10，{$name}替换成Tony （使用正则表达式）<br>答案：”<tr><td>{$id}</td><td>{$id}_{$name}</td></tr>”.replace(/{\\$id}/g,?’10′).replace(/{\\$name}/g,?‘Tony’);</p>\n<p>240、给String对象添加一个方法，传入一个string类型的参数，然后将string的每个字符间价格空格返回，例如：<br>addSpace(“hello world”) // -&gt; ‘h e l l o ?w o r l d’</p>\n<pre><code>String.prototype.spacify = function(){\n</code></pre><p>return this.split(‘’).join(‘ ‘);</p>\n<p>};</p>\n<p>241、写出函数DateDemo的返回结果，系统时间假定为今天<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">function DateDemo()&#123;</div><div class=\"line\"></div><div class=\"line\"> var d, s=&quot;今天日期是：&quot;;</div><div class=\"line\"></div><div class=\"line\">d = new Date();</div><div class=\"line\"></div><div class=\"line\">s += d.getMonth() + &quot;/&quot;;</div><div class=\"line\"></div><div class=\"line\">s += d.getDate() + &quot;/&quot;;</div><div class=\"line\"></div><div class=\"line\">s += d.getYear();</div><div class=\"line\"></div><div class=\"line\"> return s;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">结果：今天日期是：7/17/2010</div></pre></td></tr></table></figure></p>\n<p>242、输出今天的日期，以YYYY-MM-DD的方式，比如今天是2014年9月26日，则输出2014-09-26<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">var d = new Date();</div><div class=\"line\"></div><div class=\"line\">// 获取年，getFullYear()返回4位的数字</div><div class=\"line\"></div><div class=\"line\">var year = d.getFullYear();</div><div class=\"line\"></div><div class=\"line\">// 获取月，月份比较特殊，0是1月，11是12月</div><div class=\"line\"></div><div class=\"line\">var month = d.getMonth() + 1;</div><div class=\"line\"></div><div class=\"line\">// 变成两位</div><div class=\"line\"></div><div class=\"line\">month = month &lt; 10 ? &apos;0&apos; + month : month;</div><div class=\"line\"></div><div class=\"line\">// 获取日</div><div class=\"line\"></div><div class=\"line\">var day = d.getDate();</div><div class=\"line\"></div><div class=\"line\">day = day &lt; 10 ? &apos;0&apos; + day : day;</div><div class=\"line\"></div><div class=\"line\">alert(year + &apos;-&apos; + month + &apos;-&apos; + day);</div></pre></td></tr></table></figure></p>\n<p>243、已知数组var?stringArray?=?[“This”,?“is”,?“Baidu”,?“Campus”]，Alert出”This?is?Baidu?Campus”。<br>答案：alert(stringArray.join(“”))</p>\n<p>244、已知有字符串foo=”get-element-by-id”,写一个function将其转化成驼峰表示法”getElementById”。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">function combo(msg)&#123;</div><div class=\"line\"></div><div class=\"line\">var arr=msg.split(&quot;-&quot;);</div><div class=\"line\"></div><div class=\"line\">for(var i=1;i&lt;arr.length;i++)&#123;</div><div class=\"line\"></div><div class=\"line\">arr[i]=arr[i].charAt(0).toUpperCase()+arr[i].substr(1,arr[i].length-1);</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">msg=arr.join(&quot;&quot;);</div><div class=\"line\"></div><div class=\"line\">return msg;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>245、.varnumberArray=[3,6,2,4,1,5]; （考察基础API）<br>1)实现对该数组的倒排，输出[5,1,4,2,6,3]</p>\n<p>2)实现对该数组的降序排列，输出[6,5,4,3,2,1]<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">function combo(msg)&#123;</div><div class=\"line\"></div><div class=\"line\">var arr=msg.split(&quot;-&quot;);</div><div class=\"line\"></div><div class=\"line\">for(var i=1;i&lt;arr.length;i++)&#123;</div><div class=\"line\"></div><div class=\"line\">arr[i]=arr[i].charAt(0).toUpperCase()+arr[i].substr(1,arr[i].length-1);</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">msg=arr.join(&quot;&quot;);</div><div class=\"line\"></div><div class=\"line\">return msg;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>246、把两个数组合并，并删除第二个元素。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">var array1 = [&apos;a&apos;,&apos;b&apos;,&apos;c&apos;];</div><div class=\"line\"></div><div class=\"line\">var bArray = [&apos;d&apos;,&apos;e&apos;,&apos;f&apos;];</div><div class=\"line\"></div><div class=\"line\">var cArray = array1</div></pre></td></tr></table></figure></p>\n<p>247、如何消除一个数组里面重复的元素？<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">var arr=[1,2,3,3,4,4,5,5,6,1,9,3,25,4];</div><div class=\"line\"></div><div class=\"line\">function deRepeat()&#123;</div><div class=\"line\"></div><div class=\"line\">var newArr=[];</div><div class=\"line\"></div><div class=\"line\">var obj=&#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">var index=0;</div><div class=\"line\"></div><div class=\"line\">var l=arr.length;</div><div class=\"line\"></div><div class=\"line\">for(var i=0;i&lt;l;i++)&#123;</div><div class=\"line\"></div><div class=\"line\">if(obj[arr[i]]==undefined)</div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\">obj[arr[i]]=1;</div><div class=\"line\"></div><div class=\"line\">newArr[index++]=arr[i];</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">else if(obj[arr[i]]==1)</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">return newArr;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var newArr2=deRepeat(arr);</div><div class=\"line\"></div><div class=\"line\">alert(newArr2); //输出1,2,3,4,5,6,9,25</div></pre></td></tr></table></figure></p>\n<p>248、用js实现随机选取10–100之间的10个数字，存入一个数组，并排序。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">var iArray = [];</div><div class=\"line\"></div><div class=\"line\">funtion getRandom(istart, iend)&#123;</div><div class=\"line\"></div><div class=\"line\">var iChoice = istart - iend +1;</div><div class=\"line\"></div><div class=\"line\">return Math.floor(Math.random() * iChoice + istart;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">for(var i=0; i&lt;10; i++)&#123;</div><div class=\"line\"></div><div class=\"line\">iArray.push(getRandom(10,100));</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">iArray.sort();</div></pre></td></tr></table></figure></p>\n<p>249、正则表达式构造函数var reg=new RegExp(“xxx”)与正则表达字面量var reg=//有什么不同？匹配邮箱的正则表达式？<br>答案：当使用RegExp()构造函数的时候，不仅需要转义引号（即\\”表示”），并且还需要双反斜杠（即\\表示一个\\）。使用正则表达字面量的效率更高。?</p>\n<p>250、1 var regMail = /^([a-zA-Z0-9<em>-])+@([a-zA-Z0-9</em>-])+((.[a-zA-Z0-9_-]{2,3}){1,2})$/;<br>正则表达式对象3 – 清除空格</p>\n<p>写一个function，清除字符串前后的空格。（兼容所有浏览器）</p>\n<p>使用自带接口trim()，考虑兼容性：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">if (!String.prototype.trim) &#123;</div><div class=\"line\"></div><div class=\"line\">String.prototype.trim = function() &#123;</div><div class=\"line\"></div><div class=\"line\">return this.replace(/^\\s+/, &quot;&quot;).replace(/\\s+$/,&quot;&quot;);</div><div class=\"line\"></div><div class=\"line\">&#125; &#125;</div><div class=\"line\"></div><div class=\"line\">// test the function</div><div class=\"line\"></div><div class=\"line\">var str = &quot; \\t\\n test string &quot;.trim();</div><div class=\"line\"></div><div class=\"line\">alert(str == &quot;test string&quot;); // alerts &quot;true&quot;</div></pre></td></tr></table></figure></p>\n<p>251、数组和字符串<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script lang=&quot;JavaScript&quot; type=&quot;text/javascript&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">    function outPut(s) &#123;</div><div class=\"line\"></div><div class=\"line\">        document.writeln(s);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    var a = &quot;lashou&quot;;</div><div class=\"line\"></div><div class=\"line\">    var b = a;</div><div class=\"line\"></div><div class=\"line\">    outPut(b);</div><div class=\"line\"></div><div class=\"line\">    a = &quot;拉手&quot;;</div><div class=\"line\"></div><div class=\"line\">    outPut(a);</div><div class=\"line\"></div><div class=\"line\">    outPut(b);</div><div class=\"line\"></div><div class=\"line\">    var a_array = [1, 2, 3];</div><div class=\"line\"></div><div class=\"line\">    var b_array = a_array;</div><div class=\"line\"></div><div class=\"line\">    outPut(b_array);</div><div class=\"line\"></div><div class=\"line\">    a_array[3] = 4;</div><div class=\"line\"></div><div class=\"line\">    outPut(a_array);</div><div class=\"line\"></div><div class=\"line\">    outPut(b_array);</div><div class=\"line\"></div><div class=\"line\">&lt;/script&gt;</div><div class=\"line\"></div><div class=\"line\">输出结果：</div><div class=\"line\"></div><div class=\"line\">答案：lashou 拉手 lashou 1,2,3 1,2,3,4 1,2,3,4</div></pre></td></tr></table></figure></p>\n<p>252、下列控制台都输出什么<br>第1题：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">function setName()&#123;</div><div class=\"line\"></div><div class=\"line\">    name=&quot;张三&quot;;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">setName();</div><div class=\"line\"></div><div class=\"line\">console.log(name);</div><div class=\"line\"></div><div class=\"line\">答案：&quot;张三&quot;</div></pre></td></tr></table></figure></p>\n<p>253、第2题：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">//考点：1、变量声明提升 2、变量搜索机制</div><div class=\"line\"></div><div class=\"line\">var a=1;</div><div class=\"line\"></div><div class=\"line\">function test()&#123;</div><div class=\"line\"></div><div class=\"line\">    console.log(a);</div><div class=\"line\"></div><div class=\"line\">    var a=1;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">test();</div><div class=\"line\"></div><div class=\"line\">答案：undefined</div></pre></td></tr></table></figure></p>\n<p>254、第3题：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">var b=2;</div><div class=\"line\"></div><div class=\"line\">function test2()&#123;</div><div class=\"line\"></div><div class=\"line\">    window.b=3;</div><div class=\"line\"></div><div class=\"line\">    console.log(b);</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">test2();</div><div class=\"line\"></div><div class=\"line\">答案：3</div></pre></td></tr></table></figure></p>\n<p>255、第4题：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">c=5;//声明一个全局变量c</div><div class=\"line\"></div><div class=\"line\">function test3()&#123;</div><div class=\"line\"></div><div class=\"line\">    window.c=3;</div><div class=\"line\"></div><div class=\"line\">    console.log(c);     //答案：undefined，原因：由于此时的c是一个局部变量c，并且没有被赋值</div><div class=\"line\"></div><div class=\"line\">    var c;</div><div class=\"line\"></div><div class=\"line\">    console.log(window.c);//答案：3，原因：这里的c就是一个全局变量c</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">test3();</div></pre></td></tr></table></figure></p>\n<p>256、第5题：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">var arr = [];</div><div class=\"line\"></div><div class=\"line\">arr[0]  = &apos;a&apos;;</div><div class=\"line\"></div><div class=\"line\">arr[1]  = &apos;b&apos;;</div><div class=\"line\"></div><div class=\"line\">arr[10] = &apos;c&apos;;</div><div class=\"line\"></div><div class=\"line\">alert(arr.length);  //答案：11</div><div class=\"line\"></div><div class=\"line\">console.log(arr[5]);    //答案：undefined</div></pre></td></tr></table></figure></p>\n<p>257、第6题：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">var a=1;</div><div class=\"line\"></div><div class=\"line\">console.log(a++);       //答案：1</div><div class=\"line\"></div><div class=\"line\">console.log(++a);       //答案：3</div><div class=\"line\"></div><div class=\"line\">258、第7题：</div><div class=\"line\">console.log(null==undefined);   //答案：true</div><div class=\"line\"></div><div class=\"line\">console.log(&quot;1&quot;==1);        //答案：true，因为会将数字1先转换为字符串1</div><div class=\"line\"></div><div class=\"line\">console.log(&quot;1&quot;===1);       //答案：false，因为数据类型不一致</div></pre></td></tr></table></figure></p>\n<p>259、第8题：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">typeof 1;       &quot;number&quot;</div><div class=\"line\"></div><div class=\"line\">typeof &quot;hello&quot;;     &quot;string&quot;</div><div class=\"line\"></div><div class=\"line\">typeof /[0-9]/;     &quot;object&quot;</div><div class=\"line\"></div><div class=\"line\">typeof &#123;&#125;;      &quot;object&quot;</div><div class=\"line\"></div><div class=\"line\">typeof null;        &quot;object&quot;</div><div class=\"line\"></div><div class=\"line\">typeof undefined;   &quot;undefined&quot;</div><div class=\"line\"></div><div class=\"line\">typeof [1,2,3];     &quot;object&quot;</div><div class=\"line\"></div><div class=\"line\">typeof function()&#123;&#125;;    //&quot;function&quot;</div></pre></td></tr></table></figure></p>\n<p>260、第9题：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">parseInt(3.14);         //3</div><div class=\"line\"></div><div class=\"line\">parseFloat(&quot;3asdf&quot;);        //3</div><div class=\"line\"></div><div class=\"line\">parseInt(&quot;1.23abc456&quot;);</div><div class=\"line\"></div><div class=\"line\">parseInt(true);//&quot;true&quot; NaN</div></pre></td></tr></table></figure></p>\n<p>261、第10题：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">//考点：函数声明提前</div><div class=\"line\"></div><div class=\"line\">function bar() &#123;</div><div class=\"line\"></div><div class=\"line\">    return foo;</div><div class=\"line\"></div><div class=\"line\">    foo = 10;</div><div class=\"line\"></div><div class=\"line\">    function foo() &#123;&#125;</div><div class=\"line\"></div><div class=\"line\">    //var foo = 11;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">alert(typeof bar());//&quot;function&quot;</div></pre></td></tr></table></figure></p>\n<p>262、第11题：考点：函数声明提前<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">var foo = 1;</div><div class=\"line\"></div><div class=\"line\">function bar() &#123;</div><div class=\"line\"></div><div class=\"line\">    foo = 10;</div><div class=\"line\"></div><div class=\"line\">    return;</div><div class=\"line\"></div><div class=\"line\">    function foo() &#123;&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">bar();</div><div class=\"line\"></div><div class=\"line\">alert(foo);//答案：1</div></pre></td></tr></table></figure></p>\n<p>263、第12题：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">console.log(a);//是一个函数</div><div class=\"line\"></div><div class=\"line\">var a = 3;</div><div class=\"line\"></div><div class=\"line\">function a()&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">console.log(a);////3</div></pre></td></tr></table></figure></p>\n<p>264、第13题：<br>//考点：对arguments的操作</p>\n<p>function foo(a) {</p>\n<pre><code>arguments[0] = 2;\n\nalert(a);//答案：2，因为：a、arguments是对实参的访问，b、通过arguments[i]可以修改指定实参的值\n</code></pre><p>}</p>\n<p>foo(1);</p>\n<p>265、第14题：<br>function foo(a) {</p>\n<pre><code>alert(arguments.length);//答案：3，因为arguments是对实参的访问\n</code></pre><p>}</p>\n<p>foo(1, 2, 3);</p>\n<p>266、第15题<br>bar();//报错</p>\n<p>var foo = function bar(name) {</p>\n<pre><code>console.log(&quot;hello&quot;+name);\n\nconsole.log(bar);\n</code></pre><p>};</p>\n<p>//alert(typeof bar);</p>\n<p>foo(“world”);//“hello”</p>\n<p>console.log(bar);//undefined</p>\n<p>console.log(foo.toString());</p>\n<p>bar();//报错</p>\n<p>267、第16题<br>function test(){</p>\n<pre><code>console.log(&quot;test函数&quot;);\n</code></pre><p>}</p>\n<p>setTimeout(function(){</p>\n<pre><code>console.log(&quot;定时器回调函数&quot;);\n</code></pre><p>}, 0)</p>\n<p>test();</p>\n<p>function foo(){</p>\n<pre><code>var name=&quot;hello&quot;;\n</code></pre><p>}</p>\n<p>三、Jquery<br>1、jQuery 的 slideUp动画 ，如果目标元素是被外部事件驱动, 当鼠标快速地连续触发外部元素事件, 动画会滞后的反复执行，该如何处理呢?</p>\n<p>四、HTML5 CSS3<br>1、CSS3有哪些新特性？</p>\n<pre><code>1. CSS3实现圆角（border-radius），阴影（box-shadow），\n\n2. 对文字加特效（text-shadow、），线性渐变（gradient），旋转（transform）\n\n3.transform:rotate(9deg) scale(0.85,0.90) translate(0px,-30px) skew(-9deg,0deg);// 旋转,缩放,定位,倾斜\n\n4. 增加了更多的CSS选择器  多背景 rgba\n\n5. 在CSS3中唯一引入的伪元素是 ::selection.\n\n6. 媒体查询，多栏布局\n\n7. border-image\n</code></pre><p>2、html5有哪些新特性、移除了那些元素？如何处理HTML5新标签的浏览器兼容问题？如何区分 HTML 和 HTML5？<br>新特性：</p>\n<pre><code>1. 拖拽释放(Drag and drop) API\n\n2. 语义化更好的内容标签（header,nav,footer,aside,article,section）\n\n3. 音频、视频API(audio,video)\n\n4. 画布(Canvas) API\n\n5. 地理(Geolocation) API\n\n6. 本地离线存储 localStorage 长期存储数据，浏览器关闭后数据不丢失；\n\n7. sessionStorage 的数据在浏览器关闭后自动删除\n\n8. 表单控件，calendar、date、time、email、url、search\n\n9. 新的技术webworker, websocket, Geolocation\n</code></pre><p>移除的元素：</p>\n<pre><code>1. 纯表现的元素：basefont，big，center，font, s，strike，tt，u；\n\n2. 对可用性产生负面影响的元素：frame，frameset，noframes；\n</code></pre><p>支持HTML5新标签：</p>\n<ol>\n<li>IE8/IE7/IE6支持通过 document.createElement 方法产生的标签，可以利用这一特性让这些浏览器支持 Html5 新标签，浏览器支持新标签后，还需要添加标签默认的样式（当然最好的方式是直接使用成熟的框架、使用最多的是html5shim框架）：</li>\n</ol>\n<!--[if lt IE 9]>\n\n<script> src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"</script>\n\n<![endif]-->\n<p>如何区分：</p>\n<p>DOCTYPE声明新增的结构元素、功能元素</p>\n<p>3、本地存储（Local Storage ）和cookies（储存在用户本地终端上的数据）之间的区别是什么？<br>Cookies:服务器和客户端都可以访问；大小只有4KB左右；有有效期，过期后将会删除；</p>\n<p>本地存储：只有本地浏览器端可访问数据，服务器不能访问本地存储直到故意通过POST或者GET的通道发送到服务器；每个域5MB；没有过期数据，它将保留知道用户从浏览器清除或者使用Javascript代码移除</p>\n<p>4、如何实现浏览器内多个标签页之间的通信?<br>调用 localstorge、cookies 等本地存储方式</p>\n<p>5、你如何对网站的文件和资源进行优化？<br>文件合并</p>\n<p>文件最小化/文件压缩</p>\n<p>使用CDN托管</p>\n<p>缓存的使用</p>\n<p>6、什么是响应式设计？<br>它是关于网页制作的过程中让不同的设备有不同的尺寸和不同的功能。响应式设计是让所有的人能在这些设备上让网站运行正常</p>\n<p>7、新的 HTML5 文档类型和字符集是？<br>答：HTML5文档类型：&lt;!doctype html&gt;</p>\n<pre><code>HTML5使用的编码&lt;meta charset=”UTF-8”&gt;\n</code></pre><p>8、HTML5 Canvas 元素有什么用？<br>答：Canvas 元素用于在网页上绘制图形，该元素标签强大之处在于可以直接在 HTML 上进行图形操作。</p>\n<p>9、HTML5 存储类型有什么区别？<br>答：Media API、Text Track API、Application Cache API、User Interaction、Data Transfer API、Command API、Constraint Validation API、History API</p>\n<p>10、用H5+CSS3解决下导航栏最后一项掉下来的问题<br>11、CSS3新增伪类有那些？<br>    p:first-of-type 选择属于其父元素的首个 </p><p> 元素的每个 </p><p> 元素。</p>\n<pre><code>p:last-of-type  选择属于其父元素的最后 &lt;p&gt; 元素的每个 &lt;p&gt; 元素。\n\np:only-of-type  选择属于其父元素唯一的 &lt;p&gt; 元素的每个 &lt;p&gt; 元素。\n\np:only-child    选择属于其父元素的唯一子元素的每个 &lt;p&gt; 元素。\n\np:nth-child(2)  选择属于其父元素的第二个子元素的每个 &lt;p&gt; 元素。\n\n:enabled、:disabled 控制表单控件的禁用状态。\n</code></pre><p>:checked，单选框或复选框被选中。</p>\n<p>12、请用CSS实现：一个矩形内容，有投影，有圆角，hover状态慢慢变透明。<br>css属性的熟练程度和实践经验</p>\n<p>13、描述下CSS3里实现元素动画的方法<br>动画相关属性的熟悉程度</p>\n<p>14、html5\\CSS3有哪些新特性、移除了那些元素？如何处理HTML5新标签的浏览器兼容问题？如何区分 HTML 和 HTML5？<br>HTML5 现在已经不是 SGML 的子集，主要是关于图像，位置，存储，地理定位等功能的增加。</p>\n<ul>\n<li><p>绘画 canvas 元素</p>\n<p>用于媒介回放的 video 和 audio 元素</p>\n<p>本地离线存储 localStorage 长期存储数据，浏览器关闭后数据不丢失；</p>\n<p>sessionStorage 的数据在浏览器关闭后自动删除</p>\n<p>语意化更好的内容元素，比如 article、footer、header、nav、section</p>\n<p>表单控件，calendar、date、time、email、url、search</p>\n<p>CSS3实现圆角，阴影，对文字加特效，增加了更多的CSS选择器  多背景 rgba</p>\n<p>新的技术webworker, websockt, Geolocation</p>\n</li>\n</ul>\n<p>移除的元素</p>\n<p>纯表现的元素：basefont，big，center，font, s，strike，tt，u；</p>\n<p>对可用性产生负面影响的元素：frame，frameset，noframes；</p>\n<ul>\n<li><p>是IE8/IE7/IE6支持通过document.createElement方法产生的标签，</p>\n<p>可以利用这一特性让这些浏览器支持HTML5新标签，</p>\n<p>浏览器支持新标签后，还需要添加标签默认的样式：</p>\n</li>\n<li><p>当然最好的方式是直接使用成熟的框架、使用最多的是html5shim框架</p>\n</li>\n</ul>\n<!--[if lt IE 9]>\n\n<script> src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"</script>\n\n<![endif]-->\n<p>15、你怎么来实现页面设计图，你认为前端应该如何高质量完成工作? 一个满屏 品 字布局 如何设计?</p>\n<ul>\n<li><p>首先划分成头部、body、脚部；。。。。。</p>\n</li>\n<li><p>实现效果图是最基本的工作，精确到2px；</p>\n<p>与设计师，产品经理的沟通和项目的参与</p>\n<p>做好的页面结构，页面重构和用户体验</p>\n<p>处理hack，兼容、写出优美的代码格式</p>\n<p>针对服务器的优化、拥抱 HTML5。</p>\n</li>\n</ul>\n<p>16、你能描述一下渐进增强和优雅降级之间的不同吗?<br>渐进增强 progressive enhancement：针对低版本浏览器进行构建页面，保证最基本的功能，然后再针对高级浏览器进行效果、交互等改进和追加功能达到更好的用户体验。</p>\n<p>优雅降级 graceful degradation：一开始就构建完整的功能，然后再针对低版本浏览器进行兼容。</p>\n<p>　　区别：优雅降级是从复杂的现状开始，并试图减少用户体验的供给，而渐进增强则是从一个非常基础的，能够起作用的版本开始，并不断扩充，以适应未来环境的需要。降级（功能衰减）意味着往回看；而渐进增强则意味着朝前看，同时保证其根基处于安全地带。　</p>\n<p>　　“优雅降级”观点</p>\n<p>　　“优雅降级”观点认为应该针对那些最高级、最完善的浏览器来设计网站。而将那些被认为“过时”或有功能缺失的浏览器下的测试工作安排在开发周期的最后阶段，并把测试对象限定为主流浏览器（如 IE、Mozilla 等）的前一个版本。</p>\n<p>　　在这种设计范例下，旧版的浏览器被认为仅能提供“简陋却无妨 (poor, but passable)” 的浏览体验。你可以做一些小的调整来适应某个特定的浏览器。但由于它们并非我们所关注的焦点，因此除了修复较大的错误之外，其它的差异将被直接忽略。</p>\n<p>　　“渐进增强”观点</p>\n<p>　　“渐进增强”观点则认为应关注于内容本身。</p>\n<p>　　内容是我们建立网站的诱因。有的网站展示它，有的则收集它，有的寻求，有的操作，还有的网站甚至会包含以上的种种，但相同点是它们全都涉及到内容。这使得“渐进增强”成为一种更为合理的设计范例。这也是它立即被 Yahoo! 所采纳并用以构建其“分级式浏览器支持 (Graded Browser Support)”策略的原因所在。</p>\n<p>　　那么问题了。现在产品经理看到IE6,7,8网页效果相对高版本现代浏览器少了很多圆角，阴影（CSS3），要求兼容（使用图片背景，放弃CSS3），你会如何说服他？</p>\n<p>17、为什么利用多个域名来存储网站资源会更有效？<br>CDN缓存更方便</p>\n<p>突破浏览器并发限制</p>\n<p>节约cookie带宽</p>\n<p>节约主域名的连接数，优化页面响应速度</p>\n<p>防止不必要的安全问题</p>\n<p>18、请谈一下你对网页标准和标准制定机构重要性的理解。<br>　　（无标准答案）网页标准和标准制定机构都是为了能让web发展的更‘健康’，开发者遵循统一的标准，降低开发难度，开发成本，SEO也会更好做，也不会因为滥用代码导致各种BUG、安全问题，最终提高网站易用性。</p>\n<p>19、请描述一下cookies，sessionStorage和localStorage的区别？　　<br>　　sessionStorage用于本地存储一个会话（session）中的数据，这些数据只有在同一个会话中的页面才能访问并且当会话结束后数据也随之销毁。因此sessionStorage不是一种持久化的本地存储，仅仅是会话级别的存储。而localStorage用于持久化的本地存储，除非主动删除数据，否则数据是永远不会过期的。</p>\n<p>web storage和cookie的区别</p>\n<p>Web Storage的概念和cookie相似，区别是它是为了更大容量存储设计的。Cookie的大小是受限的，并且每次你请求一个新的页面的时候Cookie都会被发送过去，这样无形中浪费了带宽，另外cookie还需要指定作用域，不可以跨域调用。</p>\n<p>除此之外，Web Storage拥有setItem,getItem,removeItem,clear等方法，不像cookie需要前端开发者自己封装setCookie，getCookie。但是Cookie也是不可以或缺的：Cookie的作用是与服务器进行交互，作为HTTP规范的一部分而存在 ，而Web Storage仅仅是为了在本地“存储”数据而生。</p>\n<p>20、知道css有个content属性吗？有什么作用？有什么应用？<br>知道。css的content属性专门应用在 before/after 伪元素上，用来插入生成内容。最常见的应用是利用伪类清除浮动。</p>\n<p>//一种常见利用伪类清除浮动的代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div><div class=\"line\">271</div><div class=\"line\">272</div><div class=\"line\">273</div><div class=\"line\">274</div><div class=\"line\">275</div><div class=\"line\">276</div><div class=\"line\">277</div><div class=\"line\">278</div><div class=\"line\">279</div><div class=\"line\">280</div><div class=\"line\">281</div><div class=\"line\">282</div><div class=\"line\">283</div><div class=\"line\">284</div><div class=\"line\">285</div><div class=\"line\">286</div><div class=\"line\">287</div><div class=\"line\">288</div><div class=\"line\">289</div><div class=\"line\">290</div><div class=\"line\">291</div><div class=\"line\">292</div><div class=\"line\">293</div><div class=\"line\">294</div><div class=\"line\">295</div><div class=\"line\">296</div><div class=\"line\">297</div><div class=\"line\">298</div><div class=\"line\">299</div><div class=\"line\">300</div><div class=\"line\">301</div><div class=\"line\">302</div><div class=\"line\">303</div><div class=\"line\">304</div><div class=\"line\">305</div><div class=\"line\">306</div><div class=\"line\">307</div><div class=\"line\">308</div><div class=\"line\">309</div><div class=\"line\">310</div><div class=\"line\">311</div><div class=\"line\">312</div><div class=\"line\">313</div><div class=\"line\">314</div><div class=\"line\">315</div><div class=\"line\">316</div><div class=\"line\">317</div><div class=\"line\">318</div><div class=\"line\">319</div><div class=\"line\">320</div><div class=\"line\">321</div><div class=\"line\">322</div><div class=\"line\">323</div><div class=\"line\">324</div><div class=\"line\">325</div><div class=\"line\">326</div><div class=\"line\">327</div><div class=\"line\">328</div><div class=\"line\">329</div><div class=\"line\">330</div><div class=\"line\">331</div><div class=\"line\">332</div><div class=\"line\">333</div><div class=\"line\">334</div><div class=\"line\">335</div><div class=\"line\">336</div><div class=\"line\">337</div><div class=\"line\">338</div><div class=\"line\">339</div><div class=\"line\">340</div><div class=\"line\">341</div><div class=\"line\">342</div><div class=\"line\">343</div><div class=\"line\">344</div><div class=\"line\">345</div><div class=\"line\">346</div><div class=\"line\">347</div><div class=\"line\">348</div><div class=\"line\">349</div><div class=\"line\">350</div><div class=\"line\">351</div><div class=\"line\">352</div><div class=\"line\">353</div><div class=\"line\">354</div><div class=\"line\">355</div><div class=\"line\">356</div><div class=\"line\">357</div><div class=\"line\">358</div><div class=\"line\">359</div><div class=\"line\">360</div><div class=\"line\">361</div><div class=\"line\">362</div><div class=\"line\">363</div><div class=\"line\">364</div><div class=\"line\">365</div><div class=\"line\">366</div><div class=\"line\">367</div><div class=\"line\">368</div><div class=\"line\">369</div><div class=\"line\">370</div><div class=\"line\">371</div><div class=\"line\">372</div><div class=\"line\">373</div><div class=\"line\">374</div><div class=\"line\">375</div><div class=\"line\">376</div><div class=\"line\">377</div><div class=\"line\">378</div><div class=\"line\">379</div><div class=\"line\">380</div><div class=\"line\">381</div><div class=\"line\">382</div><div class=\"line\">383</div><div class=\"line\">384</div><div class=\"line\">385</div><div class=\"line\">386</div><div class=\"line\">387</div><div class=\"line\">388</div><div class=\"line\">389</div><div class=\"line\">390</div><div class=\"line\">391</div><div class=\"line\">392</div><div class=\"line\">393</div><div class=\"line\">394</div><div class=\"line\">395</div><div class=\"line\">396</div><div class=\"line\">397</div><div class=\"line\">398</div><div class=\"line\">399</div><div class=\"line\">400</div><div class=\"line\">401</div><div class=\"line\">402</div><div class=\"line\">403</div><div class=\"line\">404</div><div class=\"line\">405</div><div class=\"line\">406</div><div class=\"line\">407</div><div class=\"line\">408</div><div class=\"line\">409</div><div class=\"line\">410</div><div class=\"line\">411</div><div class=\"line\">412</div><div class=\"line\">413</div><div class=\"line\">414</div><div class=\"line\">415</div><div class=\"line\">416</div><div class=\"line\">417</div><div class=\"line\">418</div><div class=\"line\">419</div><div class=\"line\">420</div><div class=\"line\">421</div><div class=\"line\">422</div><div class=\"line\">423</div><div class=\"line\">424</div><div class=\"line\">425</div><div class=\"line\">426</div><div class=\"line\">427</div><div class=\"line\">428</div><div class=\"line\">429</div><div class=\"line\">430</div><div class=\"line\">431</div><div class=\"line\">432</div><div class=\"line\">433</div><div class=\"line\">434</div><div class=\"line\">435</div><div class=\"line\">436</div><div class=\"line\">437</div><div class=\"line\">438</div><div class=\"line\">439</div><div class=\"line\">440</div><div class=\"line\">441</div><div class=\"line\">442</div><div class=\"line\">443</div><div class=\"line\">444</div><div class=\"line\">445</div><div class=\"line\">446</div><div class=\"line\">447</div><div class=\"line\">448</div><div class=\"line\">449</div><div class=\"line\">450</div><div class=\"line\">451</div><div class=\"line\">452</div><div class=\"line\">453</div><div class=\"line\">454</div><div class=\"line\">455</div><div class=\"line\">456</div><div class=\"line\">457</div><div class=\"line\">458</div><div class=\"line\">459</div><div class=\"line\">460</div><div class=\"line\">461</div><div class=\"line\">462</div><div class=\"line\">463</div><div class=\"line\">464</div><div class=\"line\">465</div><div class=\"line\">466</div><div class=\"line\">467</div><div class=\"line\">468</div><div class=\"line\">469</div><div class=\"line\">470</div><div class=\"line\">471</div><div class=\"line\">472</div><div class=\"line\">473</div><div class=\"line\">474</div><div class=\"line\">475</div><div class=\"line\">476</div><div class=\"line\">477</div><div class=\"line\">478</div><div class=\"line\">479</div><div class=\"line\">480</div><div class=\"line\">481</div><div class=\"line\">482</div><div class=\"line\">483</div><div class=\"line\">484</div><div class=\"line\">485</div><div class=\"line\">486</div><div class=\"line\">487</div><div class=\"line\">488</div><div class=\"line\">489</div><div class=\"line\">490</div><div class=\"line\">491</div><div class=\"line\">492</div><div class=\"line\">493</div><div class=\"line\">494</div><div class=\"line\">495</div><div class=\"line\">496</div><div class=\"line\">497</div><div class=\"line\">498</div><div class=\"line\">499</div><div class=\"line\">500</div><div class=\"line\">501</div><div class=\"line\">502</div><div class=\"line\">503</div><div class=\"line\">504</div><div class=\"line\">505</div><div class=\"line\">506</div><div class=\"line\">507</div><div class=\"line\">508</div><div class=\"line\">509</div><div class=\"line\">510</div><div class=\"line\">511</div><div class=\"line\">512</div><div class=\"line\">513</div><div class=\"line\">514</div><div class=\"line\">515</div><div class=\"line\">516</div><div class=\"line\">517</div><div class=\"line\">518</div><div class=\"line\">519</div><div class=\"line\">520</div><div class=\"line\">521</div><div class=\"line\">522</div><div class=\"line\">523</div><div class=\"line\">524</div><div class=\"line\">525</div><div class=\"line\">526</div><div class=\"line\">527</div><div class=\"line\">528</div><div class=\"line\">529</div><div class=\"line\">530</div><div class=\"line\">531</div><div class=\"line\">532</div><div class=\"line\">533</div><div class=\"line\">534</div><div class=\"line\">535</div><div class=\"line\">536</div><div class=\"line\">537</div><div class=\"line\">538</div><div class=\"line\">539</div><div class=\"line\">540</div><div class=\"line\">541</div><div class=\"line\">542</div><div class=\"line\">543</div><div class=\"line\">544</div><div class=\"line\">545</div><div class=\"line\">546</div><div class=\"line\">547</div><div class=\"line\">548</div><div class=\"line\">549</div><div class=\"line\">550</div><div class=\"line\">551</div><div class=\"line\">552</div><div class=\"line\">553</div><div class=\"line\">554</div><div class=\"line\">555</div><div class=\"line\">556</div><div class=\"line\">557</div><div class=\"line\">558</div><div class=\"line\">559</div><div class=\"line\">560</div><div class=\"line\">561</div><div class=\"line\">562</div><div class=\"line\">563</div><div class=\"line\">564</div><div class=\"line\">565</div><div class=\"line\">566</div><div class=\"line\">567</div><div class=\"line\">568</div><div class=\"line\">569</div><div class=\"line\">570</div><div class=\"line\">571</div><div class=\"line\">572</div><div class=\"line\">573</div><div class=\"line\">574</div><div class=\"line\">575</div><div class=\"line\">576</div><div class=\"line\">577</div><div class=\"line\">578</div><div class=\"line\">579</div><div class=\"line\">580</div><div class=\"line\">581</div><div class=\"line\">582</div><div class=\"line\">583</div><div class=\"line\">584</div><div class=\"line\">585</div><div class=\"line\">586</div><div class=\"line\">587</div><div class=\"line\">588</div><div class=\"line\">589</div><div class=\"line\">590</div></pre></td><td class=\"code\"><pre><div class=\"line\">.clearfix:after &#123;</div><div class=\"line\"></div><div class=\"line\">    content:&quot;.&quot;; //这里利用到了content属性</div><div class=\"line\"></div><div class=\"line\">    display:block;</div><div class=\"line\"></div><div class=\"line\">    height:0;</div><div class=\"line\"></div><div class=\"line\">    visibility:hidden;</div><div class=\"line\"></div><div class=\"line\">    clear:both; &#125;</div><div class=\"line\"></div><div class=\"line\">.clearfix &#123;</div><div class=\"line\"></div><div class=\"line\">    *zoom:1;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\">``</div><div class=\"line\">after伪元素通过 content 在元素的后面生成了内容为一个点的块级素，再利用clear:both清除浮动。</div><div class=\"line\"></div><div class=\"line\">　　那么问题继续还有，知道css计数器（序列数字字符自动递增）吗？如何通过css content属性实现css计数器？</div><div class=\"line\"></div><div class=\"line\">答案：css计数器是通过设置counter-reset 、counter-increment 两个属性 、及 counter()/counters()一个方法配合after / before 伪类实现。</div><div class=\"line\"></div><div class=\"line\">21、如何在 HTML5 页面中嵌入音频?</div><div class=\"line\">HTML 5 包含嵌入音频文件的标准方式，支持的格式包括 MP3、Wav 和 Ogg：</div><div class=\"line\"></div><div class=\"line\">&lt;audio controls&gt;</div><div class=\"line\"></div><div class=\"line\">  &lt;source src=&quot;jamshed.mp3&quot; type=&quot;audio/mpeg&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">   Your browser does&apos;nt support audio embedding feature.</div><div class=\"line\"></div><div class=\"line\">&lt;/audio&gt;</div><div class=\"line\"></div><div class=\"line\">22、如何在 HTML5 页面中嵌入视频？</div><div class=\"line\">和音频一样，HTML5 定义了嵌入视频的标准方法，支持的格式包括：MP4、WebM 和 Ogg：</div><div class=\"line\"></div><div class=\"line\">&lt;video width=&quot;450&quot; height=&quot;340&quot; controls&gt;</div><div class=\"line\"></div><div class=\"line\">  &lt;source src=&quot;jamshed.mp4&quot; type=&quot;video/mp4&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">   Your browser does&apos;nt support video embedding feature.</div><div class=\"line\"></div><div class=\"line\">&lt;/video&gt;</div><div class=\"line\"></div><div class=\"line\">23、HTML5 引入什么新的表单属性？</div><div class=\"line\">Datalist   datetime   output   keygen  date  month  week  time  number   range   emailurl</div><div class=\"line\"></div><div class=\"line\">24、CSS3新增伪类有那些？</div><div class=\"line\"> p:first-of-type 选择属于其父元素的首个 &lt;p&gt; 元素的每个 &lt;p&gt; 元素。</div><div class=\"line\"></div><div class=\"line\">    p:last-of-type  选择属于其父元素的最后 &lt;p&gt; 元素的每个 &lt;p&gt; 元素。</div><div class=\"line\"></div><div class=\"line\">    p:only-of-type  选择属于其父元素唯一的 &lt;p&gt; 元素的每个 &lt;p&gt; 元素。</div><div class=\"line\"></div><div class=\"line\">    p:only-child    选择属于其父元素的唯一子元素的每个 &lt;p&gt; 元素。</div><div class=\"line\"></div><div class=\"line\">    p:nth-child(2)  选择属于其父元素的第二个子元素的每个 &lt;p&gt; 元素。</div><div class=\"line\"></div><div class=\"line\">    :enabled、:disabled 控制表单控件的禁用状态。</div><div class=\"line\"></div><div class=\"line\">:checked，单选框或复选框被选中。</div><div class=\"line\"></div><div class=\"line\">25、(写)描述一段语义的html代码吧。</div><div class=\"line\">（HTML5中新增加的很多标签（如：&lt;article&gt;、&lt;nav&gt;、&lt;header&gt;和&lt;footer&gt;等）</div><div class=\"line\"></div><div class=\"line\">就是基于语义化设计原则）</div><div class=\"line\"></div><div class=\"line\">&lt; div id=&quot;header&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">&lt; h1&gt;标题&lt; /h1&gt;</div><div class=\"line\"></div><div class=\"line\">&lt; h2&gt;专注Web前端技术&lt; /h2&gt;</div><div class=\"line\"></div><div class=\"line\">&lt; /div&gt;</div><div class=\"line\"></div><div class=\"line\">语义 HTML 具有以下特性：</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">文字包裹在元素中，用以反映内容。例如：</div><div class=\"line\"></div><div class=\"line\">段落包含在 &lt;p&gt; 元素中。</div><div class=\"line\"></div><div class=\"line\">顺序表包含在&lt;ol&gt;元素中。</div><div class=\"line\"></div><div class=\"line\">从其他来源引用的大型文字块包含在&lt;blockquote&gt;元素中。</div><div class=\"line\"></div><div class=\"line\">HTML 元素不能用作语义用途以外的其他目的。例如：</div><div class=\"line\"></div><div class=\"line\">&lt;h1&gt;包含标题，但并非用于放大文本。</div><div class=\"line\"></div><div class=\"line\">&lt;blockquote&gt;包含大段引述，但并非用于文本缩进。</div><div class=\"line\"></div><div class=\"line\">空白段落元素 ( &lt;p&gt;&lt;/p&gt; ) 并非用于跳行。</div><div class=\"line\"></div><div class=\"line\">文本并不直接包含任何样式信息。例如：</div><div class=\"line\"></div><div class=\"line\">不使用 &lt;font&gt; 或 &lt;center&gt; 等格式标记。</div><div class=\"line\"></div><div class=\"line\">类或 ID 中不引用颜色或位置。</div><div class=\"line\"></div><div class=\"line\">26.cookie在浏览器和服务器间来回传递。 sessionStorage和localStorage区别</div><div class=\"line\">sessionStorage和localStorage的存储空间更大；</div><div class=\"line\"></div><div class=\"line\">sessionStorage和localStorage有更多丰富易用的接口；</div><div class=\"line\"></div><div class=\"line\">sessionStorage和localStorage各自独立的存储空间；</div><div class=\"line\"></div><div class=\"line\">27、html5有哪些新特性、移除了那些元素？如何处理HTML5新标签的浏览器兼容问题？如何区分 HTML 和 HTML5？</div><div class=\"line\">* HTML5 现在已经不是 SGML 的子集，主要是关于图像，位置，存储，多任务等功能的增加。</div><div class=\"line\"></div><div class=\"line\">* 绘画 canvas</div><div class=\"line\"></div><div class=\"line\">  用于媒介回放的 video 和 audio 元素</div><div class=\"line\"></div><div class=\"line\">  本地离线存储 localStorage 长期存储数据，浏览器关闭后数据不丢失；</div><div class=\"line\"></div><div class=\"line\">  sessionStorage 的数据在浏览器关闭后自动删除</div><div class=\"line\"></div><div class=\"line\">  语意化更好的内容元素，比如 article、footer、header、nav、section</div><div class=\"line\"></div><div class=\"line\">  表单控件，calendar、date、time、email、url、search</div><div class=\"line\"></div><div class=\"line\">  新的技术webworker, websockt, Geolocation</div><div class=\"line\"></div><div class=\"line\">* 移除的元素</div><div class=\"line\"></div><div class=\"line\">纯表现的元素：basefont，big，center，font, s，strike，tt，u；</div><div class=\"line\"></div><div class=\"line\">对可用性产生负面影响的元素：frame，frameset，noframes；</div><div class=\"line\"></div><div class=\"line\">支持HTML5新标签：</div><div class=\"line\"></div><div class=\"line\">* IE8/IE7/IE6支持通过document.createElement方法产生的标签，</div><div class=\"line\"></div><div class=\"line\">  可以利用这一特性让这些浏览器支持HTML5新标签，</div><div class=\"line\"></div><div class=\"line\">  浏览器支持新标签后，还需要添加标签默认的样式：</div><div class=\"line\"></div><div class=\"line\">* 当然最好的方式是直接使用成熟的框架、使用最多的是html5shim框架</div><div class=\"line\"></div><div class=\"line\">&lt;!--[if lt IE 9]&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;script&gt; src=&quot;http://html5shim.googlecode.com/svn/trunk/html5.js&quot;&lt;/script&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;![endif]--&gt;</div><div class=\"line\"></div><div class=\"line\">28、如何区分： DOCTYPE声明\\新增的结构元素\\功能元素</div><div class=\"line\">29、语义化的理解？</div><div class=\"line\">用正确的标签做正确的事情！</div><div class=\"line\"></div><div class=\"line\">html语义化就是让页面的内容结构化，便于对浏览器、搜索引擎解析；</div><div class=\"line\"></div><div class=\"line\">在没有样式CCS情况下也以一种文档格式显示，并且是容易阅读的。</div><div class=\"line\"></div><div class=\"line\">搜索引擎的爬虫依赖于标记来确定上下文和各个关键字的权重，利于 SEO。</div><div class=\"line\"></div><div class=\"line\">使阅读源代码的人对网站更容易将网站分块，便于阅读维护理解。</div><div class=\"line\"></div><div class=\"line\">30、HTML5的离线储存？</div><div class=\"line\">localStorage    长期存储数据，浏览器关闭后数据不丢失；</div><div class=\"line\"></div><div class=\"line\">sessionStorage  数据在浏览器关闭后自动删除。</div><div class=\"line\"></div><div class=\"line\">31、写出HTML5的文档声明方式</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"> &lt;DOCYPE html&gt;</div><div class=\"line\"></div><div class=\"line\">32、HTML5和CSS3的新标签     </div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">HTML5： nav, footer, header, section, hgroup, video, time, canvas, audio...</div><div class=\"line\"></div><div class=\"line\">CSS3: RGBA, opacity, text-shadow, box-shadow, border-radius, border-image,</div><div class=\"line\"></div><div class=\"line\">border-color, transform...;</div><div class=\"line\"></div><div class=\"line\">33、自己对标签语义化的理解</div><div class=\"line\">    在我看来，语义化就是比如说一个段落， 那么我们就应该用 &lt;p&gt;标签来修饰，标题就应该用 &lt;h?&gt;标签等。符合文档语义的标签。</div><div class=\"line\"></div><div class=\"line\">五、移动web开发</div><div class=\"line\">1、移动端常用类库及优缺点</div><div class=\"line\">知识面宽度，多多益善</div><div class=\"line\"></div><div class=\"line\">2、Zepto库和JQ区别</div><div class=\"line\">Zepto相对jQuery更加轻量，主要用在移动端，jQuery也有对应的jQuerymobile移动端框架</div><div class=\"line\"></div><div class=\"line\">六、Ajax</div><div class=\"line\">1、Ajax 是什么? 如何创建一个Ajax？</div><div class=\"line\">Ajax并不算是一种新的技术，全称是asychronous javascript and xml，可以说是已有技术的组合，主要用来实现客户端与服务器端的异步通信效果，实现页面的局部刷新，早期的浏览器并不能原生支持ajax，可以使用隐藏帧（iframe）方式变相实现异步效果，后来的浏览器提供了对ajax的原生支持</div><div class=\"line\"></div><div class=\"line\">使用ajax原生方式发送请求主要通过XMLHttpRequest(标准浏览器)、ActiveXObject(IE浏览器)对象实现异步通信效果</div><div class=\"line\"></div><div class=\"line\">基本步骤：</div><div class=\"line\"></div><div class=\"line\">var xhr =null;//创建对象</div><div class=\"line\"></div><div class=\"line\">if(window.XMLHttpRequest)&#123;</div><div class=\"line\"></div><div class=\"line\">   xhr = new XMLHttpRequest();</div><div class=\"line\"></div><div class=\"line\">&#125;else&#123;</div><div class=\"line\"></div><div class=\"line\">   xhr = new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;);</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">     xhr.open(“方式”,”地址”,”标志位”);//初始化请求</div><div class=\"line\"></div><div class=\"line\">     xhr.setRequestHeader(“”,””);//设置http头信息</div><div class=\"line\"></div><div class=\"line\">     xhr.onreadystatechange =function()&#123;&#125;//指定回调函数</div><div class=\"line\"></div><div class=\"line\">     xhr.send();//发送请求</div><div class=\"line\"></div><div class=\"line\">js框架（jQuery/EXTJS等）提供的ajax  API对原生的ajax进行了封装，熟悉了基础理论，再学习别的框架就会得心应手，好多都是换汤不换药的内容</div><div class=\"line\"></div><div class=\"line\">2、同步和异步的区别?</div><div class=\"line\">同步：阻塞的</div><div class=\"line\"></div><div class=\"line\">-张三叫李四去吃饭，李四一直忙得不停，张三一直等着，直到李四忙完两个人一块去吃饭</div><div class=\"line\"></div><div class=\"line\">=浏览器向服务器请求数据，服务器比较忙，浏览器一直等着（页面白屏），直到服务器返回数据，浏览器才能显示页面</div><div class=\"line\"></div><div class=\"line\">异步：非阻塞的</div><div class=\"line\"></div><div class=\"line\">-张三叫李四去吃饭，李四在忙，张三说了一声然后自己就去吃饭了，李四忙完后自己去吃</div><div class=\"line\"></div><div class=\"line\">=浏览器向服务器请求数据，服务器比较忙，浏览器可以自如的干原来的事情（显示页面），服务器返回数据的时候通知浏览器一声，浏览器把返回的数据再渲染到页面，局部更新</div><div class=\"line\"></div><div class=\"line\">3、如何解决跨域问题?</div><div class=\"line\">理解跨域的概念：协议、域名、端口都相同才同域，否则都是跨域</div><div class=\"line\"></div><div class=\"line\">出于安全考虑，服务器不允许ajax跨域获取数据，但是可以跨域获取文件内容，所以基于这一点，可以动态创建script标签，使用标签的src属性访问js文件的形式获取js脚本，并且这个js脚本中的内容是函数调用，该函数调用的参数是服务器返回的数据，为了获取这里的参数数据，需要事先在页面中定义回调函数，在回调函数中处理服务器返回的数据，这就是解决跨域问题的主流解决方案</div><div class=\"line\"></div><div class=\"line\">4、页面编码和被请求的资源编码如果不一致如何处理？</div><div class=\"line\">对于ajax请求传递的参数，如果是get请求方式，参数如果传递中文，在有些浏览器会乱码，不同的浏览器对参数编码的处理方式不同，所以对于get请求的参数需要使用 encodeURIComponent函数对参数进行编码处理，后台开发语言都有相应的解码api。对于post请求不需要进行编码</div><div class=\"line\"></div><div class=\"line\">5、简述ajax 的过程。</div><div class=\"line\">1. 创建XMLHttpRequest对象,也就是创建一个异步调用对象</div><div class=\"line\"></div><div class=\"line\">2. 创建一个新的HTTP请求,并指定该HTTP请求的方法、URL及验证信息</div><div class=\"line\"></div><div class=\"line\">3. 设置响应HTTP请求状态变化的函数</div><div class=\"line\"></div><div class=\"line\">4. 发送HTTP请求</div><div class=\"line\"></div><div class=\"line\">5. 获取异步调用返回的数据</div><div class=\"line\"></div><div class=\"line\">6. 使用JavaScript和DOM实现局部刷新</div><div class=\"line\"></div><div class=\"line\">6、阐述一下异步加载。</div><div class=\"line\">1. 异步加载的方案： 动态插入 script 标签</div><div class=\"line\"></div><div class=\"line\">2. 通过 ajax 去获取 js 代码，然后通过 eval 执行</div><div class=\"line\"></div><div class=\"line\">3. script 标签上添加 defer 或者 async 属性</div><div class=\"line\"></div><div class=\"line\">4. 创建并插入 iframe，让它异步执行 js</div><div class=\"line\"></div><div class=\"line\">7、请解释一下 JavaScript 的同源策略。</div><div class=\"line\">同源策略是客户端脚本（尤其是Javascript）的重要的安全度量标准。它最早出自Netscape Navigator2.0，其目的是防止某个文档或脚本从多个不同源装载。所谓同源指的是：协议，域名，端口相同，同源策略是一种安全协议，指一段脚本只能读取来自同一来源的窗口和文档的属性。</div><div class=\"line\"></div><div class=\"line\">8、GET和POST的区别，何时使用POST？</div><div class=\"line\">GET：一般用于信息获取，使用URL传递参数，对所发送信息的数量也有限制，一般在2000个字符，有的浏览器是8000个字符</div><div class=\"line\"></div><div class=\"line\">POST：一般用于修改服务器上的资源，对所发送的信息没有限制</div><div class=\"line\"></div><div class=\"line\">在以下情况中，请使用 POST 请求：</div><div class=\"line\"></div><div class=\"line\">1. 无法使用缓存文件（更新服务器上的文件或数据库）</div><div class=\"line\"></div><div class=\"line\">2. 向服务器发送大量数据（POST 没有数据量限制）</div><div class=\"line\"></div><div class=\"line\">3. 发送包含未知字符的用户输入时，POST 比 GET 更稳定也更可靠</div><div class=\"line\"></div><div class=\"line\">9、ajax 是什么?ajax 的交互模型?同步和异步的区别?如何解决跨域问题?</div><div class=\"line\"> 1. 通过异步模式，提升了用户体验</div><div class=\"line\"></div><div class=\"line\"> 2. 优化了浏览器和服务器之间的传输，减少不必要的数据往返，减少了带宽占用</div><div class=\"line\"></div><div class=\"line\">3.  Ajax在客户端运行，承担了一部分本来由服务器承担的工作，减少了大用户量下的服务器负载。</div><div class=\"line\"></div><div class=\"line\">10、 Ajax的最大的特点是什么。</div><div class=\"line\">    Ajax可以实现异步通信效果，实现页面局部刷新，带来更好的用户体验；按需获取数据，节约带宽资源；</div><div class=\"line\"></div><div class=\"line\">11、ajax的缺点</div><div class=\"line\"> 1、ajax不支持浏览器back按钮。</div><div class=\"line\"></div><div class=\"line\"> 2、安全问题 AJAX暴露了与服务器交互的细节。</div><div class=\"line\"></div><div class=\"line\"> 3、对搜索引擎的支持比较弱。</div><div class=\"line\"></div><div class=\"line\"> 4、破坏了程序的异常机制。</div><div class=\"line\"></div><div class=\"line\">12、ajax请求的时候get 和post方式的区别</div><div class=\"line\">get一般用来进行查询操作，url地址有长度限制，请求的参数都暴露在url地址当中，如果传递中文参数，需要自己进行编码操作，安全性较低。</div><div class=\"line\"></div><div class=\"line\">post请求方式主要用来提交数据，没有数据长度的限制，提交的数据内容存在于http请求体中，数据不会暴漏在url地址中。</div><div class=\"line\"></div><div class=\"line\">13、解释jsonp的原理，以及为什么不是真正的ajax</div><div class=\"line\">　　Jsonp并不是一种数据格式，而json是一种数据格式，jsonp是用来解决跨域获取数据的一种解决方案，具体是通过动态创建script标签，然后通过标签的src属性获取js文件中的js脚本，该脚本的内容是一个函数调用，参数就是服务器返回的数据，为了处理这些返回的数据，需要事先在页面定义好回调函数，本质上使用的并不是ajax技术</div><div class=\"line\"></div><div class=\"line\">14、什么是Ajax和JSON，它们的优缺点。</div><div class=\"line\">Ajax是全称是asynchronous JavaScript andXML，即异步JavaScript和xml，用于在Web页面中实现异步数据交互，实现页面局部刷新。</div><div class=\"line\"></div><div class=\"line\">优点：可以使得页面不重载全部内容的情况下加载局部内容，降低数据传输量，避免用户不断刷新或者跳转页面，提高用户体验</div><div class=\"line\"></div><div class=\"line\">缺点：对搜索引擎不友好；要实现ajax下的前后退功能成本较大；可能造成请求数的增加跨域问题限制；</div><div class=\"line\"></div><div class=\"line\">JSON是一种轻量级的数据交换格式，ECMA的一个子集</div><div class=\"line\"></div><div class=\"line\">优点：轻量级、易于人的阅读和编写，便于机器（JavaScript）解析，支持复合数据类型（数组、对象、字符串、数字）</div><div class=\"line\"></div><div class=\"line\">15、http常见的状态码有那些？分别代表是什么意思？</div><div class=\"line\">200 - 请求成功</div><div class=\"line\"></div><div class=\"line\">301 - 资源（网页等）被永久转移到其它URL</div><div class=\"line\"></div><div class=\"line\">404 - 请求的资源（网页等）不存在</div><div class=\"line\"></div><div class=\"line\">500 - 内部服务器错误</div><div class=\"line\"></div><div class=\"line\">16、一个页面从输入 URL 到页面加载显示完成，这个过程中都发生了什么？</div><div class=\"line\">分为4个步骤：</div><div class=\"line\"></div><div class=\"line\">1. 当发送一个 URL 请求时，不管这个 URL 是 Web 页面的 URL 还是 Web 页面上每个资源的 URL，浏览器都会开启一个线程来处理这个请求，同时在远程 DNS 服务器上启动一个 DNS 查询。这能使浏览器获得请求对应的 IP 地址。</div><div class=\"line\"></div><div class=\"line\">2. 浏览器与远程 Web 服务器通过 TCP 三次握手协商来建立一个 TCP/IP 连接。该握手包括一个同步报文，一个同步-应答报文和一个应答报文，这三个报文在 浏览器和服务器之间传递。该握手首先由客户端尝试建立起通信，而后服务器应答并接受客户端的请求，最后由客户端发出该请求已经被接受的报文。</div><div class=\"line\"></div><div class=\"line\">3. 一旦 TCP/IP 连接建立，浏览器会通过该连接向远程服务器发送 HTTP 的 GET 请求。远程服务器找到资源并使用 HTTP 响应返回该资源，值为 200 的 HTTP 响应状态表示一个正确的响应。</div><div class=\"line\"></div><div class=\"line\">4. 此时，Web 服务器提供资源服务，客户端开始下载资源。</div><div class=\"line\"></div><div class=\"line\">17、ajax请求的时候get 和post方式的区别</div><div class=\"line\">get一般用来进行查询操作，url地址有长度限制，请求的参数都暴露在url地址当中，如果传递中文参数，需要自己进行编码操作，安全性较低。</div><div class=\"line\"></div><div class=\"line\">post请求方式主要用来提交数据，没有数据长度的限制，提交的数据内容存在于http请求体中，数据不会暴漏在url地址中。</div><div class=\"line\"></div><div class=\"line\">18、ajax请求时，如何解释json数据</div><div class=\"line\">使用eval()或者JSON.parse() 鉴于安全性考虑，推荐使用JSON.parse()更靠谱，对数据的安全性更好。</div><div class=\"line\"></div><div class=\"line\">19、.javascript的本地对象，内置对象和宿主对象</div><div class=\"line\">本地对象为独立于宿主环境的ECMAScript提供的对象，包括ArrayObjectRegExp等可以new实例化的对象</div><div class=\"line\"></div><div class=\"line\">内置对象为Gload，Math 等不可以实例化的(他们也是本地对象，内置对象是本地对象的一个子集)</div><div class=\"line\"></div><div class=\"line\">宿主对象为所有的非本地对象，所有的BOM和DOM对象都是宿主对象，如浏览器自带的document,window 等对象</div><div class=\"line\"></div><div class=\"line\">20、为什么利用多个域名来存储网站资源会更有效？</div><div class=\"line\">确保用户在不同地区能用最快的速度打开网站，其中某个域名崩溃用户也能通过其他郁闷访问网站，并且不同的资源放到不同的服务器上有利于减轻单台服务器的压力。</div><div class=\"line\"></div><div class=\"line\">21、请说出三种减低页面加载时间的方法</div><div class=\"line\">1、压缩css、js文件</div><div class=\"line\">2、合并js、css文件，减少http请求</div><div class=\"line\">3、外部js、css文件放在最底下</div><div class=\"line\">4、减少dom操作，尽可能用变量替代不必要的dom操作</div><div class=\"line\"></div><div class=\"line\">22、HTTP状态码都有那些。</div><div class=\"line\">200 OK      //客户端请求成功</div><div class=\"line\"></div><div class=\"line\">400 Bad Request  //客户端请求有语法错误，不能被服务器所理解</div><div class=\"line\"></div><div class=\"line\">403 Forbidden  //服务器收到请求，但是拒绝提供服务</div><div class=\"line\"></div><div class=\"line\">404 Not Found  //请求资源不存在，输入了错误的URL</div><div class=\"line\"></div><div class=\"line\">500 Internal Server Error //服务器发生不可预期的错误</div><div class=\"line\"></div><div class=\"line\">503 Server Unavailable  //服务器当前不能处理客户端的请求，一段时间后可能恢复正常</div><div class=\"line\"></div><div class=\"line\">七、JS高级</div><div class=\"line\">1、JQuery一个对象可以同时绑定多个事件，这是如何实现的？</div><div class=\"line\">jQuery可以给一个对象同时绑定多个事件，低层实现方式是使用addEventListner或attachEvent兼容不同的浏览器实现事件的绑定，这样可以给同一个对象注册多个事件。</div><div class=\"line\"></div><div class=\"line\">2、知道什么是webkit么? 知道怎么用浏览器的各种工具来调试和debug代码么?</div><div class=\"line\">Webkit是浏览器引擎，包括html渲染和js解析功能，手机浏览器的主流内核，与之相对应的引擎有Gecko（Mozilla Firefox 等使用）和Trident（也称MSHTML，IE 使用）。</div><div class=\"line\"></div><div class=\"line\">对于浏览器的调试工具要熟练使用，主要是页面结构分析，后台请求信息查看，js调试工具使用，熟练使用这些工具可以快速提高解决问题的效率</div><div class=\"line\"></div><div class=\"line\">3、如何测试前端代码? 知道BDD, TDD, Unit Test么? 知道怎么测试你的前端工程么(mocha, sinon, jasmin, qUnit..)?</div><div class=\"line\">了解BDD行为驱动开发与TDD测试驱动开发已经单元测试相关概念，</div><div class=\"line\"></div><div class=\"line\">4、 前端templating(Mustache, underscore, handlebars)是干嘛的, 怎么用?</div><div class=\"line\"></div><div class=\"line\">Web 模板引擎是为了使用户界面与业务数据（内容）分离而产生的，</div><div class=\"line\"></div><div class=\"line\">Mustache 是一个 logic-less （轻逻辑）模板解析引擎，它的优势在于可以应用在 Javascript、PHP、Python、Perl 等多种编程语言中。</div><div class=\"line\"></div><div class=\"line\">Underscore封装了常用的JavaScript对象操作方法，用于提高开发效率。</div><div class=\"line\"></div><div class=\"line\">Handlebars 是 JavaScript 一个语义模板库，通过对view和data的分离来快速构建Web模板。</div><div class=\"line\"></div><div class=\"line\">5、简述一下 Handlebars 的基本用法？</div><div class=\"line\">没有用过的话说出它是干什么的即可</div><div class=\"line\"></div><div class=\"line\">6、简述一下 Handlerbars 的对模板的基本处理流程， 如何编译的？如何缓存的？</div><div class=\"line\">学习技术不仅要会用，还有熟悉它的实现机制，这样在开发中遇到问题时才能更好的解决</div><div class=\"line\"></div><div class=\"line\">7、用js实现千位分隔符?</div><div class=\"line\">原生js的熟练度，实践经验，实现思路</div><div class=\"line\"></div><div class=\"line\">8、检测浏览器版本版本有哪些方式？</div><div class=\"line\">IE与标准浏览器判断，IE不同版本的判断，userAgent  var ie = /*@cc_on !@*/false;</div><div class=\"line\"></div><div class=\"line\">9、我们给一个dom同时绑定两个点击事件，一个用捕获，一个用冒泡，你来说下会执行几次事件，然后会先执行冒泡还是捕获</div><div class=\"line\">对两种事件模型的理解</div><div class=\"line\"></div><div class=\"line\">10、实现一个函数clone，可以对JavaScript中的5种主要的数据类型（包括Number、String、Object、Array、Boolean）进行值复制</div><div class=\"line\">考察点1：对于基本数据类型和引用数据类型在内存中存放的是值还是指针这一区别是否清楚</div><div class=\"line\">考察点2：是否知道如何判断一个变量是什么类型的</div><div class=\"line\">考察点3：递归算法的设计</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">// 方法一：</div><div class=\"line\"></div><div class=\"line\">Object.prototype.clone = function()&#123;</div><div class=\"line\"></div><div class=\"line\">   var o = this.constructor === Array ? [] : &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">   for(var e in this)&#123;</div><div class=\"line\"></div><div class=\"line\">    o[e] = typeof this[e] === &quot;object&quot; ? this[e].clone() : this[e];</div><div class=\"line\"></div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   return o;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//方法二：</div><div class=\"line\"></div><div class=\"line\">  /**</div><div class=\"line\"></div><div class=\"line\">     * 克隆一个对象</div><div class=\"line\"></div><div class=\"line\">     * @param Obj</div><div class=\"line\"></div><div class=\"line\">     * @returns</div><div class=\"line\"></div><div class=\"line\">     */</div><div class=\"line\"></div><div class=\"line\">    function clone(Obj) &#123;  </div><div class=\"line\"></div><div class=\"line\">        var buf;  </div><div class=\"line\"></div><div class=\"line\">        if (Obj instanceof Array) &#123;  </div><div class=\"line\"></div><div class=\"line\">            buf = [];//创建一个空的数组</div><div class=\"line\"></div><div class=\"line\">            var i = Obj.length;  </div><div class=\"line\"></div><div class=\"line\">            while (i--) &#123;  </div><div class=\"line\"></div><div class=\"line\">                buf[i] = clone(Obj[i]);  </div><div class=\"line\"></div><div class=\"line\">            &#125;  </div><div class=\"line\"></div><div class=\"line\">            return buf;   </div><div class=\"line\"></div><div class=\"line\">        &#125;else if (Obj instanceof Object)&#123;  </div><div class=\"line\"></div><div class=\"line\">            buf = &#123;&#125;;//创建一个空对象</div><div class=\"line\"></div><div class=\"line\">            for (var k in Obj) &#123; //为这个对象添加新的属性</div><div class=\"line\"></div><div class=\"line\">                buf[k] = clone(Obj[k]);  </div><div class=\"line\"></div><div class=\"line\">            &#125;  </div><div class=\"line\"></div><div class=\"line\">            return buf;  </div><div class=\"line\"></div><div class=\"line\">        &#125;else&#123; //普通变量直接赋值</div><div class=\"line\"></div><div class=\"line\">            return Obj;  </div><div class=\"line\"></div><div class=\"line\">        &#125;  </div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">11、如何消除一个数组里面重复的元素？</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">var arr=[1,2,3,3,4,4,5,5,6,1,9,3,25,4];</div><div class=\"line\"></div><div class=\"line\">        function deRepeat()&#123;</div><div class=\"line\"></div><div class=\"line\">            var newArr=[];</div><div class=\"line\"></div><div class=\"line\">            var obj=&#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">            var index=0;</div><div class=\"line\"></div><div class=\"line\">            var l=arr.length;</div><div class=\"line\"></div><div class=\"line\">            for(var i=0;i&lt;l;i++)&#123;</div><div class=\"line\"></div><div class=\"line\">                if(obj[arr[i]]==undefined)</div><div class=\"line\"></div><div class=\"line\">                  &#123;</div><div class=\"line\"></div><div class=\"line\">                    obj[arr[i]]=1;</div><div class=\"line\"></div><div class=\"line\">                    newArr[index++]=arr[i];</div><div class=\"line\"></div><div class=\"line\">                  &#125;</div><div class=\"line\"></div><div class=\"line\">                else if(obj[arr[i]]==1)</div><div class=\"line\"></div><div class=\"line\">                  continue;</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            return newArr;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        var newArr2=deRepeat(arr);</div><div class=\"line\"></div><div class=\"line\">        alert(newArr2); //输出1,2,3,4,5,6,9,25</div><div class=\"line\"></div><div class=\"line\">12、小贤是一条可爱的小狗(Dog)，它的叫声很好听(wow)，每次看到主人的时候就会乖乖叫一声(yelp)。从这段描述可以得到以下对象：</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">function Dog() &#123;</div><div class=\"line\"></div><div class=\"line\">      this.wow = function() &#123;</div><div class=\"line\"></div><div class=\"line\">               alert(’Wow’);</div><div class=\"line\"></div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      this.yelp = function() &#123;</div><div class=\"line\"></div><div class=\"line\">              this.wow();</div><div class=\"line\"></div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">小芒和小贤一样，原来也是一条可爱的小狗，可是突然有一天疯了(MadDog)，一看到人就会每隔半秒叫一声(wow)地不停叫唤(yelp)。请根据描述，按示例的形式用代码来实。（继承，原型，setInterval）</div></pre></td></tr></table></figure></p>\n<p>function MadDog() {</p>\n<pre><code>this.yelp = function() {\n\n      var self = this;         \n\n      setInterval(function() {\n\n            self.wow();     \n\n      }, 500);\n\n  }\n</code></pre><p>}</p>\n<p>MadDog.prototype = new Dog();        </p>\n<p>//for test</p>\n<p>var dog = new Dog();</p>\n<p>dog.yelp();</p>\n<p>var madDog = new MadDog();</p>\n<p>madDog.yelp();<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">13、下面这个ul，如何点击每一列的时候alert其index?（闭包）</div><div class=\"line\"></div><div class=\"line\">&lt;ul id=”test”&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;li&gt;这是第一条&lt;/li&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;li&gt;这是第二条&lt;/li&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;li&gt;这是第三条&lt;/li&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/ul&gt;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">// 方法一：</div></pre></td></tr></table></figure></p>\n<p>var lis=document.getElementById(‘2223’).getElementsByTagName(‘li’);</p>\n<p>for(var i=0;i&lt;3;i++)</p>\n<p>{</p>\n<pre><code>lis[i].index=i;\n\nlis[i].onclick=function(){\n\n    alert(this.index);\n\n};\n</code></pre><p>}<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div><div class=\"line\">271</div><div class=\"line\">272</div><div class=\"line\">273</div><div class=\"line\">274</div><div class=\"line\">275</div><div class=\"line\">276</div><div class=\"line\">277</div><div class=\"line\">278</div><div class=\"line\">279</div><div class=\"line\">280</div><div class=\"line\">281</div><div class=\"line\">282</div><div class=\"line\">283</div><div class=\"line\">284</div><div class=\"line\">285</div><div class=\"line\">286</div><div class=\"line\">287</div><div class=\"line\">288</div><div class=\"line\">289</div><div class=\"line\">290</div><div class=\"line\">291</div><div class=\"line\">292</div><div class=\"line\">293</div><div class=\"line\">294</div><div class=\"line\">295</div><div class=\"line\">296</div><div class=\"line\">297</div><div class=\"line\">298</div><div class=\"line\">299</div><div class=\"line\">300</div><div class=\"line\">301</div><div class=\"line\">302</div><div class=\"line\">303</div><div class=\"line\">304</div><div class=\"line\">305</div></pre></td><td class=\"code\"><pre><div class=\"line\">//方法二：</div><div class=\"line\"></div><div class=\"line\">var lis=document.getElementById(&apos;2223&apos;).getElementsByTagName(&apos;li&apos;);</div><div class=\"line\"></div><div class=\"line\">for(var i=0;i&lt;3;i++)&#123;</div><div class=\"line\"></div><div class=\"line\">    lis[i].index=i;</div><div class=\"line\"></div><div class=\"line\">    lis[i].onclick=(function(a)&#123;</div><div class=\"line\"></div><div class=\"line\">        return function() &#123;</div><div class=\"line\"></div><div class=\"line\">            alert(a);</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;)(i);</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">14、编写一个JavaScript函数，输入指定类型的选择器(仅需支持id，class，tagName三种简单CSS选择器，无需兼容组合选择器)可以返回匹配的DOM节点，需考虑浏览器兼容性和性能。</div><div class=\"line\">/*** @param selector &#123;String&#125; 传入的CSS选择器。* @return &#123;Array&#125;*/</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">var query = function(selector) &#123;</div><div class=\"line\"></div><div class=\"line\">var reg = /^(#)?(\\.)?(\\w+)$/img;</div><div class=\"line\"></div><div class=\"line\">var regResult = reg.exec(selector);</div><div class=\"line\"></div><div class=\"line\">var result = [];</div><div class=\"line\"></div><div class=\"line\">//如果是id选择器</div><div class=\"line\"></div><div class=\"line\">if(regResult[1]) &#123;</div><div class=\"line\"></div><div class=\"line\">if(regResult[3]) &#123;</div><div class=\"line\"></div><div class=\"line\">if(typeof document.querySelector === &quot;function&quot;) &#123;</div><div class=\"line\"></div><div class=\"line\">result.push(document.querySelector(regResult[3]));</div><div class=\"line\"></div><div class=\"line\">    &#125;else &#123;</div><div class=\"line\"></div><div class=\"line\">      result.push(document.getElementById(regResult[3]));</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  //如果是class选择器</div><div class=\"line\"></div><div class=\"line\">  else if(regResult[2]) &#123;</div><div class=\"line\"></div><div class=\"line\">   if(regResult[3]) &#123;</div><div class=\"line\"></div><div class=\"line\">      if(typeof document.getElementsByClassName === &apos;function&apos;) &#123;</div><div class=\"line\"></div><div class=\"line\">        var doms = document.getElementsByClassName(regResult[3]);</div><div class=\"line\"></div><div class=\"line\">        if(doms) &#123;</div><div class=\"line\"></div><div class=\"line\">          result = converToArray(doms);</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">     //如果不支持getElementsByClassName函数</div><div class=\"line\"></div><div class=\"line\">     else &#123;</div><div class=\"line\"></div><div class=\"line\">      var allDoms = document.getElementsByTagName(&quot;*&quot;) ;</div><div class=\"line\"></div><div class=\"line\">       for(var i = 0, len = allDoms.length; i &lt; len; i++) &#123;</div><div class=\"line\"></div><div class=\"line\">         if(allDoms[i].className.search(new RegExp(regResult[2])) &gt; -1) &#123;</div><div class=\"line\"></div><div class=\"line\">           result.push(allDoms[i]);</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"> &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"> //如果是标签选择器</div><div class=\"line\"></div><div class=\"line\"> else if(regResult[3]) &#123;</div><div class=\"line\"></div><div class=\"line\">   var doms = document.getElementsByTagName(regResult[3].toLowerCase());</div><div class=\"line\"></div><div class=\"line\">   if(doms) &#123;</div><div class=\"line\"></div><div class=\"line\">     result = converToArray(doms);</div><div class=\"line\"></div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\"> &#125;</div><div class=\"line\"></div><div class=\"line\"> return result;</div><div class=\"line\"></div><div class=\"line\"> &#125;</div><div class=\"line\"></div><div class=\"line\"> function converToArray(nodes)&#123;</div><div class=\"line\"></div><div class=\"line\">    var array = null;        </div><div class=\"line\"></div><div class=\"line\">    try&#123;       </div><div class=\"line\"></div><div class=\"line\">     array = Array.prototype.slice.call(nodes,0);//针对非IE浏览器        </div><div class=\"line\"></div><div class=\"line\">   &#125;catch(ex)&#123;</div><div class=\"line\"></div><div class=\"line\">    array = new Array();        </div><div class=\"line\"></div><div class=\"line\">   for( var i = 0 ,len = nodes.length; i &lt; len ; i++ ) &#123;</div><div class=\"line\"></div><div class=\"line\">     array.push(nodes[i])        </div><div class=\"line\"></div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">  &#125;     </div><div class=\"line\"></div><div class=\"line\">  return array;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">15、请评价以下代码并给出改进意见。</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">if(window.addEventListener)&#123;</div><div class=\"line\"></div><div class=\"line\">    var addListener = function(el,type,listener,useCapture)&#123;</div><div class=\"line\"></div><div class=\"line\">        el.addEventListener(type,listener,useCapture);</div><div class=\"line\"></div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">else if(document.all)&#123;</div><div class=\"line\"></div><div class=\"line\">    addListener = function(el,type,listener)&#123;</div><div class=\"line\"></div><div class=\"line\">        el.attachEvent(&quot;on&quot;+type,function()&#123;</div><div class=\"line\"></div><div class=\"line\">          listener.apply(el);</div><div class=\"line\"></div><div class=\"line\">      &#125;);</div><div class=\"line\"></div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">不应该在if和else语句中声明addListener函数，应该先声明；</div><div class=\"line\">不需要使用window.addEventListener或document.all来进行检测浏览器，应该使用能力检测；</div><div class=\"line\">由于attachEvent在IE中有this指向问题，所以调用它时需要处理一下</div><div class=\"line\">改进如下：</div><div class=\"line\"></div><div class=\"line\">function addEvent(elem, type, handler)&#123;</div><div class=\"line\"></div><div class=\"line\">　　if(elem.addEventListener)&#123;</div><div class=\"line\"></div><div class=\"line\">　　　　elem.addEventListener(type, handler, false);</div><div class=\"line\"></div><div class=\"line\">　　&#125;else if(elem.attachEvent)&#123;</div><div class=\"line\"></div><div class=\"line\">　　　　elem[&apos;temp&apos; + type + handler] = handler;</div><div class=\"line\"></div><div class=\"line\">　　　　elem[type + handler] = function()&#123;</div><div class=\"line\"></div><div class=\"line\">　　　　elem[&apos;temp&apos; + type + handler].apply(elem);</div><div class=\"line\"></div><div class=\"line\">　　&#125;;</div><div class=\"line\"></div><div class=\"line\">　　elem.attachEvent(&apos;on&apos; + type, elem[type + handler]);　</div><div class=\"line\"></div><div class=\"line\">  &#125;else&#123;</div><div class=\"line\"></div><div class=\"line\">　　elem[&apos;on&apos; + type] = handler;</div><div class=\"line\"></div><div class=\"line\">　　&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">16、给String对象添加一个方法，传入一个string类型的参数，然后将string的每个字符间价格空格返回，例如：</div><div class=\"line\">addSpace(“hello world”) // -&gt; ‘h e l l o  w o r l d’</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">String.prototype.spacify = function()&#123;</div><div class=\"line\"></div><div class=\"line\">      return this.split(&apos;&apos;).join(&apos; &apos;);</div><div class=\"line\"></div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">接着上述问题答案提问，1）直接在对象的原型上添加方法是否安全？尤其是在Object对象上。(这个我没能答出？希望知道的说一下。)　2）函数声明与函数表达式的区别？</div><div class=\"line\"></div><div class=\"line\">答案：在js中，解析器在向执行环境中加载数据时，对函数声明和函数表达式并非是一视同仁的，解析器会率先读取函数声明，并使其在执行任何代码之前可用（可以访问），至于函数表达式，则必须等到解析器执行到它所在的代码行，才会真正被解析执行。</div><div class=\"line\"></div><div class=\"line\">17、定义一个log方法，让它可以代理console.log的方法。</div><div class=\"line\">可行的方法一：</div><div class=\"line\"></div><div class=\"line\">function log(msg)　&#123;</div><div class=\"line\"></div><div class=\"line\">    console.log(msg);</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">log(&quot;hello world!&quot;) // hello world!</div><div class=\"line\"></div><div class=\"line\">如果要传入多个参数呢？显然上面的方法不能满足要求，所以更好的方法是：</div><div class=\"line\"></div><div class=\"line\">function log()&#123;</div><div class=\"line\"></div><div class=\"line\">    console.log.apply(console, arguments);</div><div class=\"line\"></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">到此，追问apply和call方法的异同。</div><div class=\"line\"></div><div class=\"line\">对于apply和call两者在作用上是相同的，即是调用一个对象的一个方法，以另一个对象替换当前对象。将一个函数的对象上下文从初始的上下文改变为由 thisObj 指定的新对象。</div><div class=\"line\"></div><div class=\"line\">但两者在参数上有区别的。对于第一个参数意义都一样，但对第二个参数： apply传入的是一个参数数组，也就是将多个参数组合成为一个数组传入，而call则作为call的参数传入（从第二个参数开始）。 如 func.call(func1,var1,var2,var3)对应的apply写法为：func.apply(func1,[var1,var2,var3]) 。</div><div class=\"line\"></div><div class=\"line\">18、在Javascript中什么是伪数组？如何将伪数组转化为标准数组？</div><div class=\"line\">伪数组（类数组）：无法直接调用数组方法或期望length属性有什么特殊的行为，但仍可以对真正数组遍历方法来遍历它们。典型的是函数的argument参数，还有像调用getElementsByTagName,document.childNodes之类的,它们都返回NodeList对象都属于伪数组。可以使用Array.prototype.slice.call(fakeArray)将数组转化为真正的Array对象。</div><div class=\"line\"></div><div class=\"line\">假设接第八题题干，我们要给每个log方法添加一个”(app)”前缀，比如’hello world!’ -&gt;’(app)hello world!’。方法如下：</div><div class=\"line\"></div><div class=\"line\">function log()&#123;</div><div class=\"line\"></div><div class=\"line\">      var args = Array.prototype.slice.call(arguments);  //为了使用unshift数组方法，将argument转化为真正的数组</div><div class=\"line\"></div><div class=\"line\">      args.unshift(&apos;(app)&apos;);</div><div class=\"line\"></div><div class=\"line\">      console.log.apply(console, args);</div><div class=\"line\"></div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">19、对作用域上下文和this的理解，看下列代码：</div><div class=\"line\">var User = &#123;</div><div class=\"line\"></div><div class=\"line\">  count: 1,</div><div class=\"line\"></div><div class=\"line\">  getCount: function() &#123;</div><div class=\"line\"></div><div class=\"line\">    return this.count;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">console.log(User.getCount());  // what?</div><div class=\"line\"></div><div class=\"line\">var func = User.getCount;</div><div class=\"line\"></div><div class=\"line\">console.log(func());  // what?</div><div class=\"line\"></div><div class=\"line\">问两处console输出什么？为什么？</div><div class=\"line\"></div><div class=\"line\">答案是1和undefined。</div><div class=\"line\"></div><div class=\"line\">func是在winodw的上下文中被执行的，所以会访问不到count属性。</div><div class=\"line\"></div><div class=\"line\">继续追问，那么如何确保Uesr总是能访问到func的上下文，即正确返回1。正确的方法是使用Function.prototype.bind。兼容各个浏览器完整代码如下：</div><div class=\"line\"></div><div class=\"line\">Function.prototype.bind = Function.prototype.bind || function(context)&#123;</div><div class=\"line\"></div><div class=\"line\">   var self = this;</div><div class=\"line\"></div><div class=\"line\">   return function()&#123;</div><div class=\"line\"></div><div class=\"line\">      return self.apply(context, arguments);</div><div class=\"line\"></div><div class=\"line\">   &#125;;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var func = User.getCount.bind(User);</div><div class=\"line\"></div><div class=\"line\">console.log(func());</div><div class=\"line\"></div><div class=\"line\">20、原生JS的window.onload与Jquery的$(document).ready(function()&#123;&#125;)有什么不同？如何用原生JS实现Jq的ready方法？</div><div class=\"line\">window.onload()方法是必须等到页面内包括图片的所有元素加载完毕后才能执行。</div><div class=\"line\"></div><div class=\"line\">$(document).ready()是DOM结构绘制完毕后就执行，不必等到加载完毕。</div><div class=\"line\"></div><div class=\"line\">/*</div><div class=\"line\"></div><div class=\"line\"> * 传递函数给whenReady()</div><div class=\"line\"></div><div class=\"line\"> * 当文档解析完毕且为操作准备就绪时，函数作为document的方法调用</div></pre></td></tr></table></figure></p>\n<p>var whenReady = (function() {               //这个函数返回whenReady()函数</p>\n<pre><code>var funcs = [];             //当获得事件时，要运行的函数\n\nvar ready = false;          //当触发事件处理程序时,切换为true\n\n//当文档就绪时,调用事件处理程序\n\nfunction handler(e) {\n\n    if(ready) return;       //确保事件处理程序只完整运行一次\n\n    //如果发生onreadystatechange事件，但其状态不是complete的话,那么文档尚未准备好\n\n    if(e.type === &apos;onreadystatechange&apos; &amp;&amp; document.readyState !== &apos;complete&apos;) {\n\n        return;\n\n    }\n\n    //运行所有注册函数\n\n    //注意每次都要计算funcs.length\n\n    //以防这些函数的调用可能会导致注册更多的函数\n\n    for(var i=0; i&lt;funcs.length; i++) {\n\n        funcs[i].call(document);\n\n    }\n\n    //事件处理函数完整执行,切换ready状态, 并移除所有函数\n\n    ready = true;\n\n    funcs = null;\n\n}\n\n//为接收到的任何事件注册处理程序\n\nif(document.addEventListener) {\n\n    document.addEventListener(&apos;DOMContentLoaded&apos;, handler, false);\n\n    document.addEventListener(&apos;readystatechange&apos;, handler, false);            //IE9+\n\n    window.addEventListener(&apos;load&apos;, handler, false);\n\n}else if(document.attachEvent) {\n\n    document.attachEvent(&apos;onreadystatechange&apos;, handler);\n\n    window.attachEvent(&apos;onload&apos;, handler);\n\n}\n\n//返回whenReady()函数\n\nreturn function whenReady(fn) {\n\n    if(ready) { fn.call(document); }\n\n    else { funcs.push(fn); }\n\n}\n</code></pre><p>})();<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">如果上述代码十分难懂，下面这个简化版：</div></pre></td></tr></table></figure></p>\n<p>function ready(fn){</p>\n<pre><code>if(document.addEventListener) {//标准浏览器\n\n    document.addEventListener(&apos;DOMContentLoaded&apos;, function() {\n\n        //注销事件, 避免反复触发\n\n        document.removeEventListener(&apos;DOMContentLoaded&apos;,arguments.callee, false);\n\n        fn();//执行函数\n\n    }, false);\n\n}else if(document.attachEvent) {//IE\n\n    document.attachEvent(&apos;onreadystatechange&apos;, function() {\n\n        if(document.readyState == &apos;complete&apos;) {\n\n            document.detachEvent(&apos;onreadystatechange&apos;, arguments.callee);\n\n            fn();//函数执行\n\n        }\n\n    });\n\n}\n</code></pre><p>};<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div></pre></td><td class=\"code\"><pre><div class=\"line\">21、（设计题）想实现一个对页面某个节点的拖曳？如何做？（使用原生JS）</div><div class=\"line\">回答出概念即可，下面是几个要点</div><div class=\"line\"></div><div class=\"line\">1. 给需要拖拽的节点绑定mousedown, mousemove, mouseup事件</div><div class=\"line\"></div><div class=\"line\">2. mousedown事件触发后，开始拖拽</div><div class=\"line\"></div><div class=\"line\">3. mousemove时，需要通过event.clientX和clientY获取拖拽位置，并实时更新位置</div><div class=\"line\"></div><div class=\"line\">4. mouseup时，拖拽结束</div><div class=\"line\"></div><div class=\"line\">5. 需要注意浏览器边界的情况</div><div class=\"line\"></div><div class=\"line\">22、请实现如下功能</div><div class=\"line\"></div><div class=\"line\">     function setcookie(name,value,days)&#123;  //给cookie增加一个时间变量</div><div class=\"line\"></div><div class=\"line\">    　　var exp = new Date();</div><div class=\"line\"></div><div class=\"line\">    　　exp.setTime(exp.getTime() + days*24*60*60*1000); //设置过期时间为days天</div><div class=\"line\"></div><div class=\"line\">    　　document.cookie = name + &quot;=&quot;+ escape (value) + &quot;;expires=&quot; + exp.toGMTString();</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    function getCookie(name)&#123;</div><div class=\"line\"></div><div class=\"line\">    　　var result = &quot;&quot;;</div><div class=\"line\"></div><div class=\"line\">    　　var myCookie = &quot;&quot;+document.cookie+&quot;;&quot;;</div><div class=\"line\"></div><div class=\"line\">    　　var searchName = &quot;+name+&quot;=&quot;;</div><div class=\"line\"></div><div class=\"line\">    　　var startOfCookie = myCookie.indexOf(searchName);</div><div class=\"line\"></div><div class=\"line\">    　　var endOfCookie;</div><div class=\"line\"></div><div class=\"line\">    　　if(satrtOfCookie != -1)&#123;</div><div class=\"line\"></div><div class=\"line\">    　　　　startOfcookie += searchName.length;</div><div class=\"line\"></div><div class=\"line\">    　　　　endOfCookie = myCookie.indexOf(&quot;;&quot;,startOfCookie);</div><div class=\"line\"></div><div class=\"line\">    　　　　result = (myCookie.substring(startOfCookie,endOfCookie));</div><div class=\"line\"></div><div class=\"line\">    　　&#125;</div><div class=\"line\"></div><div class=\"line\">    　　return result;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    (function()&#123;</div><div class=\"line\"></div><div class=\"line\">    　　var oTips = document.getElementById(&apos;tips&apos;);//假设tips的id为tips</div><div class=\"line\"></div><div class=\"line\">    　　var page = &#123;</div><div class=\"line\"></div><div class=\"line\">    　　check: function()&#123;//检查tips的cookie是否存在并且允许显示</div><div class=\"line\"></div><div class=\"line\">    　　　　var tips = getCookie(&apos;tips&apos;);</div><div class=\"line\"></div><div class=\"line\">    　　　　if(!tips || tips == &apos;show&apos;) return true;//tips的cookie不存在</div><div class=\"line\"></div><div class=\"line\">    　　　　if(tips == &quot;never_show_again&quot;) return false;</div><div class=\"line\"></div><div class=\"line\">    　　&#125;,</div><div class=\"line\"></div><div class=\"line\">    　　hideTip: function(bNever)&#123;</div><div class=\"line\"></div><div class=\"line\">    　　　　if(bNever) setcookie(&apos;tips&apos;, &apos;never_show_again&apos;, 365);</div><div class=\"line\"></div><div class=\"line\">    　　　　oTips.style.display = &quot;none&quot;;//隐藏</div><div class=\"line\"></div><div class=\"line\">    　　&#125;,</div><div class=\"line\"></div><div class=\"line\">    　　showTip: function()&#123;</div><div class=\"line\"></div><div class=\"line\">    　　oTips.style.display = &quot;inline&quot;;//显示，假设tips为行级元素</div><div class=\"line\"></div><div class=\"line\">    　　&#125;,</div><div class=\"line\"></div><div class=\"line\">    　　init: function()&#123;</div><div class=\"line\"></div><div class=\"line\">    　　　　var _this = this;</div><div class=\"line\"></div><div class=\"line\">    　　　　if(this.check())&#123;</div><div class=\"line\"></div><div class=\"line\">    　　　　_this.showTip();</div><div class=\"line\"></div><div class=\"line\">    　　　　setcookie(&apos;tips&apos;, &apos;show&apos;, 1);</div><div class=\"line\"></div><div class=\"line\">    　　&#125;</div><div class=\"line\"></div><div class=\"line\">    　　oTips.onclick = function()&#123;</div><div class=\"line\"></div><div class=\"line\">    　　　　_this.hideTip(true);</div><div class=\"line\"></div><div class=\"line\">    　　&#125;;</div><div class=\"line\"></div><div class=\"line\">    　　&#125;</div><div class=\"line\"></div><div class=\"line\">    　　&#125;;</div><div class=\"line\"></div><div class=\"line\">      page.init();</div><div class=\"line\"></div><div class=\"line\">    &#125;)();</div></pre></td></tr></table></figure></p>\n<p>23、说出以下函数的作用是？空白区域应该填写什么？<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\">//define</div><div class=\"line\"></div><div class=\"line\">(function(window)&#123;</div><div class=\"line\"></div><div class=\"line\">    function fn(str)&#123;</div><div class=\"line\"></div><div class=\"line\">        this.str=str;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    fn.prototype.format = function()&#123;</div><div class=\"line\"></div><div class=\"line\">        var arg = ______;</div><div class=\"line\"></div><div class=\"line\">        return this.str.replace(_____,function(a,b)&#123;</div><div class=\"line\"></div><div class=\"line\">             return arg[b]||&quot;&quot;;</div><div class=\"line\"></div><div class=\"line\">      &#125;);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    window.fn = fn;</div><div class=\"line\"></div><div class=\"line\">&#125;)(window);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">//use</div><div class=\"line\"></div><div class=\"line\">(function()&#123;</div><div class=\"line\"></div><div class=\"line\">    var t = new fn(&apos;&lt;p&gt;&lt;a href=&quot;&#123;0&#125;&quot;&gt;&#123;1&#125;&lt;/a&gt;&lt;span&gt;&#123;2&#125;&lt;/span&gt;&lt;/p&gt;&apos;);</div><div class=\"line\"></div><div class=\"line\">    console.log(t.format(&apos;http://www.alibaba.com&apos;,&apos;Alibaba&apos;,&apos;Welcome&apos;));</div><div class=\"line\"></div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure></p>\n<p>答案：访函数的作用是使用format函数将函数的参数替换掉{0}这样的内容，返回一个格式化后的结果：</p>\n<p>第一个空是：arguments</p>\n<p>第二个空是：/{(\\d+)}/ig</p>\n<p>24、Javascript作用链域?<br>理解变量和函数的访问范围和生命周期，全局作用域与局部作用域的区别，JavaScript中没有块作用域，函数的嵌套形成不同层次的作用域，嵌套的层次形成链式形式，通过作用域链查找属性的规则需要深入理解。</p>\n<p>25、谈谈This对象的理解。<br>理解不同形式的函数调用方式下的this指向，理解事件函数、定时函数中的this指向，函数的调用形式决定了this的指向。</p>\n<p>26、eval是做什么的？<br>它的功能是把对应的字符串解析成JS代码并运行；应该避免使用eval，不安全，非常耗性能（2个步骤，一次解析成js语句，一次执行）</p>\n<p>27、关于事件，IE与火狐的事件机制有什么区别？ 如何阻止冒泡？<br>[1].在IE中,事件对象是作为一个全局变量来保存和维护的.所有的浏览器事件,不管是用户触发的，还是其他事件,都会更新window.event对象.所以在代码中，只要调用window.event就可以获取事件对象， 再event.srcElement就可以取得触发事件的元素进行进一步处理.</p>\n<p>[2].在FireFox中，事件对象却不是全局对象，一般情况下，是现场发生，现场使用，FireFox把事件对象自动传给事件处理程序.</p>\n<p>关于事件的兼容性处理要熟练掌握，事件对象具体哪些属性存在兼容性问题，IE与标准事件模型事件冒泡与事件捕获的支持要理解</p>\n<p>28、什么是闭包（closure），为什么要用它？<br>简单的理解是函数的嵌套形成闭包，闭包包括函数本身已经它的外部作用域</p>\n<p>使用闭包可以形成独立的空间，延长变量的生命周期，报存中间状态值</p>\n<p>29、javascript 代码中的”use strict”;是什么意思 ? 使用它区别是什么？<br>意思是使用严格模式，使用严格模式，一些不规范的语法将不再支持</p>\n<p>30、如何判断一个对象是否属于某个类？<br>Instanceof   constructor</p>\n<p>31、new操作符具体干了什么呢?<br>1、创建一个空对象，并且 this 变量引用该对象，同时还继承了该函数的原型。</p>\n<p>  2、属性和方法被加入到 this 引用的对象中。</p>\n<p>  3、新创建的对象由 this 所引用，并且最后隐式的返回 this 。</p>\n<p>32、用原生JavaScript的实现过什么功能吗？<br>主要考察原生js的实践经验</p>\n<p>33、Javascript中，有一个函数，执行时对象查找时，永远不会去查找原型，这个函数是？<br>HasOwnProperty</p>\n<p>34、对JSON的了解？<br>轻量级数据交互格式，可以形成复杂的嵌套格式，解析非常方便</p>\n<p>35、js延迟加载的方式有哪些？<br>    `方案一：<script>标签的async=”async”属性（详细参见：script标签的async属性）</p>\n<pre><code>方案二：&lt;script&gt;标签的defer=&quot;defer&quot;属性\n\n方案三：动态创建&lt;script&gt;标签\n\n方案四：AJAX eval（使用AJAX得到脚本内容，然后通过eval_r(xmlhttp.responseText)来运行脚本）\n\n方案五：iframe方式`\n</code></pre><p>36、模块化开发怎么做？<br>理解模块化开发模式：浏览器端requirejs，seajs；服务器端nodejs；ES6模块化；fis、webpack等前端整体模块化解决方案；grunt、gulp等前端工作流的使用</p>\n<p>37、AMD（Modules/Asynchronous-Definition）、CMD（Common Module Definition）规范区别？<br>理解这两种规范的差异，主要通过requirejs与seajs的对比，理解模块的定义与引用方式的差异以及这两种规范的设计原则</p>\n<p>38、requireJS的核心原理是什么？（如何动态加载的？如何避免多次加载的？如何 缓存的？）<br>核心是js的加载模块，通过正则匹配模块以及模块的依赖关系，保证文件加载的先后顺序，根据文件的路径对加载过的文件做了缓存</p>\n<p>39、让你自己设计实现一个requireJS，你会怎么做？<br>核心是实现js的加载模块，维护js的依赖关系，控制好文件加载的先后顺序</p>\n<p>40、谈一谈你对ECMAScript6的了解？<br>ES6新的语法糖，类，模块化等新特性</p>\n<p>41、ECMAScript6 怎么写class么，为什么会出现class这种东西?<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Point &#123;</div><div class=\"line\"></div><div class=\"line\">  constructor(x, y) &#123;</div><div class=\"line\"></div><div class=\"line\">    this.x = x;</div><div class=\"line\"></div><div class=\"line\">    this.y = y;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  toString() &#123;</div><div class=\"line\"></div><div class=\"line\">     return &apos;(&apos;+this.x+&apos;, &apos;+this.y+&apos;)&apos;;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>42、异步加载的方式有哪些？<br>方案一：<script>标签的async=”async”属性（详细参见：script标签的async属性）</p>\n<p>方案二：<script>标签的defer=”defer”属性</p>\n<p>方案三：动态创建<script>标签</p>\n<p>方案四：AJAX eval（使用AJAX得到脚本内容，然后通过eval_r(xmlhttp.responseText)来运行脚本）</p>\n<p>方案五：iframe方式</p>\n<p>43、documen.write和 innerHTML的区别?<br>document.write是重写整个document, 写入内容是字符串的html</p>\n<p>innerHTML是HTMLElement的属性，是一个元素的内部html内容</p>\n<p>44、DOM操作——怎样添加、移除、移动、复制、创建和查找节点?<br>（1）创建新节点</p>\n<pre><code>createDocumentFragment()    //创建一个DOM片段\n\ncreateElement_x()   //创建一个具体的元素\n\ncreateTextNode()   //创建一个文本节点\n</code></pre><p>（2）添加、移除、替换、插入</p>\n<pre><code>appendChild()\n\nremoveChild()\n\nreplaceChild()\n\ninsertBefore()\n</code></pre><p>（3）查找</p>\n<pre><code>getElementsByTagName()    //通过标签名称\n\ngetElementsByName()    //通过元素的Name属性的值\n\ngetElementById()    //通过元素Id，唯一性\n</code></pre><p>45、call() 和 .apply() 的含义和区别？<br>apply的参数是数组形式，call的参数是单个的值，除此之外在使用上没有差别，重点理解这两个函数调用的this改变</p>\n<p>46、数组和对象有哪些原生方法，列举一下？<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\">Array.concat( ) 连接数组</div><div class=\"line\"></div><div class=\"line\">Array.join( ) 将数组元素连接起来以构建一个字符串</div><div class=\"line\"></div><div class=\"line\">Array.length 数组的大小</div><div class=\"line\"></div><div class=\"line\">Array.pop( ) 删除并返回数组的最后一个元素</div><div class=\"line\"></div><div class=\"line\">Array.push( ) 给数组添加元素</div><div class=\"line\"></div><div class=\"line\">Array.reverse( ) 颠倒数组中元素的顺序</div><div class=\"line\"></div><div class=\"line\">Array.shift( ) 将元素移出数组</div><div class=\"line\"></div><div class=\"line\">Array.slice( ) 返回数组的一部分</div><div class=\"line\"></div><div class=\"line\">Array.sort( ) 对数组元素进行排序</div><div class=\"line\"></div><div class=\"line\">Array.splice( ) 插入、删除或替换数组的元素</div><div class=\"line\"></div><div class=\"line\">Array.toLocaleString( ) 把数组转换成局部字符串</div><div class=\"line\"></div><div class=\"line\">Array.toString( ) 将数组转换成一个字符串</div><div class=\"line\"></div><div class=\"line\">Array.unshift( ) 在数组头部插入一个元素</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">Object.hasOwnProperty( ) 检查属性是否被继承</div><div class=\"line\"></div><div class=\"line\">Object.isPrototypeOf( ) 一个对象是否是另一个对象的原型</div><div class=\"line\"></div><div class=\"line\">Object.propertyIsEnumerable( ) 是否可以通过for/in循环看到属性</div><div class=\"line\"></div><div class=\"line\">Object.toLocaleString( ) 返回对象的本地字符串表示</div><div class=\"line\"></div><div class=\"line\">Object.toString( ) 定义一个对象的字符串表示</div><div class=\"line\"></div><div class=\"line\">Object.valueOf( ) 指定对象的原始值</div></pre></td></tr></table></figure></p>\n<p>47、JS 怎么实现一个类。怎么实例化这个类<br>严格来讲js中并没有类的概念，不过js中的函数可以作为构造函数来使用，通过new来实例化，其实函数本身也是一个对象。</p>\n<p>48、JavaScript中的作用域与变量声明提升？<br>理解JavaScript的预解析机制，js的运行主要分两个阶段：js的预解析和运行，预解析阶段所有的变量声明和函数定义都会提前，但是变量的赋值不会提前</p>\n<p>49、如何编写高性能的Javascript？<br>使用 DocumentFragment 优化多次 append</p>\n<p>通过模板元素 clone ，替代 createElement</p>\n<p>使用一次 innerHTML 赋值代替构建 dom 元素</p>\n<p>使用 firstChild 和 nextSibling 代替 childNodes 遍历 dom 元素</p>\n<p>使用 Array 做为 StringBuffer ，代替字符串拼接的操作</p>\n<p>将循环控制量保存到局部变量</p>\n<p>顺序无关的遍历时，用 while 替代 for</p>\n<p>将条件分支，按可能性顺序从高到低排列</p>\n<p>在同一条件子的多（ &gt;2 ）条件分支时，使用 switch 优于 if</p>\n<p>使用三目运算符替代条件分支</p>\n<p>需要不断执行的时候，优先考虑使用 setInterval</p>\n<p>50、那些操作会造成内存泄漏？<br>闭包，循环</p>\n<p>51、javascript对象的几种创建方式？</p>\n<pre><code>1. 工厂模式\n\n2. 构造函数模式\n\n3. 原型模式\n\n4. 混合构造函数和原型模式\n\n5. 动态原型模式\n\n6. 寄生构造函数模式\n\n7. 稳妥构造函数模式\n</code></pre><p>52、javascript继承的 6 种方法？</p>\n<pre><code>1. 原型链继承\n\n2. 借用构造函数继承\n\n3. 组合继承(原型+借用构造)\n\n4. 原型式继承\n\n5. 寄生式继承\n\n6. 寄生组合式继承\n</code></pre><p>53、eval是做什么的？</p>\n<pre><code>1. 它的功能是把对应的字符串解析成JS代码并运行\n\n2. 应该避免使用eval，不安全，非常耗性能（2次，一次解析成js语句，一次执行）\n</code></pre><p>54、JavaScript 原型，原型链 ? 有什么特点？</p>\n<pre><code>1. 原型对象也是普通的对象，是对象一个自带隐式的 __proto__ 属性，原型也有可能有自己的原型，如果一个原型对象的原型不为 null 的话，我们就称之为原型链\n\n2. 原型链是由一些用来继承和共享属性的对象组成的（有限的）对象链\n</code></pre><p>55、事件、IE与火狐的事件机制有什么区别？ 如何阻止冒泡？</p>\n<pre><code>1. 我们在网页中的某个操作（有的操作对应多个事件）。例如：当我们点击一个按钮就会产生一个事件。是可以被 JavaScript 侦测到的行为\n\n2. 事件处理机制：IE是事件冒泡、firefox同时支持两种事件模型，也就是：捕获型事件和冒泡型事件\n\n3. ev.stopPropagation();\n</code></pre><p>注意旧ie的方法：ev.cancelBubble = true;</p>\n<p>56、简述一下Sass、Less，且说明区别？<br>他们是动态的样式语言，是CSS预处理器,CSS上的一种抽象层。他们是一种特殊的语法/语言而编译成CSS。</p>\n<p>变量符不一样，less是@，而Sass是$;</p>\n<p>Sass支持条件语句，可以使用if{}else{},for{}循环等等。而Less不支持;</p>\n<p>Sass是基于Ruby的，是在服务端处理的，而Less是需要引入less.js来处理Less代码输出Css到浏览器</p>\n<p>57、关于javascript中apply()和call()方法的区别？<br>相同点:两个方法产生的作用是完全一样的</p>\n<p>不同点:方法传递的参数不同</p>\n<p>Object.call(this,obj1,obj2,obj3)</p>\n<p>Object.apply(this,arguments)</p>\n<p>apply()接收两个参数，一个是函数运行的作用域(this)，另一个是参数数组。</p>\n<p>call()方法第一个参数与apply()方法相同，但传递给函数的参数必须列举出来。</p>\n<p>58、简述一下JS中的闭包？<br>闭包用的多的两个作用：读取函数内部的变量值；让这些变量值始终保存着(在内存中)。</p>\n<p>同时需要注意的是：闭包慎用，不滥用，不乱用，由于函数内部的变量都被保存在内存中，会导致内存消耗大。</p>\n<p>59、说说你对this的理解？<br>在JavaScript中，this通常指向的是我们正在执行的函数本身，或者是，指向该函数所属的对象。</p>\n<p>全局的this → 指向的是Window</p>\n<p>函数中的this → 指向的是函数所在的对象</p>\n<p>对象中的this → 指向其本身</p>\n<p>60、分别阐述split(),slice(),splice(),join()？<br>join()用于把数组中的所有元素拼接起来放入一个字符串。所带的参数为分割字符串的分隔符，默认是以逗号分开。归属于Array</p>\n<p>split()即把字符串分离开，以数组方式存储。归属于Stringstring</p>\n<p>slice() 方法可从已有的数组中返回选定的元素。该方法并不会修改数组，而是返回一个子数组。如果想删除数组中的一段元素，应该使用方法 Array.splice()</p>\n<p>splice() 方法向/从数组中添加/删除项目，然后返回被删除的项目。返回的是含有被删除的元素的数组。</p>\n<p>61、事件委托是什么？<br>让利用事件冒泡的原理，让自己的所触发的事件，让他的父元素代替执行！</p>\n<p>62、如何阻止事件冒泡和默认事件？<br>阻止浏览器的默认行为</p>\n<p>window.event?window.event.returnValue=false:e.preventDefault();</p>\n<p>停止事件冒泡</p>\n<p>window.event?window.event.cancelBubble=true:e.stopPropagation();</p>\n<p>原生JavaScript中，return false;只阻止默认行为，不阻止冒泡，jQuery中的return false;既阻止默认行为，又阻止冒泡</p>\n<p>63、添加 删除 替换 插入到某个接点的方法？<br>obj.appendChidl()</p>\n<p>obj.removeChild()</p>\n<p>obj.replaceChild()</p>\n<p>obj.innersetBefore()</p>\n<p>64、你用过require.js吗？它有什么特性？<br>（1）实现js文件的异步加载，避免网页失去响应；</p>\n<p>（2）管理模块之间的依赖性，便于代码的编写和维护。</p>\n<p>65、谈一下JS中的递归函数，并且用递归简单实现阶乘？<br>递归即是程序在执行过程中不断调用自身的编程技巧，当然也必须要有一个明确的结束条件，不然就会陷入死循环。</p>\n<p>66、请用正则表达式写一个简单的邮箱验证。<br>/^[a-zA-Z0-9<em>-]+@[a-zA-Z0-9</em>-]+(.[a-zA-Z0-9_-]+)+$/;</p>\n<p>67、简述一下你对web性能优化的方案？<br>    1、尽量减少 HTTP 请求</p>\n<p>2、使用浏览器缓存</p>\n<p>3、使用压缩组件</p>\n<p>4、图片、JS的预载入</p>\n<p>5、将脚本放在底部</p>\n<p>6、将样式文件放在页面顶部</p>\n<p>7、使用外部的JS和CSS</p>\n<p>8、精简代码</p>\n<p>68、在JS中有哪些会被隐式转换为false<br>Undefined、null、关键字false、NaN、零、空字符串</p>\n<p>69、定时器setInterval有一个有名函数fn1，setInterval（fn1,500）与setInterval（fn1(),500）有什么区别？<br>第一个是重复执行每500毫秒执行一次，后面一个只执行一次。</p>\n<p>70、外部JS文件出现中文字符，会出现什么问题，怎么解决？<br>会出现乱码，加charset=”GB2312”;</p>\n<p>71、谈谈浏览器的内核，并且说一下什么是内核？<br>Trident ([‘traɪd(ə)nt])–IE，Gecko ([‘gekəʊ])–Firefox, Presto ([‘prestəʊ])–opera,webkit—谷歌和Safari</p>\n<p>浏览器内核又可以分成两部分：渲染引擎和 JS 引擎。它负责取得网页的内容（HTML、XML、图像等等）、整理讯息（例如加入 CSS 等），以及计算网页的显示方式，然后会输出至显示器或打印机。JS 引擎则是解析 Javascript 语言，执行 javascript 语言来实现网页的动态效果。</p>\n<p>72、JavaScript原型，原型链 ? 有什么特点？</p>\n<ul>\n<li><p>原型对象也是普通的对象，是对象一个自带隐式的 <code>__proto__</code> 属性，原型也有可能有自己的原型，如果一个原型对象的原型不为null的话，我们就称之为原型链。</p>\n</li>\n<li><p>原型链是由一些用来继承和共享属性的对象组成的（有限的）对象链。</p>\n</li>\n<li><p>JavaScript的数据对象有那些属性值？</p>\n</li>\n</ul>\n<p>　　writable：这个属性的值是否可以改。</p>\n<p>　　configurable：这个属性的配置是否可以删除，修改。</p>\n<p>　　enumerable：这个属性是否能在for…in循环中遍历出来或在Object.keys中列举出来。</p>\n<p>　　value：属性值。</p>\n<ul>\n<li>当我们需要一个属性的时，Javascript引擎会先看当前对象中是否有这个属性， 如果没有的话，就会查找他的Prototype对象是否有这个属性。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">function clone(proto) &#123;</div><div class=\"line\"></div><div class=\"line\">　　function Dummy() &#123; &#125;</div><div class=\"line\"></div><div class=\"line\">　　Dummy.prototype = proto;</div><div class=\"line\"></div><div class=\"line\">　　Dummy.prototype.constructor = Dummy;</div><div class=\"line\"></div><div class=\"line\">　　return new Dummy(); //等价于Object.create(Person);</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">       function object(old) &#123;</div><div class=\"line\"></div><div class=\"line\">        function F() &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">        F.prototype = old;</div><div class=\"line\"></div><div class=\"line\">        return new F();</div><div class=\"line\"></div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">   var newObj = object(oldObject);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>73、写一个通用的事件侦听器函数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div></pre></td><td class=\"code\"><pre><div class=\"line\">// event(事件)工具集，</div><div class=\"line\"></div><div class=\"line\">markyun.Event = &#123;</div><div class=\"line\"></div><div class=\"line\">    // 页面加载完成后</div><div class=\"line\"></div><div class=\"line\">    readyEvent : function(fn) &#123;</div><div class=\"line\"></div><div class=\"line\">        if (fn==null) &#123;</div><div class=\"line\"></div><div class=\"line\">            fn=document;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        var oldonload = window.onload;</div><div class=\"line\"></div><div class=\"line\">        if (typeof window.onload != &apos;function&apos;) &#123;</div><div class=\"line\"></div><div class=\"line\">            window.onload = fn;</div><div class=\"line\"></div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\"></div><div class=\"line\">            window.onload = function() &#123;</div><div class=\"line\"></div><div class=\"line\">                oldonload();</div><div class=\"line\"></div><div class=\"line\">                fn();</div><div class=\"line\"></div><div class=\"line\">            &#125;;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\">    // 视能力分别使用dom0||dom2||IE方式 来绑定事件</div><div class=\"line\"></div><div class=\"line\">    // 参数： 操作的元素,事件名称 ,事件处理程序</div><div class=\"line\"></div><div class=\"line\">    addEvent : function(element, type, handler) &#123;</div><div class=\"line\"></div><div class=\"line\">        if (element.addEventListener) &#123;</div><div class=\"line\"></div><div class=\"line\">            //事件类型、需要执行的函数、是否捕捉</div><div class=\"line\"></div><div class=\"line\">            element.addEventListener(type, handler, false);</div><div class=\"line\"></div><div class=\"line\">        &#125; else if (element.attachEvent) &#123;</div><div class=\"line\"></div><div class=\"line\">            element.attachEvent(&apos;on&apos; + type, function() &#123;</div><div class=\"line\"></div><div class=\"line\">                handler.call(element);</div><div class=\"line\"></div><div class=\"line\">            &#125;);</div><div class=\"line\"></div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\"></div><div class=\"line\">            element[&apos;on&apos; + type] = handler;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\">    // 移除事件</div><div class=\"line\"></div><div class=\"line\">    removeEvent : function(element, type, handler) &#123;</div><div class=\"line\"></div><div class=\"line\">        if (element.removeEnentListener) &#123;</div><div class=\"line\"></div><div class=\"line\">            element.removeEnentListener(type, handler, false);</div><div class=\"line\"></div><div class=\"line\">        &#125; else if (element.datachEvent) &#123;</div><div class=\"line\"></div><div class=\"line\">            element.detachEvent(&apos;on&apos; + type, handler);</div><div class=\"line\"></div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\"></div><div class=\"line\">            element[&apos;on&apos; + type] = null;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\">    // 阻止事件 (主要是事件冒泡，因为IE不支持事件捕获)</div><div class=\"line\"></div><div class=\"line\">    stopPropagation : function(ev) &#123;</div><div class=\"line\"></div><div class=\"line\">        if (ev.stopPropagation) &#123;</div><div class=\"line\"></div><div class=\"line\">            ev.stopPropagation();</div><div class=\"line\"></div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\"></div><div class=\"line\">            ev.cancelBubble = true;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\">    // 取消事件的默认行为</div><div class=\"line\"></div><div class=\"line\">    preventDefault : function(event) &#123;</div><div class=\"line\"></div><div class=\"line\">        if (event.preventDefault) &#123;</div><div class=\"line\"></div><div class=\"line\">            event.preventDefault();</div><div class=\"line\"></div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\"></div><div class=\"line\">            event.returnValue = false;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\">    // 获取事件目标</div><div class=\"line\"></div><div class=\"line\">    getTarget : function(event) &#123;</div><div class=\"line\"></div><div class=\"line\">        return event.target || event.srcElement;</div><div class=\"line\"></div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\">    // 获取event对象的引用，取到事件的所有信息，确保随时能使用event；</div><div class=\"line\"></div><div class=\"line\">    getEvent : function(e) &#123;</div><div class=\"line\"></div><div class=\"line\">        var ev = e || window.event;</div><div class=\"line\"></div><div class=\"line\">        if (!ev) &#123;</div><div class=\"line\"></div><div class=\"line\">            var c = this.getEvent.caller;</div><div class=\"line\"></div><div class=\"line\">            while (c) &#123;</div><div class=\"line\"></div><div class=\"line\">                ev = c.arguments[0];</div><div class=\"line\"></div><div class=\"line\">                if (ev &amp;&amp; Event == ev.constructor) &#123;</div><div class=\"line\"></div><div class=\"line\">                    break;</div><div class=\"line\"></div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                c = c.caller;</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        return ev;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>74、事件、IE与火狐的事件机制有什么区别？ 如何阻止冒泡？</p>\n<pre><code>1. 我们在网页中的某个操作（有的操作对应多个事件）。例如：当我们点击一个按钮就会产生一个事件。是可以被 JavaScript 侦测到的行为。\n\n2. 事件处理机制：IE是事件冒泡、火狐是 事件捕获；\n\n3.  ev.stopPropagation();\n</code></pre><p>75、什么是闭包（closure），为什么要用？<br>执行say667()后,say667()闭包内部变量会存在,而闭包内部函数的内部变量不会存在.使得Javascript的垃圾回收机制GC不会收回say667()所占用的资源，因为say667()的内部函数的执行需要依赖say667()中的变量。这是对闭包作用的非常直白的描述.</p>\n<p>  function say667() {</p>\n<pre><code>// Local variable that ends up within closure\n\nvar num = 666;\n\nvar sayAlert = function() { alert(num); }\n\nnum++;\n\nreturn sayAlert;\n</code></pre><p>}</p>\n<p> var sayAlert = say667();</p>\n<p> sayAlert()//执行结果应该弹出的667</p>\n<p>76、如何判断一个对象是否属于某个类？<br>使用instanceof （待完善）</p>\n<p>if(a instanceof Person){</p>\n<pre><code>alert(&apos;yes&apos;);\n</code></pre><p>}</p>\n<p>77、new操作符具体干了什么呢?<br>  1、创建一个空对象，并且 this 变量引用该对象，同时还继承了该函数的原型。</p>\n<p>  2、属性和方法被加入到 this 引用的对象中。</p>\n<p>  3、新创建的对象由 this 所引用，并且最后隐式的返回 this 。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">var obj  = &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">obj.__proto__ = Base.prototype;</div><div class=\"line\"></div><div class=\"line\">Base.call(obj);</div></pre></td></tr></table></figure></p>\n<p>78、JSON 的了解<br>JSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。它是基于JavaScript的一个子集。数据格式简单, 易于读写, 占用带宽小</p>\n<p>{‘age’:’12’, ‘name’:’back’}</p>\n<p>79、js延迟加载的方式有哪些<br>defer和async、动态创建DOM方式（用得最多）、按需异步载入js</p>\n<p>80、模块化怎么做？<br>立即执行函数,不暴露私有成员<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">var module1 = (function()&#123;</div><div class=\"line\"></div><div class=\"line\">　　　　var _count = 0;</div><div class=\"line\"></div><div class=\"line\">　　　　var m1 = function()&#123;</div><div class=\"line\"></div><div class=\"line\">　　　　　　//...</div><div class=\"line\"></div><div class=\"line\">　　　　&#125;;</div><div class=\"line\"></div><div class=\"line\">　　　　var m2 = function()&#123;</div><div class=\"line\"></div><div class=\"line\">　　　　　　//...</div><div class=\"line\"></div><div class=\"line\">　　　　&#125;;</div><div class=\"line\"></div><div class=\"line\">　　　　return &#123;</div><div class=\"line\"></div><div class=\"line\">　　　　　　m1 : m1,</div><div class=\"line\"></div><div class=\"line\">　　　　　　m2 : m2</div><div class=\"line\"></div><div class=\"line\">　　　　&#125;;</div><div class=\"line\"></div><div class=\"line\">　　&#125;)();</div></pre></td></tr></table></figure></p>\n<p>81、异步加载的方式<br>  (1) defer，只支持IE</p>\n<p>  (2) async：</p>\n<p>  (3) 创建script，插入到DOM中，加载完毕后callBack</p>\n<pre><code>documen.write和 innerHTML的区别\n\ndocument.write只能重绘整个页面\n\ninnerHTML可以重绘页面的一部分\n</code></pre><p>82、告诉我答案是多少？<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">(function(x)&#123;</div><div class=\"line\"></div><div class=\"line\">    delete x;</div><div class=\"line\"></div><div class=\"line\">    alert(x);</div><div class=\"line\"></div><div class=\"line\">&#125;)(1+5);</div></pre></td></tr></table></figure></p>\n<p>函数参数无法delete删除，delete只能删除通过for in访问的属性。</p>\n<p>当然，删除失败也不会报错，所以代码运行会弹出“1”。</p>\n<p>83、JS中的call()和apply()方法的区别？<br>例子中用 add 来替换 sub，add.call(sub,3,1) == add(3,1) ，所以运行结果为：alert(4);</p>\n<p>注意：js 中的函数其实是对象，函数名是对 Function 对象的引用。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">function add(a,b)&#123;</div><div class=\"line\"></div><div class=\"line\">    alert(a+b);</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function sub(a,b)&#123;</div><div class=\"line\"></div><div class=\"line\">    alert(a-b);</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">add.call(sub,3,1);</div></pre></td></tr></table></figure></p>\n<p>84、Jquery与jQuery UI 有啥区别？</p>\n<p>jQuery是一个js库，主要提供的功能是选择器，属性修改和事件绑定等等。</p>\n<p>jQuery UI则是在jQuery的基础上，利用jQuery的扩展性，设计的插件。</p>\n<p>提供了一些常用的界面元素，诸如对话框、拖动行为、改变大小行为等等</p>\n<p>85、jquery 中如何将数组转化为json字符串，然后再转化回来？<br>jQuery中没有提供这个功能，所以你需要先编写两个jQuery的扩展：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.fn.stringifyArray = function(array) &#123;</div><div class=\"line\"></div><div class=\"line\">    return JSON.stringify(array)</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">$.fn.parseArray = function(array) &#123;</div><div class=\"line\"></div><div class=\"line\">    return JSON.parse(array)</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<pre><code>然后调用：\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(&quot;&quot;).stringifyArray(array)</div></pre></td></tr></table></figure>\n<p>86、JavaScript中的作用域与变量声明提升？<br>其他部分</p>\n<p>（HTTP、正则、优化、重构、响应式、移动端、团队协作、SEO、UED、职业生涯）</p>\n<pre><code>基于Class的选择性的性能相对于Id选择器开销很大，因为需遍历所有DOM元素。\n\n频繁操作的DOM，先缓存起来再操作。用Jquery的链式调用更好。  \n\n 比如：var str=$(&quot;a&quot;).attr(&quot;href&quot;);\n\nfor (var i = size; i &lt; arr.length; i++) {}\n\n for 循环每一次循环都查找了数组 (arr) 的.length 属性，在开始循环的时候设置一个变量来存储这个数字，可以让循环跑得更快：\n\n for (var i = size, length = arr.length; i &lt; length; i++) {}\n</code></pre><p>87、前端开发的优化问题（看雅虎14条性能优化原则）。<br>  （1） 减少http请求次数：CSS Sprites, JS、CSS源码压缩、图片大小控制合适；网页Gzip，CDN托管，data缓存 ，图片服务器。</p>\n<p>  （2） 前端模板 JS+数据，减少由于HTML标签导致的带宽浪费，前端用变量保存AJAX请求结果，每次操作本地变量，不用请求，减少请求次数</p>\n<p>  （3） 用innerHTML代替DOM操作，减少DOM操作次数，优化javascript性能。</p>\n<p>  （4） 当需要设置的样式很多时设置className而不是直接操作style。</p>\n<p>  （5） 少用全局变量、缓存DOM节点查找的结果。减少IO读取操作。</p>\n<p>  （6） 避免使用CSS Expression（css表达式)又称Dynamic properties(动态属性)。</p>\n<p>  （7） 图片预加载，将样式表放在顶部，将脚本放在底部  加上时间戳。</p>\n<p>  （8） 避免在页面的主体布局中使用table，table要等其中的内容完全下载之后才会显示出来，显示比div+css布局慢。</p>\n<p>88、http状态码有那些？分别代表是什么意思？<br>    100-199 用于指定客户端应相应的某些动作。</p>\n<pre><code>200-299 用于表示请求成功。\n\n300-399 用于已经移动的文件并且常被包含在定位头信息中指定新的地址信息。\n</code></pre><p>400-499 用于指出客户端的错误。</p>\n<p>400  语义有误，当前请求无法被服务器理解。</p>\n<p>401  当前请求需要用户验证</p>\n<p>403  服务器已经理解请求，但是拒绝执行它。</p>\n<p>500-599 用于支持服务器错误。</p>\n<p>503 – 服务不可用</p>\n<p>89、一个页面从输入 URL 到页面加载显示完成，这个过程中都发生了什么？（流程说的越详细越好）<br>    要熟悉前后端的通信流程，最好把动态网站的背后细节也介绍一遍</p>\n<p>八、流行框架<br>1、JQuery的源码看过吗？能不能简单概况一下它的实现原理？<br>考察学习知识的态度，是否仅仅是停留在使用层面，要知其然知其所以然</p>\n<p>2、jQuery.fn的init方法返回的this指的是什么对象？为什么要返回this？<br>this执行init构造函数自身，其实就是jQuery实例对象，返回this是为了实现jQuery的链式操作</p>\n<p>3、jquery中如何将数组转化为json字符串，然后再转化回来？<br>$.parseJSON(‘{“name”:”John”}’);</p>\n<p>4、jQuery 的属性拷贝(extend)的实现原理是什么，如何实现深拷贝？<br>递归赋值</p>\n<p>5、jquery.extend 与 jquery.fn.extend的区别？<br>Jquery.extend用来扩展jQuery对象本身；jquery.fn.extend用来扩展jQuery实例</p>\n<p>6、谈一下Jquery中的bind(),live(),delegate(),on()的区别？<br>7、JQuery一个对象可以同时绑定多个事件，这是如何实现的？<br>可以同时绑定多个事件，低层实现原理是使用addEventListner与attachEvent兼容处理做事件注册</p>\n<p>10、Jquery与jQuery UI有啥区别？<br>jQuery是操作dom的框架，jQueryUI是基于jQuery做的一个UI组件库</p>\n<p>11、jQuery和Zepto的区别？各自的使用场景？<br>jQuery主要用于pc端，当然有对应的jQuerymobile用于移动端，zepto比jQuery更加小巧，主要用于移动端</p>\n<p>12、针对 jQuery 的优化方法？<br>优先使用ID选择器</p>\n<p>在class前使用tag(标签名)</p>\n<p>给选择器一个上下文</p>\n<p>慎用 .live()方法（应该说尽量不要使用）</p>\n<p>使用data()方法存储临时变量</p>\n<p>13、Zepto的点透问题如何解决？<br>点透主要是由于两个div重合，例如：一个div调用show()，一个div调用hide()；这个时候当点击上面的div的时候就会影响到下面的那个div；</p>\n<p>解决办法主要有2种：</p>\n<p>1.github上有一个叫做fastclick的库，它也能规避移动设备上click事件的延迟响应，<code>https://github.com/ftlabs/fastclick</code></p>\n<p>将它用script标签引入页面（该库支持AMD，于是你也可以按照AMD规范，用诸如require.js的模块加载器引入），并且在dom ready时初始化在body上，</p>\n<p>2.根据分析，如果不引入其它类库，也不想自己按照上述fastclcik的思路再开发一套东西，需要1.一个优先于下面的“divClickUnder”捕获的事件；2.并且通过这个事件阻止掉默认行为（下面的“divClickUnder”对click事件的捕获，在iOS的safari，click的捕获被认为和滚屏、点击输入框弹起键盘等一样，是一种浏览器默认行为，即可以被event.preventDefault()阻止的行为）。</p>\n<p>12、知道各种JS框架(Angular, Backbone, Ember, React, Meteor, Knockout…)么? 能讲出他们各自的优点和缺点么?<br>知识面的宽度，流行框架要多多熟悉</p>\n<p>13、Underscore 对哪些 JS 原生对象进行了扩展以及提供了哪些好用的函数方法？<br>Underscore的熟悉程度</p>\n<p>14、使用过angular吗？angular中的过滤器是干什么用的<br>在表达式中转换数据<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;p&gt;姓名为 &#123;&#123; lastName | uppercase &#125;&#125;&lt;/p&gt;</div></pre></td></tr></table></figure></p>\n<p>currency，是什么过滤器——格式化数字为货币格式，单位是$符。</p>\n<p>九、移动APP开发<br>1、移动端最小触控区域是多大？<br>移动端的点击事件的有延迟，时间是多久，为什么会有？ 怎么解决这个延时？（click 有 300ms 延迟,为了实现safari的双击事件的设计，浏览器要知道你是不是要双击操作。）</p>\n<p>十、NodeJs<br>1、对Node的优点和缺点提出了自己的看法：<br>（优点）因为Node是基于事件驱动和无阻塞的，所以非常适合处理并发请求，</p>\n<p>因此构建在Node上的代理服务器相比其他技术实现（如Ruby）的服务器表现要好得多。</p>\n<p>此外，与Node代理服务器交互的客户端代码是由javascript语言编写的，</p>\n<p>因此客户端和服务器端都用同一种语言编写，这是非常美妙的事情。</p>\n<p>（缺点）Node是一个相对新的开源项目，所以不太稳定，它总是一直在变，</p>\n<p>而且缺少足够多的第三方库支持。看起来，就像是Ruby/Rails当年的样子。</p>\n<p>2、需求：实现一个页面操作不会整页刷新的网站，并且能在浏览器前进、后退时正确响应。给出你的技术实现方案？<br>至少给出自己的思路（url-hash,可以使用已有的一些框架history.js等）</p>\n<p>6、Node.js的适用场景？<br>1)、实时应用：如在线聊天，实时通知推送等等（如socket.io）</p>\n<p>2)、分布式应用：通过高效的并行I/O使用已有的数据</p>\n<p>3)、工具类应用：海量的工具，小到前端压缩部署（如grunt），大到桌面图形界面应用程序</p>\n<p>4)、游戏类应用：游戏领域对实时和并发有很高的要求（如网易的pomelo框架）</p>\n<p>5)、利用稳定接口提升Web渲染能力</p>\n<p>6)、前后端编程语言环境统一：前端开发人员可以非常快速地切入到服务器端的开发（如著名的纯Javascript全栈式MEAN架构）</p>\n<p>4、(如果会用node)知道route, middleware, cluster, nodemon, pm2, server-side rendering么?<br>Nodejs相关概念的理解程度</p>\n<p>7、解释一下 Backbone 的 MVC 实现方式？<br>流行的MVC架构模式</p>\n<p>8、什么是“前端路由”?什么时候适合使用“前端路由”? “前端路由”有哪些优点和缺点?<br>熟悉前后端通信相关知识</p>\n<p>7、对Node的优点和缺点提出了自己的看法？<br>优点：</p>\n<ol>\n<li><p>因为Node是基于事件驱动和无阻塞的，所以非常适合处理并发请求，因此构建在Node上的代理服务器相比其他技术实现（如Ruby）的服务器表现要好得多。</p>\n</li>\n<li><p>与Node代理服务器交互的客户端代码是由javascript语言编写的，因此客户端和服务器端都用同一种语言编写，这是非常美妙的事情。</p>\n</li>\n</ol>\n<p>缺点：</p>\n<ol>\n<li><p>Node是一个相对新的开源项目，所以不太稳定，它总是一直在变。</p>\n</li>\n<li><p>缺少足够多的第三方库支持。看起来，就像是Ruby/Rails当年的样子（第三方库现在已经很丰富了，所以这个缺点可以说不存在了）。</p>\n</li>\n</ol>\n<p>十一、前端概括性问题<br>1、常使用的库有哪些？常用的前端开发工具？开发过什么应用或组件？<br>使用率较高的框架有jQuery、YUI、Prototype、Dojo、Ext.js、Mootools等。尤其是jQuery，超过91%。</p>\n<p>轻量级框架有Modernizr、underscore.js、backbone.js、Raphael.js等。（理解这些框架的功能、性能、设计原理）</p>\n<p>前端开发工具：Sublime Text 、Eclipse、Notepad、Firebug、HttpWatch、Yslow。</p>\n<p>开发过的插件：城市选择插件，汽车型号选择插件、幻灯片插件。弹出层。（写过开源程序，加载器，js引擎更好）</p>\n<p>9、对BFC规范的理解？<br>Formatting Context：指页面中的一个渲染区域，并且拥有一套渲染规则，他决定了其子元素如何定位，以及与其他元素的相互关系和作用。</p>\n<p>3、99%的网站都需要被重构是那本书上写的？<br>网站重构：应用web标准进行设计（第2版）</p>\n<p>4、WEB应用从服务器主动推送Data到客户端有那些方式？<br>    html5 websoket</p>\n<pre><code>WebSocket通过Flash\n\nXHR长时间连接\n\nXHR Multipart Streaming\n\n不可见的Iframe\n</code></pre><p><script>标签的长时间连接(可跨域)</p>\n<p>5、加班的看法<br>加班就像借钱，原则应当是——救急不救穷</p>\n<p>6、平时如何管理你的项目，如何设计突发大规模并发架构？<br>先期团队必须确定好全局样式（globe.css），编码模式(utf-8) 等</p>\n<p>编写习惯必须一致（例如都是采用继承式的写法，单样式都写成一行）；</p>\n<p>标注样式编写人，各模块都及时标注（标注关键样式调用的地方）；</p>\n<p>页面进行标注（例如 页面 模块 开始和结束）；</p>\n<p>CSS跟HTML 分文件夹并行存放，命名都得统一（例如style.css）</p>\n<p>JS 分文件夹存放 命民以该JS 功能为准英文翻译；</p>\n<p>图片采用整合的 images.png png8 格式文件使用 尽量整合在一起使用方便将来的管理</p>\n<p>7、那些操作会造成内存泄漏？<br>内存泄漏指任何对象在您不再拥有或需要它之后仍然存在。</p>\n<p>垃圾回收器定期扫描对象，并计算引用了每个对象的其他对象的数量。如果一个对象的引用数量为 0（没有其他对象引用过该对象），或对该对象的惟一引用是循环的，那么该对象的内存即可回收。</p>\n<p>setTimeout 的第一个参数使用字符串而非函数的话，会引发内存泄漏。</p>\n<p>闭包、控制台日志、循环（在两个对象彼此引用且彼此保留时，就会产生一个循环）</p>\n<p>8、你说你热爱前端，那么应该WEB行业的发展很关注吧？ 说说最近最流行的一些东西吧？<br>Node.js、MongoDB、npm、MVVM、MEAN、React、AngularJS</p>\n<p>9、你有了解我们公司吗？说说你的认识？<br>因为我想去阿里，所以我针对阿里的说</p>\n<p>最羡慕就是在双十一购物节，350.19亿元，每分钟支付79万笔。海量数据，居然无一漏单、无一故障。太厉害了。</p>\n<p>10、    移动端（比如：Android IOS）怎么做好用户体验?<br>融入自己的设计理念，注重用户体验，选择合适的技术</p>\n<p>11、    你所知道的页面性能优化方法有那些？<br>压缩、合并，减少请求，代码层析优化。。。</p>\n<p>12、    除了前端以外还了解什么其它技术么？你最最厉害的技能是什么？<br>知识面宽度，最好熟悉一些后台语言，比如php，展现出自己的技术两点</p>\n<p>13、AMD（Modules/Asynchronous-Definition）、CMD（Common Module Definition）规范区别？<br>14、谈谈你认为怎样做能使项目做的更好？<br>考虑问题的深入，不仅仅停留在完成任务上，要精益求精</p>\n<p>15、你对前端界面工程师这个职位是怎么样理解的？它的前景会怎么样？<br>表现出对前端的认同与兴趣，关注相关技术前沿</p>\n<p>16、php中下面哪个函数可以打开一个文件，以对文件进行读和写操作？<br>A.fget();B.file_open();C.fopen();D.open_file();</p>\n<p>17、php中rmdir可以直接删除文件夹吗？该目录必须是空的，而且要有相应的权限–来自api<br>A.任何文件夹都可以删除           B.空文件夹可以删除</p>\n<p>C.有权限的任何文件夹都可以删除   D.有权限的空文件夹可以删除</p>\n<p>18、phpinset和empty的区别，举例说明<br>1、empty函数</p>\n<p>用途：检测变量是否为空</p>\n<p>判断：如果 var 是非空或非零的值，则 empty() 返回 FALSE。换句话说，””、0、”0”、NULL、FALSE、array()、var $var; 以及没有任何属性的对象都将被认为是空的，如果 var 为空，则返回 TRUE。注意：empty() 只检测变量，检测任何非变量的东西都将导致解析错误。换句话说，后边的语句将不会起作用;</p>\n<p>2、isset函数</p>\n<p>用途：检测变量是否设置</p>\n<p>判断：检测变量是否设置，并且不是 NULL。如果已经使用 unset() 释放了一个变量之后，它将不再是 isset()。若使用 isset() 测试一个被设置成 NULL 的变量，将返回 FALSE。同时要注意的是一个NULL 字节（”\\0”）并不等同于 PHP 的 NULL 常数。</p>\n<p>19、php中<code>$_SERVER变量</code>中如何得到当前执行脚本路劲</p>\n<p>20、写一个php函数，要求两个日期字符串的天数差，如2012-02-05~2012-03-06的日期差数<br>21、一个衣柜中放了许多杂乱的衬衫，如果让你去整理一下，使得更容易找到你想要的衣服；你会怎么做？请写出你的做法和思路？<br>22、如何优化网页加载速度？<br>   1.减少css，js文件数量及大小(减少重复性代码，代码重复利用)，压缩CSS和Js代码</p>\n<p>   2.图片的大小</p>\n<p>   3.把css样式表放置顶部，把js放置页面底部</p>\n<p>   4.减少http请求数</p>\n<p>   5.使用外部 Js 和 CSS</p>\n<p>23、工作流程，你怎么来实现页面设计图，你认为前端应该如何高质量完成工作?<br>熟悉相关设计规范，自己总结的一些经验</p>\n<p>24、介绍项目经验、合作开发、独立开发。<br>团队协作，个人能力。实践经验</p>\n<p>25、开发过程中遇到困难，如何解决。<br>考察解决问题的能力</p>\n<p>26、对前端界面工程师这个职位是怎么样理解的？它的前景会怎么样？<br>    前端是最贴近用户的程序员，比后端、数据库、产品经理、运营、安全都近。</p>\n<pre><code>1、实现界面交互\n\n2、提升用户体验\n\n3、有了Node.js，前端可以实现服务端的一些事情\n</code></pre><p>前端是最贴近用户的程序员，前端的能力就是能让产品从 90分进化到 100 分，甚至更好，</p>\n<p>参与项目，快速高质量完成实现效果图，精确到1px；</p>\n<p>与团队成员，UI设计，产品经理的沟通；</p>\n<p>做好的页面结构，页面重构和用户体验；</p>\n<p>处理hack，兼容、写出优美的代码格式；</p>\n<p>针对服务器的优化、拥抱最新前端技术。</p>\n<p>其它相关的加分项：</p>\n<pre><code>1. 都使用和了解过哪些编辑器?都使用和了解过哪些日常工具?\n\n2. 都知道有哪些浏览器内核?开发过的项目都兼容哪些浏览器?\n\n3. 瀑布流布局或者流式布局是否有了解\n\n4. HTML5都有哪些新的API?\n\n5. 都用过什么代码调试工具?\n\n6. 是否有接触过或者了解过重构。\n</code></pre><p>7.你遇到过比较难的技术问题是？你是如何解决的？</p>\n</script></p></head></span></html></div>","excerpt":"<div><br>一、HTML和CSS<br>1、你做的页面在哪些流览器测试过？这些浏览器的内核分别是什么?<br>IE: trident内核<br><br>Firefox：gecko内核<br><br>Safari:webkit内核<br><br>Opera:以前是presto内核，Opera现已改用Google Chrome的Blink内核<br><br>Chrome:Blink(基于webkit，Google与Opera Software共同开发)<br><br>2、每个HTML文件里开头都有个很重要的东西，Doctype，知道这是干什么的吗？<br>&lt;!DOCTYPE&gt; 声明位于文档中的最前面的位置，处于 <html> 标签之前。此标签可告知浏览器文档使用哪种 HTML 或 XHTML 规范。（重点：告诉浏览器按照何种规范解析页面）<br><br>","more":"<br><br>3、Quirks模式是什么？它和Standards模式有什么区别<br>从IE6开始，引入了Standards模式，标准模式中，浏览器尝试给符合标准的文档在规范上的正确处理达到在指定浏览器中的程度。<br><br>在IE6之前CSS还不够成熟，所以IE5等之前的浏览器对CSS的支持很差， IE6将对CSS提供更好的支持，然而这时的问题就来了，因为有很多页面是基于旧的布局方式写的，而如果IE6 支持CSS则将令这些页面显示不正常，如何在即保证不破坏现有页面，又提供新的渲染机制呢？<br><br>在写程序时我们也会经常遇到这样的问题，如何保证原来的接口不变，又提供更强大的功能，尤其是新功能不兼容旧功能时。遇到这种问题时的一个常见做法是增加参数和分支，即当某个参数为真时，我们就使用新功能，而如果这个参数 不为真时，就使用旧功能，这样就能不破坏原有的程序，又提供新功能。IE6也是类似这样做的，它将DTD当成了这个“参数”，因为以前的页面大家都不会去写DTD，所以IE6就假定 如果写了DTD，就意味着这个页面将采用对CSS支持更好的布局，而如果没有，则采用兼容之前的布局方式。这就是Quirks模式（怪癖模式，诡异模式，怪异模式）。<br><br>区别：<br><br>总体会有布局、样式解析和脚本执行三个方面的区别。<br><br>盒模型：在W3C标准中，如果设置一个元素的宽度和高度，指的是元素内容的宽度和高度，而在Quirks 模式下，IE的宽度和高度还包含了padding和border。<br><br><br><br>设置行内元素的高宽：在Standards模式下，给<span>等行内元素设置wdith和height都不会生效，而在quirks模式下，则会生效。<br><br>设置百分比的高度：在standards模式下，一个元素的高度是由其包含的内容来决定的，如果父元素没有设置百分比的高度，子元素设置一个百分比的高度是无效的用margin:0 auto设置水平居中：使用margin:0 auto在standards模式下可以使元素水平居中，但在quirks模式下却会失效。<br><br>（还有很多，答出什么不重要，关键是看他答出的这些是不是自己经验遇到的，还是说都是看文章看的，甚至完全不知道。）<br><br>4、div+css的布局较table布局有什么优点？<br>改版的时候更方便 只要改css文件。<br><br>页面加载速度更快、结构化清晰、页面显示简洁。<br><br>表现与结构相分离。<br><br>易于优化（seo）搜索引擎更友好，排名更容易靠前。<br><br>5、 img的alt与title有何异同？ strong与em的异同？<br>a:alt(alt text):为不能显示图像、窗体或applets的用户代理（UA），alt属性用来指定替换文字。替换文字的语言由lang属性指定。(在IE浏览器下会在没有title时把alt当成 tool tip显示)<br><br>title(tool tip):该属性为设置该属性的元素提供建议性的信息。<br><br>strong:粗体强调标签，强调，表示内容的重要性<br><br>em:斜体强调标签，更强烈强调，表示内容的强调点<br><br>6、你能描述一下渐进增强和优雅降级之间的不同吗?<br>渐进增强 progressive enhancement：针对低版本浏览器进行构建页面，保证最基本的功能，然后再针对高级浏览器进行效果、交互等改进和追加功能达到更好的用户体验。<br><br>优雅降级 graceful degradation：一开始就构建完整的功能，然后再针对低版本浏览器进行兼容。<br><br>区别：优雅降级是从复杂的现状开始，并试图减少用户体验的供给，而渐进增强则是从一个非常基础的，能够起作用的版本开始，并不断扩充，以适应未来环境的需要。降级（功能衰减）意味着往回看；而渐进增强则意味着朝前看，同时保证其根基处于安全地带。<br><br>“优雅降级”观点<br><br>“优雅降级”观点认为应该针对那些最高级、最完善的浏览器来设计网站。而将那些被认为“过时”或有功能缺失的浏览器下的测试工作安排在开发周期的最后阶段，并把测试对象限定为主流浏览器（如 IE、Mozilla 等）的前一个版本。<br><br>在这种设计范例下，旧版的浏览器被认为仅能提供“简陋却无妨 (poor, but passable)” 的浏览体验。你可以做一些小的调整来适应某个特定的浏览器。但由于它们并非我们所关注的焦点，因此除了修复较大的错误之外，其它的差异将被直接忽略。<br><br>“渐进增强”观点<br><br>“渐进增强”观点则认为应关注于内容本身。<br><br>内容是我们建立网站的诱因。有的网站展示它，有的则收集它，有的寻求，有的操作，还有的网站甚至会包含以上的种种，但相同点是它们全都涉及到内容。这使得“渐进增强”成为一种更为合理的设计范例。这也是它立即被 Yahoo! 所采纳并用以构建其“分级式浏览器支持 (Graded Browser Support)”策略的原因所在。<br><br>那么问题来了。现在产品经理看到IE6,7,8网页效果相对高版本现代浏览器少了很多圆角，阴影（CSS3），要求兼容（使用图片背景，放弃CSS3），你会如何说服他？<br><br>7、为什么利用多个域名来存储网站资源会更有效？<br>CDN缓存更方便<br><br>突破浏览器并发限制<br><br>节约cookie带宽<br><br>节约主域名的连接数，优化页面响应速度<br><br>防止不必要的安全问题<br><br>8、请谈一下你对网页标准和标准制定机构重要性的理解。<br>网页标准和标准制定机构都是为了能让web发展的更‘健康’，开发者遵循统一的标准，降低开发难度，开发成本，SEO也会更好做，也不会因为滥用代码导致各种BUG、安全问题，最终提高网站易用性。<br><br>9、请描述一下cookies，sessionStorage和localStorage的区别？<br>sessionStorage用于本地存储一个会话（session）中的数据，这些数据只有在同一个会话中的页面才能访问并且当会话结束后数据也随之销毁。因此sessionStorage不是一种持久化的本地存储，仅仅是会话级别的存储。而localStorage用于持久化的本地存储，除非主动删除数据，否则数据是永远不会过期的。<br><br>web storage和cookie的区别<br><br>Web Storage的概念和cookie相似，区别是它是为了更大容量存储设计的。Cookie的大小是受限的，并且每次你请求一个新的页面的时候Cookie都会被发送过去，这样无形中浪费了带宽，另外cookie还需要指定作用域，不可以跨域调用。<br><br>除此之外，Web Storage拥有setItem,getItem,removeItem,clear等方法，不像cookie需要前端开发者自己封装setCookie，getCookie。但是Cookie也是不可以或缺的：Cookie的作用是与服务器进行交互，作为HTTP规范的一部分而存在 ，而Web Storage仅仅是为了在本地“存储”数据而生。<br><br>10、简述一下src与href的区别。<br>src用于替换当前元素，href用于在当前文档和引用资源之间确立联系。<br><br>src是source的缩写，指向外部资源的位置，指向的内容将会嵌入到文档中当前标签所在位置；在请求src资源时会将其指向的资源下载并应用到文档内，例如js脚本，img图片和frame等元素。<br><br><script src =”js.js”></script><br><br>当浏览器解析到该元素时，会暂停其他资源的下载和处理，直到将该资源加载、编译、执行完毕，图片和框架等元素也如此，类似于将所指向资源嵌入当前标签内。这也是为什么将js脚本放在底部而不是头部。<br><br>href是Hypertext Reference的缩写，指向网络资源所在位置，建立和当前元素（锚点）或当前文档（链接）之间的链接，如果我们在文档中添加<br><br><link href=”common.css” rel=”stylesheet”/><br><br>那么浏览器会识别该文档为css文件，就会并行下载资源并且不会停止对当前文档的处理。这也是为什么建议使用link方式来加载css，而不是使用@import方式。<br><br>11、知道的网页制作会用到的图片格式有哪些？<br>png-8，png-24，jpeg，gif，svg。<br><br>但是上面的那些都不是面试官想要的最后答案。面试官希望听到是Webp。（是否有关注新技术，新鲜事物）<br><br>科普一下Webp：WebP格式，谷歌（google）开发的一种旨在加快图片加载速度的图片格式。图片压缩体积大约只有JPEG的2/3，并能节省大量的服务器带宽资源和数据空间。Facebook Ebay等知名网站已经开始测试并使用WebP格式。<br><br>在质量相同的情况下，WebP格式图像的体积要比JPEG格式图像小40%<br><br>12、知道什么是微格式吗？谈谈理解。在前端构建中应该考虑微格式吗？<br>微格式（Microformats）是一种让机器可读的语义化XHTML词汇的集合，是结构化数据的开放标准。是为特殊应用而制定的特殊格式。<br><br>优点：将智能数据添加到网页上，让网站内容在搜索引擎结果界面可以显示额外的提示。（应用范例：豆瓣，有兴趣自行google）<br><br>13、在css/js代码上线之后开发人员经常会优化性能，从用户刷新网页开始，一次js请求一般情况下有哪些地方会有缓存处理？<br>答案：dns缓存，cdn缓存，浏览器缓存，服务器缓存。<br><br>14、一个页面上有大量的图片（大型电商网站），加载很慢，你有哪些方法优化这些图片的加载，给用户更好的体验。<br>图片懒加载，在页面上的未可视区域可以添加一个滚动条事件，判断图片位置与浏览器顶端的距离与页面的距离，如果前者小于后者，优先加载。<br><br>如果为幻灯片、相册等，可以使用图片预加载技术，将当前展示图片的前一张和后一张优先下载。<br><br>如果图片为css图片，可以使用CSSsprite，SVGsprite，Iconfont、Base64等技术。<br><br>如果图片过大，可以使用特殊编码的图片，加载时会先加载一张压缩的特别厉害的缩略图，以提高用户体验。<br><br>如果图片展示区域小于图片的真实大小，则因在服务器端根据业务需要先行进行图片压缩，图片压缩后大小与展示一致。<br><br>15、你如何理解HTML结构的语义化？　<br>去掉或样式丢失的时候能让页面呈现清晰的结构：<br><br>html本身是没有表现的，我们看到例如<code>&lt;h1&gt;</code>是粗体，字体大小2em，加粗；<code>&lt;strong&gt;</code>是加粗的，不要认为这是html的表现，这些其实html默认的css样式在起作用，所以去掉或样式丢失的时候能让页面呈现清晰的结构不是语义化的HTML结构的优点，但是浏览器都有有默认样式，默认样式的目的也是为了更好的表达html的语义，可以说浏览器的默认样式和语义化的HTML结构是不可分割的。<br><br>屏幕阅读器（如果访客有视障）会完全根据你的标记来“读”你的网页.<br><br>例如,如果你使用的含语义的标记,屏幕阅读器就会“逐个拼出”你的单词,而不是试着去对它完整发音.<br><br>PDA、手机等设备可能无法像普通电脑的浏览器一样来渲染网页（通常是因为这些设备对CSS的支持较弱）<br><br>使用语义标记可以确保这些设备以一种有意义的方式来渲染网页.理想情况下,观看设备的任务是符合设备本身的条件来渲染网页.<br><br>语义标记为设备提供了所需的相关信息,就省去了你自己去考虑所有可能的显示情况（包括现有的或者将来新的设备）.例如,一部手机可以选择使一段标记了标题的文字以粗体显示.而掌上电脑可能会以比较大的字体来显示.无论哪种方式一旦你对文本标记为标题,您就可以确信读取设备将根据其自身的条件来合适地显示页面.<br><br>搜索引擎的爬虫也依赖于标记来确定上下文和各个关键字的权重<br><br>过去你可能还没有考虑搜索引擎的爬虫也是网站的“访客”,但现在它们他们实际上是极其宝贵的用户.没有他们的话,搜索引擎将无法索引你的网站,然后一般用户将很难过来访问.<br><br>你的页面是否对爬虫容易理解非常重要,因为爬虫很大程度上会忽略用于表现的标记,而只注重语义标记.<br><br>因此,如果页面文件的标题被标记,而不是,那么这个页面在搜索结果的位置可能会比较靠后.除了提升易用性外,语义标记有利于正确使用CSS和JavaScript,因为其本身提供了许多“钩钩”来应用页面的样式与行为.<br><br>SEO主要还是靠你网站的内容和外部链接的。<br><br>便于团队开发和维护<br><br>W3C给我们定了一个很好的标准，在团队中大家都遵循这个标准，可以减少很多差异化的东西，方便开发和维护，提高开发效率，甚至实现模块化开发。<br><br>16、谈谈以前端角度出发做好SEO需要考虑什么？<br>了解搜索引擎如何抓取网页和如何索引网页<br><br>你需要知道一些搜索引擎的基本工作原理，各个搜索引擎之间的区别，搜索机器人（SE robot 或叫 web crawler）如何进行工作，搜索引擎如何对搜索结果进行排序等等。<br><br>Meta标签优化<br><br>主要包括主题（Title)，网站描述(Description)，和关键词（Keywords）。还有一些其它的隐藏文字比如Author（作者），Category（目录），Language（编码语种）等。<br><br>如何选取关键词并在网页中放置关键词<br><br>搜索就得用关键词。关键词分析和选择是SEO最重要的工作之一。首先要给网站确定主关键词（一般在5个上下），然后针对这些关键词进行优化，包括关键词密度（Density），相关度（Relavancy），突出性（Prominency）等等。<br><br>了解主要的搜索引擎<br><br>虽然搜索引擎有很多，但是对网站流量起决定作用的就那么几个。比如英文的主要有Google，Yahoo，Bing等；中文的有百度，搜狗，有道等。不同的搜索引擎对页面的抓取和索引、排序的规则都不一样。还要了解各搜索门户和搜索引擎之间的关系，比如AOL网页搜索用的是Google的搜索技术，MSN用的是Bing的技术。<br><br>主要的互联网目录<br><br>Open Directory自身不是搜索引擎，而是一个大型的网站目录，他和搜索引擎的主要区别是网站内容的收集方式不同。目录是人工编辑的，主要收录网站主页；搜索引擎是自动收集的，除了主页外还抓取大量的内容页面。<br><br>按点击付费的搜索引擎<br><br>搜索引擎也需要生存，随着互联网商务的越来越成熟，收费的搜索引擎也开始大行其道。最典型的有Overture和百度，当然也包括Google的广告项目Google Adwords。越来越多的人通过搜索引擎的点击广告来定位商业网站，这里面也大有优化和排名的学问，你得学会用最少的广告投入获得最多的点击。<br><br>搜索引擎登录<br><br>网站做完了以后，别躺在那里等着客人从天而降。要让别人找到你，最简单的办法就是将网站提交（submit）到搜索引擎。如果你的是商业网站，主要的搜索引擎和目录都会要求你付费来获得收录（比如Yahoo要299美元），但是好消息是（至少到目前为止）最大的搜索引擎Google目前还是免费，而且它主宰着60％以上的搜索市场。<br><br>链接交换和链接广泛度（Link Popularity）<br><br>网页内容都是以超文本（Hypertext）的方式来互相链接的，网站之间也是如此。除了搜索引擎以外，人们也每天通过不同网站之间的链接来Surfing（“冲浪”）。其它网站到你的网站的链接越多，你也就会获得更多的访问量。更重要的是，你的网站的外部链接数越多，会被搜索引擎认为它的重要性越大，从而给你更高的排名。<br><br>合理的标签使用<br><br>17、有哪项方式可以对一个DOM设置它的CSS样式？　<br>外部样式表，引入一个外部css文件<br><br>内部样式表，将css代码放在 <head> 标签内部<br><br>内联样式，将css样式直接定义在 HTML 元素内部<br><br>18、CSS都有哪些选择器？<br>派生选择器（用HTML标签申明）<br><br>id选择器（用DOM的ID申明）<br><br>类选择器（用一个样式类名申明）<br><br>属性选择器（用DOM的属性申明，属于CSS2，IE6不支持，不常用，不知道就算了）<br><br>除了前3种基本选择器，还有一些扩展选择器，包括<br><br>后代选择器（利用空格间隔，比如div .a{  }）<br><br>群组选择器（利用逗号间隔，比如p,div,#a{  }）<br><br>那么问题来了，CSS选择器的优先级是怎么样定义的？<br><br>基本原则：<br><br>一般而言，选择器越特殊，它的优先级越高。也就是选择器指向的越准确，它的优先级就越高。<br><br>复杂的计算方法：<br><br>用1表示派生选择器的优先级<br><br>用10表示类选择器的优先级<br><br>用100标示ID选择器的优先级<br><br>div.test1 .span var 优先级 1+10 +10 +1<br><br>span#xxx .songs li 优先级1+100 + 10 + 1<br><br>#xxx li 优先级 100 +1<br><br>那么问题来了，看下列代码，<p>标签内的文字是什么颜色的？<br><br><style><br><br>.classA{ color:blue;}<br><br>.classB{ color:red;}<br><br></style><br><br><body><br><br><p class='classB classA'> 123 </p><br><br></body><br><br>答案：red。与样式定义在文件中的先后顺序有关，即是后面的覆盖前面的，与在<p class=’classB classA’>中的先后关系无关。<br><br>19、CSS中可以通过哪些属性定义，使得一个DOM元素不显示在浏览器可视范围内？<br>最基本的：<br><br>设置display属性为none，或者设置visibility属性为hidden<br><br>技巧性：<br><br>设置宽高为0，设置透明度为0，设置z-index位置在-1000<br><br>20、超链接访问过后hover样式就不出现的问题是什么？如何解决？<br>答案：被点击访问过的超链接样式不在具有hover和active了,解决方法是改变CSS属性的排列顺序: L-V-H-A（link,visited,hover,active）<br><br>21、什么是Css Hack？ie6,7,8的hack分别是什么？<br>答案：针对不同的浏览器写不同的CSS code的过程，就是CSS hack。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">#test       &#123;  </div><div class=\"line\"></div><div class=\"line\">        width:300px;  </div><div class=\"line\"></div><div class=\"line\">        height:300px;  </div><div class=\"line\"></div><div class=\"line\">        background-color:blue;      /*firefox*/</div><div class=\"line\"></div><div class=\"line\">        background-color:red\\9;      /*all ie*/</div><div class=\"line\"></div><div class=\"line\">        background-color:yellow;    /*ie8*/</div><div class=\"line\"></div><div class=\"line\">        +background-color:pink;        /*ie7*/</div><div class=\"line\"></div><div class=\"line\">        _background-color:orange;       /*ie6*/    &#125;</div><div class=\"line\"></div><div class=\"line\">        :root #test &#123; background-color:purple\\9; &#125;  /*ie9*/</div><div class=\"line\"></div><div class=\"line\">    @media all and (min-width:0px)&#123; #test &#123;background-color:black;&#125; &#125;  /*opera*/</div><div class=\"line\"></div><div class=\"line\">    @media screen and (-webkit-min-device-pixel-ratio:0)&#123; #test &#123;background-color:gray;&#125; &#125;       /*chrome and safari*/</div></pre></td></tr></table></figure><br><br>22、请用Css写一个简单的幻灯片效果页面<br>答案：知道是要用css3。使用animation动画实现一个简单的幻灯片效果。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div></pre></td><td class=\"code\"><pre><div class=\"line\">div.ani</div><div class=\"line\"></div><div class=\"line\">/**css**/</div><div class=\"line\"></div><div class=\"line\">.ani&#123;</div><div class=\"line\"></div><div class=\"line\">  width:480px;</div><div class=\"line\"></div><div class=\"line\">  height:320px;</div><div class=\"line\"></div><div class=\"line\">  margin:50px auto;</div><div class=\"line\"></div><div class=\"line\">  overflow: hidden;</div><div class=\"line\"></div><div class=\"line\">  box-shadow:0 0 5px rgba(0,0,0,1);</div><div class=\"line\"></div><div class=\"line\">  background-size: cover;</div><div class=\"line\"></div><div class=\"line\">  background-position: center;</div><div class=\"line\"></div><div class=\"line\">  -webkit-animation-name: &quot;loops&quot;;</div><div class=\"line\"></div><div class=\"line\">  -webkit-animation-duration: 20s;</div><div class=\"line\"></div><div class=\"line\">  -webkit-animation-iteration-count: infinite;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@-webkit-keyframes &quot;loops&quot; &#123;</div><div class=\"line\"></div><div class=\"line\">    0% &#123;</div><div class=\"line\"></div><div class=\"line\">        background:url(http://d.h、d3.jpg) no-repeat;            </div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    25% &#123;</div><div class=\"line\"></div><div class=\"line\">        background:url(http://b.hiphotos.baidu.com/image/w%3D400/sig、f76094b364d72bceba1cc7cd98c109dd0.jpg) no-repeat;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    50% &#123;</div><div class=\"line\"></div><div class=\"line\">        background:url(http://b.hiphotos.baidu.com/image/w%3D400/sign=937dace2552c11dfded1be、58e7、bb5b912.jpg) no-repeat;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    75% &#123;</div><div class=\"line\"></div><div class=\"line\">        background:url(http://g.hiphotos.baidu.com/image/w%3D400/sign=7d37500b8544095d61f0972cdda3cc7cd99e4b.jpg) no-repeat;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    100% &#123;</div><div class=\"line\"></div><div class=\"line\">        background:url(http://c.hiphotos.baidu.com/image/2b21192138ad1.jpg) no-repeat;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><br><br>24、行内元素和块级元素的具体区别是什么？行内元素的padding和margin可设置吗？<br>块级元素(block)特性：<br><br>总是独占一行，表现为另起一行开始，而且其后的元素也必须另起一行显示;<br><br>宽度(width)、高度(height)、内边距(padding)和外边距(margin)都可控制;<br><br>内联元素(inline)特性：<br><br>和相邻的内联元素在同一行;<br><br>宽度(width)、高度(height)、内边距的top/bottom(padding-top/padding-bottom)和外边距的top/bottom(margin-top/margin-bottom)都不可改变<br><br>（也就是padding和margin的left和right是可以设置的），就是里面文字或图片的大小。<br><br>那么问题来了，浏览器还有默认的天生inline-block元素（拥有内在尺寸，可设置高宽，但不会自动换行），有哪些？<br><br>答案：<code>&lt;input&gt; 、&lt;img&gt; 、&lt;button&gt; 、&lt;texterea&gt; 、&lt;label&gt;</code>。<br><br>25、什么是外边距重叠？重叠的结果是什么？<br>外边距重叠就是margin-collapse。<br><br>在CSS当中，相邻的两个盒子（可能是兄弟关系也可能是祖先关系）的外边距可以结合成一个单独的外边距。这种合并外边距的方式被称为折叠，并且因而所结合成的外边距称为折叠外边距。<br><br>折叠结果遵循下列计算规则：<br><br>两个相邻的外边距都是正数时，折叠结果是它们两者之间较大的值。<br><br>两个相邻的外边距都是负数时，折叠结果是两者绝对值的较大值。<br><br>两个外边距一正一负时，折叠结果是两者的相加的和。<br><br>26、rgba()和opacity的透明效果有什么不同？<br>rgba()和opacity都能实现透明效果，但最大的不同是opacity作用于元素，以及元素内的所有内容的透明度，<br><br>而rgba()只作用于元素的颜色或其背景色。（设置rgba透明的元素的子元素不会继承透明效果！）<br><br>27、css中可以让文字在垂直和水平方向上重叠的两个属性是什么？<br>垂直方向：line-height<br><br>水平方向：letter-spacing<br><br>那么问题来了，关于letter-spacing的妙用知道有哪些么？<br><br>答案:可以用于消除inline-block元素间的换行符空格间隙问题。<br><br>28、如何垂直居中一个浮动元素？<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 方法一：已知元素的高宽</div><div class=\"line\"></div><div class=\"line\">#div1&#123;</div><div class=\"line\"></div><div class=\"line\">    background-color:#6699FF;</div><div class=\"line\"></div><div class=\"line\">    width:200px;</div><div class=\"line\"></div><div class=\"line\">    height:200px;</div><div class=\"line\"></div><div class=\"line\">    position: absolute;        //父元素需要相对定位</div><div class=\"line\"></div><div class=\"line\">    top: 50%;</div><div class=\"line\"></div><div class=\"line\">    left: 50%;</div><div class=\"line\"></div><div class=\"line\">    margin-top:-100px ;   //二分之一的height，width</div><div class=\"line\"></div><div class=\"line\">    margin-left: -100px;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">//方法二:未知元素的高宽</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">  #div1&#123;</div><div class=\"line\"></div><div class=\"line\">    width: 200px;</div><div class=\"line\"></div><div class=\"line\">    height: 200px;</div><div class=\"line\"></div><div class=\"line\">    background-color: #6699FF;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    margin:auto;</div><div class=\"line\"></div><div class=\"line\">    position: absolute;        //父元素需要相对定位</div><div class=\"line\"></div><div class=\"line\">    left: 0;</div><div class=\"line\"></div><div class=\"line\">    top: 0;</div><div class=\"line\"></div><div class=\"line\">    right: 0;</div><div class=\"line\"></div><div class=\"line\">    bottom: 0;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure><br><br>那么问题来了，如何垂直居中一个<img>?（用更简便的方法。）<br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">#Container     //&lt;img&gt;的容器设置如下</div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\">    display:table-cell;</div><div class=\"line\"></div><div class=\"line\">    text-align:center;</div><div class=\"line\"></div><div class=\"line\">    vertical-align:middle;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><br><br>29、px和em的区别。<br>px和em都是长度单位，区别是，px的值是固定的，指定是多少就是多少，计算比较容易。em得值不是固定的，并且em会继承父级元素的字体大小。<br><br>浏览器的默认字体高都是16px。所以未经调整的浏览器都符合: 1em=16px。那么12px=0.75em, 10px=0.625em。<br><br>30、描述一个”reset”的CSS文件并如何使用它。知道normalize.css吗？你了解他们的不同之处？<br>重置样式非常多，凡是一个前端开发人员肯定有一个常用的重置CSS文件并知道如何使用它们。他们是盲目的在做还是知道为什么这么做呢？原因是不同的浏览器对一些元素有不同的默认样式，如果你不处理，在不同的浏览器下会存在必要的风险，或者更有戏剧性的性发生。<br><br>你可能会用Normalize来代替你的重置样式文件。它没有重置所有的样式风格，但仅提供了一套合理的默认样式值。既能让众多浏览器达到一致和合理，但又不扰乱其他的东西（如粗体的标题）。<br><br>在这一方面，无法做每一个复位重置。它也确实有些超过一个重置，它处理了你永远都不用考虑的怪癖，像HTML的audio元素不一致或line-height不一致。<br><br>31、Sass、LESS是什么？大家为什么要使用他们？<br>他们是CSS预处理器。他是CSS上的一种抽象层。他们是一种特殊的语法/语言编译成CSS。<br><br>例如Less是一种动态样式语言. 将CSS赋予了动态语言的特性，如变量，继承，运算， 函数. LESS 既可以在客户端上运行 (支持IE 6+, Webkit, Firefox)，也可一在服务端运行 (借助 Node.js)。<br><br>为什么要使用它们？<br><br>结构清晰，便于扩展。<br><br>可以方便地屏蔽浏览器私有语法差异。这个不用多说，封装对浏览器语法差异的重复处理，减少无意义的机械劳动。<br><br>可以轻松实现多重继承。<br><br>完全兼容 CSS 代码，可以方便地应用到老项目中。LESS 只是在 CSS 语法上做了扩展，所以老的 CSS 代码也可以与 LESS 代码一同编译。<br><br>32、display:none与visibility:hidden的区别是什么？<br>display : 隐藏对应的元素但不挤占该元素原来的空间。<br><br>visibility: 隐藏对应的元素并且挤占该元素原来的空间。<br><br>即是，使用CSS display:none属性后，HTML元素（对象）的宽度、高度等各种属性值都将“丢失”;而使用visibility:hidden属性后，HTML元素（对象）仅仅是在视觉上看不见（完全透明），而它所占据的空间位置仍然存在。<br><br>34、CSS中link和@import的区别是：<br>Link属于html标签，而@import是CSS中提供的<br><br>在页面加载的时候，link会同时被加载，而@import引用的CSS会在页面加载完成后才会加载引用的CSS<br><br>@import只有在ie5以上才可以被识别，而link是html标签，不存在浏览器兼容性问题<br><br>Link引入样式的权重大于@import的引用（@import是将引用的样式导入到当前的页面中）<br><br>35、简介盒子模型：<br>CSS的盒子模型有两种：IE盒子模型、标准的W3C盒子模型模型<br><br>盒模型：内容、内边距、外边距（一般不计入盒子实际宽度）、边框<br><br><br><br>36、为什么要初始化样式？<br>由于浏览器兼容的问题，不同的浏览器对标签的默认样式值不同，若不初始化会造成不同浏览器之间的显示差异<br><br>但是初始化CSS会对搜索引擎优化造成小影响<br><br>37、BFC是什么?<br>BFC（块级格式化上下文），一个创建了新的BFC的盒子是独立布局的，盒子内元素的布局不会影响盒子外面的元素。在同一个BFC中的两个相邻的盒子在垂直方向发生margin重叠的问题<br><br>BFC是指浏览器中创建了一个独立的渲染区域，该区域内所有元素的布局不会影响到区域外元素的布局，这个渲染区域只对块级元素起作用<br><br>38、html语义化是什么？<br>当页面样式加载失败的时候能够让页面呈现出清晰的结构<br><br>有利于seo优化，利于被搜索引擎收录（更便于搜索引擎的爬虫程序来识别）<br><br>便于项目的开发及维护，使html代码更具有可读性，便于其他设备解析。<br><br>39、Doctype的作用？严格模式与混杂模式的区别？<br>&lt;!DOCTYPE&gt;用于告知浏览器该以何种模式来渲染文档<br><br>严格模式下：页面排版及JS解析是以该浏览器支持的最高标准来执行<br><br>混杂模式：不严格按照标准执行，主要用来兼容旧的浏览器，向后兼容<br><br>40、IE的双边距BUG：块级元素float后设置横向margin，ie6显示的margin比设置的较大。解决：加入_display：inline<br>41、HTML与XHTML——二者有什么区别？<br>1. 所有的标记都必须要有一个相应的结束标记<br><br>2. 所有标签的元素和属性的名字都必须使用小写<br><br>3. 所有的 XML 标记都必须合理嵌套<br><br>4. 所有的属性必须用引号 “” 括起来<br><br>5. 把所有 &lt; 和 &amp; 特殊符号用编码表示<br><br>6. 给所有属性赋一个值<br><br>7. 不要在注释内容中使用 “–”<br><br>8. 图片必须有说明文字<br><br>42、html常见兼容性问题？<br>1.双边距BUG float引起的  使用display<br><br>2.3像素问题 使用float引起的 使用dislpay:inline -3px<br><br>3.超链接hover 点击后失效  使用正确的书写顺序 link visited hover active<br><br>4.Ie z-index问题 给父级添加position:relative<br><br>5.Png 透明 使用js代码 改<br><br>6.Min-height 最小高度 ！Important 解决’<br><br>7.select 在ie6下遮盖 使用iframe嵌套<br><br>8.为什么没有办法定义1px左右的宽度容器（IE6默认的行高造成的，使用over:hidden,zoom:0.08 line-height:1px）<br><br>9.IE5-8不支持opacity，解决办法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">.opacity &#123;</div><div class=\"line\"></div><div class=\"line\">    opacity: 0.4</div><div class=\"line\"></div><div class=\"line\">    filter: alpha(opacity=60); /* for IE5-7 */</div><div class=\"line\"></div><div class=\"line\">    -ms-filter: &quot;progid:DXImageTransform.Microsoft.Alpha(Opacity=60)&quot;; /* for IE 8*/</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><br><br>10. IE6不支持PNG透明背景，解决办法: IE6下使用gif图片<br><br>43、对WEB标准以及W3C的理解与认识<br>答：标签闭合、标签小写、不乱嵌套、提高搜索机器人搜索几率、使用外 链css和js脚本、结构行为表现的分离、文件下载与页面速度更快、内容能被更多的用户所访问、内容能被更广泛的设备所访问、更少的代码和组件，容易维 护、改版方便，不需要变动页面内容、提供打印版本而不需要复制内容、提高网站易用性。<br><br>44、行内元素有哪些?块级元素有哪些?CSS的盒模型?<br>答：块级元素：div p h1 h2 h3 h4 form ul<br>行内元素: a b br i span input select<br>Css盒模型:内容，border ,margin，padding<br><br>45、前端页面有哪三层构成，分别是什么?作用是什么?<br>答：结构层 Html 表示层 CSS 行为层 js。<br><br>46、Doctype作用? 严格模式与混杂模式-如何触发这两种模式，区分它们有何意义?<br>    （1）、&lt;!DOCTYPE&gt; 声明位于文档中的最前面，处于 <html> 标签之前。告知浏览器的解析器，用什么文档类型 规范来解析这个文档。<br><br>    （2）、严格模式的排版和 JS 运作模式是  以该浏览器支持的最高标准运行。<br><br>    （3）、在混杂模式中，页面以宽松的向后兼容的方式显示。模拟老式浏览器的行为以防止站点无法工作。<br><br>    （4）、DOCTYPE不存在或格式不正确会导致文档以混杂模式呈现。<br><br>47、行内元素有哪些？块级元素有哪些？ 空(void)元素有那些？<br>（1）CSS规范规定，每个元素都有display属性，确定该元素的类型，每个元素都有默认的display值，比如div默认display属性值为“block”，成为“块级”元素；span默认display属性值为“inline”，是“行内”元素。<br><br>（2）行内元素有：a b span img input select strong（强调的语气） 块级元素有：div ul ol li dl dt dd h1 h2 h3 h4…p<br><br>（3）知名的空元素：<br><code>&lt;br&gt;&lt;hr&gt;&lt;img&gt;&lt;input&gt;&lt;link&gt;&lt;meta&gt;鲜为人知的是： &lt;area&gt;&lt;base&gt;&lt;col&gt;&lt;command&gt;\n\n&lt;embed&gt;&lt;keygen&gt;&lt;param&gt;&lt;source&gt;&lt;track&gt;&lt;wbr&gt;</code><br>48、CSS的盒子模型？<br>（1）两种， IE 盒子模型、标准 W3C 盒子模型；IE 的content部分包含了 border 和 pading;<br><br>（2）盒模型： 内容(content)、填充(padding)、边界(margin)、 边框(border).<br><br>49、CSS 选择符有哪些？哪些属性可以继承？优先级算法如何计算？ CSS3新增伪类有那些？<br>    <em>   1.id选择器（ # myid）<br><br>        2.类选择器（.myclassname）<br><br>        3.标签选择器（div, h1, p）<br><br>        4.相邻选择器（h1 + p）<br><br>        5.子选择器（ul &lt; li）<br><br>        6.后代选择器（li a）<br><br>        7.通配符选择器（ </em> ）<br><br>        8.属性选择器（a[rel = “external”]）<br><br>        9.伪类选择器（a: hover, li: nth - child）<br><br>    <em>   可继承： font-size font-family color, UL LI DL DD DT;\n\n    </em>   不可继承 ：border padding margin width height ;<br><br>    <em>   优先级就近原则，样式定义最近者为准;\n\n    </em>   载入样式以最后载入的定位为准;<br><br>优先级为:<br><br>       !important &gt;  id &gt; class &gt; tag<br><br>       important 比 内联优先级高<br><br>CSS3新增伪类举例：<br><br>    p:first-of-type 选择属于其父元素的首个 <p> 元素的每个 <p> 元素。<br><br>    p:last-of-type  选择属于其父元素的最后 <p> 元素的每个 <p> 元素。<br><br>    p:only-of-type  选择属于其父元素唯一的 <p> 元素的每个 <p> 元素。<br><br>    p:only-child    选择属于其父元素的唯一子元素的每个 <p> 元素。<br><br>    p:nth-child(2)  选择属于其父元素的第二个子元素的每个 <p> 元素。<br><br>    :enabled、:disabled 控制表单控件的禁用状态。<br><br>    :checked，单选框或复选框被选中。<br><br>50、如何居中div,如何居中一个浮动元素?<br>给div设置一个宽度，然后添加margin:0 auto属性<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">div&#123;</div><div class=\"line\"></div><div class=\"line\">    width:200px;</div><div class=\"line\"></div><div class=\"line\">    margin:0 auto;</div><div class=\"line\"></div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure><br><br>居中一个浮动元素<br><br>      确定容器的宽高 宽500 高 300 的层<br><br>      设置层的外边距<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"> .div &#123;</div><div class=\"line\"></div><div class=\"line\">  Width:500px ; height:300px;//高度可以不设</div><div class=\"line\"></div><div class=\"line\">  Margin: -150px 0 0 -250px;</div><div class=\"line\"></div><div class=\"line\">  position:relative;相对定位</div><div class=\"line\"></div><div class=\"line\">  background-color:pink;//方便看效果</div><div class=\"line\"></div><div class=\"line\">  left:50%;</div><div class=\"line\"></div><div class=\"line\">  top:50%;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><br><br>51、浏览器的内核分别是什么?经常遇到的浏览器的兼容性有哪些？原因，解决方法是什么，常用hack的技巧 ？<br>    <em> IE浏览器的内核Trident、 Mozilla的Gecko、google的WebKit、Opera内核Presto；\n\n    </em> png24为的图片在iE6浏览器上出现背景，解决方案是做成PNG8.<br><br>    <em> 浏览器默认的margin和padding不同。解决方案是加一个全局的</em>{margin:0;padding:0;}来统一。<br><br>    <em> IE6双边距bug:块属性标签float后，又有横行的margin情况下，在ie6显示margin比设置的大。<br><br>      浮动ie产生的双倍距离 #box{ float:left; width:10px; margin:0 0 0 100px;}<br><br>     这种情况之下IE会产生20px的距离，解决方案是在float的标签样式控制中加入 ——<br>     <code>_display:inline;将其转化为行内属性。(_这个符号只有ie6会识别)</code><br><br>      渐进识别的方式，从总体中逐渐排除局部。<br><br>      首先，巧妙的使用“\\9”这一标记，将IE游览器从所有情况中分离出来。<br><br>      接着，再次使用“+”将IE8和IE7、IE6分离开来，这样IE8已经独立识别。<br><br>      css<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">.bb&#123;</div><div class=\"line\"></div><div class=\"line\"> background-color:#f1ee18;/*所有识别*/</div><div class=\"line\"></div><div class=\"line\">.background-color:#00deff\\9; /*IE6、7、8识别*/</div><div class=\"line\"></div><div class=\"line\">+background-color:#a200ff;/*IE6、7识别*/</div><div class=\"line\"></div><div class=\"line\">_background-color:#1e0bd1;/*IE6识别*/</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n\n    </em>  IE下,可以使用获取常规属性的方法来获取自定义属性,<br><br>       也可以使用getAttribute()获取自定义属性;<br><br>       Firefox下,只能使用getAttribute()获取自定义属性.<br><br>       解决方法:统一通过getAttribute()获取自定义属性.<br><br>    <em>  IE下,even对象有x,y属性,但是没有pageX,pageY属性;<br><br>      Firefox下,event对象有pageX,pageY属性,但是没有x,y属性.\n\n    </em> （条件注释）缺点是在IE浏览器下可能会增加额外的HTTP请求数。<br><br>    <em> Chrome 中文界面下默认会将小于 12px 的文本强制按照 12px 显示, 可通过加入 CSS 属性 -webkit-text-size-adjust: none; 解决.<br><br>    超链接访问过后hover样式就不出现了 被点击访问过的超链接样式不在具有hover和active了解决方法是改变CSS属性的排列顺序:<br><br>    L-V-H-A :  a:link {} a:visited {} a:hover {} a:active {}<br><br>52、列出display的值，说明他们的作用。position的值， relative和absolute定位原点是？<br>  1. block 象块类型元素一样显示。<br><br>  none 缺省值。向行内元素类型一样显示。<br><br>  inline-block 象行内元素一样显示，但其内容象块类型元素一样显示。<br><br>  list-item 象块类型元素一样显示，并添加样式列表标记。<br><br>  2. position的值\n\n  </em> absolute<br><br>        生成绝对定位的元素，相对于 static 定位以外的第一个父元素进行定位。<br><br>  <em> fixed （老IE不支持）<br><br>        生成绝对定位的元素，相对于浏览器窗口进行定位。\n\n  </em> relative<br><br>        生成相对定位的元素，相对于其正常位置进行定位。<br><br>  <em> static  默认值。没有定位，元素出现在正常的流中\n\n  </em> （忽略 top, bottom, left, right z-index 声明）。<br><br>  <em>  inherit 规定从父元素继承 position 属性的值。<br><br>53、absolute的containing block计算方式跟正常流有什么不同？<br>54、position跟display、margin collapse、overflow、float这些特性相互叠加后会怎么样？<br>55、对WEB标准以及W3C的理解与认识<br>标签闭合、标签小写、不乱嵌套、提高搜索机器人搜索几率、使用外 链css和js脚本、结构行为表现的分离、文件下载与页面速度更快、内容能被更多的用户所访问、内容能被更广泛的设备所访问、更少的代码和组件，容易维 护、改版方便，不需要变动页面内容、提供打印版本而不需要复制内容、提高网站易用性；<br><br>56、css的基本语句构成是?<br>选择器{属性1:值1;属性2:值2;……}<br><br>57、浏览器标准模式和怪异模式之间的区别是什么?<br>盒子模型 渲染模式的不同<br><br>使用 window.top.document.compatMode 可显示为什么模式<br><br>58、CSS中可以通过哪些属性定义，使得一个DOM元素不显示在浏览器可视范围内？　　<br>　　最基本的：<br><br>　　设置display属性为none，或者设置visibility属性为hidden<br><br>　　技巧性：<br><br>　　设置宽高为0，设置透明度为0，设置z-index位置在-1000<br><br>59、超链接访问过后hover样式就不出现的问题是什么？如何解决？<br>　　答案：被点击访问过的超链接样式不在具有hover和active了,解决方法是改变CSS属性的排列顺序: L-V-H-A（link,visited,hover,active）<br><br>60、什么是Css Hack？ie6,7,8的hack分别是什么？<br>　　答案：针对不同的浏览器写不同的CSS code的过程，就是CSS hack。<br><br>　　示例如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">#test       &#123;  </div><div class=\"line\"></div><div class=\"line\">        width:300px;  </div><div class=\"line\"></div><div class=\"line\">        height:300px;  </div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        background-color:blue;      /firefox*/</div><div class=\"line\"></div><div class=\"line\">        background-color:red\\9;      /all ie*/</div><div class=\"line\"></div><div class=\"line\">        background-color:yellow\\0;    /ie8*/</div><div class=\"line\"></div><div class=\"line\">        +background-color:pink;        /ie7*/</div><div class=\"line\"></div><div class=\"line\">        _background-color:orange;       /ie6/    &#125;</div><div class=\"line\"></div><div class=\"line\">        :root #test &#123; background-color:purple\\9; &#125;  /ie9*/</div><div class=\"line\"></div><div class=\"line\">    @media all and (min-width:0px)&#123; #test &#123;background-color:black\\0;&#125; &#125;  /opera/</div><div class=\"line\"></div><div class=\"line\">    @media screen and (-webkit-min-device-pixel-ratio:0)&#123; #test &#123;background-color:gray;&#125; &#125;       /chrome and safari*/</div></pre></td></tr></table></figure><br><br>62、请用Css写一个简单的幻灯片效果页面<br>　　答案：知道是要用css3。使用animation动画实现一个简单的幻灯片效果。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**HTML**/</div><div class=\"line\"></div><div class=\"line\">        div.ani</div><div class=\"line\"></div><div class=\"line\">        /**css**/</div><div class=\"line\"></div><div class=\"line\">        .ani&#123;</div><div class=\"line\"></div><div class=\"line\">          width:480px;</div><div class=\"line\"></div><div class=\"line\">          height:320px;</div><div class=\"line\"></div><div class=\"line\">          margin:50px auto;</div><div class=\"line\"></div><div class=\"line\">          overflow: hidden;</div><div class=\"line\"></div><div class=\"line\">          box-shadow:0 0 5px rgba(0,0,0,1);</div><div class=\"line\"></div><div class=\"line\">          background-size: cover;</div><div class=\"line\"></div><div class=\"line\">          background-position: center;</div><div class=\"line\"></div><div class=\"line\">          -webkit-animation-name: &quot;loops&quot;;</div><div class=\"line\"></div><div class=\"line\">          -webkit-animation-duration: 20s;</div><div class=\"line\"></div><div class=\"line\">          -webkit-animation-iteration-count: infinite;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        @-webkit-keyframes &quot;loops&quot; &#123;</div><div class=\"line\"></div><div class=\"line\">            0% &#123; background:url(http://d.hiphotos.baidu.com/image/w%3D400/sign=c01e6adca964034f0fcdc3069fc27980/e824b899a9014c08e5e38ca4087b02087af4f4d3.jpg) no-repeat;            </div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            25% &#123;</div><div class=\"line\"></div><div class=\"line\">                background:url(http://b.hiphotos.baidu.com/image/w%3D400/sign=edee1572e9f81a4c2632edc9e72b6029/30adcbef76094b364d72bceba1cc7cd98c109dd0.jpg) no-repeat;</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            50% &#123;</div><div class=\"line\"></div><div class=\"line\">                background:url(http://b.hiphotos.baidu.com/image/w%3D400/sign=937dace2552c11dfded1be2353266255/d8f9d72a6059252d258e7605369b033b5bb5b912.jpg) no-repeat;</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            75% &#123;</div><div class=\"line\"></div><div class=\"line\">                background:url(http://g.hiphotos.baidu.com/image/w%3D400/sign=7d37500b8544ebf86d71653fe9f9d736/0df431adcbef76095d61f0972cdda3cc7cd99e4b.jpg) no-repeat;</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            100% &#123;</div><div class=\"line\"></div><div class=\"line\">                background:url(http://c.hiphotos.baidu.com/image/w%3D400/sign=cfb239ceb0fb43161a1f7b7a10a54642/3b87e950352ac65ce2e73f76f9f2b21192138ad1.jpg) no-repeat;</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure><br><br>63、行内元素和块级元素的具体区别是什么？行内元素的padding和margin可设置吗？<br>　　块级元素(block)特性：<br><br>总是独占一行，表现为另起一行开始，而且其后的元素也必须另起一行显示;<br>宽度(width)、高度(height)、内边距(padding)和外边距(margin)都可控制;<br>　　内联元素(inline)特性：<br><br>和相邻的内联元素在同一行;<br>宽度(width)、高度(height)、内边距的top/bottom(padding-top/padding-bottom)和外边距的top/bottom(margin-top/margin-bottom)都不可改变（也就是padding和margin的left和right是可以设置的），就是里面文字或图片的大小。<br>　　那么问题来了，浏览器还有默认的天生inline-block元素（拥有内在尺寸，可设置高宽，但不会自动换行），有哪些？<br><br>　　答案：<code>&lt;input&gt; 、&lt;img&gt; 、&lt;button&gt; 、&lt;textarea&gt; 、&lt;label&gt;</code><br><br>64、什么是外边距重叠？重叠的结果是什么？<br>　　答案：<br><br>　　外边距重叠就是margin-collapse。<br><br>　　在CSS当中，相邻的两个盒子（可能是兄弟关系也可能是祖先关系）的外边距可以结合成一个单独的外边距。这种合并外边距的方式被称为折叠，并且因而所结合成的外边距称为折叠外边距。<br><br>　　折叠结果遵循下列计算规则：<br><br>两个相邻的外边距都是正数时，折叠结果是它们两者之间较大的值。<br>两个相邻的外边距都是负数时，折叠结果是两者绝对值的较大值。<br>两个外边距一正一负时，折叠结果是两者的相加的和。<br>　　<br><br>65、rgba()和opacity的透明效果有什么不同？<br>　　rgba()和opacity都能实现透明效果，但最大的不同是opacity作用于元素，以及元素内的所有内容的透明度，<br><br>　　而rgba()只作用于元素的颜色或其背景色。（设置rgba透明的元素的子元素不会继承透明效果！）<br><br>66、css中可以让文字在垂直和水平方向上重叠的两个属性是什么？<br>　　垂直方向：line-height<br><br>　　水平方向：letter-spacing<br><br>　　那么问题来了，关于letter-spacing的妙用知道有哪些么？<br><br>　　答案:可以用于消除inline-block元素间的换行符空格间隙问题。<br><br>67、如何垂直居中一个浮动元素？<br>// 方法一：已知元素的高宽<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\">#div1&#123;</div><div class=\"line\"></div><div class=\"line\">    background-color:#6699FF;</div><div class=\"line\"></div><div class=\"line\">    width:200px;</div><div class=\"line\"></div><div class=\"line\">    height:200px;</div><div class=\"line\"></div><div class=\"line\">    position: absolute;        //父元素需要相对定位</div><div class=\"line\"></div><div class=\"line\">    top: 50%;</div><div class=\"line\"></div><div class=\"line\">    left: 50%;</div><div class=\"line\"></div><div class=\"line\">    margin-top:-100px ;   //二分之一的height，width</div><div class=\"line\"></div><div class=\"line\">    margin-left: -100px;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">//方法二:未知元素的高宽</div><div class=\"line\"></div><div class=\"line\">  #div1&#123;</div><div class=\"line\"></div><div class=\"line\">    width: 200px;</div><div class=\"line\"></div><div class=\"line\">    height: 200px;</div><div class=\"line\"></div><div class=\"line\">    background-color: #6699FF;</div><div class=\"line\"></div><div class=\"line\">    margin:auto;</div><div class=\"line\"></div><div class=\"line\">    position: absolute;        //父元素需要相对定位</div><div class=\"line\"></div><div class=\"line\">    left: 0;</div><div class=\"line\"></div><div class=\"line\">    top: 0;</div><div class=\"line\"></div><div class=\"line\">    right: 0;</div><div class=\"line\"></div><div class=\"line\">    bottom: 0;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure><br><br>那么问题来了，如何垂直居中一个<img>?（用更简便的方法。）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">#container     //&lt;img&gt;的容器设置如下</div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\">    display:table-cell;</div><div class=\"line\"></div><div class=\"line\">    text-align:center;</div><div class=\"line\"></div><div class=\"line\">    vertical-align:middle;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><br><br>68、描述一个”reset”的CSS文件并如何使用它。知道normalize.css吗？你了解他们的不同之处？　<br>　　重置样式非常多，凡是一个前端开发人员肯定有一个常用的重置CSS文件并知道如何使用它们。他们是盲目的在做还是知道为什么这么做呢？原因是不同的浏览器对一些元素有不同的默认样式，如果你不处理，在不同的浏览器下会存在必要的风险，或者更有戏剧性的性发生。<br><br>　　你可能会用Normalize来代替你的重置样式文件。它没有重置所有的样式风格，但仅提供了一套合理的默认样式值。既能让众多浏览器达到一致和合理，但又不扰乱其他的东西（如粗体的标题）。<br><br>　　在这一方面，无法做每一个复位重置。它也确实有些超过一个重置，它处理了你永远都不用考虑的怪癖，像HTML的audio元素不一致或line-height不一致。<br><br>69、说display属性有哪些？可以做什么？<br>display:block行内元素转换为块级元素<br><br>  display:inline块级元素转换为行内元素<br><br>  display:inline-block转为内联元素<br><br>70、哪些css属性可以继承？<br>可继承： font-size font-family color, ul li dl dd dt;<br><br>  不可继承 ：border padding margin width height ;<br><br>71、css优先级算法如何计算？<br>!important &gt;  id &gt; class &gt; 标签<br><br>  !important 比 内联优先级高\n\n  </em> 优先级就近原则，样式定义最近者为准;<br><br>  <em> 以最后载入的样式为准;<br><br>72、b标签和strong标签,i标签和em标签的区别？<br>后者有语义，前者则无。<br><br>73、有那些行内元素、有哪些块级元素、盒模型？<br>1.内联元素(inline element)<br><br>a – 锚点<br><br>abbr – 缩写<br><br>acronym – 首字<br><br>b – 粗体(不推荐)<br><br>big – 大字体<br><br>br – 换行<br><br>em – 强调<br><br>font – 字体设定(不推荐)<br><br>i – 斜体<br><br>img – 图片<br><br>input – 输入框<br><br>label – 表格标签<br><br>s – 中划线(不推荐)<br><br>select – 项目选择<br><br>small – 小字体文本<br><br>span – 常用内联容器，定义文本内区块<br><br>strike – 中划线<br><br>strong – 粗体强调<br><br>sub – 下标<br><br>sup – 上标<br><br>textarea – 多行文本输入框<br><br>tt – 电传文本<br><br>u – 下划线<br><br>var – 定义变量<br><br>2、块级元素<br><br>address – 地址<br><br>blockquote – 块引用<br><br>center – 举中对齐块<br><br>dir – 目录列表<br><br>div – 常用块级容易，也是css layout的主要标签<br><br>dl – 定义列表<br><br>fieldset – form控制组<br><br>form – 交互表单<br><br>h1 – 大标题<br><br>h2 – 副标题<br><br>h3 – 3级标题<br><br>h4 – 4级标题<br><br>h5 – 5级标题<br><br>h6 – 6级标题<br><br>hr – 水平分隔线<br><br>isindex – input prompt<br><br>menu – 菜单列表<br><br>noframes – frames可选内容，（对于不支持frame的浏览器显示此区块内容）<br><br>noscript – ）可选脚本内容（对于不支持script的浏览器显示此内容）<br><br>ol – 排序表单<br><br>p – 段落<br><br>pre – 格式化文本<br><br>table – 表格<br><br>ul – 非排序列表<br><br>3.CSS盒子模型包含四个部分组成：<br><br>内容、填充（padding）、边框（border）、外边界（margin）。<br><br>74、有哪些选择符，优先级的计算公式是什么？行内样式和！important哪个优先级高？<br>#ID &gt; .class &gt; 标签选择符  !important优先级高<br><br>75.我想让行内元素跟上面的元素距离10px，加margin-top和padding-top可以吗？<br>  margin-top,padding-top无效<br><br>76.CSS的盒模型由什么组成？<br>  内容，border ,margin，padding<br><br>77、.说说display属性有哪些？可以做什么？<br>  display:block行内元素转换为块级元素<br><br>  display:inline块级元素转换为行内元素<br><br>  display:inline-block转为内联元素<br><br>78、哪些css属性可以继承？<br>  可继承： font-size font-family color, ul li dl dd dt;<br><br>  不可继承 ：border padding margin width height ;<br><br>79、css优先级算法如何计算？<br>  !important &gt;  id &gt; class &gt; 标签<br><br>  !important 比 内联优先级高\n\n  </em> 优先级就近原则，样式定义最近者为准;<br><br>  * 以最后载入的样式为准;<br><br>80、text-align:center和line-height有什么区别？<br>  text-align是水平对齐，line-height是行间。<br><br>81、前端页面由哪三层构成，分别是什么？作用是什么？<br>   结构层 Html 表示层 CSS 行为层 js<br><br>82、写一个表格以及对应的CSS,使表格奇数行为白色背景，偶数行为灰色，鼠标一上去为黄色背景。<br>二、JS基础<br>1、javascript的typeof返回哪些数据类型<br>Object number function boolean underfind<br><br>2、例举3种强制类型转换和2种隐式类型转换?<br>强制（parseInt,parseFloat,number）<br><br>隐式（== – ===）<br><br>3、split() join() 的区别<br>前者是切割成数组的形式，后者是将数组转换成字符串<br><br>4、数组方法pop() push() unshift() shift()<br>Push()尾部添加 pop()尾部删除<br><br>Unshift()头部添加 shift()头部删除<br><br>5、事件绑定和普通事件有什么区别<br>事件绑定是指把事件注册到具体的元素之上，普通事件指的是可以用来注册的事件<br><br>6、IE和DOM事件流的区别<br>1.执行顺序不一样、<br><br>2.参数不一样<br><br>3.事件加不加on<br><br>4.this指向问题<br><br>7、IE和标准下有哪些兼容性的写法<br>Var ev = ev || window.event<br><br>document.documentElement.clientWidth || document.body.clientWidth<br><br>Var target = ev.srcElement||ev.target<br><br>8、call和apply的区别<br>Object.call(this,obj1,obj2,obj3)<br><br>Object.apply(this,arguments)<br><br>9、b继承a的方法<br>10、JavaScript this指针、闭包、作用域<br>11、事件委托是什么<br>让利用事件冒泡的原理，让自己的所触发的事件，让他的父元素代替执行！<br><br>12、闭包是什么，有什么特性，对页面有什么影响<br>闭包就是能够读取其他函数内部变量的函数。<br><br>13、如何阻止事件冒泡和默认事件<br>canceBubble return false<br><br>14、添加 删除 替换 插入到某个接点的方法<br>obj.appendChidl()<br><br>obj.innersetBefore<br><br>obj.replaceChild<br><br>obj.removeChild<br><br>15、javascript的本地对象，内置对象和宿主对象<br>本地对象为array obj regexp等可以new实例化<br><br>内置对象为gload Math 等不可以实例化的<br><br>宿主为浏览器自带的document,window 等<br><br>16、document load 和document ready的区别<br>Document.onload 是在结构和样式加载完才执行js<br><br>Document.ready原生种没有这个方法，jQuery中有 $().ready(function)<br><br>17、”==”和“===”的不同<br>前者会自动转换类型<br><br>后者不会<br><br>18、javascript的同源策略<br>一段脚本只能读取来自于同一来源的窗口和文档的属性，这里的同一来源指的是主机名、议和端口号的组合<br><br>19、编写一个数组去重的方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">function oSort(arr) &#123;   </div><div class=\"line\">var result =&#123;&#125;;</div><div class=\"line\">var newArr=[];</div><div class=\"line\">for(var i=0;i&lt;arr.length;i++)&#123;</div><div class=\"line\">if(!result[arr]) &#123;</div><div class=\"line\">newArr.push(arr)</div><div class=\"line\">result[arr]=1</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">return newArr</div><div class=\"line\">&#125;&lt;/arr.length;i++)</div></pre></td></tr></table></figure><br><br>20、JavaScript是一门什么样的语言，它有哪些特点？<br>没有标准答案。<br><br>21、JavaScript的数据类型都有什么？<br>基本数据类型：String,boolean,Number,Undefined, Null<br><br>引用数据类型：Object(Array,Date,RegExp,Function)<br><br>那么问题来了，如何判断某变量是否为数组数据类型？<br><br>方法一.判断其是否具有“数组性质”，如slice()方法。可自己给该变量定义slice方法，故有时会失效<br><br>方法二.obj instanceof Array 在某些IE版本中不正确<br><br>方法三.方法一二皆有漏洞，在ECMA Script5中定义了新方法Array.isArray(), 保证其兼容性，最好的方法如下：<br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">if(typeof Array.isArray===&quot;undefined&quot;)&#123;</div><div class=\"line\"></div><div class=\"line\">  Array.isArray = function(arg)&#123;</div><div class=\"line\"></div><div class=\"line\">        return Object.prototype.toString.call(arg)===&quot;[object Array]&quot;</div><div class=\"line\"></div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><br><br>22、已知ID的Input输入框，希望获取这个输入框的输入值，怎么做？(不使用第三方框架)<br><br><br>document.getElementById(“ID”).value<br><br>23、希望获取到页面中所有的checkbox怎么做？(不使用第三方框架)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">var domList = document.getElementsByTagName(‘input’)</div><div class=\"line\"></div><div class=\"line\">var checkBoxList = [];</div><div class=\"line\"></div><div class=\"line\">var len = domList.length;　　//缓存到局部变量</div><div class=\"line\"></div><div class=\"line\">while (len--) &#123;　　//使用while的效率会比for循环更高</div><div class=\"line\"></div><div class=\"line\">　　if (domList[len].type == ‘checkbox’) &#123;</div><div class=\"line\"></div><div class=\"line\">    　　checkBoxList.push(domList[len]);</div><div class=\"line\"></div><div class=\"line\">　　&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><br><br>24、设置一个已知ID的DIV的html内容为xxxx，字体颜色设置为黑色(不使用第三方框架)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">var dom = document.getElementById(“ID”);</div><div class=\"line\"></div><div class=\"line\">dom.innerHTML = “xxxx”</div><div class=\"line\"></div><div class=\"line\">dom.style.color = “#000”</div></pre></td></tr></table></figure><br><br>25、当一个DOM节点被点击时候，我们希望能够执行一个函数，应该怎么做？<br>直接在DOM里绑定事件：<div onclick=”test()”></div>\n\n<p>在JS里通过onclick绑定：xxx.onclick = test</p>\n<p>通过事件添加进行绑定：addEventListener(xxx, ‘click’, test)</p>\n<p>那么问题来了，Javascript的事件流模型都有什么？</p>\n<p>“事件冒泡”：事件开始由最具体的元素接受，然后逐级向上传播</p>\n<p>“事件捕捉”：事件由最不具体的节点先接收，然后逐级向下，一直到最具体的</p>\n<p>“DOM事件流”：三个阶段：事件捕捉，目标阶段，事件冒泡</p>\n<p>26、看下列代码输出为何？解释原因。</p>\n<p>var a;</p>\n<p>alert(typeof a); // undefined</p>\n<p>alert(b); // 报错</p>\n<p>解释：Undefined是一个只有一个值的数据类型，这个值就是“undefined”，在使用var声明变量但并未对其赋值进行初始化时，这个变量的值就是undefined。而b由于未声明将报错。注意未申明的变量和声明了未赋值的是不一样的。</p>\n<p>27、看下列代码,输出什么？解释原因。</p>\n<p>var a = null;</p>\n<p>alert(typeof a); //object</p>\n<p>解释：null是一个只有一个值的数据类型，这个值就是null。表示一个空指针对象，所以用typeof检测会返回”object”。</p>\n<p>28、看下列代码,输出什么？解释原因。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">var undefined;</div><div class=\"line\"></div><div class=\"line\">undefined == null; // true</div><div class=\"line\"></div><div class=\"line\">1 == true;   // true</div><div class=\"line\"></div><div class=\"line\">2 == true;   // false</div><div class=\"line\"></div><div class=\"line\">0 == false;  // true</div><div class=\"line\"></div><div class=\"line\">0 == &apos;&apos;;     // true</div><div class=\"line\"></div><div class=\"line\">NaN == NaN;  // false</div><div class=\"line\"></div><div class=\"line\">[] == false; // true</div><div class=\"line\"></div><div class=\"line\">[] == ![];   // true</div></pre></td></tr></table></figure>\n<p>undefined与null相等，但不恒等（===）<br>一个是number一个是string时，会尝试将string转换为number</p>\n<p>尝试将boolean转换为number，0或1</p>\n<p>尝试将Object转换成number或string，取决于另外一个对比量的类型</p>\n<p>所以，对于0、空字符串的判断，建议使用 “===” 。“===”会先判断两边的值类型，类型不匹配时为false。</p>\n<p>那么问题来了，看下面的代码，输出什么，foo的值为什么？<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">var foo = &quot;11&quot;+2-&quot;1&quot;;</div><div class=\"line\"></div><div class=\"line\">console.log(foo);</div><div class=\"line\"></div><div class=\"line\">console.log(typeof foo);</div></pre></td></tr></table></figure></p>\n<p>执行完后foo的值为111，foo的类型为String。</p>\n<p>29、看代码给答案。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">var a = new Object();</div><div class=\"line\"></div><div class=\"line\">a.value = 1;</div><div class=\"line\"></div><div class=\"line\">b = a;</div><div class=\"line\"></div><div class=\"line\">b.value = 2;</div><div class=\"line\"></div><div class=\"line\">alert(a.value);</div></pre></td></tr></table></figure></p>\n<p>答案：2（考察引用数据类型细节）</p>\n<p>30、已知数组var stringArray = [“This”, “is”, “Baidu”, “Campus”]，Alert出”This is Baidu Campus”。<br>答案：alert(stringArray.join(“”))</p>\n<p>已知有字符串foo=”get-element-by-id”,写一个function将其转化成驼峰表示法”getElementById”。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">function combo(msg)&#123;</div><div class=\"line\"></div><div class=\"line\">    var arr=msg.split(&quot;-&quot;);</div><div class=\"line\"></div><div class=\"line\">    for(var i=1;i&lt;arr.length;i++)&#123;</div><div class=\"line\"></div><div class=\"line\">        arr[i]=arr[i].charAt(0).toUpperCase()+arr[i].substr(1,arr[i].length-1);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    msg=arr.join(&quot;&quot;);</div><div class=\"line\"></div><div class=\"line\">    return msg;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>(考察基础API)</p>\n<p>31、var numberArray = [3,6,2,4,1,5]; （考察基础API）<br>1) 实现对该数组的倒排，输出[5,1,4,2,6,3]</p>\n<p>2) 实现对该数组的降序排列，输出[6,5,4,3,2,1]</p>\n<p>function combo(msg){</p>\n<pre><code>var arr=msg.split(&quot;-&quot;);\n\nfor(var i=1;i&lt;arr.length;i++){\n\n    arr[i]=arr[i].charAt(0).toUpperCase()+arr[i].substr(1,arr[i].length-1);\n\n}\n\nmsg=arr.join(&quot;&quot;);\n\nreturn msg;\n</code></pre><p>}</p>\n<p>32、输出今天的日期，以YYYY-MM-DD的方式，比如今天是2014年9月26日，则输出2014-09-26</p>\n<p>var d = new Date();</p>\n<p>// 获取年，getFullYear()返回4位的数字</p>\n<p>var year = d.getFullYear();</p>\n<p>// 获取月，月份比较特殊，0是1月，11是12月</p>\n<p>var month = d.getMonth() + 1;</p>\n<p>// 变成两位</p>\n<p>month = month &lt; 10 ? ‘0’ + month : month;</p>\n<p>// 获取日</p>\n<p>var day = d.getDate();</p>\n<p>day = day &lt; 10 ? ‘0’ + day : day;</p>\n<p>alert(year + ‘-‘ + month + ‘-‘ + day);</p>\n<p>33、将字符串”<tr><td>{$id}</td><td>{$name}</td></tr>”中的{$id}替换成10，{$name}替换成Tony （使用正则表达式）<br>答案：”<tr><td>{$id}</td><td>{$id}_{$name}</td></tr>”.replace(/{\\$id}/g, ’10′).replace(/{\\$name}/g, ‘Tony’);</p>\n<p>34、为了保证页面输出安全，我们经常需要对一些特殊的字符进行转义，请写一个函数escapeHtml，将&lt;, &gt;, &amp;, “进行转义</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">function escapeHtml(str) &#123;</div><div class=\"line\"></div><div class=\"line\">return str.replace(/[&lt;&gt;”&amp;]/g, function(match) &#123;</div><div class=\"line\"></div><div class=\"line\">    switch (match) &#123;</div><div class=\"line\"></div><div class=\"line\">     case “&lt;”:</div><div class=\"line\"></div><div class=\"line\">         return “&amp;lt;”;</div><div class=\"line\"></div><div class=\"line\">     case “&gt;”:</div><div class=\"line\"></div><div class=\"line\">       return “&amp;gt;”;</div><div class=\"line\"></div><div class=\"line\">     case “&amp;”:</div><div class=\"line\"></div><div class=\"line\">       return “&amp;amp;”;</div><div class=\"line\"></div><div class=\"line\">     case “\\””:</div><div class=\"line\"></div><div class=\"line\">        return “&amp;quot;”;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">  &#125;);</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>35、foo = foo||bar ，这行代码是什么意思？为什么要这样写？<br>答案：if(!foo) foo = bar; //如果foo存在，值不变，否则把bar的值赋给foo。</p>\n<p>短路表达式：作为”&amp;&amp;”和”||”操作符的操作数表达式，这些表达式在进行求值时，只要最终的结果已经可以确定是真或假，求值过程便告终止，这称之为短路求值。</p>\n<p>36、看下列代码，将会输出什么?(变量声明提升)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">var foo = 1;</div><div class=\"line\"></div><div class=\"line\">function()&#123;</div><div class=\"line\"></div><div class=\"line\">    console.log(foo);</div><div class=\"line\"></div><div class=\"line\">    var foo = 2;</div><div class=\"line\"></div><div class=\"line\">    console.log(foo);</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>答案：输出undefined 和 2。上面代码相当于：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">var foo = 1;</div><div class=\"line\"></div><div class=\"line\">function()&#123;</div><div class=\"line\"></div><div class=\"line\">    var foo;</div><div class=\"line\"></div><div class=\"line\">    console.log(foo); //undefined</div><div class=\"line\"></div><div class=\"line\">    foo = 2;</div><div class=\"line\"></div><div class=\"line\">    console.log(foo); // 2;  </div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>函数声明与变量声明会被JavaScript引擎隐式地提升到当前作用域的顶部，但是只提升名称不会提升赋值部分。</p>\n<p>37、用js实现随机选取10–100之间的10个数字，存入一个数组，并排序。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">var iArray = [];</div><div class=\"line\"></div><div class=\"line\">funtion getRandom(istart, iend)&#123;</div><div class=\"line\"></div><div class=\"line\">        var iChoice = iend - istart +1;</div><div class=\"line\"></div><div class=\"line\">        return Math.floor(Math.random() * iChoice + istart;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">for(var i=0; i&lt;10; i++)&#123;</div><div class=\"line\"></div><div class=\"line\">        iArray.push(getRandom(10,100));</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">iArray.sort();</div></pre></td></tr></table></figure></p>\n<p>38、把两个数组合并，并删除第二个元素。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">var array1 = [&apos;a&apos;,&apos;b&apos;,&apos;c&apos;];</div><div class=\"line\"></div><div class=\"line\">var bArray = [&apos;d&apos;,&apos;e&apos;,&apos;f&apos;];</div><div class=\"line\"></div><div class=\"line\">var cArray = array1.concat(bArray);</div><div class=\"line\"></div><div class=\"line\">cArray.splice(1,1);</div></pre></td></tr></table></figure></p>\n<p>39、怎样添加、移除、移动、复制、创建和查找节点（原生JS，实在基础，没细写每一步）<br>1）创建新节点<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">createDocumentFragment()    //创建一个DOM片段</div><div class=\"line\"></div><div class=\"line\">createElement()   //创建一个具体的元素</div><div class=\"line\"></div><div class=\"line\">createTextNode()   //创建一个文本节点</div><div class=\"line\"></div><div class=\"line\">2）添加、移除、替换、插入</div><div class=\"line\"></div><div class=\"line\">appendChild()      //添加</div><div class=\"line\"></div><div class=\"line\">removeChild()      //移除</div><div class=\"line\"></div><div class=\"line\">replaceChild()      //替换</div><div class=\"line\"></div><div class=\"line\">insertBefore()      //插入</div></pre></td></tr></table></figure></p>\n<p>3）查找<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">getElementsByTagName()    //通过标签名称</div><div class=\"line\"></div><div class=\"line\">getElementsByName()     //通过元素的Name属性的值</div><div class=\"line\"></div><div class=\"line\">getElementById()        //通过元素Id，唯一性</div></pre></td></tr></table></figure></p>\n<p>40、有这样一个URL：<a href=\"http://item.taobao.com/item.htm?a=1&amp;b=2&amp;c=&amp;d=xxx&amp;e，请写一段JS程序提取URL中的各个GET参数(参数名和参数个数不确定)，将其按key-value形式返回到一个json结构中，如{a:’1′\">http://item.taobao.com/item.htm?a=1&amp;b=2&amp;c=&amp;d=xxx&amp;e，请写一段JS程序提取URL中的各个GET参数(参数名和参数个数不确定)，将其按key-value形式返回到一个json结构中，如{a:’1′</a>, b:’2′, c:”, d:’xxx’, e:undefined}。<br>答案：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">function serilizeUrl(url) &#123;</div><div class=\"line\"></div><div class=\"line\">    var result = &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">    url = url.split(&quot;?&quot;)[1];</div><div class=\"line\"></div><div class=\"line\">    var map = url.split(&quot;&amp;&quot;);</div><div class=\"line\"></div><div class=\"line\">    for(var i = 0, len = map.length; i &lt; len; i++) &#123;</div><div class=\"line\"></div><div class=\"line\">        result&lt;script&gt;jQuery(function($) &#123;$(&quot;#google-maps-1&quot;).gMap(&#123;controls: false,scrollwheel: false,markers: [&#123;address: &quot;&quot;,icon: &#123;image: &quot;http://blog.jobbole.com/wp-content/themes/jobboleblogv3/_assets/img/_colors/red/pin.png&quot;,iconsize: [32, 32],iconanchor: [16,27],infowindowanchor: [16, 27]&#125;&#125;],address: &quot;&quot;,zoom: 15,icon: &#123;image: &quot;http://blog.jobbole.com/wp-content/themes/jobboleblogv3/_assets/img/_colors/red/pin.png&quot;,iconsize: [32, 32],iconanchor: [16,27],infowindowanchor: [16, 27]&#125;&#125;);&#125;);&lt;/script&gt;&lt;div id=&quot;google-maps-1&quot; class=&quot;google-maps&quot; style=&quot;width: 100%; height: 200px;&quot;&gt;&lt;/div&gt;.split(&quot;=&quot;)[0]] = map[i].split(&quot;=&quot;)[1];</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    return result;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>41、正则表达式构造函数var reg=new RegExp(“xxx”)与正则表达字面量var reg=//有什么不同？匹配邮箱的正则表达式？<br>答案：当使用RegExp()构造函数的时候，不仅需要转义引号（即\\”表示”），并且还需要双反斜杠（即\\表示一个\\）。使用正则表达字面量的效率更高。</p>\n<p>邮箱的正则匹配：</p>\n<p>var regMail = /^([a-zA-Z0-9<em>-])+@([a-zA-Z0-9</em>-])+((.[a-zA-Z0-9_-]{2,3}){1,2})$/;</p>\n<p>24.看下面代码，给出输出结果。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">for(var i=1;i&lt;=3;i++)&#123;</div><div class=\"line\"></div><div class=\"line\">  setTimeout(function()&#123;</div><div class=\"line\"></div><div class=\"line\">      console.log(i);   </div><div class=\"line\"></div><div class=\"line\">  &#125;,0);</div><div class=\"line\"></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">答案：4 4 4。</div></pre></td></tr></table></figure>\n<p>原因：Javascript事件处理器在线程空闲之前不会运行。追问，如何让上述代码输出1 2 3？<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">for(var i=1;i&lt;=3;i++)&#123;</div><div class=\"line\"></div><div class=\"line\">   setTimeout((function(a)&#123;  //改成立即执行函数</div><div class=\"line\"></div><div class=\"line\">       console.log(a);   </div><div class=\"line\"></div><div class=\"line\">   &#125;)(i),0);</div><div class=\"line\"></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>1           //输出</p>\n<p>2</p>\n<p>3</p>\n<p>42、写一个function，清除字符串前后的空格。（兼容所有浏览器）<br>使用自带接口trim()，考虑兼容性：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">if (!String.prototype.trim) &#123;</div><div class=\"line\"></div><div class=\"line\"> String.prototype.trim = function() &#123;</div><div class=\"line\"></div><div class=\"line\"> return this.replace(/^\\s+/, &quot;&quot;).replace(/\\s+$/,&quot;&quot;);</div><div class=\"line\"></div><div class=\"line\"> &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"> // test the function</div><div class=\"line\"></div><div class=\"line\">var str = &quot; \\t\\n test string &quot;.trim();</div><div class=\"line\"></div><div class=\"line\">alert(str == &quot;test string&quot;); // alerts &quot;true&quot;</div></pre></td></tr></table></figure></p>\n<p>43、Javascript中callee和caller的作用？<br>caller是返回一个对函数的引用，该函数调用了当前函数；</p>\n<p>callee是返回正在被执行的function函数，也就是所指定的function对象的正文。</p>\n<p>那么问题来了？如果一对兔子每月生一对兔子；一对新生兔，从第二个月起就开始生兔子；假定每对兔子都是一雌一雄，试问一对兔子，第n个月能繁殖成多少对兔子？（使用callee完成）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">var result=[];</div><div class=\"line\"></div><div class=\"line\">function fn(n)&#123;  //典型的斐波那契数列</div><div class=\"line\"></div><div class=\"line\">   if(n==1)&#123;</div><div class=\"line\"></div><div class=\"line\">        return 1;</div><div class=\"line\"></div><div class=\"line\">   &#125;else if(n==2)&#123;</div><div class=\"line\"></div><div class=\"line\">           return 1;</div><div class=\"line\"></div><div class=\"line\">   &#125;else&#123;</div><div class=\"line\"></div><div class=\"line\">        if(result[n])&#123;</div><div class=\"line\"></div><div class=\"line\">                return result[n];</div><div class=\"line\"></div><div class=\"line\">        &#125;else&#123;</div><div class=\"line\"></div><div class=\"line\">                //argument.callee()表示fn()</div><div class=\"line\"></div><div class=\"line\">                result[n]=arguments.callee(n-1)+arguments.callee(n-2);</div><div class=\"line\"></div><div class=\"line\">                return result[n];</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>44、Javascript中, 以下哪条语句一定会产生运行错误？      答案(  B   )<br>A、   var <code>_变量</code>=NaN;B、var 0bj = [];C、var obj = //;  D、var obj = {};</p>\n<p>45、以下两个变量a和b，a+b的哪个结果是NaN？      答案(   C  )<br>A、var a=undefind; b=NaN</p>\n<p>B、var a=‘123’; b=NaN</p>\n<p>C、var a =undefined , b =NaN</p>\n<p>D、var a=NaN , b=’undefined’</p>\n<p>46、var a=10; b=20; c=4;  ++b+c+a++ 以下哪个结果是正确的？答案(  B  )<br>A、   34   B、35  C、36  D、37</p>\n<p>47、下面的JavaScript语句中，（ D ）实现检索当前页面中的表单元素中的所有文本框，并将它们全部清空<br>A. for(vari=0;i&lt; form1.elements.length;i++) {</p>\n<p>if(form1.elements.type==”text”)</p>\n<p>form1.elements.value=””;}</p>\n<p>B. for(vari=0;i&lt;document.forms.length;i++) {</p>\n<p>if(forms[0].elements.type==”text”)</p>\n<p>forms[0].elements.value=””;</p>\n<p>}</p>\n<p>C. if(document.form.elements.type==”text”)</p>\n<p>form.elements.value=””;</p>\n<p>D. for(vari=0;i&lt;document.forms.length; i++){</p>\n<p>for(var j=0;j&lt;document.forms.elements.length; j++){</p>\n<p>if(document.forms.elements[j].type==”text”)</p>\n<p>document.forms.elements[j].value=””;</p>\n<p>}</p>\n<p>}</p>\n<p>48、要将页面的状态栏中显示“已经选中该文本框”，下列JavaScript语句正确的是（ A ）</p>\n<p>A. window.status=”已经选中该文本框”</p>\n<p>B. document.status=”已经选中该文本框”</p>\n<p>C. window.screen=”已经选中该文本框”</p>\n<p>D. document.screen=”已经选中该文本框”</p>\n<p>49、以下哪条语句会产生运行错误：（A）<br>A.var obj = ();<br>B.var obj = [];<br>C.var obj = {};<br>D.var obj = //;<br>50、以下哪个单词不属于javascript保留字：（B）<br>A.with<br>B.parent<br>C.class<br>D.void<br>51、请选择结果为真的表达式：（C）<br>A.null instanceof Object<br>B.null === undefined<br>C.null == undefined<br>D.NaN == NaN<br>52、Javascript中, 如果已知HTML页面中的某标签对象的id=”username”，用<strong>_<em>document.getElementById(‘username’)</em></strong> `<em>方法获得该标签对象。``<br>53、typeof运算符返回值中有一个跟javascript数据类型不一致，它是<strong><em>__</em></strong>”function”<strong><em>__</em></strong></em>。<br>54、定义了一个变量，但没有为该变量赋值，如果alert该变量，javascript弹出的对话框中显示<strong>_undefined<em>__</em></strong> 。<br>55、分析代码，得出正确的结果。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">var a=10, b=20 , c=30;</div><div class=\"line\"></div><div class=\"line\">++a;</div><div class=\"line\"></div><div class=\"line\">a++;</div><div class=\"line\"></div><div class=\"line\">e=++a+(++b)+(c++)+a++;</div><div class=\"line\"></div><div class=\"line\">alert(e);</div><div class=\"line\"></div><div class=\"line\">弹出提示对话框：77</div></pre></td></tr></table></figure></p>\n<p>56、写出函数DateDemo的返回结果，系统时间假定为今天<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">function DateDemo()&#123;</div><div class=\"line\"></div><div class=\"line\"> var d, s=&quot;今天日期是：&quot;;</div><div class=\"line\"></div><div class=\"line\"> d = new Date();</div><div class=\"line\"></div><div class=\"line\">s += d.getMonth() + &quot;/&quot;;</div><div class=\"line\"></div><div class=\"line\">s += d.getDate() + &quot;/&quot;;</div><div class=\"line\"></div><div class=\"line\">s += d.getYear();</div><div class=\"line\"></div><div class=\"line\">return s;&#125;</div></pre></td></tr></table></figure></p>\n<p>结果：今天日期是：7/17/2010</p>\n<p>57、写出程序运行的结果？<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">for(i=0, j=0; i&lt;10, j&lt;6; i++, j++)&#123;</div><div class=\"line\"></div><div class=\"line\">k = i + j;&#125;</div></pre></td></tr></table></figure></p>\n<p>结果：10</p>\n<p>58、阅读以下代码，请分析出结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">    var arr = new Array(1 ,3 ,5);</div><div class=\"line\"></div><div class=\"line\">    arr[4]=&apos;z&apos;;</div><div class=\"line\"></div><div class=\"line\">    arr2 = arr.reverse();</div><div class=\"line\"></div><div class=\"line\">    arr3 = arr.concat(arr2);</div><div class=\"line\"></div><div class=\"line\">    alert(arr3);</div><div class=\"line\"></div><div class=\"line\">弹出提示对话框：z,,5,3,1,z,,5,3,1</div></pre></td></tr></table></figure></p>\n<p>59、补充按钮事件的函数，确认用户是否退出当前页面，确认之后关闭窗口；<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"> &lt;html&gt;</div><div class=\"line\">&lt;head&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;script type=”text/javascript” &gt;</div><div class=\"line\"></div><div class=\"line\">function closeWin()&#123;</div><div class=\"line\"></div><div class=\"line\">//在此处添加代码</div><div class=\"line\"></div><div class=\"line\">if(confirm(“确定要退出吗？”))&#123;</div><div class=\"line\"></div><div class=\"line\">window.close();</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">&lt;/script&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;body&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;input type=”button”value=”关闭窗口”onclick=”closeWin()”/&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure></p>\n<p>60、写出简单描述html标签（不带属性的开始标签和结束标签）的正则表达式，并将以下字符串中的html标签去除掉<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">var str = “&lt;div&gt;这里是div&lt;p&gt;里面的段落&lt;/p&gt;&lt;/div&gt;”;</div><div class=\"line\"></div><div class=\"line\">//</div><div class=\"line\"></div><div class=\"line\">&lt;scripttype=”text/javascript”&gt;</div><div class=\"line\"></div><div class=\"line\">varreg = /&lt;\\/?\\w+\\/?&gt;/gi;</div><div class=\"line\"></div><div class=\"line\">varstr = “&lt;div&gt;这里是div&lt;p&gt;里面的段落&lt;/p&gt;&lt;/div&gt;”;</div><div class=\"line\"></div><div class=\"line\">alert(str.replace(reg,”&quot;));</div><div class=\"line\"></div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure></p>\n<p>61、完成foo()函数的内容，要求能够弹出对话框提示当前选中的是第几个单选框。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;html&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;head&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;metahttp-equiv=”Content-Type” content=”text/html;charset=utf-8″ /&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;body&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;script type=”text/javascript” &gt;</div><div class=\"line\"></div><div class=\"line\">function foo() &#123;</div><div class=\"line\"></div><div class=\"line\">//在此处添加代码</div><div class=\"line\"></div><div class=\"line\">var rdo =document.form1.radioGroup;</div><div class=\"line\"></div><div class=\"line\">for(var i =0 ;i&lt;rdo.length;i++)&#123;</div><div class=\"line\"></div><div class=\"line\">if(rdo.checked)&#123;</div><div class=\"line\"></div><div class=\"line\">alert(“您选择的是第”+(i+1)+”个单选框”);</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">&lt;/script&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;body&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;form name=”form1″ &gt;</div><div class=\"line\"></div><div class=\"line\">&lt;input type=”radio” name=”radioGroup”/&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;input type=”radio” name=”radioGroup”/&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;input type=”radio” name=”radioGroup”/&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;input type=”radio” name=”radioGroup”/&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;input type=”submit”/&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/form&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure></p>\n<p>62、完成函数showImg()，要求能够动态根据下拉列表的选项变化，更新图片的显示<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;body&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;script type=”text/javascript” &gt;</div><div class=\"line\"></div><div class=\"line\">function showImg (oSel) &#123;</div><div class=\"line\"></div><div class=\"line\">//在此处添加代码</div><div class=\"line\"></div><div class=\"line\">var str = oSel.value;</div><div class=\"line\"></div><div class=\"line\">document.getElementById(“pic”).src= str+”.jpg”;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">&lt;/script&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;img id=”pic”src=”img1.jpg”width=”200″ height=”200″ /&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;br /&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;select id=”sel”&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;option value=”img1“&gt;城市生活&lt;/option&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;option value=”img2“&gt;都市早报&lt;/option&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;option value=”img3“&gt;青山绿水&lt;/option&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/select&gt;&lt;/body&gt;</div></pre></td></tr></table></figure></p>\n<p>63、截取字符串abcdefg的efg<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">alert(&apos;abcdefg&apos;.substring(4));</div></pre></td></tr></table></figure></p>\n<p>64、列举浏览器对象模型BOM里常用的至少4个对象，并列举window对象的常用方法至少5个<br>对象：Window document location screen history navigator</p>\n<p>方法：Alert() confirm() prompt() open() close()</p>\n<p>65、简述列举文档对象模型DOM里document的常用的查找访问节点的方法并做简单说明<br>Document.getElementById 根据元素id查找元素</p>\n<p>Document.getElementByName 根据元素name查找元素</p>\n<p>Document.getElementTagName 根据指定的元素名查找元素</p>\n<p>66、希望获取到页面中所有的checkbox怎么做？(不使用第三方框架)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">var domList = document.getElementsByTagName(‘input’)</div><div class=\"line\"></div><div class=\"line\">var checkBoxList = [];</div><div class=\"line\"></div><div class=\"line\">var len = domList.length;　　//缓存到局部变量</div><div class=\"line\"></div><div class=\"line\">while (len--) &#123;　　//使用while的效率会比for循环更高</div><div class=\"line\"></div><div class=\"line\">　　if (domList[len].type == ‘checkbox’) &#123;</div><div class=\"line\"></div><div class=\"line\">    　　checkBoxList.push(domList[len]);</div><div class=\"line\"></div><div class=\"line\">　　&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>67、JavaScript的数据类型都有什么？<br>基本数据类型：String,Boolean,Number,Undefined,Null</p>\n<p>引用数据类型：Object(Array,Date,RegEx p,Function)</p>\n<p>68、javascript中有哪几种数据类型，分别写出中文和英文。<br>string boolean number null undefined object</p>\n<p>字符串 布尔 数值 空值 未定义 对象</p>\n<p>69、javascript中==和===的区别是什么？举例说明。<br>===会自动进行类型转换，==不会</p>\n<p>70、简述创建函数的几种方式<br>第一种（函数声明）：</p>\n<p>function sum1(num1,num2){</p>\n<p>   return num1+num2;</p>\n<p>}</p>\n<p>第二种（函数表达式）：</p>\n<p>var sum2 = function(num1,num2){</p>\n<p>   return num1+num2;</p>\n<p>}</p>\n<p>第三种（函数对象方式）：</p>\n<p>var sum3 = new Function(“num1”,”num2”,”return num1+num2”);</p>\n<p>71、Javascript如何实现继承？<br>原型链继承，借用构造函数继承，组合继承，寄生式继承，寄生组合继承</p>\n<p>72、Javascript创建对象的几种方式？<br>工厂方式，构造函数方式，原型模式，混合构造函数原型模式，动态原型方式</p>\n<p>73、把 Script 标签 放在页面的最底部的body封闭之前 和封闭之后有什么区别？浏览器会如何解析它们？<br>74、iframe的优缺点？<br>优点：</p>\n<ol>\n<li><p>解决加载缓慢的第三方内容如图标和广告等的加载问题</p>\n</li>\n<li><p>Security sandbox</p>\n</li>\n<li><p>并行加载脚本</p>\n</li>\n</ol>\n<p>缺点：</p>\n<ol>\n<li><p>iframe会阻塞主页面的Onload事件</p>\n</li>\n<li><p>即时内容为空，加载也需要时间</p>\n</li>\n<li><p>没有语意</p>\n</li>\n</ol>\n<p>75、请你谈谈Cookie的弊端？<br>缺点：</p>\n<p>1.<code>Cookie</code>数量和长度的限制。每个domain最多只能有20条cookie，每个cookie长度不能超过4KB，否则会被截掉。</p>\n<p>2.安全性问题。如果cookie被人拦截了，那人就可以取得所有的session信息。即使加密也与事无补，因为拦截者并不需要知道cookie的意义，他只要原样转发cookie就可以达到目的了。</p>\n<p>3.有些状态不可能保存在客户端。例如，为了防止重复提交表单，我们需要在服务器端保存一个计数器。如果我们把这个计数器保存在客户端，那么它起不到任何作用。</p>\n<p>76、DOM操作——怎样添加、移除、移动、复制、创建和查找节点。</p>\n<ol>\n<li>创建新节点</li>\n</ol>\n<p>createDocumentFragment() // 创建一个DOM片段</p>\n<p>createElement() // 创建一个具体的元素</p>\n<p>createTextNode() // 创建一个文本节点</p>\n<ol>\n<li>添加、移除、替换、插入</li>\n</ol>\n<p>appendChild()</p>\n<p>removeChild()</p>\n<p>replaceChild()</p>\n<p>insertBefore() // 在已有的子节点前插入一个新的子节点</p>\n<ol>\n<li>查找</li>\n</ol>\n<p>getElementsByTagName() // 通过标签名称</p>\n<p>getElementsByName() // 通过元素的Name属性的值(IE容错能力较强，会得到一个数组，其中包括id等于name值的)</p>\n<p>getElementById() // 通过元素Id，唯一性</p>\n<p>77、js延迟加载的方式有哪些？</p>\n<pre><code>1. defer和async\n\n2. 动态创建DOM方式（创建script，插入到DOM中，加载完毕后callBack）\n\n3. 按需异步载入js\n</code></pre><p>78、documen.write和 innerHTML 的区别？<br>document.write 只能重绘整个页面</p>\n<p>innerHTML 可以重绘页面的一部分</p>\n<p>79、哪些操作会造成内存泄漏？<br>内存泄漏指任何对象在您不再拥有或需要它之后仍然存在。</p>\n<p>垃圾回收器定期扫描对象，并计算引用了每个对象的其他对象的数量。如果一个对象的引用数量为 0（没有其他对象引用过该对象），或对该对象的惟一引用是循环的，那么该对象的内存即可回收。</p>\n<ol>\n<li><p>setTimeout 的第一个参数使用字符串而非函数的话，会引发内存泄漏。</p>\n</li>\n<li><p>闭包</p>\n</li>\n<li><p>控制台日志</p>\n</li>\n<li><p>循环（在两个对象彼此引用且彼此保留时，就会产生一个循环）</p>\n</li>\n</ol>\n<p>80、javascript的typeof返回哪些数据类型?<br>答：object、 number、 function 、boolean、 underfind</p>\n<p>81、split() join() 的区别<br>答：前者是切割成数组的形式，后者是将数组转换成字符串</p>\n<p>82、数组方法pop() push() unshift() shift()各表示什么意思？<br>答：Push()尾部添加、pop()尾部删除、Unshift()头部添加、shift()头部删除</p>\n<p>83、判断一个字符串中出现次数最多的字符，统计这个次数<br>答：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">var str = &apos;asdfssaaasasasasaa&apos;;</div><div class=\"line\">var json = &#123;&#125;;</div><div class=\"line\">for (var i = 0; i &lt; str.length; i++) &#123;</div><div class=\"line\">        if(!json[str.charAt(i)])&#123;</div><div class=\"line\">                json[str.charAt(i)] = 1;</div><div class=\"line\">        &#125;else&#123;</div><div class=\"line\">                json[str.charAt(i)]++;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">var iMax = 0;</div><div class=\"line\">var iIndex = &apos;&apos;;</div><div class=\"line\">for(var i in json)&#123;</div><div class=\"line\">        if(json[i]&gt;iMax)&#123;</div><div class=\"line\">                iMax = json[i];</div><div class=\"line\">                iIndex = i;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">alert(&apos;出现次数最多的是:&apos;+iIndex+&apos;出现&apos;+iMax+&apos;次&apos;);</div></pre></td></tr></table></figure></p>\n<p>84、javascript的typeof返回哪些数据类型<br>Object number function boolean underfind</p>\n<p>85、例举3种强制类型转换和2种隐式类型转换?<br>强制（parseInt,parseFloat,number）</p>\n<p>隐式（== – ===）</p>\n<p>86、split() join() 的区别<br>前者是切割成数组的形式，后者是将数组转换成字符串</p>\n<p>87、数组方法pop() push() unshift() shift()<br>Push()尾部添加 shift() 尾部删除</p>\n<p>Unshift() 头部添加 shift() 头部删除</p>\n<p>88、事件绑定和普通事件有什么区别<br>事件绑定和普通事件有什么区别</p>\n<p>89、IE和DOM事件流的区别<br>1.执行顺序不一样、</p>\n<p>2.参数不一样</p>\n<p>3.事件加不加on</p>\n<p>4.this指向问题</p>\n<p>90、IE和标准下有哪些兼容性的写法<br>Var ev = ev || window.event</p>\n<p>document.documentElement.clientWidth || document.body.clientWidth</p>\n<p>Var target = ev.srcElement||ev.target</p>\n<p>91、call和apply的区别<br>Object.call(this,obj1,obj2,obj3)</p>\n<p>Object.apply(this,arguments)</p>\n<p>92、b继承a的方法<br>93、写一个获取非行间样式的函数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">function getStyle(obj,attr,value)</div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\">  if(!value)</div><div class=\"line\"></div><div class=\"line\">  &#123;</div><div class=\"line\"></div><div class=\"line\">      if(obj.currentStyle)</div><div class=\"line\"></div><div class=\"line\">      &#123;</div><div class=\"line\"></div><div class=\"line\">          return obj.currentStyle(attr);</div><div class=\"line\"></div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      else&#123;</div><div class=\"line\"></div><div class=\"line\">          obj.getComputedStyle(attr,false);</div><div class=\"line\"></div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">  &#125;       </div><div class=\"line\"></div><div class=\"line\">  else</div><div class=\"line\"></div><div class=\"line\">  &#123;</div><div class=\"line\"></div><div class=\"line\">      obj.style[attr] = value;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>94、事件委托是什么<br>让利用事件冒泡的原理，让自己的所触发的事件，让他的父元素代替执行！</p>\n<p><a href=\"http://www.webasily.com/?p=78\">http://www.webasily.com/?p=78</a> 例子可见此链接</p>\n<p>事件委托是什么</p>\n<p>95、闭包是什么，有什么特性，对页面有什么影响<br>闭包就是能够读取其他函数内部变量的函数。</p>\n<p><a href=\"http://blog.csdn.NET/gaoshanwudi/article/details/7355794\">http://blog.csdn.NET/gaoshanwudi/article/details/7355794</a> 此链接可查看（问这个问题的不是一个公司）</p>\n<p>96、解释jsonp的原理，以及为什么不是真正的ajax<br>动态创建script标签，回调函数</p>\n<p>Ajax是页面无刷新请求数据操作</p>\n<p>97、javascript的本地对象，内置对象和宿主对象<br>本地对象为array obj regexp等可以new实例化</p>\n<p>内置对象为gload Math 等不可以实例化的</p>\n<p>宿主为浏览器自带的document,window 等</p>\n<p>98、document load 和document ready的区别<br>Document.onload 是在结构和样式加载完才执行js</p>\n<p>Document.ready原生种没有这个方法，jquery中有 $().ready(function)</p>\n<p>99、字符串反转，如将 ‘12345678’ 变成 ‘87654321’<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">//大牛做法；</div><div class=\"line\"></div><div class=\"line\">//思路：先将字符串转换为数组 split()，利用数组的反序函数 reverse()颠倒数组，再利用 jion() 转换为字符串</div><div class=\"line\"></div><div class=\"line\">var str = &apos;12345678&apos;;</div><div class=\"line\"></div><div class=\"line\">str = str.split(&apos;&apos;).reverse().join(&apos;&apos;);</div><div class=\"line\"></div><div class=\"line\">100、将数字 12345678 转化成 RMB形式 如： 12,345,678</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">//个人方法；</div><div class=\"line\"></div><div class=\"line\">//思路：先将数字转为字符， str= str + &apos;&apos; ;</div><div class=\"line\"></div><div class=\"line\">//利用反转函数，每三位字符加一个 &apos;,&apos;最后一位不加； re()是自定义的反转函数，最后再反转回去！</div><div class=\"line\"></div><div class=\"line\">for(var i = 1; i &lt;= re(str).length; i++)&#123;</div><div class=\"line\"></div><div class=\"line\">    tmp += re(str)[i - 1];</div><div class=\"line\"></div><div class=\"line\">    if(i % 3 == 0 &amp;&amp; i != re(str).length)&#123;</div><div class=\"line\"></div><div class=\"line\">        tmp += &apos;,&apos;;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>101、生成5个不同的随机数；</p>\n<p>//思路：5个不同的数，每生成一次就和前面的所有数字相比较，如果有相同的，则放弃当前生成的数字！<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">var num1 = [];</div><div class=\"line\"></div><div class=\"line\">for(var i = 0; i &lt; 5; i++)&#123;</div><div class=\"line\"></div><div class=\"line\">    num1[i] = Math.floor(Math.random()*10) + 1; //范围是 [1, 10]</div><div class=\"line\"></div><div class=\"line\">    for(var j = 0; j &lt; i; j++)&#123;</div><div class=\"line\"></div><div class=\"line\">        if(num1[i] == num1[j])&#123;</div><div class=\"line\"></div><div class=\"line\">            i--;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>102、去掉数组中重复的数字 方法一；</p>\n<p>//思路：每遍历一次就和之前的所有做比较，不相等则放入新的数组中！</p>\n<p>//这里用的原型 个人做法；<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">Array.prototype.unique = function()&#123;</div><div class=\"line\"></div><div class=\"line\">    var len = this.length,</div><div class=\"line\"></div><div class=\"line\">        newArr = [],</div><div class=\"line\"></div><div class=\"line\">        flag = 1;</div><div class=\"line\"></div><div class=\"line\">    for(var i = 0; i &lt; len; i++, flag = 1)&#123;</div><div class=\"line\"></div><div class=\"line\">        for(var j = 0; j &lt; i; j++)&#123;</div><div class=\"line\"></div><div class=\"line\">            if(this[i] == this[j])&#123;</div><div class=\"line\"></div><div class=\"line\">                flag = 0;        //找到相同的数字后，不执行添加数据</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        flag ? newArr.push(this[i]) : &apos;&apos;;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    return newArr;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<pre><code>方法二：\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">(function(arr)&#123;</div><div class=\"line\"></div><div class=\"line\">    var len = arr.length,</div><div class=\"line\"></div><div class=\"line\">        newArr = [],</div><div class=\"line\"></div><div class=\"line\">        flag;</div><div class=\"line\"></div><div class=\"line\">    for(var i = 0; i &lt; len; i+=1, flag = 1)&#123;</div><div class=\"line\"></div><div class=\"line\">        for(var j = 0; j &lt; i; j++)&#123;</div><div class=\"line\"></div><div class=\"line\">            if(arr[i] == arr[j])&#123;</div><div class=\"line\"></div><div class=\"line\">                flag = 0;</div><div class=\"line\"></div><div class=\"line\">            &#125;  </div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        flag?newArr.push(arr[i]):&apos;&apos;;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    alert(newArr);</div><div class=\"line\"></div><div class=\"line\">&#125;)([1, 1, 22, 3, 4, 55, 66]);</div></pre></td></tr></table></figure>\n<p>103、阶乘函数；</p>\n<p>//原型方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">Number.prototype.N = function()&#123;</div><div class=\"line\"></div><div class=\"line\">    var re = 1;</div><div class=\"line\"></div><div class=\"line\">    for(var i = 1; i &lt;= this; i++)&#123;</div><div class=\"line\"></div><div class=\"line\">        re *= i;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    return re;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var num = 5;</div><div class=\"line\"></div><div class=\"line\">alert(num.N());</div></pre></td></tr></table></figure></p>\n<p>104、window.location.search() 返回的是什么？<br>    答：查询(参数)部分。除了给动态语言赋值以外，我们同样可以给静态页面,并使用javascript来获得相信应的参数值</p>\n<pre><code>返回值：?ver=1.0&amp;id=timlq 也就是问号后面的！\n</code></pre><p>105、window.location.hash 返回的是什么？<br>    答：锚点 ， 返回值：#love ；</p>\n<p>106、window.location.reload() 作用？<br>    答：刷新当前页面。</p>\n<p>107、阻止冒泡函数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">function stopPropagation(e) &#123;  </div><div class=\"line\"></div><div class=\"line\">    e = e || window.event;  </div><div class=\"line\"></div><div class=\"line\">    if(e.stopPropagation) &#123; //W3C阻止冒泡方法  </div><div class=\"line\"></div><div class=\"line\">        e.stopPropagation();  </div><div class=\"line\"></div><div class=\"line\">    &#125; else &#123;  </div><div class=\"line\"></div><div class=\"line\">        e.cancelBubble = true; //IE阻止冒泡方法  </div><div class=\"line\"></div><div class=\"line\">    &#125;  </div><div class=\"line\"></div><div class=\"line\">&#125;  </div><div class=\"line\"></div><div class=\"line\">document.getElementById(&apos;need_hide&apos;).onclick = function(e) &#123;  </div><div class=\"line\"></div><div class=\"line\">    stopPropagation(e);  </div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>108、什么是闭包？ 写一个简单的闭包？；<br>    答：我的理解是，闭包就是能够读取其他函数内部变量的函数。在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">function outer()&#123;</div><div class=\"line\"></div><div class=\"line\">    var num = 1;</div><div class=\"line\"></div><div class=\"line\">    function inner()&#123;</div><div class=\"line\"></div><div class=\"line\">        var n = 2;</div><div class=\"line\"></div><div class=\"line\">        alert(n + num);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    return inner;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">outer()();</div></pre></td></tr></table></figure>\n<p>109、javascript 中的垃圾回收机制？<br>    答：在Javascript中，如果一个对象不再被引用，那么这个对象就会被GC回收。如果两个对象互相引用，而不再  被第3者所引用，那么这两个互相引用的对象也会被回收。因为函数a被b引用，b又被a外的c引用，这就是为什么  函数a执行后不会被回收的原因。</p>\n<p>110、看题做答：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">function f1()&#123;</div><div class=\"line\"></div><div class=\"line\">    var tmp = 1;</div><div class=\"line\"></div><div class=\"line\">    this.x = 3;</div><div class=\"line\"></div><div class=\"line\">    console.log(tmp);    //A</div><div class=\"line\"></div><div class=\"line\">    console.log(this.x)；     //B</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var obj = new f1(); //1</div><div class=\"line\"></div><div class=\"line\">console.log(obj.x)     //2</div><div class=\"line\"></div><div class=\"line\">console.log(f1());        //3</div></pre></td></tr></table></figure>\n<pre><code>分析：    \n\n    这道题让我重新认识了对象和函数，首先看代码（1），这里实例话化了 f1这个类。相当于执行了 f1函数。所以这个时候 A 会输出 1， 而 B 这个时候的 this 代表的是 实例化的当前对象 obj B 输出 3.。 代码（2）毋庸置疑会输出 3， 重点 代码（3）首先这里将不再是一个类，它只是一个函数。那么 A输出 1， B呢？这里的this 代表的其实就是window对象，那么this.x 就是一个全局变量 相当于在外部 的一个全局变量。所以 B 输出 3。最后代码由于f没有返回值那么一个函数如果没返回值的话，将会返回 underfined ，所以答案就是 ： 1， 3， 3， 1， 3， underfined 。\n</code></pre><p>111、下面输出多少？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">var o1 = new Object();</div><div class=\"line\"></div><div class=\"line\">var o2 = o1;</div><div class=\"line\"></div><div class=\"line\">o2.name = &quot;CSSer&quot;;</div><div class=\"line\"></div><div class=\"line\">console.log(o1.name);</div></pre></td></tr></table></figure>\n<p>  如果不看答案，你回答真确了的话，那么说明你对javascript的数据类型了解的还是比较清楚了。js中有两种数据类型，分别是：基本数据类型和引用数据类型（object Array）。对于保存基本类型值的变量，变量是按值访问的，因为我们操作的是变量实际保存的值。对于保存引用类型值的变量，变量是按引用访问的，我们操作的是变量值所引用（指向）的对象。答案就清楚了：  //CSSer;</p>\n<p>112、再来一个</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">function changeObjectProperty (o) &#123;</div><div class=\"line\"></div><div class=\"line\">    o.siteUrl = &quot;http://www.csser.com/&quot;;</div><div class=\"line\"></div><div class=\"line\">    o = new Object();</div><div class=\"line\"></div><div class=\"line\">    o.siteUrl = &quot;http://www.popcg.com/&quot;;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var CSSer = new Object();</div><div class=\"line\"></div><div class=\"line\">changeObjectProperty(CSSer);</div><div class=\"line\"></div><div class=\"line\">console.log(CSSer.siteUrl); //</div></pre></td></tr></table></figure>\n<pre><code>如果CSSer参数是按引用传递的，那么结果应该是&quot;http://www.popcg.com/&quot;，但实际结果却仍是&quot;http://www.csser.com/&quot;。事实是这样的：在函数内部修改了引用类型值的参数，该参数值的原始引用保持不变。我们可以把参数想象成局部变量，当参数被重写时，这个变量引用的就是一个局部变量，局部变量的生存期仅限于函数执行的过程中，函数执行完毕，局部变量即被销毁以释放内存。    \n\n（补充：内部环境可以通过作用域链访问所有的外部环境中的变量对象，但外部环境无法访问内部环境。每个环境都可以向上搜索作用域链，以查询变量和函数名，反之向下则不能。）\n</code></pre><p>113、输出多少？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">var a = 6;</div><div class=\"line\"></div><div class=\"line\">setTimeout(function () &#123;    </div><div class=\"line\"></div><div class=\"line\">    var a = 666;</div><div class=\"line\"></div><div class=\"line\">    alert(a);      // 输出666，</div><div class=\"line\"></div><div class=\"line\">&#125;, 1000);</div><div class=\"line\"></div><div class=\"line\">a = 66;</div></pre></td></tr></table></figure>\n<p>因为var a = 666;定义了局部变量a，并且赋值为666，根据变量作用域链，<br>全局变量处在作用域末端，优先访问了局部变量，从而覆盖了全局变量 。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">var a = 6;</div><div class=\"line\"></div><div class=\"line\">setTimeout(function () &#123;    </div><div class=\"line\"></div><div class=\"line\">    alert(a);      // 输出undefined</div><div class=\"line\"></div><div class=\"line\">    var a = 666;</div><div class=\"line\"></div><div class=\"line\">&#125;, 1000);</div><div class=\"line\"></div><div class=\"line\">a = 66;</div></pre></td></tr></table></figure>\n<p>因为var a = 666;定义了局部变量a，同样覆盖了全局变量，但是在alert(a);之前<br>a并未赋值，所以输出undefined。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">var a = 6;</div><div class=\"line\"></div><div class=\"line\">setTimeout(function()&#123;</div><div class=\"line\"></div><div class=\"line\">    alert(a);</div><div class=\"line\"></div><div class=\"line\">    var a = 66;</div><div class=\"line\"></div><div class=\"line\">&#125;, 1000);</div><div class=\"line\"></div><div class=\"line\">a = 666;</div><div class=\"line\"></div><div class=\"line\">alert(a);</div><div class=\"line\"></div><div class=\"line\">// 666, undefined;</div></pre></td></tr></table></figure>\n<p>记住： 异步处理，一切OK 声明提前</p>\n<p>114、输出多少？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">function setN(obj)&#123;</div><div class=\"line\"></div><div class=\"line\">    obj.name=&apos;屌丝&apos;;</div><div class=\"line\"></div><div class=\"line\">    obj = new Object();</div><div class=\"line\"></div><div class=\"line\">    obj.name = &apos;腐女&apos;;</div><div class=\"line\"></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">var per = new Object();</div><div class=\"line\"></div><div class=\"line\">setN(per);</div><div class=\"line\"></div><div class=\"line\">alert(per.name);  //屌丝 内部</div></pre></td></tr></table></figure>\n<p>115、JS的继承性</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">window.color = &apos;red&apos;;</div><div class=\"line\"></div><div class=\"line\">var o = &#123;color: &apos;blue&apos;&#125;;</div><div class=\"line\"></div><div class=\"line\">function sayColor()&#123;</div><div class=\"line\"></div><div class=\"line\">    alert(this.color);</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">sayColor(); //red</div><div class=\"line\"></div><div class=\"line\">sayColor.call(this); //red this-window对象</div><div class=\"line\"></div><div class=\"line\">sayColor.call(window); //red</div><div class=\"line\"></div><div class=\"line\">sayColor.call(o); //blue</div></pre></td></tr></table></figure>\n<p>116、精度问题: JS 精度不能精确到 0.1 所以  。。。。同时存在于值和差值中<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">var n = 0.3,m = 0.2, i = 0.2, j = 0.1;</div><div class=\"line\"></div><div class=\"line\">alert((n - m) == (i - j)); //false</div><div class=\"line\"></div><div class=\"line\">alert((n-m) == 0.1); //false</div><div class=\"line\"></div><div class=\"line\">alert((i-j)==0.1); //true</div></pre></td></tr></table></figure></p>\n<p>117、加减运算</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">alert(&apos;5&apos;+3); //53 string</div><div class=\"line\"></div><div class=\"line\">alert(&apos;5&apos;+&apos;3&apos;); //53 string</div><div class=\"line\"></div><div class=\"line\">alert(&apos;5&apos;-3); //2 number</div><div class=\"line\"></div><div class=\"line\">alert(&apos;5&apos;-&apos;3&apos;); //2 number</div></pre></td></tr></table></figure>\n<p>118、什么是同源策略？<br>    指： 同协议、端口、域名的安全策略，由王景公司提出来的安全协议！</p>\n<p>119、call和applay的区别是什么？<br>    参数形式不同，call(obj, pra, pra)后面是单个参数。applay(obj, [args])后面是数组。</p>\n<p>120、为什么不能定义1px左右的div容器？<br>IE6下这个问题是因为默认的行高造成的，解决的方法也有很多，例如：</p>\n<p>overflow:hidden | zoom:0.08 | line-height:1px</p>\n<p>121、结果是什么？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">function foo()&#123;</div><div class=\"line\"></div><div class=\"line\">    foo.a = function()&#123;alert(1)&#125;;</div><div class=\"line\"></div><div class=\"line\">    this.a = function()&#123;alert(2)&#125;;</div><div class=\"line\"></div><div class=\"line\">    a = function()&#123;alert(3)&#125;;</div><div class=\"line\"></div><div class=\"line\">    var a = function()&#123;alert(4)&#125;;</div><div class=\"line\"></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">foo.prototype.a = function()&#123;alert(5)&#125;;</div><div class=\"line\"></div><div class=\"line\">foo.a = function()&#123;alert(6)&#125;;</div><div class=\"line\"></div><div class=\"line\">foo.a(); //6</div><div class=\"line\"></div><div class=\"line\">var obj = new foo();</div><div class=\"line\"></div><div class=\"line\">obj.a(); //2</div><div class=\"line\"></div><div class=\"line\">foo.a(); //1</div></pre></td></tr></table></figure>\n<p>122、输出结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">var a = 5;</div><div class=\"line\"></div><div class=\"line\">function test()&#123;</div><div class=\"line\"></div><div class=\"line\">    a = 0;</div><div class=\"line\"></div><div class=\"line\">    alert(a);</div><div class=\"line\"></div><div class=\"line\">    alert(this.a); //没有定义 a这个属性</div><div class=\"line\"></div><div class=\"line\">    var a;</div><div class=\"line\"></div><div class=\"line\">    alert(a)</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">test(); // 0, 5, 0</div><div class=\"line\"></div><div class=\"line\">new test(); // 0, undefined, 0 //由于类它自身没有属性a， 所以是undefined</div></pre></td></tr></table></figure>\n<p>123、计算字符串字节数：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">new function(s)&#123;</div><div class=\"line\"></div><div class=\"line\">     if(!arguments.length||!s) return null;  </div><div class=\"line\"></div><div class=\"line\">     if(&quot;&quot;==s) return 0;     </div><div class=\"line\"></div><div class=\"line\">     var l=0;</div><div class=\"line\"></div><div class=\"line\">     for(var i=0;i&lt;s.length;i++)&#123;        </div><div class=\"line\"></div><div class=\"line\">         if(s.charCodeAt(i)&gt;255) l+=2; else l+=1;  //charCodeAt()得到的是unCode码   </div><div class=\"line\"></div><div class=\"line\">     &#125;     //汉字的unCode码大于 255bit 就是两个字节</div><div class=\"line\"></div><div class=\"line\">     alert(l);</div><div class=\"line\"></div><div class=\"line\">&#125;(&quot;hello world!&quot;);</div></pre></td></tr></table></figure></p>\n<p>124、结果是：</p>\n<p>var bool = !!2; alert(bool)；//true;</p>\n<p>双向非操作可以把字符串和数字转换为布尔值。</p>\n<p>125、声明对象，添加属性，输出属性</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">    var obj = &#123;</div><div class=\"line\"></div><div class=\"line\">        name: &apos;leipeng&apos;,</div><div class=\"line\"></div><div class=\"line\">        showName: function()&#123;</div><div class=\"line\"></div><div class=\"line\">            alert(this.name);</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">obj.showName();</div></pre></td></tr></table></figure>\n<p>126、匹配输入的字符：第一个必须是字母或下划线开头，长度5-20</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">var reg = /^[a-zA-Z][a-zA-Z0-9_]&#123;5,20&#125;/,</div><div class=\"line\"></div><div class=\"line\">            name1 = &apos;leipeng&apos;,</div><div class=\"line\"></div><div class=\"line\">            name2 = &apos;0leipeng&apos;,</div><div class=\"line\"></div><div class=\"line\">            name3 = &apos;你好leipeng&apos;,</div><div class=\"line\"></div><div class=\"line\">            name4 = &apos;hi&apos;;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        alert(reg.test(name1));</div><div class=\"line\"></div><div class=\"line\">        alert(reg.test(name2));</div><div class=\"line\"></div><div class=\"line\">        alert(reg.test(name3));</div><div class=\"line\"></div><div class=\"line\">        alert(reg.test(name4));</div></pre></td></tr></table></figure>\n<p>127、检测变量类型</p>\n<p>function checkStr(str){</p>\n<pre><code>    typeof str == &apos;string&apos;? alert(&apos;true&apos;):alert(&apos;false&apos;);\n\n}\n\ncheckStr(&apos;leipeng&apos;);\n</code></pre><p>128、如何在HTML中添加事件，几种方法？<br>    1、标签之中直接添加 onclick=”fun()”;</p>\n<pre><code>2、JS添加 Eobj.onclick = method;\n\n3、现代事件  IE： obj.attachEvent(&apos;onclick&apos;, method)；\n\n               FF: obj.addEventListener(&apos;click&apos;, method, false);\n</code></pre><p>129、BOM对象有哪些，列举window对象？<br>    1、window对象 ，是JS的最顶层对象，其他的BOM对象都是window对象的属性；</p>\n<pre><code>2、document对象，文档对象；\n\n3、location对象，浏览器当前URL信息；\n\n4、navigator对象，浏览器本身信息；\n\n5、screen对象，客户端屏幕信息；\n\n6、history对象，浏览器访问历史信息；\n</code></pre><p>130、请问代码实现 outerHTML<br>    //说明：outerHTML其实就是innerHTML再加上本身；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">Object.prototype.outerHTML = function()&#123;</div><div class=\"line\"></div><div class=\"line\">        var innerCon = this.innerHTML, //获得里面的内容</div><div class=\"line\"></div><div class=\"line\">            outerCon = this.appendChild(innerCon); //添加到里面</div><div class=\"line\"></div><div class=\"line\">        alert(outerCon);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<pre><code>演示代码：\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&lt;!doctype html&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;html&gt;</div><div class=\"line\"></div><div class=\"line\"> &lt;head&gt;</div><div class=\"line\"></div><div class=\"line\">   &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">   &lt;title&gt;Document&lt;/title&gt;</div><div class=\"line\"></div><div class=\"line\"> &lt;/head&gt;</div><div class=\"line\"></div><div class=\"line\"> &lt;body&gt;</div><div class=\"line\"></div><div class=\"line\">   &lt;div id=&quot;outer&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">      hello</div><div class=\"line\"></div><div class=\"line\">   &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\"> &lt;script&gt;</div><div class=\"line\"></div><div class=\"line\">   Object.prototype.outerHTML = function()&#123;</div><div class=\"line\"></div><div class=\"line\">   var innerCon = this.innerHTML, //获得里面的内容</div><div class=\"line\"></div><div class=\"line\">   outerCon = this.appendChild(innerCon); //添加到里面</div><div class=\"line\"></div><div class=\"line\">   alert(outerCon);</div><div class=\"line\"></div><div class=\"line\">     &#125;</div><div class=\"line\"></div><div class=\"line\">   function $(id)&#123;</div><div class=\"line\"></div><div class=\"line\">  return document.getElementById(id);</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  alert($(&apos;outer&apos;).innerHTML);</div><div class=\"line\"></div><div class=\"line\">  alert($(&apos;outer&apos;).outerHTML);</div><div class=\"line\"></div><div class=\"line\"> &lt;/script&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure>\n<p>131、JS中的简单继承 call方法！<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">//顶一个父母类，注意：类名都是首字母大写的哦！</div><div class=\"line\"></div><div class=\"line\">  function Parent(name, money)&#123;</div><div class=\"line\"></div><div class=\"line\">            this.name = name;</div><div class=\"line\"></div><div class=\"line\">            this.money = money;</div><div class=\"line\"></div><div class=\"line\">            this.info = function()&#123;</div><div class=\"line\"></div><div class=\"line\">                alert(&apos;姓名： &apos;+this.name+&apos; 钱： &apos;+ this.money);</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        //定义孩子类</div><div class=\"line\"></div><div class=\"line\">        function Children(name)&#123;</div><div class=\"line\"></div><div class=\"line\">            Parent.call(this, name); //继承 姓名属性，不要钱。  </div><div class=\"line\"></div><div class=\"line\">            this.info = function()&#123;</div><div class=\"line\"></div><div class=\"line\">                alert(&apos;姓名： &apos;+this.name);</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        //实例化类</div><div class=\"line\"></div><div class=\"line\">        var per = new Parent(&apos;parent&apos;, 800000000000);</div><div class=\"line\"></div><div class=\"line\">        var chi = new Children(&apos;child&apos;);</div><div class=\"line\"></div><div class=\"line\">        per.info();</div><div class=\"line\"></div><div class=\"line\">        chi.info();</div></pre></td></tr></table></figure></p>\n<p>132、bind(), live(), delegate()的区别<br>    bind： 绑定事件，对新添加的事件不起作用，方法用于将一个处理程序附加到每个匹配元素的事件上并返回jQuery对象。</p>\n<pre><code>live： 方法将一个事件处理程序附加到与当前选择器匹配的所有元素（包含现有的或将来添加的）的指定事件上并返回jQuery对象。\n\ndelegate： 方法基于一组特定的根元素将处理程序附加到匹配选择器的所有元素（现有的或将来的）的一个或多个事件上。\n</code></pre><p>133、typeof 的返回类型有哪些？   </p>\n<pre><code>alert(typeof [1, 2]); //object\n\nalert(typeof &apos;leipeng&apos;); //string\n\nvar i = true;\n\nalert(typeof i); //boolean\n\nalert(typeof 1); //number\n\nvar a;\n\nalert(typeof a); //undefined\n\nfunction a(){;};\n\nalert(typeof a) //function\n</code></pre><p>134、简述link和import的区别？<br>区别1：link是XHTML标签，除了加载CSS外，还可以定义RSS等其他事务；@import属于CSS范畴，只能加载CSS。</p>\n<p>区别2：link引用CSS时，在页面载入时同时加载；@import需要页面网页完全载入以后加载。</p>\n<p>区别3：link是XHTML标签，无兼容问题；@import是在CSS2.1提出的，低版本的浏览器不支持。</p>\n<p>区别4：link支持使用Javascript控制DOM去改变样式；而@import不支持。</p>\n<p>135、window.onload 和 document.ready的区别？<br>load要等到图片和包含的文件都加在进来之后执行；</p>\n<p>ready是不包含图片和非文字文件的文档结构准备好就执行；</p>\n<p>136、 解析URL成一个对象？<br>            String.prototype.urlQueryString = function(){</p>\n<pre><code>    var url = this.split(&apos;?&apos;)[1].split(&apos;&amp;&apos;),\n\n        len = url.length;\n\n\n\n    this.url = {};\n\n    for(var i = 0; i &lt; len; i += 1){\n\n        var cell = url[i].split(&apos;=&apos;),    \n\n            key = cell[0],\n\n            val = cell[1];\n\n        this.url[&apos;&apos;+key+&apos;&apos;] = val;\n\n    }\n\n    return this.url;\n\n}\n\nvar url = &apos;?name=12&amp;age=23&apos;;\n\nconsole.log(url.urlQueryString().age);\n</code></pre><p>137、看下列代码输出什么？<br>var foo = “11”+2-“1”;</p>\n<p>console.log(foo);</p>\n<p>console.log(typeof foo);<br>执行完后foo的值为111，foo的类型为Number。<br>138、看下列代码,输出什么？<br>var a = new Object();<br>a.value = 1;<br>b = a;<br>b.value = 2;<br>alert(a.value);<br>执行完后输出结果为2<br>139、已知数组var stringArray = [“This”, “is”, “Baidu”, “Campus”]，Alert出”This is Baidu Campus”。<br>答案：alert(stringArray.join(“”))</p>\n<p>140、已知有字符串foo=”get-element-by-id”,写一个function将其转化成驼峰表示法”getElementById”。<br>答案：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">function combo(msg)&#123;</div><div class=\"line\"></div><div class=\"line\">  var arr = msg.split(&quot;-&quot;);</div><div class=\"line\"></div><div class=\"line\">  var len = arr.length;  //将arr.length存储在一个局部变量可以提高for循环效率</div><div class=\"line\"></div><div class=\"line\">  for(var i=1;i&lt;len;i++)&#123;</div><div class=\"line\"></div><div class=\"line\">    arr[i]=arr[i].charAt(0).toUpperCase()+arr[i].substr(1,arr[i].length-1);</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  msg=arr.join(&quot;&quot;);</div><div class=\"line\"></div><div class=\"line\">  return msg;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>141、怎样添加、移除、移动、复制、创建和查找节点<br>　　1）创建新节点</p>\n<p>createDocumentFragment() //创建一个DOM片段<br>createElement() //创建一个具体的元素<br>createTextNode() //创建一个文本节点</p>\n<p>2）添加、移除、替换、插入<br>appendChild() //添加<br>removeChild() //移除<br>replaceChild() //替换<br>insertBefore() //插入</p>\n<p>3）查找<br>getElementsByTagName() //通过标签名称<br>getElementsByName() //通过元素的Name属性的值<br>getElementById() //通过元素Id，唯一性</p>\n<p>142、原生JS的window.onload与Jquery的$(document).ready(function(){})有什么不同？<br>　　window.onload()方法是必须等到页面内包括图片的所有元素加载完毕后才能执行。</p>\n<p>$(document).ready()是DOM结构绘制完毕后就执行，不必等到加载完毕。</p>\n<p>143、你如何优化自己的代码？<br>代码重用</p>\n<p>避免全局变量（命名空间，封闭空间，模块化mvc..）</p>\n<p>拆分函数避免函数过于臃肿</p>\n<p>注释</p>\n<p>144、请描述出下列代码运行的结果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">function d()&#123;</div><div class=\"line\"></div><div class=\"line\">        console.log(this);</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">d();</div></pre></td></tr></table></figure></p>\n<p>145、需要将变量e的值修改为“a+b+c+d”,请写出对应的代码<br>var e=”abcd”;</p>\n<p>设计一段代码能够遍历下列整个DOM节点<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div&gt;</div><div class=\"line\"></div><div class=\"line\">        &lt;p&gt;</div><div class=\"line\"></div><div class=\"line\">            &lt;span&gt;&lt;a/&gt;&lt;/span&gt;</div><div class=\"line\"></div><div class=\"line\">            &lt;span&gt;&lt;a/&gt;&lt;/span&gt;</div><div class=\"line\"></div><div class=\"line\">        &lt;/p&gt;</div><div class=\"line\"></div><div class=\"line\">        &lt;ul&gt;</div><div class=\"line\"></div><div class=\"line\">            &lt;li&gt;&lt;/li&gt;</div><div class=\"line\"></div><div class=\"line\">            &lt;li&gt;&lt;/li&gt;</div><div class=\"line\"></div><div class=\"line\">        &lt;/ul&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>146、怎样实现两栏等高？<br>147、使用js实现这样的效果：在文本域里输入文字时，当按下enter键时不换行，而是替换成“”,(只需要考虑在行尾按下enter键的情况).<br>148、以下代码中end字符串什么时候输出<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">var t=true;</div><div class=\"line\"></div><div class=\"line\">setTimeout(function()&#123;</div><div class=\"line\"></div><div class=\"line\">    console.log(123);</div><div class=\"line\"></div><div class=\"line\">    t=false;</div><div class=\"line\"></div><div class=\"line\">    &#125;,1000);</div><div class=\"line\"></div><div class=\"line\">while(t)&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">console.log(‘end’);</div></pre></td></tr></table></figure></p>\n<p>149、specify(‘hello,world’)//=&gt;’h,e,l,l,o,w,o,r,l,d’实现specify函数<br>150、请将一个URL的search部分参数与值转换成一个json对象<br>151、请用原生js实现jquery的get\\post功能，以及跨域情况下<br>152、请简要描述web前端性能需要考虑哪方面，你的优化思路是什么？<br>153、简述readyonly与disabled的区别<br>154、判断一个字符吕串出现次数最多的字符，统计这个次数并输出<br>155、编写一个方法，去掉一个数组的复重元素<br>156、写出3个使用this的典型应用<br>157、请尽可能详尽的解释ajax的工作原理<br>158、为什么扩展javascript内置对象不是好的做法？<br>159、请解释一下javascript的同源策略<br>160、什么是三元表达式？“三元”表示什么意思？<br>161、浏览器标准模式和怪异模式之间的区别是什么？<br>162、如果设计中使用了非标准的字体，你该如何去实现？<br>163、用css分别实现某个div元素上下居中和左右居中<br>164、modulo(12,5)//2  实现满足这个结果的modulo函数<br>165、HTTP协议中，GET和POST有什么区别？分别适用什么场景 ？<br>166、HTTP状态消息200 302 304 403 404 500分别表示什么<br>167、HTTP协议中，header信息里面，怎么控制页面失效时间（last-modified,cache-control,Expires分别代表什么）<br>168、HTTP雷锋议目前常用的有哪几个？KEEPALIVE从哪个版本开始出现的？<br>169、业界常用的优化WEB页面加载速度的方法（可以分别从页面元素展现，请求连接，css,js,服务器等方面介绍）<br>170、列举常用的web页面开发，调试以及优化工具<br>171、解释什么是sql注入，xss漏洞<br>172、如何判断一个js变量是数组类型<br>173、请列举js数组类型中的常用方法<br>174、FF与IE中如何阻止事件冒泡，如何获取事件对象，以及如何获取触发事件的元素<br>175、列举常用的js框架以及分别适用的领域<br>176、js中如何实现一个map<br>177、js可否实现面向对象编程，如果可以如何实现js对象的继承<br>178、约瑟夫环—已知n个人（以编号1，2，3…分别表示）围坐在一张圆桌周围。从编号为k的人开始报数，数到m的那个人出列；他的下一个人又从1开始报数，数到m的那个人又出列；依此规律重复下去，直到圆桌周围的人全部出列。<br>179、有1到10w这个10w个数，去除2个并打乱次序，如何找出那两个数？<br>180、如何获取对象a拥有的所有属性（可枚举的、不可枚举的，不包括继承来的属性）<br>181、有下面这样一段HTML结构，使用css实现这样的效果：<br>左边容器无论宽度如何变动，右边容器都能自适应填满父容器剩余的宽度。</p>\n<div class=”warp”><br><br><div class=”left”></div>\n\n<div class=”right”></div>\n\n<p></div></p>\n<p>182、下面这段代码想要循环昝输出结果01234，请问输出结果是否正确，如果不正确，请说明为什么，并修改循环内的代码使其输出正确结果<br>for(var i=0;i&lt;5;++i){</p>\n<pre><code>setTimeout(function(){\n\n        console.log(i+’’);\n\n    },100*i);\n</code></pre><p>}</p>\n<p>183、解释下这个css选择器什么发生什么？<br>[role=nav]&gt;ul a:not([href^-mailto]){}</p>\n<p>184、JavaScript以下哪条语句会产生运行错误<br>A. var obj = ();    B. var obj = [];    C. var obj = {};    D. var obj = //;</p>\n<p>答案：AD</p>\n<p>185、以下哪些是javascript的全局函数：（ABC）<br>A. escape   函数可对字符串进行编码，这样就可以在所有的计算机上读取该字符串。ECMAScript v3 反对使用该方法，应用使用 decodeURI() 和 decodeURIComponent() 替代它。</p>\n<p>B. parseFloat   parseFloat() 函数可解析一个字符串，并返回一个浮点数。</p>\n<p>该函数指定字符串中的首个字符是否是数字。如果是，则对字符串进行解析，直到到达数字的末端为止，然后以数字返回该数字，而不是作为字符串。</p>\n<p>C. eval 函数可计算某个字符串，并执行其中的的 JavaScript 代码。</p>\n<p>D. setTimeout</p>\n<p>E. alert</p>\n<p>186、关于IE的window对象表述正确的有：（ACD）<br>A. window.opener属性本身就是指向window对象</p>\n<p>B. window.reload()方法可以用来刷新当前页面  应该是location.reload或者window.location.reload</p>\n<p>C. window.location=”a.html”和window.location.href=”a.html”的作用都是把当前页面替换成a.html页面</p>\n<p>D. 定义了全局变量g；可以用window.g的方式来存取该变量</p>\n<p>187、描述错误的是<br>A：Http状态码302表示暂时性转移 对</p>\n<p>B:domContentLoaded事件早于onload事件  onload 事件会在页面或图像加载完成后立即发生。</p>\n<p>C: IE678不支持事件捕获</p>\n<p>D:localStorage 存储的数据在电脑重启后丢失     没有时间限制</p>\n<p>try…catch 语句。(在 IE5+、Mozilla 1.0、和 Netscape 6 中可用)</p>\n<p>188、关于link和@import的区别正确的是  A<br>A: link属于XHTML标签，而@import是CSS提供的；</p>\n<p>B：页面被加载时，link会同时被加载，而后者引用的CSS会等到页面被加载完再加载</p>\n<p>C：import只在IE5以上才能识别 而link是XHTML标签，无兼容问题</p>\n<p>D: link方式的样式的权重高于@import的权重</p>\n<p>189、下面正确的是  A<br>A: 跨域问题能通过JsonP方案解决 B：不同子域名间仅能通过修改window.name解决跨域   还可以通过script标签src  jsonp等h5 Javasplit等</p>\n<p>C：只有在IE中可通过iframe嵌套跨域 D：MediaQuery属性是进行视频格式检测的属性是做响应式的</p>\n<p>188、错误的是<br>A: Ajax本质是XMLHttpRequest       </p>\n<p>B: 块元素实际占用的宽度与它的width、border、padding属性有关，与background无关</p>\n<p>C: position属性absolute、fixed、—relative—会使文档脱标</p>\n<p>D:  float属性left也会使div脱标</p>\n<p>189、不用任何插件，如何实现一个tab栏切换？<br>190、基本数据类型的专业术语以及单词拼写<br>191、变量的命名规范以及命名推荐<br>192、三种弹窗的单词以及三种弹窗的功能<br>193、console.log( 8 | 1 ); 输出值是多少？<br>答案：9</p>\n<p>194、只允许使用 + - <em> / 和 Math.</em> ，求一个函数 y = f(x, a, b);当x &gt; 100 时返回 a 的值，否则返回 b 的值，不能使用 if else 等条件语句，也不能使用|,?:,数组。<br>答案：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">function f(x, a, b) &#123;</div><div class=\"line\"></div><div class=\"line\">    var temp = Math.ceil(Math.min(Math.max(x - 100, 0), 1));</div><div class=\"line\"></div><div class=\"line\">    return a * temp + b * (1 - temp);</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">console.log(f(-10, 1, 2));</div></pre></td></tr></table></figure></p>\n<p>195、JavaScriptalert(0.4*0.2);结果是多少？和你预期的一样吗？如果不一样该如何处理？<br>    有误差，应该比准确结果偏大。 一般我会将小数变为整数来处理。当前之前遇到这个问题时也上网查询发现有人用try catch return写了一个函数，</p>\n<pre><code>当然原理也是一致先转为整数再计算。看起来挺麻烦的，我没用过。\n</code></pre><p>196、一个div，有几种方式得到这个div的jQuery对象？<div class='aabbcc' id='nodesView'></div>想直接获取这个div的dom对象，如何获取？dom对象如何转化为jQuery对象？<br>197、主流浏览器内核<br>IE trident  火狐gecko   谷歌苹果webkit  Opera：Presto</p>\n<p>198、如何显示/隐藏一个dom元素？请用原生的JavaScript方法实现<br>199、JavaScript有哪几种数据类型<br>    Number String Boolean Null Undefined Object</p>\n<p>200、jQuery框架中$.ajax()的常用参数有哪些？写一个post请求并带有发送数据和返回数据的样例<br>201、JavaScript数组元素添加、删除、排序等方法有哪些？<br>Array.concat( ) 连接数组</p>\n<p>Array.join( ) 将数组元素连接起来以构建一个字符串</p>\n<p>Array.length 数组的大小</p>\n<p>Array.pop( ) 删除并返回数组的最后一个元素</p>\n<p>Array.push( ) 给数组添加元素</p>\n<p>Array.reverse( ) 颠倒数组中元素的顺序</p>\n<p>Array.shift( ) 将元素移出数组</p>\n<p>Array.slice( ) 返回数组的一部分</p>\n<p>Array.sort( ) 对数组元素进行排序</p>\n<p>Array.splice( ) 插入、删除或替换数组的元素</p>\n<p>Array.toLocaleString( ) 把数组转换成局部字符串</p>\n<p>Array.toString( ) 将数组转换成一个字符串</p>\n<p>Array.unshift( ) 在数组头部插入一个元素</p>\n<p>202、如何添加html元素的事件，有几种方法？请列举<br>直接在标签里添加；在元素上添加、使用事件注册函数添加</p>\n<p>203、JavaScript的循环语句有哪些？<br>while  for  do while  forEach</p>\n<p>204、作用域-编译期执行期以及全局局部作用域问题<br>理解js执行主要的两个阶段：预解析和执行期</p>\n<p>205、闭包：下面这个ul，如何点击每一列的时候alert其index？<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;ul id=&quot;test&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;li&gt;这是第一条&lt;/li&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;li&gt;这是第二条&lt;/li&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;li&gt;这是第三条&lt;/li&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/ul&gt;</div></pre></td></tr></table></figure></p>\n<p>206、列出3条以上ff和IE的脚本兼容问题<br>1、在IE下可通过document.frames[“id”];得到该IFRAME对象，</p>\n<p>而在火狐下则是通过document.getElementById(“content_panel_if”).contentWindow;</p>\n<p>2、IE的写法： `_tbody=_table.childNodes[0]``</p>\n<p>在FF中，firefox会在子节点中包含空白则第一个子节点为空白””， 而ie不会返回空白</p>\n<p>可以通过if(“” != node.nodeName)过滤掉空白子对象</p>\n<p>3、模拟点击事件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">if(document.all)&#123;  //ie下</div><div class=\"line\"></div><div class=\"line\">    document.getElementById(&quot;a3&quot;).click();  </div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">else&#123;  //非IE</div><div class=\"line\"></div><div class=\"line\">    var evt = document.createEvent(&quot;MouseEvents&quot;);</div><div class=\"line\"></div><div class=\"line\">    evt.initEvent(&quot;click&quot;, true, true);</div><div class=\"line\"></div><div class=\"line\">    document.getElementById(&quot;a3&quot;).dispatchEvent(evt);</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>4、事件注册</p>\n<p>if (isIE){window.attachEvent(“onload”, init);}else{window.addEventListener(“load”, init, false);}</p>\n<p>207、列举可以哪些方面对前端开发进行优化<br>代码压缩、合并减少http请求，图片制作精灵图、代码优化</p>\n<p>208、至少列出一种JavaScript继承的实现方式<br>209、如现在有一个效果，有显示用户头像、用户昵称、用户其他信息；当用户鼠标移到头像上时，会弹出用户的所有信息；如果是你，你会如何实现这个功能，请用代码实现？<br>210、call与apply有什么作用？又有什么什么区别？用callee属性实现函数递归？<br>apply的参数是数组,call的参数是单个的值，除此之外，两者没有差别，重点理解this的改变，callee已经不推荐使用</p>\n<p>211、用正则表达式，写出由字母开头，其余由数字、字母、下划线组成的6~30的字符串？<br>212、列举浏览器对象模型BOM里常用的至少4个对象，并列举window对象的常用方法至少5个 （10分）<br>对象：Window document location screen history navigator</p>\n<p>方法：Alert() confirm() prompt() open() close()</p>\n<p>213、Javascript中callee和caller的作用？<br>caller是返回一个对函数的引用，该函数调用了当前函数；</p>\n<p>callee是返回正在被执行的function函数，也就是所指定的function对象的正文。</p>\n<p>214、对于apply和call两者在作用上是相同的，即是调用一个对象的一个方法，以另一个对象替换当前对象。将一个函数的对象上下文从初始的上下文改变为由 thisObj 指定的新对象。<br>但两者在参数上有区别的。对于第一个参数意义都一样，但对第二个参数：?apply传入的是一个参数数组，也就是将多个参数组合成为一个数组传入，而call则作为call的参数传入（从第二个参数开始）。?如 func.call(func1,var1,var2,var3)对应的apply写法为：func.apply(func1,[var1,var2,var3]) 。</p>\n<p>215、在Javascript中什么是伪数组？如何将伪数组转化为标准数组？<br>伪数组（类数组）：无法直接调用数组方法或期望length属性有什么特殊的行为，但仍可以对真正数组遍历方法来遍历它们。典型的是函数的argument参数，还有像调用getElementsByTagName,document.childNodes之类的,它们都返回NodeList对象都属于伪数组。可以使用Array.prototype.slice.call(fakeArray)将数组转化为真正的Array对象。</p>\n<p>216、写一个函数可以计算 sum(5,0,-5);输出0; sum(1,2,3,4);输出10;<br>Js基本功</p>\n<p>217、事件代理怎么实现？<br>在元素的父节点注册事件，通过事件冒泡，在父节点捕获事件</p>\n<p>218、《正则》写出正确的正则表达式匹配固话号，区号3-4位，第一位为0，中横线，7-8位数字，中横线，3-4位分机号格式的固话号<br>常用正则表达式语法要熟悉</p>\n<p>219、《算法》 一下A,B可任选一题作答，两题全答加分<br>A:农场买了一只羊，第一年是小羊，第二年底生一只，第三年不生，第四年底再生一只，第五年死掉。</p>\n<p>B:写出代码对下列数组去重并从大到小排列{5,2,3,6,8,6,5,4,7,1,9}</p>\n<p>220、请写出一张图片的HTML代码，已知道图片地址为“images/abc.jpg”,宽100px，高50px<br>221、请写一个正则表达式：要求最短6位数，最长20位，阿拉伯数和英文字母（不区分大小写）组成<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[a-zA-Z\\d]&#123;6,20&#125;$</div></pre></td></tr></table></figure></p>\n<p>222、统计1到400亿之间的自然数中含有多少个1？比如1-21中，有1、10、11、21这四个自然数有5个1<br>223、删除与某个字符相邻且相同的字符，比如fdaffdaaklfjklja字符串处理之后成为“fdafdaklfjklja”<br>224、请写出三种以上的Firefox有但InternetExplorer没有的属性和函数<br>1、在IE下可通过document.frames[“id”];得到该IFRAME对象，</p>\n<p>而在火狐下则是通过document.getElementById(“content_panel_if”).contentWindow;</p>\n<p>2、IE的写法： `_tbody=_table.childNodes[0]``</p>\n<p>在FF中，firefox会在子节点中包含空白则第一个子节点为空白””， 而ie不会返回空白</p>\n<p>可以通过if(“” != node.nodeName)过滤掉空白子对象</p>\n<p>3、模拟点击事件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">if(document.all)&#123;  //ie下</div><div class=\"line\"></div><div class=\"line\">    document.getElementById(&quot;a3&quot;).click();</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">else&#123;  //非IE</div><div class=\"line\"></div><div class=\"line\">    var evt = document.createEvent(&quot;MouseEvents&quot;);</div><div class=\"line\"></div><div class=\"line\">    evt.initEvent(&quot;click&quot;, true, true);</div><div class=\"line\"></div><div class=\"line\">    document.getElementById(&quot;a3&quot;).dispatchEvent(evt);</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>4、事件注册</p>\n<p>if (isIE){window.attachEvent(“onload”, init);}else{window.addEventListener(“load”, init, false);}</p>\n<p>225、请写出一个程序，在页面加载完成后动态创建一个form表单，并在里面添加一个input对象并给它任意赋值后义post方式提交到：<a href=\"http://127.0.0.1/save.php\">http://127.0.0.1/save.php</a></p>\n<p>226、用JavaScript实现冒泡排序。数据为23、45、18、37、92、13、24<br>面试经常遇到的排序，查找算法要熟悉</p>\n<p>227、解释一下什么叫闭包，并实现一段闭包代码<br>简单理解就是函数的嵌套形成闭包，闭包包括函数本身及其外部作用域</p>\n<p>228、简述一下什么叫事件委托以及其原理<br>在元素的父节点注册事件，通过事件冒泡，在父节点捕获事件</p>\n<p>229、前端代码优化的方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">var User = &#123; 对象</div><div class=\"line\"></div><div class=\"line\">    count = 1，属性</div><div class=\"line\"></div><div class=\"line\">    getCount：function（）&#123; 方法</div><div class=\"line\"></div><div class=\"line\">        return this.count;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">console.log(User.getCount());</div><div class=\"line\"></div><div class=\"line\">var func = User.getCount;</div><div class=\"line\"></div><div class=\"line\">console.log(func());</div><div class=\"line\"></div><div class=\"line\">1 undefined（window）;</div></pre></td></tr></table></figure></p>\n<p>230、下列JavaScript代码执行后，依次alert的结果是<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">(function test()&#123;</div><div class=\"line\"></div><div class=\"line\">      var a=b=5;</div><div class=\"line\"></div><div class=\"line\">      alert(typeof a);</div><div class=\"line\"></div><div class=\"line\">      alert(typeof b);</div><div class=\"line\"></div><div class=\"line\">&#125;)();</div><div class=\"line\"></div><div class=\"line\">alert(typeof a);</div><div class=\"line\"></div><div class=\"line\">alert(typeof b);</div></pre></td></tr></table></figure></p>\n<p>231、下列JavaScript代码执行后，iNum的值是<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">var iNum = 0;</div><div class=\"line\"></div><div class=\"line\">for(var i = 1; i&lt; 10; i++)&#123;</div><div class=\"line\"></div><div class=\"line\">     if(i % 5 == 0)&#123;</div><div class=\"line\"></div><div class=\"line\">         continue;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    iNum++;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>232、输出结果是多少？<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"> 1）  var a;</div><div class=\"line\"></div><div class=\"line\">var b = a * 0;</div><div class=\"line\"></div><div class=\"line\">if (b == b) &#123;</div><div class=\"line\"></div><div class=\"line\">     console.log(b * 2 + &quot;2&quot; - 0 + 4);</div><div class=\"line\"></div><div class=\"line\">&#125; else &#123;</div><div class=\"line\"></div><div class=\"line\">     console.log(!b * 2 + &quot;2&quot; - 0 + 4);</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>答案：26</p>\n<p>2）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script&gt;</div><div class=\"line\"></div><div class=\"line\">     var a = 1;</div><div class=\"line\"></div><div class=\"line\">&lt;/script&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;script&gt;</div><div class=\"line\"></div><div class=\"line\">var a;</div><div class=\"line\"></div><div class=\"line\">var b = a * 0;</div><div class=\"line\"></div><div class=\"line\">if (b == b) &#123;</div><div class=\"line\"></div><div class=\"line\">        console.log(b * 2 + &quot;2&quot; - 0 + 4);</div><div class=\"line\"></div><div class=\"line\">&#125; else &#123;</div><div class=\"line\"></div><div class=\"line\">        console.log(!b * 2 + &quot;2&quot; - 0 + 4);</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure></p>\n<p>答案：6</p>\n<p>3）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"> var t = 10;</div><div class=\"line\"></div><div class=\"line\">function test(t)&#123;</div><div class=\"line\"></div><div class=\"line\">       var t = t++;</div><div class=\"line\"></div><div class=\"line\">&#125;test(t);</div><div class=\"line\"></div><div class=\"line\">console.log(t);</div></pre></td></tr></table></figure></p>\n<p>答案：10</p>\n<p>4）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">var t = 10;</div><div class=\"line\"></div><div class=\"line\">function test(test)&#123;</div><div class=\"line\"></div><div class=\"line\">      var t = test++;</div><div class=\"line\"></div><div class=\"line\">&#125;test(t);</div><div class=\"line\"></div><div class=\"line\">console.log(t);</div><div class=\"line\"></div><div class=\"line\">答案：10</div></pre></td></tr></table></figure></p>\n<p>6）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">var t = 10;</div><div class=\"line\"></div><div class=\"line\">function test(test)&#123;</div><div class=\"line\"></div><div class=\"line\">       t = test++;</div><div class=\"line\"></div><div class=\"line\">&#125;test(t);</div><div class=\"line\"></div><div class=\"line\">console.log(t);</div><div class=\"line\"></div><div class=\"line\">答案：10</div></pre></td></tr></table></figure></p>\n<p>7） var t = 10;<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">function test(test)&#123;</div><div class=\"line\"></div><div class=\"line\">      t = t + test;</div><div class=\"line\"></div><div class=\"line\">      console.log(t);</div><div class=\"line\"></div><div class=\"line\">      var t = 3;</div><div class=\"line\"></div><div class=\"line\">&#125;test(t);</div><div class=\"line\"></div><div class=\"line\">console.log(t);</div></pre></td></tr></table></figure></p>\n<p>答案：NaN  10</p>\n<p>8）var a;<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">var b = a / 0;</div><div class=\"line\"></div><div class=\"line\">if (b == b) &#123;</div><div class=\"line\"></div><div class=\"line\">        console.log(b * 2 + &quot;2&quot; - 0 + 4);</div><div class=\"line\"></div><div class=\"line\">&#125; else &#123;</div><div class=\"line\"></div><div class=\"line\">        console.log(!b * 2 + &quot;2&quot; - 0 + 4);</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>答案：26<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">9）&lt;script&gt;</div><div class=\"line\"></div><div class=\"line\">      var a = 1;</div><div class=\"line\"></div><div class=\"line\">&lt;/script&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;script&gt;</div><div class=\"line\"></div><div class=\"line\">    var a;</div><div class=\"line\"></div><div class=\"line\">    var b = a / 0;</div><div class=\"line\"></div><div class=\"line\">    if (b == b) &#123;</div><div class=\"line\"></div><div class=\"line\">        console.log(b * 2 + &quot;2&quot; + 4);</div><div class=\"line\"></div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\"></div><div class=\"line\">        console.log(!b * 2 + &quot;2&quot; + 4);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&lt;/script&gt;</div><div class=\"line\"></div><div class=\"line\">答案：Infinity24</div></pre></td></tr></table></figure></p>\n<p>233、<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;body&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;form id=&apos;form1&apos;&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;div id=&apos;div1&apos;&gt;&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;div id=&apos;div2&apos;&gt;&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;div id=&apos;div3&apos;&gt;&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;div id=&apos;div4&apos;&gt;&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;div id=&apos;div5&apos;&gt;&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;div id=&apos;div3&apos;&gt;id名重复的元素&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/form&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/body&gt;</div></pre></td></tr></table></figure></p>\n<p>用程序实现找到html中id名相同的元素？</p>\n<p>234、下列JavaScript代码执行后，运行的结果是<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;button id=&apos;btn&apos;&gt;点击我&lt;/button&gt;</div><div class=\"line\"></div><div class=\"line\">var btn = document.getElementById(&apos;btn&apos;);</div><div class=\"line\"></div><div class=\"line\">var handler = &#123;</div><div class=\"line\"></div><div class=\"line\">    id: &apos;_eventHandler&apos;,</div><div class=\"line\"></div><div class=\"line\">    exec: function()&#123;</div><div class=\"line\"></div><div class=\"line\">        alert(this.id);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">btn.addEventListener(&apos;click&apos;, handler.exec.false);</div></pre></td></tr></table></figure></p>\n<p>235、下列JavaScript代码执行后，依次alert的结果是<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">var obj = &#123;proto: &#123;a:1,b:2&#125;&#125;;</div><div class=\"line\"></div><div class=\"line\">function F()&#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">F.prototype = obj.proto;</div><div class=\"line\"></div><div class=\"line\">var f = new F();</div><div class=\"line\"></div><div class=\"line\">obj.proto.c = 3;</div><div class=\"line\"></div><div class=\"line\">obj.proto = &#123;a:-1, b:-2&#125;;</div><div class=\"line\"></div><div class=\"line\">alert(f.a);</div><div class=\"line\"></div><div class=\"line\">alert(f.c);</div><div class=\"line\"></div><div class=\"line\">delete F.prototype[&apos;a&apos;];</div><div class=\"line\"></div><div class=\"line\">alert(f.a);</div><div class=\"line\"></div><div class=\"line\">alert(obj.proto.a);</div></pre></td></tr></table></figure></p>\n<p>236、下列JavaScript代码执行后的效果是<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;ul id=&apos;list&apos;&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;li&gt;item&lt;/li&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;li&gt;item&lt;/li&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;li&gt;item&lt;/li&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;li&gt;item&lt;/li&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;li&gt;item&lt;/li&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/ul&gt;</div><div class=\"line\"></div><div class=\"line\">var items = document.querySelectorAll(&apos;#list&gt;li&apos;);</div><div class=\"line\"></div><div class=\"line\">for(var i = 0;i &lt; items.length; i++)&#123;</div><div class=\"line\"></div><div class=\"line\">     setTimeout(function()&#123;</div><div class=\"line\"></div><div class=\"line\">           items[i].style.backgroundColor = &apos;#fee&apos;;</div><div class=\"line\"></div><div class=\"line\">    &#125;, 5);</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>237、下列JavaScript代码执行后的li元素的数量是<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;ul&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;li&gt;Item&lt;/li&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;li&gt;&lt;/li&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;li&gt;&lt;/li&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;li&gt;Item&lt;/li&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;li&gt;Item&lt;/li&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/ul&gt;</div><div class=\"line\"></div><div class=\"line\">var items = document.getElementsByTagName(&apos;li&apos;);</div><div class=\"line\"></div><div class=\"line\">for(var i = 0; i&lt; items.length; i++)&#123;</div><div class=\"line\"></div><div class=\"line\">    if(items[i].innerHTML == &apos;&apos;)&#123;</div><div class=\"line\"></div><div class=\"line\">        items[i].parentNode.removeChild(items[i]);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>238、程序中捕获异常的方法？<br>window.error</p>\n<p>try{}catch(){}finally{}</p>\n<p>239、将字符串”<tr><td>{$id}</td><td>{$name}</td></tr>”中的{$id}替换成10，{$name}替换成Tony （使用正则表达式）<br>答案：”<tr><td>{$id}</td><td>{$id}_{$name}</td></tr>”.replace(/{\\$id}/g,?’10′).replace(/{\\$name}/g,?‘Tony’);</p>\n<p>240、给String对象添加一个方法，传入一个string类型的参数，然后将string的每个字符间价格空格返回，例如：<br>addSpace(“hello world”) // -&gt; ‘h e l l o ?w o r l d’</p>\n<pre><code>String.prototype.spacify = function(){\n</code></pre><p>return this.split(‘’).join(‘ ‘);</p>\n<p>};</p>\n<p>241、写出函数DateDemo的返回结果，系统时间假定为今天<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">function DateDemo()&#123;</div><div class=\"line\"></div><div class=\"line\"> var d, s=&quot;今天日期是：&quot;;</div><div class=\"line\"></div><div class=\"line\">d = new Date();</div><div class=\"line\"></div><div class=\"line\">s += d.getMonth() + &quot;/&quot;;</div><div class=\"line\"></div><div class=\"line\">s += d.getDate() + &quot;/&quot;;</div><div class=\"line\"></div><div class=\"line\">s += d.getYear();</div><div class=\"line\"></div><div class=\"line\"> return s;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">结果：今天日期是：7/17/2010</div></pre></td></tr></table></figure></p>\n<p>242、输出今天的日期，以YYYY-MM-DD的方式，比如今天是2014年9月26日，则输出2014-09-26<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">var d = new Date();</div><div class=\"line\"></div><div class=\"line\">// 获取年，getFullYear()返回4位的数字</div><div class=\"line\"></div><div class=\"line\">var year = d.getFullYear();</div><div class=\"line\"></div><div class=\"line\">// 获取月，月份比较特殊，0是1月，11是12月</div><div class=\"line\"></div><div class=\"line\">var month = d.getMonth() + 1;</div><div class=\"line\"></div><div class=\"line\">// 变成两位</div><div class=\"line\"></div><div class=\"line\">month = month &lt; 10 ? &apos;0&apos; + month : month;</div><div class=\"line\"></div><div class=\"line\">// 获取日</div><div class=\"line\"></div><div class=\"line\">var day = d.getDate();</div><div class=\"line\"></div><div class=\"line\">day = day &lt; 10 ? &apos;0&apos; + day : day;</div><div class=\"line\"></div><div class=\"line\">alert(year + &apos;-&apos; + month + &apos;-&apos; + day);</div></pre></td></tr></table></figure></p>\n<p>243、已知数组var?stringArray?=?[“This”,?“is”,?“Baidu”,?“Campus”]，Alert出”This?is?Baidu?Campus”。<br>答案：alert(stringArray.join(“”))</p>\n<p>244、已知有字符串foo=”get-element-by-id”,写一个function将其转化成驼峰表示法”getElementById”。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">function combo(msg)&#123;</div><div class=\"line\"></div><div class=\"line\">var arr=msg.split(&quot;-&quot;);</div><div class=\"line\"></div><div class=\"line\">for(var i=1;i&lt;arr.length;i++)&#123;</div><div class=\"line\"></div><div class=\"line\">arr[i]=arr[i].charAt(0).toUpperCase()+arr[i].substr(1,arr[i].length-1);</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">msg=arr.join(&quot;&quot;);</div><div class=\"line\"></div><div class=\"line\">return msg;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>245、.varnumberArray=[3,6,2,4,1,5]; （考察基础API）<br>1)实现对该数组的倒排，输出[5,1,4,2,6,3]</p>\n<p>2)实现对该数组的降序排列，输出[6,5,4,3,2,1]<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">function combo(msg)&#123;</div><div class=\"line\"></div><div class=\"line\">var arr=msg.split(&quot;-&quot;);</div><div class=\"line\"></div><div class=\"line\">for(var i=1;i&lt;arr.length;i++)&#123;</div><div class=\"line\"></div><div class=\"line\">arr[i]=arr[i].charAt(0).toUpperCase()+arr[i].substr(1,arr[i].length-1);</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">msg=arr.join(&quot;&quot;);</div><div class=\"line\"></div><div class=\"line\">return msg;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>246、把两个数组合并，并删除第二个元素。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">var array1 = [&apos;a&apos;,&apos;b&apos;,&apos;c&apos;];</div><div class=\"line\"></div><div class=\"line\">var bArray = [&apos;d&apos;,&apos;e&apos;,&apos;f&apos;];</div><div class=\"line\"></div><div class=\"line\">var cArray = array1</div></pre></td></tr></table></figure></p>\n<p>247、如何消除一个数组里面重复的元素？<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">var arr=[1,2,3,3,4,4,5,5,6,1,9,3,25,4];</div><div class=\"line\"></div><div class=\"line\">function deRepeat()&#123;</div><div class=\"line\"></div><div class=\"line\">var newArr=[];</div><div class=\"line\"></div><div class=\"line\">var obj=&#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">var index=0;</div><div class=\"line\"></div><div class=\"line\">var l=arr.length;</div><div class=\"line\"></div><div class=\"line\">for(var i=0;i&lt;l;i++)&#123;</div><div class=\"line\"></div><div class=\"line\">if(obj[arr[i]]==undefined)</div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\">obj[arr[i]]=1;</div><div class=\"line\"></div><div class=\"line\">newArr[index++]=arr[i];</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">else if(obj[arr[i]]==1)</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">return newArr;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var newArr2=deRepeat(arr);</div><div class=\"line\"></div><div class=\"line\">alert(newArr2); //输出1,2,3,4,5,6,9,25</div></pre></td></tr></table></figure></p>\n<p>248、用js实现随机选取10–100之间的10个数字，存入一个数组，并排序。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">var iArray = [];</div><div class=\"line\"></div><div class=\"line\">funtion getRandom(istart, iend)&#123;</div><div class=\"line\"></div><div class=\"line\">var iChoice = istart - iend +1;</div><div class=\"line\"></div><div class=\"line\">return Math.floor(Math.random() * iChoice + istart;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">for(var i=0; i&lt;10; i++)&#123;</div><div class=\"line\"></div><div class=\"line\">iArray.push(getRandom(10,100));</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">iArray.sort();</div></pre></td></tr></table></figure></p>\n<p>249、正则表达式构造函数var reg=new RegExp(“xxx”)与正则表达字面量var reg=//有什么不同？匹配邮箱的正则表达式？<br>答案：当使用RegExp()构造函数的时候，不仅需要转义引号（即\\”表示”），并且还需要双反斜杠（即\\表示一个\\）。使用正则表达字面量的效率更高。?</p>\n<p>250、1 var regMail = /^([a-zA-Z0-9<em>-])+@([a-zA-Z0-9</em>-])+((.[a-zA-Z0-9_-]{2,3}){1,2})$/;<br>正则表达式对象3 – 清除空格</p>\n<p>写一个function，清除字符串前后的空格。（兼容所有浏览器）</p>\n<p>使用自带接口trim()，考虑兼容性：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">if (!String.prototype.trim) &#123;</div><div class=\"line\"></div><div class=\"line\">String.prototype.trim = function() &#123;</div><div class=\"line\"></div><div class=\"line\">return this.replace(/^\\s+/, &quot;&quot;).replace(/\\s+$/,&quot;&quot;);</div><div class=\"line\"></div><div class=\"line\">&#125; &#125;</div><div class=\"line\"></div><div class=\"line\">// test the function</div><div class=\"line\"></div><div class=\"line\">var str = &quot; \\t\\n test string &quot;.trim();</div><div class=\"line\"></div><div class=\"line\">alert(str == &quot;test string&quot;); // alerts &quot;true&quot;</div></pre></td></tr></table></figure></p>\n<p>251、数组和字符串<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script lang=&quot;JavaScript&quot; type=&quot;text/javascript&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">    function outPut(s) &#123;</div><div class=\"line\"></div><div class=\"line\">        document.writeln(s);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    var a = &quot;lashou&quot;;</div><div class=\"line\"></div><div class=\"line\">    var b = a;</div><div class=\"line\"></div><div class=\"line\">    outPut(b);</div><div class=\"line\"></div><div class=\"line\">    a = &quot;拉手&quot;;</div><div class=\"line\"></div><div class=\"line\">    outPut(a);</div><div class=\"line\"></div><div class=\"line\">    outPut(b);</div><div class=\"line\"></div><div class=\"line\">    var a_array = [1, 2, 3];</div><div class=\"line\"></div><div class=\"line\">    var b_array = a_array;</div><div class=\"line\"></div><div class=\"line\">    outPut(b_array);</div><div class=\"line\"></div><div class=\"line\">    a_array[3] = 4;</div><div class=\"line\"></div><div class=\"line\">    outPut(a_array);</div><div class=\"line\"></div><div class=\"line\">    outPut(b_array);</div><div class=\"line\"></div><div class=\"line\">&lt;/script&gt;</div><div class=\"line\"></div><div class=\"line\">输出结果：</div><div class=\"line\"></div><div class=\"line\">答案：lashou 拉手 lashou 1,2,3 1,2,3,4 1,2,3,4</div></pre></td></tr></table></figure></p>\n<p>252、下列控制台都输出什么<br>第1题：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">function setName()&#123;</div><div class=\"line\"></div><div class=\"line\">    name=&quot;张三&quot;;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">setName();</div><div class=\"line\"></div><div class=\"line\">console.log(name);</div><div class=\"line\"></div><div class=\"line\">答案：&quot;张三&quot;</div></pre></td></tr></table></figure></p>\n<p>253、第2题：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">//考点：1、变量声明提升 2、变量搜索机制</div><div class=\"line\"></div><div class=\"line\">var a=1;</div><div class=\"line\"></div><div class=\"line\">function test()&#123;</div><div class=\"line\"></div><div class=\"line\">    console.log(a);</div><div class=\"line\"></div><div class=\"line\">    var a=1;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">test();</div><div class=\"line\"></div><div class=\"line\">答案：undefined</div></pre></td></tr></table></figure></p>\n<p>254、第3题：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">var b=2;</div><div class=\"line\"></div><div class=\"line\">function test2()&#123;</div><div class=\"line\"></div><div class=\"line\">    window.b=3;</div><div class=\"line\"></div><div class=\"line\">    console.log(b);</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">test2();</div><div class=\"line\"></div><div class=\"line\">答案：3</div></pre></td></tr></table></figure></p>\n<p>255、第4题：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">c=5;//声明一个全局变量c</div><div class=\"line\"></div><div class=\"line\">function test3()&#123;</div><div class=\"line\"></div><div class=\"line\">    window.c=3;</div><div class=\"line\"></div><div class=\"line\">    console.log(c);     //答案：undefined，原因：由于此时的c是一个局部变量c，并且没有被赋值</div><div class=\"line\"></div><div class=\"line\">    var c;</div><div class=\"line\"></div><div class=\"line\">    console.log(window.c);//答案：3，原因：这里的c就是一个全局变量c</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">test3();</div></pre></td></tr></table></figure></p>\n<p>256、第5题：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">var arr = [];</div><div class=\"line\"></div><div class=\"line\">arr[0]  = &apos;a&apos;;</div><div class=\"line\"></div><div class=\"line\">arr[1]  = &apos;b&apos;;</div><div class=\"line\"></div><div class=\"line\">arr[10] = &apos;c&apos;;</div><div class=\"line\"></div><div class=\"line\">alert(arr.length);  //答案：11</div><div class=\"line\"></div><div class=\"line\">console.log(arr[5]);    //答案：undefined</div></pre></td></tr></table></figure></p>\n<p>257、第6题：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">var a=1;</div><div class=\"line\"></div><div class=\"line\">console.log(a++);       //答案：1</div><div class=\"line\"></div><div class=\"line\">console.log(++a);       //答案：3</div><div class=\"line\"></div><div class=\"line\">258、第7题：</div><div class=\"line\">console.log(null==undefined);   //答案：true</div><div class=\"line\"></div><div class=\"line\">console.log(&quot;1&quot;==1);        //答案：true，因为会将数字1先转换为字符串1</div><div class=\"line\"></div><div class=\"line\">console.log(&quot;1&quot;===1);       //答案：false，因为数据类型不一致</div></pre></td></tr></table></figure></p>\n<p>259、第8题：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">typeof 1;       &quot;number&quot;</div><div class=\"line\"></div><div class=\"line\">typeof &quot;hello&quot;;     &quot;string&quot;</div><div class=\"line\"></div><div class=\"line\">typeof /[0-9]/;     &quot;object&quot;</div><div class=\"line\"></div><div class=\"line\">typeof &#123;&#125;;      &quot;object&quot;</div><div class=\"line\"></div><div class=\"line\">typeof null;        &quot;object&quot;</div><div class=\"line\"></div><div class=\"line\">typeof undefined;   &quot;undefined&quot;</div><div class=\"line\"></div><div class=\"line\">typeof [1,2,3];     &quot;object&quot;</div><div class=\"line\"></div><div class=\"line\">typeof function()&#123;&#125;;    //&quot;function&quot;</div></pre></td></tr></table></figure></p>\n<p>260、第9题：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">parseInt(3.14);         //3</div><div class=\"line\"></div><div class=\"line\">parseFloat(&quot;3asdf&quot;);        //3</div><div class=\"line\"></div><div class=\"line\">parseInt(&quot;1.23abc456&quot;);</div><div class=\"line\"></div><div class=\"line\">parseInt(true);//&quot;true&quot; NaN</div></pre></td></tr></table></figure></p>\n<p>261、第10题：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">//考点：函数声明提前</div><div class=\"line\"></div><div class=\"line\">function bar() &#123;</div><div class=\"line\"></div><div class=\"line\">    return foo;</div><div class=\"line\"></div><div class=\"line\">    foo = 10;</div><div class=\"line\"></div><div class=\"line\">    function foo() &#123;&#125;</div><div class=\"line\"></div><div class=\"line\">    //var foo = 11;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">alert(typeof bar());//&quot;function&quot;</div></pre></td></tr></table></figure></p>\n<p>262、第11题：考点：函数声明提前<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">var foo = 1;</div><div class=\"line\"></div><div class=\"line\">function bar() &#123;</div><div class=\"line\"></div><div class=\"line\">    foo = 10;</div><div class=\"line\"></div><div class=\"line\">    return;</div><div class=\"line\"></div><div class=\"line\">    function foo() &#123;&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">bar();</div><div class=\"line\"></div><div class=\"line\">alert(foo);//答案：1</div></pre></td></tr></table></figure></p>\n<p>263、第12题：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">console.log(a);//是一个函数</div><div class=\"line\"></div><div class=\"line\">var a = 3;</div><div class=\"line\"></div><div class=\"line\">function a()&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">console.log(a);////3</div></pre></td></tr></table></figure></p>\n<p>264、第13题：<br>//考点：对arguments的操作</p>\n<p>function foo(a) {</p>\n<pre><code>arguments[0] = 2;\n\nalert(a);//答案：2，因为：a、arguments是对实参的访问，b、通过arguments[i]可以修改指定实参的值\n</code></pre><p>}</p>\n<p>foo(1);</p>\n<p>265、第14题：<br>function foo(a) {</p>\n<pre><code>alert(arguments.length);//答案：3，因为arguments是对实参的访问\n</code></pre><p>}</p>\n<p>foo(1, 2, 3);</p>\n<p>266、第15题<br>bar();//报错</p>\n<p>var foo = function bar(name) {</p>\n<pre><code>console.log(&quot;hello&quot;+name);\n\nconsole.log(bar);\n</code></pre><p>};</p>\n<p>//alert(typeof bar);</p>\n<p>foo(“world”);//“hello”</p>\n<p>console.log(bar);//undefined</p>\n<p>console.log(foo.toString());</p>\n<p>bar();//报错</p>\n<p>267、第16题<br>function test(){</p>\n<pre><code>console.log(&quot;test函数&quot;);\n</code></pre><p>}</p>\n<p>setTimeout(function(){</p>\n<pre><code>console.log(&quot;定时器回调函数&quot;);\n</code></pre><p>}, 0)</p>\n<p>test();</p>\n<p>function foo(){</p>\n<pre><code>var name=&quot;hello&quot;;\n</code></pre><p>}</p>\n<p>三、Jquery<br>1、jQuery 的 slideUp动画 ，如果目标元素是被外部事件驱动, 当鼠标快速地连续触发外部元素事件, 动画会滞后的反复执行，该如何处理呢?</p>\n<p>四、HTML5 CSS3<br>1、CSS3有哪些新特性？</p>\n<pre><code>1. CSS3实现圆角（border-radius），阴影（box-shadow），\n\n2. 对文字加特效（text-shadow、），线性渐变（gradient），旋转（transform）\n\n3.transform:rotate(9deg) scale(0.85,0.90) translate(0px,-30px) skew(-9deg,0deg);// 旋转,缩放,定位,倾斜\n\n4. 增加了更多的CSS选择器  多背景 rgba\n\n5. 在CSS3中唯一引入的伪元素是 ::selection.\n\n6. 媒体查询，多栏布局\n\n7. border-image\n</code></pre><p>2、html5有哪些新特性、移除了那些元素？如何处理HTML5新标签的浏览器兼容问题？如何区分 HTML 和 HTML5？<br>新特性：</p>\n<pre><code>1. 拖拽释放(Drag and drop) API\n\n2. 语义化更好的内容标签（header,nav,footer,aside,article,section）\n\n3. 音频、视频API(audio,video)\n\n4. 画布(Canvas) API\n\n5. 地理(Geolocation) API\n\n6. 本地离线存储 localStorage 长期存储数据，浏览器关闭后数据不丢失；\n\n7. sessionStorage 的数据在浏览器关闭后自动删除\n\n8. 表单控件，calendar、date、time、email、url、search\n\n9. 新的技术webworker, websocket, Geolocation\n</code></pre><p>移除的元素：</p>\n<pre><code>1. 纯表现的元素：basefont，big，center，font, s，strike，tt，u；\n\n2. 对可用性产生负面影响的元素：frame，frameset，noframes；\n</code></pre><p>支持HTML5新标签：</p>\n<ol>\n<li>IE8/IE7/IE6支持通过 document.createElement 方法产生的标签，可以利用这一特性让这些浏览器支持 Html5 新标签，浏览器支持新标签后，还需要添加标签默认的样式（当然最好的方式是直接使用成熟的框架、使用最多的是html5shim框架）：</li>\n</ol>\n<!--[if lt IE 9]>\n\n<script> src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"</script>\n\n<![endif]-->\n<p>如何区分：</p>\n<p>DOCTYPE声明新增的结构元素、功能元素</p>\n<p>3、本地存储（Local Storage ）和cookies（储存在用户本地终端上的数据）之间的区别是什么？<br>Cookies:服务器和客户端都可以访问；大小只有4KB左右；有有效期，过期后将会删除；</p>\n<p>本地存储：只有本地浏览器端可访问数据，服务器不能访问本地存储直到故意通过POST或者GET的通道发送到服务器；每个域5MB；没有过期数据，它将保留知道用户从浏览器清除或者使用Javascript代码移除</p>\n<p>4、如何实现浏览器内多个标签页之间的通信?<br>调用 localstorge、cookies 等本地存储方式</p>\n<p>5、你如何对网站的文件和资源进行优化？<br>文件合并</p>\n<p>文件最小化/文件压缩</p>\n<p>使用CDN托管</p>\n<p>缓存的使用</p>\n<p>6、什么是响应式设计？<br>它是关于网页制作的过程中让不同的设备有不同的尺寸和不同的功能。响应式设计是让所有的人能在这些设备上让网站运行正常</p>\n<p>7、新的 HTML5 文档类型和字符集是？<br>答：HTML5文档类型：&lt;!doctype html&gt;</p>\n<pre><code>HTML5使用的编码&lt;meta charset=”UTF-8”&gt;\n</code></pre><p>8、HTML5 Canvas 元素有什么用？<br>答：Canvas 元素用于在网页上绘制图形，该元素标签强大之处在于可以直接在 HTML 上进行图形操作。</p>\n<p>9、HTML5 存储类型有什么区别？<br>答：Media API、Text Track API、Application Cache API、User Interaction、Data Transfer API、Command API、Constraint Validation API、History API</p>\n<p>10、用H5+CSS3解决下导航栏最后一项掉下来的问题<br>11、CSS3新增伪类有那些？<br>    p:first-of-type 选择属于其父元素的首个 <p> 元素的每个 <p> 元素。</p>\n<pre><code>p:last-of-type  选择属于其父元素的最后 &lt;p&gt; 元素的每个 &lt;p&gt; 元素。\n\np:only-of-type  选择属于其父元素唯一的 &lt;p&gt; 元素的每个 &lt;p&gt; 元素。\n\np:only-child    选择属于其父元素的唯一子元素的每个 &lt;p&gt; 元素。\n\np:nth-child(2)  选择属于其父元素的第二个子元素的每个 &lt;p&gt; 元素。\n\n:enabled、:disabled 控制表单控件的禁用状态。\n</code></pre><p>:checked，单选框或复选框被选中。</p>\n<p>12、请用CSS实现：一个矩形内容，有投影，有圆角，hover状态慢慢变透明。<br>css属性的熟练程度和实践经验</p>\n<p>13、描述下CSS3里实现元素动画的方法<br>动画相关属性的熟悉程度</p>\n<p>14、html5\\CSS3有哪些新特性、移除了那些元素？如何处理HTML5新标签的浏览器兼容问题？如何区分 HTML 和 HTML5？<br>HTML5 现在已经不是 SGML 的子集，主要是关于图像，位置，存储，地理定位等功能的增加。</p>\n<ul>\n<li><p>绘画 canvas 元素</p>\n<p>用于媒介回放的 video 和 audio 元素</p>\n<p>本地离线存储 localStorage 长期存储数据，浏览器关闭后数据不丢失；</p>\n<p>sessionStorage 的数据在浏览器关闭后自动删除</p>\n<p>语意化更好的内容元素，比如 article、footer、header、nav、section</p>\n<p>表单控件，calendar、date、time、email、url、search</p>\n<p>CSS3实现圆角，阴影，对文字加特效，增加了更多的CSS选择器  多背景 rgba</p>\n<p>新的技术webworker, websockt, Geolocation</p>\n</li>\n</ul>\n<p>移除的元素</p>\n<p>纯表现的元素：basefont，big，center，font, s，strike，tt，u；</p>\n<p>对可用性产生负面影响的元素：frame，frameset，noframes；</p>\n<ul>\n<li><p>是IE8/IE7/IE6支持通过document.createElement方法产生的标签，</p>\n<p>可以利用这一特性让这些浏览器支持HTML5新标签，</p>\n<p>浏览器支持新标签后，还需要添加标签默认的样式：</p>\n</li>\n<li><p>当然最好的方式是直接使用成熟的框架、使用最多的是html5shim框架</p>\n</li>\n</ul>\n<!--[if lt IE 9]>\n\n<script> src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"</script>\n\n<![endif]-->\n<p>15、你怎么来实现页面设计图，你认为前端应该如何高质量完成工作? 一个满屏 品 字布局 如何设计?</p>\n<ul>\n<li><p>首先划分成头部、body、脚部；。。。。。</p>\n</li>\n<li><p>实现效果图是最基本的工作，精确到2px；</p>\n<p>与设计师，产品经理的沟通和项目的参与</p>\n<p>做好的页面结构，页面重构和用户体验</p>\n<p>处理hack，兼容、写出优美的代码格式</p>\n<p>针对服务器的优化、拥抱 HTML5。</p>\n</li>\n</ul>\n<p>16、你能描述一下渐进增强和优雅降级之间的不同吗?<br>渐进增强 progressive enhancement：针对低版本浏览器进行构建页面，保证最基本的功能，然后再针对高级浏览器进行效果、交互等改进和追加功能达到更好的用户体验。</p>\n<p>优雅降级 graceful degradation：一开始就构建完整的功能，然后再针对低版本浏览器进行兼容。</p>\n<p>　　区别：优雅降级是从复杂的现状开始，并试图减少用户体验的供给，而渐进增强则是从一个非常基础的，能够起作用的版本开始，并不断扩充，以适应未来环境的需要。降级（功能衰减）意味着往回看；而渐进增强则意味着朝前看，同时保证其根基处于安全地带。　</p>\n<p>　　“优雅降级”观点</p>\n<p>　　“优雅降级”观点认为应该针对那些最高级、最完善的浏览器来设计网站。而将那些被认为“过时”或有功能缺失的浏览器下的测试工作安排在开发周期的最后阶段，并把测试对象限定为主流浏览器（如 IE、Mozilla 等）的前一个版本。</p>\n<p>　　在这种设计范例下，旧版的浏览器被认为仅能提供“简陋却无妨 (poor, but passable)” 的浏览体验。你可以做一些小的调整来适应某个特定的浏览器。但由于它们并非我们所关注的焦点，因此除了修复较大的错误之外，其它的差异将被直接忽略。</p>\n<p>　　“渐进增强”观点</p>\n<p>　　“渐进增强”观点则认为应关注于内容本身。</p>\n<p>　　内容是我们建立网站的诱因。有的网站展示它，有的则收集它，有的寻求，有的操作，还有的网站甚至会包含以上的种种，但相同点是它们全都涉及到内容。这使得“渐进增强”成为一种更为合理的设计范例。这也是它立即被 Yahoo! 所采纳并用以构建其“分级式浏览器支持 (Graded Browser Support)”策略的原因所在。</p>\n<p>　　那么问题了。现在产品经理看到IE6,7,8网页效果相对高版本现代浏览器少了很多圆角，阴影（CSS3），要求兼容（使用图片背景，放弃CSS3），你会如何说服他？</p>\n<p>17、为什么利用多个域名来存储网站资源会更有效？<br>CDN缓存更方便</p>\n<p>突破浏览器并发限制</p>\n<p>节约cookie带宽</p>\n<p>节约主域名的连接数，优化页面响应速度</p>\n<p>防止不必要的安全问题</p>\n<p>18、请谈一下你对网页标准和标准制定机构重要性的理解。<br>　　（无标准答案）网页标准和标准制定机构都是为了能让web发展的更‘健康’，开发者遵循统一的标准，降低开发难度，开发成本，SEO也会更好做，也不会因为滥用代码导致各种BUG、安全问题，最终提高网站易用性。</p>\n<p>19、请描述一下cookies，sessionStorage和localStorage的区别？　　<br>　　sessionStorage用于本地存储一个会话（session）中的数据，这些数据只有在同一个会话中的页面才能访问并且当会话结束后数据也随之销毁。因此sessionStorage不是一种持久化的本地存储，仅仅是会话级别的存储。而localStorage用于持久化的本地存储，除非主动删除数据，否则数据是永远不会过期的。</p>\n<p>web storage和cookie的区别</p>\n<p>Web Storage的概念和cookie相似，区别是它是为了更大容量存储设计的。Cookie的大小是受限的，并且每次你请求一个新的页面的时候Cookie都会被发送过去，这样无形中浪费了带宽，另外cookie还需要指定作用域，不可以跨域调用。</p>\n<p>除此之外，Web Storage拥有setItem,getItem,removeItem,clear等方法，不像cookie需要前端开发者自己封装setCookie，getCookie。但是Cookie也是不可以或缺的：Cookie的作用是与服务器进行交互，作为HTTP规范的一部分而存在 ，而Web Storage仅仅是为了在本地“存储”数据而生。</p>\n<p>20、知道css有个content属性吗？有什么作用？有什么应用？<br>知道。css的content属性专门应用在 before/after 伪元素上，用来插入生成内容。最常见的应用是利用伪类清除浮动。</p>\n<p>//一种常见利用伪类清除浮动的代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div><div class=\"line\">271</div><div class=\"line\">272</div><div class=\"line\">273</div><div class=\"line\">274</div><div class=\"line\">275</div><div class=\"line\">276</div><div class=\"line\">277</div><div class=\"line\">278</div><div class=\"line\">279</div><div class=\"line\">280</div><div class=\"line\">281</div><div class=\"line\">282</div><div class=\"line\">283</div><div class=\"line\">284</div><div class=\"line\">285</div><div class=\"line\">286</div><div class=\"line\">287</div><div class=\"line\">288</div><div class=\"line\">289</div><div class=\"line\">290</div><div class=\"line\">291</div><div class=\"line\">292</div><div class=\"line\">293</div><div class=\"line\">294</div><div class=\"line\">295</div><div class=\"line\">296</div><div class=\"line\">297</div><div class=\"line\">298</div><div class=\"line\">299</div><div class=\"line\">300</div><div class=\"line\">301</div><div class=\"line\">302</div><div class=\"line\">303</div><div class=\"line\">304</div><div class=\"line\">305</div><div class=\"line\">306</div><div class=\"line\">307</div><div class=\"line\">308</div><div class=\"line\">309</div><div class=\"line\">310</div><div class=\"line\">311</div><div class=\"line\">312</div><div class=\"line\">313</div><div class=\"line\">314</div><div class=\"line\">315</div><div class=\"line\">316</div><div class=\"line\">317</div><div class=\"line\">318</div><div class=\"line\">319</div><div class=\"line\">320</div><div class=\"line\">321</div><div class=\"line\">322</div><div class=\"line\">323</div><div class=\"line\">324</div><div class=\"line\">325</div><div class=\"line\">326</div><div class=\"line\">327</div><div class=\"line\">328</div><div class=\"line\">329</div><div class=\"line\">330</div><div class=\"line\">331</div><div class=\"line\">332</div><div class=\"line\">333</div><div class=\"line\">334</div><div class=\"line\">335</div><div class=\"line\">336</div><div class=\"line\">337</div><div class=\"line\">338</div><div class=\"line\">339</div><div class=\"line\">340</div><div class=\"line\">341</div><div class=\"line\">342</div><div class=\"line\">343</div><div class=\"line\">344</div><div class=\"line\">345</div><div class=\"line\">346</div><div class=\"line\">347</div><div class=\"line\">348</div><div class=\"line\">349</div><div class=\"line\">350</div><div class=\"line\">351</div><div class=\"line\">352</div><div class=\"line\">353</div><div class=\"line\">354</div><div class=\"line\">355</div><div class=\"line\">356</div><div class=\"line\">357</div><div class=\"line\">358</div><div class=\"line\">359</div><div class=\"line\">360</div><div class=\"line\">361</div><div class=\"line\">362</div><div class=\"line\">363</div><div class=\"line\">364</div><div class=\"line\">365</div><div class=\"line\">366</div><div class=\"line\">367</div><div class=\"line\">368</div><div class=\"line\">369</div><div class=\"line\">370</div><div class=\"line\">371</div><div class=\"line\">372</div><div class=\"line\">373</div><div class=\"line\">374</div><div class=\"line\">375</div><div class=\"line\">376</div><div class=\"line\">377</div><div class=\"line\">378</div><div class=\"line\">379</div><div class=\"line\">380</div><div class=\"line\">381</div><div class=\"line\">382</div><div class=\"line\">383</div><div class=\"line\">384</div><div class=\"line\">385</div><div class=\"line\">386</div><div class=\"line\">387</div><div class=\"line\">388</div><div class=\"line\">389</div><div class=\"line\">390</div><div class=\"line\">391</div><div class=\"line\">392</div><div class=\"line\">393</div><div class=\"line\">394</div><div class=\"line\">395</div><div class=\"line\">396</div><div class=\"line\">397</div><div class=\"line\">398</div><div class=\"line\">399</div><div class=\"line\">400</div><div class=\"line\">401</div><div class=\"line\">402</div><div class=\"line\">403</div><div class=\"line\">404</div><div class=\"line\">405</div><div class=\"line\">406</div><div class=\"line\">407</div><div class=\"line\">408</div><div class=\"line\">409</div><div class=\"line\">410</div><div class=\"line\">411</div><div class=\"line\">412</div><div class=\"line\">413</div><div class=\"line\">414</div><div class=\"line\">415</div><div class=\"line\">416</div><div class=\"line\">417</div><div class=\"line\">418</div><div class=\"line\">419</div><div class=\"line\">420</div><div class=\"line\">421</div><div class=\"line\">422</div><div class=\"line\">423</div><div class=\"line\">424</div><div class=\"line\">425</div><div class=\"line\">426</div><div class=\"line\">427</div><div class=\"line\">428</div><div class=\"line\">429</div><div class=\"line\">430</div><div class=\"line\">431</div><div class=\"line\">432</div><div class=\"line\">433</div><div class=\"line\">434</div><div class=\"line\">435</div><div class=\"line\">436</div><div class=\"line\">437</div><div class=\"line\">438</div><div class=\"line\">439</div><div class=\"line\">440</div><div class=\"line\">441</div><div class=\"line\">442</div><div class=\"line\">443</div><div class=\"line\">444</div><div class=\"line\">445</div><div class=\"line\">446</div><div class=\"line\">447</div><div class=\"line\">448</div><div class=\"line\">449</div><div class=\"line\">450</div><div class=\"line\">451</div><div class=\"line\">452</div><div class=\"line\">453</div><div class=\"line\">454</div><div class=\"line\">455</div><div class=\"line\">456</div><div class=\"line\">457</div><div class=\"line\">458</div><div class=\"line\">459</div><div class=\"line\">460</div><div class=\"line\">461</div><div class=\"line\">462</div><div class=\"line\">463</div><div class=\"line\">464</div><div class=\"line\">465</div><div class=\"line\">466</div><div class=\"line\">467</div><div class=\"line\">468</div><div class=\"line\">469</div><div class=\"line\">470</div><div class=\"line\">471</div><div class=\"line\">472</div><div class=\"line\">473</div><div class=\"line\">474</div><div class=\"line\">475</div><div class=\"line\">476</div><div class=\"line\">477</div><div class=\"line\">478</div><div class=\"line\">479</div><div class=\"line\">480</div><div class=\"line\">481</div><div class=\"line\">482</div><div class=\"line\">483</div><div class=\"line\">484</div><div class=\"line\">485</div><div class=\"line\">486</div><div class=\"line\">487</div><div class=\"line\">488</div><div class=\"line\">489</div><div class=\"line\">490</div><div class=\"line\">491</div><div class=\"line\">492</div><div class=\"line\">493</div><div class=\"line\">494</div><div class=\"line\">495</div><div class=\"line\">496</div><div class=\"line\">497</div><div class=\"line\">498</div><div class=\"line\">499</div><div class=\"line\">500</div><div class=\"line\">501</div><div class=\"line\">502</div><div class=\"line\">503</div><div class=\"line\">504</div><div class=\"line\">505</div><div class=\"line\">506</div><div class=\"line\">507</div><div class=\"line\">508</div><div class=\"line\">509</div><div class=\"line\">510</div><div class=\"line\">511</div><div class=\"line\">512</div><div class=\"line\">513</div><div class=\"line\">514</div><div class=\"line\">515</div><div class=\"line\">516</div><div class=\"line\">517</div><div class=\"line\">518</div><div class=\"line\">519</div><div class=\"line\">520</div><div class=\"line\">521</div><div class=\"line\">522</div><div class=\"line\">523</div><div class=\"line\">524</div><div class=\"line\">525</div><div class=\"line\">526</div><div class=\"line\">527</div><div class=\"line\">528</div><div class=\"line\">529</div><div class=\"line\">530</div><div class=\"line\">531</div><div class=\"line\">532</div><div class=\"line\">533</div><div class=\"line\">534</div><div class=\"line\">535</div><div class=\"line\">536</div><div class=\"line\">537</div><div class=\"line\">538</div><div class=\"line\">539</div><div class=\"line\">540</div><div class=\"line\">541</div><div class=\"line\">542</div><div class=\"line\">543</div><div class=\"line\">544</div><div class=\"line\">545</div><div class=\"line\">546</div><div class=\"line\">547</div><div class=\"line\">548</div><div class=\"line\">549</div><div class=\"line\">550</div><div class=\"line\">551</div><div class=\"line\">552</div><div class=\"line\">553</div><div class=\"line\">554</div><div class=\"line\">555</div><div class=\"line\">556</div><div class=\"line\">557</div><div class=\"line\">558</div><div class=\"line\">559</div><div class=\"line\">560</div><div class=\"line\">561</div><div class=\"line\">562</div><div class=\"line\">563</div><div class=\"line\">564</div><div class=\"line\">565</div><div class=\"line\">566</div><div class=\"line\">567</div><div class=\"line\">568</div><div class=\"line\">569</div><div class=\"line\">570</div><div class=\"line\">571</div><div class=\"line\">572</div><div class=\"line\">573</div><div class=\"line\">574</div><div class=\"line\">575</div><div class=\"line\">576</div><div class=\"line\">577</div><div class=\"line\">578</div><div class=\"line\">579</div><div class=\"line\">580</div><div class=\"line\">581</div><div class=\"line\">582</div><div class=\"line\">583</div><div class=\"line\">584</div><div class=\"line\">585</div><div class=\"line\">586</div><div class=\"line\">587</div><div class=\"line\">588</div><div class=\"line\">589</div><div class=\"line\">590</div></pre></td><td class=\"code\"><pre><div class=\"line\">.clearfix:after &#123;</div><div class=\"line\"></div><div class=\"line\">    content:&quot;.&quot;; //这里利用到了content属性</div><div class=\"line\"></div><div class=\"line\">    display:block;</div><div class=\"line\"></div><div class=\"line\">    height:0;</div><div class=\"line\"></div><div class=\"line\">    visibility:hidden;</div><div class=\"line\"></div><div class=\"line\">    clear:both; &#125;</div><div class=\"line\"></div><div class=\"line\">.clearfix &#123;</div><div class=\"line\"></div><div class=\"line\">    *zoom:1;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\">``</div><div class=\"line\">after伪元素通过 content 在元素的后面生成了内容为一个点的块级素，再利用clear:both清除浮动。</div><div class=\"line\"></div><div class=\"line\">　　那么问题继续还有，知道css计数器（序列数字字符自动递增）吗？如何通过css content属性实现css计数器？</div><div class=\"line\"></div><div class=\"line\">答案：css计数器是通过设置counter-reset 、counter-increment 两个属性 、及 counter()/counters()一个方法配合after / before 伪类实现。</div><div class=\"line\"></div><div class=\"line\">21、如何在 HTML5 页面中嵌入音频?</div><div class=\"line\">HTML 5 包含嵌入音频文件的标准方式，支持的格式包括 MP3、Wav 和 Ogg：</div><div class=\"line\"></div><div class=\"line\">&lt;audio controls&gt;</div><div class=\"line\"></div><div class=\"line\">  &lt;source src=&quot;jamshed.mp3&quot; type=&quot;audio/mpeg&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">   Your browser does&apos;nt support audio embedding feature.</div><div class=\"line\"></div><div class=\"line\">&lt;/audio&gt;</div><div class=\"line\"></div><div class=\"line\">22、如何在 HTML5 页面中嵌入视频？</div><div class=\"line\">和音频一样，HTML5 定义了嵌入视频的标准方法，支持的格式包括：MP4、WebM 和 Ogg：</div><div class=\"line\"></div><div class=\"line\">&lt;video width=&quot;450&quot; height=&quot;340&quot; controls&gt;</div><div class=\"line\"></div><div class=\"line\">  &lt;source src=&quot;jamshed.mp4&quot; type=&quot;video/mp4&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">   Your browser does&apos;nt support video embedding feature.</div><div class=\"line\"></div><div class=\"line\">&lt;/video&gt;</div><div class=\"line\"></div><div class=\"line\">23、HTML5 引入什么新的表单属性？</div><div class=\"line\">Datalist   datetime   output   keygen  date  month  week  time  number   range   emailurl</div><div class=\"line\"></div><div class=\"line\">24、CSS3新增伪类有那些？</div><div class=\"line\"> p:first-of-type 选择属于其父元素的首个 &lt;p&gt; 元素的每个 &lt;p&gt; 元素。</div><div class=\"line\"></div><div class=\"line\">    p:last-of-type  选择属于其父元素的最后 &lt;p&gt; 元素的每个 &lt;p&gt; 元素。</div><div class=\"line\"></div><div class=\"line\">    p:only-of-type  选择属于其父元素唯一的 &lt;p&gt; 元素的每个 &lt;p&gt; 元素。</div><div class=\"line\"></div><div class=\"line\">    p:only-child    选择属于其父元素的唯一子元素的每个 &lt;p&gt; 元素。</div><div class=\"line\"></div><div class=\"line\">    p:nth-child(2)  选择属于其父元素的第二个子元素的每个 &lt;p&gt; 元素。</div><div class=\"line\"></div><div class=\"line\">    :enabled、:disabled 控制表单控件的禁用状态。</div><div class=\"line\"></div><div class=\"line\">:checked，单选框或复选框被选中。</div><div class=\"line\"></div><div class=\"line\">25、(写)描述一段语义的html代码吧。</div><div class=\"line\">（HTML5中新增加的很多标签（如：&lt;article&gt;、&lt;nav&gt;、&lt;header&gt;和&lt;footer&gt;等）</div><div class=\"line\"></div><div class=\"line\">就是基于语义化设计原则）</div><div class=\"line\"></div><div class=\"line\">&lt; div id=&quot;header&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">&lt; h1&gt;标题&lt; /h1&gt;</div><div class=\"line\"></div><div class=\"line\">&lt; h2&gt;专注Web前端技术&lt; /h2&gt;</div><div class=\"line\"></div><div class=\"line\">&lt; /div&gt;</div><div class=\"line\"></div><div class=\"line\">语义 HTML 具有以下特性：</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">文字包裹在元素中，用以反映内容。例如：</div><div class=\"line\"></div><div class=\"line\">段落包含在 &lt;p&gt; 元素中。</div><div class=\"line\"></div><div class=\"line\">顺序表包含在&lt;ol&gt;元素中。</div><div class=\"line\"></div><div class=\"line\">从其他来源引用的大型文字块包含在&lt;blockquote&gt;元素中。</div><div class=\"line\"></div><div class=\"line\">HTML 元素不能用作语义用途以外的其他目的。例如：</div><div class=\"line\"></div><div class=\"line\">&lt;h1&gt;包含标题，但并非用于放大文本。</div><div class=\"line\"></div><div class=\"line\">&lt;blockquote&gt;包含大段引述，但并非用于文本缩进。</div><div class=\"line\"></div><div class=\"line\">空白段落元素 ( &lt;p&gt;&lt;/p&gt; ) 并非用于跳行。</div><div class=\"line\"></div><div class=\"line\">文本并不直接包含任何样式信息。例如：</div><div class=\"line\"></div><div class=\"line\">不使用 &lt;font&gt; 或 &lt;center&gt; 等格式标记。</div><div class=\"line\"></div><div class=\"line\">类或 ID 中不引用颜色或位置。</div><div class=\"line\"></div><div class=\"line\">26.cookie在浏览器和服务器间来回传递。 sessionStorage和localStorage区别</div><div class=\"line\">sessionStorage和localStorage的存储空间更大；</div><div class=\"line\"></div><div class=\"line\">sessionStorage和localStorage有更多丰富易用的接口；</div><div class=\"line\"></div><div class=\"line\">sessionStorage和localStorage各自独立的存储空间；</div><div class=\"line\"></div><div class=\"line\">27、html5有哪些新特性、移除了那些元素？如何处理HTML5新标签的浏览器兼容问题？如何区分 HTML 和 HTML5？</div><div class=\"line\">* HTML5 现在已经不是 SGML 的子集，主要是关于图像，位置，存储，多任务等功能的增加。</div><div class=\"line\"></div><div class=\"line\">* 绘画 canvas</div><div class=\"line\"></div><div class=\"line\">  用于媒介回放的 video 和 audio 元素</div><div class=\"line\"></div><div class=\"line\">  本地离线存储 localStorage 长期存储数据，浏览器关闭后数据不丢失；</div><div class=\"line\"></div><div class=\"line\">  sessionStorage 的数据在浏览器关闭后自动删除</div><div class=\"line\"></div><div class=\"line\">  语意化更好的内容元素，比如 article、footer、header、nav、section</div><div class=\"line\"></div><div class=\"line\">  表单控件，calendar、date、time、email、url、search</div><div class=\"line\"></div><div class=\"line\">  新的技术webworker, websockt, Geolocation</div><div class=\"line\"></div><div class=\"line\">* 移除的元素</div><div class=\"line\"></div><div class=\"line\">纯表现的元素：basefont，big，center，font, s，strike，tt，u；</div><div class=\"line\"></div><div class=\"line\">对可用性产生负面影响的元素：frame，frameset，noframes；</div><div class=\"line\"></div><div class=\"line\">支持HTML5新标签：</div><div class=\"line\"></div><div class=\"line\">* IE8/IE7/IE6支持通过document.createElement方法产生的标签，</div><div class=\"line\"></div><div class=\"line\">  可以利用这一特性让这些浏览器支持HTML5新标签，</div><div class=\"line\"></div><div class=\"line\">  浏览器支持新标签后，还需要添加标签默认的样式：</div><div class=\"line\"></div><div class=\"line\">* 当然最好的方式是直接使用成熟的框架、使用最多的是html5shim框架</div><div class=\"line\"></div><div class=\"line\">&lt;!--[if lt IE 9]&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;script&gt; src=&quot;http://html5shim.googlecode.com/svn/trunk/html5.js&quot;&lt;/script&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;![endif]--&gt;</div><div class=\"line\"></div><div class=\"line\">28、如何区分： DOCTYPE声明\\新增的结构元素\\功能元素</div><div class=\"line\">29、语义化的理解？</div><div class=\"line\">用正确的标签做正确的事情！</div><div class=\"line\"></div><div class=\"line\">html语义化就是让页面的内容结构化，便于对浏览器、搜索引擎解析；</div><div class=\"line\"></div><div class=\"line\">在没有样式CCS情况下也以一种文档格式显示，并且是容易阅读的。</div><div class=\"line\"></div><div class=\"line\">搜索引擎的爬虫依赖于标记来确定上下文和各个关键字的权重，利于 SEO。</div><div class=\"line\"></div><div class=\"line\">使阅读源代码的人对网站更容易将网站分块，便于阅读维护理解。</div><div class=\"line\"></div><div class=\"line\">30、HTML5的离线储存？</div><div class=\"line\">localStorage    长期存储数据，浏览器关闭后数据不丢失；</div><div class=\"line\"></div><div class=\"line\">sessionStorage  数据在浏览器关闭后自动删除。</div><div class=\"line\"></div><div class=\"line\">31、写出HTML5的文档声明方式</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"> &lt;DOCYPE html&gt;</div><div class=\"line\"></div><div class=\"line\">32、HTML5和CSS3的新标签     </div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">HTML5： nav, footer, header, section, hgroup, video, time, canvas, audio...</div><div class=\"line\"></div><div class=\"line\">CSS3: RGBA, opacity, text-shadow, box-shadow, border-radius, border-image,</div><div class=\"line\"></div><div class=\"line\">border-color, transform...;</div><div class=\"line\"></div><div class=\"line\">33、自己对标签语义化的理解</div><div class=\"line\">    在我看来，语义化就是比如说一个段落， 那么我们就应该用 &lt;p&gt;标签来修饰，标题就应该用 &lt;h?&gt;标签等。符合文档语义的标签。</div><div class=\"line\"></div><div class=\"line\">五、移动web开发</div><div class=\"line\">1、移动端常用类库及优缺点</div><div class=\"line\">知识面宽度，多多益善</div><div class=\"line\"></div><div class=\"line\">2、Zepto库和JQ区别</div><div class=\"line\">Zepto相对jQuery更加轻量，主要用在移动端，jQuery也有对应的jQuerymobile移动端框架</div><div class=\"line\"></div><div class=\"line\">六、Ajax</div><div class=\"line\">1、Ajax 是什么? 如何创建一个Ajax？</div><div class=\"line\">Ajax并不算是一种新的技术，全称是asychronous javascript and xml，可以说是已有技术的组合，主要用来实现客户端与服务器端的异步通信效果，实现页面的局部刷新，早期的浏览器并不能原生支持ajax，可以使用隐藏帧（iframe）方式变相实现异步效果，后来的浏览器提供了对ajax的原生支持</div><div class=\"line\"></div><div class=\"line\">使用ajax原生方式发送请求主要通过XMLHttpRequest(标准浏览器)、ActiveXObject(IE浏览器)对象实现异步通信效果</div><div class=\"line\"></div><div class=\"line\">基本步骤：</div><div class=\"line\"></div><div class=\"line\">var xhr =null;//创建对象</div><div class=\"line\"></div><div class=\"line\">if(window.XMLHttpRequest)&#123;</div><div class=\"line\"></div><div class=\"line\">   xhr = new XMLHttpRequest();</div><div class=\"line\"></div><div class=\"line\">&#125;else&#123;</div><div class=\"line\"></div><div class=\"line\">   xhr = new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;);</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">     xhr.open(“方式”,”地址”,”标志位”);//初始化请求</div><div class=\"line\"></div><div class=\"line\">     xhr.setRequestHeader(“”,””);//设置http头信息</div><div class=\"line\"></div><div class=\"line\">     xhr.onreadystatechange =function()&#123;&#125;//指定回调函数</div><div class=\"line\"></div><div class=\"line\">     xhr.send();//发送请求</div><div class=\"line\"></div><div class=\"line\">js框架（jQuery/EXTJS等）提供的ajax  API对原生的ajax进行了封装，熟悉了基础理论，再学习别的框架就会得心应手，好多都是换汤不换药的内容</div><div class=\"line\"></div><div class=\"line\">2、同步和异步的区别?</div><div class=\"line\">同步：阻塞的</div><div class=\"line\"></div><div class=\"line\">-张三叫李四去吃饭，李四一直忙得不停，张三一直等着，直到李四忙完两个人一块去吃饭</div><div class=\"line\"></div><div class=\"line\">=浏览器向服务器请求数据，服务器比较忙，浏览器一直等着（页面白屏），直到服务器返回数据，浏览器才能显示页面</div><div class=\"line\"></div><div class=\"line\">异步：非阻塞的</div><div class=\"line\"></div><div class=\"line\">-张三叫李四去吃饭，李四在忙，张三说了一声然后自己就去吃饭了，李四忙完后自己去吃</div><div class=\"line\"></div><div class=\"line\">=浏览器向服务器请求数据，服务器比较忙，浏览器可以自如的干原来的事情（显示页面），服务器返回数据的时候通知浏览器一声，浏览器把返回的数据再渲染到页面，局部更新</div><div class=\"line\"></div><div class=\"line\">3、如何解决跨域问题?</div><div class=\"line\">理解跨域的概念：协议、域名、端口都相同才同域，否则都是跨域</div><div class=\"line\"></div><div class=\"line\">出于安全考虑，服务器不允许ajax跨域获取数据，但是可以跨域获取文件内容，所以基于这一点，可以动态创建script标签，使用标签的src属性访问js文件的形式获取js脚本，并且这个js脚本中的内容是函数调用，该函数调用的参数是服务器返回的数据，为了获取这里的参数数据，需要事先在页面中定义回调函数，在回调函数中处理服务器返回的数据，这就是解决跨域问题的主流解决方案</div><div class=\"line\"></div><div class=\"line\">4、页面编码和被请求的资源编码如果不一致如何处理？</div><div class=\"line\">对于ajax请求传递的参数，如果是get请求方式，参数如果传递中文，在有些浏览器会乱码，不同的浏览器对参数编码的处理方式不同，所以对于get请求的参数需要使用 encodeURIComponent函数对参数进行编码处理，后台开发语言都有相应的解码api。对于post请求不需要进行编码</div><div class=\"line\"></div><div class=\"line\">5、简述ajax 的过程。</div><div class=\"line\">1. 创建XMLHttpRequest对象,也就是创建一个异步调用对象</div><div class=\"line\"></div><div class=\"line\">2. 创建一个新的HTTP请求,并指定该HTTP请求的方法、URL及验证信息</div><div class=\"line\"></div><div class=\"line\">3. 设置响应HTTP请求状态变化的函数</div><div class=\"line\"></div><div class=\"line\">4. 发送HTTP请求</div><div class=\"line\"></div><div class=\"line\">5. 获取异步调用返回的数据</div><div class=\"line\"></div><div class=\"line\">6. 使用JavaScript和DOM实现局部刷新</div><div class=\"line\"></div><div class=\"line\">6、阐述一下异步加载。</div><div class=\"line\">1. 异步加载的方案： 动态插入 script 标签</div><div class=\"line\"></div><div class=\"line\">2. 通过 ajax 去获取 js 代码，然后通过 eval 执行</div><div class=\"line\"></div><div class=\"line\">3. script 标签上添加 defer 或者 async 属性</div><div class=\"line\"></div><div class=\"line\">4. 创建并插入 iframe，让它异步执行 js</div><div class=\"line\"></div><div class=\"line\">7、请解释一下 JavaScript 的同源策略。</div><div class=\"line\">同源策略是客户端脚本（尤其是Javascript）的重要的安全度量标准。它最早出自Netscape Navigator2.0，其目的是防止某个文档或脚本从多个不同源装载。所谓同源指的是：协议，域名，端口相同，同源策略是一种安全协议，指一段脚本只能读取来自同一来源的窗口和文档的属性。</div><div class=\"line\"></div><div class=\"line\">8、GET和POST的区别，何时使用POST？</div><div class=\"line\">GET：一般用于信息获取，使用URL传递参数，对所发送信息的数量也有限制，一般在2000个字符，有的浏览器是8000个字符</div><div class=\"line\"></div><div class=\"line\">POST：一般用于修改服务器上的资源，对所发送的信息没有限制</div><div class=\"line\"></div><div class=\"line\">在以下情况中，请使用 POST 请求：</div><div class=\"line\"></div><div class=\"line\">1. 无法使用缓存文件（更新服务器上的文件或数据库）</div><div class=\"line\"></div><div class=\"line\">2. 向服务器发送大量数据（POST 没有数据量限制）</div><div class=\"line\"></div><div class=\"line\">3. 发送包含未知字符的用户输入时，POST 比 GET 更稳定也更可靠</div><div class=\"line\"></div><div class=\"line\">9、ajax 是什么?ajax 的交互模型?同步和异步的区别?如何解决跨域问题?</div><div class=\"line\"> 1. 通过异步模式，提升了用户体验</div><div class=\"line\"></div><div class=\"line\"> 2. 优化了浏览器和服务器之间的传输，减少不必要的数据往返，减少了带宽占用</div><div class=\"line\"></div><div class=\"line\">3.  Ajax在客户端运行，承担了一部分本来由服务器承担的工作，减少了大用户量下的服务器负载。</div><div class=\"line\"></div><div class=\"line\">10、 Ajax的最大的特点是什么。</div><div class=\"line\">    Ajax可以实现异步通信效果，实现页面局部刷新，带来更好的用户体验；按需获取数据，节约带宽资源；</div><div class=\"line\"></div><div class=\"line\">11、ajax的缺点</div><div class=\"line\"> 1、ajax不支持浏览器back按钮。</div><div class=\"line\"></div><div class=\"line\"> 2、安全问题 AJAX暴露了与服务器交互的细节。</div><div class=\"line\"></div><div class=\"line\"> 3、对搜索引擎的支持比较弱。</div><div class=\"line\"></div><div class=\"line\"> 4、破坏了程序的异常机制。</div><div class=\"line\"></div><div class=\"line\">12、ajax请求的时候get 和post方式的区别</div><div class=\"line\">get一般用来进行查询操作，url地址有长度限制，请求的参数都暴露在url地址当中，如果传递中文参数，需要自己进行编码操作，安全性较低。</div><div class=\"line\"></div><div class=\"line\">post请求方式主要用来提交数据，没有数据长度的限制，提交的数据内容存在于http请求体中，数据不会暴漏在url地址中。</div><div class=\"line\"></div><div class=\"line\">13、解释jsonp的原理，以及为什么不是真正的ajax</div><div class=\"line\">　　Jsonp并不是一种数据格式，而json是一种数据格式，jsonp是用来解决跨域获取数据的一种解决方案，具体是通过动态创建script标签，然后通过标签的src属性获取js文件中的js脚本，该脚本的内容是一个函数调用，参数就是服务器返回的数据，为了处理这些返回的数据，需要事先在页面定义好回调函数，本质上使用的并不是ajax技术</div><div class=\"line\"></div><div class=\"line\">14、什么是Ajax和JSON，它们的优缺点。</div><div class=\"line\">Ajax是全称是asynchronous JavaScript andXML，即异步JavaScript和xml，用于在Web页面中实现异步数据交互，实现页面局部刷新。</div><div class=\"line\"></div><div class=\"line\">优点：可以使得页面不重载全部内容的情况下加载局部内容，降低数据传输量，避免用户不断刷新或者跳转页面，提高用户体验</div><div class=\"line\"></div><div class=\"line\">缺点：对搜索引擎不友好；要实现ajax下的前后退功能成本较大；可能造成请求数的增加跨域问题限制；</div><div class=\"line\"></div><div class=\"line\">JSON是一种轻量级的数据交换格式，ECMA的一个子集</div><div class=\"line\"></div><div class=\"line\">优点：轻量级、易于人的阅读和编写，便于机器（JavaScript）解析，支持复合数据类型（数组、对象、字符串、数字）</div><div class=\"line\"></div><div class=\"line\">15、http常见的状态码有那些？分别代表是什么意思？</div><div class=\"line\">200 - 请求成功</div><div class=\"line\"></div><div class=\"line\">301 - 资源（网页等）被永久转移到其它URL</div><div class=\"line\"></div><div class=\"line\">404 - 请求的资源（网页等）不存在</div><div class=\"line\"></div><div class=\"line\">500 - 内部服务器错误</div><div class=\"line\"></div><div class=\"line\">16、一个页面从输入 URL 到页面加载显示完成，这个过程中都发生了什么？</div><div class=\"line\">分为4个步骤：</div><div class=\"line\"></div><div class=\"line\">1. 当发送一个 URL 请求时，不管这个 URL 是 Web 页面的 URL 还是 Web 页面上每个资源的 URL，浏览器都会开启一个线程来处理这个请求，同时在远程 DNS 服务器上启动一个 DNS 查询。这能使浏览器获得请求对应的 IP 地址。</div><div class=\"line\"></div><div class=\"line\">2. 浏览器与远程 Web 服务器通过 TCP 三次握手协商来建立一个 TCP/IP 连接。该握手包括一个同步报文，一个同步-应答报文和一个应答报文，这三个报文在 浏览器和服务器之间传递。该握手首先由客户端尝试建立起通信，而后服务器应答并接受客户端的请求，最后由客户端发出该请求已经被接受的报文。</div><div class=\"line\"></div><div class=\"line\">3. 一旦 TCP/IP 连接建立，浏览器会通过该连接向远程服务器发送 HTTP 的 GET 请求。远程服务器找到资源并使用 HTTP 响应返回该资源，值为 200 的 HTTP 响应状态表示一个正确的响应。</div><div class=\"line\"></div><div class=\"line\">4. 此时，Web 服务器提供资源服务，客户端开始下载资源。</div><div class=\"line\"></div><div class=\"line\">17、ajax请求的时候get 和post方式的区别</div><div class=\"line\">get一般用来进行查询操作，url地址有长度限制，请求的参数都暴露在url地址当中，如果传递中文参数，需要自己进行编码操作，安全性较低。</div><div class=\"line\"></div><div class=\"line\">post请求方式主要用来提交数据，没有数据长度的限制，提交的数据内容存在于http请求体中，数据不会暴漏在url地址中。</div><div class=\"line\"></div><div class=\"line\">18、ajax请求时，如何解释json数据</div><div class=\"line\">使用eval()或者JSON.parse() 鉴于安全性考虑，推荐使用JSON.parse()更靠谱，对数据的安全性更好。</div><div class=\"line\"></div><div class=\"line\">19、.javascript的本地对象，内置对象和宿主对象</div><div class=\"line\">本地对象为独立于宿主环境的ECMAScript提供的对象，包括ArrayObjectRegExp等可以new实例化的对象</div><div class=\"line\"></div><div class=\"line\">内置对象为Gload，Math 等不可以实例化的(他们也是本地对象，内置对象是本地对象的一个子集)</div><div class=\"line\"></div><div class=\"line\">宿主对象为所有的非本地对象，所有的BOM和DOM对象都是宿主对象，如浏览器自带的document,window 等对象</div><div class=\"line\"></div><div class=\"line\">20、为什么利用多个域名来存储网站资源会更有效？</div><div class=\"line\">确保用户在不同地区能用最快的速度打开网站，其中某个域名崩溃用户也能通过其他郁闷访问网站，并且不同的资源放到不同的服务器上有利于减轻单台服务器的压力。</div><div class=\"line\"></div><div class=\"line\">21、请说出三种减低页面加载时间的方法</div><div class=\"line\">1、压缩css、js文件</div><div class=\"line\">2、合并js、css文件，减少http请求</div><div class=\"line\">3、外部js、css文件放在最底下</div><div class=\"line\">4、减少dom操作，尽可能用变量替代不必要的dom操作</div><div class=\"line\"></div><div class=\"line\">22、HTTP状态码都有那些。</div><div class=\"line\">200 OK      //客户端请求成功</div><div class=\"line\"></div><div class=\"line\">400 Bad Request  //客户端请求有语法错误，不能被服务器所理解</div><div class=\"line\"></div><div class=\"line\">403 Forbidden  //服务器收到请求，但是拒绝提供服务</div><div class=\"line\"></div><div class=\"line\">404 Not Found  //请求资源不存在，输入了错误的URL</div><div class=\"line\"></div><div class=\"line\">500 Internal Server Error //服务器发生不可预期的错误</div><div class=\"line\"></div><div class=\"line\">503 Server Unavailable  //服务器当前不能处理客户端的请求，一段时间后可能恢复正常</div><div class=\"line\"></div><div class=\"line\">七、JS高级</div><div class=\"line\">1、JQuery一个对象可以同时绑定多个事件，这是如何实现的？</div><div class=\"line\">jQuery可以给一个对象同时绑定多个事件，低层实现方式是使用addEventListner或attachEvent兼容不同的浏览器实现事件的绑定，这样可以给同一个对象注册多个事件。</div><div class=\"line\"></div><div class=\"line\">2、知道什么是webkit么? 知道怎么用浏览器的各种工具来调试和debug代码么?</div><div class=\"line\">Webkit是浏览器引擎，包括html渲染和js解析功能，手机浏览器的主流内核，与之相对应的引擎有Gecko（Mozilla Firefox 等使用）和Trident（也称MSHTML，IE 使用）。</div><div class=\"line\"></div><div class=\"line\">对于浏览器的调试工具要熟练使用，主要是页面结构分析，后台请求信息查看，js调试工具使用，熟练使用这些工具可以快速提高解决问题的效率</div><div class=\"line\"></div><div class=\"line\">3、如何测试前端代码? 知道BDD, TDD, Unit Test么? 知道怎么测试你的前端工程么(mocha, sinon, jasmin, qUnit..)?</div><div class=\"line\">了解BDD行为驱动开发与TDD测试驱动开发已经单元测试相关概念，</div><div class=\"line\"></div><div class=\"line\">4、 前端templating(Mustache, underscore, handlebars)是干嘛的, 怎么用?</div><div class=\"line\"></div><div class=\"line\">Web 模板引擎是为了使用户界面与业务数据（内容）分离而产生的，</div><div class=\"line\"></div><div class=\"line\">Mustache 是一个 logic-less （轻逻辑）模板解析引擎，它的优势在于可以应用在 Javascript、PHP、Python、Perl 等多种编程语言中。</div><div class=\"line\"></div><div class=\"line\">Underscore封装了常用的JavaScript对象操作方法，用于提高开发效率。</div><div class=\"line\"></div><div class=\"line\">Handlebars 是 JavaScript 一个语义模板库，通过对view和data的分离来快速构建Web模板。</div><div class=\"line\"></div><div class=\"line\">5、简述一下 Handlebars 的基本用法？</div><div class=\"line\">没有用过的话说出它是干什么的即可</div><div class=\"line\"></div><div class=\"line\">6、简述一下 Handlerbars 的对模板的基本处理流程， 如何编译的？如何缓存的？</div><div class=\"line\">学习技术不仅要会用，还有熟悉它的实现机制，这样在开发中遇到问题时才能更好的解决</div><div class=\"line\"></div><div class=\"line\">7、用js实现千位分隔符?</div><div class=\"line\">原生js的熟练度，实践经验，实现思路</div><div class=\"line\"></div><div class=\"line\">8、检测浏览器版本版本有哪些方式？</div><div class=\"line\">IE与标准浏览器判断，IE不同版本的判断，userAgent  var ie = /*@cc_on !@*/false;</div><div class=\"line\"></div><div class=\"line\">9、我们给一个dom同时绑定两个点击事件，一个用捕获，一个用冒泡，你来说下会执行几次事件，然后会先执行冒泡还是捕获</div><div class=\"line\">对两种事件模型的理解</div><div class=\"line\"></div><div class=\"line\">10、实现一个函数clone，可以对JavaScript中的5种主要的数据类型（包括Number、String、Object、Array、Boolean）进行值复制</div><div class=\"line\">考察点1：对于基本数据类型和引用数据类型在内存中存放的是值还是指针这一区别是否清楚</div><div class=\"line\">考察点2：是否知道如何判断一个变量是什么类型的</div><div class=\"line\">考察点3：递归算法的设计</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">// 方法一：</div><div class=\"line\"></div><div class=\"line\">Object.prototype.clone = function()&#123;</div><div class=\"line\"></div><div class=\"line\">   var o = this.constructor === Array ? [] : &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">   for(var e in this)&#123;</div><div class=\"line\"></div><div class=\"line\">    o[e] = typeof this[e] === &quot;object&quot; ? this[e].clone() : this[e];</div><div class=\"line\"></div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   return o;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//方法二：</div><div class=\"line\"></div><div class=\"line\">  /**</div><div class=\"line\"></div><div class=\"line\">     * 克隆一个对象</div><div class=\"line\"></div><div class=\"line\">     * @param Obj</div><div class=\"line\"></div><div class=\"line\">     * @returns</div><div class=\"line\"></div><div class=\"line\">     */</div><div class=\"line\"></div><div class=\"line\">    function clone(Obj) &#123;  </div><div class=\"line\"></div><div class=\"line\">        var buf;  </div><div class=\"line\"></div><div class=\"line\">        if (Obj instanceof Array) &#123;  </div><div class=\"line\"></div><div class=\"line\">            buf = [];//创建一个空的数组</div><div class=\"line\"></div><div class=\"line\">            var i = Obj.length;  </div><div class=\"line\"></div><div class=\"line\">            while (i--) &#123;  </div><div class=\"line\"></div><div class=\"line\">                buf[i] = clone(Obj[i]);  </div><div class=\"line\"></div><div class=\"line\">            &#125;  </div><div class=\"line\"></div><div class=\"line\">            return buf;   </div><div class=\"line\"></div><div class=\"line\">        &#125;else if (Obj instanceof Object)&#123;  </div><div class=\"line\"></div><div class=\"line\">            buf = &#123;&#125;;//创建一个空对象</div><div class=\"line\"></div><div class=\"line\">            for (var k in Obj) &#123; //为这个对象添加新的属性</div><div class=\"line\"></div><div class=\"line\">                buf[k] = clone(Obj[k]);  </div><div class=\"line\"></div><div class=\"line\">            &#125;  </div><div class=\"line\"></div><div class=\"line\">            return buf;  </div><div class=\"line\"></div><div class=\"line\">        &#125;else&#123; //普通变量直接赋值</div><div class=\"line\"></div><div class=\"line\">            return Obj;  </div><div class=\"line\"></div><div class=\"line\">        &#125;  </div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">11、如何消除一个数组里面重复的元素？</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">var arr=[1,2,3,3,4,4,5,5,6,1,9,3,25,4];</div><div class=\"line\"></div><div class=\"line\">        function deRepeat()&#123;</div><div class=\"line\"></div><div class=\"line\">            var newArr=[];</div><div class=\"line\"></div><div class=\"line\">            var obj=&#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">            var index=0;</div><div class=\"line\"></div><div class=\"line\">            var l=arr.length;</div><div class=\"line\"></div><div class=\"line\">            for(var i=0;i&lt;l;i++)&#123;</div><div class=\"line\"></div><div class=\"line\">                if(obj[arr[i]]==undefined)</div><div class=\"line\"></div><div class=\"line\">                  &#123;</div><div class=\"line\"></div><div class=\"line\">                    obj[arr[i]]=1;</div><div class=\"line\"></div><div class=\"line\">                    newArr[index++]=arr[i];</div><div class=\"line\"></div><div class=\"line\">                  &#125;</div><div class=\"line\"></div><div class=\"line\">                else if(obj[arr[i]]==1)</div><div class=\"line\"></div><div class=\"line\">                  continue;</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            return newArr;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        var newArr2=deRepeat(arr);</div><div class=\"line\"></div><div class=\"line\">        alert(newArr2); //输出1,2,3,4,5,6,9,25</div><div class=\"line\"></div><div class=\"line\">12、小贤是一条可爱的小狗(Dog)，它的叫声很好听(wow)，每次看到主人的时候就会乖乖叫一声(yelp)。从这段描述可以得到以下对象：</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">function Dog() &#123;</div><div class=\"line\"></div><div class=\"line\">      this.wow = function() &#123;</div><div class=\"line\"></div><div class=\"line\">               alert(’Wow’);</div><div class=\"line\"></div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      this.yelp = function() &#123;</div><div class=\"line\"></div><div class=\"line\">              this.wow();</div><div class=\"line\"></div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">小芒和小贤一样，原来也是一条可爱的小狗，可是突然有一天疯了(MadDog)，一看到人就会每隔半秒叫一声(wow)地不停叫唤(yelp)。请根据描述，按示例的形式用代码来实。（继承，原型，setInterval）</div></pre></td></tr></table></figure></p>\n<p>function MadDog() {</p>\n<pre><code>this.yelp = function() {\n\n      var self = this;         \n\n      setInterval(function() {\n\n            self.wow();     \n\n      }, 500);\n\n  }\n</code></pre><p>}</p>\n<p>MadDog.prototype = new Dog();        </p>\n<p>//for test</p>\n<p>var dog = new Dog();</p>\n<p>dog.yelp();</p>\n<p>var madDog = new MadDog();</p>\n<p>madDog.yelp();<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">13、下面这个ul，如何点击每一列的时候alert其index?（闭包）</div><div class=\"line\"></div><div class=\"line\">&lt;ul id=”test”&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;li&gt;这是第一条&lt;/li&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;li&gt;这是第二条&lt;/li&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;li&gt;这是第三条&lt;/li&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/ul&gt;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">// 方法一：</div></pre></td></tr></table></figure></p>\n<p>var lis=document.getElementById(‘2223’).getElementsByTagName(‘li’);</p>\n<p>for(var i=0;i&lt;3;i++)</p>\n<p>{</p>\n<pre><code>lis[i].index=i;\n\nlis[i].onclick=function(){\n\n    alert(this.index);\n\n};\n</code></pre><p>}<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div><div class=\"line\">271</div><div class=\"line\">272</div><div class=\"line\">273</div><div class=\"line\">274</div><div class=\"line\">275</div><div class=\"line\">276</div><div class=\"line\">277</div><div class=\"line\">278</div><div class=\"line\">279</div><div class=\"line\">280</div><div class=\"line\">281</div><div class=\"line\">282</div><div class=\"line\">283</div><div class=\"line\">284</div><div class=\"line\">285</div><div class=\"line\">286</div><div class=\"line\">287</div><div class=\"line\">288</div><div class=\"line\">289</div><div class=\"line\">290</div><div class=\"line\">291</div><div class=\"line\">292</div><div class=\"line\">293</div><div class=\"line\">294</div><div class=\"line\">295</div><div class=\"line\">296</div><div class=\"line\">297</div><div class=\"line\">298</div><div class=\"line\">299</div><div class=\"line\">300</div><div class=\"line\">301</div><div class=\"line\">302</div><div class=\"line\">303</div><div class=\"line\">304</div><div class=\"line\">305</div></pre></td><td class=\"code\"><pre><div class=\"line\">//方法二：</div><div class=\"line\"></div><div class=\"line\">var lis=document.getElementById(&apos;2223&apos;).getElementsByTagName(&apos;li&apos;);</div><div class=\"line\"></div><div class=\"line\">for(var i=0;i&lt;3;i++)&#123;</div><div class=\"line\"></div><div class=\"line\">    lis[i].index=i;</div><div class=\"line\"></div><div class=\"line\">    lis[i].onclick=(function(a)&#123;</div><div class=\"line\"></div><div class=\"line\">        return function() &#123;</div><div class=\"line\"></div><div class=\"line\">            alert(a);</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;)(i);</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">14、编写一个JavaScript函数，输入指定类型的选择器(仅需支持id，class，tagName三种简单CSS选择器，无需兼容组合选择器)可以返回匹配的DOM节点，需考虑浏览器兼容性和性能。</div><div class=\"line\">/*** @param selector &#123;String&#125; 传入的CSS选择器。* @return &#123;Array&#125;*/</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">var query = function(selector) &#123;</div><div class=\"line\"></div><div class=\"line\">var reg = /^(#)?(\\.)?(\\w+)$/img;</div><div class=\"line\"></div><div class=\"line\">var regResult = reg.exec(selector);</div><div class=\"line\"></div><div class=\"line\">var result = [];</div><div class=\"line\"></div><div class=\"line\">//如果是id选择器</div><div class=\"line\"></div><div class=\"line\">if(regResult[1]) &#123;</div><div class=\"line\"></div><div class=\"line\">if(regResult[3]) &#123;</div><div class=\"line\"></div><div class=\"line\">if(typeof document.querySelector === &quot;function&quot;) &#123;</div><div class=\"line\"></div><div class=\"line\">result.push(document.querySelector(regResult[3]));</div><div class=\"line\"></div><div class=\"line\">    &#125;else &#123;</div><div class=\"line\"></div><div class=\"line\">      result.push(document.getElementById(regResult[3]));</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  //如果是class选择器</div><div class=\"line\"></div><div class=\"line\">  else if(regResult[2]) &#123;</div><div class=\"line\"></div><div class=\"line\">   if(regResult[3]) &#123;</div><div class=\"line\"></div><div class=\"line\">      if(typeof document.getElementsByClassName === &apos;function&apos;) &#123;</div><div class=\"line\"></div><div class=\"line\">        var doms = document.getElementsByClassName(regResult[3]);</div><div class=\"line\"></div><div class=\"line\">        if(doms) &#123;</div><div class=\"line\"></div><div class=\"line\">          result = converToArray(doms);</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">     //如果不支持getElementsByClassName函数</div><div class=\"line\"></div><div class=\"line\">     else &#123;</div><div class=\"line\"></div><div class=\"line\">      var allDoms = document.getElementsByTagName(&quot;*&quot;) ;</div><div class=\"line\"></div><div class=\"line\">       for(var i = 0, len = allDoms.length; i &lt; len; i++) &#123;</div><div class=\"line\"></div><div class=\"line\">         if(allDoms[i].className.search(new RegExp(regResult[2])) &gt; -1) &#123;</div><div class=\"line\"></div><div class=\"line\">           result.push(allDoms[i]);</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"> &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"> //如果是标签选择器</div><div class=\"line\"></div><div class=\"line\"> else if(regResult[3]) &#123;</div><div class=\"line\"></div><div class=\"line\">   var doms = document.getElementsByTagName(regResult[3].toLowerCase());</div><div class=\"line\"></div><div class=\"line\">   if(doms) &#123;</div><div class=\"line\"></div><div class=\"line\">     result = converToArray(doms);</div><div class=\"line\"></div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\"> &#125;</div><div class=\"line\"></div><div class=\"line\"> return result;</div><div class=\"line\"></div><div class=\"line\"> &#125;</div><div class=\"line\"></div><div class=\"line\"> function converToArray(nodes)&#123;</div><div class=\"line\"></div><div class=\"line\">    var array = null;        </div><div class=\"line\"></div><div class=\"line\">    try&#123;       </div><div class=\"line\"></div><div class=\"line\">     array = Array.prototype.slice.call(nodes,0);//针对非IE浏览器        </div><div class=\"line\"></div><div class=\"line\">   &#125;catch(ex)&#123;</div><div class=\"line\"></div><div class=\"line\">    array = new Array();        </div><div class=\"line\"></div><div class=\"line\">   for( var i = 0 ,len = nodes.length; i &lt; len ; i++ ) &#123;</div><div class=\"line\"></div><div class=\"line\">     array.push(nodes[i])        </div><div class=\"line\"></div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">  &#125;     </div><div class=\"line\"></div><div class=\"line\">  return array;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">15、请评价以下代码并给出改进意见。</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">if(window.addEventListener)&#123;</div><div class=\"line\"></div><div class=\"line\">    var addListener = function(el,type,listener,useCapture)&#123;</div><div class=\"line\"></div><div class=\"line\">        el.addEventListener(type,listener,useCapture);</div><div class=\"line\"></div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">else if(document.all)&#123;</div><div class=\"line\"></div><div class=\"line\">    addListener = function(el,type,listener)&#123;</div><div class=\"line\"></div><div class=\"line\">        el.attachEvent(&quot;on&quot;+type,function()&#123;</div><div class=\"line\"></div><div class=\"line\">          listener.apply(el);</div><div class=\"line\"></div><div class=\"line\">      &#125;);</div><div class=\"line\"></div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">不应该在if和else语句中声明addListener函数，应该先声明；</div><div class=\"line\">不需要使用window.addEventListener或document.all来进行检测浏览器，应该使用能力检测；</div><div class=\"line\">由于attachEvent在IE中有this指向问题，所以调用它时需要处理一下</div><div class=\"line\">改进如下：</div><div class=\"line\"></div><div class=\"line\">function addEvent(elem, type, handler)&#123;</div><div class=\"line\"></div><div class=\"line\">　　if(elem.addEventListener)&#123;</div><div class=\"line\"></div><div class=\"line\">　　　　elem.addEventListener(type, handler, false);</div><div class=\"line\"></div><div class=\"line\">　　&#125;else if(elem.attachEvent)&#123;</div><div class=\"line\"></div><div class=\"line\">　　　　elem[&apos;temp&apos; + type + handler] = handler;</div><div class=\"line\"></div><div class=\"line\">　　　　elem[type + handler] = function()&#123;</div><div class=\"line\"></div><div class=\"line\">　　　　elem[&apos;temp&apos; + type + handler].apply(elem);</div><div class=\"line\"></div><div class=\"line\">　　&#125;;</div><div class=\"line\"></div><div class=\"line\">　　elem.attachEvent(&apos;on&apos; + type, elem[type + handler]);　</div><div class=\"line\"></div><div class=\"line\">  &#125;else&#123;</div><div class=\"line\"></div><div class=\"line\">　　elem[&apos;on&apos; + type] = handler;</div><div class=\"line\"></div><div class=\"line\">　　&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">16、给String对象添加一个方法，传入一个string类型的参数，然后将string的每个字符间价格空格返回，例如：</div><div class=\"line\">addSpace(“hello world”) // -&gt; ‘h e l l o  w o r l d’</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">String.prototype.spacify = function()&#123;</div><div class=\"line\"></div><div class=\"line\">      return this.split(&apos;&apos;).join(&apos; &apos;);</div><div class=\"line\"></div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">接着上述问题答案提问，1）直接在对象的原型上添加方法是否安全？尤其是在Object对象上。(这个我没能答出？希望知道的说一下。)　2）函数声明与函数表达式的区别？</div><div class=\"line\"></div><div class=\"line\">答案：在js中，解析器在向执行环境中加载数据时，对函数声明和函数表达式并非是一视同仁的，解析器会率先读取函数声明，并使其在执行任何代码之前可用（可以访问），至于函数表达式，则必须等到解析器执行到它所在的代码行，才会真正被解析执行。</div><div class=\"line\"></div><div class=\"line\">17、定义一个log方法，让它可以代理console.log的方法。</div><div class=\"line\">可行的方法一：</div><div class=\"line\"></div><div class=\"line\">function log(msg)　&#123;</div><div class=\"line\"></div><div class=\"line\">    console.log(msg);</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">log(&quot;hello world!&quot;) // hello world!</div><div class=\"line\"></div><div class=\"line\">如果要传入多个参数呢？显然上面的方法不能满足要求，所以更好的方法是：</div><div class=\"line\"></div><div class=\"line\">function log()&#123;</div><div class=\"line\"></div><div class=\"line\">    console.log.apply(console, arguments);</div><div class=\"line\"></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">到此，追问apply和call方法的异同。</div><div class=\"line\"></div><div class=\"line\">对于apply和call两者在作用上是相同的，即是调用一个对象的一个方法，以另一个对象替换当前对象。将一个函数的对象上下文从初始的上下文改变为由 thisObj 指定的新对象。</div><div class=\"line\"></div><div class=\"line\">但两者在参数上有区别的。对于第一个参数意义都一样，但对第二个参数： apply传入的是一个参数数组，也就是将多个参数组合成为一个数组传入，而call则作为call的参数传入（从第二个参数开始）。 如 func.call(func1,var1,var2,var3)对应的apply写法为：func.apply(func1,[var1,var2,var3]) 。</div><div class=\"line\"></div><div class=\"line\">18、在Javascript中什么是伪数组？如何将伪数组转化为标准数组？</div><div class=\"line\">伪数组（类数组）：无法直接调用数组方法或期望length属性有什么特殊的行为，但仍可以对真正数组遍历方法来遍历它们。典型的是函数的argument参数，还有像调用getElementsByTagName,document.childNodes之类的,它们都返回NodeList对象都属于伪数组。可以使用Array.prototype.slice.call(fakeArray)将数组转化为真正的Array对象。</div><div class=\"line\"></div><div class=\"line\">假设接第八题题干，我们要给每个log方法添加一个”(app)”前缀，比如’hello world!’ -&gt;’(app)hello world!’。方法如下：</div><div class=\"line\"></div><div class=\"line\">function log()&#123;</div><div class=\"line\"></div><div class=\"line\">      var args = Array.prototype.slice.call(arguments);  //为了使用unshift数组方法，将argument转化为真正的数组</div><div class=\"line\"></div><div class=\"line\">      args.unshift(&apos;(app)&apos;);</div><div class=\"line\"></div><div class=\"line\">      console.log.apply(console, args);</div><div class=\"line\"></div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">19、对作用域上下文和this的理解，看下列代码：</div><div class=\"line\">var User = &#123;</div><div class=\"line\"></div><div class=\"line\">  count: 1,</div><div class=\"line\"></div><div class=\"line\">  getCount: function() &#123;</div><div class=\"line\"></div><div class=\"line\">    return this.count;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">console.log(User.getCount());  // what?</div><div class=\"line\"></div><div class=\"line\">var func = User.getCount;</div><div class=\"line\"></div><div class=\"line\">console.log(func());  // what?</div><div class=\"line\"></div><div class=\"line\">问两处console输出什么？为什么？</div><div class=\"line\"></div><div class=\"line\">答案是1和undefined。</div><div class=\"line\"></div><div class=\"line\">func是在winodw的上下文中被执行的，所以会访问不到count属性。</div><div class=\"line\"></div><div class=\"line\">继续追问，那么如何确保Uesr总是能访问到func的上下文，即正确返回1。正确的方法是使用Function.prototype.bind。兼容各个浏览器完整代码如下：</div><div class=\"line\"></div><div class=\"line\">Function.prototype.bind = Function.prototype.bind || function(context)&#123;</div><div class=\"line\"></div><div class=\"line\">   var self = this;</div><div class=\"line\"></div><div class=\"line\">   return function()&#123;</div><div class=\"line\"></div><div class=\"line\">      return self.apply(context, arguments);</div><div class=\"line\"></div><div class=\"line\">   &#125;;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var func = User.getCount.bind(User);</div><div class=\"line\"></div><div class=\"line\">console.log(func());</div><div class=\"line\"></div><div class=\"line\">20、原生JS的window.onload与Jquery的$(document).ready(function()&#123;&#125;)有什么不同？如何用原生JS实现Jq的ready方法？</div><div class=\"line\">window.onload()方法是必须等到页面内包括图片的所有元素加载完毕后才能执行。</div><div class=\"line\"></div><div class=\"line\">$(document).ready()是DOM结构绘制完毕后就执行，不必等到加载完毕。</div><div class=\"line\"></div><div class=\"line\">/*</div><div class=\"line\"></div><div class=\"line\"> * 传递函数给whenReady()</div><div class=\"line\"></div><div class=\"line\"> * 当文档解析完毕且为操作准备就绪时，函数作为document的方法调用</div></pre></td></tr></table></figure></p>\n<p>var whenReady = (function() {               //这个函数返回whenReady()函数</p>\n<pre><code>var funcs = [];             //当获得事件时，要运行的函数\n\nvar ready = false;          //当触发事件处理程序时,切换为true\n\n//当文档就绪时,调用事件处理程序\n\nfunction handler(e) {\n\n    if(ready) return;       //确保事件处理程序只完整运行一次\n\n    //如果发生onreadystatechange事件，但其状态不是complete的话,那么文档尚未准备好\n\n    if(e.type === &apos;onreadystatechange&apos; &amp;&amp; document.readyState !== &apos;complete&apos;) {\n\n        return;\n\n    }\n\n    //运行所有注册函数\n\n    //注意每次都要计算funcs.length\n\n    //以防这些函数的调用可能会导致注册更多的函数\n\n    for(var i=0; i&lt;funcs.length; i++) {\n\n        funcs[i].call(document);\n\n    }\n\n    //事件处理函数完整执行,切换ready状态, 并移除所有函数\n\n    ready = true;\n\n    funcs = null;\n\n}\n\n//为接收到的任何事件注册处理程序\n\nif(document.addEventListener) {\n\n    document.addEventListener(&apos;DOMContentLoaded&apos;, handler, false);\n\n    document.addEventListener(&apos;readystatechange&apos;, handler, false);            //IE9+\n\n    window.addEventListener(&apos;load&apos;, handler, false);\n\n}else if(document.attachEvent) {\n\n    document.attachEvent(&apos;onreadystatechange&apos;, handler);\n\n    window.attachEvent(&apos;onload&apos;, handler);\n\n}\n\n//返回whenReady()函数\n\nreturn function whenReady(fn) {\n\n    if(ready) { fn.call(document); }\n\n    else { funcs.push(fn); }\n\n}\n</code></pre><p>})();<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">如果上述代码十分难懂，下面这个简化版：</div></pre></td></tr></table></figure></p>\n<p>function ready(fn){</p>\n<pre><code>if(document.addEventListener) {//标准浏览器\n\n    document.addEventListener(&apos;DOMContentLoaded&apos;, function() {\n\n        //注销事件, 避免反复触发\n\n        document.removeEventListener(&apos;DOMContentLoaded&apos;,arguments.callee, false);\n\n        fn();//执行函数\n\n    }, false);\n\n}else if(document.attachEvent) {//IE\n\n    document.attachEvent(&apos;onreadystatechange&apos;, function() {\n\n        if(document.readyState == &apos;complete&apos;) {\n\n            document.detachEvent(&apos;onreadystatechange&apos;, arguments.callee);\n\n            fn();//函数执行\n\n        }\n\n    });\n\n}\n</code></pre><p>};<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div></pre></td><td class=\"code\"><pre><div class=\"line\">21、（设计题）想实现一个对页面某个节点的拖曳？如何做？（使用原生JS）</div><div class=\"line\">回答出概念即可，下面是几个要点</div><div class=\"line\"></div><div class=\"line\">1. 给需要拖拽的节点绑定mousedown, mousemove, mouseup事件</div><div class=\"line\"></div><div class=\"line\">2. mousedown事件触发后，开始拖拽</div><div class=\"line\"></div><div class=\"line\">3. mousemove时，需要通过event.clientX和clientY获取拖拽位置，并实时更新位置</div><div class=\"line\"></div><div class=\"line\">4. mouseup时，拖拽结束</div><div class=\"line\"></div><div class=\"line\">5. 需要注意浏览器边界的情况</div><div class=\"line\"></div><div class=\"line\">22、请实现如下功能</div><div class=\"line\"></div><div class=\"line\">     function setcookie(name,value,days)&#123;  //给cookie增加一个时间变量</div><div class=\"line\"></div><div class=\"line\">    　　var exp = new Date();</div><div class=\"line\"></div><div class=\"line\">    　　exp.setTime(exp.getTime() + days*24*60*60*1000); //设置过期时间为days天</div><div class=\"line\"></div><div class=\"line\">    　　document.cookie = name + &quot;=&quot;+ escape (value) + &quot;;expires=&quot; + exp.toGMTString();</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    function getCookie(name)&#123;</div><div class=\"line\"></div><div class=\"line\">    　　var result = &quot;&quot;;</div><div class=\"line\"></div><div class=\"line\">    　　var myCookie = &quot;&quot;+document.cookie+&quot;;&quot;;</div><div class=\"line\"></div><div class=\"line\">    　　var searchName = &quot;+name+&quot;=&quot;;</div><div class=\"line\"></div><div class=\"line\">    　　var startOfCookie = myCookie.indexOf(searchName);</div><div class=\"line\"></div><div class=\"line\">    　　var endOfCookie;</div><div class=\"line\"></div><div class=\"line\">    　　if(satrtOfCookie != -1)&#123;</div><div class=\"line\"></div><div class=\"line\">    　　　　startOfcookie += searchName.length;</div><div class=\"line\"></div><div class=\"line\">    　　　　endOfCookie = myCookie.indexOf(&quot;;&quot;,startOfCookie);</div><div class=\"line\"></div><div class=\"line\">    　　　　result = (myCookie.substring(startOfCookie,endOfCookie));</div><div class=\"line\"></div><div class=\"line\">    　　&#125;</div><div class=\"line\"></div><div class=\"line\">    　　return result;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    (function()&#123;</div><div class=\"line\"></div><div class=\"line\">    　　var oTips = document.getElementById(&apos;tips&apos;);//假设tips的id为tips</div><div class=\"line\"></div><div class=\"line\">    　　var page = &#123;</div><div class=\"line\"></div><div class=\"line\">    　　check: function()&#123;//检查tips的cookie是否存在并且允许显示</div><div class=\"line\"></div><div class=\"line\">    　　　　var tips = getCookie(&apos;tips&apos;);</div><div class=\"line\"></div><div class=\"line\">    　　　　if(!tips || tips == &apos;show&apos;) return true;//tips的cookie不存在</div><div class=\"line\"></div><div class=\"line\">    　　　　if(tips == &quot;never_show_again&quot;) return false;</div><div class=\"line\"></div><div class=\"line\">    　　&#125;,</div><div class=\"line\"></div><div class=\"line\">    　　hideTip: function(bNever)&#123;</div><div class=\"line\"></div><div class=\"line\">    　　　　if(bNever) setcookie(&apos;tips&apos;, &apos;never_show_again&apos;, 365);</div><div class=\"line\"></div><div class=\"line\">    　　　　oTips.style.display = &quot;none&quot;;//隐藏</div><div class=\"line\"></div><div class=\"line\">    　　&#125;,</div><div class=\"line\"></div><div class=\"line\">    　　showTip: function()&#123;</div><div class=\"line\"></div><div class=\"line\">    　　oTips.style.display = &quot;inline&quot;;//显示，假设tips为行级元素</div><div class=\"line\"></div><div class=\"line\">    　　&#125;,</div><div class=\"line\"></div><div class=\"line\">    　　init: function()&#123;</div><div class=\"line\"></div><div class=\"line\">    　　　　var _this = this;</div><div class=\"line\"></div><div class=\"line\">    　　　　if(this.check())&#123;</div><div class=\"line\"></div><div class=\"line\">    　　　　_this.showTip();</div><div class=\"line\"></div><div class=\"line\">    　　　　setcookie(&apos;tips&apos;, &apos;show&apos;, 1);</div><div class=\"line\"></div><div class=\"line\">    　　&#125;</div><div class=\"line\"></div><div class=\"line\">    　　oTips.onclick = function()&#123;</div><div class=\"line\"></div><div class=\"line\">    　　　　_this.hideTip(true);</div><div class=\"line\"></div><div class=\"line\">    　　&#125;;</div><div class=\"line\"></div><div class=\"line\">    　　&#125;</div><div class=\"line\"></div><div class=\"line\">    　　&#125;;</div><div class=\"line\"></div><div class=\"line\">      page.init();</div><div class=\"line\"></div><div class=\"line\">    &#125;)();</div></pre></td></tr></table></figure></p>\n<p>23、说出以下函数的作用是？空白区域应该填写什么？<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\">//define</div><div class=\"line\"></div><div class=\"line\">(function(window)&#123;</div><div class=\"line\"></div><div class=\"line\">    function fn(str)&#123;</div><div class=\"line\"></div><div class=\"line\">        this.str=str;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    fn.prototype.format = function()&#123;</div><div class=\"line\"></div><div class=\"line\">        var arg = ______;</div><div class=\"line\"></div><div class=\"line\">        return this.str.replace(_____,function(a,b)&#123;</div><div class=\"line\"></div><div class=\"line\">             return arg[b]||&quot;&quot;;</div><div class=\"line\"></div><div class=\"line\">      &#125;);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    window.fn = fn;</div><div class=\"line\"></div><div class=\"line\">&#125;)(window);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">//use</div><div class=\"line\"></div><div class=\"line\">(function()&#123;</div><div class=\"line\"></div><div class=\"line\">    var t = new fn(&apos;&lt;p&gt;&lt;a href=&quot;&#123;0&#125;&quot;&gt;&#123;1&#125;&lt;/a&gt;&lt;span&gt;&#123;2&#125;&lt;/span&gt;&lt;/p&gt;&apos;);</div><div class=\"line\"></div><div class=\"line\">    console.log(t.format(&apos;http://www.alibaba.com&apos;,&apos;Alibaba&apos;,&apos;Welcome&apos;));</div><div class=\"line\"></div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure></p>\n<p>答案：访函数的作用是使用format函数将函数的参数替换掉{0}这样的内容，返回一个格式化后的结果：</p>\n<p>第一个空是：arguments</p>\n<p>第二个空是：/{(\\d+)}/ig</p>\n<p>24、Javascript作用链域?<br>理解变量和函数的访问范围和生命周期，全局作用域与局部作用域的区别，JavaScript中没有块作用域，函数的嵌套形成不同层次的作用域，嵌套的层次形成链式形式，通过作用域链查找属性的规则需要深入理解。</p>\n<p>25、谈谈This对象的理解。<br>理解不同形式的函数调用方式下的this指向，理解事件函数、定时函数中的this指向，函数的调用形式决定了this的指向。</p>\n<p>26、eval是做什么的？<br>它的功能是把对应的字符串解析成JS代码并运行；应该避免使用eval，不安全，非常耗性能（2个步骤，一次解析成js语句，一次执行）</p>\n<p>27、关于事件，IE与火狐的事件机制有什么区别？ 如何阻止冒泡？<br>[1].在IE中,事件对象是作为一个全局变量来保存和维护的.所有的浏览器事件,不管是用户触发的，还是其他事件,都会更新window.event对象.所以在代码中，只要调用window.event就可以获取事件对象， 再event.srcElement就可以取得触发事件的元素进行进一步处理.</p>\n<p>[2].在FireFox中，事件对象却不是全局对象，一般情况下，是现场发生，现场使用，FireFox把事件对象自动传给事件处理程序.</p>\n<p>关于事件的兼容性处理要熟练掌握，事件对象具体哪些属性存在兼容性问题，IE与标准事件模型事件冒泡与事件捕获的支持要理解</p>\n<p>28、什么是闭包（closure），为什么要用它？<br>简单的理解是函数的嵌套形成闭包，闭包包括函数本身已经它的外部作用域</p>\n<p>使用闭包可以形成独立的空间，延长变量的生命周期，报存中间状态值</p>\n<p>29、javascript 代码中的”use strict”;是什么意思 ? 使用它区别是什么？<br>意思是使用严格模式，使用严格模式，一些不规范的语法将不再支持</p>\n<p>30、如何判断一个对象是否属于某个类？<br>Instanceof   constructor</p>\n<p>31、new操作符具体干了什么呢?<br>1、创建一个空对象，并且 this 变量引用该对象，同时还继承了该函数的原型。</p>\n<p>  2、属性和方法被加入到 this 引用的对象中。</p>\n<p>  3、新创建的对象由 this 所引用，并且最后隐式的返回 this 。</p>\n<p>32、用原生JavaScript的实现过什么功能吗？<br>主要考察原生js的实践经验</p>\n<p>33、Javascript中，有一个函数，执行时对象查找时，永远不会去查找原型，这个函数是？<br>HasOwnProperty</p>\n<p>34、对JSON的了解？<br>轻量级数据交互格式，可以形成复杂的嵌套格式，解析非常方便</p>\n<p>35、js延迟加载的方式有哪些？<br>    `方案一：<script>标签的async=”async”属性（详细参见：script标签的async属性）</p>\n<pre><code>方案二：&lt;script&gt;标签的defer=&quot;defer&quot;属性\n\n方案三：动态创建&lt;script&gt;标签\n\n方案四：AJAX eval（使用AJAX得到脚本内容，然后通过eval_r(xmlhttp.responseText)来运行脚本）\n\n方案五：iframe方式`\n</code></pre><p>36、模块化开发怎么做？<br>理解模块化开发模式：浏览器端requirejs，seajs；服务器端nodejs；ES6模块化；fis、webpack等前端整体模块化解决方案；grunt、gulp等前端工作流的使用</p>\n<p>37、AMD（Modules/Asynchronous-Definition）、CMD（Common Module Definition）规范区别？<br>理解这两种规范的差异，主要通过requirejs与seajs的对比，理解模块的定义与引用方式的差异以及这两种规范的设计原则</p>\n<p>38、requireJS的核心原理是什么？（如何动态加载的？如何避免多次加载的？如何 缓存的？）<br>核心是js的加载模块，通过正则匹配模块以及模块的依赖关系，保证文件加载的先后顺序，根据文件的路径对加载过的文件做了缓存</p>\n<p>39、让你自己设计实现一个requireJS，你会怎么做？<br>核心是实现js的加载模块，维护js的依赖关系，控制好文件加载的先后顺序</p>\n<p>40、谈一谈你对ECMAScript6的了解？<br>ES6新的语法糖，类，模块化等新特性</p>\n<p>41、ECMAScript6 怎么写class么，为什么会出现class这种东西?<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Point &#123;</div><div class=\"line\"></div><div class=\"line\">  constructor(x, y) &#123;</div><div class=\"line\"></div><div class=\"line\">    this.x = x;</div><div class=\"line\"></div><div class=\"line\">    this.y = y;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  toString() &#123;</div><div class=\"line\"></div><div class=\"line\">     return &apos;(&apos;+this.x+&apos;, &apos;+this.y+&apos;)&apos;;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>42、异步加载的方式有哪些？<br>方案一：<script>标签的async=”async”属性（详细参见：script标签的async属性）</p>\n<p>方案二：<script>标签的defer=”defer”属性</p>\n<p>方案三：动态创建<script>标签</p>\n<p>方案四：AJAX eval（使用AJAX得到脚本内容，然后通过eval_r(xmlhttp.responseText)来运行脚本）</p>\n<p>方案五：iframe方式</p>\n<p>43、documen.write和 innerHTML的区别?<br>document.write是重写整个document, 写入内容是字符串的html</p>\n<p>innerHTML是HTMLElement的属性，是一个元素的内部html内容</p>\n<p>44、DOM操作——怎样添加、移除、移动、复制、创建和查找节点?<br>（1）创建新节点</p>\n<pre><code>createDocumentFragment()    //创建一个DOM片段\n\ncreateElement_x()   //创建一个具体的元素\n\ncreateTextNode()   //创建一个文本节点\n</code></pre><p>（2）添加、移除、替换、插入</p>\n<pre><code>appendChild()\n\nremoveChild()\n\nreplaceChild()\n\ninsertBefore()\n</code></pre><p>（3）查找</p>\n<pre><code>getElementsByTagName()    //通过标签名称\n\ngetElementsByName()    //通过元素的Name属性的值\n\ngetElementById()    //通过元素Id，唯一性\n</code></pre><p>45、call() 和 .apply() 的含义和区别？<br>apply的参数是数组形式，call的参数是单个的值，除此之外在使用上没有差别，重点理解这两个函数调用的this改变</p>\n<p>46、数组和对象有哪些原生方法，列举一下？<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\">Array.concat( ) 连接数组</div><div class=\"line\"></div><div class=\"line\">Array.join( ) 将数组元素连接起来以构建一个字符串</div><div class=\"line\"></div><div class=\"line\">Array.length 数组的大小</div><div class=\"line\"></div><div class=\"line\">Array.pop( ) 删除并返回数组的最后一个元素</div><div class=\"line\"></div><div class=\"line\">Array.push( ) 给数组添加元素</div><div class=\"line\"></div><div class=\"line\">Array.reverse( ) 颠倒数组中元素的顺序</div><div class=\"line\"></div><div class=\"line\">Array.shift( ) 将元素移出数组</div><div class=\"line\"></div><div class=\"line\">Array.slice( ) 返回数组的一部分</div><div class=\"line\"></div><div class=\"line\">Array.sort( ) 对数组元素进行排序</div><div class=\"line\"></div><div class=\"line\">Array.splice( ) 插入、删除或替换数组的元素</div><div class=\"line\"></div><div class=\"line\">Array.toLocaleString( ) 把数组转换成局部字符串</div><div class=\"line\"></div><div class=\"line\">Array.toString( ) 将数组转换成一个字符串</div><div class=\"line\"></div><div class=\"line\">Array.unshift( ) 在数组头部插入一个元素</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">Object.hasOwnProperty( ) 检查属性是否被继承</div><div class=\"line\"></div><div class=\"line\">Object.isPrototypeOf( ) 一个对象是否是另一个对象的原型</div><div class=\"line\"></div><div class=\"line\">Object.propertyIsEnumerable( ) 是否可以通过for/in循环看到属性</div><div class=\"line\"></div><div class=\"line\">Object.toLocaleString( ) 返回对象的本地字符串表示</div><div class=\"line\"></div><div class=\"line\">Object.toString( ) 定义一个对象的字符串表示</div><div class=\"line\"></div><div class=\"line\">Object.valueOf( ) 指定对象的原始值</div></pre></td></tr></table></figure></p>\n<p>47、JS 怎么实现一个类。怎么实例化这个类<br>严格来讲js中并没有类的概念，不过js中的函数可以作为构造函数来使用，通过new来实例化，其实函数本身也是一个对象。</p>\n<p>48、JavaScript中的作用域与变量声明提升？<br>理解JavaScript的预解析机制，js的运行主要分两个阶段：js的预解析和运行，预解析阶段所有的变量声明和函数定义都会提前，但是变量的赋值不会提前</p>\n<p>49、如何编写高性能的Javascript？<br>使用 DocumentFragment 优化多次 append</p>\n<p>通过模板元素 clone ，替代 createElement</p>\n<p>使用一次 innerHTML 赋值代替构建 dom 元素</p>\n<p>使用 firstChild 和 nextSibling 代替 childNodes 遍历 dom 元素</p>\n<p>使用 Array 做为 StringBuffer ，代替字符串拼接的操作</p>\n<p>将循环控制量保存到局部变量</p>\n<p>顺序无关的遍历时，用 while 替代 for</p>\n<p>将条件分支，按可能性顺序从高到低排列</p>\n<p>在同一条件子的多（ &gt;2 ）条件分支时，使用 switch 优于 if</p>\n<p>使用三目运算符替代条件分支</p>\n<p>需要不断执行的时候，优先考虑使用 setInterval</p>\n<p>50、那些操作会造成内存泄漏？<br>闭包，循环</p>\n<p>51、javascript对象的几种创建方式？</p>\n<pre><code>1. 工厂模式\n\n2. 构造函数模式\n\n3. 原型模式\n\n4. 混合构造函数和原型模式\n\n5. 动态原型模式\n\n6. 寄生构造函数模式\n\n7. 稳妥构造函数模式\n</code></pre><p>52、javascript继承的 6 种方法？</p>\n<pre><code>1. 原型链继承\n\n2. 借用构造函数继承\n\n3. 组合继承(原型+借用构造)\n\n4. 原型式继承\n\n5. 寄生式继承\n\n6. 寄生组合式继承\n</code></pre><p>53、eval是做什么的？</p>\n<pre><code>1. 它的功能是把对应的字符串解析成JS代码并运行\n\n2. 应该避免使用eval，不安全，非常耗性能（2次，一次解析成js语句，一次执行）\n</code></pre><p>54、JavaScript 原型，原型链 ? 有什么特点？</p>\n<pre><code>1. 原型对象也是普通的对象，是对象一个自带隐式的 __proto__ 属性，原型也有可能有自己的原型，如果一个原型对象的原型不为 null 的话，我们就称之为原型链\n\n2. 原型链是由一些用来继承和共享属性的对象组成的（有限的）对象链\n</code></pre><p>55、事件、IE与火狐的事件机制有什么区别？ 如何阻止冒泡？</p>\n<pre><code>1. 我们在网页中的某个操作（有的操作对应多个事件）。例如：当我们点击一个按钮就会产生一个事件。是可以被 JavaScript 侦测到的行为\n\n2. 事件处理机制：IE是事件冒泡、firefox同时支持两种事件模型，也就是：捕获型事件和冒泡型事件\n\n3. ev.stopPropagation();\n</code></pre><p>注意旧ie的方法：ev.cancelBubble = true;</p>\n<p>56、简述一下Sass、Less，且说明区别？<br>他们是动态的样式语言，是CSS预处理器,CSS上的一种抽象层。他们是一种特殊的语法/语言而编译成CSS。</p>\n<p>变量符不一样，less是@，而Sass是$;</p>\n<p>Sass支持条件语句，可以使用if{}else{},for{}循环等等。而Less不支持;</p>\n<p>Sass是基于Ruby的，是在服务端处理的，而Less是需要引入less.js来处理Less代码输出Css到浏览器</p>\n<p>57、关于javascript中apply()和call()方法的区别？<br>相同点:两个方法产生的作用是完全一样的</p>\n<p>不同点:方法传递的参数不同</p>\n<p>Object.call(this,obj1,obj2,obj3)</p>\n<p>Object.apply(this,arguments)</p>\n<p>apply()接收两个参数，一个是函数运行的作用域(this)，另一个是参数数组。</p>\n<p>call()方法第一个参数与apply()方法相同，但传递给函数的参数必须列举出来。</p>\n<p>58、简述一下JS中的闭包？<br>闭包用的多的两个作用：读取函数内部的变量值；让这些变量值始终保存着(在内存中)。</p>\n<p>同时需要注意的是：闭包慎用，不滥用，不乱用，由于函数内部的变量都被保存在内存中，会导致内存消耗大。</p>\n<p>59、说说你对this的理解？<br>在JavaScript中，this通常指向的是我们正在执行的函数本身，或者是，指向该函数所属的对象。</p>\n<p>全局的this → 指向的是Window</p>\n<p>函数中的this → 指向的是函数所在的对象</p>\n<p>对象中的this → 指向其本身</p>\n<p>60、分别阐述split(),slice(),splice(),join()？<br>join()用于把数组中的所有元素拼接起来放入一个字符串。所带的参数为分割字符串的分隔符，默认是以逗号分开。归属于Array</p>\n<p>split()即把字符串分离开，以数组方式存储。归属于Stringstring</p>\n<p>slice() 方法可从已有的数组中返回选定的元素。该方法并不会修改数组，而是返回一个子数组。如果想删除数组中的一段元素，应该使用方法 Array.splice()</p>\n<p>splice() 方法向/从数组中添加/删除项目，然后返回被删除的项目。返回的是含有被删除的元素的数组。</p>\n<p>61、事件委托是什么？<br>让利用事件冒泡的原理，让自己的所触发的事件，让他的父元素代替执行！</p>\n<p>62、如何阻止事件冒泡和默认事件？<br>阻止浏览器的默认行为</p>\n<p>window.event?window.event.returnValue=false:e.preventDefault();</p>\n<p>停止事件冒泡</p>\n<p>window.event?window.event.cancelBubble=true:e.stopPropagation();</p>\n<p>原生JavaScript中，return false;只阻止默认行为，不阻止冒泡，jQuery中的return false;既阻止默认行为，又阻止冒泡</p>\n<p>63、添加 删除 替换 插入到某个接点的方法？<br>obj.appendChidl()</p>\n<p>obj.removeChild()</p>\n<p>obj.replaceChild()</p>\n<p>obj.innersetBefore()</p>\n<p>64、你用过require.js吗？它有什么特性？<br>（1）实现js文件的异步加载，避免网页失去响应；</p>\n<p>（2）管理模块之间的依赖性，便于代码的编写和维护。</p>\n<p>65、谈一下JS中的递归函数，并且用递归简单实现阶乘？<br>递归即是程序在执行过程中不断调用自身的编程技巧，当然也必须要有一个明确的结束条件，不然就会陷入死循环。</p>\n<p>66、请用正则表达式写一个简单的邮箱验证。<br>/^[a-zA-Z0-9<em>-]+@[a-zA-Z0-9</em>-]+(.[a-zA-Z0-9_-]+)+$/;</p>\n<p>67、简述一下你对web性能优化的方案？<br>    1、尽量减少 HTTP 请求</p>\n<p>2、使用浏览器缓存</p>\n<p>3、使用压缩组件</p>\n<p>4、图片、JS的预载入</p>\n<p>5、将脚本放在底部</p>\n<p>6、将样式文件放在页面顶部</p>\n<p>7、使用外部的JS和CSS</p>\n<p>8、精简代码</p>\n<p>68、在JS中有哪些会被隐式转换为false<br>Undefined、null、关键字false、NaN、零、空字符串</p>\n<p>69、定时器setInterval有一个有名函数fn1，setInterval（fn1,500）与setInterval（fn1(),500）有什么区别？<br>第一个是重复执行每500毫秒执行一次，后面一个只执行一次。</p>\n<p>70、外部JS文件出现中文字符，会出现什么问题，怎么解决？<br>会出现乱码，加charset=”GB2312”;</p>\n<p>71、谈谈浏览器的内核，并且说一下什么是内核？<br>Trident ([‘traɪd(ə)nt])–IE，Gecko ([‘gekəʊ])–Firefox, Presto ([‘prestəʊ])–opera,webkit—谷歌和Safari</p>\n<p>浏览器内核又可以分成两部分：渲染引擎和 JS 引擎。它负责取得网页的内容（HTML、XML、图像等等）、整理讯息（例如加入 CSS 等），以及计算网页的显示方式，然后会输出至显示器或打印机。JS 引擎则是解析 Javascript 语言，执行 javascript 语言来实现网页的动态效果。</p>\n<p>72、JavaScript原型，原型链 ? 有什么特点？</p>\n<ul>\n<li><p>原型对象也是普通的对象，是对象一个自带隐式的 <code>__proto__</code> 属性，原型也有可能有自己的原型，如果一个原型对象的原型不为null的话，我们就称之为原型链。</p>\n</li>\n<li><p>原型链是由一些用来继承和共享属性的对象组成的（有限的）对象链。</p>\n</li>\n<li><p>JavaScript的数据对象有那些属性值？</p>\n</li>\n</ul>\n<p>　　writable：这个属性的值是否可以改。</p>\n<p>　　configurable：这个属性的配置是否可以删除，修改。</p>\n<p>　　enumerable：这个属性是否能在for…in循环中遍历出来或在Object.keys中列举出来。</p>\n<p>　　value：属性值。</p>\n<ul>\n<li>当我们需要一个属性的时，Javascript引擎会先看当前对象中是否有这个属性， 如果没有的话，就会查找他的Prototype对象是否有这个属性。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">function clone(proto) &#123;</div><div class=\"line\"></div><div class=\"line\">　　function Dummy() &#123; &#125;</div><div class=\"line\"></div><div class=\"line\">　　Dummy.prototype = proto;</div><div class=\"line\"></div><div class=\"line\">　　Dummy.prototype.constructor = Dummy;</div><div class=\"line\"></div><div class=\"line\">　　return new Dummy(); //等价于Object.create(Person);</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">       function object(old) &#123;</div><div class=\"line\"></div><div class=\"line\">        function F() &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">        F.prototype = old;</div><div class=\"line\"></div><div class=\"line\">        return new F();</div><div class=\"line\"></div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">   var newObj = object(oldObject);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>73、写一个通用的事件侦听器函数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div></pre></td><td class=\"code\"><pre><div class=\"line\">// event(事件)工具集，</div><div class=\"line\"></div><div class=\"line\">markyun.Event = &#123;</div><div class=\"line\"></div><div class=\"line\">    // 页面加载完成后</div><div class=\"line\"></div><div class=\"line\">    readyEvent : function(fn) &#123;</div><div class=\"line\"></div><div class=\"line\">        if (fn==null) &#123;</div><div class=\"line\"></div><div class=\"line\">            fn=document;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        var oldonload = window.onload;</div><div class=\"line\"></div><div class=\"line\">        if (typeof window.onload != &apos;function&apos;) &#123;</div><div class=\"line\"></div><div class=\"line\">            window.onload = fn;</div><div class=\"line\"></div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\"></div><div class=\"line\">            window.onload = function() &#123;</div><div class=\"line\"></div><div class=\"line\">                oldonload();</div><div class=\"line\"></div><div class=\"line\">                fn();</div><div class=\"line\"></div><div class=\"line\">            &#125;;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\">    // 视能力分别使用dom0||dom2||IE方式 来绑定事件</div><div class=\"line\"></div><div class=\"line\">    // 参数： 操作的元素,事件名称 ,事件处理程序</div><div class=\"line\"></div><div class=\"line\">    addEvent : function(element, type, handler) &#123;</div><div class=\"line\"></div><div class=\"line\">        if (element.addEventListener) &#123;</div><div class=\"line\"></div><div class=\"line\">            //事件类型、需要执行的函数、是否捕捉</div><div class=\"line\"></div><div class=\"line\">            element.addEventListener(type, handler, false);</div><div class=\"line\"></div><div class=\"line\">        &#125; else if (element.attachEvent) &#123;</div><div class=\"line\"></div><div class=\"line\">            element.attachEvent(&apos;on&apos; + type, function() &#123;</div><div class=\"line\"></div><div class=\"line\">                handler.call(element);</div><div class=\"line\"></div><div class=\"line\">            &#125;);</div><div class=\"line\"></div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\"></div><div class=\"line\">            element[&apos;on&apos; + type] = handler;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\">    // 移除事件</div><div class=\"line\"></div><div class=\"line\">    removeEvent : function(element, type, handler) &#123;</div><div class=\"line\"></div><div class=\"line\">        if (element.removeEnentListener) &#123;</div><div class=\"line\"></div><div class=\"line\">            element.removeEnentListener(type, handler, false);</div><div class=\"line\"></div><div class=\"line\">        &#125; else if (element.datachEvent) &#123;</div><div class=\"line\"></div><div class=\"line\">            element.detachEvent(&apos;on&apos; + type, handler);</div><div class=\"line\"></div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\"></div><div class=\"line\">            element[&apos;on&apos; + type] = null;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\">    // 阻止事件 (主要是事件冒泡，因为IE不支持事件捕获)</div><div class=\"line\"></div><div class=\"line\">    stopPropagation : function(ev) &#123;</div><div class=\"line\"></div><div class=\"line\">        if (ev.stopPropagation) &#123;</div><div class=\"line\"></div><div class=\"line\">            ev.stopPropagation();</div><div class=\"line\"></div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\"></div><div class=\"line\">            ev.cancelBubble = true;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\">    // 取消事件的默认行为</div><div class=\"line\"></div><div class=\"line\">    preventDefault : function(event) &#123;</div><div class=\"line\"></div><div class=\"line\">        if (event.preventDefault) &#123;</div><div class=\"line\"></div><div class=\"line\">            event.preventDefault();</div><div class=\"line\"></div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\"></div><div class=\"line\">            event.returnValue = false;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\">    // 获取事件目标</div><div class=\"line\"></div><div class=\"line\">    getTarget : function(event) &#123;</div><div class=\"line\"></div><div class=\"line\">        return event.target || event.srcElement;</div><div class=\"line\"></div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\">    // 获取event对象的引用，取到事件的所有信息，确保随时能使用event；</div><div class=\"line\"></div><div class=\"line\">    getEvent : function(e) &#123;</div><div class=\"line\"></div><div class=\"line\">        var ev = e || window.event;</div><div class=\"line\"></div><div class=\"line\">        if (!ev) &#123;</div><div class=\"line\"></div><div class=\"line\">            var c = this.getEvent.caller;</div><div class=\"line\"></div><div class=\"line\">            while (c) &#123;</div><div class=\"line\"></div><div class=\"line\">                ev = c.arguments[0];</div><div class=\"line\"></div><div class=\"line\">                if (ev &amp;&amp; Event == ev.constructor) &#123;</div><div class=\"line\"></div><div class=\"line\">                    break;</div><div class=\"line\"></div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                c = c.caller;</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        return ev;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>74、事件、IE与火狐的事件机制有什么区别？ 如何阻止冒泡？</p>\n<pre><code>1. 我们在网页中的某个操作（有的操作对应多个事件）。例如：当我们点击一个按钮就会产生一个事件。是可以被 JavaScript 侦测到的行为。\n\n2. 事件处理机制：IE是事件冒泡、火狐是 事件捕获；\n\n3.  ev.stopPropagation();\n</code></pre><p>75、什么是闭包（closure），为什么要用？<br>执行say667()后,say667()闭包内部变量会存在,而闭包内部函数的内部变量不会存在.使得Javascript的垃圾回收机制GC不会收回say667()所占用的资源，因为say667()的内部函数的执行需要依赖say667()中的变量。这是对闭包作用的非常直白的描述.</p>\n<p>  function say667() {</p>\n<pre><code>// Local variable that ends up within closure\n\nvar num = 666;\n\nvar sayAlert = function() { alert(num); }\n\nnum++;\n\nreturn sayAlert;\n</code></pre><p>}</p>\n<p> var sayAlert = say667();</p>\n<p> sayAlert()//执行结果应该弹出的667</p>\n<p>76、如何判断一个对象是否属于某个类？<br>使用instanceof （待完善）</p>\n<p>if(a instanceof Person){</p>\n<pre><code>alert(&apos;yes&apos;);\n</code></pre><p>}</p>\n<p>77、new操作符具体干了什么呢?<br>  1、创建一个空对象，并且 this 变量引用该对象，同时还继承了该函数的原型。</p>\n<p>  2、属性和方法被加入到 this 引用的对象中。</p>\n<p>  3、新创建的对象由 this 所引用，并且最后隐式的返回 this 。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">var obj  = &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">obj.__proto__ = Base.prototype;</div><div class=\"line\"></div><div class=\"line\">Base.call(obj);</div></pre></td></tr></table></figure></p>\n<p>78、JSON 的了解<br>JSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。它是基于JavaScript的一个子集。数据格式简单, 易于读写, 占用带宽小</p>\n<p>{‘age’:’12’, ‘name’:’back’}</p>\n<p>79、js延迟加载的方式有哪些<br>defer和async、动态创建DOM方式（用得最多）、按需异步载入js</p>\n<p>80、模块化怎么做？<br>立即执行函数,不暴露私有成员<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">var module1 = (function()&#123;</div><div class=\"line\"></div><div class=\"line\">　　　　var _count = 0;</div><div class=\"line\"></div><div class=\"line\">　　　　var m1 = function()&#123;</div><div class=\"line\"></div><div class=\"line\">　　　　　　//...</div><div class=\"line\"></div><div class=\"line\">　　　　&#125;;</div><div class=\"line\"></div><div class=\"line\">　　　　var m2 = function()&#123;</div><div class=\"line\"></div><div class=\"line\">　　　　　　//...</div><div class=\"line\"></div><div class=\"line\">　　　　&#125;;</div><div class=\"line\"></div><div class=\"line\">　　　　return &#123;</div><div class=\"line\"></div><div class=\"line\">　　　　　　m1 : m1,</div><div class=\"line\"></div><div class=\"line\">　　　　　　m2 : m2</div><div class=\"line\"></div><div class=\"line\">　　　　&#125;;</div><div class=\"line\"></div><div class=\"line\">　　&#125;)();</div></pre></td></tr></table></figure></p>\n<p>81、异步加载的方式<br>  (1) defer，只支持IE</p>\n<p>  (2) async：</p>\n<p>  (3) 创建script，插入到DOM中，加载完毕后callBack</p>\n<pre><code>documen.write和 innerHTML的区别\n\ndocument.write只能重绘整个页面\n\ninnerHTML可以重绘页面的一部分\n</code></pre><p>82、告诉我答案是多少？<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">(function(x)&#123;</div><div class=\"line\"></div><div class=\"line\">    delete x;</div><div class=\"line\"></div><div class=\"line\">    alert(x);</div><div class=\"line\"></div><div class=\"line\">&#125;)(1+5);</div></pre></td></tr></table></figure></p>\n<p>函数参数无法delete删除，delete只能删除通过for in访问的属性。</p>\n<p>当然，删除失败也不会报错，所以代码运行会弹出“1”。</p>\n<p>83、JS中的call()和apply()方法的区别？<br>例子中用 add 来替换 sub，add.call(sub,3,1) == add(3,1) ，所以运行结果为：alert(4);</p>\n<p>注意：js 中的函数其实是对象，函数名是对 Function 对象的引用。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">function add(a,b)&#123;</div><div class=\"line\"></div><div class=\"line\">    alert(a+b);</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function sub(a,b)&#123;</div><div class=\"line\"></div><div class=\"line\">    alert(a-b);</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">add.call(sub,3,1);</div></pre></td></tr></table></figure></p>\n<p>84、Jquery与jQuery UI 有啥区别？</p>\n<p>jQuery是一个js库，主要提供的功能是选择器，属性修改和事件绑定等等。</p>\n<p>jQuery UI则是在jQuery的基础上，利用jQuery的扩展性，设计的插件。</p>\n<p>提供了一些常用的界面元素，诸如对话框、拖动行为、改变大小行为等等</p>\n<p>85、jquery 中如何将数组转化为json字符串，然后再转化回来？<br>jQuery中没有提供这个功能，所以你需要先编写两个jQuery的扩展：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.fn.stringifyArray = function(array) &#123;</div><div class=\"line\"></div><div class=\"line\">    return JSON.stringify(array)</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">$.fn.parseArray = function(array) &#123;</div><div class=\"line\"></div><div class=\"line\">    return JSON.parse(array)</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<pre><code>然后调用：\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(&quot;&quot;).stringifyArray(array)</div></pre></td></tr></table></figure>\n<p>86、JavaScript中的作用域与变量声明提升？<br>其他部分</p>\n<p>（HTTP、正则、优化、重构、响应式、移动端、团队协作、SEO、UED、职业生涯）</p>\n<pre><code>基于Class的选择性的性能相对于Id选择器开销很大，因为需遍历所有DOM元素。\n\n频繁操作的DOM，先缓存起来再操作。用Jquery的链式调用更好。  \n\n 比如：var str=$(&quot;a&quot;).attr(&quot;href&quot;);\n\nfor (var i = size; i &lt; arr.length; i++) {}\n\n for 循环每一次循环都查找了数组 (arr) 的.length 属性，在开始循环的时候设置一个变量来存储这个数字，可以让循环跑得更快：\n\n for (var i = size, length = arr.length; i &lt; length; i++) {}\n</code></pre><p>87、前端开发的优化问题（看雅虎14条性能优化原则）。<br>  （1） 减少http请求次数：CSS Sprites, JS、CSS源码压缩、图片大小控制合适；网页Gzip，CDN托管，data缓存 ，图片服务器。</p>\n<p>  （2） 前端模板 JS+数据，减少由于HTML标签导致的带宽浪费，前端用变量保存AJAX请求结果，每次操作本地变量，不用请求，减少请求次数</p>\n<p>  （3） 用innerHTML代替DOM操作，减少DOM操作次数，优化javascript性能。</p>\n<p>  （4） 当需要设置的样式很多时设置className而不是直接操作style。</p>\n<p>  （5） 少用全局变量、缓存DOM节点查找的结果。减少IO读取操作。</p>\n<p>  （6） 避免使用CSS Expression（css表达式)又称Dynamic properties(动态属性)。</p>\n<p>  （7） 图片预加载，将样式表放在顶部，将脚本放在底部  加上时间戳。</p>\n<p>  （8） 避免在页面的主体布局中使用table，table要等其中的内容完全下载之后才会显示出来，显示比div+css布局慢。</p>\n<p>88、http状态码有那些？分别代表是什么意思？<br>    100-199 用于指定客户端应相应的某些动作。</p>\n<pre><code>200-299 用于表示请求成功。\n\n300-399 用于已经移动的文件并且常被包含在定位头信息中指定新的地址信息。\n</code></pre><p>400-499 用于指出客户端的错误。</p>\n<p>400  语义有误，当前请求无法被服务器理解。</p>\n<p>401  当前请求需要用户验证</p>\n<p>403  服务器已经理解请求，但是拒绝执行它。</p>\n<p>500-599 用于支持服务器错误。</p>\n<p>503 – 服务不可用</p>\n<p>89、一个页面从输入 URL 到页面加载显示完成，这个过程中都发生了什么？（流程说的越详细越好）<br>    要熟悉前后端的通信流程，最好把动态网站的背后细节也介绍一遍</p>\n<p>八、流行框架<br>1、JQuery的源码看过吗？能不能简单概况一下它的实现原理？<br>考察学习知识的态度，是否仅仅是停留在使用层面，要知其然知其所以然</p>\n<p>2、jQuery.fn的init方法返回的this指的是什么对象？为什么要返回this？<br>this执行init构造函数自身，其实就是jQuery实例对象，返回this是为了实现jQuery的链式操作</p>\n<p>3、jquery中如何将数组转化为json字符串，然后再转化回来？<br>$.parseJSON(‘{“name”:”John”}’);</p>\n<p>4、jQuery 的属性拷贝(extend)的实现原理是什么，如何实现深拷贝？<br>递归赋值</p>\n<p>5、jquery.extend 与 jquery.fn.extend的区别？<br>Jquery.extend用来扩展jQuery对象本身；jquery.fn.extend用来扩展jQuery实例</p>\n<p>6、谈一下Jquery中的bind(),live(),delegate(),on()的区别？<br>7、JQuery一个对象可以同时绑定多个事件，这是如何实现的？<br>可以同时绑定多个事件，低层实现原理是使用addEventListner与attachEvent兼容处理做事件注册</p>\n<p>10、Jquery与jQuery UI有啥区别？<br>jQuery是操作dom的框架，jQueryUI是基于jQuery做的一个UI组件库</p>\n<p>11、jQuery和Zepto的区别？各自的使用场景？<br>jQuery主要用于pc端，当然有对应的jQuerymobile用于移动端，zepto比jQuery更加小巧，主要用于移动端</p>\n<p>12、针对 jQuery 的优化方法？<br>优先使用ID选择器</p>\n<p>在class前使用tag(标签名)</p>\n<p>给选择器一个上下文</p>\n<p>慎用 .live()方法（应该说尽量不要使用）</p>\n<p>使用data()方法存储临时变量</p>\n<p>13、Zepto的点透问题如何解决？<br>点透主要是由于两个div重合，例如：一个div调用show()，一个div调用hide()；这个时候当点击上面的div的时候就会影响到下面的那个div；</p>\n<p>解决办法主要有2种：</p>\n<p>1.github上有一个叫做fastclick的库，它也能规避移动设备上click事件的延迟响应，<code>https://github.com/ftlabs/fastclick</code></p>\n<p>将它用script标签引入页面（该库支持AMD，于是你也可以按照AMD规范，用诸如require.js的模块加载器引入），并且在dom ready时初始化在body上，</p>\n<p>2.根据分析，如果不引入其它类库，也不想自己按照上述fastclcik的思路再开发一套东西，需要1.一个优先于下面的“divClickUnder”捕获的事件；2.并且通过这个事件阻止掉默认行为（下面的“divClickUnder”对click事件的捕获，在iOS的safari，click的捕获被认为和滚屏、点击输入框弹起键盘等一样，是一种浏览器默认行为，即可以被event.preventDefault()阻止的行为）。</p>\n<p>12、知道各种JS框架(Angular, Backbone, Ember, React, Meteor, Knockout…)么? 能讲出他们各自的优点和缺点么?<br>知识面的宽度，流行框架要多多熟悉</p>\n<p>13、Underscore 对哪些 JS 原生对象进行了扩展以及提供了哪些好用的函数方法？<br>Underscore的熟悉程度</p>\n<p>14、使用过angular吗？angular中的过滤器是干什么用的<br>在表达式中转换数据<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;p&gt;姓名为 &#123;&#123; lastName | uppercase &#125;&#125;&lt;/p&gt;</div></pre></td></tr></table></figure></p>\n<p>currency，是什么过滤器——格式化数字为货币格式，单位是$符。</p>\n<p>九、移动APP开发<br>1、移动端最小触控区域是多大？<br>移动端的点击事件的有延迟，时间是多久，为什么会有？ 怎么解决这个延时？（click 有 300ms 延迟,为了实现safari的双击事件的设计，浏览器要知道你是不是要双击操作。）</p>\n<p>十、NodeJs<br>1、对Node的优点和缺点提出了自己的看法：<br>（优点）因为Node是基于事件驱动和无阻塞的，所以非常适合处理并发请求，</p>\n<p>因此构建在Node上的代理服务器相比其他技术实现（如Ruby）的服务器表现要好得多。</p>\n<p>此外，与Node代理服务器交互的客户端代码是由javascript语言编写的，</p>\n<p>因此客户端和服务器端都用同一种语言编写，这是非常美妙的事情。</p>\n<p>（缺点）Node是一个相对新的开源项目，所以不太稳定，它总是一直在变，</p>\n<p>而且缺少足够多的第三方库支持。看起来，就像是Ruby/Rails当年的样子。</p>\n<p>2、需求：实现一个页面操作不会整页刷新的网站，并且能在浏览器前进、后退时正确响应。给出你的技术实现方案？<br>至少给出自己的思路（url-hash,可以使用已有的一些框架history.js等）</p>\n<p>6、Node.js的适用场景？<br>1)、实时应用：如在线聊天，实时通知推送等等（如socket.io）</p>\n<p>2)、分布式应用：通过高效的并行I/O使用已有的数据</p>\n<p>3)、工具类应用：海量的工具，小到前端压缩部署（如grunt），大到桌面图形界面应用程序</p>\n<p>4)、游戏类应用：游戏领域对实时和并发有很高的要求（如网易的pomelo框架）</p>\n<p>5)、利用稳定接口提升Web渲染能力</p>\n<p>6)、前后端编程语言环境统一：前端开发人员可以非常快速地切入到服务器端的开发（如著名的纯Javascript全栈式MEAN架构）</p>\n<p>4、(如果会用node)知道route, middleware, cluster, nodemon, pm2, server-side rendering么?<br>Nodejs相关概念的理解程度</p>\n<p>7、解释一下 Backbone 的 MVC 实现方式？<br>流行的MVC架构模式</p>\n<p>8、什么是“前端路由”?什么时候适合使用“前端路由”? “前端路由”有哪些优点和缺点?<br>熟悉前后端通信相关知识</p>\n<p>7、对Node的优点和缺点提出了自己的看法？<br>优点：</p>\n<ol>\n<li><p>因为Node是基于事件驱动和无阻塞的，所以非常适合处理并发请求，因此构建在Node上的代理服务器相比其他技术实现（如Ruby）的服务器表现要好得多。</p>\n</li>\n<li><p>与Node代理服务器交互的客户端代码是由javascript语言编写的，因此客户端和服务器端都用同一种语言编写，这是非常美妙的事情。</p>\n</li>\n</ol>\n<p>缺点：</p>\n<ol>\n<li><p>Node是一个相对新的开源项目，所以不太稳定，它总是一直在变。</p>\n</li>\n<li><p>缺少足够多的第三方库支持。看起来，就像是Ruby/Rails当年的样子（第三方库现在已经很丰富了，所以这个缺点可以说不存在了）。</p>\n</li>\n</ol>\n<p>十一、前端概括性问题<br>1、常使用的库有哪些？常用的前端开发工具？开发过什么应用或组件？<br>使用率较高的框架有jQuery、YUI、Prototype、Dojo、Ext.js、Mootools等。尤其是jQuery，超过91%。</p>\n<p>轻量级框架有Modernizr、underscore.js、backbone.js、Raphael.js等。（理解这些框架的功能、性能、设计原理）</p>\n<p>前端开发工具：Sublime Text 、Eclipse、Notepad、Firebug、HttpWatch、Yslow。</p>\n<p>开发过的插件：城市选择插件，汽车型号选择插件、幻灯片插件。弹出层。（写过开源程序，加载器，js引擎更好）</p>\n<p>9、对BFC规范的理解？<br>Formatting Context：指页面中的一个渲染区域，并且拥有一套渲染规则，他决定了其子元素如何定位，以及与其他元素的相互关系和作用。</p>\n<p>3、99%的网站都需要被重构是那本书上写的？<br>网站重构：应用web标准进行设计（第2版）</p>\n<p>4、WEB应用从服务器主动推送Data到客户端有那些方式？<br>    html5 websoket</p>\n<pre><code>WebSocket通过Flash\n\nXHR长时间连接\n\nXHR Multipart Streaming\n\n不可见的Iframe\n</code></pre><p><script>标签的长时间连接(可跨域)</p>\n<p>5、加班的看法<br>加班就像借钱，原则应当是——救急不救穷</p>\n<p>6、平时如何管理你的项目，如何设计突发大规模并发架构？<br>先期团队必须确定好全局样式（globe.css），编码模式(utf-8) 等</p>\n<p>编写习惯必须一致（例如都是采用继承式的写法，单样式都写成一行）；</p>\n<p>标注样式编写人，各模块都及时标注（标注关键样式调用的地方）；</p>\n<p>页面进行标注（例如 页面 模块 开始和结束）；</p>\n<p>CSS跟HTML 分文件夹并行存放，命名都得统一（例如style.css）</p>\n<p>JS 分文件夹存放 命民以该JS 功能为准英文翻译；</p>\n<p>图片采用整合的 images.png png8 格式文件使用 尽量整合在一起使用方便将来的管理</p>\n<p>7、那些操作会造成内存泄漏？<br>内存泄漏指任何对象在您不再拥有或需要它之后仍然存在。</p>\n<p>垃圾回收器定期扫描对象，并计算引用了每个对象的其他对象的数量。如果一个对象的引用数量为 0（没有其他对象引用过该对象），或对该对象的惟一引用是循环的，那么该对象的内存即可回收。</p>\n<p>setTimeout 的第一个参数使用字符串而非函数的话，会引发内存泄漏。</p>\n<p>闭包、控制台日志、循环（在两个对象彼此引用且彼此保留时，就会产生一个循环）</p>\n<p>8、你说你热爱前端，那么应该WEB行业的发展很关注吧？ 说说最近最流行的一些东西吧？<br>Node.js、MongoDB、npm、MVVM、MEAN、React、AngularJS</p>\n<p>9、你有了解我们公司吗？说说你的认识？<br>因为我想去阿里，所以我针对阿里的说</p>\n<p>最羡慕就是在双十一购物节，350.19亿元，每分钟支付79万笔。海量数据，居然无一漏单、无一故障。太厉害了。</p>\n<p>10、    移动端（比如：Android IOS）怎么做好用户体验?<br>融入自己的设计理念，注重用户体验，选择合适的技术</p>\n<p>11、    你所知道的页面性能优化方法有那些？<br>压缩、合并，减少请求，代码层析优化。。。</p>\n<p>12、    除了前端以外还了解什么其它技术么？你最最厉害的技能是什么？<br>知识面宽度，最好熟悉一些后台语言，比如php，展现出自己的技术两点</p>\n<p>13、AMD（Modules/Asynchronous-Definition）、CMD（Common Module Definition）规范区别？<br>14、谈谈你认为怎样做能使项目做的更好？<br>考虑问题的深入，不仅仅停留在完成任务上，要精益求精</p>\n<p>15、你对前端界面工程师这个职位是怎么样理解的？它的前景会怎么样？<br>表现出对前端的认同与兴趣，关注相关技术前沿</p>\n<p>16、php中下面哪个函数可以打开一个文件，以对文件进行读和写操作？<br>A.fget();B.file_open();C.fopen();D.open_file();</p>\n<p>17、php中rmdir可以直接删除文件夹吗？该目录必须是空的，而且要有相应的权限–来自api<br>A.任何文件夹都可以删除           B.空文件夹可以删除</p>\n<p>C.有权限的任何文件夹都可以删除   D.有权限的空文件夹可以删除</p>\n<p>18、phpinset和empty的区别，举例说明<br>1、empty函数</p>\n<p>用途：检测变量是否为空</p>\n<p>判断：如果 var 是非空或非零的值，则 empty() 返回 FALSE。换句话说，””、0、”0”、NULL、FALSE、array()、var $var; 以及没有任何属性的对象都将被认为是空的，如果 var 为空，则返回 TRUE。注意：empty() 只检测变量，检测任何非变量的东西都将导致解析错误。换句话说，后边的语句将不会起作用;</p>\n<p>2、isset函数</p>\n<p>用途：检测变量是否设置</p>\n<p>判断：检测变量是否设置，并且不是 NULL。如果已经使用 unset() 释放了一个变量之后，它将不再是 isset()。若使用 isset() 测试一个被设置成 NULL 的变量，将返回 FALSE。同时要注意的是一个NULL 字节（”\\0”）并不等同于 PHP 的 NULL 常数。</p>\n<p>19、php中<code>$_SERVER变量</code>中如何得到当前执行脚本路劲</p>\n<p>20、写一个php函数，要求两个日期字符串的天数差，如2012-02-05~2012-03-06的日期差数<br>21、一个衣柜中放了许多杂乱的衬衫，如果让你去整理一下，使得更容易找到你想要的衣服；你会怎么做？请写出你的做法和思路？<br>22、如何优化网页加载速度？<br>   1.减少css，js文件数量及大小(减少重复性代码，代码重复利用)，压缩CSS和Js代码</p>\n<p>   2.图片的大小</p>\n<p>   3.把css样式表放置顶部，把js放置页面底部</p>\n<p>   4.减少http请求数</p>\n<p>   5.使用外部 Js 和 CSS</p>\n<p>23、工作流程，你怎么来实现页面设计图，你认为前端应该如何高质量完成工作?<br>熟悉相关设计规范，自己总结的一些经验</p>\n<p>24、介绍项目经验、合作开发、独立开发。<br>团队协作，个人能力。实践经验</p>\n<p>25、开发过程中遇到困难，如何解决。<br>考察解决问题的能力</p>\n<p>26、对前端界面工程师这个职位是怎么样理解的？它的前景会怎么样？<br>    前端是最贴近用户的程序员，比后端、数据库、产品经理、运营、安全都近。</p>\n<pre><code>1、实现界面交互\n\n2、提升用户体验\n\n3、有了Node.js，前端可以实现服务端的一些事情\n</code></pre><p>前端是最贴近用户的程序员，前端的能力就是能让产品从 90分进化到 100 分，甚至更好，</p>\n<p>参与项目，快速高质量完成实现效果图，精确到1px；</p>\n<p>与团队成员，UI设计，产品经理的沟通；</p>\n<p>做好的页面结构，页面重构和用户体验；</p>\n<p>处理hack，兼容、写出优美的代码格式；</p>\n<p>针对服务器的优化、拥抱最新前端技术。</p>\n<p>其它相关的加分项：</p>\n<pre><code>1. 都使用和了解过哪些编辑器?都使用和了解过哪些日常工具?\n\n2. 都知道有哪些浏览器内核?开发过的项目都兼容哪些浏览器?\n\n3. 瀑布流布局或者流式布局是否有了解\n\n4. HTML5都有哪些新的API?\n\n5. 都用过什么代码调试工具?\n\n6. 是否有接触过或者了解过重构。\n</code></pre><p>7.你遇到过比较难的技术问题是？你是如何解决的？</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cj5naxw380000fcxed4ug6fji","category_id":"cj5naxw3h0004fcxenshmxu5g","_id":"cj5naxw43000ffcxenm35mrrz"},{"post_id":"cj5naxw3e0002fcxest0c979w","category_id":"cj5naxw3z000bfcxebyi3ifph","_id":"cj5naxw4y001bfcxe3x7dack9"},{"post_id":"cj5naxw3e0002fcxest0c979w","category_id":"cj5naxw4q0010fcxeohtgecvg","_id":"cj5naxw4z001ffcxeyrkkncp6"},{"post_id":"cj5naxw3l0006fcxeopfo7vuy","category_id":"cj5naxw47000hfcxegvlbshc8","_id":"cj5naxw5c001sfcxedbei27zv"},{"post_id":"cj5naxw3l0006fcxeopfo7vuy","category_id":"cj5naxw54001ifcxedp0ywh5q","_id":"cj5naxw5f001vfcxe0sshgy5q"},{"post_id":"cj5naxw49000lfcxeaz0d0u3e","category_id":"cj5naxw3z000bfcxebyi3ifph","_id":"cj5naxw5j001zfcxeoqo2518p"},{"post_id":"cj5naxw49000lfcxeaz0d0u3e","category_id":"cj5naxw59001nfcxeefi0j8o2","_id":"cj5naxw5m0023fcxeo6co6dz2"},{"post_id":"cj5naxw5d001ufcxeu3ejbpbu","category_id":"cj5naxw47000hfcxegvlbshc8","_id":"cj5naxw5p0026fcxe4tkrnl8e"},{"post_id":"cj5naxw5d001ufcxeu3ejbpbu","category_id":"cj5naxw54001ifcxedp0ywh5q","_id":"cj5naxw5q0029fcxe2fnzpn7x"},{"post_id":"cj5naxw3p0008fcxes6fbc75r","category_id":"cj5naxw47000hfcxegvlbshc8","_id":"cj5naxw5s002dfcxes13dq69f"},{"post_id":"cj5naxw3p0008fcxes6fbc75r","category_id":"cj5naxw54001ifcxedp0ywh5q","_id":"cj5naxw5t002hfcxevlu6xi6d"},{"post_id":"cj5naxw5o0025fcxewmqxufn8","category_id":"cj5naxw47000hfcxegvlbshc8","_id":"cj5naxw5t002jfcxeyo8zvw5f"},{"post_id":"cj5naxw5o0025fcxewmqxufn8","category_id":"cj5naxw54001ifcxedp0ywh5q","_id":"cj5naxw5u002mfcxel535byi6"},{"post_id":"cj5naxw5p0027fcxewsu5dtn5","category_id":"cj5naxw47000hfcxegvlbshc8","_id":"cj5naxw5v002ofcxe0onqv0td"},{"post_id":"cj5naxw5p0027fcxewsu5dtn5","category_id":"cj5naxw54001ifcxedp0ywh5q","_id":"cj5naxw5w002rfcxeigdvupsi"},{"post_id":"cj5naxw5r002bfcxeyftgezyc","category_id":"cj5naxw47000hfcxegvlbshc8","_id":"cj5naxw5w002tfcxejv9p49g3"},{"post_id":"cj5naxw5r002bfcxeyftgezyc","category_id":"cj5naxw54001ifcxedp0ywh5q","_id":"cj5naxw5x002vfcxe769zx9fo"},{"post_id":"cj5naxw5s002efcxempxqsqp4","category_id":"cj5naxw47000hfcxegvlbshc8","_id":"cj5naxw5y002xfcxendfxoeiq"},{"post_id":"cj5naxw5s002efcxempxqsqp4","category_id":"cj5naxw54001ifcxedp0ywh5q","_id":"cj5naxw5z0030fcxedn1cmlt2"},{"post_id":"cj5naxw4j000vfcxeds3rzm32","category_id":"cj5naxw47000hfcxegvlbshc8","_id":"cj5naxw5z0033fcxepit5sy8v"},{"post_id":"cj5naxw4j000vfcxeds3rzm32","category_id":"cj5naxw5u002lfcxebua0jkbq","_id":"cj5naxw600035fcxekzngp37v"},{"post_id":"cj5naxw41000efcxe8n9us1zh","category_id":"cj5naxw4k000wfcxe1prh8x97","_id":"cj5naxw600037fcxe1r55opvx"},{"post_id":"cj5naxw41000efcxe8n9us1zh","category_id":"cj5naxw5y002zfcxebv2tl2xx","_id":"cj5naxw61003afcxep47wy3vi"},{"post_id":"cj5naxw4r0011fcxe5islqqyd","category_id":"cj5naxw47000hfcxegvlbshc8","_id":"cj5naxw61003dfcxer7ywxezg"},{"post_id":"cj5naxw4r0011fcxe5islqqyd","category_id":"cj5naxw54001ifcxedp0ywh5q","_id":"cj5naxw62003gfcxeasuvflti"},{"post_id":"cj5naxw4w0016fcxe0x4kfdvb","category_id":"cj5naxw47000hfcxegvlbshc8","_id":"cj5naxw65003lfcxejo7o56pu"},{"post_id":"cj5naxw4w0016fcxe0x4kfdvb","category_id":"cj5naxw61003efcxedyncpk74","_id":"cj5naxw67003ofcxee0r50yiy"},{"post_id":"cj5naxw4x0019fcxe34rv8ld6","category_id":"cj5naxw47000hfcxegvlbshc8","_id":"cj5naxw67003pfcxe37jpgpbw"},{"post_id":"cj5naxw4x0019fcxe34rv8ld6","category_id":"cj5naxw5u002lfcxebua0jkbq","_id":"cj5naxw69003tfcxeh6qgh2kt"},{"post_id":"cj5naxw44000gfcxegz06wm5m","category_id":"cj5naxw4k000wfcxe1prh8x97","_id":"cj5naxw69003vfcxeh299guzq"},{"post_id":"cj5naxw44000gfcxegz06wm5m","category_id":"cj5naxw65003mfcxe3azk5cit","_id":"cj5naxw6d003yfcxeajvatxza"},{"post_id":"cj5naxw4y001cfcxe590rcmk6","category_id":"cj5naxw47000hfcxegvlbshc8","_id":"cj5naxw6f0040fcxeovhqfk3b"},{"post_id":"cj5naxw4y001cfcxe590rcmk6","category_id":"cj5naxw54001ifcxedp0ywh5q","_id":"cj5naxw6f0043fcxekcneg48z"},{"post_id":"cj5naxw4z001gfcxedz34l7sk","category_id":"cj5naxw47000hfcxegvlbshc8","_id":"cj5naxw6g0044fcxefj8xob11"},{"post_id":"cj5naxw4z001gfcxedz34l7sk","category_id":"cj5naxw54001ifcxedp0ywh5q","_id":"cj5naxw6h0048fcxer6acfv37"},{"post_id":"cj5naxw47000jfcxewfoud2fr","category_id":"cj5naxw47000hfcxegvlbshc8","_id":"cj5naxw6i0049fcxee5mcc7gc"},{"post_id":"cj5naxw47000jfcxewfoud2fr","category_id":"cj5naxw4z001dfcxec1zzjl8i","_id":"cj5naxw6j004dfcxeqglqvejb"},{"post_id":"cj5naxw47000jfcxewfoud2fr","category_id":"cj5naxw6f0041fcxepcevafpl","_id":"cj5naxw6l004efcxe82kv4ups"},{"post_id":"cj5naxw53001hfcxe8s3doxwn","category_id":"cj5naxw47000hfcxegvlbshc8","_id":"cj5naxw6n004hfcxemy2ntjp8"},{"post_id":"cj5naxw53001hfcxe8s3doxwn","category_id":"cj5naxw54001ifcxedp0ywh5q","_id":"cj5naxw6o004jfcxe5aj2s6x3"},{"post_id":"cj5naxw5a001pfcxe3omb601l","category_id":"cj5naxw47000hfcxegvlbshc8","_id":"cj5naxw6r004qfcxed9d8deuj"},{"post_id":"cj5naxw5a001pfcxe3omb601l","category_id":"cj5naxw6p004kfcxeqb53s7cz","_id":"cj5naxw6s004tfcxe5n9b2kfq"},{"post_id":"cj5naxw5b001rfcxetq7bviti","category_id":"cj5naxw47000hfcxegvlbshc8","_id":"cj5naxw6t004vfcxerk06zfph"},{"post_id":"cj5naxw5b001rfcxetq7bviti","category_id":"cj5naxw6q004nfcxe4pq4a4wt","_id":"cj5naxw6u004xfcxe7uof2o2o"},{"post_id":"cj5naxw4c000ofcxel5hhp8vg","category_id":"cj5naxw5c001tfcxe49b0dqld","_id":"cj5naxw6u004zfcxeqqaci8j5"},{"post_id":"cj5naxw4c000ofcxel5hhp8vg","category_id":"cj5naxw6r004rfcxev0r516n0","_id":"cj5naxw6v0051fcxe8o5kquqr"},{"post_id":"cj5naxw4d000qfcxe26c89kc4","category_id":"cj5naxw5c001tfcxe49b0dqld","_id":"cj5naxw6x0053fcxehxf4yd5b"},{"post_id":"cj5naxw4d000qfcxe26c89kc4","category_id":"cj5naxw6u0050fcxeswkpg40p","_id":"cj5naxw6y0055fcxeszv8mmuk"},{"post_id":"cj5naxw3x000afcxe57bhss4c","category_id":"cj5naxw47000hfcxegvlbshc8","_id":"cj5naxw6y0056fcxe8tvz74cc"},{"post_id":"cj5naxw3x000afcxe57bhss4c","category_id":"cj5naxw5s002ffcxe8aezqr3s","_id":"cj5naxw6z0058fcxeh6j67ij2"},{"post_id":"cj5naxw3x000afcxe57bhss4c","category_id":"cj5naxw6v0052fcxegytqnbcv","_id":"cj5naxw6z0059fcxeu58h9qal"},{"post_id":"cj5naxw4m000yfcxef1ml4q6h","category_id":"cj5naxw47000hfcxegvlbshc8","_id":"cj5naxw70005bfcxe6shz5qwh"},{"post_id":"cj5naxw4m000yfcxef1ml4q6h","category_id":"cj5naxw4z001dfcxec1zzjl8i","_id":"cj5naxw70005cfcxezl6svra3"},{"post_id":"cj5naxw4m000yfcxef1ml4q6h","category_id":"cj5naxw6y0054fcxe8zkoctfu","_id":"cj5naxw71005efcxegc2nnzh1"},{"post_id":"cj5naxw4n000zfcxe0uwpq3u3","category_id":"cj5naxw5c001tfcxe49b0dqld","_id":"cj5naxw71005ffcxeeitp8cwm"},{"post_id":"cj5naxw4n000zfcxe0uwpq3u3","category_id":"cj5naxw6y0057fcxed1sgsoiz","_id":"cj5naxw72005hfcxeq0bpshxo"},{"post_id":"cj5naxw4u0014fcxepaanjsfy","category_id":"cj5naxw47000hfcxegvlbshc8","_id":"cj5naxw72005ifcxepgjnm198"},{"post_id":"cj5naxw4u0014fcxepaanjsfy","category_id":"cj5naxw5s002ffcxe8aezqr3s","_id":"cj5naxw72005jfcxe1dc6l93p"},{"post_id":"cj5naxw4u0014fcxepaanjsfy","category_id":"cj5naxw6z005afcxet9hesrzp","_id":"cj5naxw74005lfcxe837mqc01"},{"post_id":"cj5naxw55001kfcxee6cu401o","category_id":"cj5naxw47000hfcxegvlbshc8","_id":"cj5naxw74005mfcxeyww3b4dv"},{"post_id":"cj5naxw55001kfcxee6cu401o","category_id":"cj5naxw5s002ffcxe8aezqr3s","_id":"cj5naxw74005nfcxe1sv5i1tt"},{"post_id":"cj5naxw55001kfcxee6cu401o","category_id":"cj5naxw6z005afcxet9hesrzp","_id":"cj5naxw74005ofcxencahlxoq"},{"post_id":"cj5naxw58001mfcxedpffyzbf","category_id":"cj5naxw6l004ffcxeny9n74po","_id":"cj5naxw75005pfcxexe27e91f"},{"post_id":"cj5naxw58001mfcxedpffyzbf","category_id":"cj5naxw71005gfcxew0evhhcy","_id":"cj5naxw76005qfcxenec807k1"},{"post_id":"cj5naxw5k0020fcxeauubqnx9","category_id":"cj5naxw6l004ffcxeny9n74po","_id":"cj5naxw76005rfcxe62x0r98y"},{"post_id":"cj5naxw5k0020fcxeauubqnx9","category_id":"cj5naxw72005kfcxeyijdl0r2","_id":"cj5naxw76005sfcxeagkb3rsh"},{"post_id":"cj5naxwcq005ufcxeb27gjioo","category_id":"cj5naxw47000hfcxegvlbshc8","_id":"cj5naxwcu005wfcxe6v7r97la"},{"post_id":"cj5naxwfu005yfcxe737by8hn","category_id":"cj5naxw47000hfcxegvlbshc8","_id":"cj5naxwfw0060fcxem1a9zaj4"},{"post_id":"cj5naxwfu005yfcxe737by8hn","category_id":"cj5naxw54001ifcxedp0ywh5q","_id":"cj5naxwfw0061fcxebpyrhc0f"}],"PostTag":[{"post_id":"cj5naxw380000fcxed4ug6fji","tag_id":"cj5naxw3k0005fcxeqfvy3dhc","_id":"cj5naxw40000dfcxesmx0pz50"},{"post_id":"cj5naxw3e0002fcxest0c979w","tag_id":"cj5naxw3z000cfcxeqm8a0fo2","_id":"cj5naxw49000kfcxecbn6cnb4"},{"post_id":"cj5naxw3l0006fcxeopfo7vuy","tag_id":"cj5naxw47000ifcxek7t3bz4x","_id":"cj5naxw4d000pfcxepmxsc07i"},{"post_id":"cj5naxw3p0008fcxes6fbc75r","tag_id":"cj5naxw47000ifcxek7t3bz4x","_id":"cj5naxw4i000ufcxe4tel6k0b"},{"post_id":"cj5naxw3x000afcxe57bhss4c","tag_id":"cj5naxw4g000sfcxed28alf4b","_id":"cj5naxw4t0013fcxe6jwk0gxi"},{"post_id":"cj5naxw3x000afcxe57bhss4c","tag_id":"cj5naxw4l000xfcxe9e3knq3j","_id":"cj5naxw4v0015fcxe9hecrwh0"},{"post_id":"cj5naxw41000efcxe8n9us1zh","tag_id":"cj5naxw4t0012fcxe6fk0unvy","_id":"cj5naxw4x001afcxerh9jgglv"},{"post_id":"cj5naxw44000gfcxegz06wm5m","tag_id":"cj5naxw4w0018fcxe91qtvk4h","_id":"cj5naxw57001lfcxecitsscaw"},{"post_id":"cj5naxw44000gfcxegz06wm5m","tag_id":"cj5naxw4z001efcxecdj1s6ye","_id":"cj5naxw5a001ofcxevf702mg1"},{"post_id":"cj5naxw47000jfcxewfoud2fr","tag_id":"cj5naxw54001jfcxez82vckqs","_id":"cj5naxw5j001yfcxedxg1ajhs"},{"post_id":"cj5naxw47000jfcxewfoud2fr","tag_id":"cj5naxw5b001qfcxeu195g1xf","_id":"cj5naxw5l0022fcxe495i2rny"},{"post_id":"cj5naxw49000lfcxeaz0d0u3e","tag_id":"cj5naxw5f001wfcxez0vgdvdh","_id":"cj5naxw5s002cfcxex9lw61xa"},{"post_id":"cj5naxw49000lfcxeaz0d0u3e","tag_id":"cj5naxw5n0024fcxenyp0jkqs","_id":"cj5naxw5t002gfcxero4q9j5u"},{"post_id":"cj5naxw4c000ofcxel5hhp8vg","tag_id":"cj5naxw5r002afcxeck04i176","_id":"cj5naxw5t002kfcxea86ien5p"},{"post_id":"cj5naxw4d000qfcxe26c89kc4","tag_id":"cj5naxw5t002ifcxe71ipgy42","_id":"cj5naxw5v002pfcxepmsajopt"},{"post_id":"cj5naxw4m000yfcxef1ml4q6h","tag_id":"cj5naxw54001jfcxez82vckqs","_id":"cj5naxw5y002yfcxe11r8g9bc"},{"post_id":"cj5naxw4m000yfcxef1ml4q6h","tag_id":"cj5naxw5w002sfcxeo0iuphwu","_id":"cj5naxw5z0031fcxecjun2d0f"},{"post_id":"cj5naxw4n000zfcxe0uwpq3u3","tag_id":"cj5naxw5t002ifcxe71ipgy42","_id":"cj5naxw600038fcxeul0fjonr"},{"post_id":"cj5naxw4n000zfcxe0uwpq3u3","tag_id":"cj5naxw5z0032fcxe5ttkehxq","_id":"cj5naxw61003bfcxe7hp6fefm"},{"post_id":"cj5naxw4r0011fcxe5islqqyd","tag_id":"cj5naxw600036fcxejz8iu7ro","_id":"cj5naxw62003ffcxe7v01butg"},{"post_id":"cj5naxw4u0014fcxepaanjsfy","tag_id":"cj5naxw61003cfcxe99cobwn6","_id":"cj5naxw64003jfcxebosox17f"},{"post_id":"cj5naxw4w0016fcxe0x4kfdvb","tag_id":"cj5naxw62003hfcxeiyig9ljb","_id":"cj5naxw66003nfcxee6hvahoy"},{"post_id":"cj5naxw4z001gfcxedz34l7sk","tag_id":"cj5naxw65003kfcxezew28iai","_id":"cj5naxw69003sfcxefetppykq"},{"post_id":"cj5naxw53001hfcxe8s3doxwn","tag_id":"cj5naxw65003kfcxezew28iai","_id":"cj5naxw6d003xfcxeb3ajm2rh"},{"post_id":"cj5naxw55001kfcxee6cu401o","tag_id":"cj5naxw61003cfcxe99cobwn6","_id":"cj5naxw6f0042fcxe5puy6pax"},{"post_id":"cj5naxw5a001pfcxe3omb601l","tag_id":"cj5naxw6e003zfcxe7asq21kb","_id":"cj5naxw6h0047fcxegcacsd39"},{"post_id":"cj5naxw5b001rfcxetq7bviti","tag_id":"cj5naxw6g0045fcxetj5dck9q","_id":"cj5naxw6j004cfcxefcy7j3l5"},{"post_id":"cj5naxw5d001ufcxeu3ejbpbu","tag_id":"cj5naxw6i004afcxe238c4l16","_id":"cj5naxw6o004ifcxe76y7y7bt"},{"post_id":"cj5naxw5k0020fcxeauubqnx9","tag_id":"cj5naxw6m004gfcxeti1bjyhi","_id":"cj5naxw6q004mfcxec0s7fuj1"},{"post_id":"cj5naxw5o0025fcxewmqxufn8","tag_id":"cj5naxw6p004lfcxe8r58obun","_id":"cj5naxw6r004pfcxeq79u32ja"},{"post_id":"cj5naxw5r002bfcxeyftgezyc","tag_id":"cj5naxw6r004ofcxebrxq6nu9","_id":"cj5naxw6s004ufcxewydulzgy"},{"post_id":"cj5naxw5s002efcxempxqsqp4","tag_id":"cj5naxw6s004sfcxe7vh9j02t","_id":"cj5naxw6u004yfcxe6710uraf"},{"post_id":"cj5naxwcq005ufcxeb27gjioo","tag_id":"cj5naxwct005vfcxeh4rogacw","_id":"cj5naxwcu005xfcxexbx91w2k"},{"post_id":"cj5naxwfu005yfcxe737by8hn","tag_id":"cj5naxw47000ifcxek7t3bz4x","_id":"cj5naxwfv005zfcxeqiy0f1va"}],"Tag":[{"name":"PHP","_id":"cj5naxw3k0005fcxeqfvy3dhc"},{"name":"命令大全","_id":"cj5naxw3z000cfcxeqm8a0fo2"},{"name":"前端","_id":"cj5naxw47000ifcxek7t3bz4x"},{"name":"构建打包","_id":"cj5naxw4g000sfcxed28alf4b"},{"name":"gulp","_id":"cj5naxw4l000xfcxe9e3knq3j"},{"name":"hexo","_id":"cj5naxw4t0012fcxe6fk0unvy"},{"name":"服务器","_id":"cj5naxw4w0018fcxe91qtvk4h"},{"name":"自动化部署","_id":"cj5naxw4z001efcxecdj1s6ye"},{"name":"框架","_id":"cj5naxw54001jfcxez82vckqs"},{"name":"react","_id":"cj5naxw5b001qfcxeu195g1xf"},{"name":"命令行","_id":"cj5naxw5f001wfcxez0vgdvdh"},{"name":"shell","_id":"cj5naxw5n0024fcxenyp0jkqs"},{"name":"koa2","_id":"cj5naxw5r002afcxeck04i176"},{"name":"node","_id":"cj5naxw5t002ifcxe71ipgy42"},{"name":"backbone","_id":"cj5naxw5w002sfcxeo0iuphwu"},{"name":"websocket","_id":"cj5naxw5z0032fcxe5ttkehxq"},{"name":"断点续传","_id":"cj5naxw600036fcxejz8iu7ro"},{"name":"webpack","_id":"cj5naxw61003cfcxe99cobwn6"},{"name":"性能优化","_id":"cj5naxw62003hfcxeiyig9ljb"},{"name":"前端知识点","_id":"cj5naxw65003kfcxezew28iai"},{"name":"html5","_id":"cj5naxw6e003zfcxe7asq21kb"},{"name":"正则","_id":"cj5naxw6g0045fcxetj5dck9q"},{"name":"渲染机制","_id":"cj5naxw6i004afcxe238c4l16"},{"name":"用户体验设计","_id":"cj5naxw6m004gfcxeti1bjyhi"},{"name":"算法","_id":"cj5naxw6p004lfcxe8r58obun"},{"name":"移动端","_id":"cj5naxw6r004ofcxebrxq6nu9"},{"name":"缓存机制","_id":"cj5naxw6s004sfcxe7vh9j02t"},{"name":"知识图谱","_id":"cj5naxwct005vfcxeh4rogacw"}]}}